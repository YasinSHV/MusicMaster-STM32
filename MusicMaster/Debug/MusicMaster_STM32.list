
MusicMaster_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a964  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003830  0800aaf4  0800aaf4  0001aaf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e324  0800e324  000200c0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e324  0800e324  000200c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e324  0800e324  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e324  0800e324  0001e324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e328  0800e328  0001e328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0800e32c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c0  2**0
                  CONTENTS
 10 .bss          00000694  200000c0  200000c0  000200c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000754  20000754  000200c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d8aa  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003728  00000000  00000000  0003d99a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001868  00000000  00000000  000410c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001760  00000000  00000000  00042930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021860  00000000  00000000  00044090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e69a  00000000  00000000  000658f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8932  00000000  00000000  00083f8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014c8bc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000759c  00000000  00000000  0014c90c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c0 	.word	0x200000c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aadc 	.word	0x0800aadc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	0800aadc 	.word	0x0800aadc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2uiz>:
 8000618:	004a      	lsls	r2, r1, #1
 800061a:	d211      	bcs.n	8000640 <__aeabi_d2uiz+0x28>
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000620:	d211      	bcs.n	8000646 <__aeabi_d2uiz+0x2e>
 8000622:	d50d      	bpl.n	8000640 <__aeabi_d2uiz+0x28>
 8000624:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d40e      	bmi.n	800064c <__aeabi_d2uiz+0x34>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	fa23 f002 	lsr.w	r0, r3, r2
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d102      	bne.n	8000652 <__aeabi_d2uiz+0x3a>
 800064c:	f04f 30ff 	mov.w	r0, #4294967295
 8000650:	4770      	bx	lr
 8000652:	f04f 0000 	mov.w	r0, #0
 8000656:	4770      	bx	lr

08000658 <hashString>:
	struct DictionaryNode **buckets;
	int size;
};

// Hash function for string keys
unsigned int hashString(const char *key, int size) {
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
	unsigned int hash = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
	while (*key) {
 8000666:	e007      	b.n	8000678 <hashString+0x20>
		hash = (hash << 5) + *key++;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	015a      	lsls	r2, r3, #5
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	1c59      	adds	r1, r3, #1
 8000670:	6079      	str	r1, [r7, #4]
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	4413      	add	r3, r2
 8000676:	60fb      	str	r3, [r7, #12]
	while (*key) {
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1f3      	bne.n	8000668 <hashString+0x10>
	}
	return hash % size;
 8000680:	683a      	ldr	r2, [r7, #0]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	fbb3 f1f2 	udiv	r1, r3, r2
 8000688:	fb01 f202 	mul.w	r2, r1, r2
 800068c:	1a9b      	subs	r3, r3, r2
}
 800068e:	4618      	mov	r0, r3
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <initDictionary>:

// Initialize dictionary
Dictionary* initDictionary(int size) {
 800069a:	b580      	push	{r7, lr}
 800069c:	b084      	sub	sp, #16
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
	Dictionary *dict = malloc(sizeof(Dictionary));
 80006a2:	2008      	movs	r0, #8
 80006a4:	f008 ff9e 	bl	80095e4 <malloc>
 80006a8:	4603      	mov	r3, r0
 80006aa:	60bb      	str	r3, [r7, #8]
	dict->buckets = malloc(size * sizeof(struct DictionaryNode*));
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f008 ff97 	bl	80095e4 <malloc>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	601a      	str	r2, [r3, #0]
	dict->size = size;
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < size; i++) {
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e009      	b.n	80006de <initDictionary+0x44>
		dict->buckets[i] = NULL;
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	4413      	add	r3, r2
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < size; i++) {
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	3301      	adds	r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	dbf1      	blt.n	80006ca <initDictionary+0x30>
	}
	return dict;
 80006e6:	68bb      	ldr	r3, [r7, #8]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <insert>:

// Insert key-value pair into dictionary
void insert(Dictionary *dict, const char *stringKey, struct Tone *tones,
		int numTones) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
 80006fc:	603b      	str	r3, [r7, #0]
	unsigned int index;
	struct DictionaryNode *newNode = malloc(sizeof(struct DictionaryNode));
 80006fe:	2014      	movs	r0, #20
 8000700:	f008 ff70 	bl	80095e4 <malloc>
 8000704:	4603      	mov	r3, r0
 8000706:	613b      	str	r3, [r7, #16]
	newNode->stringKey = strdup(stringKey);
 8000708:	68b8      	ldr	r0, [r7, #8]
 800070a:	f009 f919 	bl	8009940 <strdup>
 800070e:	4603      	mov	r3, r0
 8000710:	461a      	mov	r2, r3
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	601a      	str	r2, [r3, #0]
	newNode->tones = malloc(numTones * sizeof(struct Tone));
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	4618      	mov	r0, r3
 800071c:	f008 ff62 	bl	80095e4 <malloc>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	605a      	str	r2, [r3, #4]
	memcpy(newNode->tones, tones, numTones * sizeof(struct Tone));
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	6858      	ldr	r0, [r3, #4]
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	00db      	lsls	r3, r3, #3
 8000730:	461a      	mov	r2, r3
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	f008 ff5e 	bl	80095f4 <memcpy>
	newNode->numTones = numTones;
 8000738:	693b      	ldr	r3, [r7, #16]
 800073a:	683a      	ldr	r2, [r7, #0]
 800073c:	609a      	str	r2, [r3, #8]
	newNode->black_listed = 0;
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]

	if (stringKey != NULL) {
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d006      	beq.n	8000758 <insert+0x68>
		index = hashString(stringKey, dict->size);
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	4619      	mov	r1, r3
 8000750:	68b8      	ldr	r0, [r7, #8]
 8000752:	f7ff ff81 	bl	8000658 <hashString>
 8000756:	6178      	str	r0, [r7, #20]
	}

	newNode->next = dict->buckets[index];
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	4413      	add	r3, r2
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	611a      	str	r2, [r3, #16]
	dict->buckets[index] = newNode;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4413      	add	r3, r2
 8000772:	693a      	ldr	r2, [r7, #16]
 8000774:	601a      	str	r2, [r3, #0]
}
 8000776:	bf00      	nop
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <lookup>:

// Lookup value by key
struct Tone* lookup(Dictionary *dict, const char *stringKey, int *numTones,
		struct DictionaryNode **node) {
 800077e:	b580      	push	{r7, lr}
 8000780:	b086      	sub	sp, #24
 8000782:	af00      	add	r7, sp, #0
 8000784:	60f8      	str	r0, [r7, #12]
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	607a      	str	r2, [r7, #4]
 800078a:	603b      	str	r3, [r7, #0]
	unsigned int index;
	struct DictionaryNode *current;

	if (stringKey != NULL) {
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d02b      	beq.n	80007ea <lookup+0x6c>
		index = hashString(stringKey, dict->size);
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	4619      	mov	r1, r3
 8000798:	68b8      	ldr	r0, [r7, #8]
 800079a:	f7ff ff5d 	bl	8000658 <hashString>
 800079e:	6138      	str	r0, [r7, #16]
		current = dict->buckets[index];
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	693b      	ldr	r3, [r7, #16]
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4413      	add	r3, r2
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	617b      	str	r3, [r7, #20]
		while (current) {
 80007ae:	e019      	b.n	80007e4 <lookup+0x66>
			if (current->stringKey
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d012      	beq.n	80007de <lookup+0x60>
					&& strcmp(current->stringKey, stringKey) == 0) {
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	68b9      	ldr	r1, [r7, #8]
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fd06 	bl	80001d0 <strcmp>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d109      	bne.n	80007de <lookup+0x60>
				*numTones = current->numTones;
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	689a      	ldr	r2, [r3, #8]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	601a      	str	r2, [r3, #0]
				*node = current;
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	697a      	ldr	r2, [r7, #20]
 80007d6:	601a      	str	r2, [r3, #0]
				return current->tones;
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	e009      	b.n	80007f2 <lookup+0x74>
			}
			current = current->next;
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	691b      	ldr	r3, [r3, #16]
 80007e2:	617b      	str	r3, [r7, #20]
		while (current) {
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d1e2      	bne.n	80007b0 <lookup+0x32>
		}
	}

	*numTones = 0;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
	return NULL;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <getDictSize>:

int getDictSize(Dictionary *dict) {
 80007fa:	b480      	push	{r7}
 80007fc:	b083      	sub	sp, #12
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
	return dict->size;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	685b      	ldr	r3, [r3, #4]
}
 8000806:	4618      	mov	r0, r3
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <setBlacklisted>:

// Function to set black_listed flag on
void setBlacklisted(struct DictionaryNode *node) {
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
    node->black_listed = 1;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2201      	movs	r2, #1
 800081e:	60da      	str	r2, [r3, #12]
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <unsetBlacklisted>:

// Function to set black_listed flag off
void unsetBlacklisted(struct DictionaryNode *node) {
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
    node->black_listed = 0;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <isBlacklisted>:

// Function to check if a node is blacklisted
int isBlacklisted(struct DictionaryNode *node) {
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
    return node->black_listed;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	68db      	ldr	r3, [r3, #12]
}
 8000852:	4618      	mov	r0, r3
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
	...

08000860 <initializePlaylistOrder>:
#define REST      0

struct Dictionary *playlist = NULL;
char **playlistOrder;

void initializePlaylistOrder() {
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
    playlistOrder = (char **)malloc(10 * sizeof(char *));
 8000864:	2028      	movs	r0, #40	; 0x28
 8000866:	f008 febd 	bl	80095e4 <malloc>
 800086a:	4603      	mov	r3, r0
 800086c:	461a      	mov	r2, r3
 800086e:	4b02      	ldr	r3, [pc, #8]	; (8000878 <initializePlaylistOrder+0x18>)
 8000870:	601a      	str	r2, [r3, #0]
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200000e0 	.word	0x200000e0

0800087c <initTonesDictionary>:

void initTonesDictionary() {
 800087c:	b580      	push	{r7, lr}
 800087e:	f5ad 5d50 	sub.w	sp, sp, #13312	; 0x3400
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
    playlist = initDictionary(6);
 8000886:	2006      	movs	r0, #6
 8000888:	f7ff ff07 	bl	800069a <initDictionary>
 800088c:	4603      	mov	r3, r0
 800088e:	4a5b      	ldr	r2, [pc, #364]	; (80009fc <initTonesDictionary+0x180>)
 8000890:	6013      	str	r3, [r2, #0]
    initializePlaylistOrder();
 8000892:	f7ff ffe5 	bl	8000860 <initializePlaylistOrder>
    playlistOrder[0] = "super_mario_bros";
 8000896:	4b5a      	ldr	r3, [pc, #360]	; (8000a00 <initTonesDictionary+0x184>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a5a      	ldr	r2, [pc, #360]	; (8000a04 <initTonesDictionary+0x188>)
 800089c:	601a      	str	r2, [r3, #0]
    playlistOrder[1] = "hedwig_theme";
 800089e:	4b58      	ldr	r3, [pc, #352]	; (8000a00 <initTonesDictionary+0x184>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	3304      	adds	r3, #4
 80008a4:	4a58      	ldr	r2, [pc, #352]	; (8000a08 <initTonesDictionary+0x18c>)
 80008a6:	601a      	str	r2, [r3, #0]
    playlistOrder[2] = "doom";
 80008a8:	4b55      	ldr	r3, [pc, #340]	; (8000a00 <initTonesDictionary+0x184>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	3308      	adds	r3, #8
 80008ae:	4a57      	ldr	r2, [pc, #348]	; (8000a0c <initTonesDictionary+0x190>)
 80008b0:	601a      	str	r2, [r3, #0]
    playlistOrder[3] = "fur_elise";
 80008b2:	4b53      	ldr	r3, [pc, #332]	; (8000a00 <initTonesDictionary+0x184>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	330c      	adds	r3, #12
 80008b8:	4a55      	ldr	r2, [pc, #340]	; (8000a10 <initTonesDictionary+0x194>)
 80008ba:	601a      	str	r2, [r3, #0]
    playlistOrder[4] = "tetris";
 80008bc:	4b50      	ldr	r3, [pc, #320]	; (8000a00 <initTonesDictionary+0x184>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	3310      	adds	r3, #16
 80008c2:	4a54      	ldr	r2, [pc, #336]	; (8000a14 <initTonesDictionary+0x198>)
 80008c4:	601a      	str	r2, [r3, #0]
    playlistOrder[5] = "tokyo_drift";
 80008c6:	4b4e      	ldr	r3, [pc, #312]	; (8000a00 <initTonesDictionary+0x184>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	3314      	adds	r3, #20
 80008cc:	4a52      	ldr	r2, [pc, #328]	; (8000a18 <initTonesDictionary+0x19c>)
 80008ce:	601a      	str	r2, [r3, #0]

    // Example tones
    struct Tone super_mario_bros[]={{2637,306},{0,153},{2637,153},{0,153},{2093,153},{2637,153},{0,153},{3136,153},{0,459},{1586,153},{0,459},{2093,153},{0,306},{1586,153},{0,306},{1319,153},{0,306},{1760,153},{0,153},{1976,153},{0,153},{1865,153},{1760,153},{0,153},{1586,204},{2637,204},{3136,204},{3520,153},{0,153},{2794,153},{3136,153},{0,153},{2637,153},{0,153},{2093,153},{2349,153},{1976,153},{0,306},{2093,153},{0,306},{1586,153},{0,306},{1319,153},{0,306},{1760,153},{0,153},{1976,153},{0,153},{1865,153},{1760,153},{0,153},{1586,204},{2637,204},{3136,204},{3520,153},{0,153},{2794,153},{3136,153},{0,153},{2637,153},{0,153},{2093,153},{2349,153},{1976,153},{0,0}};
 80008d0:	f507 5350 	add.w	r3, r7, #13312	; 0x3400
 80008d4:	f103 0318 	add.w	r3, r3, #24
 80008d8:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80008dc:	4a4f      	ldr	r2, [pc, #316]	; (8000a1c <initTonesDictionary+0x1a0>)
 80008de:	4618      	mov	r0, r3
 80008e0:	4611      	mov	r1, r2
 80008e2:	f44f 7302 	mov.w	r3, #520	; 0x208
 80008e6:	461a      	mov	r2, r3
 80008e8:	f008 fe84 	bl	80095f4 <memcpy>
    struct Tone hedwig_theme[]={{REST,750},{NOTE_D4,374},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_G4,750},{NOTE_D5,374},{NOTE_C5,1124},{NOTE_A4,1124},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_F4,750},{NOTE_GS4,374},{NOTE_D4,2249},{NOTE_D4,374},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_G4,750},{NOTE_D5,374},{NOTE_F5,750},{NOTE_E5,374},{NOTE_DS5,750},{NOTE_B4,374},{NOTE_DS5,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_B4,374},{NOTE_G4,2249},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_DS5,750},{NOTE_D5,374},{NOTE_CS5,750},{NOTE_A4,374},{NOTE_AS4,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_D4,374},{NOTE_D5,1700},{REST,150},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_F5,750},{NOTE_E5,374},{NOTE_DS5,750},{NOTE_B4,374},{NOTE_DS5,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_AS4,374},{NOTE_G4,2249},{0,0}};
 80008ec:	f507 5350 	add.w	r3, r7, #13312	; 0x3400
 80008f0:	f103 0318 	add.w	r3, r3, #24
 80008f4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80008f8:	4a49      	ldr	r2, [pc, #292]	; (8000a20 <initTonesDictionary+0x1a4>)
 80008fa:	4618      	mov	r0, r3
 80008fc:	4611      	mov	r1, r2
 80008fe:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000902:	461a      	mov	r2, r3
 8000904:	f008 fe76 	bl	80095f4 <memcpy>
    struct Tone doom[]={{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_FS3,67},{NOTE_D3,67},{NOTE_B2,67},{NOTE_A3,67},{NOTE_FS3,67},{NOTE_B2,67},{NOTE_D3,67},{NOTE_FS3,67},{NOTE_A3,67},{NOTE_FS3,67},{NOTE_D3,67},{NOTE_B2,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B3,67},{NOTE_G3,67},{NOTE_E3,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_B3,67},{NOTE_G4,67},{NOTE_B4,67},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_E3,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,534},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_E3,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_C4,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_CS4,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_B3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_A3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_G3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_GS3,133},{NOTE_A3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_B3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_A3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_G3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_F3,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B3,67},{NOTE_G3,67},{NOTE_E3,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_B3,67},{NOTE_G4,67},{NOTE_B4,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{0,0}};
 8000908:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 800090c:	f103 0318 	add.w	r3, r3, #24
 8000910:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000914:	4a43      	ldr	r2, [pc, #268]	; (8000a24 <initTonesDictionary+0x1a8>)
 8000916:	4618      	mov	r0, r3
 8000918:	4611      	mov	r1, r2
 800091a:	f44f 6351 	mov.w	r3, #3344	; 0xd10
 800091e:	461a      	mov	r2, r3
 8000920:	f008 fe68 	bl	80095f4 <memcpy>
    struct Tone fur_elise[] = {{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,750},{REST,250},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_C5,188},{NOTE_C5,188},{NOTE_C5,188},{NOTE_C5,750},{NOTE_F5,282},{NOTE_E5,94},{NOTE_E5,250},{NOTE_D5,250},{NOTE_AS5,282},{NOTE_A5,94},{NOTE_A5,188},{NOTE_G5,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_AS4,250},{NOTE_A4,250},{NOTE_A4,94},{NOTE_G4,94},{NOTE_A4,94},{NOTE_B4,94},{NOTE_C5,750},{NOTE_D5,188},{NOTE_DS5,188},{NOTE_E5,375},{NOTE_E5,188},{NOTE_F5,188},{NOTE_A4,188},{NOTE_C5,750},{NOTE_D5,282},{NOTE_B4,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_G4,94},{NOTE_G5,94},{NOTE_A4,94},{NOTE_G5,94},{NOTE_B4,94},{NOTE_G5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_E5,94},{NOTE_G5,94},{NOTE_C6,94},{NOTE_B5,94},{NOTE_A5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_D5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_G4,94},{NOTE_G5,94},{NOTE_A4,94},{NOTE_G5,94},{NOTE_B4,94},{NOTE_G5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_E5,94},{NOTE_G5,94},{NOTE_C6,94},{NOTE_B5,94},{NOTE_A5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_D5,94},{NOTE_E5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,94},{NOTE_B4,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,94},{NOTE_B4,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,375},{NOTE_B4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,375},{NOTE_B4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{REST,188},{REST,250},{NOTE_CS5,1125},{NOTE_D5,750},{NOTE_E5,188},{NOTE_F5,188},{NOTE_F5,750},{NOTE_F5,250},{NOTE_E5,1125},{NOTE_D5,750},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,750},{NOTE_A4,250},{NOTE_A4,250},{NOTE_C5,250},{NOTE_B4,250},{NOTE_A4,1125},{NOTE_CS5,1125},{NOTE_D5,750},{NOTE_E5,188},{NOTE_F5,188},{NOTE_F5,750},{NOTE_F5,250},{NOTE_F5,1125},{NOTE_DS5,750},{NOTE_D5,188},{NOTE_C5,188},{NOTE_AS4,750},{NOTE_A4,250},{NOTE_GS4,750},{NOTE_G4,250},{NOTE_A4,1125},{NOTE_B4,750},{REST,250},{NOTE_A3,141},{NOTE_C4,141},{NOTE_E4,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_D5,141},{NOTE_C5,141},{NOTE_B4,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_A5,141},{NOTE_C6,141},{NOTE_E6,141},{NOTE_D6,141},{NOTE_C6,141},{NOTE_B5,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_A5,141},{NOTE_C6,141},{NOTE_E6,141},{NOTE_D6,141},{NOTE_C6,141},{NOTE_B5,141},{NOTE_AS5,141},{NOTE_A5,141},{NOTE_GS5,141},{NOTE_G5,141},{NOTE_FS5,141},{NOTE_F5,141},{NOTE_E5,141},{NOTE_DS5,141},{NOTE_D5,141},{NOTE_CS5,141},{NOTE_C5,141},{NOTE_B4,141},{NOTE_AS4,141},{NOTE_A4,141},{NOTE_GS4,141},{NOTE_G4,141},{NOTE_FS4,141},{NOTE_F4,141},{NOTE_E4,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,375},{REST,375},{REST,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,750},{REST,250},{REST,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_E5,250},{NOTE_E5,250},{NOTE_E6,375},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,1125},{0,0}};
 8000924:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8000928:	f103 0318 	add.w	r3, r3, #24
 800092c:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8000930:	4a3d      	ldr	r2, [pc, #244]	; (8000a28 <initTonesDictionary+0x1ac>)
 8000932:	4618      	mov	r0, r3
 8000934:	4611      	mov	r1, r2
 8000936:	f44f 5397 	mov.w	r3, #4832	; 0x12e0
 800093a:	461a      	mov	r2, r3
 800093c:	f008 fe5a 	bl	80095f4 <memcpy>
    struct Tone tetris[] = {{NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 834}, {NOTE_A4, 834}, {NOTE_GS4, 834}, {NOTE_B4, 417}, {REST, 208}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 417}, {NOTE_E5, 417}, {NOTE_A5, 834}, {NOTE_GS5, 834},{NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 834}, {NOTE_A4, 834}, {NOTE_GS4, 834}, {NOTE_B4, 417}, {REST, 208}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 417}, {NOTE_E5, 417}, {NOTE_A5, 834}, {NOTE_GS5, 834},{NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 834}, {NOTE_A4, 834}, {NOTE_GS4, 834}, {NOTE_B4, 417}, {REST, 208}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 417}, {NOTE_E5, 417}, {NOTE_A5, 834}, {NOTE_GS5, 834},{0,0}};
 8000940:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8000944:	f103 0318 	add.w	r3, r3, #24
 8000948:	f5a3 6354 	sub.w	r3, r3, #3392	; 0xd40
 800094c:	4a37      	ldr	r2, [pc, #220]	; (8000a2c <initTonesDictionary+0x1b0>)
 800094e:	4618      	mov	r0, r3
 8000950:	4611      	mov	r1, r2
 8000952:	f44f 6315 	mov.w	r3, #2384	; 0x950
 8000956:	461a      	mov	r2, r3
 8000958:	f008 fe4c 	bl	80095f4 <memcpy>
    struct Tone tokyo_drift[]={{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,500},{NOTE_B4,500},{NOTE_DS5,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{REST,0},{REST,0},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,500},{NOTE_B4,500},{NOTE_DS5,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{REST,0},{REST,0},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,500},{NOTE_B4,500},{NOTE_DS5,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{REST,0},{REST,0}};
 800095c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000960:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000964:	4a32      	ldr	r2, [pc, #200]	; (8000a30 <initTonesDictionary+0x1b4>)
 8000966:	4618      	mov	r0, r3
 8000968:	4611      	mov	r1, r2
 800096a:	f44f 63db 	mov.w	r3, #1752	; 0x6d8
 800096e:	461a      	mov	r2, r3
 8000970:	f008 fe40 	bl	80095f4 <memcpy>
    // Insert tones into dictionary
    insert(playlist, "super_mario_bros", super_mario_bros, sizeof(super_mario_bros) / sizeof(struct Tone));
 8000974:	4b21      	ldr	r3, [pc, #132]	; (80009fc <initTonesDictionary+0x180>)
 8000976:	6818      	ldr	r0, [r3, #0]
 8000978:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 800097c:	f102 0210 	add.w	r2, r2, #16
 8000980:	2341      	movs	r3, #65	; 0x41
 8000982:	4920      	ldr	r1, [pc, #128]	; (8000a04 <initTonesDictionary+0x188>)
 8000984:	f7ff feb4 	bl	80006f0 <insert>
    insert(playlist, "hedwig_theme", hedwig_theme, sizeof(hedwig_theme) / sizeof(struct Tone));
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <initTonesDictionary+0x180>)
 800098a:	6818      	ldr	r0, [r3, #0]
 800098c:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 8000990:	f102 0218 	add.w	r2, r2, #24
 8000994:	233f      	movs	r3, #63	; 0x3f
 8000996:	491c      	ldr	r1, [pc, #112]	; (8000a08 <initTonesDictionary+0x18c>)
 8000998:	f7ff feaa 	bl	80006f0 <insert>
    insert(playlist, "doom", doom, sizeof(doom) / sizeof(struct Tone));
 800099c:	4b17      	ldr	r3, [pc, #92]	; (80009fc <initTonesDictionary+0x180>)
 800099e:	6818      	ldr	r0, [r3, #0]
 80009a0:	f507 520c 	add.w	r2, r7, #8960	; 0x2300
 80009a4:	f102 0218 	add.w	r2, r2, #24
 80009a8:	3a10      	subs	r2, #16
 80009aa:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
 80009ae:	4917      	ldr	r1, [pc, #92]	; (8000a0c <initTonesDictionary+0x190>)
 80009b0:	f7ff fe9e 	bl	80006f0 <insert>
    insert(playlist, "fur_elise", fur_elise, sizeof(fur_elise) / sizeof(struct Tone));
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <initTonesDictionary+0x180>)
 80009b6:	6818      	ldr	r0, [r3, #0]
 80009b8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80009bc:	f102 0218 	add.w	r2, r2, #24
 80009c0:	3a30      	subs	r2, #48	; 0x30
 80009c2:	f44f 7317 	mov.w	r3, #604	; 0x25c
 80009c6:	4912      	ldr	r1, [pc, #72]	; (8000a10 <initTonesDictionary+0x194>)
 80009c8:	f7ff fe92 	bl	80006f0 <insert>
    insert(playlist, "tetris", tetris, sizeof(tetris) / sizeof(struct Tone));
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <initTonesDictionary+0x180>)
 80009ce:	6818      	ldr	r0, [r3, #0]
 80009d0:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 80009d4:	f44f 7395 	mov.w	r3, #298	; 0x12a
 80009d8:	490e      	ldr	r1, [pc, #56]	; (8000a14 <initTonesDictionary+0x198>)
 80009da:	f7ff fe89 	bl	80006f0 <insert>
    insert(playlist, "tokyo_drift", tokyo_drift, sizeof(tokyo_drift) / sizeof(struct Tone));
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <initTonesDictionary+0x180>)
 80009e0:	6818      	ldr	r0, [r3, #0]
 80009e2:	f107 0218 	add.w	r2, r7, #24
 80009e6:	3a18      	subs	r2, #24
 80009e8:	23db      	movs	r3, #219	; 0xdb
 80009ea:	490b      	ldr	r1, [pc, #44]	; (8000a18 <initTonesDictionary+0x19c>)
 80009ec:	f7ff fe80 	bl	80006f0 <insert>
}
 80009f0:	bf00      	nop
 80009f2:	f507 5750 	add.w	r7, r7, #13312	; 0x3400
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200000dc 	.word	0x200000dc
 8000a00:	200000e0 	.word	0x200000e0
 8000a04:	0800aaf4 	.word	0x0800aaf4
 8000a08:	0800ab08 	.word	0x0800ab08
 8000a0c:	0800ab18 	.word	0x0800ab18
 8000a10:	0800ab20 	.word	0x0800ab20
 8000a14:	0800ab2c 	.word	0x0800ab2c
 8000a18:	0800ab34 	.word	0x0800ab34
 8000a1c:	0800ab40 	.word	0x0800ab40
 8000a20:	0800ad48 	.word	0x0800ad48
 8000a24:	0800af40 	.word	0x0800af40
 8000a28:	0800bc50 	.word	0x0800bc50
 8000a2c:	0800cf30 	.word	0x0800cf30
 8000a30:	0800d880 	.word	0x0800d880

08000a34 <get_current_time>:
};
enum ProgramMode programMode = Liner;

//UART BEGIN
//Time since program start
char* get_current_time() {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af02      	add	r7, sp, #8
	static char time_str[6];

	// Convert milliseconds to seconds
	uint32_t seconds = timePassed / 1000;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <get_current_time+0x60>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a16      	ldr	r2, [pc, #88]	; (8000a98 <get_current_time+0x64>)
 8000a40:	fba2 2303 	umull	r2, r3, r2, r3
 8000a44:	099b      	lsrs	r3, r3, #6
 8000a46:	607b      	str	r3, [r7, #4]
	// Calculate minutes
	uint32_t minutes = seconds / 60;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a14      	ldr	r2, [pc, #80]	; (8000a9c <get_current_time+0x68>)
 8000a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a50:	095b      	lsrs	r3, r3, #5
 8000a52:	603b      	str	r3, [r7, #0]

	snprintf(time_str, sizeof(time_str), "%02d:%02d", minutes % 60,
 8000a54:	683a      	ldr	r2, [r7, #0]
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <get_current_time+0x68>)
 8000a58:	fba3 1302 	umull	r1, r3, r3, r2
 8000a5c:	0959      	lsrs	r1, r3, #5
 8000a5e:	460b      	mov	r3, r1
 8000a60:	011b      	lsls	r3, r3, #4
 8000a62:	1a5b      	subs	r3, r3, r1
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	1ad1      	subs	r1, r2, r3
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <get_current_time+0x68>)
 8000a6c:	fba3 2300 	umull	r2, r3, r3, r0
 8000a70:	095a      	lsrs	r2, r3, #5
 8000a72:	4613      	mov	r3, r2
 8000a74:	011b      	lsls	r3, r3, #4
 8000a76:	1a9b      	subs	r3, r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	1ac2      	subs	r2, r0, r3
 8000a7c:	9200      	str	r2, [sp, #0]
 8000a7e:	460b      	mov	r3, r1
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <get_current_time+0x6c>)
 8000a82:	2106      	movs	r1, #6
 8000a84:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <get_current_time+0x70>)
 8000a86:	f008 ff27 	bl	80098d8 <sniprintf>
			seconds % 60);

	return time_str;
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <get_current_time+0x70>)
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000628 	.word	0x20000628
 8000a98:	10624dd3 	.word	0x10624dd3
 8000a9c:	88888889 	.word	0x88888889
 8000aa0:	0800df58 	.word	0x0800df58
 8000aa4:	20000720 	.word	0x20000720

08000aa8 <sendInfo>:
void sendInfo(char *message, int *helper, int num, int number_size) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
 8000ab4:	603b      	str	r3, [r7, #0]
	if (number_size == 0)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d101      	bne.n	8000ac0 <sendInfo+0x18>
		number_size = 1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	603b      	str	r3, [r7, #0]

	int message_len = strlen(message);
 8000ac0:	68f8      	ldr	r0, [r7, #12]
 8000ac2:	f7ff fb8f 	bl	80001e4 <strlen>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	61fb      	str	r3, [r7, #28]
	message[message_len++] = ' ';
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	1c5a      	adds	r2, r3, #1
 8000ace:	61fa      	str	r2, [r7, #28]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	2220      	movs	r2, #32
 8000ad8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < number_size; i++) {
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
 8000ade:	e011      	b.n	8000b04 <sendInfo+0x5c>
		message[message_len++] = helper[i] + '0';
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	68ba      	ldr	r2, [r7, #8]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	1c59      	adds	r1, r3, #1
 8000af0:	61f9      	str	r1, [r7, #28]
 8000af2:	4619      	mov	r1, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	440b      	add	r3, r1
 8000af8:	3230      	adds	r2, #48	; 0x30
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < number_size; i++) {
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	3301      	adds	r3, #1
 8000b02:	61bb      	str	r3, [r7, #24]
 8000b04:	69ba      	ldr	r2, [r7, #24]
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	dbe9      	blt.n	8000ae0 <sendInfo+0x38>
	}
	message[message_len++] = ']';
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	61fa      	str	r2, [r7, #28]
 8000b12:	461a      	mov	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4413      	add	r3, r2
 8000b18:	225d      	movs	r2, #93	; 0x5d
 8000b1a:	701a      	strb	r2, [r3, #0]
	message[message_len++] = '[';
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	1c5a      	adds	r2, r3, #1
 8000b20:	61fa      	str	r2, [r7, #28]
 8000b22:	461a      	mov	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4413      	add	r3, r2
 8000b28:	225b      	movs	r2, #91	; 0x5b
 8000b2a:	701a      	strb	r2, [r3, #0]
	message[message_len] = '\0';
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	4413      	add	r3, r2
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
	char *time_str = get_current_time();
 8000b36:	f7ff ff7d 	bl	8000a34 <get_current_time>
 8000b3a:	6138      	str	r0, [r7, #16]
	for (int i = 0; i < 5; i++) {
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	e00d      	b.n	8000b5e <sendInfo+0xb6>
		message[message_len++] = time_str[i];
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	441a      	add	r2, r3
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	1c59      	adds	r1, r3, #1
 8000b4c:	61f9      	str	r1, [r7, #28]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	440b      	add	r3, r1
 8000b54:	7812      	ldrb	r2, [r2, #0]
 8000b56:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 5; i++) {
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	617b      	str	r3, [r7, #20]
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	2b04      	cmp	r3, #4
 8000b62:	ddee      	ble.n	8000b42 <sendInfo+0x9a>
	}
	message[message_len++] = ']';
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	61fa      	str	r2, [r7, #28]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4413      	add	r3, r2
 8000b70:	225d      	movs	r2, #93	; 0x5d
 8000b72:	701a      	strb	r2, [r3, #0]
	message[message_len++] = '\n';
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	1c5a      	adds	r2, r3, #1
 8000b78:	61fa      	str	r2, [r7, #28]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4413      	add	r3, r2
 8000b80:	220a      	movs	r2, #10
 8000b82:	701a      	strb	r2, [r3, #0]
	message[message_len] = '\0';
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	4413      	add	r3, r2
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, message, message_len, 100);
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	2364      	movs	r3, #100	; 0x64
 8000b94:	68f9      	ldr	r1, [r7, #12]
 8000b96:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <sendInfo+0xfc>)
 8000b98:	f007 f940 	bl	8007e1c <HAL_UART_Transmit>
}
 8000b9c:	bf00      	nop
 8000b9e:	3720      	adds	r7, #32
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000284 	.word	0x20000284

08000ba8 <sendError>:

void sendError(int changeMusic) {
 8000ba8:	b5b0      	push	{r4, r5, r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	char error_message[34];
	char *time_str = get_current_time();
 8000bb0:	f7ff ff40 	bl	8000a34 <get_current_time>
 8000bb4:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (changeMusic) {
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d02b      	beq.n	8000c14 <sendError+0x6c>
		strcpy(error_message, "[ERROR] [Music not found][     ]\n");
 8000bbc:	4b2f      	ldr	r3, [pc, #188]	; (8000c7c <sendError+0xd4>)
 8000bbe:	f107 0408 	add.w	r4, r7, #8
 8000bc2:	461d      	mov	r5, r3
 8000bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bcc:	682b      	ldr	r3, [r5, #0]
 8000bce:	8023      	strh	r3, [r4, #0]
		for (int i = 0; i < 5; i++) {
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8000bd4:	e013      	b.n	8000bfe <sendError+0x56>
			error_message[strlen(error_message) - 7 + i] = time_str[i];
 8000bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bda:	18d4      	adds	r4, r2, r3
 8000bdc:	f107 0308 	add.w	r3, r7, #8
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff faff 	bl	80001e4 <strlen>
 8000be6:	4602      	mov	r2, r0
 8000be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bea:	4413      	add	r3, r2
 8000bec:	3b07      	subs	r3, #7
 8000bee:	7822      	ldrb	r2, [r4, #0]
 8000bf0:	3338      	adds	r3, #56	; 0x38
 8000bf2:	443b      	add	r3, r7
 8000bf4:	f803 2c30 	strb.w	r2, [r3, #-48]
		for (int i = 0; i < 5; i++) {
 8000bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8000bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c00:	2b04      	cmp	r3, #4
 8000c02:	dde8      	ble.n	8000bd6 <sendError+0x2e>
		}
		HAL_UART_Transmit_IT(&huart1, error_message, 33);
 8000c04:	f107 0308 	add.w	r3, r7, #8
 8000c08:	2221      	movs	r2, #33	; 0x21
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	481c      	ldr	r0, [pc, #112]	; (8000c80 <sendError+0xd8>)
 8000c0e:	f007 f98f 	bl	8007f30 <HAL_UART_Transmit_IT>
		for (int i = 0; i < 5; i++) {
			error_message[strlen(error_message) - 7 + i] = time_str[i];
		}
		HAL_UART_Transmit_IT(&huart1, error_message, 34);
	}
}
 8000c12:	e02f      	b.n	8000c74 <sendError+0xcc>
		strcpy(error_message, "[ERROR] [Volume not Valid][     ]\n");
 8000c14:	f107 0308 	add.w	r3, r7, #8
 8000c18:	4a1a      	ldr	r2, [pc, #104]	; (8000c84 <sendError+0xdc>)
 8000c1a:	461c      	mov	r4, r3
 8000c1c:	4615      	mov	r5, r2
 8000c1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c26:	682b      	ldr	r3, [r5, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	8022      	strh	r2, [r4, #0]
 8000c2c:	3402      	adds	r4, #2
 8000c2e:	0c1b      	lsrs	r3, r3, #16
 8000c30:	7023      	strb	r3, [r4, #0]
		for (int i = 0; i < 5; i++) {
 8000c32:	2300      	movs	r3, #0
 8000c34:	633b      	str	r3, [r7, #48]	; 0x30
 8000c36:	e013      	b.n	8000c60 <sendError+0xb8>
			error_message[strlen(error_message) - 7 + i] = time_str[i];
 8000c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c3c:	18d4      	adds	r4, r2, r3
 8000c3e:	f107 0308 	add.w	r3, r7, #8
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff face 	bl	80001e4 <strlen>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c4c:	4413      	add	r3, r2
 8000c4e:	3b07      	subs	r3, #7
 8000c50:	7822      	ldrb	r2, [r4, #0]
 8000c52:	3338      	adds	r3, #56	; 0x38
 8000c54:	443b      	add	r3, r7
 8000c56:	f803 2c30 	strb.w	r2, [r3, #-48]
		for (int i = 0; i < 5; i++) {
 8000c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	633b      	str	r3, [r7, #48]	; 0x30
 8000c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	dde8      	ble.n	8000c38 <sendError+0x90>
		HAL_UART_Transmit_IT(&huart1, error_message, 34);
 8000c66:	f107 0308 	add.w	r3, r7, #8
 8000c6a:	2222      	movs	r2, #34	; 0x22
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4804      	ldr	r0, [pc, #16]	; (8000c80 <sendError+0xd8>)
 8000c70:	f007 f95e 	bl	8007f30 <HAL_UART_Transmit_IT>
}
 8000c74:	bf00      	nop
 8000c76:	3738      	adds	r7, #56	; 0x38
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c7c:	0800df64 	.word	0x0800df64
 8000c80:	20000284 	.word	0x20000284
 8000c84:	0800df88 	.word	0x0800df88

08000c88 <extractNumber>:

//Function to extract music number from Set_Music()
void extractNumber(const uint8_t *data) {
 8000c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c8c:	b0a1      	sub	sp, #132	; 0x84
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	466b      	mov	r3, sp
 8000c94:	461e      	mov	r6, r3
	int helper[digit_count(getDictSize(playlist))];
 8000c96:	4b5e      	ldr	r3, [pc, #376]	; (8000e10 <extractNumber+0x188>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fdad 	bl	80007fa <getDictSize>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 fc1a 	bl	80014dc <digit_count>
 8000ca8:	4601      	mov	r1, r0
 8000caa:	1e4b      	subs	r3, r1, #1
 8000cac:	677b      	str	r3, [r7, #116]	; 0x74
 8000cae:	460a      	mov	r2, r1
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	4690      	mov	r8, r2
 8000cb4:	4699      	mov	r9, r3
 8000cb6:	f04f 0200 	mov.w	r2, #0
 8000cba:	f04f 0300 	mov.w	r3, #0
 8000cbe:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000cc2:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000cc6:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000cca:	460a      	mov	r2, r1
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4614      	mov	r4, r2
 8000cd0:	461d      	mov	r5, r3
 8000cd2:	f04f 0200 	mov.w	r2, #0
 8000cd6:	f04f 0300 	mov.w	r3, #0
 8000cda:	016b      	lsls	r3, r5, #5
 8000cdc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000ce0:	0162      	lsls	r2, r4, #5
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	3307      	adds	r3, #7
 8000ce8:	08db      	lsrs	r3, r3, #3
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	ebad 0d03 	sub.w	sp, sp, r3
 8000cf0:	466b      	mov	r3, sp
 8000cf2:	3303      	adds	r3, #3
 8000cf4:	089b      	lsrs	r3, r3, #2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	673b      	str	r3, [r7, #112]	; 0x70
	int flag = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	67bb      	str	r3, [r7, #120]	; 0x78
	if (data[10 + digit_count(getDictSize(playlist))] == ')'
 8000cfe:	4b44      	ldr	r3, [pc, #272]	; (8000e10 <extractNumber+0x188>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fd79 	bl	80007fa <getDictSize>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 fbe6 	bl	80014dc <digit_count>
 8000d10:	4603      	mov	r3, r0
 8000d12:	330a      	adds	r3, #10
 8000d14:	461a      	mov	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b29      	cmp	r3, #41	; 0x29
 8000d1e:	d16f      	bne.n	8000e00 <extractNumber+0x178>
			&& (data[10] != '0')) {
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	330a      	adds	r3, #10
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b30      	cmp	r3, #48	; 0x30
 8000d28:	d06a      	beq.n	8000e00 <extractNumber+0x178>
		for (int i = 10; i < 10 + digit_count(getDictSize(playlist)); i++) {
 8000d2a:	230a      	movs	r3, #10
 8000d2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000d2e:	e01e      	b.n	8000d6e <extractNumber+0xe6>
			if (data[i] <= '9' && data[i] >= '0') {
 8000d30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b39      	cmp	r3, #57	; 0x39
 8000d3a:	d815      	bhi.n	8000d68 <extractNumber+0xe0>
 8000d3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b2f      	cmp	r3, #47	; 0x2f
 8000d46:	d90f      	bls.n	8000d68 <extractNumber+0xe0>
				helper[i - 10] = data[i] - '0';
 8000d48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d54:	f1a3 020a 	sub.w	r2, r3, #10
 8000d58:	3930      	subs	r1, #48	; 0x30
 8000d5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int i = 10; i < 10 + digit_count(getDictSize(playlist)); i++) {
 8000d60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d62:	3301      	adds	r3, #1
 8000d64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000d66:	e002      	b.n	8000d6e <extractNumber+0xe6>
			} else {
				flag = 1;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	67bb      	str	r3, [r7, #120]	; 0x78
				break;
 8000d6c:	e00d      	b.n	8000d8a <extractNumber+0x102>
		for (int i = 10; i < 10 + digit_count(getDictSize(playlist)); i++) {
 8000d6e:	4b28      	ldr	r3, [pc, #160]	; (8000e10 <extractNumber+0x188>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fd41 	bl	80007fa <getDictSize>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 fbae 	bl	80014dc <digit_count>
 8000d80:	4603      	mov	r3, r0
 8000d82:	3309      	adds	r3, #9
 8000d84:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000d86:	429a      	cmp	r2, r3
 8000d88:	ddd2      	ble.n	8000d30 <extractNumber+0xa8>
			}
		}
		if (!flag) {
 8000d8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d137      	bne.n	8000e00 <extractNumber+0x178>
			int num = array_to_number(helper,
 8000d90:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <extractNumber+0x188>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fd30 	bl	80007fa <getDictSize>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 fb9d 	bl	80014dc <digit_count>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4619      	mov	r1, r3
 8000da6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000da8:	f000 fbf8 	bl	800159c <array_to_number>
 8000dac:	66f8      	str	r0, [r7, #108]	; 0x6c
					digit_count(getDictSize(playlist)));
			if (num <= getDictSize(playlist)) {
 8000dae:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <extractNumber+0x188>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fd21 	bl	80007fa <getDictSize>
 8000db8:	4602      	mov	r2, r0
 8000dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	dc1f      	bgt.n	8000e00 <extractNumber+0x178>
				set_music(num);
 8000dc0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000dc2:	f000 fd4b 	bl	800185c <set_music>
				char message[100] = "[INFO][Music changed to ";
 8000dc6:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <extractNumber+0x18c>)
 8000dc8:	f107 0408 	add.w	r4, r7, #8
 8000dcc:	461d      	mov	r5, r3
 8000dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dd6:	c403      	stmia	r4!, {r0, r1}
 8000dd8:	7022      	strb	r2, [r4, #0]
 8000dda:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8000dde:	224b      	movs	r2, #75	; 0x4b
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f008 fc14 	bl	8009610 <memset>
				sendInfo(message, helper, num, digit_count(num));
 8000de8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000dea:	f000 fb77 	bl	80014dc <digit_count>
 8000dee:	4603      	mov	r3, r0
 8000df0:	f107 0008 	add.w	r0, r7, #8
 8000df4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000df6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000df8:	f7ff fe56 	bl	8000aa8 <sendInfo>
 8000dfc:	46b5      	mov	sp, r6
 8000dfe:	e003      	b.n	8000e08 <extractNumber+0x180>
				return;
			}
		}
	}
	sendError(1);
 8000e00:	2001      	movs	r0, #1
 8000e02:	f7ff fed1 	bl	8000ba8 <sendError>
 8000e06:	46b5      	mov	sp, r6
//failed
}
 8000e08:	3784      	adds	r7, #132	; 0x84
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e10:	200000dc 	.word	0x200000dc
 8000e14:	0800dfac 	.word	0x0800dfac

08000e18 <extractVolume>:

void extractVolume(const uint8_t *data) {
 8000e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e1c:	b0a1      	sub	sp, #132	; 0x84
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	466b      	mov	r3, sp
 8000e24:	461e      	mov	r6, r3
	int helper[strlen(data) - 13];
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff f9dc 	bl	80001e4 <strlen>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	f1a3 010d 	sub.w	r1, r3, #13
 8000e32:	460b      	mov	r3, r1
 8000e34:	3b01      	subs	r3, #1
 8000e36:	677b      	str	r3, [r7, #116]	; 0x74
 8000e38:	2300      	movs	r3, #0
 8000e3a:	4688      	mov	r8, r1
 8000e3c:	4699      	mov	r9, r3
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000e4a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000e4e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000e52:	2300      	movs	r3, #0
 8000e54:	460c      	mov	r4, r1
 8000e56:	461d      	mov	r5, r3
 8000e58:	f04f 0200 	mov.w	r2, #0
 8000e5c:	f04f 0300 	mov.w	r3, #0
 8000e60:	016b      	lsls	r3, r5, #5
 8000e62:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000e66:	0162      	lsls	r2, r4, #5
 8000e68:	008b      	lsls	r3, r1, #2
 8000e6a:	3307      	adds	r3, #7
 8000e6c:	08db      	lsrs	r3, r3, #3
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	ebad 0d03 	sub.w	sp, sp, r3
 8000e74:	466b      	mov	r3, sp
 8000e76:	3303      	adds	r3, #3
 8000e78:	089b      	lsrs	r3, r3, #2
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	673b      	str	r3, [r7, #112]	; 0x70
	int flag = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	67bb      	str	r3, [r7, #120]	; 0x78
	for (int i = 11; i < strlen(data) - 2; i++) {
 8000e82:	230b      	movs	r3, #11
 8000e84:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000e86:	e01e      	b.n	8000ec6 <extractVolume+0xae>
		if (data[i] <= '9' && data[i] >= '0') {
 8000e88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b39      	cmp	r3, #57	; 0x39
 8000e92:	d815      	bhi.n	8000ec0 <extractVolume+0xa8>
 8000e94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b2f      	cmp	r3, #47	; 0x2f
 8000e9e:	d90f      	bls.n	8000ec0 <extractVolume+0xa8>
			helper[i - 11] = data[i] - '0';
 8000ea0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000eac:	f1a3 020b 	sub.w	r2, r3, #11
 8000eb0:	3930      	subs	r1, #48	; 0x30
 8000eb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 11; i < strlen(data) - 2; i++) {
 8000eb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000eba:	3301      	adds	r3, #1
 8000ebc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000ebe:	e002      	b.n	8000ec6 <extractVolume+0xae>
		} else {
			flag = 1;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	67bb      	str	r3, [r7, #120]	; 0x78
			break;
 8000ec4:	e007      	b.n	8000ed6 <extractVolume+0xbe>
	for (int i = 11; i < strlen(data) - 2; i++) {
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff f98c 	bl	80001e4 <strlen>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	1e9a      	subs	r2, r3, #2
 8000ed0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d8d8      	bhi.n	8000e88 <extractVolume+0x70>
		}
	}
	if (!flag) {
 8000ed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d130      	bne.n	8000f3e <extractVolume+0x126>
		int num = array_to_number(helper, strlen(data) - 13);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff f981 	bl	80001e4 <strlen>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	3b0d      	subs	r3, #13
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000eea:	f000 fb57 	bl	800159c <array_to_number>
 8000eee:	66f8      	str	r0, [r7, #108]	; 0x6c

		if (num < 101 && num > -1) {
 8000ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ef2:	2b64      	cmp	r3, #100	; 0x64
 8000ef4:	dc23      	bgt.n	8000f3e <extractVolume+0x126>
 8000ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db20      	blt.n	8000f3e <extractVolume+0x126>
			volume = num;
 8000efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <extractVolume+0x138>)
 8000f02:	801a      	strh	r2, [r3, #0]
			char message[100] = "[INFO][Volume changed to ";
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <extractVolume+0x13c>)
 8000f06:	f107 0408 	add.w	r4, r7, #8
 8000f0a:	461d      	mov	r5, r3
 8000f0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f14:	c403      	stmia	r4!, {r0, r1}
 8000f16:	8022      	strh	r2, [r4, #0]
 8000f18:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000f1c:	224a      	movs	r2, #74	; 0x4a
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f008 fb75 	bl	8009610 <memset>
			sendInfo(message, helper, num, digit_count(num));
 8000f26:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000f28:	f000 fad8 	bl	80014dc <digit_count>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	f107 0008 	add.w	r0, r7, #8
 8000f32:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000f34:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000f36:	f7ff fdb7 	bl	8000aa8 <sendInfo>
 8000f3a:	46b5      	mov	sp, r6
 8000f3c:	e003      	b.n	8000f46 <extractVolume+0x12e>
			return;
		}
	}
	sendError(0);
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f7ff fe32 	bl	8000ba8 <sendError>
 8000f44:	46b5      	mov	sp, r6
//failed
}
 8000f46:	3784      	adds	r7, #132	; 0x84
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f4e:	bf00      	nop
 8000f50:	2000004c 	.word	0x2000004c
 8000f54:	0800e010 	.word	0x0800e010

08000f58 <compareStrings>:

int compareStrings(const char *str1, const uint8_t *str2, int n) {
 8000f58:	b480      	push	{r7}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < n; i++) {
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	e00e      	b.n	8000f88 <compareStrings+0x30>
		if (str1[i] != str2[i]) {
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	68fa      	ldr	r2, [r7, #12]
 8000f6e:	4413      	add	r3, r2
 8000f70:	781a      	ldrb	r2, [r3, #0]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	440b      	add	r3, r1
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d001      	beq.n	8000f82 <compareStrings+0x2a>
			return 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e007      	b.n	8000f92 <compareStrings+0x3a>
	for (int i = 0; i < n; i++) {
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	3301      	adds	r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	dbec      	blt.n	8000f6a <compareStrings+0x12>
		}
	}
	return 1;
 8000f90:	2301      	movs	r3, #1
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	371c      	adds	r7, #28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <HAL_UART_RxCpltCallback>:

uint8_t data[100];
uint8_t d;
uint8_t i;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000fa0:	b5b0      	push	{r4, r5, r7, lr}
 8000fa2:	b0a2      	sub	sp, #136	; 0x88
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4aae      	ldr	r2, [pc, #696]	; (8001268 <HAL_UART_RxCpltCallback+0x2c8>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	f040 8156 	bne.w	8001260 <HAL_UART_RxCpltCallback+0x2c0>
		HAL_UART_Receive_IT(&huart1, &d, 1);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	49ad      	ldr	r1, [pc, #692]	; (800126c <HAL_UART_RxCpltCallback+0x2cc>)
 8000fb8:	48ad      	ldr	r0, [pc, #692]	; (8001270 <HAL_UART_RxCpltCallback+0x2d0>)
 8000fba:	f007 f817 	bl	8007fec <HAL_UART_Receive_IT>
		data[i++] = d;
 8000fbe:	4bad      	ldr	r3, [pc, #692]	; (8001274 <HAL_UART_RxCpltCallback+0x2d4>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	b2d1      	uxtb	r1, r2
 8000fc6:	4aab      	ldr	r2, [pc, #684]	; (8001274 <HAL_UART_RxCpltCallback+0x2d4>)
 8000fc8:	7011      	strb	r1, [r2, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4ba7      	ldr	r3, [pc, #668]	; (800126c <HAL_UART_RxCpltCallback+0x2cc>)
 8000fce:	7819      	ldrb	r1, [r3, #0]
 8000fd0:	4ba9      	ldr	r3, [pc, #676]	; (8001278 <HAL_UART_RxCpltCallback+0x2d8>)
 8000fd2:	5499      	strb	r1, [r3, r2]
		if (d == '\n') {
 8000fd4:	4ba5      	ldr	r3, [pc, #660]	; (800126c <HAL_UART_RxCpltCallback+0x2cc>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b0a      	cmp	r3, #10
 8000fda:	f040 8141 	bne.w	8001260 <HAL_UART_RxCpltCallback+0x2c0>
			data[i] = '\0';
 8000fde:	4ba5      	ldr	r3, [pc, #660]	; (8001274 <HAL_UART_RxCpltCallback+0x2d4>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4ba4      	ldr	r3, [pc, #656]	; (8001278 <HAL_UART_RxCpltCallback+0x2d8>)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	5499      	strb	r1, [r3, r2]
			int len = strlen(data);
 8000fea:	48a3      	ldr	r0, [pc, #652]	; (8001278 <HAL_UART_RxCpltCallback+0x2d8>)
 8000fec:	f7ff f8fa 	bl	80001e4 <strlen>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	677b      	str	r3, [r7, #116]	; 0x74
			if ((i == 6 && compareStrings(pause, data, 5) == 1)) {
 8000ff4:	4b9f      	ldr	r3, [pc, #636]	; (8001274 <HAL_UART_RxCpltCallback+0x2d4>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b06      	cmp	r3, #6
 8000ffa:	d110      	bne.n	800101e <HAL_UART_RxCpltCallback+0x7e>
 8000ffc:	2205      	movs	r2, #5
 8000ffe:	499e      	ldr	r1, [pc, #632]	; (8001278 <HAL_UART_RxCpltCallback+0x2d8>)
 8001000:	489e      	ldr	r0, [pc, #632]	; (800127c <HAL_UART_RxCpltCallback+0x2dc>)
 8001002:	f7ff ffa9 	bl	8000f58 <compareStrings>
 8001006:	4603      	mov	r3, r0
 8001008:	2b01      	cmp	r3, #1
 800100a:	d108      	bne.n	800101e <HAL_UART_RxCpltCallback+0x7e>
				programState = Paused;
 800100c:	4b9c      	ldr	r3, [pc, #624]	; (8001280 <HAL_UART_RxCpltCallback+0x2e0>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart1, "-=MUSIC PAUSED=-\r", 17);
 8001012:	2211      	movs	r2, #17
 8001014:	499b      	ldr	r1, [pc, #620]	; (8001284 <HAL_UART_RxCpltCallback+0x2e4>)
 8001016:	4896      	ldr	r0, [pc, #600]	; (8001270 <HAL_UART_RxCpltCallback+0x2d0>)
 8001018:	f006 ff8a 	bl	8007f30 <HAL_UART_Transmit_IT>
 800101c:	e11d      	b.n	800125a <HAL_UART_RxCpltCallback+0x2ba>
			} else if (i == 7 && compareStrings(resume, data, 6) == 1) {
 800101e:	4b95      	ldr	r3, [pc, #596]	; (8001274 <HAL_UART_RxCpltCallback+0x2d4>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b07      	cmp	r3, #7
 8001024:	d110      	bne.n	8001048 <HAL_UART_RxCpltCallback+0xa8>
 8001026:	2206      	movs	r2, #6
 8001028:	4993      	ldr	r1, [pc, #588]	; (8001278 <HAL_UART_RxCpltCallback+0x2d8>)
 800102a:	4897      	ldr	r0, [pc, #604]	; (8001288 <HAL_UART_RxCpltCallback+0x2e8>)
 800102c:	f7ff ff94 	bl	8000f58 <compareStrings>
 8001030:	4603      	mov	r3, r0
 8001032:	2b01      	cmp	r3, #1
 8001034:	d108      	bne.n	8001048 <HAL_UART_RxCpltCallback+0xa8>

				programState = Resume;
 8001036:	4b92      	ldr	r3, [pc, #584]	; (8001280 <HAL_UART_RxCpltCallback+0x2e0>)
 8001038:	2201      	movs	r2, #1
 800103a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart1, "-=MUSIC RESUME=-\n", 17);
 800103c:	2211      	movs	r2, #17
 800103e:	4993      	ldr	r1, [pc, #588]	; (800128c <HAL_UART_RxCpltCallback+0x2ec>)
 8001040:	488b      	ldr	r0, [pc, #556]	; (8001270 <HAL_UART_RxCpltCallback+0x2d0>)
 8001042:	f006 ff75 	bl	8007f30 <HAL_UART_Transmit_IT>
 8001046:	e108      	b.n	800125a <HAL_UART_RxCpltCallback+0x2ba>

			} else if (i == 12 + digit_count(getDictSize(playlist))
 8001048:	4b8a      	ldr	r3, [pc, #552]	; (8001274 <HAL_UART_RxCpltCallback+0x2d4>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461c      	mov	r4, r3
 800104e:	4b90      	ldr	r3, [pc, #576]	; (8001290 <HAL_UART_RxCpltCallback+0x2f0>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fbd1 	bl	80007fa <getDictSize>
 8001058:	4603      	mov	r3, r0
 800105a:	4618      	mov	r0, r3
 800105c:	f000 fa3e 	bl	80014dc <digit_count>
 8001060:	4603      	mov	r3, r0
 8001062:	330c      	adds	r3, #12
 8001064:	429c      	cmp	r4, r3
 8001066:	d10b      	bne.n	8001080 <HAL_UART_RxCpltCallback+0xe0>
					&& compareStrings(setMusic, data, 10) == 1) {
 8001068:	220a      	movs	r2, #10
 800106a:	4983      	ldr	r1, [pc, #524]	; (8001278 <HAL_UART_RxCpltCallback+0x2d8>)
 800106c:	4889      	ldr	r0, [pc, #548]	; (8001294 <HAL_UART_RxCpltCallback+0x2f4>)
 800106e:	f7ff ff73 	bl	8000f58 <compareStrings>
 8001072:	4603      	mov	r3, r0
 8001074:	2b01      	cmp	r3, #1
 8001076:	d103      	bne.n	8001080 <HAL_UART_RxCpltCallback+0xe0>
				extractNumber(data);
 8001078:	487f      	ldr	r0, [pc, #508]	; (8001278 <HAL_UART_RxCpltCallback+0x2d8>)
 800107a:	f7ff fe05 	bl	8000c88 <extractNumber>
 800107e:	e0ec      	b.n	800125a <HAL_UART_RxCpltCallback+0x2ba>

			} else if (((i > 13 && i < 17) && data[len - 2] == ')')
 8001080:	4b7c      	ldr	r3, [pc, #496]	; (8001274 <HAL_UART_RxCpltCallback+0x2d4>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b0d      	cmp	r3, #13
 8001086:	d915      	bls.n	80010b4 <HAL_UART_RxCpltCallback+0x114>
 8001088:	4b7a      	ldr	r3, [pc, #488]	; (8001274 <HAL_UART_RxCpltCallback+0x2d4>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b10      	cmp	r3, #16
 800108e:	d811      	bhi.n	80010b4 <HAL_UART_RxCpltCallback+0x114>
 8001090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001092:	3b02      	subs	r3, #2
 8001094:	4a78      	ldr	r2, [pc, #480]	; (8001278 <HAL_UART_RxCpltCallback+0x2d8>)
 8001096:	5cd3      	ldrb	r3, [r2, r3]
 8001098:	2b29      	cmp	r3, #41	; 0x29
 800109a:	d10b      	bne.n	80010b4 <HAL_UART_RxCpltCallback+0x114>
					&& compareStrings(setShuffle, data, 19) == 1) {
 800109c:	2213      	movs	r2, #19
 800109e:	4976      	ldr	r1, [pc, #472]	; (8001278 <HAL_UART_RxCpltCallback+0x2d8>)
 80010a0:	487d      	ldr	r0, [pc, #500]	; (8001298 <HAL_UART_RxCpltCallback+0x2f8>)
 80010a2:	f7ff ff59 	bl	8000f58 <compareStrings>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d103      	bne.n	80010b4 <HAL_UART_RxCpltCallback+0x114>
				extractVolume(data);
 80010ac:	4872      	ldr	r0, [pc, #456]	; (8001278 <HAL_UART_RxCpltCallback+0x2d8>)
 80010ae:	f7ff feb3 	bl	8000e18 <extractVolume>
 80010b2:	e0d2      	b.n	800125a <HAL_UART_RxCpltCallback+0x2ba>
			} else if ((i == 19) && compareStrings(setShuffle, data, 18) == 1) {
 80010b4:	4b6f      	ldr	r3, [pc, #444]	; (8001274 <HAL_UART_RxCpltCallback+0x2d4>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b13      	cmp	r3, #19
 80010ba:	d169      	bne.n	8001190 <HAL_UART_RxCpltCallback+0x1f0>
 80010bc:	2212      	movs	r2, #18
 80010be:	496e      	ldr	r1, [pc, #440]	; (8001278 <HAL_UART_RxCpltCallback+0x2d8>)
 80010c0:	4875      	ldr	r0, [pc, #468]	; (8001298 <HAL_UART_RxCpltCallback+0x2f8>)
 80010c2:	f7ff ff49 	bl	8000f58 <compareStrings>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d161      	bne.n	8001190 <HAL_UART_RxCpltCallback+0x1f0>
				char message[100] = "[INFO][Play mode changed to Shuffle][";
 80010cc:	4b73      	ldr	r3, [pc, #460]	; (800129c <HAL_UART_RxCpltCallback+0x2fc>)
 80010ce:	f107 0408 	add.w	r4, r7, #8
 80010d2:	461d      	mov	r5, r3
 80010d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010e0:	6020      	str	r0, [r4, #0]
 80010e2:	3404      	adds	r4, #4
 80010e4:	8021      	strh	r1, [r4, #0]
 80010e6:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80010ea:	223e      	movs	r2, #62	; 0x3e
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f008 fa8e 	bl	8009610 <memset>
				int message_len = strlen(message);
 80010f4:	f107 0308 	add.w	r3, r7, #8
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff f873 	bl	80001e4 <strlen>
 80010fe:	4603      	mov	r3, r0
 8001100:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				char *time_str = get_current_time();
 8001104:	f7ff fc96 	bl	8000a34 <get_current_time>
 8001108:	6738      	str	r0, [r7, #112]	; 0x70
				for (int i = 0; i < 5; i++) {
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001110:	e012      	b.n	8001138 <HAL_UART_RxCpltCallback+0x198>
					message[message_len++] = time_str[i];
 8001112:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001116:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001118:	441a      	add	r2, r3
 800111a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800111e:	1c59      	adds	r1, r3, #1
 8001120:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8001124:	7812      	ldrb	r2, [r2, #0]
 8001126:	3388      	adds	r3, #136	; 0x88
 8001128:	443b      	add	r3, r7
 800112a:	f803 2c80 	strb.w	r2, [r3, #-128]
				for (int i = 0; i < 5; i++) {
 800112e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001132:	3301      	adds	r3, #1
 8001134:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001138:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800113c:	2b04      	cmp	r3, #4
 800113e:	dde8      	ble.n	8001112 <HAL_UART_RxCpltCallback+0x172>
				}
				message[message_len++] = ']';
 8001140:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001144:	1c5a      	adds	r2, r3, #1
 8001146:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800114a:	3388      	adds	r3, #136	; 0x88
 800114c:	443b      	add	r3, r7
 800114e:	225d      	movs	r2, #93	; 0x5d
 8001150:	f803 2c80 	strb.w	r2, [r3, #-128]
				message[message_len++] = '\n';
 8001154:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001158:	1c5a      	adds	r2, r3, #1
 800115a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800115e:	3388      	adds	r3, #136	; 0x88
 8001160:	443b      	add	r3, r7
 8001162:	220a      	movs	r2, #10
 8001164:	f803 2c80 	strb.w	r2, [r3, #-128]
				message[message_len] = '\0';
 8001168:	f107 0208 	add.w	r2, r7, #8
 800116c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001170:	4413      	add	r3, r2
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]

				HAL_UART_Transmit(&huart1, message, message_len, 100);
 8001176:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800117a:	b29a      	uxth	r2, r3
 800117c:	f107 0108 	add.w	r1, r7, #8
 8001180:	2364      	movs	r3, #100	; 0x64
 8001182:	483b      	ldr	r0, [pc, #236]	; (8001270 <HAL_UART_RxCpltCallback+0x2d0>)
 8001184:	f006 fe4a 	bl	8007e1c <HAL_UART_Transmit>
				programMode = Shuffle;
 8001188:	4b45      	ldr	r3, [pc, #276]	; (80012a0 <HAL_UART_RxCpltCallback+0x300>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
			} else if ((i == 19) && compareStrings(setShuffle, data, 18) == 1) {
 800118e:	e064      	b.n	800125a <HAL_UART_RxCpltCallback+0x2ba>
			} else if ((i == 19) && compareStrings(setLiner, data, 18) == 1) {
 8001190:	4b38      	ldr	r3, [pc, #224]	; (8001274 <HAL_UART_RxCpltCallback+0x2d4>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b13      	cmp	r3, #19
 8001196:	d15b      	bne.n	8001250 <HAL_UART_RxCpltCallback+0x2b0>
 8001198:	2212      	movs	r2, #18
 800119a:	4937      	ldr	r1, [pc, #220]	; (8001278 <HAL_UART_RxCpltCallback+0x2d8>)
 800119c:	4841      	ldr	r0, [pc, #260]	; (80012a4 <HAL_UART_RxCpltCallback+0x304>)
 800119e:	f7ff fedb 	bl	8000f58 <compareStrings>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d153      	bne.n	8001250 <HAL_UART_RxCpltCallback+0x2b0>
				char message[100] = "[INFO][Play mode changed to Ordered][";
 80011a8:	4b3f      	ldr	r3, [pc, #252]	; (80012a8 <HAL_UART_RxCpltCallback+0x308>)
 80011aa:	f107 0408 	add.w	r4, r7, #8
 80011ae:	461d      	mov	r5, r3
 80011b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011bc:	6020      	str	r0, [r4, #0]
 80011be:	3404      	adds	r4, #4
 80011c0:	8021      	strh	r1, [r4, #0]
 80011c2:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80011c6:	223e      	movs	r2, #62	; 0x3e
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f008 fa20 	bl	8009610 <memset>
				int message_len = strlen(message);
 80011d0:	f107 0308 	add.w	r3, r7, #8
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f805 	bl	80001e4 <strlen>
 80011da:	4603      	mov	r3, r0
 80011dc:	67fb      	str	r3, [r7, #124]	; 0x7c
				char *time_str = get_current_time();
 80011de:	f7ff fc29 	bl	8000a34 <get_current_time>
 80011e2:	66f8      	str	r0, [r7, #108]	; 0x6c
				for (int i = 0; i < 5; i++) {
 80011e4:	2300      	movs	r3, #0
 80011e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80011e8:	e00d      	b.n	8001206 <HAL_UART_RxCpltCallback+0x266>
					message[message_len++] = time_str[i];
 80011ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80011ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80011ee:	441a      	add	r2, r3
 80011f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80011f2:	1c59      	adds	r1, r3, #1
 80011f4:	67f9      	str	r1, [r7, #124]	; 0x7c
 80011f6:	7812      	ldrb	r2, [r2, #0]
 80011f8:	3388      	adds	r3, #136	; 0x88
 80011fa:	443b      	add	r3, r7
 80011fc:	f803 2c80 	strb.w	r2, [r3, #-128]
				for (int i = 0; i < 5; i++) {
 8001200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001202:	3301      	adds	r3, #1
 8001204:	67bb      	str	r3, [r7, #120]	; 0x78
 8001206:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001208:	2b04      	cmp	r3, #4
 800120a:	ddee      	ble.n	80011ea <HAL_UART_RxCpltCallback+0x24a>
				}
				message[message_len++] = ']';
 800120c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001212:	3388      	adds	r3, #136	; 0x88
 8001214:	443b      	add	r3, r7
 8001216:	225d      	movs	r2, #93	; 0x5d
 8001218:	f803 2c80 	strb.w	r2, [r3, #-128]
				message[message_len++] = '\n';
 800121c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001222:	3388      	adds	r3, #136	; 0x88
 8001224:	443b      	add	r3, r7
 8001226:	220a      	movs	r2, #10
 8001228:	f803 2c80 	strb.w	r2, [r3, #-128]
				message[message_len] = '\0';
 800122c:	f107 0208 	add.w	r2, r7, #8
 8001230:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001232:	4413      	add	r3, r2
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]

				HAL_UART_Transmit(&huart1, message, message_len, 100);
 8001238:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800123a:	b29a      	uxth	r2, r3
 800123c:	f107 0108 	add.w	r1, r7, #8
 8001240:	2364      	movs	r3, #100	; 0x64
 8001242:	480b      	ldr	r0, [pc, #44]	; (8001270 <HAL_UART_RxCpltCallback+0x2d0>)
 8001244:	f006 fdea 	bl	8007e1c <HAL_UART_Transmit>
				programMode = Liner;
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <HAL_UART_RxCpltCallback+0x300>)
 800124a:	2201      	movs	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
			} else if ((i == 19) && compareStrings(setLiner, data, 18) == 1) {
 800124e:	e004      	b.n	800125a <HAL_UART_RxCpltCallback+0x2ba>
			} else {
				HAL_UART_Transmit_IT(&huart1, "INVALID INPUT\n", 14);
 8001250:	220e      	movs	r2, #14
 8001252:	4916      	ldr	r1, [pc, #88]	; (80012ac <HAL_UART_RxCpltCallback+0x30c>)
 8001254:	4806      	ldr	r0, [pc, #24]	; (8001270 <HAL_UART_RxCpltCallback+0x2d0>)
 8001256:	f006 fe6b 	bl	8007f30 <HAL_UART_Transmit_IT>
			}

			i = 0;
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_UART_RxCpltCallback+0x2d4>)
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8001260:	bf00      	nop
 8001262:	3788      	adds	r7, #136	; 0x88
 8001264:	46bd      	mov	sp, r7
 8001266:	bdb0      	pop	{r4, r5, r7, pc}
 8001268:	40013800 	.word	0x40013800
 800126c:	200006ec 	.word	0x200006ec
 8001270:	20000284 	.word	0x20000284
 8001274:	200006ed 	.word	0x200006ed
 8001278:	20000688 	.word	0x20000688
 800127c:	20000004 	.word	0x20000004
 8001280:	20000684 	.word	0x20000684
 8001284:	0800e074 	.word	0x0800e074
 8001288:	2000000c 	.word	0x2000000c
 800128c:	0800e088 	.word	0x0800e088
 8001290:	200000dc 	.word	0x200000dc
 8001294:	20000014 	.word	0x20000014
 8001298:	20000020 	.word	0x20000020
 800129c:	0800e0ac 	.word	0x0800e0ac
 80012a0:	20000000 	.word	0x20000000
 80012a4:	20000034 	.word	0x20000034
 80012a8:	0800e110 	.word	0x0800e110
 80012ac:	0800e09c 	.word	0x0800e09c

080012b0 <normalize_adc>:
	CHANGE_MUSIC, CHANGE_VOLUME, NONE
};
enum ADC_FUNCTION adc_function = NONE;

uint32_t normalize_adc(uint32_t adc_value, uint32_t max_adc_value,
		uint32_t playlist_size) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
	if (adc_function == CHANGE_MUSIC) {
 80012bc:	4b30      	ldr	r3, [pc, #192]	; (8001380 <normalize_adc+0xd0>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d131      	bne.n	8001328 <normalize_adc+0x78>
		// Calculate the step size
		float step = (float) max_adc_value / (playlist_size);
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	ee07 3a90 	vmov	s15, r3
 80012d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012dc:	edc7 7a04 	vstr	s15, [r7, #16]
		// Calculate the normalized music number
		uint32_t normalized_number = (uint32_t) ((float) adc_value / step + 0.5); // Adding 0.5 for rounding
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	ee07 3a90 	vmov	s15, r3
 80012e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80012ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012f2:	ee16 0a90 	vmov	r0, s13
 80012f6:	f7ff f937 	bl	8000568 <__aeabi_f2d>
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	4b21      	ldr	r3, [pc, #132]	; (8001384 <normalize_adc+0xd4>)
 8001300:	f7fe ffd4 	bl	80002ac <__adddf3>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	f7ff f984 	bl	8000618 <__aeabi_d2uiz>
 8001310:	4603      	mov	r3, r0
 8001312:	617b      	str	r3, [r7, #20]
		// Ensure the normalized number is at least 1
		if (normalized_number < 1) {
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <normalize_adc+0x6e>
			normalized_number = 1;
 800131a:	2301      	movs	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
		}
		adc_select = normalized_number;
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	4a19      	ldr	r2, [pc, #100]	; (8001388 <normalize_adc+0xd8>)
 8001322:	6013      	str	r3, [r2, #0]
		return normalized_number;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	e026      	b.n	8001376 <normalize_adc+0xc6>
	} else if (adc_function == CHANGE_VOLUME) {
 8001328:	4b15      	ldr	r3, [pc, #84]	; (8001380 <normalize_adc+0xd0>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d122      	bne.n	8001376 <normalize_adc+0xc6>
		adc_value = (adc_value * 100U) / (max_adc_value - 1);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2264      	movs	r2, #100	; 0x64
 8001334:	fb03 f202 	mul.w	r2, r3, r2
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	3b01      	subs	r3, #1
 800133c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001340:	60fb      	str	r3, [r7, #12]
		if (adc_value > 95) {
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2b5f      	cmp	r3, #95	; 0x5f
 8001346:	d901      	bls.n	800134c <normalize_adc+0x9c>
			adc_value = 101;
 8001348:	2365      	movs	r3, #101	; 0x65
 800134a:	60fb      	str	r3, [r7, #12]
		}
		if (adc_value <= 1)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d801      	bhi.n	8001356 <normalize_adc+0xa6>
			adc_value = 1;
 8001352:	2301      	movs	r3, #1
 8001354:	60fb      	str	r3, [r7, #12]
		adc_select = adc_value - 1;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	3b01      	subs	r3, #1
 800135a:	461a      	mov	r2, r3
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <normalize_adc+0xd8>)
 800135e:	601a      	str	r2, [r3, #0]
		adc_value -= 1;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	3b01      	subs	r3, #1
 8001364:	60fb      	str	r3, [r7, #12]
		if (adc_value <= 0)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <normalize_adc+0xc0>
			adc_value = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
		return adc_value - 1;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	3b01      	subs	r3, #1
 8001374:	e7ff      	b.n	8001376 <normalize_adc+0xc6>
	}

}
 8001376:	4618      	mov	r0, r3
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000046 	.word	0x20000046
 8001384:	3fe00000 	.word	0x3fe00000
 8001388:	20000600 	.word	0x20000600

0800138c <denoise_adc>:

int adc_indx = 0;
uint32_t adc_values[10];
int denoise_adc() {
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
	int sum = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 10; i++) {
 8001396:	2300      	movs	r3, #0
 8001398:	603b      	str	r3, [r7, #0]
 800139a:	e009      	b.n	80013b0 <denoise_adc+0x24>
		sum += adc_values[i];
 800139c:	4a0c      	ldr	r2, [pc, #48]	; (80013d0 <denoise_adc+0x44>)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4413      	add	r3, r2
 80013a8:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 10; i++) {
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	3301      	adds	r3, #1
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	2b09      	cmp	r3, #9
 80013b4:	ddf2      	ble.n	800139c <denoise_adc+0x10>
	}
	return sum / 10;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a06      	ldr	r2, [pc, #24]	; (80013d4 <denoise_adc+0x48>)
 80013ba:	fb82 1203 	smull	r1, r2, r2, r3
 80013be:	1092      	asrs	r2, r2, #2
 80013c0:	17db      	asrs	r3, r3, #31
 80013c2:	1ad3      	subs	r3, r2, r3
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	200006f4 	.word	0x200006f4
 80013d4:	66666667 	.word	0x66666667

080013d8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013e8:	d128      	bne.n	800143c <HAL_ADC_ConvCpltCallback+0x64>
		uint32_t value;
		value = HAL_ADC_GetValue(hadc);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f002 f831 	bl	8003452 <HAL_ADC_GetValue>
 80013f0:	60f8      	str	r0, [r7, #12]
		if (adc_indx < 10)
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <HAL_ADC_ConvCpltCallback+0x6c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b09      	cmp	r3, #9
 80013f8:	dc09      	bgt.n	800140e <HAL_ADC_ConvCpltCallback+0x36>
			adc_values[adc_indx++] = value;
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_ADC_ConvCpltCallback+0x6c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	4910      	ldr	r1, [pc, #64]	; (8001444 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001402:	600a      	str	r2, [r1, #0]
 8001404:	4910      	ldr	r1, [pc, #64]	; (8001448 <HAL_ADC_ConvCpltCallback+0x70>)
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			value = denoise_adc();
			extract_int_to_carrier(
					normalize_adc(value, 4095, getDictSize(playlist)));
		}
	}
}
 800140c:	e016      	b.n	800143c <HAL_ADC_ConvCpltCallback+0x64>
			adc_indx = 0;
 800140e:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
			value = denoise_adc();
 8001414:	f7ff ffba 	bl	800138c <denoise_adc>
 8001418:	4603      	mov	r3, r0
 800141a:	60fb      	str	r3, [r7, #12]
					normalize_adc(value, 4095, getDictSize(playlist)));
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_ADC_ConvCpltCallback+0x74>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f9ea 	bl	80007fa <getDictSize>
 8001426:	4603      	mov	r3, r0
			extract_int_to_carrier(
 8001428:	461a      	mov	r2, r3
 800142a:	f640 71ff 	movw	r1, #4095	; 0xfff
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f7ff ff3e 	bl	80012b0 <normalize_adc>
 8001434:	4603      	mov	r3, r0
 8001436:	4618      	mov	r0, r3
 8001438:	f000 f876 	bl	8001528 <extract_int_to_carrier>
}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200006f0 	.word	0x200006f0
 8001448:	200006f4 	.word	0x200006f4
 800144c:	200000dc 	.word	0x200000dc

08001450 <display_number>:
//ADC End

void display_number(int led_flag, int _number) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOD,
 800145a:	2201      	movs	r2, #1
 800145c:	211e      	movs	r1, #30
 800145e:	4813      	ldr	r0, [pc, #76]	; (80014ac <display_number+0x5c>)
 8001460:	f003 fb8a 	bl	8004b78 <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOD, led[led_flag], DISPLAY_ON);
 8001464:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <display_number+0x60>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800146c:	2200      	movs	r2, #0
 800146e:	4619      	mov	r1, r3
 8001470:	480e      	ldr	r0, [pc, #56]	; (80014ac <display_number+0x5c>)
 8001472:	f003 fb81 	bl	8004b78 <HAL_GPIO_WritePin>
	if (_number != 0) {
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d009      	beq.n	8001490 <display_number+0x40>
		HAL_GPIO_WritePin(GPIOD, digits[_number].pattern, GPIO_PIN_SET);
 800147c:	4a0d      	ldr	r2, [pc, #52]	; (80014b4 <display_number+0x64>)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	4413      	add	r3, r2
 8001484:	889b      	ldrh	r3, [r3, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	4619      	mov	r1, r3
 800148a:	4808      	ldr	r0, [pc, #32]	; (80014ac <display_number+0x5c>)
 800148c:	f003 fb74 	bl	8004b78 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(GPIOD, digits[_number].anti_pattern, GPIO_PIN_RESET);
 8001490:	4a08      	ldr	r2, [pc, #32]	; (80014b4 <display_number+0x64>)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4413      	add	r3, r2
 8001498:	88db      	ldrh	r3, [r3, #6]
 800149a:	2200      	movs	r2, #0
 800149c:	4619      	mov	r1, r3
 800149e:	4803      	ldr	r0, [pc, #12]	; (80014ac <display_number+0x5c>)
 80014a0:	f003 fb6a 	bl	8004b78 <HAL_GPIO_WritePin>
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	48000c00 	.word	0x48000c00
 80014b0:	2000060c 	.word	0x2000060c
 80014b4:	20000634 	.word	0x20000634

080014b8 <init_display>:

//test removing
void init_display() {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
//Reset All Segment Values
	HAL_GPIO_WritePin(GPIOD,
 80014bc:	2201      	movs	r2, #1
 80014be:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <init_display+0x20>)
 80014c4:	f003 fb58 	bl	8004b78 <HAL_GPIO_WritePin>
	GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_12, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOD,
 80014c8:	2201      	movs	r2, #1
 80014ca:	211e      	movs	r1, #30
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <init_display+0x20>)
 80014ce:	f003 fb53 	bl	8004b78 <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	48000c00 	.word	0x48000c00

080014dc <digit_count>:

//Carrier is to be displayed on seven segment
int musicNumberSize = 0;
int digit_count(int val) {
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	if (val == 0)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <digit_count+0x12>
		return 1;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e013      	b.n	8001516 <digit_count+0x3a>
	int i, size = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
	int temp = val;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	60bb      	str	r3, [r7, #8]

	while (temp > 0) {
 80014f6:	e00a      	b.n	800150e <digit_count+0x32>
		temp /= 10;
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <digit_count+0x48>)
 80014fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001500:	1092      	asrs	r2, r2, #2
 8001502:	17db      	asrs	r3, r3, #31
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	60bb      	str	r3, [r7, #8]
		size++;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	3301      	adds	r3, #1
 800150c:	60fb      	str	r3, [r7, #12]
	while (temp > 0) {
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	2b00      	cmp	r3, #0
 8001512:	dcf1      	bgt.n	80014f8 <digit_count+0x1c>
	}
	return size;
 8001514:	68fb      	ldr	r3, [r7, #12]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	66666667 	.word	0x66666667

08001528 <extract_int_to_carrier>:

void extract_int_to_carrier(int val) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	int i;
	i = digit_count(val) - 1;
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff ffd3 	bl	80014dc <digit_count>
 8001536:	4603      	mov	r3, r0
 8001538:	3b01      	subs	r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
	musicNumberSize = digit_count(val);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ffcd 	bl	80014dc <digit_count>
 8001542:	4603      	mov	r3, r0
 8001544:	4a12      	ldr	r2, [pc, #72]	; (8001590 <extract_int_to_carrier+0x68>)
 8001546:	6013      	str	r3, [r2, #0]

	while (val > 0) {
 8001548:	e019      	b.n	800157e <extract_int_to_carrier+0x56>
		carrier[i--] = val % 10;
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	1e43      	subs	r3, r0, #1
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <extract_int_to_carrier+0x6c>)
 8001554:	fb83 2301 	smull	r2, r3, r3, r1
 8001558:	109a      	asrs	r2, r3, #2
 800155a:	17cb      	asrs	r3, r1, #31
 800155c:	1ad2      	subs	r2, r2, r3
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	1aca      	subs	r2, r1, r3
 8001568:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <extract_int_to_carrier+0x70>)
 800156a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		val /= 10;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a08      	ldr	r2, [pc, #32]	; (8001594 <extract_int_to_carrier+0x6c>)
 8001572:	fb82 1203 	smull	r1, r2, r2, r3
 8001576:	1092      	asrs	r2, r2, #2
 8001578:	17db      	asrs	r3, r3, #31
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	607b      	str	r3, [r7, #4]
	while (val > 0) {
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	dce2      	bgt.n	800154a <extract_int_to_carrier+0x22>
	}
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	2000071c 	.word	0x2000071c
 8001594:	66666667 	.word	0x66666667
 8001598:	20000614 	.word	0x20000614

0800159c <array_to_number>:

int array_to_number(int *array, int size) {
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
	int number = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < size; i++) {
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	e00f      	b.n	80015d0 <array_to_number+0x34>
		number = number * 10 + array[i];
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4619      	mov	r1, r3
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	4413      	add	r3, r2
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	440b      	add	r3, r1
 80015c8:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < size; i++) {
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	3301      	adds	r3, #1
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68ba      	ldr	r2, [r7, #8]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	dbeb      	blt.n	80015b0 <array_to_number+0x14>
	}
	return number;
 80015d8:	68fb      	ldr	r3, [r7, #12]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <number_to_array>:

int* number_to_array(int num) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	if (num == 0) {
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d103      	bne.n	80015fe <number_to_array+0x16>
		int arr[1] = { 0 };
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
		return arr;
 80015fa:	2300      	movs	r3, #0
 80015fc:	e031      	b.n	8001662 <number_to_array+0x7a>
	}

	int *arr = (int*) malloc(digit_count(num) * sizeof(int));
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ff6c 	bl	80014dc <digit_count>
 8001604:	4603      	mov	r3, r0
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4618      	mov	r0, r3
 800160a:	f007 ffeb 	bl	80095e4 <malloc>
 800160e:	4603      	mov	r3, r0
 8001610:	60fb      	str	r3, [r7, #12]

	int temp = num;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	617b      	str	r3, [r7, #20]
	int i = digit_count(num) - 1;
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ff60 	bl	80014dc <digit_count>
 800161c:	4603      	mov	r3, r0
 800161e:	3b01      	subs	r3, #1
 8001620:	613b      	str	r3, [r7, #16]

	while (temp != 0) {
 8001622:	e01a      	b.n	800165a <number_to_array+0x72>
		arr[i--] = temp % 10;
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1e5a      	subs	r2, r3, #1
 8001628:	613a      	str	r2, [r7, #16]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	18d0      	adds	r0, r2, r3
 8001630:	6979      	ldr	r1, [r7, #20]
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <number_to_array+0x84>)
 8001634:	fb83 2301 	smull	r2, r3, r3, r1
 8001638:	109a      	asrs	r2, r3, #2
 800163a:	17cb      	asrs	r3, r1, #31
 800163c:	1ad2      	subs	r2, r2, r3
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	1aca      	subs	r2, r1, r3
 8001648:	6002      	str	r2, [r0, #0]
		temp /= 10;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	4a07      	ldr	r2, [pc, #28]	; (800166c <number_to_array+0x84>)
 800164e:	fb82 1203 	smull	r1, r2, r2, r3
 8001652:	1092      	asrs	r2, r2, #2
 8001654:	17db      	asrs	r3, r3, #31
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	617b      	str	r3, [r7, #20]
	while (temp != 0) {
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1e1      	bne.n	8001624 <number_to_array+0x3c>
	}

	return arr;
 8001660:	68fb      	ldr	r3, [r7, #12]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	66666667 	.word	0x66666667

08001670 <generate_random_int>:

int generate_random_int() {
 8001670:	b598      	push	{r3, r4, r7, lr}
 8001672:	af00      	add	r7, sp, #0
	return random_number = rand() % getDictSize(playlist);
 8001674:	f008 f8e2 	bl	800983c <rand>
 8001678:	4604      	mov	r4, r0
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <generate_random_int+0x2c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff f8bb 	bl	80007fa <getDictSize>
 8001684:	4603      	mov	r3, r0
 8001686:	fb94 f2f3 	sdiv	r2, r4, r3
 800168a:	fb02 f303 	mul.w	r3, r2, r3
 800168e:	1ae3      	subs	r3, r4, r3
 8001690:	4a03      	ldr	r2, [pc, #12]	; (80016a0 <generate_random_int+0x30>)
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	4b02      	ldr	r3, [pc, #8]	; (80016a0 <generate_random_int+0x30>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	bd98      	pop	{r3, r4, r7, pc}
 800169c:	200000dc 	.word	0x200000dc
 80016a0:	20000624 	.word	0x20000624

080016a4 <next_shuffle>:
	} else {
		programMode = Shuffle;
	}
}

int next_shuffle() {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
	struct DictionaryNode *node = NULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
	int toneCount = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
	srand(HAL_GetTick());
 80016b2:	f001 fb51 	bl	8002d58 <HAL_GetTick>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f008 f891 	bl	80097e0 <srand>
	int i = generate_random_int();
 80016be:	f7ff ffd7 	bl	8001670 <generate_random_int>
 80016c2:	60f8      	str	r0, [r7, #12]
	melody = lookup(playlist, playlistOrder[i], &toneCount, &node);
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <next_shuffle+0xa8>)
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	4b21      	ldr	r3, [pc, #132]	; (8001750 <next_shuffle+0xac>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	6819      	ldr	r1, [r3, #0]
 80016d4:	f107 0308 	add.w	r3, r7, #8
 80016d8:	1d3a      	adds	r2, r7, #4
 80016da:	f7ff f850 	bl	800077e <lookup>
 80016de:	4603      	mov	r3, r0
 80016e0:	4a1c      	ldr	r2, [pc, #112]	; (8001754 <next_shuffle+0xb0>)
 80016e2:	6013      	str	r3, [r2, #0]

	while (node && isBlacklisted(node)) {
 80016e4:	e012      	b.n	800170c <next_shuffle+0x68>
		i = generate_random_int();
 80016e6:	f7ff ffc3 	bl	8001670 <generate_random_int>
 80016ea:	60f8      	str	r0, [r7, #12]
		melody = lookup(playlist, playlistOrder[i], &toneCount, &node);
 80016ec:	4b17      	ldr	r3, [pc, #92]	; (800174c <next_shuffle+0xa8>)
 80016ee:	6818      	ldr	r0, [r3, #0]
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <next_shuffle+0xac>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	6819      	ldr	r1, [r3, #0]
 80016fc:	f107 0308 	add.w	r3, r7, #8
 8001700:	1d3a      	adds	r2, r7, #4
 8001702:	f7ff f83c 	bl	800077e <lookup>
 8001706:	4603      	mov	r3, r0
 8001708:	4a12      	ldr	r2, [pc, #72]	; (8001754 <next_shuffle+0xb0>)
 800170a:	6013      	str	r3, [r2, #0]
	while (node && isBlacklisted(node)) {
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d006      	beq.n	8001720 <next_shuffle+0x7c>
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff f896 	bl	8000846 <isBlacklisted>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1e2      	bne.n	80016e6 <next_shuffle+0x42>
	}
	currentMusic = i + 1;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	3301      	adds	r3, #1
 8001724:	4a0c      	ldr	r2, [pc, #48]	; (8001758 <next_shuffle+0xb4>)
 8001726:	6013      	str	r3, [r2, #0]
	if (node) {
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d008      	beq.n	8001740 <next_shuffle+0x9c>
		setBlacklisted(node);
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff f86e 	bl	8000812 <setBlacklisted>
		playedCount++;
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <next_shuffle+0xb8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	3301      	adds	r3, #1
 800173c:	4a07      	ldr	r2, [pc, #28]	; (800175c <next_shuffle+0xb8>)
 800173e:	6013      	str	r3, [r2, #0]
	}

	return toneCount;
 8001740:	687b      	ldr	r3, [r7, #4]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200000dc 	.word	0x200000dc
 8001750:	200000e0 	.word	0x200000e0
 8001754:	20000608 	.word	0x20000608
 8001758:	200005fc 	.word	0x200005fc
 800175c:	200005f8 	.word	0x200005f8

08001760 <next_music>:

//Choose next music based on programMode
void next_music() {
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
	int toneCount;
	struct DictionaryNode *node;
	if (programState == Resume) {
 8001766:	4b36      	ldr	r3, [pc, #216]	; (8001840 <next_music+0xe0>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d164      	bne.n	8001838 <next_music+0xd8>
		if (playedCount >= getDictSize(playlist)) {
 800176e:	4b35      	ldr	r3, [pc, #212]	; (8001844 <next_music+0xe4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff f841 	bl	80007fa <getDictSize>
 8001778:	4602      	mov	r2, r0
 800177a:	4b33      	ldr	r3, [pc, #204]	; (8001848 <next_music+0xe8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	dc25      	bgt.n	80017ce <next_music+0x6e>
			for (int i = 0; i < getDictSize(playlist); i++) {
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	e016      	b.n	80017b6 <next_music+0x56>
				melody = lookup(playlist, playlistOrder[i], &toneCount, &node);
 8001788:	4b2e      	ldr	r3, [pc, #184]	; (8001844 <next_music+0xe4>)
 800178a:	6818      	ldr	r0, [r3, #0]
 800178c:	4b2f      	ldr	r3, [pc, #188]	; (800184c <next_music+0xec>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	6819      	ldr	r1, [r3, #0]
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	f107 0208 	add.w	r2, r7, #8
 800179e:	f7fe ffee 	bl	800077e <lookup>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4a2a      	ldr	r2, [pc, #168]	; (8001850 <next_music+0xf0>)
 80017a6:	6013      	str	r3, [r2, #0]
				unsetBlacklisted(node);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff f83e 	bl	800082c <unsetBlacklisted>
			for (int i = 0; i < getDictSize(playlist); i++) {
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	3301      	adds	r3, #1
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	4b23      	ldr	r3, [pc, #140]	; (8001844 <next_music+0xe4>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff f81d 	bl	80007fa <getDictSize>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4293      	cmp	r3, r2
 80017c6:	dbdf      	blt.n	8001788 <next_music+0x28>
			}
			playedCount = 0;
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <next_music+0xe8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
		}

		if (programMode == Liner) {
 80017ce:	4b21      	ldr	r3, [pc, #132]	; (8001854 <next_music+0xf4>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d120      	bne.n	8001818 <next_music+0xb8>
			currentMusic = playedCount + 1;
 80017d6:	4b1c      	ldr	r3, [pc, #112]	; (8001848 <next_music+0xe8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	3301      	adds	r3, #1
 80017dc:	4a1e      	ldr	r2, [pc, #120]	; (8001858 <next_music+0xf8>)
 80017de:	6013      	str	r3, [r2, #0]
			melody = lookup(playlist, playlistOrder[playedCount++], &toneCount,
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <next_music+0xe4>)
 80017e2:	6818      	ldr	r0, [r3, #0]
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <next_music+0xec>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b17      	ldr	r3, [pc, #92]	; (8001848 <next_music+0xe8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	1c59      	adds	r1, r3, #1
 80017ee:	4c16      	ldr	r4, [pc, #88]	; (8001848 <next_music+0xe8>)
 80017f0:	6021      	str	r1, [r4, #0]
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	6819      	ldr	r1, [r3, #0]
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	f107 0208 	add.w	r2, r7, #8
 80017fe:	f7fe ffbe 	bl	800077e <lookup>
 8001802:	4603      	mov	r3, r0
 8001804:	4a12      	ldr	r2, [pc, #72]	; (8001850 <next_music+0xf0>)
 8001806:	6013      	str	r3, [r2, #0]
					&node);
			Change_Melody(melody, toneCount);
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <next_music+0xf0>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68ba      	ldr	r2, [r7, #8]
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f001 f84d 	bl	80028b0 <Change_Melody>
 8001816:	e00a      	b.n	800182e <next_music+0xce>
		} else {
			toneCount = next_shuffle();
 8001818:	f7ff ff44 	bl	80016a4 <next_shuffle>
 800181c:	4603      	mov	r3, r0
 800181e:	60bb      	str	r3, [r7, #8]
			Change_Melody(melody, toneCount);
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <next_music+0xf0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68ba      	ldr	r2, [r7, #8]
 8001826:	4611      	mov	r1, r2
 8001828:	4618      	mov	r0, r3
 800182a:	f001 f841 	bl	80028b0 <Change_Melody>
		}
		extract_int_to_carrier(currentMusic);
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <next_music+0xf8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fe78 	bl	8001528 <extract_int_to_carrier>
	}
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	bd90      	pop	{r4, r7, pc}
 8001840:	20000684 	.word	0x20000684
 8001844:	200000dc 	.word	0x200000dc
 8001848:	200005f8 	.word	0x200005f8
 800184c:	200000e0 	.word	0x200000e0
 8001850:	20000608 	.word	0x20000608
 8001854:	20000000 	.word	0x20000000
 8001858:	200005fc 	.word	0x200005fc

0800185c <set_music>:

//Set music directly
void set_music(int num) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	int toneCount;
	struct DictionaryNode *node;
	melody = lookup(playlist, playlistOrder[num - 1], &toneCount, &node);
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <set_music+0x68>)
 8001866:	6818      	ldr	r0, [r3, #0]
 8001868:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <set_music+0x6c>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001872:	3b01      	subs	r3, #1
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	6819      	ldr	r1, [r3, #0]
 800187a:	f107 0308 	add.w	r3, r7, #8
 800187e:	f107 020c 	add.w	r2, r7, #12
 8001882:	f7fe ff7c 	bl	800077e <lookup>
 8001886:	4603      	mov	r3, r0
 8001888:	4a10      	ldr	r2, [pc, #64]	; (80018cc <set_music+0x70>)
 800188a:	6013      	str	r3, [r2, #0]
	Change_Melody(melody, toneCount);
 800188c:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <set_music+0x70>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f001 f80b 	bl	80028b0 <Change_Melody>
	currentMusic = num;
 800189a:	4a0d      	ldr	r2, [pc, #52]	; (80018d0 <set_music+0x74>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6013      	str	r3, [r2, #0]
	playedCount = num - 1;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	4a0b      	ldr	r2, [pc, #44]	; (80018d4 <set_music+0x78>)
 80018a6:	6013      	str	r3, [r2, #0]
	unsetBlacklisted(node);
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe ffbe 	bl	800082c <unsetBlacklisted>
	extract_int_to_carrier(currentMusic);
 80018b0:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <set_music+0x74>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fe37 	bl	8001528 <extract_int_to_carrier>
}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200000dc 	.word	0x200000dc
 80018c8:	200000e0 	.word	0x200000e0
 80018cc:	20000608 	.word	0x20000608
 80018d0:	200005fc 	.word	0x200005fc
 80018d4:	200005f8 	.word	0x200005f8

080018d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b096      	sub	sp, #88	; 0x58
 80018dc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	struct digit _digits[10];
	_digits[0].number = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
	_digits[0].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
 80018e2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80018e6:	817b      	strh	r3, [r7, #10]
			| GPIO_PIN_15;

	_digits[1].number = 1;
 80018e8:	2301      	movs	r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
	_digits[1].pattern = GPIO_PIN_12;
 80018ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f0:	823b      	strh	r3, [r7, #16]
	_digits[1].anti_pattern = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80018f2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80018f6:	827b      	strh	r3, [r7, #18]

	_digits[2].number = 2;
 80018f8:	2302      	movs	r3, #2
 80018fa:	617b      	str	r3, [r7, #20]
	_digits[2].pattern = GPIO_PIN_13;
 80018fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001900:	833b      	strh	r3, [r7, #24]
	_digits[2].anti_pattern = GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15;
 8001902:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001906:	837b      	strh	r3, [r7, #26]

	_digits[3].number = 3;
 8001908:	2303      	movs	r3, #3
 800190a:	61fb      	str	r3, [r7, #28]
	_digits[3].pattern = GPIO_PIN_12 | GPIO_PIN_13;
 800190c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001910:	843b      	strh	r3, [r7, #32]
	_digits[3].anti_pattern = GPIO_PIN_14 | GPIO_PIN_15;
 8001912:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001916:	847b      	strh	r3, [r7, #34]	; 0x22

	_digits[4].number = 4;
 8001918:	2304      	movs	r3, #4
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
	_digits[4].pattern = GPIO_PIN_14;
 800191c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001920:	853b      	strh	r3, [r7, #40]	; 0x28
	_digits[4].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15;
 8001922:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001926:	857b      	strh	r3, [r7, #42]	; 0x2a

	_digits[5].number = 5;
 8001928:	2305      	movs	r3, #5
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c
	_digits[5].pattern = GPIO_PIN_12 | GPIO_PIN_14;
 800192c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001930:	863b      	strh	r3, [r7, #48]	; 0x30
	_digits[5].anti_pattern = GPIO_PIN_13 | GPIO_PIN_15;
 8001932:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001936:	867b      	strh	r3, [r7, #50]	; 0x32

	_digits[6].number = 6;
 8001938:	2306      	movs	r3, #6
 800193a:	637b      	str	r3, [r7, #52]	; 0x34
	_digits[6].pattern = GPIO_PIN_13 | GPIO_PIN_14;
 800193c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001940:	873b      	strh	r3, [r7, #56]	; 0x38
	_digits[6].anti_pattern = GPIO_PIN_12 | GPIO_PIN_15;
 8001942:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001946:	877b      	strh	r3, [r7, #58]	; 0x3a

	_digits[7].number = 7;
 8001948:	2307      	movs	r3, #7
 800194a:	63fb      	str	r3, [r7, #60]	; 0x3c
	_digits[7].pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 800194c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001950:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	_digits[7].anti_pattern = GPIO_PIN_15;
 8001954:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001958:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	_digits[8].number = 8;
 800195c:	2308      	movs	r3, #8
 800195e:	647b      	str	r3, [r7, #68]	; 0x44
	_digits[8].pattern = GPIO_PIN_15;
 8001960:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001964:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	_digits[8].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 8001968:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800196c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	_digits[9].number = 9;
 8001970:	2309      	movs	r3, #9
 8001972:	64fb      	str	r3, [r7, #76]	; 0x4c
	_digits[9].pattern = GPIO_PIN_12 | GPIO_PIN_15;
 8001974:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001978:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	_digits[9].anti_pattern = GPIO_PIN_13 | GPIO_PIN_14;
 800197c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001980:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

//initialize Global digits structure
	for (int i = 0; i < 10; i++) {
 8001984:	2300      	movs	r3, #0
 8001986:	657b      	str	r3, [r7, #84]	; 0x54
 8001988:	e00f      	b.n	80019aa <main+0xd2>
		digits[i] = _digits[i];
 800198a:	4922      	ldr	r1, [pc, #136]	; (8001a14 <main+0x13c>)
 800198c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800198e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001990:	00d2      	lsls	r2, r2, #3
 8001992:	3258      	adds	r2, #88	; 0x58
 8001994:	443a      	add	r2, r7
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	440b      	add	r3, r1
 800199a:	3a54      	subs	r2, #84	; 0x54
 800199c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019a0:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 0; i < 10; i++) {
 80019a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a6:	3301      	adds	r3, #1
 80019a8:	657b      	str	r3, [r7, #84]	; 0x54
 80019aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ac:	2b09      	cmp	r3, #9
 80019ae:	ddec      	ble.n	800198a <main+0xb2>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80019b0:	f001 f978 	bl	8002ca4 <HAL_Init>

	/* USER CODE BEGIN Init */

//Set 7-segment PINS
	led[0] = GPIO_PIN_1;
 80019b4:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <main+0x140>)
 80019b6:	2202      	movs	r2, #2
 80019b8:	801a      	strh	r2, [r3, #0]
	led[1] = GPIO_PIN_2;
 80019ba:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <main+0x140>)
 80019bc:	2204      	movs	r2, #4
 80019be:	805a      	strh	r2, [r3, #2]
	led[2] = GPIO_PIN_3;
 80019c0:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <main+0x140>)
 80019c2:	2208      	movs	r2, #8
 80019c4:	809a      	strh	r2, [r3, #4]
	led[3] = GPIO_PIN_4;
 80019c6:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <main+0x140>)
 80019c8:	2210      	movs	r2, #16
 80019ca:	80da      	strh	r2, [r3, #6]

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80019cc:	f000 f82e 	bl	8001a2c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80019d0:	f000 fa9e 	bl	8001f10 <MX_GPIO_Init>
	MX_I2C1_Init();
 80019d4:	f000 f902 	bl	8001bdc <MX_I2C1_Init>
	MX_SPI1_Init();
 80019d8:	f000 f940 	bl	8001c5c <MX_SPI1_Init>
	MX_USB_PCD_Init();
 80019dc:	f000 fa76 	bl	8001ecc <MX_USB_PCD_Init>
	MX_TIM1_Init();
 80019e0:	f000 f97a 	bl	8001cd8 <MX_TIM1_Init>
	MX_TIM2_Init();
 80019e4:	f000 f9cc 	bl	8001d80 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 80019e8:	f000 fa40 	bl	8001e6c <MX_USART1_UART_Init>
	MX_ADC1_Init();
 80019ec:	f000 f886 	bl	8001afc <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 80019f0:	480a      	ldr	r0, [pc, #40]	; (8001a1c <main+0x144>)
 80019f2:	f005 f80f 	bl	8006a14 <HAL_TIM_Base_Start_IT>
	HAL_UART_Transmit_IT(&huart1,
 80019f6:	222c      	movs	r2, #44	; 0x2c
 80019f8:	4909      	ldr	r1, [pc, #36]	; (8001a20 <main+0x148>)
 80019fa:	480a      	ldr	r0, [pc, #40]	; (8001a24 <main+0x14c>)
 80019fc:	f006 fa98 	bl	8007f30 <HAL_UART_Transmit_IT>
			"=============\nProgram Running\n=============\n", 44);
	HAL_UART_Receive_IT(&huart1, &d, 1);
 8001a00:	2201      	movs	r2, #1
 8001a02:	4909      	ldr	r1, [pc, #36]	; (8001a28 <main+0x150>)
 8001a04:	4807      	ldr	r0, [pc, #28]	; (8001a24 <main+0x14c>)
 8001a06:	f006 faf1 	bl	8007fec <HAL_UART_Receive_IT>
	initTonesDictionary();
 8001a0a:	f7fe ff37 	bl	800087c <initTonesDictionary>
	PWM_Start();
 8001a0e:	f000 fe8b 	bl	8002728 <PWM_Start>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001a12:	e7fe      	b.n	8001a12 <main+0x13a>
 8001a14:	20000634 	.word	0x20000634
 8001a18:	2000060c 	.word	0x2000060c
 8001a1c:	200001ec 	.word	0x200001ec
 8001a20:	0800e174 	.word	0x0800e174
 8001a24:	20000284 	.word	0x20000284
 8001a28:	200006ec 	.word	0x200006ec

08001a2c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b09e      	sub	sp, #120	; 0x78
 8001a30:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001a32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a36:	2228      	movs	r2, #40	; 0x28
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f007 fde8 	bl	8009610 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001a40:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001a50:	463b      	mov	r3, r7
 8001a52:	223c      	movs	r2, #60	; 0x3c
 8001a54:	2100      	movs	r1, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	f007 fdda 	bl	8009610 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	653b      	str	r3, [r7, #80]	; 0x50
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a60:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a64:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a66:	2300      	movs	r3, #0
 8001a68:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a6e:	2310      	movs	r3, #16
 8001a70:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a72:	2302      	movs	r3, #2
 8001a74:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a7a:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001a7c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a80:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001a82:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 fa9e 	bl	8004fc8 <HAL_RCC_OscConfig>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <SystemClock_Config+0x6a>
		Error_Handler();
 8001a92:	f000 fc55 	bl	8002340 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001a96:	230f      	movs	r3, #15
 8001a98:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aa6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001aac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f004 fac6 	bl	8006044 <HAL_RCC_ClockConfig>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <SystemClock_Config+0x96>
		Error_Handler();
 8001abe:	f000 fc3f 	bl	8002340 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <SystemClock_Config+0xcc>)
 8001ac4:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_TIM1
			| RCC_PERIPHCLK_ADC12;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001aca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8001ad4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ad8:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001ade:	463b      	mov	r3, r7
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f004 fce5 	bl	80064b0 <HAL_RCCEx_PeriphCLKConfig>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <SystemClock_Config+0xc4>
		Error_Handler();
 8001aec:	f000 fc28 	bl	8002340 <Error_Handler>
	}
}
 8001af0:	bf00      	nop
 8001af2:	3778      	adds	r7, #120	; 0x78
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	000210a1 	.word	0x000210a1

08001afc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	; 0x28
 8001b00:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8001b02:	f107 031c 	add.w	r3, r7, #28
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
 8001b1c:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001b1e:	4b2e      	ldr	r3, [pc, #184]	; (8001bd8 <MX_ADC1_Init+0xdc>)
 8001b20:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001b24:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001b26:	4b2c      	ldr	r3, [pc, #176]	; (8001bd8 <MX_ADC1_Init+0xdc>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b2c:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <MX_ADC1_Init+0xdc>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b32:	4b29      	ldr	r3, [pc, #164]	; (8001bd8 <MX_ADC1_Init+0xdc>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001b38:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <MX_ADC1_Init+0xdc>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	765a      	strb	r2, [r3, #25]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b3e:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <MX_ADC1_Init+0xdc>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b46:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <MX_ADC1_Init+0xdc>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b4c:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <MX_ADC1_Init+0xdc>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b52:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <MX_ADC1_Init+0xdc>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001b58:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <MX_ADC1_Init+0xdc>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <MX_ADC1_Init+0xdc>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b66:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <MX_ADC1_Init+0xdc>)
 8001b68:	2204      	movs	r2, #4
 8001b6a:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b6c:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <MX_ADC1_Init+0xdc>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	761a      	strb	r2, [r3, #24]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001b72:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <MX_ADC1_Init+0xdc>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001b78:	4817      	ldr	r0, [pc, #92]	; (8001bd8 <MX_ADC1_Init+0xdc>)
 8001b7a:	f001 f90d 	bl	8002d98 <HAL_ADC_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_ADC1_Init+0x8c>
		Error_Handler();
 8001b84:	f000 fbdc 	bl	8002340 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001b8c:	f107 031c 	add.w	r3, r7, #28
 8001b90:	4619      	mov	r1, r3
 8001b92:	4811      	ldr	r0, [pc, #68]	; (8001bd8 <MX_ADC1_Init+0xdc>)
 8001b94:	f002 fa64 	bl	8004060 <HAL_ADCEx_MultiModeConfigChannel>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_ADC1_Init+0xa6>
		Error_Handler();
 8001b9e:	f000 fbcf 	bl	8002340 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8001ba2:	2305      	movs	r3, #5
 8001ba4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8001bae:	2306      	movs	r3, #6
 8001bb0:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4806      	ldr	r0, [pc, #24]	; (8001bd8 <MX_ADC1_Init+0xdc>)
 8001bc0:	f001 ff62 	bl	8003a88 <HAL_ADC_ConfigChannel>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_ADC1_Init+0xd2>
		Error_Handler();
 8001bca:	f000 fbb9 	bl	8002340 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001bce:	bf00      	nop
 8001bd0:	3728      	adds	r7, #40	; 0x28
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	200000e4 	.word	0x200000e4

08001bdc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001be0:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <MX_I2C1_Init+0x74>)
 8001be2:	4a1c      	ldr	r2, [pc, #112]	; (8001c54 <MX_I2C1_Init+0x78>)
 8001be4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 8001be6:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <MX_I2C1_Init+0x74>)
 8001be8:	4a1b      	ldr	r2, [pc, #108]	; (8001c58 <MX_I2C1_Init+0x7c>)
 8001bea:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001bec:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <MX_I2C1_Init+0x74>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bf2:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <MX_I2C1_Init+0x74>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bf8:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <MX_I2C1_Init+0x74>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001bfe:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <MX_I2C1_Init+0x74>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <MX_I2C1_Init+0x74>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c0a:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <MX_I2C1_Init+0x74>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <MX_I2C1_Init+0x74>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001c16:	480e      	ldr	r0, [pc, #56]	; (8001c50 <MX_I2C1_Init+0x74>)
 8001c18:	f002 ffde 	bl	8004bd8 <HAL_I2C_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8001c22:	f000 fb8d 	bl	8002340 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8001c26:	2100      	movs	r1, #0
 8001c28:	4809      	ldr	r0, [pc, #36]	; (8001c50 <MX_I2C1_Init+0x74>)
 8001c2a:	f003 f864 	bl	8004cf6 <HAL_I2CEx_ConfigAnalogFilter>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001c34:	f000 fb84 	bl	8002340 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4805      	ldr	r0, [pc, #20]	; (8001c50 <MX_I2C1_Init+0x74>)
 8001c3c:	f003 f8a6 	bl	8004d8c <HAL_I2CEx_ConfigDigitalFilter>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_I2C1_Init+0x6e>
		Error_Handler();
 8001c46:	f000 fb7b 	bl	8002340 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000134 	.word	0x20000134
 8001c54:	40005400 	.word	0x40005400
 8001c58:	2000090e 	.word	0x2000090e

08001c5c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001c60:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <MX_SPI1_Init+0x74>)
 8001c62:	4a1c      	ldr	r2, [pc, #112]	; (8001cd4 <MX_SPI1_Init+0x78>)
 8001c64:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c66:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <MX_SPI1_Init+0x74>)
 8001c68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c6c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c6e:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <MX_SPI1_Init+0x74>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001c74:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <MX_SPI1_Init+0x74>)
 8001c76:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001c7a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c7c:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <MX_SPI1_Init+0x74>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c82:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <MX_SPI1_Init+0x74>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c88:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <MX_SPI1_Init+0x74>)
 8001c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c8e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <MX_SPI1_Init+0x74>)
 8001c92:	2208      	movs	r2, #8
 8001c94:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <MX_SPI1_Init+0x74>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <MX_SPI1_Init+0x74>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <MX_SPI1_Init+0x74>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <MX_SPI1_Init+0x74>)
 8001caa:	2207      	movs	r2, #7
 8001cac:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cae:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <MX_SPI1_Init+0x74>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <MX_SPI1_Init+0x74>)
 8001cb6:	2208      	movs	r2, #8
 8001cb8:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001cba:	4805      	ldr	r0, [pc, #20]	; (8001cd0 <MX_SPI1_Init+0x74>)
 8001cbc:	f004 fda8 	bl	8006810 <HAL_SPI_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_SPI1_Init+0x6e>
		Error_Handler();
 8001cc6:	f000 fb3b 	bl	8002340 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000188 	.word	0x20000188
 8001cd4:	40013000 	.word	0x40013000

08001cd8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001cde:	f107 0310 	add.w	r3, r7, #16
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001cec:	1d3b      	adds	r3, r7, #4
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001cf6:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <MX_TIM1_Init+0xa0>)
 8001cf8:	4a20      	ldr	r2, [pc, #128]	; (8001d7c <MX_TIM1_Init+0xa4>)
 8001cfa:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 4800 - 1;
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <MX_TIM1_Init+0xa0>)
 8001cfe:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001d02:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d04:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <MX_TIM1_Init+0xa0>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 5 - 1;
 8001d0a:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <MX_TIM1_Init+0xa0>)
 8001d0c:	2204      	movs	r2, #4
 8001d0e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <MX_TIM1_Init+0xa0>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001d16:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <MX_TIM1_Init+0xa0>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d1c:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <MX_TIM1_Init+0xa0>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001d22:	4815      	ldr	r0, [pc, #84]	; (8001d78 <MX_TIM1_Init+0xa0>)
 8001d24:	f004 fe1f 	bl	8006966 <HAL_TIM_Base_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM1_Init+0x5a>
		Error_Handler();
 8001d2e:	f000 fb07 	bl	8002340 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d36:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001d38:	f107 0310 	add.w	r3, r7, #16
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	480e      	ldr	r0, [pc, #56]	; (8001d78 <MX_TIM1_Init+0xa0>)
 8001d40:	f005 fa68 	bl	8007214 <HAL_TIM_ConfigClockSource>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM1_Init+0x76>
		Error_Handler();
 8001d4a:	f000 faf9 	bl	8002340 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4806      	ldr	r0, [pc, #24]	; (8001d78 <MX_TIM1_Init+0xa0>)
 8001d60:	f005 ff70 	bl	8007c44 <HAL_TIMEx_MasterConfigSynchronization>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8001d6a:	f000 fae9 	bl	8002340 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001d6e:	bf00      	nop
 8001d70:	3720      	adds	r7, #32
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	200001ec 	.word	0x200001ec
 8001d7c:	40012c00 	.word	0x40012c00

08001d80 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08e      	sub	sp, #56	; 0x38
 8001d84:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001d86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001d94:	f107 031c 	add.w	r3, r7, #28
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001da0:	463b      	mov	r3, r7
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	60da      	str	r2, [r3, #12]
 8001dac:	611a      	str	r2, [r3, #16]
 8001dae:	615a      	str	r2, [r3, #20]
 8001db0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001db2:	4b2d      	ldr	r3, [pc, #180]	; (8001e68 <MX_TIM2_Init+0xe8>)
 8001db4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001db8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001dba:	4b2b      	ldr	r3, [pc, #172]	; (8001e68 <MX_TIM2_Init+0xe8>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc0:	4b29      	ldr	r3, [pc, #164]	; (8001e68 <MX_TIM2_Init+0xe8>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001dc6:	4b28      	ldr	r3, [pc, #160]	; (8001e68 <MX_TIM2_Init+0xe8>)
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dcc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dce:	4b26      	ldr	r3, [pc, #152]	; (8001e68 <MX_TIM2_Init+0xe8>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd4:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <MX_TIM2_Init+0xe8>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001dda:	4823      	ldr	r0, [pc, #140]	; (8001e68 <MX_TIM2_Init+0xe8>)
 8001ddc:	f004 fdc3 	bl	8006966 <HAL_TIM_Base_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM2_Init+0x6a>
		Error_Handler();
 8001de6:	f000 faab 	bl	8002340 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dee:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001df0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001df4:	4619      	mov	r1, r3
 8001df6:	481c      	ldr	r0, [pc, #112]	; (8001e68 <MX_TIM2_Init+0xe8>)
 8001df8:	f005 fa0c 	bl	8007214 <HAL_TIM_ConfigClockSource>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_TIM2_Init+0x86>
		Error_Handler();
 8001e02:	f000 fa9d 	bl	8002340 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001e06:	4818      	ldr	r0, [pc, #96]	; (8001e68 <MX_TIM2_Init+0xe8>)
 8001e08:	f004 fe6e 	bl	8006ae8 <HAL_TIM_PWM_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM2_Init+0x96>
		Error_Handler();
 8001e12:	f000 fa95 	bl	8002340 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001e1e:	f107 031c 	add.w	r3, r7, #28
 8001e22:	4619      	mov	r1, r3
 8001e24:	4810      	ldr	r0, [pc, #64]	; (8001e68 <MX_TIM2_Init+0xe8>)
 8001e26:	f005 ff0d 	bl	8007c44 <HAL_TIMEx_MasterConfigSynchronization>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8001e30:	f000 fa86 	bl	8002340 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e34:	2360      	movs	r3, #96	; 0x60
 8001e36:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8001e44:	463b      	mov	r3, r7
 8001e46:	2200      	movs	r2, #0
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4807      	ldr	r0, [pc, #28]	; (8001e68 <MX_TIM2_Init+0xe8>)
 8001e4c:	f005 f8ce 	bl	8006fec <HAL_TIM_PWM_ConfigChannel>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 8001e56:	f000 fa73 	bl	8002340 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001e5a:	4803      	ldr	r0, [pc, #12]	; (8001e68 <MX_TIM2_Init+0xe8>)
 8001e5c:	f000 fb9e 	bl	800259c <HAL_TIM_MspPostInit>

}
 8001e60:	bf00      	nop
 8001e62:	3738      	adds	r7, #56	; 0x38
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000238 	.word	0x20000238

08001e6c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001e70:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <MX_USART1_UART_Init+0x58>)
 8001e72:	4a15      	ldr	r2, [pc, #84]	; (8001ec8 <MX_USART1_UART_Init+0x5c>)
 8001e74:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001e76:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <MX_USART1_UART_Init+0x58>)
 8001e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e7c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <MX_USART1_UART_Init+0x58>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <MX_USART1_UART_Init+0x58>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <MX_USART1_UART_Init+0x58>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <MX_USART1_UART_Init+0x58>)
 8001e92:	220c      	movs	r2, #12
 8001e94:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <MX_USART1_UART_Init+0x58>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <MX_USART1_UART_Init+0x58>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <MX_USART1_UART_Init+0x58>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <MX_USART1_UART_Init+0x58>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001eae:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <MX_USART1_UART_Init+0x58>)
 8001eb0:	f005 ff66 	bl	8007d80 <HAL_UART_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8001eba:	f000 fa41 	bl	8002340 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000284 	.word	0x20000284
 8001ec8:	40013800 	.word	0x40013800

08001ecc <MX_USB_PCD_Init>:
/**
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 8001ed0:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <MX_USB_PCD_Init+0x3c>)
 8001ed2:	4a0e      	ldr	r2, [pc, #56]	; (8001f0c <MX_USB_PCD_Init+0x40>)
 8001ed4:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <MX_USB_PCD_Init+0x3c>)
 8001ed8:	2208      	movs	r2, #8
 8001eda:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <MX_USB_PCD_Init+0x3c>)
 8001ede:	2202      	movs	r2, #2
 8001ee0:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <MX_USB_PCD_Init+0x3c>)
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001ee8:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <MX_USB_PCD_Init+0x3c>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <MX_USB_PCD_Init+0x3c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK) {
 8001ef4:	4804      	ldr	r0, [pc, #16]	; (8001f08 <MX_USB_PCD_Init+0x3c>)
 8001ef6:	f002 ff95 	bl	8004e24 <HAL_PCD_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_USB_PCD_Init+0x38>
		Error_Handler();
 8001f00:	f000 fa1e 	bl	8002340 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	2000030c 	.word	0x2000030c
 8001f0c:	40005c00 	.word	0x40005c00

08001f10 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08c      	sub	sp, #48	; 0x30
 8001f14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001f16:	f107 031c 	add.w	r3, r7, #28
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	609a      	str	r2, [r3, #8]
 8001f22:	60da      	str	r2, [r3, #12]
 8001f24:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001f26:	4b62      	ldr	r3, [pc, #392]	; (80020b0 <MX_GPIO_Init+0x1a0>)
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	4a61      	ldr	r2, [pc, #388]	; (80020b0 <MX_GPIO_Init+0x1a0>)
 8001f2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f30:	6153      	str	r3, [r2, #20]
 8001f32:	4b5f      	ldr	r3, [pc, #380]	; (80020b0 <MX_GPIO_Init+0x1a0>)
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f3a:	61bb      	str	r3, [r7, #24]
 8001f3c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3e:	4b5c      	ldr	r3, [pc, #368]	; (80020b0 <MX_GPIO_Init+0x1a0>)
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	4a5b      	ldr	r2, [pc, #364]	; (80020b0 <MX_GPIO_Init+0x1a0>)
 8001f44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f48:	6153      	str	r3, [r2, #20]
 8001f4a:	4b59      	ldr	r3, [pc, #356]	; (80020b0 <MX_GPIO_Init+0x1a0>)
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001f56:	4b56      	ldr	r3, [pc, #344]	; (80020b0 <MX_GPIO_Init+0x1a0>)
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	4a55      	ldr	r2, [pc, #340]	; (80020b0 <MX_GPIO_Init+0x1a0>)
 8001f5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f60:	6153      	str	r3, [r2, #20]
 8001f62:	4b53      	ldr	r3, [pc, #332]	; (80020b0 <MX_GPIO_Init+0x1a0>)
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6e:	4b50      	ldr	r3, [pc, #320]	; (80020b0 <MX_GPIO_Init+0x1a0>)
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	4a4f      	ldr	r2, [pc, #316]	; (80020b0 <MX_GPIO_Init+0x1a0>)
 8001f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f78:	6153      	str	r3, [r2, #20]
 8001f7a:	4b4d      	ldr	r3, [pc, #308]	; (80020b0 <MX_GPIO_Init+0x1a0>)
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001f86:	4b4a      	ldr	r3, [pc, #296]	; (80020b0 <MX_GPIO_Init+0x1a0>)
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	4a49      	ldr	r2, [pc, #292]	; (80020b0 <MX_GPIO_Init+0x1a0>)
 8001f8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f90:	6153      	str	r3, [r2, #20]
 8001f92:	4b47      	ldr	r3, [pc, #284]	; (80020b0 <MX_GPIO_Init+0x1a0>)
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9e:	4b44      	ldr	r3, [pc, #272]	; (80020b0 <MX_GPIO_Init+0x1a0>)
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	4a43      	ldr	r2, [pc, #268]	; (80020b0 <MX_GPIO_Init+0x1a0>)
 8001fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa8:	6153      	str	r3, [r2, #20]
 8001faa:	4b41      	ldr	r3, [pc, #260]	; (80020b0 <MX_GPIO_Init+0x1a0>)
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fb2:	607b      	str	r3, [r7, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2108      	movs	r1, #8
 8001fba:	483e      	ldr	r0, [pc, #248]	; (80020b4 <MX_GPIO_Init+0x1a4>)
 8001fbc:	f002 fddc 	bl	8004b78 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f24f 011e 	movw	r1, #61470	; 0xf01e
 8001fc6:	483c      	ldr	r0, [pc, #240]	; (80020b8 <MX_GPIO_Init+0x1a8>)
 8001fc8:	f002 fdd6 	bl	8004b78 <HAL_GPIO_WritePin>
			GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_1
					| GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001fcc:	2308      	movs	r3, #8
 8001fce:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001fdc:	f107 031c 	add.w	r3, r7, #28
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4834      	ldr	r0, [pc, #208]	; (80020b4 <MX_GPIO_Init+0x1a4>)
 8001fe4:	f002 fc36 	bl	8004854 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT4_Pin */
	GPIO_InitStruct.Pin = MEMS_INT4_Pin;
 8001fe8:	2320      	movs	r3, #32
 8001fea:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001fec:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001ff0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT4_GPIO_Port, &GPIO_InitStruct);
 8001ff6:	f107 031c 	add.w	r3, r7, #28
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	482d      	ldr	r0, [pc, #180]	; (80020b4 <MX_GPIO_Init+0x1a4>)
 8001ffe:	f002 fc29 	bl	8004854 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002002:	2301      	movs	r3, #1
 8002004:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002006:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800200a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002010:	f107 031c 	add.w	r3, r7, #28
 8002014:	4619      	mov	r1, r3
 8002016:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800201a:	f002 fc1b 	bl	8004854 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA2 PA3 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4;
 800201e:	231e      	movs	r3, #30
 8002020:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002022:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002026:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002028:	2301      	movs	r3, #1
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202c:	f107 031c 	add.w	r3, r7, #28
 8002030:	4619      	mov	r1, r3
 8002032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002036:	f002 fc0d 	bl	8004854 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15
	 PD1 PD2 PD3 PD4 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15
 800203a:	f24f 031e 	movw	r3, #61470	; 0xf01e
 800203e:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002040:	2301      	movs	r3, #1
 8002042:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800204c:	f107 031c 	add.w	r3, r7, #28
 8002050:	4619      	mov	r1, r3
 8002052:	4819      	ldr	r0, [pc, #100]	; (80020b8 <MX_GPIO_Init+0x1a8>)
 8002054:	f002 fbfe 	bl	8004854 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 1);
 8002058:	2201      	movs	r2, #1
 800205a:	2100      	movs	r1, #0
 800205c:	2006      	movs	r0, #6
 800205e:	f002 fb4c 	bl	80046fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002062:	2006      	movs	r0, #6
 8002064:	f002 fb65 	bl	8004732 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 1);
 8002068:	2201      	movs	r2, #1
 800206a:	2100      	movs	r1, #0
 800206c:	2007      	movs	r0, #7
 800206e:	f002 fb44 	bl	80046fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002072:	2007      	movs	r0, #7
 8002074:	f002 fb5d 	bl	8004732 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 1);
 8002078:	2201      	movs	r2, #1
 800207a:	2100      	movs	r1, #0
 800207c:	2008      	movs	r0, #8
 800207e:	f002 fb3c 	bl	80046fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8002082:	2008      	movs	r0, #8
 8002084:	f002 fb55 	bl	8004732 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 1);
 8002088:	2201      	movs	r2, #1
 800208a:	2100      	movs	r1, #0
 800208c:	2009      	movs	r0, #9
 800208e:	f002 fb34 	bl	80046fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002092:	2009      	movs	r0, #9
 8002094:	f002 fb4d 	bl	8004732 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 1);
 8002098:	2201      	movs	r2, #1
 800209a:	2100      	movs	r1, #0
 800209c:	200a      	movs	r0, #10
 800209e:	f002 fb2c 	bl	80046fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80020a2:	200a      	movs	r0, #10
 80020a4:	f002 fb45 	bl	8004732 <HAL_NVIC_EnableIRQ>

}
 80020a8:	bf00      	nop
 80020aa:	3730      	adds	r7, #48	; 0x30
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40021000 	.word	0x40021000
 80020b4:	48001000 	.word	0x48001000
 80020b8:	48000c00 	.word	0x48000c00

080020bc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80020bc:	b5b0      	push	{r4, r5, r7, lr}
 80020be:	b09e      	sub	sp, #120	; 0x78
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 80020c6:	f000 fe47 	bl	8002d58 <HAL_GetTick>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4a74      	ldr	r2, [pc, #464]	; (80022a0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80020ce:	6013      	str	r3, [r2, #0]
	if ((GPIO_Pin == GPIO_PIN_1)) {
 80020d0:	88fb      	ldrh	r3, [r7, #6]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d10f      	bne.n	80020f6 <HAL_GPIO_EXTI_Callback+0x3a>

		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 80020d6:	4b72      	ldr	r3, [pc, #456]	; (80022a0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	4b72      	ldr	r3, [pc, #456]	; (80022a4 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80020e4:	f240 80d8 	bls.w	8002298 <HAL_GPIO_EXTI_Callback+0x1dc>
//			counterInside++;
			next_music();
 80020e8:	f7ff fb3a 	bl	8001760 <next_music>
			previousMillis = currentMillis;
 80020ec:	4b6c      	ldr	r3, [pc, #432]	; (80022a0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a6c      	ldr	r2, [pc, #432]	; (80022a4 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80020f2:	6013      	str	r3, [r2, #0]
			HAL_ADC_Stop_IT(&hadc1);
			set_music(adc_select);
		}
	} else if (GPIO_Pin == GPIO_PIN_0) {
	}
}
 80020f4:	e0d0      	b.n	8002298 <HAL_GPIO_EXTI_Callback+0x1dc>
	} else if (GPIO_Pin == GPIO_PIN_2) {
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d156      	bne.n	80021aa <HAL_GPIO_EXTI_Callback+0xee>
		if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)) {
 80020fc:	2104      	movs	r1, #4
 80020fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002102:	f002 fd21 	bl	8004b48 <HAL_GPIO_ReadPin>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d118      	bne.n	800213e <HAL_GPIO_EXTI_Callback+0x82>
			if (currentMillis - previousMillis > DEBOUNCE_DELAY
 800210c:	4b64      	ldr	r3, [pc, #400]	; (80022a0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b64      	ldr	r3, [pc, #400]	; (80022a4 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800211a:	f240 80bd 	bls.w	8002298 <HAL_GPIO_EXTI_Callback+0x1dc>
					&& adc_function != CHANGE_MUSIC) {
 800211e:	4b62      	ldr	r3, [pc, #392]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 80b8 	beq.w	8002298 <HAL_GPIO_EXTI_Callback+0x1dc>
				adc_function = CHANGE_VOLUME;
 8002128:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
				HAL_ADC_Start_IT(&hadc1);
 800212e:	485f      	ldr	r0, [pc, #380]	; (80022ac <HAL_GPIO_EXTI_Callback+0x1f0>)
 8002130:	f001 f812 	bl	8003158 <HAL_ADC_Start_IT>
				previousMillis = currentMillis;
 8002134:	4b5a      	ldr	r3, [pc, #360]	; (80022a0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a5a      	ldr	r2, [pc, #360]	; (80022a4 <HAL_GPIO_EXTI_Callback+0x1e8>)
 800213a:	6013      	str	r3, [r2, #0]
}
 800213c:	e0ac      	b.n	8002298 <HAL_GPIO_EXTI_Callback+0x1dc>
			adc_function = NONE;
 800213e:	4b5a      	ldr	r3, [pc, #360]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8002140:	2202      	movs	r2, #2
 8002142:	701a      	strb	r2, [r3, #0]
			volume = adc_select;
 8002144:	4b5a      	ldr	r3, [pc, #360]	; (80022b0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	b29a      	uxth	r2, r3
 800214a:	4b5a      	ldr	r3, [pc, #360]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 800214c:	801a      	strh	r2, [r3, #0]
			char message[100] = "[INFO][Volume changed to ";
 800214e:	4b5a      	ldr	r3, [pc, #360]	; (80022b8 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8002150:	f107 040c 	add.w	r4, r7, #12
 8002154:	461d      	mov	r5, r3
 8002156:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002158:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800215a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800215e:	c403      	stmia	r4!, {r0, r1}
 8002160:	8022      	strh	r2, [r4, #0]
 8002162:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8002166:	224a      	movs	r2, #74	; 0x4a
 8002168:	2100      	movs	r1, #0
 800216a:	4618      	mov	r0, r3
 800216c:	f007 fa50 	bl	8009610 <memset>
			int *helper = number_to_array(adc_select);
 8002170:	4b4f      	ldr	r3, [pc, #316]	; (80022b0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fa37 	bl	80015e8 <number_to_array>
 800217a:	6738      	str	r0, [r7, #112]	; 0x70
			sendInfo(message, helper, adc_select, digit_count(adc_select));
 800217c:	4b4c      	ldr	r3, [pc, #304]	; (80022b0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800217e:	681c      	ldr	r4, [r3, #0]
 8002180:	4b4b      	ldr	r3, [pc, #300]	; (80022b0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff f9a9 	bl	80014dc <digit_count>
 800218a:	4603      	mov	r3, r0
 800218c:	f107 000c 	add.w	r0, r7, #12
 8002190:	4622      	mov	r2, r4
 8002192:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002194:	f7fe fc88 	bl	8000aa8 <sendInfo>
			HAL_ADC_Stop_IT(&hadc1);
 8002198:	4844      	ldr	r0, [pc, #272]	; (80022ac <HAL_GPIO_EXTI_Callback+0x1f0>)
 800219a:	f001 f91d 	bl	80033d8 <HAL_ADC_Stop_IT>
			extract_int_to_carrier(currentMusic);
 800219e:	4b47      	ldr	r3, [pc, #284]	; (80022bc <HAL_GPIO_EXTI_Callback+0x200>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff f9c0 	bl	8001528 <extract_int_to_carrier>
}
 80021a8:	e076      	b.n	8002298 <HAL_GPIO_EXTI_Callback+0x1dc>
	} else if ((GPIO_Pin == GPIO_PIN_3)) {
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d11f      	bne.n	80021f0 <HAL_GPIO_EXTI_Callback+0x134>
		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 80021b0:	4b3b      	ldr	r3, [pc, #236]	; (80022a0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b3b      	ldr	r3, [pc, #236]	; (80022a4 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80021be:	d96b      	bls.n	8002298 <HAL_GPIO_EXTI_Callback+0x1dc>
			if (programState == Paused || programState == IDLE)
 80021c0:	4b3f      	ldr	r3, [pc, #252]	; (80022c0 <HAL_GPIO_EXTI_Callback+0x204>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_EXTI_Callback+0x114>
 80021c8:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <HAL_GPIO_EXTI_Callback+0x204>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d103      	bne.n	80021d8 <HAL_GPIO_EXTI_Callback+0x11c>
				programState = Resume;
 80021d0:	4b3b      	ldr	r3, [pc, #236]	; (80022c0 <HAL_GPIO_EXTI_Callback+0x204>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]
 80021d6:	e006      	b.n	80021e6 <HAL_GPIO_EXTI_Callback+0x12a>
			else if (programState == Resume)
 80021d8:	4b39      	ldr	r3, [pc, #228]	; (80022c0 <HAL_GPIO_EXTI_Callback+0x204>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d102      	bne.n	80021e6 <HAL_GPIO_EXTI_Callback+0x12a>
				programState = Paused;
 80021e0:	4b37      	ldr	r3, [pc, #220]	; (80022c0 <HAL_GPIO_EXTI_Callback+0x204>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
			previousMillis = currentMillis;
 80021e6:	4b2e      	ldr	r3, [pc, #184]	; (80022a0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a2e      	ldr	r2, [pc, #184]	; (80022a4 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80021ec:	6013      	str	r3, [r2, #0]
}
 80021ee:	e053      	b.n	8002298 <HAL_GPIO_EXTI_Callback+0x1dc>
	} else if ((GPIO_Pin == GPIO_PIN_4)) {
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	2b10      	cmp	r3, #16
 80021f4:	d150      	bne.n	8002298 <HAL_GPIO_EXTI_Callback+0x1dc>
		if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)) {
 80021f6:	2110      	movs	r1, #16
 80021f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021fc:	f002 fca4 	bl	8004b48 <HAL_GPIO_ReadPin>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d116      	bne.n	8002234 <HAL_GPIO_EXTI_Callback+0x178>
			if ((currentMillis - previousMillis > DEBOUNCE_DELAY
 8002206:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	4b26      	ldr	r3, [pc, #152]	; (80022a4 <HAL_GPIO_EXTI_Callback+0x1e8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002214:	d940      	bls.n	8002298 <HAL_GPIO_EXTI_Callback+0x1dc>
					&& adc_function != CHANGE_VOLUME)) {
 8002216:	4b24      	ldr	r3, [pc, #144]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d03c      	beq.n	8002298 <HAL_GPIO_EXTI_Callback+0x1dc>
				adc_function = CHANGE_MUSIC;
 800221e:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8002220:	2200      	movs	r2, #0
 8002222:	701a      	strb	r2, [r3, #0]
				HAL_ADC_Start_IT(&hadc1);
 8002224:	4821      	ldr	r0, [pc, #132]	; (80022ac <HAL_GPIO_EXTI_Callback+0x1f0>)
 8002226:	f000 ff97 	bl	8003158 <HAL_ADC_Start_IT>
				previousMillis = currentMillis;
 800222a:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a1d      	ldr	r2, [pc, #116]	; (80022a4 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8002230:	6013      	str	r3, [r2, #0]
}
 8002232:	e031      	b.n	8002298 <HAL_GPIO_EXTI_Callback+0x1dc>
			char message[100] = "[INFO][Music changed to ";
 8002234:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <HAL_GPIO_EXTI_Callback+0x208>)
 8002236:	f107 040c 	add.w	r4, r7, #12
 800223a:	461d      	mov	r5, r3
 800223c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800223e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002240:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002244:	c403      	stmia	r4!, {r0, r1}
 8002246:	7022      	strb	r2, [r4, #0]
 8002248:	f107 0325 	add.w	r3, r7, #37	; 0x25
 800224c:	224b      	movs	r2, #75	; 0x4b
 800224e:	2100      	movs	r1, #0
 8002250:	4618      	mov	r0, r3
 8002252:	f007 f9dd 	bl	8009610 <memset>
			int helper = number_to_array(adc_select);
 8002256:	4b16      	ldr	r3, [pc, #88]	; (80022b0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff f9c4 	bl	80015e8 <number_to_array>
 8002260:	4603      	mov	r3, r0
 8002262:	677b      	str	r3, [r7, #116]	; 0x74
			sendInfo(message, helper, adc_select, digit_count(adc_select));
 8002264:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002268:	681d      	ldr	r5, [r3, #0]
 800226a:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff f934 	bl	80014dc <digit_count>
 8002274:	4603      	mov	r3, r0
 8002276:	f107 000c 	add.w	r0, r7, #12
 800227a:	462a      	mov	r2, r5
 800227c:	4621      	mov	r1, r4
 800227e:	f7fe fc13 	bl	8000aa8 <sendInfo>
			adc_function = NONE;
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8002284:	2202      	movs	r2, #2
 8002286:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Stop_IT(&hadc1);
 8002288:	4808      	ldr	r0, [pc, #32]	; (80022ac <HAL_GPIO_EXTI_Callback+0x1f0>)
 800228a:	f001 f8a5 	bl	80033d8 <HAL_ADC_Stop_IT>
			set_music(adc_select);
 800228e:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fae2 	bl	800185c <set_music>
}
 8002298:	bf00      	nop
 800229a:	3778      	adds	r7, #120	; 0x78
 800229c:	46bd      	mov	sp, r7
 800229e:	bdb0      	pop	{r4, r5, r7, pc}
 80022a0:	20000630 	.word	0x20000630
 80022a4:	2000062c 	.word	0x2000062c
 80022a8:	20000046 	.word	0x20000046
 80022ac:	200000e4 	.word	0x200000e4
 80022b0:	20000600 	.word	0x20000600
 80022b4:	2000004c 	.word	0x2000004c
 80022b8:	0800e010 	.word	0x0800e010
 80022bc:	200005fc 	.word	0x200005fc
 80022c0:	20000684 	.word	0x20000684
 80022c4:	0800dfac 	.word	0x0800dfac

080022c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a15      	ldr	r2, [pc, #84]	; (800232c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d124      	bne.n	8002324 <HAL_TIM_PeriodElapsedCallback+0x5c>
		timePassed = HAL_GetTick();
 80022da:	f000 fd3d 	bl	8002d58 <HAL_GetTick>
 80022de:	4603      	mov	r3, r0
 80022e0:	4a13      	ldr	r2, [pc, #76]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80022e2:	6013      	str	r3, [r2, #0]
		if (index < musicNumberSize) {
 80022e4:	4b13      	ldr	r3, [pc, #76]	; (8002334 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b13      	ldr	r3, [pc, #76]	; (8002338 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	da0a      	bge.n	8002306 <HAL_TIM_PeriodElapsedCallback+0x3e>
			display_number(index, carrier[index]);
 80022f0:	4b10      	ldr	r3, [pc, #64]	; (8002334 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4910      	ldr	r1, [pc, #64]	; (800233c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80022fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80022fe:	4619      	mov	r1, r3
 8002300:	4610      	mov	r0, r2
 8002302:	f7ff f8a5 	bl	8001450 <display_number>
		}
		if (index == 4) {
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b04      	cmp	r3, #4
 800230c:	d105      	bne.n	800231a <HAL_TIM_PeriodElapsedCallback+0x52>
			index = 0;
 800230e:	4b09      	ldr	r3, [pc, #36]	; (8002334 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
			init_display();
 8002314:	f7ff f8d0 	bl	80014b8 <init_display>
		} else {
			++index;
		}

	}
}
 8002318:	e004      	b.n	8002324 <HAL_TIM_PeriodElapsedCallback+0x5c>
			++index;
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	3301      	adds	r3, #1
 8002320:	4a04      	ldr	r2, [pc, #16]	; (8002334 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002322:	6013      	str	r3, [r2, #0]
}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40012c00 	.word	0x40012c00
 8002330:	20000628 	.word	0x20000628
 8002334:	20000604 	.word	0x20000604
 8002338:	2000071c 	.word	0x2000071c
 800233c:	20000614 	.word	0x20000614

08002340 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002344:	b672      	cpsid	i
}
 8002346:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002348:	e7fe      	b.n	8002348 <Error_Handler+0x8>
	...

0800234c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <HAL_MspInit+0x44>)
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	4a0e      	ldr	r2, [pc, #56]	; (8002390 <HAL_MspInit+0x44>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6193      	str	r3, [r2, #24]
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <HAL_MspInit+0x44>)
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	607b      	str	r3, [r7, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <HAL_MspInit+0x44>)
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	4a08      	ldr	r2, [pc, #32]	; (8002390 <HAL_MspInit+0x44>)
 8002370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002374:	61d3      	str	r3, [r2, #28]
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_MspInit+0x44>)
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8002382:	2006      	movs	r0, #6
 8002384:	f002 f9ae 	bl	80046e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000

08002394 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08a      	sub	sp, #40	; 0x28
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 0314 	add.w	r3, r7, #20
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023b4:	d12b      	bne.n	800240e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80023b6:	4b18      	ldr	r3, [pc, #96]	; (8002418 <HAL_ADC_MspInit+0x84>)
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	4a17      	ldr	r2, [pc, #92]	; (8002418 <HAL_ADC_MspInit+0x84>)
 80023bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c0:	6153      	str	r3, [r2, #20]
 80023c2:	4b15      	ldr	r3, [pc, #84]	; (8002418 <HAL_ADC_MspInit+0x84>)
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80023ce:	4b12      	ldr	r3, [pc, #72]	; (8002418 <HAL_ADC_MspInit+0x84>)
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	4a11      	ldr	r2, [pc, #68]	; (8002418 <HAL_ADC_MspInit+0x84>)
 80023d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023d8:	6153      	str	r3, [r2, #20]
 80023da:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <HAL_ADC_MspInit+0x84>)
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023e6:	2310      	movs	r3, #16
 80023e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023ea:	2303      	movs	r3, #3
 80023ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023f2:	f107 0314 	add.w	r3, r7, #20
 80023f6:	4619      	mov	r1, r3
 80023f8:	4808      	ldr	r0, [pc, #32]	; (800241c <HAL_ADC_MspInit+0x88>)
 80023fa:	f002 fa2b 	bl	8004854 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 80023fe:	2200      	movs	r2, #0
 8002400:	2101      	movs	r1, #1
 8002402:	2012      	movs	r0, #18
 8002404:	f002 f979 	bl	80046fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002408:	2012      	movs	r0, #18
 800240a:	f002 f992 	bl	8004732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800240e:	bf00      	nop
 8002410:	3728      	adds	r7, #40	; 0x28
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	48001400 	.word	0x48001400

08002420 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08a      	sub	sp, #40	; 0x28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a17      	ldr	r2, [pc, #92]	; (800249c <HAL_I2C_MspInit+0x7c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d127      	bne.n	8002492 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002442:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <HAL_I2C_MspInit+0x80>)
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	4a16      	ldr	r2, [pc, #88]	; (80024a0 <HAL_I2C_MspInit+0x80>)
 8002448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800244c:	6153      	str	r3, [r2, #20]
 800244e:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <HAL_I2C_MspInit+0x80>)
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800245a:	23c0      	movs	r3, #192	; 0xc0
 800245c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800245e:	2312      	movs	r3, #18
 8002460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002462:	2301      	movs	r3, #1
 8002464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002466:	2303      	movs	r3, #3
 8002468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800246a:	2304      	movs	r3, #4
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246e:	f107 0314 	add.w	r3, r7, #20
 8002472:	4619      	mov	r1, r3
 8002474:	480b      	ldr	r0, [pc, #44]	; (80024a4 <HAL_I2C_MspInit+0x84>)
 8002476:	f002 f9ed 	bl	8004854 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <HAL_I2C_MspInit+0x80>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	4a08      	ldr	r2, [pc, #32]	; (80024a0 <HAL_I2C_MspInit+0x80>)
 8002480:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002484:	61d3      	str	r3, [r2, #28]
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_I2C_MspInit+0x80>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002492:	bf00      	nop
 8002494:	3728      	adds	r7, #40	; 0x28
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40005400 	.word	0x40005400
 80024a0:	40021000 	.word	0x40021000
 80024a4:	48000400 	.word	0x48000400

080024a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	; 0x28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a17      	ldr	r2, [pc, #92]	; (8002524 <HAL_SPI_MspInit+0x7c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d128      	bne.n	800251c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024ca:	4b17      	ldr	r3, [pc, #92]	; (8002528 <HAL_SPI_MspInit+0x80>)
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	4a16      	ldr	r2, [pc, #88]	; (8002528 <HAL_SPI_MspInit+0x80>)
 80024d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024d4:	6193      	str	r3, [r2, #24]
 80024d6:	4b14      	ldr	r3, [pc, #80]	; (8002528 <HAL_SPI_MspInit+0x80>)
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e2:	4b11      	ldr	r3, [pc, #68]	; (8002528 <HAL_SPI_MspInit+0x80>)
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	4a10      	ldr	r2, [pc, #64]	; (8002528 <HAL_SPI_MspInit+0x80>)
 80024e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ec:	6153      	str	r3, [r2, #20]
 80024ee:	4b0e      	ldr	r3, [pc, #56]	; (8002528 <HAL_SPI_MspInit+0x80>)
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80024fa:	23e0      	movs	r3, #224	; 0xe0
 80024fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002506:	2303      	movs	r3, #3
 8002508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800250a:	2305      	movs	r3, #5
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250e:	f107 0314 	add.w	r3, r7, #20
 8002512:	4619      	mov	r1, r3
 8002514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002518:	f002 f99c 	bl	8004854 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800251c:	bf00      	nop
 800251e:	3728      	adds	r7, #40	; 0x28
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40013000 	.word	0x40013000
 8002528:	40021000 	.word	0x40021000

0800252c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a16      	ldr	r2, [pc, #88]	; (8002594 <HAL_TIM_Base_MspInit+0x68>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d114      	bne.n	8002568 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800253e:	4b16      	ldr	r3, [pc, #88]	; (8002598 <HAL_TIM_Base_MspInit+0x6c>)
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	4a15      	ldr	r2, [pc, #84]	; (8002598 <HAL_TIM_Base_MspInit+0x6c>)
 8002544:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002548:	6193      	str	r3, [r2, #24]
 800254a:	4b13      	ldr	r3, [pc, #76]	; (8002598 <HAL_TIM_Base_MspInit+0x6c>)
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002556:	2200      	movs	r2, #0
 8002558:	2100      	movs	r1, #0
 800255a:	2019      	movs	r0, #25
 800255c:	f002 f8cd 	bl	80046fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002560:	2019      	movs	r0, #25
 8002562:	f002 f8e6 	bl	8004732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002566:	e010      	b.n	800258a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002570:	d10b      	bne.n	800258a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_TIM_Base_MspInit+0x6c>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	4a08      	ldr	r2, [pc, #32]	; (8002598 <HAL_TIM_Base_MspInit+0x6c>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	61d3      	str	r3, [r2, #28]
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_TIM_Base_MspInit+0x6c>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
}
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40012c00 	.word	0x40012c00
 8002598:	40021000 	.word	0x40021000

0800259c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 030c 	add.w	r3, r7, #12
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025bc:	d11d      	bne.n	80025fa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <HAL_TIM_MspPostInit+0x68>)
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	4a10      	ldr	r2, [pc, #64]	; (8002604 <HAL_TIM_MspPostInit+0x68>)
 80025c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c8:	6153      	str	r3, [r2, #20]
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <HAL_TIM_MspPostInit+0x68>)
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025dc:	2302      	movs	r3, #2
 80025de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025e8:	2301      	movs	r3, #1
 80025ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ec:	f107 030c 	add.w	r3, r7, #12
 80025f0:	4619      	mov	r1, r3
 80025f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025f6:	f002 f92d 	bl	8004854 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80025fa:	bf00      	nop
 80025fc:	3720      	adds	r7, #32
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40021000 	.word	0x40021000

08002608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	; 0x28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	f107 0314 	add.w	r3, r7, #20
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a1b      	ldr	r2, [pc, #108]	; (8002694 <HAL_UART_MspInit+0x8c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d12f      	bne.n	800268a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800262a:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <HAL_UART_MspInit+0x90>)
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	4a1a      	ldr	r2, [pc, #104]	; (8002698 <HAL_UART_MspInit+0x90>)
 8002630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002634:	6193      	str	r3, [r2, #24]
 8002636:	4b18      	ldr	r3, [pc, #96]	; (8002698 <HAL_UART_MspInit+0x90>)
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002642:	4b15      	ldr	r3, [pc, #84]	; (8002698 <HAL_UART_MspInit+0x90>)
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	4a14      	ldr	r2, [pc, #80]	; (8002698 <HAL_UART_MspInit+0x90>)
 8002648:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800264c:	6153      	str	r3, [r2, #20]
 800264e:	4b12      	ldr	r3, [pc, #72]	; (8002698 <HAL_UART_MspInit+0x90>)
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800265a:	2330      	movs	r3, #48	; 0x30
 800265c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002666:	2303      	movs	r3, #3
 8002668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800266a:	2307      	movs	r3, #7
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800266e:	f107 0314 	add.w	r3, r7, #20
 8002672:	4619      	mov	r1, r3
 8002674:	4809      	ldr	r0, [pc, #36]	; (800269c <HAL_UART_MspInit+0x94>)
 8002676:	f002 f8ed 	bl	8004854 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800267a:	2200      	movs	r2, #0
 800267c:	2100      	movs	r1, #0
 800267e:	2025      	movs	r0, #37	; 0x25
 8002680:	f002 f83b 	bl	80046fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002684:	2025      	movs	r0, #37	; 0x25
 8002686:	f002 f854 	bl	8004732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800268a:	bf00      	nop
 800268c:	3728      	adds	r7, #40	; 0x28
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40013800 	.word	0x40013800
 8002698:	40021000 	.word	0x40021000
 800269c:	48000800 	.word	0x48000800

080026a0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	; 0x28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 0314 	add.w	r3, r7, #20
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a18      	ldr	r2, [pc, #96]	; (8002720 <HAL_PCD_MspInit+0x80>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d129      	bne.n	8002716 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c2:	4b18      	ldr	r3, [pc, #96]	; (8002724 <HAL_PCD_MspInit+0x84>)
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	4a17      	ldr	r2, [pc, #92]	; (8002724 <HAL_PCD_MspInit+0x84>)
 80026c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026cc:	6153      	str	r3, [r2, #20]
 80026ce:	4b15      	ldr	r3, [pc, #84]	; (8002724 <HAL_PCD_MspInit+0x84>)
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80026da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80026de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e0:	2302      	movs	r3, #2
 80026e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026e8:	2303      	movs	r3, #3
 80026ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80026ec:	230e      	movs	r3, #14
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f0:	f107 0314 	add.w	r3, r7, #20
 80026f4:	4619      	mov	r1, r3
 80026f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026fa:	f002 f8ab 	bl	8004854 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80026fe:	4b09      	ldr	r3, [pc, #36]	; (8002724 <HAL_PCD_MspInit+0x84>)
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	4a08      	ldr	r2, [pc, #32]	; (8002724 <HAL_PCD_MspInit+0x84>)
 8002704:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002708:	61d3      	str	r3, [r2, #28]
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_PCD_MspInit+0x84>)
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002716:	bf00      	nop
 8002718:	3728      	adds	r7, #40	; 0x28
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40005c00 	.word	0x40005c00
 8002724:	40021000 	.word	0x40021000

08002728 <PWM_Start>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PWM_Start() {
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 800272c:	4b04      	ldr	r3, [pc, #16]	; (8002740 <PWM_Start+0x18>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a04      	ldr	r2, [pc, #16]	; (8002744 <PWM_Start+0x1c>)
 8002732:	6812      	ldr	r2, [r2, #0]
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f004 fa38 	bl	8006bac <HAL_TIM_PWM_Start>
}
 800273c:	bf00      	nop
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000048 	.word	0x20000048
 8002744:	20000728 	.word	0x20000728

08002748 <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b088      	sub	sp, #32
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	460a      	mov	r2, r1
 8002752:	80fb      	strh	r3, [r7, #6]
 8002754:	4613      	mov	r3, r2
 8002756:	80bb      	strh	r3, [r7, #4]
	if (pwm_freq == 0 || pwm_freq > 20000) {
 8002758:	88fb      	ldrh	r3, [r7, #6]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d004      	beq.n	8002768 <PWM_Change_Tone+0x20>
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002764:	4293      	cmp	r3, r2
 8002766:	d937      	bls.n	80027d8 <PWM_Change_Tone+0x90>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 8002768:	4b4e      	ldr	r3, [pc, #312]	; (80028a4 <PWM_Change_Tone+0x15c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d105      	bne.n	800277c <PWM_Change_Tone+0x34>
 8002770:	4b4d      	ldr	r3, [pc, #308]	; (80028a8 <PWM_Change_Tone+0x160>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2200      	movs	r2, #0
 8002778:	635a      	str	r2, [r3, #52]	; 0x34
 800277a:	e08e      	b.n	800289a <PWM_Change_Tone+0x152>
 800277c:	4b49      	ldr	r3, [pc, #292]	; (80028a4 <PWM_Change_Tone+0x15c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b04      	cmp	r3, #4
 8002782:	d105      	bne.n	8002790 <PWM_Change_Tone+0x48>
 8002784:	4b48      	ldr	r3, [pc, #288]	; (80028a8 <PWM_Change_Tone+0x160>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	2300      	movs	r3, #0
 800278c:	6393      	str	r3, [r2, #56]	; 0x38
 800278e:	e084      	b.n	800289a <PWM_Change_Tone+0x152>
 8002790:	4b44      	ldr	r3, [pc, #272]	; (80028a4 <PWM_Change_Tone+0x15c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b08      	cmp	r3, #8
 8002796:	d105      	bne.n	80027a4 <PWM_Change_Tone+0x5c>
 8002798:	4b43      	ldr	r3, [pc, #268]	; (80028a8 <PWM_Change_Tone+0x160>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	2300      	movs	r3, #0
 80027a0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80027a2:	e07a      	b.n	800289a <PWM_Change_Tone+0x152>
 80027a4:	4b3f      	ldr	r3, [pc, #252]	; (80028a4 <PWM_Change_Tone+0x15c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b0c      	cmp	r3, #12
 80027aa:	d105      	bne.n	80027b8 <PWM_Change_Tone+0x70>
 80027ac:	4b3e      	ldr	r3, [pc, #248]	; (80028a8 <PWM_Change_Tone+0x160>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	2300      	movs	r3, #0
 80027b4:	6413      	str	r3, [r2, #64]	; 0x40
 80027b6:	e070      	b.n	800289a <PWM_Change_Tone+0x152>
 80027b8:	4b3a      	ldr	r3, [pc, #232]	; (80028a4 <PWM_Change_Tone+0x15c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b10      	cmp	r3, #16
 80027be:	d105      	bne.n	80027cc <PWM_Change_Tone+0x84>
 80027c0:	4b39      	ldr	r3, [pc, #228]	; (80028a8 <PWM_Change_Tone+0x160>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	2300      	movs	r3, #0
 80027c8:	6593      	str	r3, [r2, #88]	; 0x58
 80027ca:	e066      	b.n	800289a <PWM_Change_Tone+0x152>
 80027cc:	4b36      	ldr	r3, [pc, #216]	; (80028a8 <PWM_Change_Tone+0x160>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	2300      	movs	r3, #0
 80027d4:	65d3      	str	r3, [r2, #92]	; 0x5c
 80027d6:	e060      	b.n	800289a <PWM_Change_Tone+0x152>
	} else {
		const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 80027d8:	f003 fdb0 	bl	800633c <HAL_RCC_GetSysClockFreq>
 80027dc:	61f8      	str	r0, [r7, #28]
		const uint16_t prescaler = 1;
 80027de:	2301      	movs	r3, #1
 80027e0:	837b      	strh	r3, [r7, #26]
		const uint32_t timer_clock = internal_clock_freq / prescaler;
 80027e2:	8b7b      	ldrh	r3, [r7, #26]
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ea:	617b      	str	r3, [r7, #20]
		const uint32_t period_cycles = timer_clock / pwm_freq;
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f4:	613b      	str	r3, [r7, #16]
		const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 80027f6:	88bb      	ldrh	r3, [r7, #4]
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	fb02 f303 	mul.w	r3, r2, r3
 80027fe:	4a2b      	ldr	r2, [pc, #172]	; (80028ac <PWM_Change_Tone+0x164>)
 8002800:	fba2 2303 	umull	r2, r3, r2, r3
 8002804:	09db      	lsrs	r3, r3, #7
 8002806:	60fb      	str	r3, [r7, #12]

		pwm_timer->Instance->PSC = prescaler - 1;
 8002808:	8b7b      	ldrh	r3, [r7, #26]
 800280a:	1e5a      	subs	r2, r3, #1
 800280c:	4b26      	ldr	r3, [pc, #152]	; (80028a8 <PWM_Change_Tone+0x160>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	629a      	str	r2, [r3, #40]	; 0x28
		pwm_timer->Instance->ARR = period_cycles - 1;
 8002814:	4b24      	ldr	r3, [pc, #144]	; (80028a8 <PWM_Change_Tone+0x160>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	3a01      	subs	r2, #1
 800281e:	62da      	str	r2, [r3, #44]	; 0x2c
		pwm_timer->Instance->EGR = TIM_EGR_UG;
 8002820:	4b21      	ldr	r3, [pc, #132]	; (80028a8 <PWM_Change_Tone+0x160>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2201      	movs	r2, #1
 8002828:	615a      	str	r2, [r3, #20]
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 800282a:	4b1e      	ldr	r3, [pc, #120]	; (80028a4 <PWM_Change_Tone+0x15c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d105      	bne.n	800283e <PWM_Change_Tone+0xf6>
 8002832:	4b1d      	ldr	r3, [pc, #116]	; (80028a8 <PWM_Change_Tone+0x160>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 800283c:	e02d      	b.n	800289a <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 800283e:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <PWM_Change_Tone+0x15c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b04      	cmp	r3, #4
 8002844:	d105      	bne.n	8002852 <PWM_Change_Tone+0x10a>
 8002846:	4b18      	ldr	r3, [pc, #96]	; (80028a8 <PWM_Change_Tone+0x160>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002850:	e023      	b.n	800289a <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8002852:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <PWM_Change_Tone+0x15c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b08      	cmp	r3, #8
 8002858:	d105      	bne.n	8002866 <PWM_Change_Tone+0x11e>
 800285a:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <PWM_Change_Tone+0x160>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002864:	e019      	b.n	800289a <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8002866:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <PWM_Change_Tone+0x15c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b0c      	cmp	r3, #12
 800286c:	d105      	bne.n	800287a <PWM_Change_Tone+0x132>
 800286e:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <PWM_Change_Tone+0x160>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002878:	e00f      	b.n	800289a <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 800287a:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <PWM_Change_Tone+0x15c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b10      	cmp	r3, #16
 8002880:	d105      	bne.n	800288e <PWM_Change_Tone+0x146>
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <PWM_Change_Tone+0x160>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6593      	str	r3, [r2, #88]	; 0x58
}
 800288c:	e005      	b.n	800289a <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <PWM_Change_Tone+0x160>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8002898:	e7ff      	b.n	800289a <PWM_Change_Tone+0x152>
 800289a:	bf00      	nop
 800289c:	3720      	adds	r7, #32
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000728 	.word	0x20000728
 80028a8:	20000048 	.word	0x20000048
 80028ac:	10624dd3 	.word	0x10624dd3

080028b0 <Change_Melody>:

void Change_Melody(const struct Tone *melody, uint16_t tone_count) {
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	807b      	strh	r3, [r7, #2]
	melody_ptr = melody;
 80028bc:	4a07      	ldr	r2, [pc, #28]	; (80028dc <Change_Melody+0x2c>)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6013      	str	r3, [r2, #0]
	melody_tone_count = tone_count;
 80028c2:	4a07      	ldr	r2, [pc, #28]	; (80028e0 <Change_Melody+0x30>)
 80028c4:	887b      	ldrh	r3, [r7, #2]
 80028c6:	8013      	strh	r3, [r2, #0]
	current_tone_number = 0;
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <Change_Melody+0x34>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	801a      	strh	r2, [r3, #0]
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	2000072c 	.word	0x2000072c
 80028e0:	20000730 	.word	0x20000730
 80028e4:	20000732 	.word	0x20000732

080028e8 <Update_Melody>:

void Update_Melody() {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
	if (programState != Paused && programState != IDLE) {
 80028ee:	4b28      	ldr	r3, [pc, #160]	; (8002990 <Update_Melody+0xa8>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d042      	beq.n	800297c <Update_Melody+0x94>
 80028f6:	4b26      	ldr	r3, [pc, #152]	; (8002990 <Update_Melody+0xa8>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d03e      	beq.n	800297c <Update_Melody+0x94>
		if ((HAL_GetTick() > current_tone_end)
 80028fe:	f000 fa2b 	bl	8002d58 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	4b23      	ldr	r3, [pc, #140]	; (8002994 <Update_Melody+0xac>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d92c      	bls.n	8002966 <Update_Melody+0x7e>
				&& (current_tone_number < melody_tone_count)) {
 800290c:	4b22      	ldr	r3, [pc, #136]	; (8002998 <Update_Melody+0xb0>)
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	b29a      	uxth	r2, r3
 8002912:	4b22      	ldr	r3, [pc, #136]	; (800299c <Update_Melody+0xb4>)
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	b29b      	uxth	r3, r3
 8002918:	429a      	cmp	r2, r3
 800291a:	d224      	bcs.n	8002966 <Update_Melody+0x7e>
			const struct Tone active_tone = *(melody_ptr + current_tone_number);
 800291c:	4b20      	ldr	r3, [pc, #128]	; (80029a0 <Update_Melody+0xb8>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <Update_Melody+0xb0>)
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	b29b      	uxth	r3, r3
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	441a      	add	r2, r3
 800292a:	463b      	mov	r3, r7
 800292c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002930:	e883 0003 	stmia.w	r3, {r0, r1}
			PWM_Change_Tone(active_tone.frequency, volume);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	b29b      	uxth	r3, r3
 8002938:	4a1a      	ldr	r2, [pc, #104]	; (80029a4 <Update_Melody+0xbc>)
 800293a:	8812      	ldrh	r2, [r2, #0]
 800293c:	b292      	uxth	r2, r2
 800293e:	4611      	mov	r1, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff ff01 	bl	8002748 <PWM_Change_Tone>
			current_tone_end = HAL_GetTick() + active_tone.duration;
 8002946:	f000 fa07 	bl	8002d58 <HAL_GetTick>
 800294a:	4603      	mov	r3, r0
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	4413      	add	r3, r2
 8002950:	4a10      	ldr	r2, [pc, #64]	; (8002994 <Update_Melody+0xac>)
 8002952:	6013      	str	r3, [r2, #0]
			current_tone_number++;
 8002954:	4b10      	ldr	r3, [pc, #64]	; (8002998 <Update_Melody+0xb0>)
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	b29b      	uxth	r3, r3
 800295a:	3301      	adds	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <Update_Melody+0xb0>)
 8002960:	801a      	strh	r2, [r3, #0]
				&& (current_tone_number < melody_tone_count)) {
 8002962:	bf00      	nop
		if ((HAL_GetTick() > current_tone_end)
 8002964:	e00f      	b.n	8002986 <Update_Melody+0x9e>
		}else if(current_tone_number >= melody_tone_count)
 8002966:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <Update_Melody+0xb0>)
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	b29a      	uxth	r2, r3
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <Update_Melody+0xb4>)
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	b29b      	uxth	r3, r3
 8002972:	429a      	cmp	r2, r3
 8002974:	d307      	bcc.n	8002986 <Update_Melody+0x9e>
		{
			next_music();
 8002976:	f7fe fef3 	bl	8001760 <next_music>
		if ((HAL_GetTick() > current_tone_end)
 800297a:	e004      	b.n	8002986 <Update_Melody+0x9e>
		}
	}else
	{
		PWM_Change_Tone(0, 0);
 800297c:	2100      	movs	r1, #0
 800297e:	2000      	movs	r0, #0
 8002980:	f7ff fee2 	bl	8002748 <PWM_Change_Tone>
	}
}
 8002984:	e000      	b.n	8002988 <Update_Melody+0xa0>
		if ((HAL_GetTick() > current_tone_end)
 8002986:	bf00      	nop
}
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20000684 	.word	0x20000684
 8002994:	20000734 	.word	0x20000734
 8002998:	20000732 	.word	0x20000732
 800299c:	20000730 	.word	0x20000730
 80029a0:	2000072c 	.word	0x2000072c
 80029a4:	2000004c 	.word	0x2000004c

080029a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80029ac:	e7fe      	b.n	80029ac <NMI_Handler+0x4>

080029ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ae:	b480      	push	{r7}
 80029b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029b2:	e7fe      	b.n	80029b2 <HardFault_Handler+0x4>

080029b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029b8:	e7fe      	b.n	80029b8 <MemManage_Handler+0x4>

080029ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ba:	b480      	push	{r7}
 80029bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029be:	e7fe      	b.n	80029be <BusFault_Handler+0x4>

080029c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029c4:	e7fe      	b.n	80029c4 <UsageFault_Handler+0x4>

080029c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029e2:	b480      	push	{r7}
 80029e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029f4:	f000 f99c 	bl	8002d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	Update_Melody();
 80029f8:	f7ff ff76 	bl	80028e8 <Update_Melody>
  /* USER CODE END SysTick_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002a04:	2001      	movs	r0, #1
 8002a06:	f002 f8cf 	bl	8004ba8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	if (HAL_GetTick() > last_button_press + 200) {
 8002a0a:	f000 f9a5 	bl	8002d58 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <EXTI0_IRQHandler+0x28>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	33c8      	adds	r3, #200	; 0xc8
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d904      	bls.n	8002a24 <EXTI0_IRQHandler+0x24>
		last_button_press = HAL_GetTick();
 8002a1a:	f000 f99d 	bl	8002d58 <HAL_GetTick>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	4a01      	ldr	r2, [pc, #4]	; (8002a28 <EXTI0_IRQHandler+0x28>)
 8002a22:	6013      	str	r3, [r2, #0]

	}
  /* USER CODE END EXTI0_IRQn 1 */
}
 8002a24:	bf00      	nop
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20000738 	.word	0x20000738

08002a2c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002a30:	2002      	movs	r0, #2
 8002a32:	f002 f8b9 	bl	8004ba8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002a3e:	2004      	movs	r0, #4
 8002a40:	f002 f8b2 	bl	8004ba8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8002a44:	bf00      	nop
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002a4c:	2008      	movs	r0, #8
 8002a4e:	f002 f8ab 	bl	8004ba8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002a5a:	2010      	movs	r0, #16
 8002a5c:	f002 f8a4 	bl	8004ba8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002a60:	bf00      	nop
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002a68:	4802      	ldr	r0, [pc, #8]	; (8002a74 <ADC1_2_IRQHandler+0x10>)
 8002a6a:	f000 fcff 	bl	800346c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	200000e4 	.word	0x200000e4

08002a78 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a7c:	4802      	ldr	r0, [pc, #8]	; (8002a88 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002a7e:	f004 f995 	bl	8006dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	200001ec 	.word	0x200001ec

08002a8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a90:	4802      	ldr	r0, [pc, #8]	; (8002a9c <USART1_IRQHandler+0x10>)
 8002a92:	f005 faef 	bl	8008074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000284 	.word	0x20000284

08002aa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return 1;
 8002aa4:	2301      	movs	r3, #1
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <_kill>:

int _kill(int pid, int sig)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002aba:	f006 fd69 	bl	8009590 <__errno>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2216      	movs	r2, #22
 8002ac2:	601a      	str	r2, [r3, #0]
  return -1;
 8002ac4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <_exit>:

void _exit (int status)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff ffe7 	bl	8002ab0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ae2:	e7fe      	b.n	8002ae2 <_exit+0x12>

08002ae4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	e00a      	b.n	8002b0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002af6:	f3af 8000 	nop.w
 8002afa:	4601      	mov	r1, r0
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	1c5a      	adds	r2, r3, #1
 8002b00:	60ba      	str	r2, [r7, #8]
 8002b02:	b2ca      	uxtb	r2, r1
 8002b04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	dbf0      	blt.n	8002af6 <_read+0x12>
  }

  return len;
 8002b14:	687b      	ldr	r3, [r7, #4]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b086      	sub	sp, #24
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	e009      	b.n	8002b44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	60ba      	str	r2, [r7, #8]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	3301      	adds	r3, #1
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	dbf1      	blt.n	8002b30 <_write+0x12>
  }
  return len;
 8002b4c:	687b      	ldr	r3, [r7, #4]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <_close>:

int _close(int file)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b7e:	605a      	str	r2, [r3, #4]
  return 0;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <_isatty>:

int _isatty(int file)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b96:	2301      	movs	r3, #1
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bc8:	4a14      	ldr	r2, [pc, #80]	; (8002c1c <_sbrk+0x5c>)
 8002bca:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <_sbrk+0x60>)
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bd4:	4b13      	ldr	r3, [pc, #76]	; (8002c24 <_sbrk+0x64>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d102      	bne.n	8002be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bdc:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <_sbrk+0x64>)
 8002bde:	4a12      	ldr	r2, [pc, #72]	; (8002c28 <_sbrk+0x68>)
 8002be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002be2:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <_sbrk+0x64>)
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4413      	add	r3, r2
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d207      	bcs.n	8002c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bf0:	f006 fcce 	bl	8009590 <__errno>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	220c      	movs	r2, #12
 8002bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfe:	e009      	b.n	8002c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c00:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <_sbrk+0x64>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c06:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <_sbrk+0x64>)
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	4a05      	ldr	r2, [pc, #20]	; (8002c24 <_sbrk+0x64>)
 8002c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c12:	68fb      	ldr	r3, [r7, #12]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	2000a000 	.word	0x2000a000
 8002c20:	00000400 	.word	0x00000400
 8002c24:	2000073c 	.word	0x2000073c
 8002c28:	20000758 	.word	0x20000758

08002c2c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c30:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <SystemInit+0x20>)
 8002c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c36:	4a05      	ldr	r2, [pc, #20]	; (8002c4c <SystemInit+0x20>)
 8002c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c88 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c54:	f7ff ffea 	bl	8002c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c58:	480c      	ldr	r0, [pc, #48]	; (8002c8c <LoopForever+0x6>)
  ldr r1, =_edata
 8002c5a:	490d      	ldr	r1, [pc, #52]	; (8002c90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c5c:	4a0d      	ldr	r2, [pc, #52]	; (8002c94 <LoopForever+0xe>)
  movs r3, #0
 8002c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c60:	e002      	b.n	8002c68 <LoopCopyDataInit>

08002c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c66:	3304      	adds	r3, #4

08002c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c6c:	d3f9      	bcc.n	8002c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c6e:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c70:	4c0a      	ldr	r4, [pc, #40]	; (8002c9c <LoopForever+0x16>)
  movs r3, #0
 8002c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c74:	e001      	b.n	8002c7a <LoopFillZerobss>

08002c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c78:	3204      	adds	r2, #4

08002c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c7c:	d3fb      	bcc.n	8002c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c7e:	f006 fc8d 	bl	800959c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c82:	f7fe fe29 	bl	80018d8 <main>

08002c86 <LoopForever>:

LoopForever:
    b LoopForever
 8002c86:	e7fe      	b.n	8002c86 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002c88:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c90:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8002c94:	0800e32c 	.word	0x0800e32c
  ldr r2, =_sbss
 8002c98:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8002c9c:	20000754 	.word	0x20000754

08002ca0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ca0:	e7fe      	b.n	8002ca0 <ADC3_IRQHandler>
	...

08002ca4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ca8:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <HAL_Init+0x28>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a07      	ldr	r2, [pc, #28]	; (8002ccc <HAL_Init+0x28>)
 8002cae:	f043 0310 	orr.w	r3, r3, #16
 8002cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb4:	2003      	movs	r0, #3
 8002cb6:	f001 fd15 	bl	80046e4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cba:	2000      	movs	r0, #0
 8002cbc:	f000 f808 	bl	8002cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cc0:	f7ff fb44 	bl	800234c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40022000 	.word	0x40022000

08002cd0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cd8:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <HAL_InitTick+0x54>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <HAL_InitTick+0x58>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f001 fd2d 	bl	800474e <HAL_SYSTICK_Config>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e00e      	b.n	8002d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b0f      	cmp	r3, #15
 8002d02:	d80a      	bhi.n	8002d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d04:	2200      	movs	r2, #0
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	f04f 30ff 	mov.w	r0, #4294967295
 8002d0c:	f001 fcf5 	bl	80046fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d10:	4a06      	ldr	r2, [pc, #24]	; (8002d2c <HAL_InitTick+0x5c>)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	e000      	b.n	8002d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20000050 	.word	0x20000050
 8002d28:	20000058 	.word	0x20000058
 8002d2c:	20000054 	.word	0x20000054

08002d30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <HAL_IncTick+0x20>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_IncTick+0x24>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4413      	add	r3, r2
 8002d40:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <HAL_IncTick+0x24>)
 8002d42:	6013      	str	r3, [r2, #0]
}
 8002d44:	bf00      	nop
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	20000058 	.word	0x20000058
 8002d54:	20000740 	.word	0x20000740

08002d58 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return uwTick;  
 8002d5c:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <HAL_GetTick+0x14>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	20000740 	.word	0x20000740

08002d70 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b09a      	sub	sp, #104	; 0x68
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e1c9      	b.n	800314c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f003 0310 	and.w	r3, r3, #16
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d176      	bne.n	8002eb8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d152      	bne.n	8002e78 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f7ff fad1 	bl	8002394 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d13b      	bne.n	8002e78 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f001 fa83 	bl	800430c <ADC_Disable>
 8002e06:	4603      	mov	r3, r0
 8002e08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	f003 0310 	and.w	r3, r3, #16
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d12f      	bne.n	8002e78 <HAL_ADC_Init+0xe0>
 8002e18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d12b      	bne.n	8002e78 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e28:	f023 0302 	bic.w	r3, r3, #2
 8002e2c:	f043 0202 	orr.w	r2, r3, #2
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e42:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e52:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e54:	4b86      	ldr	r3, [pc, #536]	; (8003070 <HAL_ADC_Init+0x2d8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a86      	ldr	r2, [pc, #536]	; (8003074 <HAL_ADC_Init+0x2dc>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	0c9a      	lsrs	r2, r3, #18
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e6a:	e002      	b.n	8002e72 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f9      	bne.n	8002e6c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d007      	beq.n	8002e96 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002e90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e94:	d110      	bne.n	8002eb8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f023 0312 	bic.w	r3, r3, #18
 8002e9e:	f043 0210 	orr.w	r2, r3, #16
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	f043 0201 	orr.w	r2, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f040 8136 	bne.w	8003132 <HAL_ADC_Init+0x39a>
 8002ec6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f040 8131 	bne.w	8003132 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f040 8129 	bne.w	8003132 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ee8:	f043 0202 	orr.w	r2, r3, #2
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ef8:	d004      	beq.n	8002f04 <HAL_ADC_Init+0x16c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a5e      	ldr	r2, [pc, #376]	; (8003078 <HAL_ADC_Init+0x2e0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d101      	bne.n	8002f08 <HAL_ADC_Init+0x170>
 8002f04:	4b5d      	ldr	r3, [pc, #372]	; (800307c <HAL_ADC_Init+0x2e4>)
 8002f06:	e000      	b.n	8002f0a <HAL_ADC_Init+0x172>
 8002f08:	4b5d      	ldr	r3, [pc, #372]	; (8003080 <HAL_ADC_Init+0x2e8>)
 8002f0a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f14:	d102      	bne.n	8002f1c <HAL_ADC_Init+0x184>
 8002f16:	4b58      	ldr	r3, [pc, #352]	; (8003078 <HAL_ADC_Init+0x2e0>)
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	e01a      	b.n	8002f52 <HAL_ADC_Init+0x1ba>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a55      	ldr	r2, [pc, #340]	; (8003078 <HAL_ADC_Init+0x2e0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d103      	bne.n	8002f2e <HAL_ADC_Init+0x196>
 8002f26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	e011      	b.n	8002f52 <HAL_ADC_Init+0x1ba>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a54      	ldr	r2, [pc, #336]	; (8003084 <HAL_ADC_Init+0x2ec>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d102      	bne.n	8002f3e <HAL_ADC_Init+0x1a6>
 8002f38:	4b53      	ldr	r3, [pc, #332]	; (8003088 <HAL_ADC_Init+0x2f0>)
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	e009      	b.n	8002f52 <HAL_ADC_Init+0x1ba>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a51      	ldr	r2, [pc, #324]	; (8003088 <HAL_ADC_Init+0x2f0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d102      	bne.n	8002f4e <HAL_ADC_Init+0x1b6>
 8002f48:	4b4e      	ldr	r3, [pc, #312]	; (8003084 <HAL_ADC_Init+0x2ec>)
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	e001      	b.n	8002f52 <HAL_ADC_Init+0x1ba>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d108      	bne.n	8002f72 <HAL_ADC_Init+0x1da>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_ADC_Init+0x1da>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <HAL_ADC_Init+0x1dc>
 8002f72:	2300      	movs	r3, #0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d11c      	bne.n	8002fb2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f78:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d010      	beq.n	8002fa0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d107      	bne.n	8002f9a <HAL_ADC_Init+0x202>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_ADC_Init+0x202>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <HAL_ADC_Init+0x204>
 8002f9a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d108      	bne.n	8002fb2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002fa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	431a      	orrs	r2, r3
 8002fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fb0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	7e5b      	ldrb	r3, [r3, #25]
 8002fb6:	035b      	lsls	r3, r3, #13
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fbc:	2a01      	cmp	r2, #1
 8002fbe:	d002      	beq.n	8002fc6 <HAL_ADC_Init+0x22e>
 8002fc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fc4:	e000      	b.n	8002fc8 <HAL_ADC_Init+0x230>
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d11b      	bne.n	800301e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	7e5b      	ldrb	r3, [r3, #25]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d109      	bne.n	8003002 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	045a      	lsls	r2, r3, #17
 8002ff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffe:	663b      	str	r3, [r7, #96]	; 0x60
 8003000:	e00d      	b.n	800301e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800300a:	f043 0220 	orr.w	r2, r3, #32
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	f043 0201 	orr.w	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003022:	2b01      	cmp	r3, #1
 8003024:	d03a      	beq.n	800309c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a16      	ldr	r2, [pc, #88]	; (8003084 <HAL_ADC_Init+0x2ec>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d004      	beq.n	800303a <HAL_ADC_Init+0x2a2>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a14      	ldr	r2, [pc, #80]	; (8003088 <HAL_ADC_Init+0x2f0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d128      	bne.n	800308c <HAL_ADC_Init+0x2f4>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8003042:	d012      	beq.n	800306a <HAL_ADC_Init+0x2d2>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800304c:	d00a      	beq.n	8003064 <HAL_ADC_Init+0x2cc>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003052:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8003056:	d002      	beq.n	800305e <HAL_ADC_Init+0x2c6>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305c:	e018      	b.n	8003090 <HAL_ADC_Init+0x2f8>
 800305e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003062:	e015      	b.n	8003090 <HAL_ADC_Init+0x2f8>
 8003064:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003068:	e012      	b.n	8003090 <HAL_ADC_Init+0x2f8>
 800306a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800306e:	e00f      	b.n	8003090 <HAL_ADC_Init+0x2f8>
 8003070:	20000050 	.word	0x20000050
 8003074:	431bde83 	.word	0x431bde83
 8003078:	50000100 	.word	0x50000100
 800307c:	50000300 	.word	0x50000300
 8003080:	50000700 	.word	0x50000700
 8003084:	50000400 	.word	0x50000400
 8003088:	50000500 	.word	0x50000500
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003094:	4313      	orrs	r3, r2
 8003096:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003098:	4313      	orrs	r3, r2
 800309a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d114      	bne.n	80030d4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030b8:	f023 0302 	bic.w	r3, r3, #2
 80030bc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	7e1b      	ldrb	r3, [r3, #24]
 80030c2:	039a      	lsls	r2, r3, #14
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	4313      	orrs	r3, r2
 80030ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030d0:	4313      	orrs	r3, r2
 80030d2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	4b1e      	ldr	r3, [pc, #120]	; (8003154 <HAL_ADC_Init+0x3bc>)
 80030dc:	4013      	ands	r3, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6812      	ldr	r2, [r2, #0]
 80030e2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80030e4:	430b      	orrs	r3, r1
 80030e6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d10c      	bne.n	800310a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	f023 010f 	bic.w	r1, r3, #15
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	1e5a      	subs	r2, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
 8003108:	e007      	b.n	800311a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 020f 	bic.w	r2, r2, #15
 8003118:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	f023 0303 	bic.w	r3, r3, #3
 8003128:	f043 0201 	orr.w	r2, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	641a      	str	r2, [r3, #64]	; 0x40
 8003130:	e00a      	b.n	8003148 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f023 0312 	bic.w	r3, r3, #18
 800313a:	f043 0210 	orr.w	r2, r3, #16
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003142:	2301      	movs	r3, #1
 8003144:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003148:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800314c:	4618      	mov	r0, r3
 800314e:	3768      	adds	r7, #104	; 0x68
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	fff0c007 	.word	0xfff0c007

08003158 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b00      	cmp	r3, #0
 8003170:	f040 8123 	bne.w	80033ba <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_ADC_Start_IT+0x2a>
 800317e:	2302      	movs	r3, #2
 8003180:	e11e      	b.n	80033c0 <HAL_ADC_Start_IT+0x268>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f001 f85a 	bl	8004244 <ADC_Enable>
 8003190:	4603      	mov	r3, r0
 8003192:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	2b00      	cmp	r3, #0
 8003198:	f040 810a 	bne.w	80033b0 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031a4:	f023 0301 	bic.w	r3, r3, #1
 80031a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031b8:	d004      	beq.n	80031c4 <HAL_ADC_Start_IT+0x6c>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a82      	ldr	r2, [pc, #520]	; (80033c8 <HAL_ADC_Start_IT+0x270>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d106      	bne.n	80031d2 <HAL_ADC_Start_IT+0x7a>
 80031c4:	4b81      	ldr	r3, [pc, #516]	; (80033cc <HAL_ADC_Start_IT+0x274>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d010      	beq.n	80031f2 <HAL_ADC_Start_IT+0x9a>
 80031d0:	e005      	b.n	80031de <HAL_ADC_Start_IT+0x86>
 80031d2:	4b7f      	ldr	r3, [pc, #508]	; (80033d0 <HAL_ADC_Start_IT+0x278>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 031f 	and.w	r3, r3, #31
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d009      	beq.n	80031f2 <HAL_ADC_Start_IT+0x9a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031e6:	d004      	beq.n	80031f2 <HAL_ADC_Start_IT+0x9a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a79      	ldr	r2, [pc, #484]	; (80033d4 <HAL_ADC_Start_IT+0x27c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d115      	bne.n	800321e <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d036      	beq.n	800327a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003214:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800321c:	e02d      	b.n	800327a <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003232:	d004      	beq.n	800323e <HAL_ADC_Start_IT+0xe6>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a63      	ldr	r2, [pc, #396]	; (80033c8 <HAL_ADC_Start_IT+0x270>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d10a      	bne.n	8003254 <HAL_ADC_Start_IT+0xfc>
 800323e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	bf14      	ite	ne
 800324c:	2301      	movne	r3, #1
 800324e:	2300      	moveq	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	e008      	b.n	8003266 <HAL_ADC_Start_IT+0x10e>
 8003254:	4b5f      	ldr	r3, [pc, #380]	; (80033d4 <HAL_ADC_Start_IT+0x27c>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf14      	ite	ne
 8003260:	2301      	movne	r3, #1
 8003262:	2300      	moveq	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d007      	beq.n	800327a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003272:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003286:	d106      	bne.n	8003296 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328c:	f023 0206 	bic.w	r2, r3, #6
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	645a      	str	r2, [r3, #68]	; 0x44
 8003294:	e002      	b.n	800329c <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	221c      	movs	r2, #28
 80032aa:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d110      	bne.n	80032d6 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0204 	bic.w	r2, r2, #4
 80032c2:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0208 	orr.w	r2, r2, #8
 80032d2:	605a      	str	r2, [r3, #4]
          break;
 80032d4:	e008      	b.n	80032e8 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 020c 	orr.w	r2, r2, #12
 80032e4:	605a      	str	r2, [r3, #4]
          break;
 80032e6:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d107      	bne.n	8003300 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0210 	bic.w	r2, r2, #16
 80032fe:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003308:	d004      	beq.n	8003314 <HAL_ADC_Start_IT+0x1bc>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a2e      	ldr	r2, [pc, #184]	; (80033c8 <HAL_ADC_Start_IT+0x270>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d106      	bne.n	8003322 <HAL_ADC_Start_IT+0x1ca>
 8003314:	4b2d      	ldr	r3, [pc, #180]	; (80033cc <HAL_ADC_Start_IT+0x274>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 031f 	and.w	r3, r3, #31
 800331c:	2b00      	cmp	r3, #0
 800331e:	d03e      	beq.n	800339e <HAL_ADC_Start_IT+0x246>
 8003320:	e005      	b.n	800332e <HAL_ADC_Start_IT+0x1d6>
 8003322:	4b2b      	ldr	r3, [pc, #172]	; (80033d0 <HAL_ADC_Start_IT+0x278>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 031f 	and.w	r3, r3, #31
 800332a:	2b00      	cmp	r3, #0
 800332c:	d037      	beq.n	800339e <HAL_ADC_Start_IT+0x246>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003336:	d004      	beq.n	8003342 <HAL_ADC_Start_IT+0x1ea>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a22      	ldr	r2, [pc, #136]	; (80033c8 <HAL_ADC_Start_IT+0x270>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d106      	bne.n	8003350 <HAL_ADC_Start_IT+0x1f8>
 8003342:	4b22      	ldr	r3, [pc, #136]	; (80033cc <HAL_ADC_Start_IT+0x274>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	2b05      	cmp	r3, #5
 800334c:	d027      	beq.n	800339e <HAL_ADC_Start_IT+0x246>
 800334e:	e005      	b.n	800335c <HAL_ADC_Start_IT+0x204>
 8003350:	4b1f      	ldr	r3, [pc, #124]	; (80033d0 <HAL_ADC_Start_IT+0x278>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	2b05      	cmp	r3, #5
 800335a:	d020      	beq.n	800339e <HAL_ADC_Start_IT+0x246>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003364:	d004      	beq.n	8003370 <HAL_ADC_Start_IT+0x218>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a17      	ldr	r2, [pc, #92]	; (80033c8 <HAL_ADC_Start_IT+0x270>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d106      	bne.n	800337e <HAL_ADC_Start_IT+0x226>
 8003370:	4b16      	ldr	r3, [pc, #88]	; (80033cc <HAL_ADC_Start_IT+0x274>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 031f 	and.w	r3, r3, #31
 8003378:	2b09      	cmp	r3, #9
 800337a:	d010      	beq.n	800339e <HAL_ADC_Start_IT+0x246>
 800337c:	e005      	b.n	800338a <HAL_ADC_Start_IT+0x232>
 800337e:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <HAL_ADC_Start_IT+0x278>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 031f 	and.w	r3, r3, #31
 8003386:	2b09      	cmp	r3, #9
 8003388:	d009      	beq.n	800339e <HAL_ADC_Start_IT+0x246>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003392:	d004      	beq.n	800339e <HAL_ADC_Start_IT+0x246>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a0e      	ldr	r2, [pc, #56]	; (80033d4 <HAL_ADC_Start_IT+0x27c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d10f      	bne.n	80033be <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0204 	orr.w	r2, r2, #4
 80033ac:	609a      	str	r2, [r3, #8]
 80033ae:	e006      	b.n	80033be <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80033b8:	e001      	b.n	80033be <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033ba:	2302      	movs	r3, #2
 80033bc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80033be:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	50000100 	.word	0x50000100
 80033cc:	50000300 	.word	0x50000300
 80033d0:	50000700 	.word	0x50000700
 80033d4:	50000400 	.word	0x50000400

080033d8 <HAL_ADC_Stop_IT>:
  *         use function @ref HAL_ADCEx_RegularStop_IT().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_ADC_Stop_IT+0x1a>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e02b      	b.n	800344a <HAL_ADC_Stop_IT+0x72>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80033fa:	216c      	movs	r1, #108	; 0x6c
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 ffeb 	bl	80043d8 <ADC_ConversionStop>
 8003402:	4603      	mov	r3, r0
 8003404:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d119      	bne.n	8003440 <HAL_ADC_Stop_IT+0x68>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 021c 	bic.w	r2, r2, #28
 800341a:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 ff75 	bl	800430c <ADC_Disable>
 8003422:	4603      	mov	r3, r0
 8003424:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003426:	7bfb      	ldrb	r3, [r7, #15]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d109      	bne.n	8003440 <HAL_ADC_Stop_IT+0x68>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003434:	f023 0301 	bic.w	r3, r3, #1
 8003438:	f043 0201 	orr.w	r2, r3, #1
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003448:	7bfb      	ldrb	r3, [r7, #15]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003460:	4618      	mov	r0, r3
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b088      	sub	sp, #32
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8003474:	2300      	movs	r3, #0
 8003476:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003478:	2300      	movs	r3, #0
 800347a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b00      	cmp	r3, #0
 8003498:	d004      	beq.n	80034a4 <HAL_ADC_IRQHandler+0x38>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10b      	bne.n	80034bc <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 80bc 	beq.w	8003628 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 80b6 	beq.w	8003628 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	f003 0310 	and.w	r3, r3, #16
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d105      	bne.n	80034d4 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034dc:	d004      	beq.n	80034e8 <HAL_ADC_IRQHandler+0x7c>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a90      	ldr	r2, [pc, #576]	; (8003724 <HAL_ADC_IRQHandler+0x2b8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d106      	bne.n	80034f6 <HAL_ADC_IRQHandler+0x8a>
 80034e8:	4b8f      	ldr	r3, [pc, #572]	; (8003728 <HAL_ADC_IRQHandler+0x2bc>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d03e      	beq.n	8003572 <HAL_ADC_IRQHandler+0x106>
 80034f4:	e005      	b.n	8003502 <HAL_ADC_IRQHandler+0x96>
 80034f6:	4b8d      	ldr	r3, [pc, #564]	; (800372c <HAL_ADC_IRQHandler+0x2c0>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 031f 	and.w	r3, r3, #31
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d037      	beq.n	8003572 <HAL_ADC_IRQHandler+0x106>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800350a:	d004      	beq.n	8003516 <HAL_ADC_IRQHandler+0xaa>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a84      	ldr	r2, [pc, #528]	; (8003724 <HAL_ADC_IRQHandler+0x2b8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d106      	bne.n	8003524 <HAL_ADC_IRQHandler+0xb8>
 8003516:	4b84      	ldr	r3, [pc, #528]	; (8003728 <HAL_ADC_IRQHandler+0x2bc>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 031f 	and.w	r3, r3, #31
 800351e:	2b05      	cmp	r3, #5
 8003520:	d027      	beq.n	8003572 <HAL_ADC_IRQHandler+0x106>
 8003522:	e005      	b.n	8003530 <HAL_ADC_IRQHandler+0xc4>
 8003524:	4b81      	ldr	r3, [pc, #516]	; (800372c <HAL_ADC_IRQHandler+0x2c0>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	2b05      	cmp	r3, #5
 800352e:	d020      	beq.n	8003572 <HAL_ADC_IRQHandler+0x106>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003538:	d004      	beq.n	8003544 <HAL_ADC_IRQHandler+0xd8>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a79      	ldr	r2, [pc, #484]	; (8003724 <HAL_ADC_IRQHandler+0x2b8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d106      	bne.n	8003552 <HAL_ADC_IRQHandler+0xe6>
 8003544:	4b78      	ldr	r3, [pc, #480]	; (8003728 <HAL_ADC_IRQHandler+0x2bc>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 031f 	and.w	r3, r3, #31
 800354c:	2b09      	cmp	r3, #9
 800354e:	d010      	beq.n	8003572 <HAL_ADC_IRQHandler+0x106>
 8003550:	e005      	b.n	800355e <HAL_ADC_IRQHandler+0xf2>
 8003552:	4b76      	ldr	r3, [pc, #472]	; (800372c <HAL_ADC_IRQHandler+0x2c0>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 031f 	and.w	r3, r3, #31
 800355a:	2b09      	cmp	r3, #9
 800355c:	d009      	beq.n	8003572 <HAL_ADC_IRQHandler+0x106>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003566:	d004      	beq.n	8003572 <HAL_ADC_IRQHandler+0x106>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a70      	ldr	r2, [pc, #448]	; (8003730 <HAL_ADC_IRQHandler+0x2c4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d104      	bne.n	800357c <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	61bb      	str	r3, [r7, #24]
 800357a:	e00f      	b.n	800359c <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003584:	d004      	beq.n	8003590 <HAL_ADC_IRQHandler+0x124>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a66      	ldr	r2, [pc, #408]	; (8003724 <HAL_ADC_IRQHandler+0x2b8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d102      	bne.n	8003596 <HAL_ADC_IRQHandler+0x12a>
 8003590:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003594:	e000      	b.n	8003598 <HAL_ADC_IRQHandler+0x12c>
 8003596:	4b66      	ldr	r3, [pc, #408]	; (8003730 <HAL_ADC_IRQHandler+0x2c4>)
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d137      	bne.n	800361a <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d132      	bne.n	800361a <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d02d      	beq.n	800361a <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d11a      	bne.n	8003602 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 020c 	bic.w	r2, r2, #12
 80035da:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d112      	bne.n	800361a <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	f043 0201 	orr.w	r2, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	641a      	str	r2, [r3, #64]	; 0x40
 8003600:	e00b      	b.n	800361a <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	f043 0210 	orr.w	r2, r3, #16
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003612:	f043 0201 	orr.w	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7fd fedc 	bl	80013d8 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	220c      	movs	r2, #12
 8003626:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b00      	cmp	r3, #0
 8003630:	d004      	beq.n	800363c <HAL_ADC_IRQHandler+0x1d0>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10b      	bne.n	8003654 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 8138 	beq.w	80038b8 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 8132 	beq.w	80038b8 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003668:	d004      	beq.n	8003674 <HAL_ADC_IRQHandler+0x208>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a2d      	ldr	r2, [pc, #180]	; (8003724 <HAL_ADC_IRQHandler+0x2b8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d106      	bne.n	8003682 <HAL_ADC_IRQHandler+0x216>
 8003674:	4b2c      	ldr	r3, [pc, #176]	; (8003728 <HAL_ADC_IRQHandler+0x2bc>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 031f 	and.w	r3, r3, #31
 800367c:	2b00      	cmp	r3, #0
 800367e:	d03e      	beq.n	80036fe <HAL_ADC_IRQHandler+0x292>
 8003680:	e005      	b.n	800368e <HAL_ADC_IRQHandler+0x222>
 8003682:	4b2a      	ldr	r3, [pc, #168]	; (800372c <HAL_ADC_IRQHandler+0x2c0>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 031f 	and.w	r3, r3, #31
 800368a:	2b00      	cmp	r3, #0
 800368c:	d037      	beq.n	80036fe <HAL_ADC_IRQHandler+0x292>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003696:	d004      	beq.n	80036a2 <HAL_ADC_IRQHandler+0x236>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a21      	ldr	r2, [pc, #132]	; (8003724 <HAL_ADC_IRQHandler+0x2b8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d106      	bne.n	80036b0 <HAL_ADC_IRQHandler+0x244>
 80036a2:	4b21      	ldr	r3, [pc, #132]	; (8003728 <HAL_ADC_IRQHandler+0x2bc>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 031f 	and.w	r3, r3, #31
 80036aa:	2b05      	cmp	r3, #5
 80036ac:	d027      	beq.n	80036fe <HAL_ADC_IRQHandler+0x292>
 80036ae:	e005      	b.n	80036bc <HAL_ADC_IRQHandler+0x250>
 80036b0:	4b1e      	ldr	r3, [pc, #120]	; (800372c <HAL_ADC_IRQHandler+0x2c0>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	2b05      	cmp	r3, #5
 80036ba:	d020      	beq.n	80036fe <HAL_ADC_IRQHandler+0x292>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036c4:	d004      	beq.n	80036d0 <HAL_ADC_IRQHandler+0x264>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a16      	ldr	r2, [pc, #88]	; (8003724 <HAL_ADC_IRQHandler+0x2b8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d106      	bne.n	80036de <HAL_ADC_IRQHandler+0x272>
 80036d0:	4b15      	ldr	r3, [pc, #84]	; (8003728 <HAL_ADC_IRQHandler+0x2bc>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	2b09      	cmp	r3, #9
 80036da:	d010      	beq.n	80036fe <HAL_ADC_IRQHandler+0x292>
 80036dc:	e005      	b.n	80036ea <HAL_ADC_IRQHandler+0x27e>
 80036de:	4b13      	ldr	r3, [pc, #76]	; (800372c <HAL_ADC_IRQHandler+0x2c0>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	2b09      	cmp	r3, #9
 80036e8:	d009      	beq.n	80036fe <HAL_ADC_IRQHandler+0x292>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036f2:	d004      	beq.n	80036fe <HAL_ADC_IRQHandler+0x292>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a0d      	ldr	r2, [pc, #52]	; (8003730 <HAL_ADC_IRQHandler+0x2c4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d104      	bne.n	8003708 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	61bb      	str	r3, [r7, #24]
 8003706:	e018      	b.n	800373a <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003710:	d004      	beq.n	800371c <HAL_ADC_IRQHandler+0x2b0>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a03      	ldr	r2, [pc, #12]	; (8003724 <HAL_ADC_IRQHandler+0x2b8>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d10b      	bne.n	8003734 <HAL_ADC_IRQHandler+0x2c8>
 800371c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003720:	e009      	b.n	8003736 <HAL_ADC_IRQHandler+0x2ca>
 8003722:	bf00      	nop
 8003724:	50000100 	.word	0x50000100
 8003728:	50000300 	.word	0x50000300
 800372c:	50000700 	.word	0x50000700
 8003730:	50000400 	.word	0x50000400
 8003734:	4b92      	ldr	r3, [pc, #584]	; (8003980 <HAL_ADC_IRQHandler+0x514>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003740:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003744:	2b00      	cmp	r3, #0
 8003746:	f040 80b0 	bne.w	80038aa <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00d      	beq.n	8003770 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800375e:	2b00      	cmp	r3, #0
 8003760:	f040 80a3 	bne.w	80038aa <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800376a:	2b00      	cmp	r3, #0
 800376c:	f040 809d 	bne.w	80038aa <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 8097 	beq.w	80038aa <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003784:	d004      	beq.n	8003790 <HAL_ADC_IRQHandler+0x324>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a7e      	ldr	r2, [pc, #504]	; (8003984 <HAL_ADC_IRQHandler+0x518>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d106      	bne.n	800379e <HAL_ADC_IRQHandler+0x332>
 8003790:	4b7d      	ldr	r3, [pc, #500]	; (8003988 <HAL_ADC_IRQHandler+0x51c>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 031f 	and.w	r3, r3, #31
 8003798:	2b00      	cmp	r3, #0
 800379a:	d03e      	beq.n	800381a <HAL_ADC_IRQHandler+0x3ae>
 800379c:	e005      	b.n	80037aa <HAL_ADC_IRQHandler+0x33e>
 800379e:	4b7b      	ldr	r3, [pc, #492]	; (800398c <HAL_ADC_IRQHandler+0x520>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 031f 	and.w	r3, r3, #31
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d037      	beq.n	800381a <HAL_ADC_IRQHandler+0x3ae>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037b2:	d004      	beq.n	80037be <HAL_ADC_IRQHandler+0x352>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a72      	ldr	r2, [pc, #456]	; (8003984 <HAL_ADC_IRQHandler+0x518>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d106      	bne.n	80037cc <HAL_ADC_IRQHandler+0x360>
 80037be:	4b72      	ldr	r3, [pc, #456]	; (8003988 <HAL_ADC_IRQHandler+0x51c>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	2b06      	cmp	r3, #6
 80037c8:	d027      	beq.n	800381a <HAL_ADC_IRQHandler+0x3ae>
 80037ca:	e005      	b.n	80037d8 <HAL_ADC_IRQHandler+0x36c>
 80037cc:	4b6f      	ldr	r3, [pc, #444]	; (800398c <HAL_ADC_IRQHandler+0x520>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 031f 	and.w	r3, r3, #31
 80037d4:	2b06      	cmp	r3, #6
 80037d6:	d020      	beq.n	800381a <HAL_ADC_IRQHandler+0x3ae>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037e0:	d004      	beq.n	80037ec <HAL_ADC_IRQHandler+0x380>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a67      	ldr	r2, [pc, #412]	; (8003984 <HAL_ADC_IRQHandler+0x518>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d106      	bne.n	80037fa <HAL_ADC_IRQHandler+0x38e>
 80037ec:	4b66      	ldr	r3, [pc, #408]	; (8003988 <HAL_ADC_IRQHandler+0x51c>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 031f 	and.w	r3, r3, #31
 80037f4:	2b07      	cmp	r3, #7
 80037f6:	d010      	beq.n	800381a <HAL_ADC_IRQHandler+0x3ae>
 80037f8:	e005      	b.n	8003806 <HAL_ADC_IRQHandler+0x39a>
 80037fa:	4b64      	ldr	r3, [pc, #400]	; (800398c <HAL_ADC_IRQHandler+0x520>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 031f 	and.w	r3, r3, #31
 8003802:	2b07      	cmp	r3, #7
 8003804:	d009      	beq.n	800381a <HAL_ADC_IRQHandler+0x3ae>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800380e:	d004      	beq.n	800381a <HAL_ADC_IRQHandler+0x3ae>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a5a      	ldr	r2, [pc, #360]	; (8003980 <HAL_ADC_IRQHandler+0x514>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d104      	bne.n	8003824 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	e00f      	b.n	8003844 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800382c:	d004      	beq.n	8003838 <HAL_ADC_IRQHandler+0x3cc>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a54      	ldr	r2, [pc, #336]	; (8003984 <HAL_ADC_IRQHandler+0x518>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d102      	bne.n	800383e <HAL_ADC_IRQHandler+0x3d2>
 8003838:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800383c:	e000      	b.n	8003840 <HAL_ADC_IRQHandler+0x3d4>
 800383e:	4b50      	ldr	r3, [pc, #320]	; (8003980 <HAL_ADC_IRQHandler+0x514>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d12d      	bne.n	80038aa <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d11a      	bne.n	8003892 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800386a:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d112      	bne.n	80038aa <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	f043 0201 	orr.w	r2, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	641a      	str	r2, [r3, #64]	; 0x40
 8003890:	e00b      	b.n	80038aa <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	f043 0210 	orr.w	r2, r3, #16
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	f043 0201 	orr.w	r2, r3, #1
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f8c4 	bl	8003a38 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2260      	movs	r2, #96	; 0x60
 80038b6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d011      	beq.n	80038e6 <HAL_ADC_IRQHandler+0x47a>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00c      	beq.n	80038e6 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff fa49 	bl	8002d70 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2280      	movs	r2, #128	; 0x80
 80038e4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d012      	beq.n	8003916 <HAL_ADC_IRQHandler+0x4aa>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00d      	beq.n	8003916 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f8aa 	bl	8003a60 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003914:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800391c:	2b00      	cmp	r3, #0
 800391e:	d012      	beq.n	8003946 <HAL_ADC_IRQHandler+0x4da>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00d      	beq.n	8003946 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f89c 	bl	8003a74 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003944:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f003 0310 	and.w	r3, r3, #16
 800394c:	2b00      	cmp	r3, #0
 800394e:	d04f      	beq.n	80039f0 <HAL_ADC_IRQHandler+0x584>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f003 0310 	and.w	r3, r3, #16
 8003956:	2b00      	cmp	r3, #0
 8003958:	d04a      	beq.n	80039f0 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395e:	2b01      	cmp	r3, #1
 8003960:	d102      	bne.n	8003968 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8003962:	2301      	movs	r3, #1
 8003964:	61fb      	str	r3, [r7, #28]
 8003966:	e02d      	b.n	80039c4 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003970:	d004      	beq.n	800397c <HAL_ADC_IRQHandler+0x510>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a03      	ldr	r2, [pc, #12]	; (8003984 <HAL_ADC_IRQHandler+0x518>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d109      	bne.n	8003990 <HAL_ADC_IRQHandler+0x524>
 800397c:	4b02      	ldr	r3, [pc, #8]	; (8003988 <HAL_ADC_IRQHandler+0x51c>)
 800397e:	e008      	b.n	8003992 <HAL_ADC_IRQHandler+0x526>
 8003980:	50000400 	.word	0x50000400
 8003984:	50000100 	.word	0x50000100
 8003988:	50000300 	.word	0x50000300
 800398c:	50000700 	.word	0x50000700
 8003990:	4b28      	ldr	r3, [pc, #160]	; (8003a34 <HAL_ADC_IRQHandler+0x5c8>)
 8003992:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 031f 	and.w	r3, r3, #31
 800399c:	2b00      	cmp	r3, #0
 800399e:	d109      	bne.n	80039b4 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d10a      	bne.n	80039c4 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80039ae:	2301      	movs	r3, #1
 80039b0:	61fb      	str	r3, [r7, #28]
 80039b2:	e007      	b.n	80039c4 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80039c0:	2301      	movs	r3, #1
 80039c2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d10e      	bne.n	80039e8 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039da:	f043 0202 	orr.w	r2, r3, #2
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff f9ce 	bl	8002d84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2210      	movs	r2, #16
 80039ee:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d018      	beq.n	8003a2c <HAL_ADC_IRQHandler+0x5c0>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d013      	beq.n	8003a2c <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a14:	f043 0208 	orr.w	r2, r3, #8
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a24:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f810 	bl	8003a4c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8003a2c:	bf00      	nop
 8003a2e:	3720      	adds	r7, #32
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	50000700 	.word	0x50000700

08003a38 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b09b      	sub	sp, #108	; 0x6c
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_ADC_ConfigChannel+0x22>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e2ca      	b.n	8004040 <HAL_ADC_ConfigChannel+0x5b8>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f040 82ae 	bne.w	800401e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d81c      	bhi.n	8003b04 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	4413      	add	r3, r2
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	461a      	mov	r2, r3
 8003ade:	231f      	movs	r3, #31
 8003ae0:	4093      	lsls	r3, r2
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	4019      	ands	r1, r3
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	4413      	add	r3, r2
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	fa00 f203 	lsl.w	r2, r0, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	631a      	str	r2, [r3, #48]	; 0x30
 8003b02:	e063      	b.n	8003bcc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b09      	cmp	r3, #9
 8003b0a:	d81e      	bhi.n	8003b4a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	4413      	add	r3, r2
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	3b1e      	subs	r3, #30
 8003b20:	221f      	movs	r2, #31
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	43db      	mvns	r3, r3
 8003b28:	4019      	ands	r1, r3
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	4413      	add	r3, r2
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	3b1e      	subs	r3, #30
 8003b3c:	fa00 f203 	lsl.w	r2, r0, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	635a      	str	r2, [r3, #52]	; 0x34
 8003b48:	e040      	b.n	8003bcc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b0e      	cmp	r3, #14
 8003b50:	d81e      	bhi.n	8003b90 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	4413      	add	r3, r2
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	3b3c      	subs	r3, #60	; 0x3c
 8003b66:	221f      	movs	r2, #31
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	4019      	ands	r1, r3
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	4413      	add	r3, r2
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	3b3c      	subs	r3, #60	; 0x3c
 8003b82:	fa00 f203 	lsl.w	r2, r0, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	639a      	str	r2, [r3, #56]	; 0x38
 8003b8e:	e01d      	b.n	8003bcc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	4413      	add	r3, r2
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	3b5a      	subs	r3, #90	; 0x5a
 8003ba4:	221f      	movs	r2, #31
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	43db      	mvns	r3, r3
 8003bac:	4019      	ands	r1, r3
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	6818      	ldr	r0, [r3, #0]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	4413      	add	r3, r2
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	3b5a      	subs	r3, #90	; 0x5a
 8003bc0:	fa00 f203 	lsl.w	r2, r0, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f040 80e5 	bne.w	8003da6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b09      	cmp	r3, #9
 8003be2:	d91c      	bls.n	8003c1e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6999      	ldr	r1, [r3, #24]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3b1e      	subs	r3, #30
 8003bf6:	2207      	movs	r2, #7
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	4019      	ands	r1, r3
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	6898      	ldr	r0, [r3, #8]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	4413      	add	r3, r2
 8003c0e:	3b1e      	subs	r3, #30
 8003c10:	fa00 f203 	lsl.w	r2, r0, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	619a      	str	r2, [r3, #24]
 8003c1c:	e019      	b.n	8003c52 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6959      	ldr	r1, [r3, #20]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	4413      	add	r3, r2
 8003c2e:	2207      	movs	r2, #7
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	43db      	mvns	r3, r3
 8003c36:	4019      	ands	r1, r3
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	6898      	ldr	r0, [r3, #8]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	4613      	mov	r3, r2
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	4413      	add	r3, r2
 8003c46:	fa00 f203 	lsl.w	r2, r0, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	08db      	lsrs	r3, r3, #3
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d84f      	bhi.n	8003d14 <HAL_ADC_ConfigChannel+0x28c>
 8003c74:	a201      	add	r2, pc, #4	; (adr r2, 8003c7c <HAL_ADC_ConfigChannel+0x1f4>)
 8003c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7a:	bf00      	nop
 8003c7c:	08003c8d 	.word	0x08003c8d
 8003c80:	08003caf 	.word	0x08003caf
 8003c84:	08003cd1 	.word	0x08003cd1
 8003c88:	08003cf3 	.word	0x08003cf3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c92:	4b9a      	ldr	r3, [pc, #616]	; (8003efc <HAL_ADC_ConfigChannel+0x474>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	6812      	ldr	r2, [r2, #0]
 8003c9a:	0691      	lsls	r1, r2, #26
 8003c9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003caa:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003cac:	e07e      	b.n	8003dac <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003cb4:	4b91      	ldr	r3, [pc, #580]	; (8003efc <HAL_ADC_ConfigChannel+0x474>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	6812      	ldr	r2, [r2, #0]
 8003cbc:	0691      	lsls	r1, r2, #26
 8003cbe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003ccc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003cce:	e06d      	b.n	8003dac <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003cd6:	4b89      	ldr	r3, [pc, #548]	; (8003efc <HAL_ADC_ConfigChannel+0x474>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	6812      	ldr	r2, [r2, #0]
 8003cde:	0691      	lsls	r1, r2, #26
 8003ce0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003cee:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003cf0:	e05c      	b.n	8003dac <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003cf8:	4b80      	ldr	r3, [pc, #512]	; (8003efc <HAL_ADC_ConfigChannel+0x474>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	6812      	ldr	r2, [r2, #0]
 8003d00:	0691      	lsls	r1, r2, #26
 8003d02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d04:	430a      	orrs	r2, r1
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003d10:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003d12:	e04b      	b.n	8003dac <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	069b      	lsls	r3, r3, #26
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d107      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003d36:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	069b      	lsls	r3, r3, #26
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d107      	bne.n	8003d5c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003d5a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	069b      	lsls	r3, r3, #26
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d107      	bne.n	8003d80 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003d7e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	069b      	lsls	r3, r3, #26
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d10a      	bne.n	8003daa <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003da2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003da4:	e001      	b.n	8003daa <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003da6:	bf00      	nop
 8003da8:	e000      	b.n	8003dac <HAL_ADC_ConfigChannel+0x324>
      break;
 8003daa:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d108      	bne.n	8003dcc <HAL_ADC_ConfigChannel+0x344>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d101      	bne.n	8003dcc <HAL_ADC_ConfigChannel+0x344>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <HAL_ADC_ConfigChannel+0x346>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f040 8130 	bne.w	8004034 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d00f      	beq.n	8003dfc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2201      	movs	r2, #1
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	43da      	mvns	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	400a      	ands	r2, r1
 8003df6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003dfa:	e049      	b.n	8003e90 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	409a      	lsls	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b09      	cmp	r3, #9
 8003e1c:	d91c      	bls.n	8003e58 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6999      	ldr	r1, [r3, #24]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	4413      	add	r3, r2
 8003e2e:	3b1b      	subs	r3, #27
 8003e30:	2207      	movs	r2, #7
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	4019      	ands	r1, r3
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	6898      	ldr	r0, [r3, #8]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4613      	mov	r3, r2
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	4413      	add	r3, r2
 8003e48:	3b1b      	subs	r3, #27
 8003e4a:	fa00 f203 	lsl.w	r2, r0, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	619a      	str	r2, [r3, #24]
 8003e56:	e01b      	b.n	8003e90 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6959      	ldr	r1, [r3, #20]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	4613      	mov	r3, r2
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	4413      	add	r3, r2
 8003e6a:	2207      	movs	r2, #7
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	43db      	mvns	r3, r3
 8003e72:	4019      	ands	r1, r3
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	6898      	ldr	r0, [r3, #8]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	4613      	mov	r3, r2
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	4413      	add	r3, r2
 8003e84:	fa00 f203 	lsl.w	r2, r0, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e98:	d004      	beq.n	8003ea4 <HAL_ADC_ConfigChannel+0x41c>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a18      	ldr	r2, [pc, #96]	; (8003f00 <HAL_ADC_ConfigChannel+0x478>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d101      	bne.n	8003ea8 <HAL_ADC_ConfigChannel+0x420>
 8003ea4:	4b17      	ldr	r3, [pc, #92]	; (8003f04 <HAL_ADC_ConfigChannel+0x47c>)
 8003ea6:	e000      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x422>
 8003ea8:	4b17      	ldr	r3, [pc, #92]	; (8003f08 <HAL_ADC_ConfigChannel+0x480>)
 8003eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b10      	cmp	r3, #16
 8003eb2:	d105      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d015      	beq.n	8003eec <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003ec4:	2b11      	cmp	r3, #17
 8003ec6:	d105      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003ec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00b      	beq.n	8003eec <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003ed8:	2b12      	cmp	r3, #18
 8003eda:	f040 80ab 	bne.w	8004034 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f040 80a4 	bne.w	8004034 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ef4:	d10a      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x484>
 8003ef6:	4b02      	ldr	r3, [pc, #8]	; (8003f00 <HAL_ADC_ConfigChannel+0x478>)
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	e022      	b.n	8003f42 <HAL_ADC_ConfigChannel+0x4ba>
 8003efc:	83fff000 	.word	0x83fff000
 8003f00:	50000100 	.word	0x50000100
 8003f04:	50000300 	.word	0x50000300
 8003f08:	50000700 	.word	0x50000700
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a4e      	ldr	r2, [pc, #312]	; (800404c <HAL_ADC_ConfigChannel+0x5c4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d103      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x496>
 8003f16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	e011      	b.n	8003f42 <HAL_ADC_ConfigChannel+0x4ba>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a4b      	ldr	r2, [pc, #300]	; (8004050 <HAL_ADC_ConfigChannel+0x5c8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d102      	bne.n	8003f2e <HAL_ADC_ConfigChannel+0x4a6>
 8003f28:	4b4a      	ldr	r3, [pc, #296]	; (8004054 <HAL_ADC_ConfigChannel+0x5cc>)
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	e009      	b.n	8003f42 <HAL_ADC_ConfigChannel+0x4ba>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a48      	ldr	r2, [pc, #288]	; (8004054 <HAL_ADC_ConfigChannel+0x5cc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d102      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x4b6>
 8003f38:	4b45      	ldr	r3, [pc, #276]	; (8004050 <HAL_ADC_ConfigChannel+0x5c8>)
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	e001      	b.n	8003f42 <HAL_ADC_ConfigChannel+0x4ba>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d108      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x4da>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d101      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x4da>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <HAL_ADC_ConfigChannel+0x4dc>
 8003f62:	2300      	movs	r3, #0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d150      	bne.n	800400a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003f68:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d010      	beq.n	8003f90 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d107      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x502>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x502>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x504>
 8003f8a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d13c      	bne.n	800400a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b10      	cmp	r3, #16
 8003f96:	d11d      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x54c>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fa0:	d118      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003fa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003faa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fac:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003fae:	4b2a      	ldr	r3, [pc, #168]	; (8004058 <HAL_ADC_ConfigChannel+0x5d0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a2a      	ldr	r2, [pc, #168]	; (800405c <HAL_ADC_ConfigChannel+0x5d4>)
 8003fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb8:	0c9a      	lsrs	r2, r3, #18
 8003fba:	4613      	mov	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003fc4:	e002      	b.n	8003fcc <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f9      	bne.n	8003fc6 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003fd2:	e02e      	b.n	8004032 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b11      	cmp	r3, #17
 8003fda:	d10b      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x56c>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fe4:	d106      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ff0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003ff2:	e01e      	b.n	8004032 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b12      	cmp	r3, #18
 8003ffa:	d11a      	bne.n	8004032 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003ffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004006:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004008:	e013      	b.n	8004032 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	f043 0220 	orr.w	r2, r3, #32
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800401c:	e00a      	b.n	8004034 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f043 0220 	orr.w	r2, r3, #32
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004030:	e000      	b.n	8004034 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004032:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800403c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004040:	4618      	mov	r0, r3
 8004042:	376c      	adds	r7, #108	; 0x6c
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	50000100 	.word	0x50000100
 8004050:	50000400 	.word	0x50000400
 8004054:	50000500 	.word	0x50000500
 8004058:	20000050 	.word	0x20000050
 800405c:	431bde83 	.word	0x431bde83

08004060 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004060:	b480      	push	{r7}
 8004062:	b099      	sub	sp, #100	; 0x64
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800406a:	2300      	movs	r3, #0
 800406c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004078:	d102      	bne.n	8004080 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800407a:	4b6d      	ldr	r3, [pc, #436]	; (8004230 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800407c:	60bb      	str	r3, [r7, #8]
 800407e:	e01a      	b.n	80040b6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a6a      	ldr	r2, [pc, #424]	; (8004230 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d103      	bne.n	8004092 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800408a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800408e:	60bb      	str	r3, [r7, #8]
 8004090:	e011      	b.n	80040b6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a67      	ldr	r2, [pc, #412]	; (8004234 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d102      	bne.n	80040a2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800409c:	4b66      	ldr	r3, [pc, #408]	; (8004238 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800409e:	60bb      	str	r3, [r7, #8]
 80040a0:	e009      	b.n	80040b6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a64      	ldr	r2, [pc, #400]	; (8004238 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d102      	bne.n	80040b2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80040ac:	4b61      	ldr	r3, [pc, #388]	; (8004234 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80040ae:	60bb      	str	r3, [r7, #8]
 80040b0:	e001      	b.n	80040b6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80040b2:	2300      	movs	r3, #0
 80040b4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0b0      	b.n	8004222 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e0a9      	b.n	8004222 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f040 808d 	bne.w	8004200 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f040 8086 	bne.w	8004200 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040fc:	d004      	beq.n	8004108 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a4b      	ldr	r2, [pc, #300]	; (8004230 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d101      	bne.n	800410c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004108:	4b4c      	ldr	r3, [pc, #304]	; (800423c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800410a:	e000      	b.n	800410e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800410c:	4b4c      	ldr	r3, [pc, #304]	; (8004240 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800410e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d040      	beq.n	800419a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004118:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	6859      	ldr	r1, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800412a:	035b      	lsls	r3, r3, #13
 800412c:	430b      	orrs	r3, r1
 800412e:	431a      	orrs	r2, r3
 8004130:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004132:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	2b01      	cmp	r3, #1
 8004140:	d108      	bne.n	8004154 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004150:	2301      	movs	r3, #1
 8004152:	e000      	b.n	8004156 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8004154:	2300      	movs	r3, #0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d15c      	bne.n	8004214 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	2b01      	cmp	r3, #1
 8004164:	d107      	bne.n	8004176 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b01      	cmp	r3, #1
 8004170:	d101      	bne.n	8004176 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004172:	2301      	movs	r3, #1
 8004174:	e000      	b.n	8004178 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8004176:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004178:	2b00      	cmp	r3, #0
 800417a:	d14b      	bne.n	8004214 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800417c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004184:	f023 030f 	bic.w	r3, r3, #15
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	6811      	ldr	r1, [r2, #0]
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	6892      	ldr	r2, [r2, #8]
 8004190:	430a      	orrs	r2, r1
 8004192:	431a      	orrs	r2, r3
 8004194:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004196:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004198:	e03c      	b.n	8004214 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800419a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041a4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 0303 	and.w	r3, r3, #3
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d108      	bne.n	80041c6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d101      	bne.n	80041c6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80041c6:	2300      	movs	r3, #0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d123      	bne.n	8004214 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 0303 	and.w	r3, r3, #3
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d107      	bne.n	80041e8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80041e4:	2301      	movs	r3, #1
 80041e6:	e000      	b.n	80041ea <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80041e8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d112      	bne.n	8004214 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80041ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80041f6:	f023 030f 	bic.w	r3, r3, #15
 80041fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041fc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80041fe:	e009      	b.n	8004214 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	f043 0220 	orr.w	r2, r3, #32
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004212:	e000      	b.n	8004216 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004214:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800421e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8004222:	4618      	mov	r0, r3
 8004224:	3764      	adds	r7, #100	; 0x64
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	50000100 	.word	0x50000100
 8004234:	50000400 	.word	0x50000400
 8004238:	50000500 	.word	0x50000500
 800423c:	50000300 	.word	0x50000300
 8004240:	50000700 	.word	0x50000700

08004244 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	2b01      	cmp	r3, #1
 800425c:	d108      	bne.n	8004270 <ADC_Enable+0x2c>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <ADC_Enable+0x2c>
 800426c:	2301      	movs	r3, #1
 800426e:	e000      	b.n	8004272 <ADC_Enable+0x2e>
 8004270:	2300      	movs	r3, #0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d143      	bne.n	80042fe <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	4b22      	ldr	r3, [pc, #136]	; (8004308 <ADC_Enable+0xc4>)
 800427e:	4013      	ands	r3, r2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00d      	beq.n	80042a0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	f043 0210 	orr.w	r2, r3, #16
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004294:	f043 0201 	orr.w	r2, r3, #1
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e02f      	b.n	8004300 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80042b0:	f7fe fd52 	bl	8002d58 <HAL_GetTick>
 80042b4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80042b6:	e01b      	b.n	80042f0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80042b8:	f7fe fd4e 	bl	8002d58 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d914      	bls.n	80042f0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d00d      	beq.n	80042f0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	f043 0210 	orr.w	r2, r3, #16
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e4:	f043 0201 	orr.w	r2, r3, #1
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e007      	b.n	8004300 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d1dc      	bne.n	80042b8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	8000003f 	.word	0x8000003f

0800430c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	2b01      	cmp	r3, #1
 8004324:	d108      	bne.n	8004338 <ADC_Disable+0x2c>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <ADC_Disable+0x2c>
 8004334:	2301      	movs	r3, #1
 8004336:	e000      	b.n	800433a <ADC_Disable+0x2e>
 8004338:	2300      	movs	r3, #0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d047      	beq.n	80043ce <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 030d 	and.w	r3, r3, #13
 8004348:	2b01      	cmp	r3, #1
 800434a:	d10f      	bne.n	800436c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0202 	orr.w	r2, r2, #2
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2203      	movs	r2, #3
 8004362:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004364:	f7fe fcf8 	bl	8002d58 <HAL_GetTick>
 8004368:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800436a:	e029      	b.n	80043c0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	f043 0210 	orr.w	r2, r3, #16
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437c:	f043 0201 	orr.w	r2, r3, #1
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e023      	b.n	80043d0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004388:	f7fe fce6 	bl	8002d58 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d914      	bls.n	80043c0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d10d      	bne.n	80043c0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	f043 0210 	orr.w	r2, r3, #16
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b4:	f043 0201 	orr.w	r2, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e007      	b.n	80043d0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d0dc      	beq.n	8004388 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 030c 	and.w	r3, r3, #12
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 809b 	beq.w	8004534 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004408:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800440c:	d12a      	bne.n	8004464 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004412:	2b01      	cmp	r3, #1
 8004414:	d126      	bne.n	8004464 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800441a:	2b01      	cmp	r3, #1
 800441c:	d122      	bne.n	8004464 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800441e:	230c      	movs	r3, #12
 8004420:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004422:	e014      	b.n	800444e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	4a46      	ldr	r2, [pc, #280]	; (8004540 <ADC_ConversionStop+0x168>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d90d      	bls.n	8004448 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	f043 0210 	orr.w	r2, r3, #16
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443c:	f043 0201 	orr.w	r2, r3, #1
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e076      	b.n	8004536 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	3301      	adds	r3, #1
 800444c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004458:	2b40      	cmp	r3, #64	; 0x40
 800445a:	d1e3      	bne.n	8004424 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2240      	movs	r2, #64	; 0x40
 8004462:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2b60      	cmp	r3, #96	; 0x60
 8004468:	d015      	beq.n	8004496 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b04      	cmp	r3, #4
 8004476:	d10e      	bne.n	8004496 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004482:	2b00      	cmp	r3, #0
 8004484:	d107      	bne.n	8004496 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 0210 	orr.w	r2, r2, #16
 8004494:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b0c      	cmp	r3, #12
 800449a:	d015      	beq.n	80044c8 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d10e      	bne.n	80044c8 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d107      	bne.n	80044c8 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0220 	orr.w	r2, r2, #32
 80044c6:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2b60      	cmp	r3, #96	; 0x60
 80044cc:	d005      	beq.n	80044da <ADC_ConversionStop+0x102>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b6c      	cmp	r3, #108	; 0x6c
 80044d2:	d105      	bne.n	80044e0 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80044d4:	230c      	movs	r3, #12
 80044d6:	617b      	str	r3, [r7, #20]
        break;
 80044d8:	e005      	b.n	80044e6 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80044da:	2308      	movs	r3, #8
 80044dc:	617b      	str	r3, [r7, #20]
        break;
 80044de:	e002      	b.n	80044e6 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80044e0:	2304      	movs	r3, #4
 80044e2:	617b      	str	r3, [r7, #20]
        break;
 80044e4:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80044e6:	f7fe fc37 	bl	8002d58 <HAL_GetTick>
 80044ea:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80044ec:	e01b      	b.n	8004526 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80044ee:	f7fe fc33 	bl	8002d58 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b0b      	cmp	r3, #11
 80044fa:	d914      	bls.n	8004526 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	4013      	ands	r3, r2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00d      	beq.n	8004526 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	f043 0210 	orr.w	r2, r3, #16
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451a:	f043 0201 	orr.w	r2, r3, #1
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e007      	b.n	8004536 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	4013      	ands	r3, r2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1dc      	bne.n	80044ee <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	000993ff 	.word	0x000993ff

08004544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004554:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <__NVIC_SetPriorityGrouping+0x44>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004560:	4013      	ands	r3, r2
 8004562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800456c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004576:	4a04      	ldr	r2, [pc, #16]	; (8004588 <__NVIC_SetPriorityGrouping+0x44>)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	60d3      	str	r3, [r2, #12]
}
 800457c:	bf00      	nop
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	e000ed00 	.word	0xe000ed00

0800458c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004590:	4b04      	ldr	r3, [pc, #16]	; (80045a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	0a1b      	lsrs	r3, r3, #8
 8004596:	f003 0307 	and.w	r3, r3, #7
}
 800459a:	4618      	mov	r0, r3
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	e000ed00 	.word	0xe000ed00

080045a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	4603      	mov	r3, r0
 80045b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	db0b      	blt.n	80045d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	f003 021f 	and.w	r2, r3, #31
 80045c0:	4907      	ldr	r1, [pc, #28]	; (80045e0 <__NVIC_EnableIRQ+0x38>)
 80045c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	2001      	movs	r0, #1
 80045ca:	fa00 f202 	lsl.w	r2, r0, r2
 80045ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	e000e100 	.word	0xe000e100

080045e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	4603      	mov	r3, r0
 80045ec:	6039      	str	r1, [r7, #0]
 80045ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	db0a      	blt.n	800460e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	490c      	ldr	r1, [pc, #48]	; (8004630 <__NVIC_SetPriority+0x4c>)
 80045fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004602:	0112      	lsls	r2, r2, #4
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	440b      	add	r3, r1
 8004608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800460c:	e00a      	b.n	8004624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	b2da      	uxtb	r2, r3
 8004612:	4908      	ldr	r1, [pc, #32]	; (8004634 <__NVIC_SetPriority+0x50>)
 8004614:	79fb      	ldrb	r3, [r7, #7]
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	3b04      	subs	r3, #4
 800461c:	0112      	lsls	r2, r2, #4
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	440b      	add	r3, r1
 8004622:	761a      	strb	r2, [r3, #24]
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	e000e100 	.word	0xe000e100
 8004634:	e000ed00 	.word	0xe000ed00

08004638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004638:	b480      	push	{r7}
 800463a:	b089      	sub	sp, #36	; 0x24
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f1c3 0307 	rsb	r3, r3, #7
 8004652:	2b04      	cmp	r3, #4
 8004654:	bf28      	it	cs
 8004656:	2304      	movcs	r3, #4
 8004658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	3304      	adds	r3, #4
 800465e:	2b06      	cmp	r3, #6
 8004660:	d902      	bls.n	8004668 <NVIC_EncodePriority+0x30>
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	3b03      	subs	r3, #3
 8004666:	e000      	b.n	800466a <NVIC_EncodePriority+0x32>
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800466c:	f04f 32ff 	mov.w	r2, #4294967295
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	43da      	mvns	r2, r3
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	401a      	ands	r2, r3
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004680:	f04f 31ff 	mov.w	r1, #4294967295
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	fa01 f303 	lsl.w	r3, r1, r3
 800468a:	43d9      	mvns	r1, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004690:	4313      	orrs	r3, r2
         );
}
 8004692:	4618      	mov	r0, r3
 8004694:	3724      	adds	r7, #36	; 0x24
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
	...

080046a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046b0:	d301      	bcc.n	80046b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046b2:	2301      	movs	r3, #1
 80046b4:	e00f      	b.n	80046d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046b6:	4a0a      	ldr	r2, [pc, #40]	; (80046e0 <SysTick_Config+0x40>)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046be:	210f      	movs	r1, #15
 80046c0:	f04f 30ff 	mov.w	r0, #4294967295
 80046c4:	f7ff ff8e 	bl	80045e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046c8:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <SysTick_Config+0x40>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046ce:	4b04      	ldr	r3, [pc, #16]	; (80046e0 <SysTick_Config+0x40>)
 80046d0:	2207      	movs	r2, #7
 80046d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	e000e010 	.word	0xe000e010

080046e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff ff29 	bl	8004544 <__NVIC_SetPriorityGrouping>
}
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b086      	sub	sp, #24
 80046fe:	af00      	add	r7, sp, #0
 8004700:	4603      	mov	r3, r0
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	607a      	str	r2, [r7, #4]
 8004706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800470c:	f7ff ff3e 	bl	800458c <__NVIC_GetPriorityGrouping>
 8004710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	68b9      	ldr	r1, [r7, #8]
 8004716:	6978      	ldr	r0, [r7, #20]
 8004718:	f7ff ff8e 	bl	8004638 <NVIC_EncodePriority>
 800471c:	4602      	mov	r2, r0
 800471e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004722:	4611      	mov	r1, r2
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff ff5d 	bl	80045e4 <__NVIC_SetPriority>
}
 800472a:	bf00      	nop
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	4603      	mov	r3, r0
 800473a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800473c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff ff31 	bl	80045a8 <__NVIC_EnableIRQ>
}
 8004746:	bf00      	nop
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b082      	sub	sp, #8
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7ff ffa2 	bl	80046a0 <SysTick_Config>
 800475c:	4603      	mov	r3, r0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004774:	2b02      	cmp	r3, #2
 8004776:	d008      	beq.n	800478a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2204      	movs	r2, #4
 800477c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e020      	b.n	80047cc <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 020e 	bic.w	r2, r2, #14
 8004798:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0201 	bic.w	r2, r2, #1
 80047a8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b2:	2101      	movs	r1, #1
 80047b4:	fa01 f202 	lsl.w	r2, r1, r2
 80047b8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d005      	beq.n	80047fa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2204      	movs	r2, #4
 80047f2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	73fb      	strb	r3, [r7, #15]
 80047f8:	e027      	b.n	800484a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 020e 	bic.w	r2, r2, #14
 8004808:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0201 	bic.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004822:	2101      	movs	r1, #1
 8004824:	fa01 f202 	lsl.w	r2, r1, r2
 8004828:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	4798      	blx	r3
    } 
  }
  return status;
 800484a:	7bfb      	ldrb	r3, [r7, #15]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800485e:	2300      	movs	r3, #0
 8004860:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004862:	e154      	b.n	8004b0e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	2101      	movs	r1, #1
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	fa01 f303 	lsl.w	r3, r1, r3
 8004870:	4013      	ands	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 8146 	beq.w	8004b08 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f003 0303 	and.w	r3, r3, #3
 8004884:	2b01      	cmp	r3, #1
 8004886:	d005      	beq.n	8004894 <HAL_GPIO_Init+0x40>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d130      	bne.n	80048f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	2203      	movs	r2, #3
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	43db      	mvns	r3, r3
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4013      	ands	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048ca:	2201      	movs	r2, #1
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	fa02 f303 	lsl.w	r3, r2, r3
 80048d2:	43db      	mvns	r3, r3
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4013      	ands	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	091b      	lsrs	r3, r3, #4
 80048e0:	f003 0201 	and.w	r2, r3, #1
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2b03      	cmp	r3, #3
 8004900:	d017      	beq.n	8004932 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	2203      	movs	r2, #3
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	43db      	mvns	r3, r3
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	4013      	ands	r3, r2
 8004918:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d123      	bne.n	8004986 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	08da      	lsrs	r2, r3, #3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3208      	adds	r2, #8
 8004946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800494a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	220f      	movs	r2, #15
 8004956:	fa02 f303 	lsl.w	r3, r2, r3
 800495a:	43db      	mvns	r3, r3
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	4013      	ands	r3, r2
 8004960:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	691a      	ldr	r2, [r3, #16]
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	08da      	lsrs	r2, r3, #3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3208      	adds	r2, #8
 8004980:	6939      	ldr	r1, [r7, #16]
 8004982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	2203      	movs	r2, #3
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	43db      	mvns	r3, r3
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	4013      	ands	r3, r2
 800499c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f003 0203 	and.w	r2, r3, #3
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	fa02 f303 	lsl.w	r3, r2, r3
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 80a0 	beq.w	8004b08 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049c8:	4b58      	ldr	r3, [pc, #352]	; (8004b2c <HAL_GPIO_Init+0x2d8>)
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	4a57      	ldr	r2, [pc, #348]	; (8004b2c <HAL_GPIO_Init+0x2d8>)
 80049ce:	f043 0301 	orr.w	r3, r3, #1
 80049d2:	6193      	str	r3, [r2, #24]
 80049d4:	4b55      	ldr	r3, [pc, #340]	; (8004b2c <HAL_GPIO_Init+0x2d8>)
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	60bb      	str	r3, [r7, #8]
 80049de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80049e0:	4a53      	ldr	r2, [pc, #332]	; (8004b30 <HAL_GPIO_Init+0x2dc>)
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	089b      	lsrs	r3, r3, #2
 80049e6:	3302      	adds	r3, #2
 80049e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f003 0303 	and.w	r3, r3, #3
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	220f      	movs	r2, #15
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	43db      	mvns	r3, r3
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	4013      	ands	r3, r2
 8004a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a0a:	d019      	beq.n	8004a40 <HAL_GPIO_Init+0x1ec>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a49      	ldr	r2, [pc, #292]	; (8004b34 <HAL_GPIO_Init+0x2e0>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d013      	beq.n	8004a3c <HAL_GPIO_Init+0x1e8>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a48      	ldr	r2, [pc, #288]	; (8004b38 <HAL_GPIO_Init+0x2e4>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00d      	beq.n	8004a38 <HAL_GPIO_Init+0x1e4>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a47      	ldr	r2, [pc, #284]	; (8004b3c <HAL_GPIO_Init+0x2e8>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d007      	beq.n	8004a34 <HAL_GPIO_Init+0x1e0>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a46      	ldr	r2, [pc, #280]	; (8004b40 <HAL_GPIO_Init+0x2ec>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d101      	bne.n	8004a30 <HAL_GPIO_Init+0x1dc>
 8004a2c:	2304      	movs	r3, #4
 8004a2e:	e008      	b.n	8004a42 <HAL_GPIO_Init+0x1ee>
 8004a30:	2305      	movs	r3, #5
 8004a32:	e006      	b.n	8004a42 <HAL_GPIO_Init+0x1ee>
 8004a34:	2303      	movs	r3, #3
 8004a36:	e004      	b.n	8004a42 <HAL_GPIO_Init+0x1ee>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e002      	b.n	8004a42 <HAL_GPIO_Init+0x1ee>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e000      	b.n	8004a42 <HAL_GPIO_Init+0x1ee>
 8004a40:	2300      	movs	r3, #0
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	f002 0203 	and.w	r2, r2, #3
 8004a48:	0092      	lsls	r2, r2, #2
 8004a4a:	4093      	lsls	r3, r2
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a52:	4937      	ldr	r1, [pc, #220]	; (8004b30 <HAL_GPIO_Init+0x2dc>)
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	089b      	lsrs	r3, r3, #2
 8004a58:	3302      	adds	r3, #2
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a60:	4b38      	ldr	r3, [pc, #224]	; (8004b44 <HAL_GPIO_Init+0x2f0>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004a84:	4a2f      	ldr	r2, [pc, #188]	; (8004b44 <HAL_GPIO_Init+0x2f0>)
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a8a:	4b2e      	ldr	r3, [pc, #184]	; (8004b44 <HAL_GPIO_Init+0x2f0>)
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	43db      	mvns	r3, r3
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	4013      	ands	r3, r2
 8004a98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004aae:	4a25      	ldr	r2, [pc, #148]	; (8004b44 <HAL_GPIO_Init+0x2f0>)
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ab4:	4b23      	ldr	r3, [pc, #140]	; (8004b44 <HAL_GPIO_Init+0x2f0>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	43db      	mvns	r3, r3
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004ad8:	4a1a      	ldr	r2, [pc, #104]	; (8004b44 <HAL_GPIO_Init+0x2f0>)
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ade:	4b19      	ldr	r3, [pc, #100]	; (8004b44 <HAL_GPIO_Init+0x2f0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	43db      	mvns	r3, r3
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4013      	ands	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004b02:	4a10      	ldr	r2, [pc, #64]	; (8004b44 <HAL_GPIO_Init+0x2f0>)
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	fa22 f303 	lsr.w	r3, r2, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f47f aea3 	bne.w	8004864 <HAL_GPIO_Init+0x10>
  }
}
 8004b1e:	bf00      	nop
 8004b20:	bf00      	nop
 8004b22:	371c      	adds	r7, #28
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	40010000 	.word	0x40010000
 8004b34:	48000400 	.word	0x48000400
 8004b38:	48000800 	.word	0x48000800
 8004b3c:	48000c00 	.word	0x48000c00
 8004b40:	48001000 	.word	0x48001000
 8004b44:	40010400 	.word	0x40010400

08004b48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	887b      	ldrh	r3, [r7, #2]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b60:	2301      	movs	r3, #1
 8004b62:	73fb      	strb	r3, [r7, #15]
 8004b64:	e001      	b.n	8004b6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b66:	2300      	movs	r3, #0
 8004b68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	807b      	strh	r3, [r7, #2]
 8004b84:	4613      	mov	r3, r2
 8004b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b88:	787b      	ldrb	r3, [r7, #1]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b8e:	887a      	ldrh	r2, [r7, #2]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b94:	e002      	b.n	8004b9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b96:	887a      	ldrh	r2, [r7, #2]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004bb2:	4b08      	ldr	r3, [pc, #32]	; (8004bd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bb4:	695a      	ldr	r2, [r3, #20]
 8004bb6:	88fb      	ldrh	r3, [r7, #6]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d006      	beq.n	8004bcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004bbe:	4a05      	ldr	r2, [pc, #20]	; (8004bd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bc0:	88fb      	ldrh	r3, [r7, #6]
 8004bc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bc4:	88fb      	ldrh	r3, [r7, #6]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fd fa78 	bl	80020bc <HAL_GPIO_EXTI_Callback>
  }
}
 8004bcc:	bf00      	nop
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40010400 	.word	0x40010400

08004bd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e081      	b.n	8004cee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7fd fc0e 	bl	8002420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2224      	movs	r2, #36	; 0x24
 8004c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0201 	bic.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d107      	bne.n	8004c52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c4e:	609a      	str	r2, [r3, #8]
 8004c50:	e006      	b.n	8004c60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004c5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d104      	bne.n	8004c72 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6812      	ldr	r2, [r2, #0]
 8004c7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691a      	ldr	r2, [r3, #16]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69d9      	ldr	r1, [r3, #28]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1a      	ldr	r2, [r3, #32]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0201 	orr.w	r2, r2, #1
 8004cce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b20      	cmp	r3, #32
 8004d0a:	d138      	bne.n	8004d7e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d101      	bne.n	8004d1a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d16:	2302      	movs	r3, #2
 8004d18:	e032      	b.n	8004d80 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2224      	movs	r2, #36	; 0x24
 8004d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0201 	bic.w	r2, r2, #1
 8004d38:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d48:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6819      	ldr	r1, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f042 0201 	orr.w	r2, r2, #1
 8004d68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	e000      	b.n	8004d80 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d7e:	2302      	movs	r3, #2
  }
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	d139      	bne.n	8004e16 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e033      	b.n	8004e18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2224      	movs	r2, #36	; 0x24
 8004dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0201 	bic.w	r2, r2, #1
 8004dce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004dde:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	021b      	lsls	r3, r3, #8
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f042 0201 	orr.w	r2, r2, #1
 8004e00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	e000      	b.n	8004e18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e16:	2302      	movs	r3, #2
  }
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e26:	b08b      	sub	sp, #44	; 0x2c
 8004e28:	af06      	add	r7, sp, #24
 8004e2a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e0c4      	b.n	8004fc0 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fd fc28 	bl	80026a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2203      	movs	r2, #3
 8004e54:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f004 fb5b 	bl	8009518 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e62:	2300      	movs	r3, #0
 8004e64:	73fb      	strb	r3, [r7, #15]
 8004e66:	e040      	b.n	8004eea <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	4613      	mov	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	440b      	add	r3, r1
 8004e78:	3301      	adds	r3, #1
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e7e:	7bfb      	ldrb	r3, [r7, #15]
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	4613      	mov	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	440b      	add	r3, r1
 8004e8e:	7bfa      	ldrb	r2, [r7, #15]
 8004e90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e92:	7bfb      	ldrb	r3, [r7, #15]
 8004e94:	6879      	ldr	r1, [r7, #4]
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	440b      	add	r3, r1
 8004ea2:	3303      	adds	r3, #3
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ea8:	7bfa      	ldrb	r2, [r7, #15]
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	440b      	add	r3, r1
 8004eb6:	3338      	adds	r3, #56	; 0x38
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ebc:	7bfa      	ldrb	r2, [r7, #15]
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	00db      	lsls	r3, r3, #3
 8004ec8:	440b      	add	r3, r1
 8004eca:	333c      	adds	r3, #60	; 0x3c
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ed0:	7bfa      	ldrb	r2, [r7, #15]
 8004ed2:	6879      	ldr	r1, [r7, #4]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	440b      	add	r3, r1
 8004ede:	3340      	adds	r3, #64	; 0x40
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	73fb      	strb	r3, [r7, #15]
 8004eea:	7bfa      	ldrb	r2, [r7, #15]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d3b9      	bcc.n	8004e68 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	73fb      	strb	r3, [r7, #15]
 8004ef8:	e044      	b.n	8004f84 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004efa:	7bfa      	ldrb	r2, [r7, #15]
 8004efc:	6879      	ldr	r1, [r7, #4]
 8004efe:	4613      	mov	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	440b      	add	r3, r1
 8004f08:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f10:	7bfa      	ldrb	r2, [r7, #15]
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	440b      	add	r3, r1
 8004f1e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f22:	7bfa      	ldrb	r2, [r7, #15]
 8004f24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f26:	7bfa      	ldrb	r2, [r7, #15]
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	440b      	add	r3, r1
 8004f34:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004f38:	2200      	movs	r2, #0
 8004f3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f3c:	7bfa      	ldrb	r2, [r7, #15]
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	4613      	mov	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	440b      	add	r3, r1
 8004f4a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f52:	7bfa      	ldrb	r2, [r7, #15]
 8004f54:	6879      	ldr	r1, [r7, #4]
 8004f56:	4613      	mov	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	440b      	add	r3, r1
 8004f60:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f68:	7bfa      	ldrb	r2, [r7, #15]
 8004f6a:	6879      	ldr	r1, [r7, #4]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	440b      	add	r3, r1
 8004f76:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
 8004f80:	3301      	adds	r3, #1
 8004f82:	73fb      	strb	r3, [r7, #15]
 8004f84:	7bfa      	ldrb	r2, [r7, #15]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d3b5      	bcc.n	8004efa <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	603b      	str	r3, [r7, #0]
 8004f94:	687e      	ldr	r6, [r7, #4]
 8004f96:	466d      	mov	r5, sp
 8004f98:	f106 0410 	add.w	r4, r6, #16
 8004f9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	602b      	str	r3, [r5, #0]
 8004fa4:	1d33      	adds	r3, r6, #4
 8004fa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fa8:	6838      	ldr	r0, [r7, #0]
 8004faa:	f004 fad0 	bl	800954e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fd8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d102      	bne.n	8004fee <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	f001 b823 	b.w	8006034 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ff2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 817d 	beq.w	80052fe <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005004:	4bbc      	ldr	r3, [pc, #752]	; (80052f8 <HAL_RCC_OscConfig+0x330>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f003 030c 	and.w	r3, r3, #12
 800500c:	2b04      	cmp	r3, #4
 800500e:	d00c      	beq.n	800502a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005010:	4bb9      	ldr	r3, [pc, #740]	; (80052f8 <HAL_RCC_OscConfig+0x330>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f003 030c 	and.w	r3, r3, #12
 8005018:	2b08      	cmp	r3, #8
 800501a:	d15c      	bne.n	80050d6 <HAL_RCC_OscConfig+0x10e>
 800501c:	4bb6      	ldr	r3, [pc, #728]	; (80052f8 <HAL_RCC_OscConfig+0x330>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005028:	d155      	bne.n	80050d6 <HAL_RCC_OscConfig+0x10e>
 800502a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800502e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005032:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005036:	fa93 f3a3 	rbit	r3, r3
 800503a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800503e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005042:	fab3 f383 	clz	r3, r3
 8005046:	b2db      	uxtb	r3, r3
 8005048:	095b      	lsrs	r3, r3, #5
 800504a:	b2db      	uxtb	r3, r3
 800504c:	f043 0301 	orr.w	r3, r3, #1
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b01      	cmp	r3, #1
 8005054:	d102      	bne.n	800505c <HAL_RCC_OscConfig+0x94>
 8005056:	4ba8      	ldr	r3, [pc, #672]	; (80052f8 <HAL_RCC_OscConfig+0x330>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	e015      	b.n	8005088 <HAL_RCC_OscConfig+0xc0>
 800505c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005060:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005064:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005068:	fa93 f3a3 	rbit	r3, r3
 800506c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005070:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005074:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005078:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800507c:	fa93 f3a3 	rbit	r3, r3
 8005080:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005084:	4b9c      	ldr	r3, [pc, #624]	; (80052f8 <HAL_RCC_OscConfig+0x330>)
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800508c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005090:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005094:	fa92 f2a2 	rbit	r2, r2
 8005098:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800509c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80050a0:	fab2 f282 	clz	r2, r2
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	f042 0220 	orr.w	r2, r2, #32
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	f002 021f 	and.w	r2, r2, #31
 80050b0:	2101      	movs	r1, #1
 80050b2:	fa01 f202 	lsl.w	r2, r1, r2
 80050b6:	4013      	ands	r3, r2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 811f 	beq.w	80052fc <HAL_RCC_OscConfig+0x334>
 80050be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f040 8116 	bne.w	80052fc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	f000 bfaf 	b.w	8006034 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e6:	d106      	bne.n	80050f6 <HAL_RCC_OscConfig+0x12e>
 80050e8:	4b83      	ldr	r3, [pc, #524]	; (80052f8 <HAL_RCC_OscConfig+0x330>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a82      	ldr	r2, [pc, #520]	; (80052f8 <HAL_RCC_OscConfig+0x330>)
 80050ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f2:	6013      	str	r3, [r2, #0]
 80050f4:	e036      	b.n	8005164 <HAL_RCC_OscConfig+0x19c>
 80050f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10c      	bne.n	8005120 <HAL_RCC_OscConfig+0x158>
 8005106:	4b7c      	ldr	r3, [pc, #496]	; (80052f8 <HAL_RCC_OscConfig+0x330>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a7b      	ldr	r2, [pc, #492]	; (80052f8 <HAL_RCC_OscConfig+0x330>)
 800510c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005110:	6013      	str	r3, [r2, #0]
 8005112:	4b79      	ldr	r3, [pc, #484]	; (80052f8 <HAL_RCC_OscConfig+0x330>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a78      	ldr	r2, [pc, #480]	; (80052f8 <HAL_RCC_OscConfig+0x330>)
 8005118:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	e021      	b.n	8005164 <HAL_RCC_OscConfig+0x19c>
 8005120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005124:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005130:	d10c      	bne.n	800514c <HAL_RCC_OscConfig+0x184>
 8005132:	4b71      	ldr	r3, [pc, #452]	; (80052f8 <HAL_RCC_OscConfig+0x330>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a70      	ldr	r2, [pc, #448]	; (80052f8 <HAL_RCC_OscConfig+0x330>)
 8005138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800513c:	6013      	str	r3, [r2, #0]
 800513e:	4b6e      	ldr	r3, [pc, #440]	; (80052f8 <HAL_RCC_OscConfig+0x330>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a6d      	ldr	r2, [pc, #436]	; (80052f8 <HAL_RCC_OscConfig+0x330>)
 8005144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005148:	6013      	str	r3, [r2, #0]
 800514a:	e00b      	b.n	8005164 <HAL_RCC_OscConfig+0x19c>
 800514c:	4b6a      	ldr	r3, [pc, #424]	; (80052f8 <HAL_RCC_OscConfig+0x330>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a69      	ldr	r2, [pc, #420]	; (80052f8 <HAL_RCC_OscConfig+0x330>)
 8005152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005156:	6013      	str	r3, [r2, #0]
 8005158:	4b67      	ldr	r3, [pc, #412]	; (80052f8 <HAL_RCC_OscConfig+0x330>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a66      	ldr	r2, [pc, #408]	; (80052f8 <HAL_RCC_OscConfig+0x330>)
 800515e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005162:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005164:	4b64      	ldr	r3, [pc, #400]	; (80052f8 <HAL_RCC_OscConfig+0x330>)
 8005166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005168:	f023 020f 	bic.w	r2, r3, #15
 800516c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005170:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	495f      	ldr	r1, [pc, #380]	; (80052f8 <HAL_RCC_OscConfig+0x330>)
 800517a:	4313      	orrs	r3, r2
 800517c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800517e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005182:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d059      	beq.n	8005242 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800518e:	f7fd fde3 	bl	8002d58 <HAL_GetTick>
 8005192:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005196:	e00a      	b.n	80051ae <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005198:	f7fd fdde 	bl	8002d58 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b64      	cmp	r3, #100	; 0x64
 80051a6:	d902      	bls.n	80051ae <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	f000 bf43 	b.w	8006034 <HAL_RCC_OscConfig+0x106c>
 80051ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051b2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80051ba:	fa93 f3a3 	rbit	r3, r3
 80051be:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80051c2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051c6:	fab3 f383 	clz	r3, r3
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	095b      	lsrs	r3, r3, #5
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	f043 0301 	orr.w	r3, r3, #1
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d102      	bne.n	80051e0 <HAL_RCC_OscConfig+0x218>
 80051da:	4b47      	ldr	r3, [pc, #284]	; (80052f8 <HAL_RCC_OscConfig+0x330>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	e015      	b.n	800520c <HAL_RCC_OscConfig+0x244>
 80051e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051e4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80051ec:	fa93 f3a3 	rbit	r3, r3
 80051f0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80051f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051f8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80051fc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005200:	fa93 f3a3 	rbit	r3, r3
 8005204:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005208:	4b3b      	ldr	r3, [pc, #236]	; (80052f8 <HAL_RCC_OscConfig+0x330>)
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005210:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005214:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005218:	fa92 f2a2 	rbit	r2, r2
 800521c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005220:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005224:	fab2 f282 	clz	r2, r2
 8005228:	b2d2      	uxtb	r2, r2
 800522a:	f042 0220 	orr.w	r2, r2, #32
 800522e:	b2d2      	uxtb	r2, r2
 8005230:	f002 021f 	and.w	r2, r2, #31
 8005234:	2101      	movs	r1, #1
 8005236:	fa01 f202 	lsl.w	r2, r1, r2
 800523a:	4013      	ands	r3, r2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d0ab      	beq.n	8005198 <HAL_RCC_OscConfig+0x1d0>
 8005240:	e05d      	b.n	80052fe <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005242:	f7fd fd89 	bl	8002d58 <HAL_GetTick>
 8005246:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800524a:	e00a      	b.n	8005262 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800524c:	f7fd fd84 	bl	8002d58 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b64      	cmp	r3, #100	; 0x64
 800525a:	d902      	bls.n	8005262 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	f000 bee9 	b.w	8006034 <HAL_RCC_OscConfig+0x106c>
 8005262:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005266:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800526a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800526e:	fa93 f3a3 	rbit	r3, r3
 8005272:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005276:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800527a:	fab3 f383 	clz	r3, r3
 800527e:	b2db      	uxtb	r3, r3
 8005280:	095b      	lsrs	r3, r3, #5
 8005282:	b2db      	uxtb	r3, r3
 8005284:	f043 0301 	orr.w	r3, r3, #1
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b01      	cmp	r3, #1
 800528c:	d102      	bne.n	8005294 <HAL_RCC_OscConfig+0x2cc>
 800528e:	4b1a      	ldr	r3, [pc, #104]	; (80052f8 <HAL_RCC_OscConfig+0x330>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	e015      	b.n	80052c0 <HAL_RCC_OscConfig+0x2f8>
 8005294:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005298:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80052a0:	fa93 f3a3 	rbit	r3, r3
 80052a4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80052a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052ac:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80052b0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80052b4:	fa93 f3a3 	rbit	r3, r3
 80052b8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80052bc:	4b0e      	ldr	r3, [pc, #56]	; (80052f8 <HAL_RCC_OscConfig+0x330>)
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80052c4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80052c8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80052cc:	fa92 f2a2 	rbit	r2, r2
 80052d0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80052d4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80052d8:	fab2 f282 	clz	r2, r2
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	f042 0220 	orr.w	r2, r2, #32
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	f002 021f 	and.w	r2, r2, #31
 80052e8:	2101      	movs	r1, #1
 80052ea:	fa01 f202 	lsl.w	r2, r1, r2
 80052ee:	4013      	ands	r3, r2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1ab      	bne.n	800524c <HAL_RCC_OscConfig+0x284>
 80052f4:	e003      	b.n	80052fe <HAL_RCC_OscConfig+0x336>
 80052f6:	bf00      	nop
 80052f8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005302:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 817d 	beq.w	800560e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005314:	4ba6      	ldr	r3, [pc, #664]	; (80055b0 <HAL_RCC_OscConfig+0x5e8>)
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f003 030c 	and.w	r3, r3, #12
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00b      	beq.n	8005338 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005320:	4ba3      	ldr	r3, [pc, #652]	; (80055b0 <HAL_RCC_OscConfig+0x5e8>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f003 030c 	and.w	r3, r3, #12
 8005328:	2b08      	cmp	r3, #8
 800532a:	d172      	bne.n	8005412 <HAL_RCC_OscConfig+0x44a>
 800532c:	4ba0      	ldr	r3, [pc, #640]	; (80055b0 <HAL_RCC_OscConfig+0x5e8>)
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d16c      	bne.n	8005412 <HAL_RCC_OscConfig+0x44a>
 8005338:	2302      	movs	r3, #2
 800533a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800533e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005342:	fa93 f3a3 	rbit	r3, r3
 8005346:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800534a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800534e:	fab3 f383 	clz	r3, r3
 8005352:	b2db      	uxtb	r3, r3
 8005354:	095b      	lsrs	r3, r3, #5
 8005356:	b2db      	uxtb	r3, r3
 8005358:	f043 0301 	orr.w	r3, r3, #1
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b01      	cmp	r3, #1
 8005360:	d102      	bne.n	8005368 <HAL_RCC_OscConfig+0x3a0>
 8005362:	4b93      	ldr	r3, [pc, #588]	; (80055b0 <HAL_RCC_OscConfig+0x5e8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	e013      	b.n	8005390 <HAL_RCC_OscConfig+0x3c8>
 8005368:	2302      	movs	r3, #2
 800536a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800536e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005372:	fa93 f3a3 	rbit	r3, r3
 8005376:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800537a:	2302      	movs	r3, #2
 800537c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005380:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005384:	fa93 f3a3 	rbit	r3, r3
 8005388:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800538c:	4b88      	ldr	r3, [pc, #544]	; (80055b0 <HAL_RCC_OscConfig+0x5e8>)
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	2202      	movs	r2, #2
 8005392:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005396:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800539a:	fa92 f2a2 	rbit	r2, r2
 800539e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80053a2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80053a6:	fab2 f282 	clz	r2, r2
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	f042 0220 	orr.w	r2, r2, #32
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	f002 021f 	and.w	r2, r2, #31
 80053b6:	2101      	movs	r1, #1
 80053b8:	fa01 f202 	lsl.w	r2, r1, r2
 80053bc:	4013      	ands	r3, r2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <HAL_RCC_OscConfig+0x410>
 80053c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d002      	beq.n	80053d8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	f000 be2e 	b.w	8006034 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053d8:	4b75      	ldr	r3, [pc, #468]	; (80055b0 <HAL_RCC_OscConfig+0x5e8>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	21f8      	movs	r1, #248	; 0xf8
 80053ee:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80053f6:	fa91 f1a1 	rbit	r1, r1
 80053fa:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80053fe:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005402:	fab1 f181 	clz	r1, r1
 8005406:	b2c9      	uxtb	r1, r1
 8005408:	408b      	lsls	r3, r1
 800540a:	4969      	ldr	r1, [pc, #420]	; (80055b0 <HAL_RCC_OscConfig+0x5e8>)
 800540c:	4313      	orrs	r3, r2
 800540e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005410:	e0fd      	b.n	800560e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005416:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 8088 	beq.w	8005534 <HAL_RCC_OscConfig+0x56c>
 8005424:	2301      	movs	r3, #1
 8005426:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800542a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800542e:	fa93 f3a3 	rbit	r3, r3
 8005432:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005436:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800543a:	fab3 f383 	clz	r3, r3
 800543e:	b2db      	uxtb	r3, r3
 8005440:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005444:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	461a      	mov	r2, r3
 800544c:	2301      	movs	r3, #1
 800544e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005450:	f7fd fc82 	bl	8002d58 <HAL_GetTick>
 8005454:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005458:	e00a      	b.n	8005470 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800545a:	f7fd fc7d 	bl	8002d58 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d902      	bls.n	8005470 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	f000 bde2 	b.w	8006034 <HAL_RCC_OscConfig+0x106c>
 8005470:	2302      	movs	r3, #2
 8005472:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005476:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800547a:	fa93 f3a3 	rbit	r3, r3
 800547e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005482:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005486:	fab3 f383 	clz	r3, r3
 800548a:	b2db      	uxtb	r3, r3
 800548c:	095b      	lsrs	r3, r3, #5
 800548e:	b2db      	uxtb	r3, r3
 8005490:	f043 0301 	orr.w	r3, r3, #1
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b01      	cmp	r3, #1
 8005498:	d102      	bne.n	80054a0 <HAL_RCC_OscConfig+0x4d8>
 800549a:	4b45      	ldr	r3, [pc, #276]	; (80055b0 <HAL_RCC_OscConfig+0x5e8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	e013      	b.n	80054c8 <HAL_RCC_OscConfig+0x500>
 80054a0:	2302      	movs	r3, #2
 80054a2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80054aa:	fa93 f3a3 	rbit	r3, r3
 80054ae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80054b2:	2302      	movs	r3, #2
 80054b4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80054b8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80054bc:	fa93 f3a3 	rbit	r3, r3
 80054c0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80054c4:	4b3a      	ldr	r3, [pc, #232]	; (80055b0 <HAL_RCC_OscConfig+0x5e8>)
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	2202      	movs	r2, #2
 80054ca:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80054ce:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80054d2:	fa92 f2a2 	rbit	r2, r2
 80054d6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80054da:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80054de:	fab2 f282 	clz	r2, r2
 80054e2:	b2d2      	uxtb	r2, r2
 80054e4:	f042 0220 	orr.w	r2, r2, #32
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	f002 021f 	and.w	r2, r2, #31
 80054ee:	2101      	movs	r1, #1
 80054f0:	fa01 f202 	lsl.w	r2, r1, r2
 80054f4:	4013      	ands	r3, r2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d0af      	beq.n	800545a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054fa:	4b2d      	ldr	r3, [pc, #180]	; (80055b0 <HAL_RCC_OscConfig+0x5e8>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005506:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	21f8      	movs	r1, #248	; 0xf8
 8005510:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005514:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005518:	fa91 f1a1 	rbit	r1, r1
 800551c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005520:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005524:	fab1 f181 	clz	r1, r1
 8005528:	b2c9      	uxtb	r1, r1
 800552a:	408b      	lsls	r3, r1
 800552c:	4920      	ldr	r1, [pc, #128]	; (80055b0 <HAL_RCC_OscConfig+0x5e8>)
 800552e:	4313      	orrs	r3, r2
 8005530:	600b      	str	r3, [r1, #0]
 8005532:	e06c      	b.n	800560e <HAL_RCC_OscConfig+0x646>
 8005534:	2301      	movs	r3, #1
 8005536:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800553a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800553e:	fa93 f3a3 	rbit	r3, r3
 8005542:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005546:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800554a:	fab3 f383 	clz	r3, r3
 800554e:	b2db      	uxtb	r3, r3
 8005550:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005554:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	461a      	mov	r2, r3
 800555c:	2300      	movs	r3, #0
 800555e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005560:	f7fd fbfa 	bl	8002d58 <HAL_GetTick>
 8005564:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005568:	e00a      	b.n	8005580 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800556a:	f7fd fbf5 	bl	8002d58 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d902      	bls.n	8005580 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	f000 bd5a 	b.w	8006034 <HAL_RCC_OscConfig+0x106c>
 8005580:	2302      	movs	r3, #2
 8005582:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005586:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800558a:	fa93 f3a3 	rbit	r3, r3
 800558e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005596:	fab3 f383 	clz	r3, r3
 800559a:	b2db      	uxtb	r3, r3
 800559c:	095b      	lsrs	r3, r3, #5
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	f043 0301 	orr.w	r3, r3, #1
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d104      	bne.n	80055b4 <HAL_RCC_OscConfig+0x5ec>
 80055aa:	4b01      	ldr	r3, [pc, #4]	; (80055b0 <HAL_RCC_OscConfig+0x5e8>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	e015      	b.n	80055dc <HAL_RCC_OscConfig+0x614>
 80055b0:	40021000 	.word	0x40021000
 80055b4:	2302      	movs	r3, #2
 80055b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80055be:	fa93 f3a3 	rbit	r3, r3
 80055c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80055c6:	2302      	movs	r3, #2
 80055c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80055cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80055d0:	fa93 f3a3 	rbit	r3, r3
 80055d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80055d8:	4bc8      	ldr	r3, [pc, #800]	; (80058fc <HAL_RCC_OscConfig+0x934>)
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	2202      	movs	r2, #2
 80055de:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80055e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80055e6:	fa92 f2a2 	rbit	r2, r2
 80055ea:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80055ee:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80055f2:	fab2 f282 	clz	r2, r2
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	f042 0220 	orr.w	r2, r2, #32
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	f002 021f 	and.w	r2, r2, #31
 8005602:	2101      	movs	r1, #1
 8005604:	fa01 f202 	lsl.w	r2, r1, r2
 8005608:	4013      	ands	r3, r2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1ad      	bne.n	800556a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800560e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005612:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 8110 	beq.w	8005844 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005628:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d079      	beq.n	8005728 <HAL_RCC_OscConfig+0x760>
 8005634:	2301      	movs	r3, #1
 8005636:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800563a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800563e:	fa93 f3a3 	rbit	r3, r3
 8005642:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005646:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800564a:	fab3 f383 	clz	r3, r3
 800564e:	b2db      	uxtb	r3, r3
 8005650:	461a      	mov	r2, r3
 8005652:	4bab      	ldr	r3, [pc, #684]	; (8005900 <HAL_RCC_OscConfig+0x938>)
 8005654:	4413      	add	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	461a      	mov	r2, r3
 800565a:	2301      	movs	r3, #1
 800565c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800565e:	f7fd fb7b 	bl	8002d58 <HAL_GetTick>
 8005662:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005666:	e00a      	b.n	800567e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005668:	f7fd fb76 	bl	8002d58 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d902      	bls.n	800567e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	f000 bcdb 	b.w	8006034 <HAL_RCC_OscConfig+0x106c>
 800567e:	2302      	movs	r3, #2
 8005680:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005684:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005688:	fa93 f3a3 	rbit	r3, r3
 800568c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005694:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005698:	2202      	movs	r2, #2
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056a0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	fa93 f2a3 	rbit	r2, r3
 80056aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056bc:	2202      	movs	r2, #2
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	fa93 f2a3 	rbit	r2, r3
 80056ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80056d6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056d8:	4b88      	ldr	r3, [pc, #544]	; (80058fc <HAL_RCC_OscConfig+0x934>)
 80056da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80056e4:	2102      	movs	r1, #2
 80056e6:	6019      	str	r1, [r3, #0]
 80056e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	fa93 f1a3 	rbit	r1, r3
 80056f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80056fe:	6019      	str	r1, [r3, #0]
  return result;
 8005700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005704:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	fab3 f383 	clz	r3, r3
 800570e:	b2db      	uxtb	r3, r3
 8005710:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005714:	b2db      	uxtb	r3, r3
 8005716:	f003 031f 	and.w	r3, r3, #31
 800571a:	2101      	movs	r1, #1
 800571c:	fa01 f303 	lsl.w	r3, r1, r3
 8005720:	4013      	ands	r3, r2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0a0      	beq.n	8005668 <HAL_RCC_OscConfig+0x6a0>
 8005726:	e08d      	b.n	8005844 <HAL_RCC_OscConfig+0x87c>
 8005728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800572c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005730:	2201      	movs	r2, #1
 8005732:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005738:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	fa93 f2a3 	rbit	r2, r3
 8005742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005746:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800574a:	601a      	str	r2, [r3, #0]
  return result;
 800574c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005750:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005754:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005756:	fab3 f383 	clz	r3, r3
 800575a:	b2db      	uxtb	r3, r3
 800575c:	461a      	mov	r2, r3
 800575e:	4b68      	ldr	r3, [pc, #416]	; (8005900 <HAL_RCC_OscConfig+0x938>)
 8005760:	4413      	add	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	461a      	mov	r2, r3
 8005766:	2300      	movs	r3, #0
 8005768:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800576a:	f7fd faf5 	bl	8002d58 <HAL_GetTick>
 800576e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005772:	e00a      	b.n	800578a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005774:	f7fd faf0 	bl	8002d58 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2b02      	cmp	r3, #2
 8005782:	d902      	bls.n	800578a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	f000 bc55 	b.w	8006034 <HAL_RCC_OscConfig+0x106c>
 800578a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800578e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005792:	2202      	movs	r2, #2
 8005794:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800579a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	fa93 f2a3 	rbit	r2, r3
 80057a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057a8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057b2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80057b6:	2202      	movs	r2, #2
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	fa93 f2a3 	rbit	r2, r3
 80057c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057da:	2202      	movs	r2, #2
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	fa93 f2a3 	rbit	r2, r3
 80057ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057f0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80057f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057f6:	4b41      	ldr	r3, [pc, #260]	; (80058fc <HAL_RCC_OscConfig+0x934>)
 80057f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057fe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005802:	2102      	movs	r1, #2
 8005804:	6019      	str	r1, [r3, #0]
 8005806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800580a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	fa93 f1a3 	rbit	r1, r3
 8005814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005818:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800581c:	6019      	str	r1, [r3, #0]
  return result;
 800581e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005822:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	fab3 f383 	clz	r3, r3
 800582c:	b2db      	uxtb	r3, r3
 800582e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005832:	b2db      	uxtb	r3, r3
 8005834:	f003 031f 	and.w	r3, r3, #31
 8005838:	2101      	movs	r1, #1
 800583a:	fa01 f303 	lsl.w	r3, r1, r3
 800583e:	4013      	ands	r3, r2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d197      	bne.n	8005774 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005848:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 81a1 	beq.w	8005b9c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800585a:	2300      	movs	r3, #0
 800585c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005860:	4b26      	ldr	r3, [pc, #152]	; (80058fc <HAL_RCC_OscConfig+0x934>)
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d116      	bne.n	800589a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800586c:	4b23      	ldr	r3, [pc, #140]	; (80058fc <HAL_RCC_OscConfig+0x934>)
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	4a22      	ldr	r2, [pc, #136]	; (80058fc <HAL_RCC_OscConfig+0x934>)
 8005872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005876:	61d3      	str	r3, [r2, #28]
 8005878:	4b20      	ldr	r3, [pc, #128]	; (80058fc <HAL_RCC_OscConfig+0x934>)
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005884:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800588e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005892:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005894:	2301      	movs	r3, #1
 8005896:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800589a:	4b1a      	ldr	r3, [pc, #104]	; (8005904 <HAL_RCC_OscConfig+0x93c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d11a      	bne.n	80058dc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058a6:	4b17      	ldr	r3, [pc, #92]	; (8005904 <HAL_RCC_OscConfig+0x93c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a16      	ldr	r2, [pc, #88]	; (8005904 <HAL_RCC_OscConfig+0x93c>)
 80058ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058b2:	f7fd fa51 	bl	8002d58 <HAL_GetTick>
 80058b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ba:	e009      	b.n	80058d0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058bc:	f7fd fa4c 	bl	8002d58 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b64      	cmp	r3, #100	; 0x64
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e3b1      	b.n	8006034 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d0:	4b0c      	ldr	r3, [pc, #48]	; (8005904 <HAL_RCC_OscConfig+0x93c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0ef      	beq.n	80058bc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d10d      	bne.n	8005908 <HAL_RCC_OscConfig+0x940>
 80058ec:	4b03      	ldr	r3, [pc, #12]	; (80058fc <HAL_RCC_OscConfig+0x934>)
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	4a02      	ldr	r2, [pc, #8]	; (80058fc <HAL_RCC_OscConfig+0x934>)
 80058f2:	f043 0301 	orr.w	r3, r3, #1
 80058f6:	6213      	str	r3, [r2, #32]
 80058f8:	e03c      	b.n	8005974 <HAL_RCC_OscConfig+0x9ac>
 80058fa:	bf00      	nop
 80058fc:	40021000 	.word	0x40021000
 8005900:	10908120 	.word	0x10908120
 8005904:	40007000 	.word	0x40007000
 8005908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800590c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10c      	bne.n	8005932 <HAL_RCC_OscConfig+0x96a>
 8005918:	4bc1      	ldr	r3, [pc, #772]	; (8005c20 <HAL_RCC_OscConfig+0xc58>)
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	4ac0      	ldr	r2, [pc, #768]	; (8005c20 <HAL_RCC_OscConfig+0xc58>)
 800591e:	f023 0301 	bic.w	r3, r3, #1
 8005922:	6213      	str	r3, [r2, #32]
 8005924:	4bbe      	ldr	r3, [pc, #760]	; (8005c20 <HAL_RCC_OscConfig+0xc58>)
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	4abd      	ldr	r2, [pc, #756]	; (8005c20 <HAL_RCC_OscConfig+0xc58>)
 800592a:	f023 0304 	bic.w	r3, r3, #4
 800592e:	6213      	str	r3, [r2, #32]
 8005930:	e020      	b.n	8005974 <HAL_RCC_OscConfig+0x9ac>
 8005932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005936:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	2b05      	cmp	r3, #5
 8005940:	d10c      	bne.n	800595c <HAL_RCC_OscConfig+0x994>
 8005942:	4bb7      	ldr	r3, [pc, #732]	; (8005c20 <HAL_RCC_OscConfig+0xc58>)
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	4ab6      	ldr	r2, [pc, #728]	; (8005c20 <HAL_RCC_OscConfig+0xc58>)
 8005948:	f043 0304 	orr.w	r3, r3, #4
 800594c:	6213      	str	r3, [r2, #32]
 800594e:	4bb4      	ldr	r3, [pc, #720]	; (8005c20 <HAL_RCC_OscConfig+0xc58>)
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	4ab3      	ldr	r2, [pc, #716]	; (8005c20 <HAL_RCC_OscConfig+0xc58>)
 8005954:	f043 0301 	orr.w	r3, r3, #1
 8005958:	6213      	str	r3, [r2, #32]
 800595a:	e00b      	b.n	8005974 <HAL_RCC_OscConfig+0x9ac>
 800595c:	4bb0      	ldr	r3, [pc, #704]	; (8005c20 <HAL_RCC_OscConfig+0xc58>)
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	4aaf      	ldr	r2, [pc, #700]	; (8005c20 <HAL_RCC_OscConfig+0xc58>)
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	6213      	str	r3, [r2, #32]
 8005968:	4bad      	ldr	r3, [pc, #692]	; (8005c20 <HAL_RCC_OscConfig+0xc58>)
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	4aac      	ldr	r2, [pc, #688]	; (8005c20 <HAL_RCC_OscConfig+0xc58>)
 800596e:	f023 0304 	bic.w	r3, r3, #4
 8005972:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005978:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 8081 	beq.w	8005a88 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005986:	f7fd f9e7 	bl	8002d58 <HAL_GetTick>
 800598a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800598e:	e00b      	b.n	80059a8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005990:	f7fd f9e2 	bl	8002d58 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d901      	bls.n	80059a8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e345      	b.n	8006034 <HAL_RCC_OscConfig+0x106c>
 80059a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ac:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80059b0:	2202      	movs	r2, #2
 80059b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	fa93 f2a3 	rbit	r2, r3
 80059c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059c6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80059ca:	601a      	str	r2, [r3, #0]
 80059cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059d0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80059d4:	2202      	movs	r2, #2
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	fa93 f2a3 	rbit	r2, r3
 80059e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80059ee:	601a      	str	r2, [r3, #0]
  return result;
 80059f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059f4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80059f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059fa:	fab3 f383 	clz	r3, r3
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	095b      	lsrs	r3, r3, #5
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	f043 0302 	orr.w	r3, r3, #2
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d102      	bne.n	8005a14 <HAL_RCC_OscConfig+0xa4c>
 8005a0e:	4b84      	ldr	r3, [pc, #528]	; (8005c20 <HAL_RCC_OscConfig+0xc58>)
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	e013      	b.n	8005a3c <HAL_RCC_OscConfig+0xa74>
 8005a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a18:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a24:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	fa93 f2a3 	rbit	r2, r3
 8005a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a32:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	4b79      	ldr	r3, [pc, #484]	; (8005c20 <HAL_RCC_OscConfig+0xc58>)
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a40:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005a44:	2102      	movs	r1, #2
 8005a46:	6011      	str	r1, [r2, #0]
 8005a48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a4c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005a50:	6812      	ldr	r2, [r2, #0]
 8005a52:	fa92 f1a2 	rbit	r1, r2
 8005a56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a5a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005a5e:	6011      	str	r1, [r2, #0]
  return result;
 8005a60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a64:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005a68:	6812      	ldr	r2, [r2, #0]
 8005a6a:	fab2 f282 	clz	r2, r2
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	f002 021f 	and.w	r2, r2, #31
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a80:	4013      	ands	r3, r2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d084      	beq.n	8005990 <HAL_RCC_OscConfig+0x9c8>
 8005a86:	e07f      	b.n	8005b88 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a88:	f7fd f966 	bl	8002d58 <HAL_GetTick>
 8005a8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a90:	e00b      	b.n	8005aaa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a92:	f7fd f961 	bl	8002d58 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d901      	bls.n	8005aaa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e2c4      	b.n	8006034 <HAL_RCC_OscConfig+0x106c>
 8005aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aae:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aba:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	fa93 f2a3 	rbit	r2, r3
 8005ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ac8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ad2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ade:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	fa93 f2a3 	rbit	r2, r3
 8005ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aec:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005af0:	601a      	str	r2, [r3, #0]
  return result;
 8005af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005af6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005afa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005afc:	fab3 f383 	clz	r3, r3
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	095b      	lsrs	r3, r3, #5
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	f043 0302 	orr.w	r3, r3, #2
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d102      	bne.n	8005b16 <HAL_RCC_OscConfig+0xb4e>
 8005b10:	4b43      	ldr	r3, [pc, #268]	; (8005c20 <HAL_RCC_OscConfig+0xc58>)
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	e013      	b.n	8005b3e <HAL_RCC_OscConfig+0xb76>
 8005b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b1a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005b1e:	2202      	movs	r2, #2
 8005b20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b26:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	fa93 f2a3 	rbit	r2, r3
 8005b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b34:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	4b39      	ldr	r3, [pc, #228]	; (8005c20 <HAL_RCC_OscConfig+0xc58>)
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005b42:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005b46:	2102      	movs	r1, #2
 8005b48:	6011      	str	r1, [r2, #0]
 8005b4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005b4e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005b52:	6812      	ldr	r2, [r2, #0]
 8005b54:	fa92 f1a2 	rbit	r1, r2
 8005b58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005b5c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005b60:	6011      	str	r1, [r2, #0]
  return result;
 8005b62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005b66:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005b6a:	6812      	ldr	r2, [r2, #0]
 8005b6c:	fab2 f282 	clz	r2, r2
 8005b70:	b2d2      	uxtb	r2, r2
 8005b72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b76:	b2d2      	uxtb	r2, r2
 8005b78:	f002 021f 	and.w	r2, r2, #31
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8005b82:	4013      	ands	r3, r2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d184      	bne.n	8005a92 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005b88:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d105      	bne.n	8005b9c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b90:	4b23      	ldr	r3, [pc, #140]	; (8005c20 <HAL_RCC_OscConfig+0xc58>)
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	4a22      	ldr	r2, [pc, #136]	; (8005c20 <HAL_RCC_OscConfig+0xc58>)
 8005b96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b9a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ba0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f000 8242 	beq.w	8006032 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bae:	4b1c      	ldr	r3, [pc, #112]	; (8005c20 <HAL_RCC_OscConfig+0xc58>)
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f003 030c 	and.w	r3, r3, #12
 8005bb6:	2b08      	cmp	r3, #8
 8005bb8:	f000 8213 	beq.w	8005fe2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69db      	ldr	r3, [r3, #28]
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	f040 8162 	bne.w	8005e92 <HAL_RCC_OscConfig+0xeca>
 8005bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bd2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005bd6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005bda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005be0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	fa93 f2a3 	rbit	r2, r3
 8005bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bee:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005bf2:	601a      	str	r2, [r3, #0]
  return result;
 8005bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bf8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005bfc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bfe:	fab3 f383 	clz	r3, r3
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005c08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	461a      	mov	r2, r3
 8005c10:	2300      	movs	r3, #0
 8005c12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c14:	f7fd f8a0 	bl	8002d58 <HAL_GetTick>
 8005c18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c1c:	e00c      	b.n	8005c38 <HAL_RCC_OscConfig+0xc70>
 8005c1e:	bf00      	nop
 8005c20:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c24:	f7fd f898 	bl	8002d58 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d901      	bls.n	8005c38 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e1fd      	b.n	8006034 <HAL_RCC_OscConfig+0x106c>
 8005c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c3c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005c40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c4a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	fa93 f2a3 	rbit	r2, r3
 8005c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c58:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005c5c:	601a      	str	r2, [r3, #0]
  return result;
 8005c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c62:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005c66:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c68:	fab3 f383 	clz	r3, r3
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	095b      	lsrs	r3, r3, #5
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	f043 0301 	orr.w	r3, r3, #1
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d102      	bne.n	8005c82 <HAL_RCC_OscConfig+0xcba>
 8005c7c:	4bb0      	ldr	r3, [pc, #704]	; (8005f40 <HAL_RCC_OscConfig+0xf78>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	e027      	b.n	8005cd2 <HAL_RCC_OscConfig+0xd0a>
 8005c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c86:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005c8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c94:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	fa93 f2a3 	rbit	r2, r3
 8005c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ca2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cac:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005cb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cba:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	fa93 f2a3 	rbit	r2, r3
 8005cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cc8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	4b9c      	ldr	r3, [pc, #624]	; (8005f40 <HAL_RCC_OscConfig+0xf78>)
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005cd6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005cda:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005cde:	6011      	str	r1, [r2, #0]
 8005ce0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ce4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005ce8:	6812      	ldr	r2, [r2, #0]
 8005cea:	fa92 f1a2 	rbit	r1, r2
 8005cee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005cf2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005cf6:	6011      	str	r1, [r2, #0]
  return result;
 8005cf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005cfc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005d00:	6812      	ldr	r2, [r2, #0]
 8005d02:	fab2 f282 	clz	r2, r2
 8005d06:	b2d2      	uxtb	r2, r2
 8005d08:	f042 0220 	orr.w	r2, r2, #32
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	f002 021f 	and.w	r2, r2, #31
 8005d12:	2101      	movs	r1, #1
 8005d14:	fa01 f202 	lsl.w	r2, r1, r2
 8005d18:	4013      	ands	r3, r2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d182      	bne.n	8005c24 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d1e:	4b88      	ldr	r3, [pc, #544]	; (8005f40 <HAL_RCC_OscConfig+0xf78>)
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	430b      	orrs	r3, r1
 8005d40:	497f      	ldr	r1, [pc, #508]	; (8005f40 <HAL_RCC_OscConfig+0xf78>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	604b      	str	r3, [r1, #4]
 8005d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d4a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005d4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d58:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	fa93 f2a3 	rbit	r2, r3
 8005d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d66:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005d6a:	601a      	str	r2, [r3, #0]
  return result;
 8005d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d70:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005d74:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d76:	fab3 f383 	clz	r3, r3
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005d80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	461a      	mov	r2, r3
 8005d88:	2301      	movs	r3, #1
 8005d8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d8c:	f7fc ffe4 	bl	8002d58 <HAL_GetTick>
 8005d90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d94:	e009      	b.n	8005daa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d96:	f7fc ffdf 	bl	8002d58 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e144      	b.n	8006034 <HAL_RCC_OscConfig+0x106c>
 8005daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dae:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005db2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005db6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dbc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	fa93 f2a3 	rbit	r2, r3
 8005dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dca:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005dce:	601a      	str	r2, [r3, #0]
  return result;
 8005dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dd4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005dd8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005dda:	fab3 f383 	clz	r3, r3
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	095b      	lsrs	r3, r3, #5
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	f043 0301 	orr.w	r3, r3, #1
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d102      	bne.n	8005df4 <HAL_RCC_OscConfig+0xe2c>
 8005dee:	4b54      	ldr	r3, [pc, #336]	; (8005f40 <HAL_RCC_OscConfig+0xf78>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	e027      	b.n	8005e44 <HAL_RCC_OscConfig+0xe7c>
 8005df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005df8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005dfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e06:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	fa93 f2a3 	rbit	r2, r3
 8005e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e14:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005e18:	601a      	str	r2, [r3, #0]
 8005e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e1e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005e22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e2c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	fa93 f2a3 	rbit	r2, r3
 8005e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e3a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	4b3f      	ldr	r3, [pc, #252]	; (8005f40 <HAL_RCC_OscConfig+0xf78>)
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005e48:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005e4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005e50:	6011      	str	r1, [r2, #0]
 8005e52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005e56:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005e5a:	6812      	ldr	r2, [r2, #0]
 8005e5c:	fa92 f1a2 	rbit	r1, r2
 8005e60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005e64:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005e68:	6011      	str	r1, [r2, #0]
  return result;
 8005e6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005e6e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005e72:	6812      	ldr	r2, [r2, #0]
 8005e74:	fab2 f282 	clz	r2, r2
 8005e78:	b2d2      	uxtb	r2, r2
 8005e7a:	f042 0220 	orr.w	r2, r2, #32
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	f002 021f 	and.w	r2, r2, #31
 8005e84:	2101      	movs	r1, #1
 8005e86:	fa01 f202 	lsl.w	r2, r1, r2
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d082      	beq.n	8005d96 <HAL_RCC_OscConfig+0xdce>
 8005e90:	e0cf      	b.n	8006032 <HAL_RCC_OscConfig+0x106a>
 8005e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e96:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005e9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ea4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	fa93 f2a3 	rbit	r2, r3
 8005eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eb2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005eb6:	601a      	str	r2, [r3, #0]
  return result;
 8005eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ebc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005ec0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ec2:	fab3 f383 	clz	r3, r3
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005ecc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed8:	f7fc ff3e 	bl	8002d58 <HAL_GetTick>
 8005edc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ee0:	e009      	b.n	8005ef6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ee2:	f7fc ff39 	bl	8002d58 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e09e      	b.n	8006034 <HAL_RCC_OscConfig+0x106c>
 8005ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005efa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005efe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f08:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	fa93 f2a3 	rbit	r2, r3
 8005f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f16:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005f1a:	601a      	str	r2, [r3, #0]
  return result;
 8005f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f20:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005f24:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f26:	fab3 f383 	clz	r3, r3
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	095b      	lsrs	r3, r3, #5
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	f043 0301 	orr.w	r3, r3, #1
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d104      	bne.n	8005f44 <HAL_RCC_OscConfig+0xf7c>
 8005f3a:	4b01      	ldr	r3, [pc, #4]	; (8005f40 <HAL_RCC_OscConfig+0xf78>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	e029      	b.n	8005f94 <HAL_RCC_OscConfig+0xfcc>
 8005f40:	40021000 	.word	0x40021000
 8005f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f48:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005f4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f56:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	fa93 f2a3 	rbit	r2, r3
 8005f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f64:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f6e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005f72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f7c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	fa93 f2a3 	rbit	r2, r3
 8005f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f8a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	4b2b      	ldr	r3, [pc, #172]	; (8006040 <HAL_RCC_OscConfig+0x1078>)
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005f98:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005f9c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005fa0:	6011      	str	r1, [r2, #0]
 8005fa2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005fa6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005faa:	6812      	ldr	r2, [r2, #0]
 8005fac:	fa92 f1a2 	rbit	r1, r2
 8005fb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005fb4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005fb8:	6011      	str	r1, [r2, #0]
  return result;
 8005fba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005fbe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005fc2:	6812      	ldr	r2, [r2, #0]
 8005fc4:	fab2 f282 	clz	r2, r2
 8005fc8:	b2d2      	uxtb	r2, r2
 8005fca:	f042 0220 	orr.w	r2, r2, #32
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	f002 021f 	and.w	r2, r2, #31
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8005fda:	4013      	ands	r3, r2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d180      	bne.n	8005ee2 <HAL_RCC_OscConfig+0xf1a>
 8005fe0:	e027      	b.n	8006032 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fe6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d101      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e01e      	b.n	8006034 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ff6:	4b12      	ldr	r3, [pc, #72]	; (8006040 <HAL_RCC_OscConfig+0x1078>)
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005ffe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006002:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800600a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	429a      	cmp	r2, r3
 8006014:	d10b      	bne.n	800602e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006016:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800601a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800601e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006022:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800602a:	429a      	cmp	r2, r3
 800602c:	d001      	beq.n	8006032 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e000      	b.n	8006034 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	40021000 	.word	0x40021000

08006044 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b09e      	sub	sp, #120	; 0x78
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e162      	b.n	8006322 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800605c:	4b90      	ldr	r3, [pc, #576]	; (80062a0 <HAL_RCC_ClockConfig+0x25c>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0307 	and.w	r3, r3, #7
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	429a      	cmp	r2, r3
 8006068:	d910      	bls.n	800608c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800606a:	4b8d      	ldr	r3, [pc, #564]	; (80062a0 <HAL_RCC_ClockConfig+0x25c>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f023 0207 	bic.w	r2, r3, #7
 8006072:	498b      	ldr	r1, [pc, #556]	; (80062a0 <HAL_RCC_ClockConfig+0x25c>)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	4313      	orrs	r3, r2
 8006078:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800607a:	4b89      	ldr	r3, [pc, #548]	; (80062a0 <HAL_RCC_ClockConfig+0x25c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0307 	and.w	r3, r3, #7
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	429a      	cmp	r2, r3
 8006086:	d001      	beq.n	800608c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e14a      	b.n	8006322 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0302 	and.w	r3, r3, #2
 8006094:	2b00      	cmp	r3, #0
 8006096:	d008      	beq.n	80060aa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006098:	4b82      	ldr	r3, [pc, #520]	; (80062a4 <HAL_RCC_ClockConfig+0x260>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	497f      	ldr	r1, [pc, #508]	; (80062a4 <HAL_RCC_ClockConfig+0x260>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 80dc 	beq.w	8006270 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d13c      	bne.n	800613a <HAL_RCC_ClockConfig+0xf6>
 80060c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060c4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060c8:	fa93 f3a3 	rbit	r3, r3
 80060cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80060ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060d0:	fab3 f383 	clz	r3, r3
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	095b      	lsrs	r3, r3, #5
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	f043 0301 	orr.w	r3, r3, #1
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d102      	bne.n	80060ea <HAL_RCC_ClockConfig+0xa6>
 80060e4:	4b6f      	ldr	r3, [pc, #444]	; (80062a4 <HAL_RCC_ClockConfig+0x260>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	e00f      	b.n	800610a <HAL_RCC_ClockConfig+0xc6>
 80060ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060f2:	fa93 f3a3 	rbit	r3, r3
 80060f6:	667b      	str	r3, [r7, #100]	; 0x64
 80060f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060fc:	663b      	str	r3, [r7, #96]	; 0x60
 80060fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006100:	fa93 f3a3 	rbit	r3, r3
 8006104:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006106:	4b67      	ldr	r3, [pc, #412]	; (80062a4 <HAL_RCC_ClockConfig+0x260>)
 8006108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800610e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006110:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006112:	fa92 f2a2 	rbit	r2, r2
 8006116:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006118:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800611a:	fab2 f282 	clz	r2, r2
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	f042 0220 	orr.w	r2, r2, #32
 8006124:	b2d2      	uxtb	r2, r2
 8006126:	f002 021f 	and.w	r2, r2, #31
 800612a:	2101      	movs	r1, #1
 800612c:	fa01 f202 	lsl.w	r2, r1, r2
 8006130:	4013      	ands	r3, r2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d17b      	bne.n	800622e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e0f3      	b.n	8006322 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	2b02      	cmp	r3, #2
 8006140:	d13c      	bne.n	80061bc <HAL_RCC_ClockConfig+0x178>
 8006142:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006146:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800614a:	fa93 f3a3 	rbit	r3, r3
 800614e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006152:	fab3 f383 	clz	r3, r3
 8006156:	b2db      	uxtb	r3, r3
 8006158:	095b      	lsrs	r3, r3, #5
 800615a:	b2db      	uxtb	r3, r3
 800615c:	f043 0301 	orr.w	r3, r3, #1
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b01      	cmp	r3, #1
 8006164:	d102      	bne.n	800616c <HAL_RCC_ClockConfig+0x128>
 8006166:	4b4f      	ldr	r3, [pc, #316]	; (80062a4 <HAL_RCC_ClockConfig+0x260>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	e00f      	b.n	800618c <HAL_RCC_ClockConfig+0x148>
 800616c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006170:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006174:	fa93 f3a3 	rbit	r3, r3
 8006178:	647b      	str	r3, [r7, #68]	; 0x44
 800617a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800617e:	643b      	str	r3, [r7, #64]	; 0x40
 8006180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006182:	fa93 f3a3 	rbit	r3, r3
 8006186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006188:	4b46      	ldr	r3, [pc, #280]	; (80062a4 <HAL_RCC_ClockConfig+0x260>)
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006190:	63ba      	str	r2, [r7, #56]	; 0x38
 8006192:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006194:	fa92 f2a2 	rbit	r2, r2
 8006198:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800619a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800619c:	fab2 f282 	clz	r2, r2
 80061a0:	b2d2      	uxtb	r2, r2
 80061a2:	f042 0220 	orr.w	r2, r2, #32
 80061a6:	b2d2      	uxtb	r2, r2
 80061a8:	f002 021f 	and.w	r2, r2, #31
 80061ac:	2101      	movs	r1, #1
 80061ae:	fa01 f202 	lsl.w	r2, r1, r2
 80061b2:	4013      	ands	r3, r2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d13a      	bne.n	800622e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e0b2      	b.n	8006322 <HAL_RCC_ClockConfig+0x2de>
 80061bc:	2302      	movs	r3, #2
 80061be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c2:	fa93 f3a3 	rbit	r3, r3
 80061c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80061c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ca:	fab3 f383 	clz	r3, r3
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	095b      	lsrs	r3, r3, #5
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	f043 0301 	orr.w	r3, r3, #1
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d102      	bne.n	80061e4 <HAL_RCC_ClockConfig+0x1a0>
 80061de:	4b31      	ldr	r3, [pc, #196]	; (80062a4 <HAL_RCC_ClockConfig+0x260>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	e00d      	b.n	8006200 <HAL_RCC_ClockConfig+0x1bc>
 80061e4:	2302      	movs	r3, #2
 80061e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ea:	fa93 f3a3 	rbit	r3, r3
 80061ee:	627b      	str	r3, [r7, #36]	; 0x24
 80061f0:	2302      	movs	r3, #2
 80061f2:	623b      	str	r3, [r7, #32]
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	fa93 f3a3 	rbit	r3, r3
 80061fa:	61fb      	str	r3, [r7, #28]
 80061fc:	4b29      	ldr	r3, [pc, #164]	; (80062a4 <HAL_RCC_ClockConfig+0x260>)
 80061fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006200:	2202      	movs	r2, #2
 8006202:	61ba      	str	r2, [r7, #24]
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	fa92 f2a2 	rbit	r2, r2
 800620a:	617a      	str	r2, [r7, #20]
  return result;
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	fab2 f282 	clz	r2, r2
 8006212:	b2d2      	uxtb	r2, r2
 8006214:	f042 0220 	orr.w	r2, r2, #32
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	f002 021f 	and.w	r2, r2, #31
 800621e:	2101      	movs	r1, #1
 8006220:	fa01 f202 	lsl.w	r2, r1, r2
 8006224:	4013      	ands	r3, r2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e079      	b.n	8006322 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800622e:	4b1d      	ldr	r3, [pc, #116]	; (80062a4 <HAL_RCC_ClockConfig+0x260>)
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f023 0203 	bic.w	r2, r3, #3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	491a      	ldr	r1, [pc, #104]	; (80062a4 <HAL_RCC_ClockConfig+0x260>)
 800623c:	4313      	orrs	r3, r2
 800623e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006240:	f7fc fd8a 	bl	8002d58 <HAL_GetTick>
 8006244:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006246:	e00a      	b.n	800625e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006248:	f7fc fd86 	bl	8002d58 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	f241 3288 	movw	r2, #5000	; 0x1388
 8006256:	4293      	cmp	r3, r2
 8006258:	d901      	bls.n	800625e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e061      	b.n	8006322 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800625e:	4b11      	ldr	r3, [pc, #68]	; (80062a4 <HAL_RCC_ClockConfig+0x260>)
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f003 020c 	and.w	r2, r3, #12
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	429a      	cmp	r2, r3
 800626e:	d1eb      	bne.n	8006248 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006270:	4b0b      	ldr	r3, [pc, #44]	; (80062a0 <HAL_RCC_ClockConfig+0x25c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0307 	and.w	r3, r3, #7
 8006278:	683a      	ldr	r2, [r7, #0]
 800627a:	429a      	cmp	r2, r3
 800627c:	d214      	bcs.n	80062a8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800627e:	4b08      	ldr	r3, [pc, #32]	; (80062a0 <HAL_RCC_ClockConfig+0x25c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f023 0207 	bic.w	r2, r3, #7
 8006286:	4906      	ldr	r1, [pc, #24]	; (80062a0 <HAL_RCC_ClockConfig+0x25c>)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	4313      	orrs	r3, r2
 800628c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800628e:	4b04      	ldr	r3, [pc, #16]	; (80062a0 <HAL_RCC_ClockConfig+0x25c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	429a      	cmp	r2, r3
 800629a:	d005      	beq.n	80062a8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e040      	b.n	8006322 <HAL_RCC_ClockConfig+0x2de>
 80062a0:	40022000 	.word	0x40022000
 80062a4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0304 	and.w	r3, r3, #4
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d008      	beq.n	80062c6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062b4:	4b1d      	ldr	r3, [pc, #116]	; (800632c <HAL_RCC_ClockConfig+0x2e8>)
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	491a      	ldr	r1, [pc, #104]	; (800632c <HAL_RCC_ClockConfig+0x2e8>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0308 	and.w	r3, r3, #8
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d009      	beq.n	80062e6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062d2:	4b16      	ldr	r3, [pc, #88]	; (800632c <HAL_RCC_ClockConfig+0x2e8>)
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	00db      	lsls	r3, r3, #3
 80062e0:	4912      	ldr	r1, [pc, #72]	; (800632c <HAL_RCC_ClockConfig+0x2e8>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80062e6:	f000 f829 	bl	800633c <HAL_RCC_GetSysClockFreq>
 80062ea:	4601      	mov	r1, r0
 80062ec:	4b0f      	ldr	r3, [pc, #60]	; (800632c <HAL_RCC_ClockConfig+0x2e8>)
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062f4:	22f0      	movs	r2, #240	; 0xf0
 80062f6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	fa92 f2a2 	rbit	r2, r2
 80062fe:	60fa      	str	r2, [r7, #12]
  return result;
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	fab2 f282 	clz	r2, r2
 8006306:	b2d2      	uxtb	r2, r2
 8006308:	40d3      	lsrs	r3, r2
 800630a:	4a09      	ldr	r2, [pc, #36]	; (8006330 <HAL_RCC_ClockConfig+0x2ec>)
 800630c:	5cd3      	ldrb	r3, [r2, r3]
 800630e:	fa21 f303 	lsr.w	r3, r1, r3
 8006312:	4a08      	ldr	r2, [pc, #32]	; (8006334 <HAL_RCC_ClockConfig+0x2f0>)
 8006314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006316:	4b08      	ldr	r3, [pc, #32]	; (8006338 <HAL_RCC_ClockConfig+0x2f4>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	f7fc fcd8 	bl	8002cd0 <HAL_InitTick>
  
  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3778      	adds	r7, #120	; 0x78
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	40021000 	.word	0x40021000
 8006330:	0800e1a4 	.word	0x0800e1a4
 8006334:	20000050 	.word	0x20000050
 8006338:	20000054 	.word	0x20000054

0800633c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800633c:	b480      	push	{r7}
 800633e:	b08b      	sub	sp, #44	; 0x2c
 8006340:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	61fb      	str	r3, [r7, #28]
 8006346:	2300      	movs	r3, #0
 8006348:	61bb      	str	r3, [r7, #24]
 800634a:	2300      	movs	r3, #0
 800634c:	627b      	str	r3, [r7, #36]	; 0x24
 800634e:	2300      	movs	r3, #0
 8006350:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006356:	4b29      	ldr	r3, [pc, #164]	; (80063fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	f003 030c 	and.w	r3, r3, #12
 8006362:	2b04      	cmp	r3, #4
 8006364:	d002      	beq.n	800636c <HAL_RCC_GetSysClockFreq+0x30>
 8006366:	2b08      	cmp	r3, #8
 8006368:	d003      	beq.n	8006372 <HAL_RCC_GetSysClockFreq+0x36>
 800636a:	e03c      	b.n	80063e6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800636c:	4b24      	ldr	r3, [pc, #144]	; (8006400 <HAL_RCC_GetSysClockFreq+0xc4>)
 800636e:	623b      	str	r3, [r7, #32]
      break;
 8006370:	e03c      	b.n	80063ec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006378:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800637c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	fa92 f2a2 	rbit	r2, r2
 8006384:	607a      	str	r2, [r7, #4]
  return result;
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	fab2 f282 	clz	r2, r2
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	40d3      	lsrs	r3, r2
 8006390:	4a1c      	ldr	r2, [pc, #112]	; (8006404 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006392:	5cd3      	ldrb	r3, [r2, r3]
 8006394:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006396:	4b19      	ldr	r3, [pc, #100]	; (80063fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639a:	f003 030f 	and.w	r3, r3, #15
 800639e:	220f      	movs	r2, #15
 80063a0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	fa92 f2a2 	rbit	r2, r2
 80063a8:	60fa      	str	r2, [r7, #12]
  return result;
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	fab2 f282 	clz	r2, r2
 80063b0:	b2d2      	uxtb	r2, r2
 80063b2:	40d3      	lsrs	r3, r2
 80063b4:	4a14      	ldr	r2, [pc, #80]	; (8006408 <HAL_RCC_GetSysClockFreq+0xcc>)
 80063b6:	5cd3      	ldrb	r3, [r2, r3]
 80063b8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d008      	beq.n	80063d6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80063c4:	4a0e      	ldr	r2, [pc, #56]	; (8006400 <HAL_RCC_GetSysClockFreq+0xc4>)
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	fb02 f303 	mul.w	r3, r2, r3
 80063d2:	627b      	str	r3, [r7, #36]	; 0x24
 80063d4:	e004      	b.n	80063e0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	4a0c      	ldr	r2, [pc, #48]	; (800640c <HAL_RCC_GetSysClockFreq+0xd0>)
 80063da:	fb02 f303 	mul.w	r3, r2, r3
 80063de:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	623b      	str	r3, [r7, #32]
      break;
 80063e4:	e002      	b.n	80063ec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80063e6:	4b06      	ldr	r3, [pc, #24]	; (8006400 <HAL_RCC_GetSysClockFreq+0xc4>)
 80063e8:	623b      	str	r3, [r7, #32]
      break;
 80063ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063ec:	6a3b      	ldr	r3, [r7, #32]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	372c      	adds	r7, #44	; 0x2c
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	40021000 	.word	0x40021000
 8006400:	007a1200 	.word	0x007a1200
 8006404:	0800e1bc 	.word	0x0800e1bc
 8006408:	0800e1cc 	.word	0x0800e1cc
 800640c:	003d0900 	.word	0x003d0900

08006410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006410:	b480      	push	{r7}
 8006412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006414:	4b03      	ldr	r3, [pc, #12]	; (8006424 <HAL_RCC_GetHCLKFreq+0x14>)
 8006416:	681b      	ldr	r3, [r3, #0]
}
 8006418:	4618      	mov	r0, r3
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	20000050 	.word	0x20000050

08006428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800642e:	f7ff ffef 	bl	8006410 <HAL_RCC_GetHCLKFreq>
 8006432:	4601      	mov	r1, r0
 8006434:	4b0b      	ldr	r3, [pc, #44]	; (8006464 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800643c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006440:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	fa92 f2a2 	rbit	r2, r2
 8006448:	603a      	str	r2, [r7, #0]
  return result;
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	fab2 f282 	clz	r2, r2
 8006450:	b2d2      	uxtb	r2, r2
 8006452:	40d3      	lsrs	r3, r2
 8006454:	4a04      	ldr	r2, [pc, #16]	; (8006468 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006456:	5cd3      	ldrb	r3, [r2, r3]
 8006458:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800645c:	4618      	mov	r0, r3
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	40021000 	.word	0x40021000
 8006468:	0800e1b4 	.word	0x0800e1b4

0800646c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006472:	f7ff ffcd 	bl	8006410 <HAL_RCC_GetHCLKFreq>
 8006476:	4601      	mov	r1, r0
 8006478:	4b0b      	ldr	r3, [pc, #44]	; (80064a8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006480:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006484:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	fa92 f2a2 	rbit	r2, r2
 800648c:	603a      	str	r2, [r7, #0]
  return result;
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	fab2 f282 	clz	r2, r2
 8006494:	b2d2      	uxtb	r2, r2
 8006496:	40d3      	lsrs	r3, r2
 8006498:	4a04      	ldr	r2, [pc, #16]	; (80064ac <HAL_RCC_GetPCLK2Freq+0x40>)
 800649a:	5cd3      	ldrb	r3, [r2, r3]
 800649c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80064a0:	4618      	mov	r0, r3
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	40021000 	.word	0x40021000
 80064ac:	0800e1b4 	.word	0x0800e1b4

080064b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b092      	sub	sp, #72	; 0x48
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80064bc:	2300      	movs	r3, #0
 80064be:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80064c0:	2300      	movs	r3, #0
 80064c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f000 80d4 	beq.w	800667c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064d4:	4b4e      	ldr	r3, [pc, #312]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10e      	bne.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064e0:	4b4b      	ldr	r3, [pc, #300]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	4a4a      	ldr	r2, [pc, #296]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064ea:	61d3      	str	r3, [r2, #28]
 80064ec:	4b48      	ldr	r3, [pc, #288]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064ee:	69db      	ldr	r3, [r3, #28]
 80064f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064f4:	60bb      	str	r3, [r7, #8]
 80064f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064f8:	2301      	movs	r3, #1
 80064fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064fe:	4b45      	ldr	r3, [pc, #276]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006506:	2b00      	cmp	r3, #0
 8006508:	d118      	bne.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800650a:	4b42      	ldr	r3, [pc, #264]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a41      	ldr	r2, [pc, #260]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006514:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006516:	f7fc fc1f 	bl	8002d58 <HAL_GetTick>
 800651a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800651c:	e008      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800651e:	f7fc fc1b 	bl	8002d58 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b64      	cmp	r3, #100	; 0x64
 800652a:	d901      	bls.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e169      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006530:	4b38      	ldr	r3, [pc, #224]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0f0      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800653c:	4b34      	ldr	r3, [pc, #208]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006544:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 8084 	beq.w	8006656 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006556:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006558:	429a      	cmp	r2, r3
 800655a:	d07c      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800655c:	4b2c      	ldr	r3, [pc, #176]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006564:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006566:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800656a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800656c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656e:	fa93 f3a3 	rbit	r3, r3
 8006572:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006576:	fab3 f383 	clz	r3, r3
 800657a:	b2db      	uxtb	r3, r3
 800657c:	461a      	mov	r2, r3
 800657e:	4b26      	ldr	r3, [pc, #152]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006580:	4413      	add	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	461a      	mov	r2, r3
 8006586:	2301      	movs	r3, #1
 8006588:	6013      	str	r3, [r2, #0]
 800658a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800658e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006592:	fa93 f3a3 	rbit	r3, r3
 8006596:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800659a:	fab3 f383 	clz	r3, r3
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	461a      	mov	r2, r3
 80065a2:	4b1d      	ldr	r3, [pc, #116]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80065a4:	4413      	add	r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	461a      	mov	r2, r3
 80065aa:	2300      	movs	r3, #0
 80065ac:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80065ae:	4a18      	ldr	r2, [pc, #96]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80065b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d04b      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065be:	f7fc fbcb 	bl	8002d58 <HAL_GetTick>
 80065c2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065c4:	e00a      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065c6:	f7fc fbc7 	bl	8002d58 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d901      	bls.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e113      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80065dc:	2302      	movs	r3, #2
 80065de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e2:	fa93 f3a3 	rbit	r3, r3
 80065e6:	627b      	str	r3, [r7, #36]	; 0x24
 80065e8:	2302      	movs	r3, #2
 80065ea:	623b      	str	r3, [r7, #32]
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	fa93 f3a3 	rbit	r3, r3
 80065f2:	61fb      	str	r3, [r7, #28]
  return result;
 80065f4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065f6:	fab3 f383 	clz	r3, r3
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	095b      	lsrs	r3, r3, #5
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	f043 0302 	orr.w	r3, r3, #2
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b02      	cmp	r3, #2
 8006608:	d108      	bne.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800660a:	4b01      	ldr	r3, [pc, #4]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	e00d      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006610:	40021000 	.word	0x40021000
 8006614:	40007000 	.word	0x40007000
 8006618:	10908100 	.word	0x10908100
 800661c:	2302      	movs	r3, #2
 800661e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	fa93 f3a3 	rbit	r3, r3
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	4b78      	ldr	r3, [pc, #480]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800662a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662c:	2202      	movs	r2, #2
 800662e:	613a      	str	r2, [r7, #16]
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	fa92 f2a2 	rbit	r2, r2
 8006636:	60fa      	str	r2, [r7, #12]
  return result;
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	fab2 f282 	clz	r2, r2
 800663e:	b2d2      	uxtb	r2, r2
 8006640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006644:	b2d2      	uxtb	r2, r2
 8006646:	f002 021f 	and.w	r2, r2, #31
 800664a:	2101      	movs	r1, #1
 800664c:	fa01 f202 	lsl.w	r2, r1, r2
 8006650:	4013      	ands	r3, r2
 8006652:	2b00      	cmp	r3, #0
 8006654:	d0b7      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006656:	4b6d      	ldr	r3, [pc, #436]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	496a      	ldr	r1, [pc, #424]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006664:	4313      	orrs	r3, r2
 8006666:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006668:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800666c:	2b01      	cmp	r3, #1
 800666e:	d105      	bne.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006670:	4b66      	ldr	r3, [pc, #408]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	4a65      	ldr	r2, [pc, #404]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800667a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b00      	cmp	r3, #0
 8006686:	d008      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006688:	4b60      	ldr	r3, [pc, #384]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800668a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668c:	f023 0203 	bic.w	r2, r3, #3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	495d      	ldr	r1, [pc, #372]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006696:	4313      	orrs	r3, r2
 8006698:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d008      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066a6:	4b59      	ldr	r3, [pc, #356]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	4956      	ldr	r1, [pc, #344]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d008      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066c4:	4b51      	ldr	r3, [pc, #324]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	494e      	ldr	r1, [pc, #312]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0320 	and.w	r3, r3, #32
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d008      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80066e2:	4b4a      	ldr	r3, [pc, #296]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e6:	f023 0210 	bic.w	r2, r3, #16
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	4947      	ldr	r1, [pc, #284]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d008      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006700:	4b42      	ldr	r3, [pc, #264]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670c:	493f      	ldr	r1, [pc, #252]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800670e:	4313      	orrs	r3, r2
 8006710:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671a:	2b00      	cmp	r3, #0
 800671c:	d008      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800671e:	4b3b      	ldr	r3, [pc, #236]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006722:	f023 0220 	bic.w	r2, r3, #32
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	4938      	ldr	r1, [pc, #224]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800672c:	4313      	orrs	r3, r2
 800672e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0308 	and.w	r3, r3, #8
 8006738:	2b00      	cmp	r3, #0
 800673a:	d008      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800673c:	4b33      	ldr	r3, [pc, #204]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800673e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006740:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	4930      	ldr	r1, [pc, #192]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800674a:	4313      	orrs	r3, r2
 800674c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0310 	and.w	r3, r3, #16
 8006756:	2b00      	cmp	r3, #0
 8006758:	d008      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800675a:	4b2c      	ldr	r3, [pc, #176]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800675c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	4929      	ldr	r1, [pc, #164]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006768:	4313      	orrs	r3, r2
 800676a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006774:	2b00      	cmp	r3, #0
 8006776:	d008      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006778:	4b24      	ldr	r3, [pc, #144]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006784:	4921      	ldr	r1, [pc, #132]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006786:	4313      	orrs	r3, r2
 8006788:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006792:	2b00      	cmp	r3, #0
 8006794:	d008      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006796:	4b1d      	ldr	r3, [pc, #116]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a2:	491a      	ldr	r1, [pc, #104]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d008      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80067b4:	4b15      	ldr	r3, [pc, #84]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c0:	4912      	ldr	r1, [pc, #72]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d008      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80067d2:	4b0e      	ldr	r3, [pc, #56]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067de:	490b      	ldr	r1, [pc, #44]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d008      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80067f0:	4b06      	ldr	r3, [pc, #24]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067fc:	4903      	ldr	r1, [pc, #12]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3748      	adds	r7, #72	; 0x48
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	40021000 	.word	0x40021000

08006810 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e09d      	b.n	800695e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	2b00      	cmp	r3, #0
 8006828:	d108      	bne.n	800683c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006832:	d009      	beq.n	8006848 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	61da      	str	r2, [r3, #28]
 800683a:	e005      	b.n	8006848 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d106      	bne.n	8006868 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7fb fe20 	bl	80024a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800687e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006888:	d902      	bls.n	8006890 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800688a:	2300      	movs	r3, #0
 800688c:	60fb      	str	r3, [r7, #12]
 800688e:	e002      	b.n	8006896 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006894:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800689e:	d007      	beq.n	80068b0 <HAL_SPI_Init+0xa0>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068a8:	d002      	beq.n	80068b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80068c0:	431a      	orrs	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	f003 0302 	and.w	r3, r3, #2
 80068ca:	431a      	orrs	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	431a      	orrs	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068de:	431a      	orrs	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068e8:	431a      	orrs	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f2:	ea42 0103 	orr.w	r1, r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	430a      	orrs	r2, r1
 8006904:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	0c1b      	lsrs	r3, r3, #16
 800690c:	f003 0204 	and.w	r2, r3, #4
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	f003 0310 	and.w	r3, r3, #16
 8006918:	431a      	orrs	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800691e:	f003 0308 	and.w	r3, r3, #8
 8006922:	431a      	orrs	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800692c:	ea42 0103 	orr.w	r1, r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	69da      	ldr	r2, [r3, #28]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800694c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d101      	bne.n	8006978 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e049      	b.n	8006a0c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2b00      	cmp	r3, #0
 8006982:	d106      	bne.n	8006992 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7fb fdcd 	bl	800252c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2202      	movs	r2, #2
 8006996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	3304      	adds	r3, #4
 80069a2:	4619      	mov	r1, r3
 80069a4:	4610      	mov	r0, r2
 80069a6:	f000 fd27 	bl	80073f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d001      	beq.n	8006a2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e04a      	b.n	8006ac2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68da      	ldr	r2, [r3, #12]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f042 0201 	orr.w	r2, r2, #1
 8006a42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a21      	ldr	r2, [pc, #132]	; (8006ad0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d018      	beq.n	8006a80 <HAL_TIM_Base_Start_IT+0x6c>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a56:	d013      	beq.n	8006a80 <HAL_TIM_Base_Start_IT+0x6c>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a1d      	ldr	r2, [pc, #116]	; (8006ad4 <HAL_TIM_Base_Start_IT+0xc0>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d00e      	beq.n	8006a80 <HAL_TIM_Base_Start_IT+0x6c>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a1c      	ldr	r2, [pc, #112]	; (8006ad8 <HAL_TIM_Base_Start_IT+0xc4>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d009      	beq.n	8006a80 <HAL_TIM_Base_Start_IT+0x6c>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a1a      	ldr	r2, [pc, #104]	; (8006adc <HAL_TIM_Base_Start_IT+0xc8>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d004      	beq.n	8006a80 <HAL_TIM_Base_Start_IT+0x6c>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a19      	ldr	r2, [pc, #100]	; (8006ae0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d115      	bne.n	8006aac <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689a      	ldr	r2, [r3, #8]
 8006a86:	4b17      	ldr	r3, [pc, #92]	; (8006ae4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a88:	4013      	ands	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2b06      	cmp	r3, #6
 8006a90:	d015      	beq.n	8006abe <HAL_TIM_Base_Start_IT+0xaa>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a98:	d011      	beq.n	8006abe <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f042 0201 	orr.w	r2, r2, #1
 8006aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aaa:	e008      	b.n	8006abe <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f042 0201 	orr.w	r2, r2, #1
 8006aba:	601a      	str	r2, [r3, #0]
 8006abc:	e000      	b.n	8006ac0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006abe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	40012c00 	.word	0x40012c00
 8006ad4:	40000400 	.word	0x40000400
 8006ad8:	40000800 	.word	0x40000800
 8006adc:	40013400 	.word	0x40013400
 8006ae0:	40014000 	.word	0x40014000
 8006ae4:	00010007 	.word	0x00010007

08006ae8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d101      	bne.n	8006afa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e049      	b.n	8006b8e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d106      	bne.n	8006b14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f841 	bl	8006b96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3304      	adds	r3, #4
 8006b24:	4619      	mov	r1, r3
 8006b26:	4610      	mov	r0, r2
 8006b28:	f000 fc66 	bl	80073f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b083      	sub	sp, #12
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b9e:	bf00      	nop
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
	...

08006bac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d109      	bne.n	8006bd0 <HAL_TIM_PWM_Start+0x24>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	bf14      	ite	ne
 8006bc8:	2301      	movne	r3, #1
 8006bca:	2300      	moveq	r3, #0
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	e03c      	b.n	8006c4a <HAL_TIM_PWM_Start+0x9e>
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	d109      	bne.n	8006bea <HAL_TIM_PWM_Start+0x3e>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	bf14      	ite	ne
 8006be2:	2301      	movne	r3, #1
 8006be4:	2300      	moveq	r3, #0
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	e02f      	b.n	8006c4a <HAL_TIM_PWM_Start+0x9e>
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2b08      	cmp	r3, #8
 8006bee:	d109      	bne.n	8006c04 <HAL_TIM_PWM_Start+0x58>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	bf14      	ite	ne
 8006bfc:	2301      	movne	r3, #1
 8006bfe:	2300      	moveq	r3, #0
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	e022      	b.n	8006c4a <HAL_TIM_PWM_Start+0x9e>
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2b0c      	cmp	r3, #12
 8006c08:	d109      	bne.n	8006c1e <HAL_TIM_PWM_Start+0x72>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	bf14      	ite	ne
 8006c16:	2301      	movne	r3, #1
 8006c18:	2300      	moveq	r3, #0
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	e015      	b.n	8006c4a <HAL_TIM_PWM_Start+0x9e>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b10      	cmp	r3, #16
 8006c22:	d109      	bne.n	8006c38 <HAL_TIM_PWM_Start+0x8c>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	bf14      	ite	ne
 8006c30:	2301      	movne	r3, #1
 8006c32:	2300      	moveq	r3, #0
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	e008      	b.n	8006c4a <HAL_TIM_PWM_Start+0x9e>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	bf14      	ite	ne
 8006c44:	2301      	movne	r3, #1
 8006c46:	2300      	moveq	r3, #0
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e097      	b.n	8006d82 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d104      	bne.n	8006c62 <HAL_TIM_PWM_Start+0xb6>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c60:	e023      	b.n	8006caa <HAL_TIM_PWM_Start+0xfe>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d104      	bne.n	8006c72 <HAL_TIM_PWM_Start+0xc6>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c70:	e01b      	b.n	8006caa <HAL_TIM_PWM_Start+0xfe>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b08      	cmp	r3, #8
 8006c76:	d104      	bne.n	8006c82 <HAL_TIM_PWM_Start+0xd6>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c80:	e013      	b.n	8006caa <HAL_TIM_PWM_Start+0xfe>
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	2b0c      	cmp	r3, #12
 8006c86:	d104      	bne.n	8006c92 <HAL_TIM_PWM_Start+0xe6>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c90:	e00b      	b.n	8006caa <HAL_TIM_PWM_Start+0xfe>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b10      	cmp	r3, #16
 8006c96:	d104      	bne.n	8006ca2 <HAL_TIM_PWM_Start+0xf6>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ca0:	e003      	b.n	8006caa <HAL_TIM_PWM_Start+0xfe>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 ffa0 	bl	8007bf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a33      	ldr	r2, [pc, #204]	; (8006d8c <HAL_TIM_PWM_Start+0x1e0>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d013      	beq.n	8006cea <HAL_TIM_PWM_Start+0x13e>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a32      	ldr	r2, [pc, #200]	; (8006d90 <HAL_TIM_PWM_Start+0x1e4>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d00e      	beq.n	8006cea <HAL_TIM_PWM_Start+0x13e>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a30      	ldr	r2, [pc, #192]	; (8006d94 <HAL_TIM_PWM_Start+0x1e8>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d009      	beq.n	8006cea <HAL_TIM_PWM_Start+0x13e>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a2f      	ldr	r2, [pc, #188]	; (8006d98 <HAL_TIM_PWM_Start+0x1ec>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d004      	beq.n	8006cea <HAL_TIM_PWM_Start+0x13e>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a2d      	ldr	r2, [pc, #180]	; (8006d9c <HAL_TIM_PWM_Start+0x1f0>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d101      	bne.n	8006cee <HAL_TIM_PWM_Start+0x142>
 8006cea:	2301      	movs	r3, #1
 8006cec:	e000      	b.n	8006cf0 <HAL_TIM_PWM_Start+0x144>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d007      	beq.n	8006d04 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a20      	ldr	r2, [pc, #128]	; (8006d8c <HAL_TIM_PWM_Start+0x1e0>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d018      	beq.n	8006d40 <HAL_TIM_PWM_Start+0x194>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d16:	d013      	beq.n	8006d40 <HAL_TIM_PWM_Start+0x194>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a20      	ldr	r2, [pc, #128]	; (8006da0 <HAL_TIM_PWM_Start+0x1f4>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00e      	beq.n	8006d40 <HAL_TIM_PWM_Start+0x194>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a1f      	ldr	r2, [pc, #124]	; (8006da4 <HAL_TIM_PWM_Start+0x1f8>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d009      	beq.n	8006d40 <HAL_TIM_PWM_Start+0x194>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a17      	ldr	r2, [pc, #92]	; (8006d90 <HAL_TIM_PWM_Start+0x1e4>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d004      	beq.n	8006d40 <HAL_TIM_PWM_Start+0x194>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a16      	ldr	r2, [pc, #88]	; (8006d94 <HAL_TIM_PWM_Start+0x1e8>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d115      	bne.n	8006d6c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689a      	ldr	r2, [r3, #8]
 8006d46:	4b18      	ldr	r3, [pc, #96]	; (8006da8 <HAL_TIM_PWM_Start+0x1fc>)
 8006d48:	4013      	ands	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b06      	cmp	r3, #6
 8006d50:	d015      	beq.n	8006d7e <HAL_TIM_PWM_Start+0x1d2>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d58:	d011      	beq.n	8006d7e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f042 0201 	orr.w	r2, r2, #1
 8006d68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d6a:	e008      	b.n	8006d7e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0201 	orr.w	r2, r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	e000      	b.n	8006d80 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	40012c00 	.word	0x40012c00
 8006d90:	40013400 	.word	0x40013400
 8006d94:	40014000 	.word	0x40014000
 8006d98:	40014400 	.word	0x40014400
 8006d9c:	40014800 	.word	0x40014800
 8006da0:	40000400 	.word	0x40000400
 8006da4:	40000800 	.word	0x40000800
 8006da8:	00010007 	.word	0x00010007

08006dac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d122      	bne.n	8006e08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d11b      	bne.n	8006e08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f06f 0202 	mvn.w	r2, #2
 8006dd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	f003 0303 	and.w	r3, r3, #3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fae3 	bl	80073ba <HAL_TIM_IC_CaptureCallback>
 8006df4:	e005      	b.n	8006e02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fad5 	bl	80073a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fae6 	bl	80073ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	f003 0304 	and.w	r3, r3, #4
 8006e12:	2b04      	cmp	r3, #4
 8006e14:	d122      	bne.n	8006e5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f003 0304 	and.w	r3, r3, #4
 8006e20:	2b04      	cmp	r3, #4
 8006e22:	d11b      	bne.n	8006e5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f06f 0204 	mvn.w	r2, #4
 8006e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2202      	movs	r2, #2
 8006e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fab9 	bl	80073ba <HAL_TIM_IC_CaptureCallback>
 8006e48:	e005      	b.n	8006e56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 faab 	bl	80073a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fabc 	bl	80073ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	f003 0308 	and.w	r3, r3, #8
 8006e66:	2b08      	cmp	r3, #8
 8006e68:	d122      	bne.n	8006eb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f003 0308 	and.w	r3, r3, #8
 8006e74:	2b08      	cmp	r3, #8
 8006e76:	d11b      	bne.n	8006eb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f06f 0208 	mvn.w	r2, #8
 8006e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2204      	movs	r2, #4
 8006e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	f003 0303 	and.w	r3, r3, #3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d003      	beq.n	8006e9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fa8f 	bl	80073ba <HAL_TIM_IC_CaptureCallback>
 8006e9c:	e005      	b.n	8006eaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fa81 	bl	80073a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fa92 	bl	80073ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	f003 0310 	and.w	r3, r3, #16
 8006eba:	2b10      	cmp	r3, #16
 8006ebc:	d122      	bne.n	8006f04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f003 0310 	and.w	r3, r3, #16
 8006ec8:	2b10      	cmp	r3, #16
 8006eca:	d11b      	bne.n	8006f04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f06f 0210 	mvn.w	r2, #16
 8006ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2208      	movs	r2, #8
 8006eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	69db      	ldr	r3, [r3, #28]
 8006ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fa65 	bl	80073ba <HAL_TIM_IC_CaptureCallback>
 8006ef0:	e005      	b.n	8006efe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fa57 	bl	80073a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fa68 	bl	80073ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d10e      	bne.n	8006f30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d107      	bne.n	8006f30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f06f 0201 	mvn.w	r2, #1
 8006f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7fb f9cc 	bl	80022c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f3a:	2b80      	cmp	r3, #128	; 0x80
 8006f3c:	d10e      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f48:	2b80      	cmp	r3, #128	; 0x80
 8006f4a:	d107      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fefe 	bl	8007d58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f6a:	d10e      	bne.n	8006f8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f76:	2b80      	cmp	r3, #128	; 0x80
 8006f78:	d107      	bne.n	8006f8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fef1 	bl	8007d6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f94:	2b40      	cmp	r3, #64	; 0x40
 8006f96:	d10e      	bne.n	8006fb6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa2:	2b40      	cmp	r3, #64	; 0x40
 8006fa4:	d107      	bne.n	8006fb6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 fa16 	bl	80073e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	f003 0320 	and.w	r3, r3, #32
 8006fc0:	2b20      	cmp	r3, #32
 8006fc2:	d10e      	bne.n	8006fe2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	f003 0320 	and.w	r3, r3, #32
 8006fce:	2b20      	cmp	r3, #32
 8006fd0:	d107      	bne.n	8006fe2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f06f 0220 	mvn.w	r2, #32
 8006fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 feb1 	bl	8007d44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fe2:	bf00      	nop
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
	...

08006fec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007002:	2b01      	cmp	r3, #1
 8007004:	d101      	bne.n	800700a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007006:	2302      	movs	r3, #2
 8007008:	e0ff      	b.n	800720a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b14      	cmp	r3, #20
 8007016:	f200 80f0 	bhi.w	80071fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800701a:	a201      	add	r2, pc, #4	; (adr r2, 8007020 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800701c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007020:	08007075 	.word	0x08007075
 8007024:	080071fb 	.word	0x080071fb
 8007028:	080071fb 	.word	0x080071fb
 800702c:	080071fb 	.word	0x080071fb
 8007030:	080070b5 	.word	0x080070b5
 8007034:	080071fb 	.word	0x080071fb
 8007038:	080071fb 	.word	0x080071fb
 800703c:	080071fb 	.word	0x080071fb
 8007040:	080070f7 	.word	0x080070f7
 8007044:	080071fb 	.word	0x080071fb
 8007048:	080071fb 	.word	0x080071fb
 800704c:	080071fb 	.word	0x080071fb
 8007050:	08007137 	.word	0x08007137
 8007054:	080071fb 	.word	0x080071fb
 8007058:	080071fb 	.word	0x080071fb
 800705c:	080071fb 	.word	0x080071fb
 8007060:	08007179 	.word	0x08007179
 8007064:	080071fb 	.word	0x080071fb
 8007068:	080071fb 	.word	0x080071fb
 800706c:	080071fb 	.word	0x080071fb
 8007070:	080071b9 	.word	0x080071b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68b9      	ldr	r1, [r7, #8]
 800707a:	4618      	mov	r0, r3
 800707c:	f000 fa4c 	bl	8007518 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	699a      	ldr	r2, [r3, #24]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f042 0208 	orr.w	r2, r2, #8
 800708e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	699a      	ldr	r2, [r3, #24]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f022 0204 	bic.w	r2, r2, #4
 800709e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6999      	ldr	r1, [r3, #24]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	691a      	ldr	r2, [r3, #16]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	619a      	str	r2, [r3, #24]
      break;
 80070b2:	e0a5      	b.n	8007200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68b9      	ldr	r1, [r7, #8]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f000 fabc 	bl	8007638 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	699a      	ldr	r2, [r3, #24]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	699a      	ldr	r2, [r3, #24]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6999      	ldr	r1, [r3, #24]
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	021a      	lsls	r2, r3, #8
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	430a      	orrs	r2, r1
 80070f2:	619a      	str	r2, [r3, #24]
      break;
 80070f4:	e084      	b.n	8007200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68b9      	ldr	r1, [r7, #8]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f000 fb25 	bl	800774c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	69da      	ldr	r2, [r3, #28]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f042 0208 	orr.w	r2, r2, #8
 8007110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	69da      	ldr	r2, [r3, #28]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 0204 	bic.w	r2, r2, #4
 8007120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	69d9      	ldr	r1, [r3, #28]
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	691a      	ldr	r2, [r3, #16]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	430a      	orrs	r2, r1
 8007132:	61da      	str	r2, [r3, #28]
      break;
 8007134:	e064      	b.n	8007200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68b9      	ldr	r1, [r7, #8]
 800713c:	4618      	mov	r0, r3
 800713e:	f000 fb8d 	bl	800785c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	69da      	ldr	r2, [r3, #28]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	69da      	ldr	r2, [r3, #28]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	69d9      	ldr	r1, [r3, #28]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	021a      	lsls	r2, r3, #8
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	430a      	orrs	r2, r1
 8007174:	61da      	str	r2, [r3, #28]
      break;
 8007176:	e043      	b.n	8007200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68b9      	ldr	r1, [r7, #8]
 800717e:	4618      	mov	r0, r3
 8007180:	f000 fbd6 	bl	8007930 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f042 0208 	orr.w	r2, r2, #8
 8007192:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 0204 	bic.w	r2, r2, #4
 80071a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	691a      	ldr	r2, [r3, #16]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	430a      	orrs	r2, r1
 80071b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80071b6:	e023      	b.n	8007200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68b9      	ldr	r1, [r7, #8]
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 fc1a 	bl	80079f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	021a      	lsls	r2, r3, #8
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80071f8:	e002      	b.n	8007200 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	75fb      	strb	r3, [r7, #23]
      break;
 80071fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007208:	7dfb      	ldrb	r3, [r7, #23]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3718      	adds	r7, #24
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop

08007214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007228:	2b01      	cmp	r3, #1
 800722a:	d101      	bne.n	8007230 <HAL_TIM_ConfigClockSource+0x1c>
 800722c:	2302      	movs	r3, #2
 800722e:	e0b6      	b.n	800739e <HAL_TIM_ConfigClockSource+0x18a>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2202      	movs	r2, #2
 800723c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800724e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800725a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800726c:	d03e      	beq.n	80072ec <HAL_TIM_ConfigClockSource+0xd8>
 800726e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007272:	f200 8087 	bhi.w	8007384 <HAL_TIM_ConfigClockSource+0x170>
 8007276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800727a:	f000 8086 	beq.w	800738a <HAL_TIM_ConfigClockSource+0x176>
 800727e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007282:	d87f      	bhi.n	8007384 <HAL_TIM_ConfigClockSource+0x170>
 8007284:	2b70      	cmp	r3, #112	; 0x70
 8007286:	d01a      	beq.n	80072be <HAL_TIM_ConfigClockSource+0xaa>
 8007288:	2b70      	cmp	r3, #112	; 0x70
 800728a:	d87b      	bhi.n	8007384 <HAL_TIM_ConfigClockSource+0x170>
 800728c:	2b60      	cmp	r3, #96	; 0x60
 800728e:	d050      	beq.n	8007332 <HAL_TIM_ConfigClockSource+0x11e>
 8007290:	2b60      	cmp	r3, #96	; 0x60
 8007292:	d877      	bhi.n	8007384 <HAL_TIM_ConfigClockSource+0x170>
 8007294:	2b50      	cmp	r3, #80	; 0x50
 8007296:	d03c      	beq.n	8007312 <HAL_TIM_ConfigClockSource+0xfe>
 8007298:	2b50      	cmp	r3, #80	; 0x50
 800729a:	d873      	bhi.n	8007384 <HAL_TIM_ConfigClockSource+0x170>
 800729c:	2b40      	cmp	r3, #64	; 0x40
 800729e:	d058      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x13e>
 80072a0:	2b40      	cmp	r3, #64	; 0x40
 80072a2:	d86f      	bhi.n	8007384 <HAL_TIM_ConfigClockSource+0x170>
 80072a4:	2b30      	cmp	r3, #48	; 0x30
 80072a6:	d064      	beq.n	8007372 <HAL_TIM_ConfigClockSource+0x15e>
 80072a8:	2b30      	cmp	r3, #48	; 0x30
 80072aa:	d86b      	bhi.n	8007384 <HAL_TIM_ConfigClockSource+0x170>
 80072ac:	2b20      	cmp	r3, #32
 80072ae:	d060      	beq.n	8007372 <HAL_TIM_ConfigClockSource+0x15e>
 80072b0:	2b20      	cmp	r3, #32
 80072b2:	d867      	bhi.n	8007384 <HAL_TIM_ConfigClockSource+0x170>
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d05c      	beq.n	8007372 <HAL_TIM_ConfigClockSource+0x15e>
 80072b8:	2b10      	cmp	r3, #16
 80072ba:	d05a      	beq.n	8007372 <HAL_TIM_ConfigClockSource+0x15e>
 80072bc:	e062      	b.n	8007384 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6818      	ldr	r0, [r3, #0]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	6899      	ldr	r1, [r3, #8]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	685a      	ldr	r2, [r3, #4]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f000 fc73 	bl	8007bb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80072e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	609a      	str	r2, [r3, #8]
      break;
 80072ea:	e04f      	b.n	800738c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6818      	ldr	r0, [r3, #0]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	6899      	ldr	r1, [r3, #8]
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	685a      	ldr	r2, [r3, #4]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	f000 fc5c 	bl	8007bb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	689a      	ldr	r2, [r3, #8]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800730e:	609a      	str	r2, [r3, #8]
      break;
 8007310:	e03c      	b.n	800738c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6818      	ldr	r0, [r3, #0]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	6859      	ldr	r1, [r3, #4]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	461a      	mov	r2, r3
 8007320:	f000 fbd0 	bl	8007ac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2150      	movs	r1, #80	; 0x50
 800732a:	4618      	mov	r0, r3
 800732c:	f000 fc29 	bl	8007b82 <TIM_ITRx_SetConfig>
      break;
 8007330:	e02c      	b.n	800738c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6818      	ldr	r0, [r3, #0]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	6859      	ldr	r1, [r3, #4]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	461a      	mov	r2, r3
 8007340:	f000 fbef 	bl	8007b22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2160      	movs	r1, #96	; 0x60
 800734a:	4618      	mov	r0, r3
 800734c:	f000 fc19 	bl	8007b82 <TIM_ITRx_SetConfig>
      break;
 8007350:	e01c      	b.n	800738c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6818      	ldr	r0, [r3, #0]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	6859      	ldr	r1, [r3, #4]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	461a      	mov	r2, r3
 8007360:	f000 fbb0 	bl	8007ac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2140      	movs	r1, #64	; 0x40
 800736a:	4618      	mov	r0, r3
 800736c:	f000 fc09 	bl	8007b82 <TIM_ITRx_SetConfig>
      break;
 8007370:	e00c      	b.n	800738c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4619      	mov	r1, r3
 800737c:	4610      	mov	r0, r2
 800737e:	f000 fc00 	bl	8007b82 <TIM_ITRx_SetConfig>
      break;
 8007382:	e003      	b.n	800738c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	73fb      	strb	r3, [r7, #15]
      break;
 8007388:	e000      	b.n	800738c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800738a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800739c:	7bfb      	ldrb	r3, [r7, #15]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b083      	sub	sp, #12
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073ae:	bf00      	nop
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b083      	sub	sp, #12
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073c2:	bf00      	nop
 80073c4:	370c      	adds	r7, #12
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b083      	sub	sp, #12
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073d6:	bf00      	nop
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b083      	sub	sp, #12
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073ea:	bf00      	nop
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
	...

080073f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a3c      	ldr	r2, [pc, #240]	; (80074fc <TIM_Base_SetConfig+0x104>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d00f      	beq.n	8007430 <TIM_Base_SetConfig+0x38>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007416:	d00b      	beq.n	8007430 <TIM_Base_SetConfig+0x38>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a39      	ldr	r2, [pc, #228]	; (8007500 <TIM_Base_SetConfig+0x108>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d007      	beq.n	8007430 <TIM_Base_SetConfig+0x38>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a38      	ldr	r2, [pc, #224]	; (8007504 <TIM_Base_SetConfig+0x10c>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d003      	beq.n	8007430 <TIM_Base_SetConfig+0x38>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a37      	ldr	r2, [pc, #220]	; (8007508 <TIM_Base_SetConfig+0x110>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d108      	bne.n	8007442 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	4313      	orrs	r3, r2
 8007440:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a2d      	ldr	r2, [pc, #180]	; (80074fc <TIM_Base_SetConfig+0x104>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d01b      	beq.n	8007482 <TIM_Base_SetConfig+0x8a>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007450:	d017      	beq.n	8007482 <TIM_Base_SetConfig+0x8a>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a2a      	ldr	r2, [pc, #168]	; (8007500 <TIM_Base_SetConfig+0x108>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d013      	beq.n	8007482 <TIM_Base_SetConfig+0x8a>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a29      	ldr	r2, [pc, #164]	; (8007504 <TIM_Base_SetConfig+0x10c>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d00f      	beq.n	8007482 <TIM_Base_SetConfig+0x8a>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a28      	ldr	r2, [pc, #160]	; (8007508 <TIM_Base_SetConfig+0x110>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d00b      	beq.n	8007482 <TIM_Base_SetConfig+0x8a>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a27      	ldr	r2, [pc, #156]	; (800750c <TIM_Base_SetConfig+0x114>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d007      	beq.n	8007482 <TIM_Base_SetConfig+0x8a>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a26      	ldr	r2, [pc, #152]	; (8007510 <TIM_Base_SetConfig+0x118>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d003      	beq.n	8007482 <TIM_Base_SetConfig+0x8a>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a25      	ldr	r2, [pc, #148]	; (8007514 <TIM_Base_SetConfig+0x11c>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d108      	bne.n	8007494 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	4313      	orrs	r3, r2
 8007492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	4313      	orrs	r3, r2
 80074a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	689a      	ldr	r2, [r3, #8]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a10      	ldr	r2, [pc, #64]	; (80074fc <TIM_Base_SetConfig+0x104>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d00f      	beq.n	80074e0 <TIM_Base_SetConfig+0xe8>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a11      	ldr	r2, [pc, #68]	; (8007508 <TIM_Base_SetConfig+0x110>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d00b      	beq.n	80074e0 <TIM_Base_SetConfig+0xe8>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a10      	ldr	r2, [pc, #64]	; (800750c <TIM_Base_SetConfig+0x114>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d007      	beq.n	80074e0 <TIM_Base_SetConfig+0xe8>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a0f      	ldr	r2, [pc, #60]	; (8007510 <TIM_Base_SetConfig+0x118>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d003      	beq.n	80074e0 <TIM_Base_SetConfig+0xe8>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a0e      	ldr	r2, [pc, #56]	; (8007514 <TIM_Base_SetConfig+0x11c>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d103      	bne.n	80074e8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	691a      	ldr	r2, [r3, #16]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	615a      	str	r2, [r3, #20]
}
 80074ee:	bf00      	nop
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	40012c00 	.word	0x40012c00
 8007500:	40000400 	.word	0x40000400
 8007504:	40000800 	.word	0x40000800
 8007508:	40013400 	.word	0x40013400
 800750c:	40014000 	.word	0x40014000
 8007510:	40014400 	.word	0x40014400
 8007514:	40014800 	.word	0x40014800

08007518 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007518:	b480      	push	{r7}
 800751a:	b087      	sub	sp, #28
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	f023 0201 	bic.w	r2, r3, #1
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800754a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f023 0303 	bic.w	r3, r3, #3
 8007552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	4313      	orrs	r3, r2
 800755c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	f023 0302 	bic.w	r3, r3, #2
 8007564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	4313      	orrs	r3, r2
 800756e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a2c      	ldr	r2, [pc, #176]	; (8007624 <TIM_OC1_SetConfig+0x10c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d00f      	beq.n	8007598 <TIM_OC1_SetConfig+0x80>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a2b      	ldr	r2, [pc, #172]	; (8007628 <TIM_OC1_SetConfig+0x110>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d00b      	beq.n	8007598 <TIM_OC1_SetConfig+0x80>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a2a      	ldr	r2, [pc, #168]	; (800762c <TIM_OC1_SetConfig+0x114>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d007      	beq.n	8007598 <TIM_OC1_SetConfig+0x80>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a29      	ldr	r2, [pc, #164]	; (8007630 <TIM_OC1_SetConfig+0x118>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d003      	beq.n	8007598 <TIM_OC1_SetConfig+0x80>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a28      	ldr	r2, [pc, #160]	; (8007634 <TIM_OC1_SetConfig+0x11c>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d10c      	bne.n	80075b2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	f023 0308 	bic.w	r3, r3, #8
 800759e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f023 0304 	bic.w	r3, r3, #4
 80075b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a1b      	ldr	r2, [pc, #108]	; (8007624 <TIM_OC1_SetConfig+0x10c>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d00f      	beq.n	80075da <TIM_OC1_SetConfig+0xc2>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a1a      	ldr	r2, [pc, #104]	; (8007628 <TIM_OC1_SetConfig+0x110>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d00b      	beq.n	80075da <TIM_OC1_SetConfig+0xc2>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a19      	ldr	r2, [pc, #100]	; (800762c <TIM_OC1_SetConfig+0x114>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d007      	beq.n	80075da <TIM_OC1_SetConfig+0xc2>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a18      	ldr	r2, [pc, #96]	; (8007630 <TIM_OC1_SetConfig+0x118>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d003      	beq.n	80075da <TIM_OC1_SetConfig+0xc2>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a17      	ldr	r2, [pc, #92]	; (8007634 <TIM_OC1_SetConfig+0x11c>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d111      	bne.n	80075fe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	693a      	ldr	r2, [r7, #16]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	621a      	str	r2, [r3, #32]
}
 8007618:	bf00      	nop
 800761a:	371c      	adds	r7, #28
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr
 8007624:	40012c00 	.word	0x40012c00
 8007628:	40013400 	.word	0x40013400
 800762c:	40014000 	.word	0x40014000
 8007630:	40014400 	.word	0x40014400
 8007634:	40014800 	.word	0x40014800

08007638 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	f023 0210 	bic.w	r2, r3, #16
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800766a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	021b      	lsls	r3, r3, #8
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	4313      	orrs	r3, r2
 800767e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f023 0320 	bic.w	r3, r3, #32
 8007686:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	011b      	lsls	r3, r3, #4
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	4313      	orrs	r3, r2
 8007692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a28      	ldr	r2, [pc, #160]	; (8007738 <TIM_OC2_SetConfig+0x100>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d003      	beq.n	80076a4 <TIM_OC2_SetConfig+0x6c>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a27      	ldr	r2, [pc, #156]	; (800773c <TIM_OC2_SetConfig+0x104>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d10d      	bne.n	80076c0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	011b      	lsls	r3, r3, #4
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a1d      	ldr	r2, [pc, #116]	; (8007738 <TIM_OC2_SetConfig+0x100>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d00f      	beq.n	80076e8 <TIM_OC2_SetConfig+0xb0>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a1c      	ldr	r2, [pc, #112]	; (800773c <TIM_OC2_SetConfig+0x104>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d00b      	beq.n	80076e8 <TIM_OC2_SetConfig+0xb0>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a1b      	ldr	r2, [pc, #108]	; (8007740 <TIM_OC2_SetConfig+0x108>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d007      	beq.n	80076e8 <TIM_OC2_SetConfig+0xb0>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a1a      	ldr	r2, [pc, #104]	; (8007744 <TIM_OC2_SetConfig+0x10c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d003      	beq.n	80076e8 <TIM_OC2_SetConfig+0xb0>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a19      	ldr	r2, [pc, #100]	; (8007748 <TIM_OC2_SetConfig+0x110>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d113      	bne.n	8007710 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076ee:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076f6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	4313      	orrs	r3, r2
 8007702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	4313      	orrs	r3, r2
 800770e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	621a      	str	r2, [r3, #32]
}
 800772a:	bf00      	nop
 800772c:	371c      	adds	r7, #28
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	40012c00 	.word	0x40012c00
 800773c:	40013400 	.word	0x40013400
 8007740:	40014000 	.word	0x40014000
 8007744:	40014400 	.word	0x40014400
 8007748:	40014800 	.word	0x40014800

0800774c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800774c:	b480      	push	{r7}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	69db      	ldr	r3, [r3, #28]
 8007772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800777a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800777e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f023 0303 	bic.w	r3, r3, #3
 8007786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	4313      	orrs	r3, r2
 8007790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	021b      	lsls	r3, r3, #8
 80077a0:	697a      	ldr	r2, [r7, #20]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a27      	ldr	r2, [pc, #156]	; (8007848 <TIM_OC3_SetConfig+0xfc>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d003      	beq.n	80077b6 <TIM_OC3_SetConfig+0x6a>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a26      	ldr	r2, [pc, #152]	; (800784c <TIM_OC3_SetConfig+0x100>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d10d      	bne.n	80077d2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	021b      	lsls	r3, r3, #8
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077d0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a1c      	ldr	r2, [pc, #112]	; (8007848 <TIM_OC3_SetConfig+0xfc>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d00f      	beq.n	80077fa <TIM_OC3_SetConfig+0xae>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a1b      	ldr	r2, [pc, #108]	; (800784c <TIM_OC3_SetConfig+0x100>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d00b      	beq.n	80077fa <TIM_OC3_SetConfig+0xae>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a1a      	ldr	r2, [pc, #104]	; (8007850 <TIM_OC3_SetConfig+0x104>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d007      	beq.n	80077fa <TIM_OC3_SetConfig+0xae>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a19      	ldr	r2, [pc, #100]	; (8007854 <TIM_OC3_SetConfig+0x108>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d003      	beq.n	80077fa <TIM_OC3_SetConfig+0xae>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a18      	ldr	r2, [pc, #96]	; (8007858 <TIM_OC3_SetConfig+0x10c>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d113      	bne.n	8007822 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	011b      	lsls	r3, r3, #4
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	4313      	orrs	r3, r2
 8007814:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	011b      	lsls	r3, r3, #4
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	4313      	orrs	r3, r2
 8007820:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	693a      	ldr	r2, [r7, #16]
 8007826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	621a      	str	r2, [r3, #32]
}
 800783c:	bf00      	nop
 800783e:	371c      	adds	r7, #28
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr
 8007848:	40012c00 	.word	0x40012c00
 800784c:	40013400 	.word	0x40013400
 8007850:	40014000 	.word	0x40014000
 8007854:	40014400 	.word	0x40014400
 8007858:	40014800 	.word	0x40014800

0800785c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800785c:	b480      	push	{r7}
 800785e:	b087      	sub	sp, #28
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800788a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800788e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	021b      	lsls	r3, r3, #8
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	031b      	lsls	r3, r3, #12
 80078b2:	693a      	ldr	r2, [r7, #16]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a18      	ldr	r2, [pc, #96]	; (800791c <TIM_OC4_SetConfig+0xc0>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d00f      	beq.n	80078e0 <TIM_OC4_SetConfig+0x84>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a17      	ldr	r2, [pc, #92]	; (8007920 <TIM_OC4_SetConfig+0xc4>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d00b      	beq.n	80078e0 <TIM_OC4_SetConfig+0x84>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a16      	ldr	r2, [pc, #88]	; (8007924 <TIM_OC4_SetConfig+0xc8>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d007      	beq.n	80078e0 <TIM_OC4_SetConfig+0x84>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a15      	ldr	r2, [pc, #84]	; (8007928 <TIM_OC4_SetConfig+0xcc>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d003      	beq.n	80078e0 <TIM_OC4_SetConfig+0x84>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a14      	ldr	r2, [pc, #80]	; (800792c <TIM_OC4_SetConfig+0xd0>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d109      	bne.n	80078f4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	019b      	lsls	r3, r3, #6
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	621a      	str	r2, [r3, #32]
}
 800790e:	bf00      	nop
 8007910:	371c      	adds	r7, #28
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	40012c00 	.word	0x40012c00
 8007920:	40013400 	.word	0x40013400
 8007924:	40014000 	.word	0x40014000
 8007928:	40014400 	.word	0x40014400
 800792c:	40014800 	.word	0x40014800

08007930 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007930:	b480      	push	{r7}
 8007932:	b087      	sub	sp, #28
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a1b      	ldr	r3, [r3, #32]
 800793e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800795e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	4313      	orrs	r3, r2
 800796c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007974:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	041b      	lsls	r3, r3, #16
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	4313      	orrs	r3, r2
 8007980:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a17      	ldr	r2, [pc, #92]	; (80079e4 <TIM_OC5_SetConfig+0xb4>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d00f      	beq.n	80079aa <TIM_OC5_SetConfig+0x7a>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a16      	ldr	r2, [pc, #88]	; (80079e8 <TIM_OC5_SetConfig+0xb8>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d00b      	beq.n	80079aa <TIM_OC5_SetConfig+0x7a>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a15      	ldr	r2, [pc, #84]	; (80079ec <TIM_OC5_SetConfig+0xbc>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d007      	beq.n	80079aa <TIM_OC5_SetConfig+0x7a>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a14      	ldr	r2, [pc, #80]	; (80079f0 <TIM_OC5_SetConfig+0xc0>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d003      	beq.n	80079aa <TIM_OC5_SetConfig+0x7a>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a13      	ldr	r2, [pc, #76]	; (80079f4 <TIM_OC5_SetConfig+0xc4>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d109      	bne.n	80079be <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	021b      	lsls	r3, r3, #8
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	685a      	ldr	r2, [r3, #4]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	621a      	str	r2, [r3, #32]
}
 80079d8:	bf00      	nop
 80079da:	371c      	adds	r7, #28
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	40012c00 	.word	0x40012c00
 80079e8:	40013400 	.word	0x40013400
 80079ec:	40014000 	.word	0x40014000
 80079f0:	40014400 	.word	0x40014400
 80079f4:	40014800 	.word	0x40014800

080079f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b087      	sub	sp, #28
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a1b      	ldr	r3, [r3, #32]
 8007a06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	021b      	lsls	r3, r3, #8
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	051b      	lsls	r3, r3, #20
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a18      	ldr	r2, [pc, #96]	; (8007ab0 <TIM_OC6_SetConfig+0xb8>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d00f      	beq.n	8007a74 <TIM_OC6_SetConfig+0x7c>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a17      	ldr	r2, [pc, #92]	; (8007ab4 <TIM_OC6_SetConfig+0xbc>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d00b      	beq.n	8007a74 <TIM_OC6_SetConfig+0x7c>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a16      	ldr	r2, [pc, #88]	; (8007ab8 <TIM_OC6_SetConfig+0xc0>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d007      	beq.n	8007a74 <TIM_OC6_SetConfig+0x7c>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a15      	ldr	r2, [pc, #84]	; (8007abc <TIM_OC6_SetConfig+0xc4>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d003      	beq.n	8007a74 <TIM_OC6_SetConfig+0x7c>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a14      	ldr	r2, [pc, #80]	; (8007ac0 <TIM_OC6_SetConfig+0xc8>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d109      	bne.n	8007a88 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	029b      	lsls	r3, r3, #10
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	685a      	ldr	r2, [r3, #4]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	621a      	str	r2, [r3, #32]
}
 8007aa2:	bf00      	nop
 8007aa4:	371c      	adds	r7, #28
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	40012c00 	.word	0x40012c00
 8007ab4:	40013400 	.word	0x40013400
 8007ab8:	40014000 	.word	0x40014000
 8007abc:	40014400 	.word	0x40014400
 8007ac0:	40014800 	.word	0x40014800

08007ac4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6a1b      	ldr	r3, [r3, #32]
 8007ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	f023 0201 	bic.w	r2, r3, #1
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	011b      	lsls	r3, r3, #4
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f023 030a 	bic.w	r3, r3, #10
 8007b00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	621a      	str	r2, [r3, #32]
}
 8007b16:	bf00      	nop
 8007b18:	371c      	adds	r7, #28
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr

08007b22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b087      	sub	sp, #28
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	f023 0210 	bic.w	r2, r3, #16
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6a1b      	ldr	r3, [r3, #32]
 8007b44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	031b      	lsls	r3, r3, #12
 8007b52:	697a      	ldr	r2, [r7, #20]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	011b      	lsls	r3, r3, #4
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	697a      	ldr	r2, [r7, #20]
 8007b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	621a      	str	r2, [r3, #32]
}
 8007b76:	bf00      	nop
 8007b78:	371c      	adds	r7, #28
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr

08007b82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b82:	b480      	push	{r7}
 8007b84:	b085      	sub	sp, #20
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	f043 0307 	orr.w	r3, r3, #7
 8007ba4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	609a      	str	r2, [r3, #8]
}
 8007bac:	bf00      	nop
 8007bae:	3714      	adds	r7, #20
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
 8007bc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	021a      	lsls	r2, r3, #8
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	431a      	orrs	r2, r3
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	609a      	str	r2, [r3, #8]
}
 8007bec:	bf00      	nop
 8007bee:	371c      	adds	r7, #28
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b087      	sub	sp, #28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	f003 031f 	and.w	r3, r3, #31
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6a1a      	ldr	r2, [r3, #32]
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	43db      	mvns	r3, r3
 8007c1a:	401a      	ands	r2, r3
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6a1a      	ldr	r2, [r3, #32]
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	f003 031f 	and.w	r3, r3, #31
 8007c2a:	6879      	ldr	r1, [r7, #4]
 8007c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c30:	431a      	orrs	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	621a      	str	r2, [r3, #32]
}
 8007c36:	bf00      	nop
 8007c38:	371c      	adds	r7, #28
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
	...

08007c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d101      	bne.n	8007c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c58:	2302      	movs	r3, #2
 8007c5a:	e063      	b.n	8007d24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2202      	movs	r2, #2
 8007c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a2b      	ldr	r2, [pc, #172]	; (8007d30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d004      	beq.n	8007c90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a2a      	ldr	r2, [pc, #168]	; (8007d34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d108      	bne.n	8007ca2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007c96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a1b      	ldr	r2, [pc, #108]	; (8007d30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d018      	beq.n	8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cce:	d013      	beq.n	8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a18      	ldr	r2, [pc, #96]	; (8007d38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d00e      	beq.n	8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a17      	ldr	r2, [pc, #92]	; (8007d3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d009      	beq.n	8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a12      	ldr	r2, [pc, #72]	; (8007d34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d004      	beq.n	8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a13      	ldr	r2, [pc, #76]	; (8007d40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d10c      	bne.n	8007d12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cfe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	40012c00 	.word	0x40012c00
 8007d34:	40013400 	.word	0x40013400
 8007d38:	40000400 	.word	0x40000400
 8007d3c:	40000800 	.word	0x40000800
 8007d40:	40014000 	.word	0x40014000

08007d44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d4c:	bf00      	nop
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e040      	b.n	8007e14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d106      	bne.n	8007da8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f7fa fc30 	bl	8002608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2224      	movs	r2, #36	; 0x24
 8007dac:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f022 0201 	bic.w	r2, r2, #1
 8007dbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fc5e 	bl	8008680 <UART_SetConfig>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d101      	bne.n	8007dce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e022      	b.n	8007e14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d002      	beq.n	8007ddc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fe26 	bl	8008a28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	685a      	ldr	r2, [r3, #4]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007dea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689a      	ldr	r2, [r3, #8]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007dfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f042 0201 	orr.w	r2, r2, #1
 8007e0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fead 	bl	8008b6c <UART_CheckIdleState>
 8007e12:	4603      	mov	r3, r0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b08a      	sub	sp, #40	; 0x28
 8007e20:	af02      	add	r7, sp, #8
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	603b      	str	r3, [r7, #0]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e30:	2b20      	cmp	r3, #32
 8007e32:	d178      	bne.n	8007f26 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d002      	beq.n	8007e40 <HAL_UART_Transmit+0x24>
 8007e3a:	88fb      	ldrh	r3, [r7, #6]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d101      	bne.n	8007e44 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e071      	b.n	8007f28 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2221      	movs	r2, #33	; 0x21
 8007e50:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e52:	f7fa ff81 	bl	8002d58 <HAL_GetTick>
 8007e56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	88fa      	ldrh	r2, [r7, #6]
 8007e5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	88fa      	ldrh	r2, [r7, #6]
 8007e64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e70:	d108      	bne.n	8007e84 <HAL_UART_Transmit+0x68>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d104      	bne.n	8007e84 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	61bb      	str	r3, [r7, #24]
 8007e82:	e003      	b.n	8007e8c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e8c:	e030      	b.n	8007ef0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	2200      	movs	r2, #0
 8007e96:	2180      	movs	r1, #128	; 0x80
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f000 ff0f 	bl	8008cbc <UART_WaitOnFlagUntilTimeout>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d004      	beq.n	8007eae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e03c      	b.n	8007f28 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10b      	bne.n	8007ecc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	881a      	ldrh	r2, [r3, #0]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ec0:	b292      	uxth	r2, r2
 8007ec2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	3302      	adds	r3, #2
 8007ec8:	61bb      	str	r3, [r7, #24]
 8007eca:	e008      	b.n	8007ede <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	781a      	ldrb	r2, [r3, #0]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	b292      	uxth	r2, r2
 8007ed6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	3301      	adds	r3, #1
 8007edc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1c8      	bne.n	8007e8e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	2200      	movs	r2, #0
 8007f04:	2140      	movs	r1, #64	; 0x40
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f000 fed8 	bl	8008cbc <UART_WaitOnFlagUntilTimeout>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d004      	beq.n	8007f1c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2220      	movs	r2, #32
 8007f16:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e005      	b.n	8007f28 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2220      	movs	r2, #32
 8007f20:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	e000      	b.n	8007f28 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007f26:	2302      	movs	r3, #2
  }
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3720      	adds	r7, #32
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b08b      	sub	sp, #44	; 0x2c
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f42:	2b20      	cmp	r3, #32
 8007f44:	d147      	bne.n	8007fd6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d002      	beq.n	8007f52 <HAL_UART_Transmit_IT+0x22>
 8007f4c:	88fb      	ldrh	r3, [r7, #6]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e040      	b.n	8007fd8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	88fa      	ldrh	r2, [r7, #6]
 8007f60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	88fa      	ldrh	r2, [r7, #6]
 8007f68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2221      	movs	r2, #33	; 0x21
 8007f7e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f88:	d107      	bne.n	8007f9a <HAL_UART_Transmit_IT+0x6a>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d103      	bne.n	8007f9a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	4a13      	ldr	r2, [pc, #76]	; (8007fe4 <HAL_UART_Transmit_IT+0xb4>)
 8007f96:	66da      	str	r2, [r3, #108]	; 0x6c
 8007f98:	e002      	b.n	8007fa0 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	4a12      	ldr	r2, [pc, #72]	; (8007fe8 <HAL_UART_Transmit_IT+0xb8>)
 8007f9e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	e853 3f00 	ldrex	r3, [r3]
 8007fac:	613b      	str	r3, [r7, #16]
   return(result);
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbe:	623b      	str	r3, [r7, #32]
 8007fc0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc2:	69f9      	ldr	r1, [r7, #28]
 8007fc4:	6a3a      	ldr	r2, [r7, #32]
 8007fc6:	e841 2300 	strex	r3, r2, [r1]
 8007fca:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1e6      	bne.n	8007fa0 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	e000      	b.n	8007fd8 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007fd6:	2302      	movs	r3, #2
  }
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	372c      	adds	r7, #44	; 0x2c
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr
 8007fe4:	080090a1 	.word	0x080090a1
 8007fe8:	08008fe9 	.word	0x08008fe9

08007fec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b08a      	sub	sp, #40	; 0x28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008000:	2b20      	cmp	r3, #32
 8008002:	d132      	bne.n	800806a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d002      	beq.n	8008010 <HAL_UART_Receive_IT+0x24>
 800800a:	88fb      	ldrh	r3, [r7, #6]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d101      	bne.n	8008014 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e02b      	b.n	800806c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d018      	beq.n	800805a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	e853 3f00 	ldrex	r3, [r3]
 8008034:	613b      	str	r3, [r7, #16]
   return(result);
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800803c:	627b      	str	r3, [r7, #36]	; 0x24
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	461a      	mov	r2, r3
 8008044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008046:	623b      	str	r3, [r7, #32]
 8008048:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804a:	69f9      	ldr	r1, [r7, #28]
 800804c:	6a3a      	ldr	r2, [r7, #32]
 800804e:	e841 2300 	strex	r3, r2, [r1]
 8008052:	61bb      	str	r3, [r7, #24]
   return(result);
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1e6      	bne.n	8008028 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800805a:	88fb      	ldrh	r3, [r7, #6]
 800805c:	461a      	mov	r2, r3
 800805e:	68b9      	ldr	r1, [r7, #8]
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f000 fe93 	bl	8008d8c <UART_Start_Receive_IT>
 8008066:	4603      	mov	r3, r0
 8008068:	e000      	b.n	800806c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800806a:	2302      	movs	r3, #2
  }
}
 800806c:	4618      	mov	r0, r3
 800806e:	3728      	adds	r7, #40	; 0x28
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b0ba      	sub	sp, #232	; 0xe8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800809a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800809e:	f640 030f 	movw	r3, #2063	; 0x80f
 80080a2:	4013      	ands	r3, r2
 80080a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80080a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d115      	bne.n	80080dc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80080b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080b4:	f003 0320 	and.w	r3, r3, #32
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00f      	beq.n	80080dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80080bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080c0:	f003 0320 	and.w	r3, r3, #32
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d009      	beq.n	80080dc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 82ab 	beq.w	8008628 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	4798      	blx	r3
      }
      return;
 80080da:	e2a5      	b.n	8008628 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80080dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f000 8117 	beq.w	8008314 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80080e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d106      	bne.n	8008100 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80080f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80080f6:	4b85      	ldr	r3, [pc, #532]	; (800830c <HAL_UART_IRQHandler+0x298>)
 80080f8:	4013      	ands	r3, r2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f000 810a 	beq.w	8008314 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008104:	f003 0301 	and.w	r3, r3, #1
 8008108:	2b00      	cmp	r3, #0
 800810a:	d011      	beq.n	8008130 <HAL_UART_IRQHandler+0xbc>
 800810c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00b      	beq.n	8008130 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2201      	movs	r2, #1
 800811e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008126:	f043 0201 	orr.w	r2, r3, #1
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008134:	f003 0302 	and.w	r3, r3, #2
 8008138:	2b00      	cmp	r3, #0
 800813a:	d011      	beq.n	8008160 <HAL_UART_IRQHandler+0xec>
 800813c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008140:	f003 0301 	and.w	r3, r3, #1
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00b      	beq.n	8008160 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2202      	movs	r2, #2
 800814e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008156:	f043 0204 	orr.w	r2, r3, #4
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008164:	f003 0304 	and.w	r3, r3, #4
 8008168:	2b00      	cmp	r3, #0
 800816a:	d011      	beq.n	8008190 <HAL_UART_IRQHandler+0x11c>
 800816c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008170:	f003 0301 	and.w	r3, r3, #1
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00b      	beq.n	8008190 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2204      	movs	r2, #4
 800817e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008186:	f043 0202 	orr.w	r2, r3, #2
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008194:	f003 0308 	and.w	r3, r3, #8
 8008198:	2b00      	cmp	r3, #0
 800819a:	d017      	beq.n	80081cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800819c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081a0:	f003 0320 	and.w	r3, r3, #32
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d105      	bne.n	80081b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80081a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00b      	beq.n	80081cc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2208      	movs	r2, #8
 80081ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081c2:	f043 0208 	orr.w	r2, r3, #8
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80081cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d012      	beq.n	80081fe <HAL_UART_IRQHandler+0x18a>
 80081d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00c      	beq.n	80081fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081f4:	f043 0220 	orr.w	r2, r3, #32
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 8211 	beq.w	800862c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800820a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800820e:	f003 0320 	and.w	r3, r3, #32
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00d      	beq.n	8008232 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800821a:	f003 0320 	and.w	r3, r3, #32
 800821e:	2b00      	cmp	r3, #0
 8008220:	d007      	beq.n	8008232 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008238:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008246:	2b40      	cmp	r3, #64	; 0x40
 8008248:	d005      	beq.n	8008256 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800824a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800824e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008252:	2b00      	cmp	r3, #0
 8008254:	d04f      	beq.n	80082f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fe4c 	bl	8008ef4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008266:	2b40      	cmp	r3, #64	; 0x40
 8008268:	d141      	bne.n	80082ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	3308      	adds	r3, #8
 8008270:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008274:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008278:	e853 3f00 	ldrex	r3, [r3]
 800827c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008280:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008288:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3308      	adds	r3, #8
 8008292:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008296:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800829a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80082a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80082a6:	e841 2300 	strex	r3, r2, [r1]
 80082aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80082ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1d9      	bne.n	800826a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d013      	beq.n	80082e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082c2:	4a13      	ldr	r2, [pc, #76]	; (8008310 <HAL_UART_IRQHandler+0x29c>)
 80082c4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fc fa84 	bl	80047d8 <HAL_DMA_Abort_IT>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d017      	beq.n	8008306 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80082e0:	4610      	mov	r0, r2
 80082e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082e4:	e00f      	b.n	8008306 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f9b4 	bl	8008654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ec:	e00b      	b.n	8008306 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f9b0 	bl	8008654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082f4:	e007      	b.n	8008306 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f9ac 	bl	8008654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008304:	e192      	b.n	800862c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008306:	bf00      	nop
    return;
 8008308:	e190      	b.n	800862c <HAL_UART_IRQHandler+0x5b8>
 800830a:	bf00      	nop
 800830c:	04000120 	.word	0x04000120
 8008310:	08008fbd 	.word	0x08008fbd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008318:	2b01      	cmp	r3, #1
 800831a:	f040 814b 	bne.w	80085b4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800831e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008322:	f003 0310 	and.w	r3, r3, #16
 8008326:	2b00      	cmp	r3, #0
 8008328:	f000 8144 	beq.w	80085b4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800832c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008330:	f003 0310 	and.w	r3, r3, #16
 8008334:	2b00      	cmp	r3, #0
 8008336:	f000 813d 	beq.w	80085b4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2210      	movs	r2, #16
 8008340:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800834c:	2b40      	cmp	r3, #64	; 0x40
 800834e:	f040 80b5 	bne.w	80084bc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800835e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008362:	2b00      	cmp	r3, #0
 8008364:	f000 8164 	beq.w	8008630 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800836e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008372:	429a      	cmp	r2, r3
 8008374:	f080 815c 	bcs.w	8008630 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800837e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	2b20      	cmp	r3, #32
 800838a:	f000 8086 	beq.w	800849a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008396:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800839a:	e853 3f00 	ldrex	r3, [r3]
 800839e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80083a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	461a      	mov	r2, r3
 80083b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80083bc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80083c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80083c8:	e841 2300 	strex	r3, r2, [r1]
 80083cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80083d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1da      	bne.n	800838e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3308      	adds	r3, #8
 80083de:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083e2:	e853 3f00 	ldrex	r3, [r3]
 80083e6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80083e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083ea:	f023 0301 	bic.w	r3, r3, #1
 80083ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	3308      	adds	r3, #8
 80083f8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80083fc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008400:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008402:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008404:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008408:	e841 2300 	strex	r3, r2, [r1]
 800840c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800840e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008410:	2b00      	cmp	r3, #0
 8008412:	d1e1      	bne.n	80083d8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	3308      	adds	r3, #8
 800841a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800841e:	e853 3f00 	ldrex	r3, [r3]
 8008422:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800842a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	3308      	adds	r3, #8
 8008434:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008438:	66fa      	str	r2, [r7, #108]	; 0x6c
 800843a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800843e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008440:	e841 2300 	strex	r3, r2, [r1]
 8008444:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008446:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1e3      	bne.n	8008414 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2220      	movs	r2, #32
 8008450:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008462:	e853 3f00 	ldrex	r3, [r3]
 8008466:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800846a:	f023 0310 	bic.w	r3, r3, #16
 800846e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	461a      	mov	r2, r3
 8008478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800847c:	65bb      	str	r3, [r7, #88]	; 0x58
 800847e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008480:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008482:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008484:	e841 2300 	strex	r3, r2, [r1]
 8008488:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800848a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1e4      	bne.n	800845a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008494:	4618      	mov	r0, r3
 8008496:	f7fc f966 	bl	8004766 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2202      	movs	r2, #2
 800849e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	4619      	mov	r1, r3
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f8d7 	bl	8008668 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084ba:	e0b9      	b.n	8008630 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	1ad3      	subs	r3, r2, r3
 80084cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f000 80ab 	beq.w	8008634 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80084de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 80a6 	beq.w	8008634 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f0:	e853 3f00 	ldrex	r3, [r3]
 80084f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	461a      	mov	r2, r3
 8008506:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800850a:	647b      	str	r3, [r7, #68]	; 0x44
 800850c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008510:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008512:	e841 2300 	strex	r3, r2, [r1]
 8008516:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1e4      	bne.n	80084e8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3308      	adds	r3, #8
 8008524:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	e853 3f00 	ldrex	r3, [r3]
 800852c:	623b      	str	r3, [r7, #32]
   return(result);
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	f023 0301 	bic.w	r3, r3, #1
 8008534:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3308      	adds	r3, #8
 800853e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008542:	633a      	str	r2, [r7, #48]	; 0x30
 8008544:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008546:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800854a:	e841 2300 	strex	r3, r2, [r1]
 800854e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1e3      	bne.n	800851e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2220      	movs	r2, #32
 800855a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	e853 3f00 	ldrex	r3, [r3]
 8008576:	60fb      	str	r3, [r7, #12]
   return(result);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f023 0310 	bic.w	r3, r3, #16
 800857e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800858c:	61fb      	str	r3, [r7, #28]
 800858e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008590:	69b9      	ldr	r1, [r7, #24]
 8008592:	69fa      	ldr	r2, [r7, #28]
 8008594:	e841 2300 	strex	r3, r2, [r1]
 8008598:	617b      	str	r3, [r7, #20]
   return(result);
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1e4      	bne.n	800856a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2202      	movs	r2, #2
 80085a4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085aa:	4619      	mov	r1, r3
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 f85b 	bl	8008668 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085b2:	e03f      	b.n	8008634 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80085b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00e      	beq.n	80085de <HAL_UART_IRQHandler+0x56a>
 80085c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d008      	beq.n	80085de <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80085d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 ff94 	bl	8009504 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085dc:	e02d      	b.n	800863a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80085de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00e      	beq.n	8008608 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80085ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d008      	beq.n	8008608 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d01c      	beq.n	8008638 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	4798      	blx	r3
    }
    return;
 8008606:	e017      	b.n	8008638 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800860c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008610:	2b00      	cmp	r3, #0
 8008612:	d012      	beq.n	800863a <HAL_UART_IRQHandler+0x5c6>
 8008614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00c      	beq.n	800863a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fd9d 	bl	8009160 <UART_EndTransmit_IT>
    return;
 8008626:	e008      	b.n	800863a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008628:	bf00      	nop
 800862a:	e006      	b.n	800863a <HAL_UART_IRQHandler+0x5c6>
    return;
 800862c:	bf00      	nop
 800862e:	e004      	b.n	800863a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008630:	bf00      	nop
 8008632:	e002      	b.n	800863a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008634:	bf00      	nop
 8008636:	e000      	b.n	800863a <HAL_UART_IRQHandler+0x5c6>
    return;
 8008638:	bf00      	nop
  }

}
 800863a:	37e8      	adds	r7, #232	; 0xe8
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008648:	bf00      	nop
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800865c:	bf00      	nop
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	460b      	mov	r3, r1
 8008672:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b088      	sub	sp, #32
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008688:	2300      	movs	r3, #0
 800868a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	689a      	ldr	r2, [r3, #8]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	431a      	orrs	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	431a      	orrs	r2, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	69db      	ldr	r3, [r3, #28]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80086ae:	f023 030c 	bic.w	r3, r3, #12
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	6812      	ldr	r2, [r2, #0]
 80086b6:	6979      	ldr	r1, [r7, #20]
 80086b8:	430b      	orrs	r3, r1
 80086ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	68da      	ldr	r2, [r3, #12]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	430a      	orrs	r2, r1
 80086d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a1b      	ldr	r3, [r3, #32]
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	4313      	orrs	r3, r2
 80086e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	430a      	orrs	r2, r1
 80086f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4aa7      	ldr	r2, [pc, #668]	; (8008998 <UART_SetConfig+0x318>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d120      	bne.n	8008742 <UART_SetConfig+0xc2>
 8008700:	4ba6      	ldr	r3, [pc, #664]	; (800899c <UART_SetConfig+0x31c>)
 8008702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008704:	f003 0303 	and.w	r3, r3, #3
 8008708:	2b03      	cmp	r3, #3
 800870a:	d817      	bhi.n	800873c <UART_SetConfig+0xbc>
 800870c:	a201      	add	r2, pc, #4	; (adr r2, 8008714 <UART_SetConfig+0x94>)
 800870e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008712:	bf00      	nop
 8008714:	08008725 	.word	0x08008725
 8008718:	08008731 	.word	0x08008731
 800871c:	08008737 	.word	0x08008737
 8008720:	0800872b 	.word	0x0800872b
 8008724:	2301      	movs	r3, #1
 8008726:	77fb      	strb	r3, [r7, #31]
 8008728:	e0b5      	b.n	8008896 <UART_SetConfig+0x216>
 800872a:	2302      	movs	r3, #2
 800872c:	77fb      	strb	r3, [r7, #31]
 800872e:	e0b2      	b.n	8008896 <UART_SetConfig+0x216>
 8008730:	2304      	movs	r3, #4
 8008732:	77fb      	strb	r3, [r7, #31]
 8008734:	e0af      	b.n	8008896 <UART_SetConfig+0x216>
 8008736:	2308      	movs	r3, #8
 8008738:	77fb      	strb	r3, [r7, #31]
 800873a:	e0ac      	b.n	8008896 <UART_SetConfig+0x216>
 800873c:	2310      	movs	r3, #16
 800873e:	77fb      	strb	r3, [r7, #31]
 8008740:	e0a9      	b.n	8008896 <UART_SetConfig+0x216>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a96      	ldr	r2, [pc, #600]	; (80089a0 <UART_SetConfig+0x320>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d124      	bne.n	8008796 <UART_SetConfig+0x116>
 800874c:	4b93      	ldr	r3, [pc, #588]	; (800899c <UART_SetConfig+0x31c>)
 800874e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008750:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008754:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008758:	d011      	beq.n	800877e <UART_SetConfig+0xfe>
 800875a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800875e:	d817      	bhi.n	8008790 <UART_SetConfig+0x110>
 8008760:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008764:	d011      	beq.n	800878a <UART_SetConfig+0x10a>
 8008766:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800876a:	d811      	bhi.n	8008790 <UART_SetConfig+0x110>
 800876c:	2b00      	cmp	r3, #0
 800876e:	d003      	beq.n	8008778 <UART_SetConfig+0xf8>
 8008770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008774:	d006      	beq.n	8008784 <UART_SetConfig+0x104>
 8008776:	e00b      	b.n	8008790 <UART_SetConfig+0x110>
 8008778:	2300      	movs	r3, #0
 800877a:	77fb      	strb	r3, [r7, #31]
 800877c:	e08b      	b.n	8008896 <UART_SetConfig+0x216>
 800877e:	2302      	movs	r3, #2
 8008780:	77fb      	strb	r3, [r7, #31]
 8008782:	e088      	b.n	8008896 <UART_SetConfig+0x216>
 8008784:	2304      	movs	r3, #4
 8008786:	77fb      	strb	r3, [r7, #31]
 8008788:	e085      	b.n	8008896 <UART_SetConfig+0x216>
 800878a:	2308      	movs	r3, #8
 800878c:	77fb      	strb	r3, [r7, #31]
 800878e:	e082      	b.n	8008896 <UART_SetConfig+0x216>
 8008790:	2310      	movs	r3, #16
 8008792:	77fb      	strb	r3, [r7, #31]
 8008794:	e07f      	b.n	8008896 <UART_SetConfig+0x216>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a82      	ldr	r2, [pc, #520]	; (80089a4 <UART_SetConfig+0x324>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d124      	bne.n	80087ea <UART_SetConfig+0x16a>
 80087a0:	4b7e      	ldr	r3, [pc, #504]	; (800899c <UART_SetConfig+0x31c>)
 80087a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80087a8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80087ac:	d011      	beq.n	80087d2 <UART_SetConfig+0x152>
 80087ae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80087b2:	d817      	bhi.n	80087e4 <UART_SetConfig+0x164>
 80087b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80087b8:	d011      	beq.n	80087de <UART_SetConfig+0x15e>
 80087ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80087be:	d811      	bhi.n	80087e4 <UART_SetConfig+0x164>
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d003      	beq.n	80087cc <UART_SetConfig+0x14c>
 80087c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087c8:	d006      	beq.n	80087d8 <UART_SetConfig+0x158>
 80087ca:	e00b      	b.n	80087e4 <UART_SetConfig+0x164>
 80087cc:	2300      	movs	r3, #0
 80087ce:	77fb      	strb	r3, [r7, #31]
 80087d0:	e061      	b.n	8008896 <UART_SetConfig+0x216>
 80087d2:	2302      	movs	r3, #2
 80087d4:	77fb      	strb	r3, [r7, #31]
 80087d6:	e05e      	b.n	8008896 <UART_SetConfig+0x216>
 80087d8:	2304      	movs	r3, #4
 80087da:	77fb      	strb	r3, [r7, #31]
 80087dc:	e05b      	b.n	8008896 <UART_SetConfig+0x216>
 80087de:	2308      	movs	r3, #8
 80087e0:	77fb      	strb	r3, [r7, #31]
 80087e2:	e058      	b.n	8008896 <UART_SetConfig+0x216>
 80087e4:	2310      	movs	r3, #16
 80087e6:	77fb      	strb	r3, [r7, #31]
 80087e8:	e055      	b.n	8008896 <UART_SetConfig+0x216>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a6e      	ldr	r2, [pc, #440]	; (80089a8 <UART_SetConfig+0x328>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d124      	bne.n	800883e <UART_SetConfig+0x1be>
 80087f4:	4b69      	ldr	r3, [pc, #420]	; (800899c <UART_SetConfig+0x31c>)
 80087f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80087fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008800:	d011      	beq.n	8008826 <UART_SetConfig+0x1a6>
 8008802:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008806:	d817      	bhi.n	8008838 <UART_SetConfig+0x1b8>
 8008808:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800880c:	d011      	beq.n	8008832 <UART_SetConfig+0x1b2>
 800880e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008812:	d811      	bhi.n	8008838 <UART_SetConfig+0x1b8>
 8008814:	2b00      	cmp	r3, #0
 8008816:	d003      	beq.n	8008820 <UART_SetConfig+0x1a0>
 8008818:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800881c:	d006      	beq.n	800882c <UART_SetConfig+0x1ac>
 800881e:	e00b      	b.n	8008838 <UART_SetConfig+0x1b8>
 8008820:	2300      	movs	r3, #0
 8008822:	77fb      	strb	r3, [r7, #31]
 8008824:	e037      	b.n	8008896 <UART_SetConfig+0x216>
 8008826:	2302      	movs	r3, #2
 8008828:	77fb      	strb	r3, [r7, #31]
 800882a:	e034      	b.n	8008896 <UART_SetConfig+0x216>
 800882c:	2304      	movs	r3, #4
 800882e:	77fb      	strb	r3, [r7, #31]
 8008830:	e031      	b.n	8008896 <UART_SetConfig+0x216>
 8008832:	2308      	movs	r3, #8
 8008834:	77fb      	strb	r3, [r7, #31]
 8008836:	e02e      	b.n	8008896 <UART_SetConfig+0x216>
 8008838:	2310      	movs	r3, #16
 800883a:	77fb      	strb	r3, [r7, #31]
 800883c:	e02b      	b.n	8008896 <UART_SetConfig+0x216>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a5a      	ldr	r2, [pc, #360]	; (80089ac <UART_SetConfig+0x32c>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d124      	bne.n	8008892 <UART_SetConfig+0x212>
 8008848:	4b54      	ldr	r3, [pc, #336]	; (800899c <UART_SetConfig+0x31c>)
 800884a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008850:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008854:	d011      	beq.n	800887a <UART_SetConfig+0x1fa>
 8008856:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800885a:	d817      	bhi.n	800888c <UART_SetConfig+0x20c>
 800885c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008860:	d011      	beq.n	8008886 <UART_SetConfig+0x206>
 8008862:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008866:	d811      	bhi.n	800888c <UART_SetConfig+0x20c>
 8008868:	2b00      	cmp	r3, #0
 800886a:	d003      	beq.n	8008874 <UART_SetConfig+0x1f4>
 800886c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008870:	d006      	beq.n	8008880 <UART_SetConfig+0x200>
 8008872:	e00b      	b.n	800888c <UART_SetConfig+0x20c>
 8008874:	2300      	movs	r3, #0
 8008876:	77fb      	strb	r3, [r7, #31]
 8008878:	e00d      	b.n	8008896 <UART_SetConfig+0x216>
 800887a:	2302      	movs	r3, #2
 800887c:	77fb      	strb	r3, [r7, #31]
 800887e:	e00a      	b.n	8008896 <UART_SetConfig+0x216>
 8008880:	2304      	movs	r3, #4
 8008882:	77fb      	strb	r3, [r7, #31]
 8008884:	e007      	b.n	8008896 <UART_SetConfig+0x216>
 8008886:	2308      	movs	r3, #8
 8008888:	77fb      	strb	r3, [r7, #31]
 800888a:	e004      	b.n	8008896 <UART_SetConfig+0x216>
 800888c:	2310      	movs	r3, #16
 800888e:	77fb      	strb	r3, [r7, #31]
 8008890:	e001      	b.n	8008896 <UART_SetConfig+0x216>
 8008892:	2310      	movs	r3, #16
 8008894:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	69db      	ldr	r3, [r3, #28]
 800889a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800889e:	d15b      	bne.n	8008958 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80088a0:	7ffb      	ldrb	r3, [r7, #31]
 80088a2:	2b08      	cmp	r3, #8
 80088a4:	d827      	bhi.n	80088f6 <UART_SetConfig+0x276>
 80088a6:	a201      	add	r2, pc, #4	; (adr r2, 80088ac <UART_SetConfig+0x22c>)
 80088a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ac:	080088d1 	.word	0x080088d1
 80088b0:	080088d9 	.word	0x080088d9
 80088b4:	080088e1 	.word	0x080088e1
 80088b8:	080088f7 	.word	0x080088f7
 80088bc:	080088e7 	.word	0x080088e7
 80088c0:	080088f7 	.word	0x080088f7
 80088c4:	080088f7 	.word	0x080088f7
 80088c8:	080088f7 	.word	0x080088f7
 80088cc:	080088ef 	.word	0x080088ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088d0:	f7fd fdaa 	bl	8006428 <HAL_RCC_GetPCLK1Freq>
 80088d4:	61b8      	str	r0, [r7, #24]
        break;
 80088d6:	e013      	b.n	8008900 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088d8:	f7fd fdc8 	bl	800646c <HAL_RCC_GetPCLK2Freq>
 80088dc:	61b8      	str	r0, [r7, #24]
        break;
 80088de:	e00f      	b.n	8008900 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088e0:	4b33      	ldr	r3, [pc, #204]	; (80089b0 <UART_SetConfig+0x330>)
 80088e2:	61bb      	str	r3, [r7, #24]
        break;
 80088e4:	e00c      	b.n	8008900 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088e6:	f7fd fd29 	bl	800633c <HAL_RCC_GetSysClockFreq>
 80088ea:	61b8      	str	r0, [r7, #24]
        break;
 80088ec:	e008      	b.n	8008900 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088f2:	61bb      	str	r3, [r7, #24]
        break;
 80088f4:	e004      	b.n	8008900 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80088f6:	2300      	movs	r3, #0
 80088f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	77bb      	strb	r3, [r7, #30]
        break;
 80088fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	2b00      	cmp	r3, #0
 8008904:	f000 8082 	beq.w	8008a0c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	005a      	lsls	r2, r3, #1
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	085b      	lsrs	r3, r3, #1
 8008912:	441a      	add	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	fbb2 f3f3 	udiv	r3, r2, r3
 800891c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	2b0f      	cmp	r3, #15
 8008922:	d916      	bls.n	8008952 <UART_SetConfig+0x2d2>
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800892a:	d212      	bcs.n	8008952 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	b29b      	uxth	r3, r3
 8008930:	f023 030f 	bic.w	r3, r3, #15
 8008934:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	085b      	lsrs	r3, r3, #1
 800893a:	b29b      	uxth	r3, r3
 800893c:	f003 0307 	and.w	r3, r3, #7
 8008940:	b29a      	uxth	r2, r3
 8008942:	89fb      	ldrh	r3, [r7, #14]
 8008944:	4313      	orrs	r3, r2
 8008946:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	89fa      	ldrh	r2, [r7, #14]
 800894e:	60da      	str	r2, [r3, #12]
 8008950:	e05c      	b.n	8008a0c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	77bb      	strb	r3, [r7, #30]
 8008956:	e059      	b.n	8008a0c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008958:	7ffb      	ldrb	r3, [r7, #31]
 800895a:	2b08      	cmp	r3, #8
 800895c:	d835      	bhi.n	80089ca <UART_SetConfig+0x34a>
 800895e:	a201      	add	r2, pc, #4	; (adr r2, 8008964 <UART_SetConfig+0x2e4>)
 8008960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008964:	08008989 	.word	0x08008989
 8008968:	08008991 	.word	0x08008991
 800896c:	080089b5 	.word	0x080089b5
 8008970:	080089cb 	.word	0x080089cb
 8008974:	080089bb 	.word	0x080089bb
 8008978:	080089cb 	.word	0x080089cb
 800897c:	080089cb 	.word	0x080089cb
 8008980:	080089cb 	.word	0x080089cb
 8008984:	080089c3 	.word	0x080089c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008988:	f7fd fd4e 	bl	8006428 <HAL_RCC_GetPCLK1Freq>
 800898c:	61b8      	str	r0, [r7, #24]
        break;
 800898e:	e021      	b.n	80089d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008990:	f7fd fd6c 	bl	800646c <HAL_RCC_GetPCLK2Freq>
 8008994:	61b8      	str	r0, [r7, #24]
        break;
 8008996:	e01d      	b.n	80089d4 <UART_SetConfig+0x354>
 8008998:	40013800 	.word	0x40013800
 800899c:	40021000 	.word	0x40021000
 80089a0:	40004400 	.word	0x40004400
 80089a4:	40004800 	.word	0x40004800
 80089a8:	40004c00 	.word	0x40004c00
 80089ac:	40005000 	.word	0x40005000
 80089b0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089b4:	4b1b      	ldr	r3, [pc, #108]	; (8008a24 <UART_SetConfig+0x3a4>)
 80089b6:	61bb      	str	r3, [r7, #24]
        break;
 80089b8:	e00c      	b.n	80089d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089ba:	f7fd fcbf 	bl	800633c <HAL_RCC_GetSysClockFreq>
 80089be:	61b8      	str	r0, [r7, #24]
        break;
 80089c0:	e008      	b.n	80089d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089c6:	61bb      	str	r3, [r7, #24]
        break;
 80089c8:	e004      	b.n	80089d4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80089ca:	2300      	movs	r3, #0
 80089cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	77bb      	strb	r3, [r7, #30]
        break;
 80089d2:	bf00      	nop
    }

    if (pclk != 0U)
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d018      	beq.n	8008a0c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	085a      	lsrs	r2, r3, #1
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	441a      	add	r2, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	2b0f      	cmp	r3, #15
 80089f2:	d909      	bls.n	8008a08 <UART_SetConfig+0x388>
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089fa:	d205      	bcs.n	8008a08 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	60da      	str	r2, [r3, #12]
 8008a06:	e001      	b.n	8008a0c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008a18:	7fbb      	ldrb	r3, [r7, #30]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3720      	adds	r7, #32
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	007a1200 	.word	0x007a1200

08008a28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a34:	f003 0301 	and.w	r3, r3, #1
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00a      	beq.n	8008a52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a56:	f003 0302 	and.w	r3, r3, #2
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00a      	beq.n	8008a74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	430a      	orrs	r2, r1
 8008a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a78:	f003 0304 	and.w	r3, r3, #4
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00a      	beq.n	8008a96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	430a      	orrs	r2, r1
 8008a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9a:	f003 0308 	and.w	r3, r3, #8
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00a      	beq.n	8008ab8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	430a      	orrs	r2, r1
 8008ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abc:	f003 0310 	and.w	r3, r3, #16
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00a      	beq.n	8008ada <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	430a      	orrs	r2, r1
 8008ad8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ade:	f003 0320 	and.w	r3, r3, #32
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00a      	beq.n	8008afc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	430a      	orrs	r2, r1
 8008afa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d01a      	beq.n	8008b3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	430a      	orrs	r2, r1
 8008b1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b26:	d10a      	bne.n	8008b3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	430a      	orrs	r2, r1
 8008b3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00a      	beq.n	8008b60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	430a      	orrs	r2, r1
 8008b5e:	605a      	str	r2, [r3, #4]
  }
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b098      	sub	sp, #96	; 0x60
 8008b70:	af02      	add	r7, sp, #8
 8008b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b7c:	f7fa f8ec 	bl	8002d58 <HAL_GetTick>
 8008b80:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 0308 	and.w	r3, r3, #8
 8008b8c:	2b08      	cmp	r3, #8
 8008b8e:	d12e      	bne.n	8008bee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f88c 	bl	8008cbc <UART_WaitOnFlagUntilTimeout>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d021      	beq.n	8008bee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb2:	e853 3f00 	ldrex	r3, [r3]
 8008bb6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bbe:	653b      	str	r3, [r7, #80]	; 0x50
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bc8:	647b      	str	r3, [r7, #68]	; 0x44
 8008bca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bcc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008bce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bd0:	e841 2300 	strex	r3, r2, [r1]
 8008bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1e6      	bne.n	8008baa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2220      	movs	r2, #32
 8008be0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bea:	2303      	movs	r3, #3
 8008bec:	e062      	b.n	8008cb4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 0304 	and.w	r3, r3, #4
 8008bf8:	2b04      	cmp	r3, #4
 8008bfa:	d149      	bne.n	8008c90 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c00:	9300      	str	r3, [sp, #0]
 8008c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c04:	2200      	movs	r2, #0
 8008c06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 f856 	bl	8008cbc <UART_WaitOnFlagUntilTimeout>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d03c      	beq.n	8008c90 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1e:	e853 3f00 	ldrex	r3, [r3]
 8008c22:	623b      	str	r3, [r7, #32]
   return(result);
 8008c24:	6a3b      	ldr	r3, [r7, #32]
 8008c26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	461a      	mov	r2, r3
 8008c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c34:	633b      	str	r3, [r7, #48]	; 0x30
 8008c36:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c3c:	e841 2300 	strex	r3, r2, [r1]
 8008c40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1e6      	bne.n	8008c16 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3308      	adds	r3, #8
 8008c4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	e853 3f00 	ldrex	r3, [r3]
 8008c56:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f023 0301 	bic.w	r3, r3, #1
 8008c5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	3308      	adds	r3, #8
 8008c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c68:	61fa      	str	r2, [r7, #28]
 8008c6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6c:	69b9      	ldr	r1, [r7, #24]
 8008c6e:	69fa      	ldr	r2, [r7, #28]
 8008c70:	e841 2300 	strex	r3, r2, [r1]
 8008c74:	617b      	str	r3, [r7, #20]
   return(result);
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1e5      	bne.n	8008c48 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2220      	movs	r2, #32
 8008c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	e011      	b.n	8008cb4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2220      	movs	r2, #32
 8008c94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2220      	movs	r2, #32
 8008c9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3758      	adds	r7, #88	; 0x58
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	603b      	str	r3, [r7, #0]
 8008cc8:	4613      	mov	r3, r2
 8008cca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ccc:	e049      	b.n	8008d62 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd4:	d045      	beq.n	8008d62 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cd6:	f7fa f83f 	bl	8002d58 <HAL_GetTick>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	69ba      	ldr	r2, [r7, #24]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d302      	bcc.n	8008cec <UART_WaitOnFlagUntilTimeout+0x30>
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d101      	bne.n	8008cf0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008cec:	2303      	movs	r3, #3
 8008cee:	e048      	b.n	8008d82 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 0304 	and.w	r3, r3, #4
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d031      	beq.n	8008d62 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	69db      	ldr	r3, [r3, #28]
 8008d04:	f003 0308 	and.w	r3, r3, #8
 8008d08:	2b08      	cmp	r3, #8
 8008d0a:	d110      	bne.n	8008d2e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2208      	movs	r2, #8
 8008d12:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f000 f8ed 	bl	8008ef4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2208      	movs	r2, #8
 8008d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e029      	b.n	8008d82 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	69db      	ldr	r3, [r3, #28]
 8008d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d3c:	d111      	bne.n	8008d62 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f000 f8d3 	bl	8008ef4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2220      	movs	r2, #32
 8008d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e00f      	b.n	8008d82 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	69da      	ldr	r2, [r3, #28]
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	68ba      	ldr	r2, [r7, #8]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	bf0c      	ite	eq
 8008d72:	2301      	moveq	r3, #1
 8008d74:	2300      	movne	r3, #0
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	461a      	mov	r2, r3
 8008d7a:	79fb      	ldrb	r3, [r7, #7]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d0a6      	beq.n	8008cce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
	...

08008d8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b097      	sub	sp, #92	; 0x5c
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	4613      	mov	r3, r2
 8008d98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	68ba      	ldr	r2, [r7, #8]
 8008d9e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	88fa      	ldrh	r2, [r7, #6]
 8008da4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	88fa      	ldrh	r2, [r7, #6]
 8008dac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2200      	movs	r2, #0
 8008db4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dbe:	d10e      	bne.n	8008dde <UART_Start_Receive_IT+0x52>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d105      	bne.n	8008dd4 <UART_Start_Receive_IT+0x48>
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008dce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008dd2:	e01a      	b.n	8008e0a <UART_Start_Receive_IT+0x7e>
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	22ff      	movs	r2, #255	; 0xff
 8008dd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ddc:	e015      	b.n	8008e0a <UART_Start_Receive_IT+0x7e>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d10d      	bne.n	8008e02 <UART_Start_Receive_IT+0x76>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d104      	bne.n	8008df8 <UART_Start_Receive_IT+0x6c>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	22ff      	movs	r2, #255	; 0xff
 8008df2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008df6:	e008      	b.n	8008e0a <UART_Start_Receive_IT+0x7e>
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	227f      	movs	r2, #127	; 0x7f
 8008dfc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008e00:	e003      	b.n	8008e0a <UART_Start_Receive_IT+0x7e>
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2222      	movs	r2, #34	; 0x22
 8008e16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	3308      	adds	r3, #8
 8008e20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e24:	e853 3f00 	ldrex	r3, [r3]
 8008e28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2c:	f043 0301 	orr.w	r3, r3, #1
 8008e30:	657b      	str	r3, [r7, #84]	; 0x54
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	3308      	adds	r3, #8
 8008e38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008e3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e42:	e841 2300 	strex	r3, r2, [r1]
 8008e46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1e5      	bne.n	8008e1a <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e56:	d107      	bne.n	8008e68 <UART_Start_Receive_IT+0xdc>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d103      	bne.n	8008e68 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	4a22      	ldr	r2, [pc, #136]	; (8008eec <UART_Start_Receive_IT+0x160>)
 8008e64:	669a      	str	r2, [r3, #104]	; 0x68
 8008e66:	e002      	b.n	8008e6e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	4a21      	ldr	r2, [pc, #132]	; (8008ef0 <UART_Start_Receive_IT+0x164>)
 8008e6c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d019      	beq.n	8008eaa <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7e:	e853 3f00 	ldrex	r3, [r3]
 8008e82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e86:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	461a      	mov	r2, r3
 8008e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e94:	637b      	str	r3, [r7, #52]	; 0x34
 8008e96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e9c:	e841 2300 	strex	r3, r2, [r1]
 8008ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1e6      	bne.n	8008e76 <UART_Start_Receive_IT+0xea>
 8008ea8:	e018      	b.n	8008edc <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	e853 3f00 	ldrex	r3, [r3]
 8008eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	f043 0320 	orr.w	r3, r3, #32
 8008ebe:	653b      	str	r3, [r7, #80]	; 0x50
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ec8:	623b      	str	r3, [r7, #32]
 8008eca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ecc:	69f9      	ldr	r1, [r7, #28]
 8008ece:	6a3a      	ldr	r2, [r7, #32]
 8008ed0:	e841 2300 	strex	r3, r2, [r1]
 8008ed4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1e6      	bne.n	8008eaa <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	375c      	adds	r7, #92	; 0x5c
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	0800935d 	.word	0x0800935d
 8008ef0:	080091b5 	.word	0x080091b5

08008ef4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b095      	sub	sp, #84	; 0x54
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f04:	e853 3f00 	ldrex	r3, [r3]
 8008f08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	461a      	mov	r2, r3
 8008f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f1a:	643b      	str	r3, [r7, #64]	; 0x40
 8008f1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f22:	e841 2300 	strex	r3, r2, [r1]
 8008f26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1e6      	bne.n	8008efc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	3308      	adds	r3, #8
 8008f34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f36:	6a3b      	ldr	r3, [r7, #32]
 8008f38:	e853 3f00 	ldrex	r3, [r3]
 8008f3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	f023 0301 	bic.w	r3, r3, #1
 8008f44:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	3308      	adds	r3, #8
 8008f4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f56:	e841 2300 	strex	r3, r2, [r1]
 8008f5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1e5      	bne.n	8008f2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d118      	bne.n	8008f9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	e853 3f00 	ldrex	r3, [r3]
 8008f76:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	f023 0310 	bic.w	r3, r3, #16
 8008f7e:	647b      	str	r3, [r7, #68]	; 0x44
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	461a      	mov	r2, r3
 8008f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f88:	61bb      	str	r3, [r7, #24]
 8008f8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8c:	6979      	ldr	r1, [r7, #20]
 8008f8e:	69ba      	ldr	r2, [r7, #24]
 8008f90:	e841 2300 	strex	r3, r2, [r1]
 8008f94:	613b      	str	r3, [r7, #16]
   return(result);
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1e6      	bne.n	8008f6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2220      	movs	r2, #32
 8008fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008fb0:	bf00      	nop
 8008fb2:	3754      	adds	r7, #84	; 0x54
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f7ff fb3a 	bl	8008654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fe0:	bf00      	nop
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b08f      	sub	sp, #60	; 0x3c
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ff4:	2b21      	cmp	r3, #33	; 0x21
 8008ff6:	d14d      	bne.n	8009094 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	2b00      	cmp	r3, #0
 8009002:	d132      	bne.n	800906a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900a:	6a3b      	ldr	r3, [r7, #32]
 800900c:	e853 3f00 	ldrex	r3, [r3]
 8009010:	61fb      	str	r3, [r7, #28]
   return(result);
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009018:	637b      	str	r3, [r7, #52]	; 0x34
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	461a      	mov	r2, r3
 8009020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009024:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009026:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800902a:	e841 2300 	strex	r3, r2, [r1]
 800902e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1e6      	bne.n	8009004 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	e853 3f00 	ldrex	r3, [r3]
 8009042:	60bb      	str	r3, [r7, #8]
   return(result);
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800904a:	633b      	str	r3, [r7, #48]	; 0x30
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	461a      	mov	r2, r3
 8009052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009054:	61bb      	str	r3, [r7, #24]
 8009056:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009058:	6979      	ldr	r1, [r7, #20]
 800905a:	69ba      	ldr	r2, [r7, #24]
 800905c:	e841 2300 	strex	r3, r2, [r1]
 8009060:	613b      	str	r3, [r7, #16]
   return(result);
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d1e6      	bne.n	8009036 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009068:	e014      	b.n	8009094 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800906e:	781a      	ldrb	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	b292      	uxth	r2, r2
 8009076:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800907c:	1c5a      	adds	r2, r3, #1
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009088:	b29b      	uxth	r3, r3
 800908a:	3b01      	subs	r3, #1
 800908c:	b29a      	uxth	r2, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009094:	bf00      	nop
 8009096:	373c      	adds	r7, #60	; 0x3c
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b091      	sub	sp, #68	; 0x44
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090ac:	2b21      	cmp	r3, #33	; 0x21
 80090ae:	d151      	bne.n	8009154 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d132      	bne.n	8009122 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c4:	e853 3f00 	ldrex	r3, [r3]
 80090c8:	623b      	str	r3, [r7, #32]
   return(result);
 80090ca:	6a3b      	ldr	r3, [r7, #32]
 80090cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	461a      	mov	r2, r3
 80090d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090da:	633b      	str	r3, [r7, #48]	; 0x30
 80090dc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090e2:	e841 2300 	strex	r3, r2, [r1]
 80090e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1e6      	bne.n	80090bc <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	e853 3f00 	ldrex	r3, [r3]
 80090fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009102:	637b      	str	r3, [r7, #52]	; 0x34
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	461a      	mov	r2, r3
 800910a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800910c:	61fb      	str	r3, [r7, #28]
 800910e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009110:	69b9      	ldr	r1, [r7, #24]
 8009112:	69fa      	ldr	r2, [r7, #28]
 8009114:	e841 2300 	strex	r3, r2, [r1]
 8009118:	617b      	str	r3, [r7, #20]
   return(result);
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1e6      	bne.n	80090ee <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009120:	e018      	b.n	8009154 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009126:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800912a:	881a      	ldrh	r2, [r3, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009134:	b292      	uxth	r2, r2
 8009136:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800913c:	1c9a      	adds	r2, r3, #2
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009148:	b29b      	uxth	r3, r3
 800914a:	3b01      	subs	r3, #1
 800914c:	b29a      	uxth	r2, r3
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009154:	bf00      	nop
 8009156:	3744      	adds	r7, #68	; 0x44
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b088      	sub	sp, #32
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	e853 3f00 	ldrex	r3, [r3]
 8009174:	60bb      	str	r3, [r7, #8]
   return(result);
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800917c:	61fb      	str	r3, [r7, #28]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	461a      	mov	r2, r3
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	61bb      	str	r3, [r7, #24]
 8009188:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918a:	6979      	ldr	r1, [r7, #20]
 800918c:	69ba      	ldr	r2, [r7, #24]
 800918e:	e841 2300 	strex	r3, r2, [r1]
 8009192:	613b      	str	r3, [r7, #16]
   return(result);
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1e6      	bne.n	8009168 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2220      	movs	r2, #32
 800919e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7ff fa4a 	bl	8008640 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091ac:	bf00      	nop
 80091ae:	3720      	adds	r7, #32
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b09c      	sub	sp, #112	; 0x70
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80091c2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091cc:	2b22      	cmp	r3, #34	; 0x22
 80091ce:	f040 80b9 	bne.w	8009344 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80091d8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80091dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80091e0:	b2d9      	uxtb	r1, r3
 80091e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80091e6:	b2da      	uxtb	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ec:	400a      	ands	r2, r1
 80091ee:	b2d2      	uxtb	r2, r2
 80091f0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f6:	1c5a      	adds	r2, r3, #1
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009202:	b29b      	uxth	r3, r3
 8009204:	3b01      	subs	r3, #1
 8009206:	b29a      	uxth	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009214:	b29b      	uxth	r3, r3
 8009216:	2b00      	cmp	r3, #0
 8009218:	f040 809c 	bne.w	8009354 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009224:	e853 3f00 	ldrex	r3, [r3]
 8009228:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800922a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800922c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009230:	66bb      	str	r3, [r7, #104]	; 0x68
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	461a      	mov	r2, r3
 8009238:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800923a:	65bb      	str	r3, [r7, #88]	; 0x58
 800923c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009240:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009242:	e841 2300 	strex	r3, r2, [r1]
 8009246:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1e6      	bne.n	800921c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	3308      	adds	r3, #8
 8009254:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009258:	e853 3f00 	ldrex	r3, [r3]
 800925c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800925e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009260:	f023 0301 	bic.w	r3, r3, #1
 8009264:	667b      	str	r3, [r7, #100]	; 0x64
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	3308      	adds	r3, #8
 800926c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800926e:	647a      	str	r2, [r7, #68]	; 0x44
 8009270:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009272:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009274:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009276:	e841 2300 	strex	r3, r2, [r1]
 800927a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800927c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1e5      	bne.n	800924e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2220      	movs	r2, #32
 8009286:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d018      	beq.n	80092d6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ac:	e853 3f00 	ldrex	r3, [r3]
 80092b0:	623b      	str	r3, [r7, #32]
   return(result);
 80092b2:	6a3b      	ldr	r3, [r7, #32]
 80092b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80092b8:	663b      	str	r3, [r7, #96]	; 0x60
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	461a      	mov	r2, r3
 80092c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092c2:	633b      	str	r3, [r7, #48]	; 0x30
 80092c4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ca:	e841 2300 	strex	r3, r2, [r1]
 80092ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80092d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1e6      	bne.n	80092a4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d12e      	bne.n	800933c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	e853 3f00 	ldrex	r3, [r3]
 80092f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f023 0310 	bic.w	r3, r3, #16
 80092f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	461a      	mov	r2, r3
 8009300:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009302:	61fb      	str	r3, [r7, #28]
 8009304:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009306:	69b9      	ldr	r1, [r7, #24]
 8009308:	69fa      	ldr	r2, [r7, #28]
 800930a:	e841 2300 	strex	r3, r2, [r1]
 800930e:	617b      	str	r3, [r7, #20]
   return(result);
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1e6      	bne.n	80092e4 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	69db      	ldr	r3, [r3, #28]
 800931c:	f003 0310 	and.w	r3, r3, #16
 8009320:	2b10      	cmp	r3, #16
 8009322:	d103      	bne.n	800932c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2210      	movs	r2, #16
 800932a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009332:	4619      	mov	r1, r3
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f7ff f997 	bl	8008668 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800933a:	e00b      	b.n	8009354 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f7f7 fe2f 	bl	8000fa0 <HAL_UART_RxCpltCallback>
}
 8009342:	e007      	b.n	8009354 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	699a      	ldr	r2, [r3, #24]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f042 0208 	orr.w	r2, r2, #8
 8009352:	619a      	str	r2, [r3, #24]
}
 8009354:	bf00      	nop
 8009356:	3770      	adds	r7, #112	; 0x70
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b09c      	sub	sp, #112	; 0x70
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800936a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009374:	2b22      	cmp	r3, #34	; 0x22
 8009376:	f040 80b9 	bne.w	80094ec <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009380:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009388:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800938a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800938e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009392:	4013      	ands	r3, r2
 8009394:	b29a      	uxth	r2, r3
 8009396:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009398:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800939e:	1c9a      	adds	r2, r3, #2
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	3b01      	subs	r3, #1
 80093ae:	b29a      	uxth	r2, r3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80093bc:	b29b      	uxth	r3, r3
 80093be:	2b00      	cmp	r3, #0
 80093c0:	f040 809c 	bne.w	80094fc <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093cc:	e853 3f00 	ldrex	r3, [r3]
 80093d0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80093d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093d8:	667b      	str	r3, [r7, #100]	; 0x64
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	461a      	mov	r2, r3
 80093e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093e2:	657b      	str	r3, [r7, #84]	; 0x54
 80093e4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80093e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80093ea:	e841 2300 	strex	r3, r2, [r1]
 80093ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80093f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1e6      	bne.n	80093c4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3308      	adds	r3, #8
 80093fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009400:	e853 3f00 	ldrex	r3, [r3]
 8009404:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009408:	f023 0301 	bic.w	r3, r3, #1
 800940c:	663b      	str	r3, [r7, #96]	; 0x60
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	3308      	adds	r3, #8
 8009414:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009416:	643a      	str	r2, [r7, #64]	; 0x40
 8009418:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800941c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800941e:	e841 2300 	strex	r3, r2, [r1]
 8009422:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1e5      	bne.n	80093f6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2220      	movs	r2, #32
 800942e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009448:	2b00      	cmp	r3, #0
 800944a:	d018      	beq.n	800947e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009452:	6a3b      	ldr	r3, [r7, #32]
 8009454:	e853 3f00 	ldrex	r3, [r3]
 8009458:	61fb      	str	r3, [r7, #28]
   return(result);
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009460:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	461a      	mov	r2, r3
 8009468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800946a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800946c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009472:	e841 2300 	strex	r3, r2, [r1]
 8009476:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1e6      	bne.n	800944c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009482:	2b01      	cmp	r3, #1
 8009484:	d12e      	bne.n	80094e4 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	e853 3f00 	ldrex	r3, [r3]
 8009498:	60bb      	str	r3, [r7, #8]
   return(result);
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	f023 0310 	bic.w	r3, r3, #16
 80094a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094aa:	61bb      	str	r3, [r7, #24]
 80094ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ae:	6979      	ldr	r1, [r7, #20]
 80094b0:	69ba      	ldr	r2, [r7, #24]
 80094b2:	e841 2300 	strex	r3, r2, [r1]
 80094b6:	613b      	str	r3, [r7, #16]
   return(result);
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1e6      	bne.n	800948c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	69db      	ldr	r3, [r3, #28]
 80094c4:	f003 0310 	and.w	r3, r3, #16
 80094c8:	2b10      	cmp	r3, #16
 80094ca:	d103      	bne.n	80094d4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2210      	movs	r2, #16
 80094d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f7ff f8c3 	bl	8008668 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80094e2:	e00b      	b.n	80094fc <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f7f7 fd5b 	bl	8000fa0 <HAL_UART_RxCpltCallback>
}
 80094ea:	e007      	b.n	80094fc <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	699a      	ldr	r2, [r3, #24]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f042 0208 	orr.w	r2, r2, #8
 80094fa:	619a      	str	r2, [r3, #24]
}
 80094fc:	bf00      	nop
 80094fe:	3770      	adds	r7, #112	; 0x70
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800950c:	bf00      	nop
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009520:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009524:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800952c:	b29a      	uxth	r2, r3
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	b29b      	uxth	r3, r3
 8009532:	43db      	mvns	r3, r3
 8009534:	b29b      	uxth	r3, r3
 8009536:	4013      	ands	r3, r2
 8009538:	b29a      	uxth	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3714      	adds	r7, #20
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr

0800954e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800954e:	b084      	sub	sp, #16
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	f107 0014 	add.w	r0, r7, #20
 800955c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	370c      	adds	r7, #12
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	b004      	add	sp, #16
 800958e:	4770      	bx	lr

08009590 <__errno>:
 8009590:	4b01      	ldr	r3, [pc, #4]	; (8009598 <__errno+0x8>)
 8009592:	6818      	ldr	r0, [r3, #0]
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop
 8009598:	2000005c 	.word	0x2000005c

0800959c <__libc_init_array>:
 800959c:	b570      	push	{r4, r5, r6, lr}
 800959e:	4d0d      	ldr	r5, [pc, #52]	; (80095d4 <__libc_init_array+0x38>)
 80095a0:	4c0d      	ldr	r4, [pc, #52]	; (80095d8 <__libc_init_array+0x3c>)
 80095a2:	1b64      	subs	r4, r4, r5
 80095a4:	10a4      	asrs	r4, r4, #2
 80095a6:	2600      	movs	r6, #0
 80095a8:	42a6      	cmp	r6, r4
 80095aa:	d109      	bne.n	80095c0 <__libc_init_array+0x24>
 80095ac:	4d0b      	ldr	r5, [pc, #44]	; (80095dc <__libc_init_array+0x40>)
 80095ae:	4c0c      	ldr	r4, [pc, #48]	; (80095e0 <__libc_init_array+0x44>)
 80095b0:	f001 fa94 	bl	800aadc <_init>
 80095b4:	1b64      	subs	r4, r4, r5
 80095b6:	10a4      	asrs	r4, r4, #2
 80095b8:	2600      	movs	r6, #0
 80095ba:	42a6      	cmp	r6, r4
 80095bc:	d105      	bne.n	80095ca <__libc_init_array+0x2e>
 80095be:	bd70      	pop	{r4, r5, r6, pc}
 80095c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80095c4:	4798      	blx	r3
 80095c6:	3601      	adds	r6, #1
 80095c8:	e7ee      	b.n	80095a8 <__libc_init_array+0xc>
 80095ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ce:	4798      	blx	r3
 80095d0:	3601      	adds	r6, #1
 80095d2:	e7f2      	b.n	80095ba <__libc_init_array+0x1e>
 80095d4:	0800e324 	.word	0x0800e324
 80095d8:	0800e324 	.word	0x0800e324
 80095dc:	0800e324 	.word	0x0800e324
 80095e0:	0800e328 	.word	0x0800e328

080095e4 <malloc>:
 80095e4:	4b02      	ldr	r3, [pc, #8]	; (80095f0 <malloc+0xc>)
 80095e6:	4601      	mov	r1, r0
 80095e8:	6818      	ldr	r0, [r3, #0]
 80095ea:	f000 b885 	b.w	80096f8 <_malloc_r>
 80095ee:	bf00      	nop
 80095f0:	2000005c 	.word	0x2000005c

080095f4 <memcpy>:
 80095f4:	440a      	add	r2, r1
 80095f6:	4291      	cmp	r1, r2
 80095f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80095fc:	d100      	bne.n	8009600 <memcpy+0xc>
 80095fe:	4770      	bx	lr
 8009600:	b510      	push	{r4, lr}
 8009602:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009606:	f803 4f01 	strb.w	r4, [r3, #1]!
 800960a:	4291      	cmp	r1, r2
 800960c:	d1f9      	bne.n	8009602 <memcpy+0xe>
 800960e:	bd10      	pop	{r4, pc}

08009610 <memset>:
 8009610:	4402      	add	r2, r0
 8009612:	4603      	mov	r3, r0
 8009614:	4293      	cmp	r3, r2
 8009616:	d100      	bne.n	800961a <memset+0xa>
 8009618:	4770      	bx	lr
 800961a:	f803 1b01 	strb.w	r1, [r3], #1
 800961e:	e7f9      	b.n	8009614 <memset+0x4>

08009620 <_free_r>:
 8009620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009622:	2900      	cmp	r1, #0
 8009624:	d044      	beq.n	80096b0 <_free_r+0x90>
 8009626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800962a:	9001      	str	r0, [sp, #4]
 800962c:	2b00      	cmp	r3, #0
 800962e:	f1a1 0404 	sub.w	r4, r1, #4
 8009632:	bfb8      	it	lt
 8009634:	18e4      	addlt	r4, r4, r3
 8009636:	f000 f9d1 	bl	80099dc <__malloc_lock>
 800963a:	4a1e      	ldr	r2, [pc, #120]	; (80096b4 <_free_r+0x94>)
 800963c:	9801      	ldr	r0, [sp, #4]
 800963e:	6813      	ldr	r3, [r2, #0]
 8009640:	b933      	cbnz	r3, 8009650 <_free_r+0x30>
 8009642:	6063      	str	r3, [r4, #4]
 8009644:	6014      	str	r4, [r2, #0]
 8009646:	b003      	add	sp, #12
 8009648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800964c:	f000 b9cc 	b.w	80099e8 <__malloc_unlock>
 8009650:	42a3      	cmp	r3, r4
 8009652:	d908      	bls.n	8009666 <_free_r+0x46>
 8009654:	6825      	ldr	r5, [r4, #0]
 8009656:	1961      	adds	r1, r4, r5
 8009658:	428b      	cmp	r3, r1
 800965a:	bf01      	itttt	eq
 800965c:	6819      	ldreq	r1, [r3, #0]
 800965e:	685b      	ldreq	r3, [r3, #4]
 8009660:	1949      	addeq	r1, r1, r5
 8009662:	6021      	streq	r1, [r4, #0]
 8009664:	e7ed      	b.n	8009642 <_free_r+0x22>
 8009666:	461a      	mov	r2, r3
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	b10b      	cbz	r3, 8009670 <_free_r+0x50>
 800966c:	42a3      	cmp	r3, r4
 800966e:	d9fa      	bls.n	8009666 <_free_r+0x46>
 8009670:	6811      	ldr	r1, [r2, #0]
 8009672:	1855      	adds	r5, r2, r1
 8009674:	42a5      	cmp	r5, r4
 8009676:	d10b      	bne.n	8009690 <_free_r+0x70>
 8009678:	6824      	ldr	r4, [r4, #0]
 800967a:	4421      	add	r1, r4
 800967c:	1854      	adds	r4, r2, r1
 800967e:	42a3      	cmp	r3, r4
 8009680:	6011      	str	r1, [r2, #0]
 8009682:	d1e0      	bne.n	8009646 <_free_r+0x26>
 8009684:	681c      	ldr	r4, [r3, #0]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	6053      	str	r3, [r2, #4]
 800968a:	4421      	add	r1, r4
 800968c:	6011      	str	r1, [r2, #0]
 800968e:	e7da      	b.n	8009646 <_free_r+0x26>
 8009690:	d902      	bls.n	8009698 <_free_r+0x78>
 8009692:	230c      	movs	r3, #12
 8009694:	6003      	str	r3, [r0, #0]
 8009696:	e7d6      	b.n	8009646 <_free_r+0x26>
 8009698:	6825      	ldr	r5, [r4, #0]
 800969a:	1961      	adds	r1, r4, r5
 800969c:	428b      	cmp	r3, r1
 800969e:	bf04      	itt	eq
 80096a0:	6819      	ldreq	r1, [r3, #0]
 80096a2:	685b      	ldreq	r3, [r3, #4]
 80096a4:	6063      	str	r3, [r4, #4]
 80096a6:	bf04      	itt	eq
 80096a8:	1949      	addeq	r1, r1, r5
 80096aa:	6021      	streq	r1, [r4, #0]
 80096ac:	6054      	str	r4, [r2, #4]
 80096ae:	e7ca      	b.n	8009646 <_free_r+0x26>
 80096b0:	b003      	add	sp, #12
 80096b2:	bd30      	pop	{r4, r5, pc}
 80096b4:	20000744 	.word	0x20000744

080096b8 <sbrk_aligned>:
 80096b8:	b570      	push	{r4, r5, r6, lr}
 80096ba:	4e0e      	ldr	r6, [pc, #56]	; (80096f4 <sbrk_aligned+0x3c>)
 80096bc:	460c      	mov	r4, r1
 80096be:	6831      	ldr	r1, [r6, #0]
 80096c0:	4605      	mov	r5, r0
 80096c2:	b911      	cbnz	r1, 80096ca <sbrk_aligned+0x12>
 80096c4:	f000 f8f8 	bl	80098b8 <_sbrk_r>
 80096c8:	6030      	str	r0, [r6, #0]
 80096ca:	4621      	mov	r1, r4
 80096cc:	4628      	mov	r0, r5
 80096ce:	f000 f8f3 	bl	80098b8 <_sbrk_r>
 80096d2:	1c43      	adds	r3, r0, #1
 80096d4:	d00a      	beq.n	80096ec <sbrk_aligned+0x34>
 80096d6:	1cc4      	adds	r4, r0, #3
 80096d8:	f024 0403 	bic.w	r4, r4, #3
 80096dc:	42a0      	cmp	r0, r4
 80096de:	d007      	beq.n	80096f0 <sbrk_aligned+0x38>
 80096e0:	1a21      	subs	r1, r4, r0
 80096e2:	4628      	mov	r0, r5
 80096e4:	f000 f8e8 	bl	80098b8 <_sbrk_r>
 80096e8:	3001      	adds	r0, #1
 80096ea:	d101      	bne.n	80096f0 <sbrk_aligned+0x38>
 80096ec:	f04f 34ff 	mov.w	r4, #4294967295
 80096f0:	4620      	mov	r0, r4
 80096f2:	bd70      	pop	{r4, r5, r6, pc}
 80096f4:	20000748 	.word	0x20000748

080096f8 <_malloc_r>:
 80096f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096fc:	1ccd      	adds	r5, r1, #3
 80096fe:	f025 0503 	bic.w	r5, r5, #3
 8009702:	3508      	adds	r5, #8
 8009704:	2d0c      	cmp	r5, #12
 8009706:	bf38      	it	cc
 8009708:	250c      	movcc	r5, #12
 800970a:	2d00      	cmp	r5, #0
 800970c:	4607      	mov	r7, r0
 800970e:	db01      	blt.n	8009714 <_malloc_r+0x1c>
 8009710:	42a9      	cmp	r1, r5
 8009712:	d905      	bls.n	8009720 <_malloc_r+0x28>
 8009714:	230c      	movs	r3, #12
 8009716:	603b      	str	r3, [r7, #0]
 8009718:	2600      	movs	r6, #0
 800971a:	4630      	mov	r0, r6
 800971c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009720:	4e2e      	ldr	r6, [pc, #184]	; (80097dc <_malloc_r+0xe4>)
 8009722:	f000 f95b 	bl	80099dc <__malloc_lock>
 8009726:	6833      	ldr	r3, [r6, #0]
 8009728:	461c      	mov	r4, r3
 800972a:	bb34      	cbnz	r4, 800977a <_malloc_r+0x82>
 800972c:	4629      	mov	r1, r5
 800972e:	4638      	mov	r0, r7
 8009730:	f7ff ffc2 	bl	80096b8 <sbrk_aligned>
 8009734:	1c43      	adds	r3, r0, #1
 8009736:	4604      	mov	r4, r0
 8009738:	d14d      	bne.n	80097d6 <_malloc_r+0xde>
 800973a:	6834      	ldr	r4, [r6, #0]
 800973c:	4626      	mov	r6, r4
 800973e:	2e00      	cmp	r6, #0
 8009740:	d140      	bne.n	80097c4 <_malloc_r+0xcc>
 8009742:	6823      	ldr	r3, [r4, #0]
 8009744:	4631      	mov	r1, r6
 8009746:	4638      	mov	r0, r7
 8009748:	eb04 0803 	add.w	r8, r4, r3
 800974c:	f000 f8b4 	bl	80098b8 <_sbrk_r>
 8009750:	4580      	cmp	r8, r0
 8009752:	d13a      	bne.n	80097ca <_malloc_r+0xd2>
 8009754:	6821      	ldr	r1, [r4, #0]
 8009756:	3503      	adds	r5, #3
 8009758:	1a6d      	subs	r5, r5, r1
 800975a:	f025 0503 	bic.w	r5, r5, #3
 800975e:	3508      	adds	r5, #8
 8009760:	2d0c      	cmp	r5, #12
 8009762:	bf38      	it	cc
 8009764:	250c      	movcc	r5, #12
 8009766:	4629      	mov	r1, r5
 8009768:	4638      	mov	r0, r7
 800976a:	f7ff ffa5 	bl	80096b8 <sbrk_aligned>
 800976e:	3001      	adds	r0, #1
 8009770:	d02b      	beq.n	80097ca <_malloc_r+0xd2>
 8009772:	6823      	ldr	r3, [r4, #0]
 8009774:	442b      	add	r3, r5
 8009776:	6023      	str	r3, [r4, #0]
 8009778:	e00e      	b.n	8009798 <_malloc_r+0xa0>
 800977a:	6822      	ldr	r2, [r4, #0]
 800977c:	1b52      	subs	r2, r2, r5
 800977e:	d41e      	bmi.n	80097be <_malloc_r+0xc6>
 8009780:	2a0b      	cmp	r2, #11
 8009782:	d916      	bls.n	80097b2 <_malloc_r+0xba>
 8009784:	1961      	adds	r1, r4, r5
 8009786:	42a3      	cmp	r3, r4
 8009788:	6025      	str	r5, [r4, #0]
 800978a:	bf18      	it	ne
 800978c:	6059      	strne	r1, [r3, #4]
 800978e:	6863      	ldr	r3, [r4, #4]
 8009790:	bf08      	it	eq
 8009792:	6031      	streq	r1, [r6, #0]
 8009794:	5162      	str	r2, [r4, r5]
 8009796:	604b      	str	r3, [r1, #4]
 8009798:	4638      	mov	r0, r7
 800979a:	f104 060b 	add.w	r6, r4, #11
 800979e:	f000 f923 	bl	80099e8 <__malloc_unlock>
 80097a2:	f026 0607 	bic.w	r6, r6, #7
 80097a6:	1d23      	adds	r3, r4, #4
 80097a8:	1af2      	subs	r2, r6, r3
 80097aa:	d0b6      	beq.n	800971a <_malloc_r+0x22>
 80097ac:	1b9b      	subs	r3, r3, r6
 80097ae:	50a3      	str	r3, [r4, r2]
 80097b0:	e7b3      	b.n	800971a <_malloc_r+0x22>
 80097b2:	6862      	ldr	r2, [r4, #4]
 80097b4:	42a3      	cmp	r3, r4
 80097b6:	bf0c      	ite	eq
 80097b8:	6032      	streq	r2, [r6, #0]
 80097ba:	605a      	strne	r2, [r3, #4]
 80097bc:	e7ec      	b.n	8009798 <_malloc_r+0xa0>
 80097be:	4623      	mov	r3, r4
 80097c0:	6864      	ldr	r4, [r4, #4]
 80097c2:	e7b2      	b.n	800972a <_malloc_r+0x32>
 80097c4:	4634      	mov	r4, r6
 80097c6:	6876      	ldr	r6, [r6, #4]
 80097c8:	e7b9      	b.n	800973e <_malloc_r+0x46>
 80097ca:	230c      	movs	r3, #12
 80097cc:	603b      	str	r3, [r7, #0]
 80097ce:	4638      	mov	r0, r7
 80097d0:	f000 f90a 	bl	80099e8 <__malloc_unlock>
 80097d4:	e7a1      	b.n	800971a <_malloc_r+0x22>
 80097d6:	6025      	str	r5, [r4, #0]
 80097d8:	e7de      	b.n	8009798 <_malloc_r+0xa0>
 80097da:	bf00      	nop
 80097dc:	20000744 	.word	0x20000744

080097e0 <srand>:
 80097e0:	b538      	push	{r3, r4, r5, lr}
 80097e2:	4b10      	ldr	r3, [pc, #64]	; (8009824 <srand+0x44>)
 80097e4:	681d      	ldr	r5, [r3, #0]
 80097e6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80097e8:	4604      	mov	r4, r0
 80097ea:	b9b3      	cbnz	r3, 800981a <srand+0x3a>
 80097ec:	2018      	movs	r0, #24
 80097ee:	f7ff fef9 	bl	80095e4 <malloc>
 80097f2:	4602      	mov	r2, r0
 80097f4:	63a8      	str	r0, [r5, #56]	; 0x38
 80097f6:	b920      	cbnz	r0, 8009802 <srand+0x22>
 80097f8:	4b0b      	ldr	r3, [pc, #44]	; (8009828 <srand+0x48>)
 80097fa:	480c      	ldr	r0, [pc, #48]	; (800982c <srand+0x4c>)
 80097fc:	2142      	movs	r1, #66	; 0x42
 80097fe:	f000 f8bd 	bl	800997c <__assert_func>
 8009802:	490b      	ldr	r1, [pc, #44]	; (8009830 <srand+0x50>)
 8009804:	4b0b      	ldr	r3, [pc, #44]	; (8009834 <srand+0x54>)
 8009806:	e9c0 1300 	strd	r1, r3, [r0]
 800980a:	4b0b      	ldr	r3, [pc, #44]	; (8009838 <srand+0x58>)
 800980c:	6083      	str	r3, [r0, #8]
 800980e:	230b      	movs	r3, #11
 8009810:	8183      	strh	r3, [r0, #12]
 8009812:	2100      	movs	r1, #0
 8009814:	2001      	movs	r0, #1
 8009816:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800981a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800981c:	2200      	movs	r2, #0
 800981e:	611c      	str	r4, [r3, #16]
 8009820:	615a      	str	r2, [r3, #20]
 8009822:	bd38      	pop	{r3, r4, r5, pc}
 8009824:	2000005c 	.word	0x2000005c
 8009828:	0800e1e0 	.word	0x0800e1e0
 800982c:	0800e1f7 	.word	0x0800e1f7
 8009830:	abcd330e 	.word	0xabcd330e
 8009834:	e66d1234 	.word	0xe66d1234
 8009838:	0005deec 	.word	0x0005deec

0800983c <rand>:
 800983c:	4b16      	ldr	r3, [pc, #88]	; (8009898 <rand+0x5c>)
 800983e:	b510      	push	{r4, lr}
 8009840:	681c      	ldr	r4, [r3, #0]
 8009842:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009844:	b9b3      	cbnz	r3, 8009874 <rand+0x38>
 8009846:	2018      	movs	r0, #24
 8009848:	f7ff fecc 	bl	80095e4 <malloc>
 800984c:	63a0      	str	r0, [r4, #56]	; 0x38
 800984e:	b928      	cbnz	r0, 800985c <rand+0x20>
 8009850:	4602      	mov	r2, r0
 8009852:	4b12      	ldr	r3, [pc, #72]	; (800989c <rand+0x60>)
 8009854:	4812      	ldr	r0, [pc, #72]	; (80098a0 <rand+0x64>)
 8009856:	214e      	movs	r1, #78	; 0x4e
 8009858:	f000 f890 	bl	800997c <__assert_func>
 800985c:	4a11      	ldr	r2, [pc, #68]	; (80098a4 <rand+0x68>)
 800985e:	4b12      	ldr	r3, [pc, #72]	; (80098a8 <rand+0x6c>)
 8009860:	e9c0 2300 	strd	r2, r3, [r0]
 8009864:	4b11      	ldr	r3, [pc, #68]	; (80098ac <rand+0x70>)
 8009866:	6083      	str	r3, [r0, #8]
 8009868:	230b      	movs	r3, #11
 800986a:	8183      	strh	r3, [r0, #12]
 800986c:	2201      	movs	r2, #1
 800986e:	2300      	movs	r3, #0
 8009870:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009874:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8009876:	4a0e      	ldr	r2, [pc, #56]	; (80098b0 <rand+0x74>)
 8009878:	6920      	ldr	r0, [r4, #16]
 800987a:	6963      	ldr	r3, [r4, #20]
 800987c:	490d      	ldr	r1, [pc, #52]	; (80098b4 <rand+0x78>)
 800987e:	4342      	muls	r2, r0
 8009880:	fb01 2203 	mla	r2, r1, r3, r2
 8009884:	fba0 0101 	umull	r0, r1, r0, r1
 8009888:	1c43      	adds	r3, r0, #1
 800988a:	eb42 0001 	adc.w	r0, r2, r1
 800988e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8009892:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009896:	bd10      	pop	{r4, pc}
 8009898:	2000005c 	.word	0x2000005c
 800989c:	0800e1e0 	.word	0x0800e1e0
 80098a0:	0800e1f7 	.word	0x0800e1f7
 80098a4:	abcd330e 	.word	0xabcd330e
 80098a8:	e66d1234 	.word	0xe66d1234
 80098ac:	0005deec 	.word	0x0005deec
 80098b0:	5851f42d 	.word	0x5851f42d
 80098b4:	4c957f2d 	.word	0x4c957f2d

080098b8 <_sbrk_r>:
 80098b8:	b538      	push	{r3, r4, r5, lr}
 80098ba:	4d06      	ldr	r5, [pc, #24]	; (80098d4 <_sbrk_r+0x1c>)
 80098bc:	2300      	movs	r3, #0
 80098be:	4604      	mov	r4, r0
 80098c0:	4608      	mov	r0, r1
 80098c2:	602b      	str	r3, [r5, #0]
 80098c4:	f7f9 f97c 	bl	8002bc0 <_sbrk>
 80098c8:	1c43      	adds	r3, r0, #1
 80098ca:	d102      	bne.n	80098d2 <_sbrk_r+0x1a>
 80098cc:	682b      	ldr	r3, [r5, #0]
 80098ce:	b103      	cbz	r3, 80098d2 <_sbrk_r+0x1a>
 80098d0:	6023      	str	r3, [r4, #0]
 80098d2:	bd38      	pop	{r3, r4, r5, pc}
 80098d4:	2000074c 	.word	0x2000074c

080098d8 <sniprintf>:
 80098d8:	b40c      	push	{r2, r3}
 80098da:	b530      	push	{r4, r5, lr}
 80098dc:	4b17      	ldr	r3, [pc, #92]	; (800993c <sniprintf+0x64>)
 80098de:	1e0c      	subs	r4, r1, #0
 80098e0:	681d      	ldr	r5, [r3, #0]
 80098e2:	b09d      	sub	sp, #116	; 0x74
 80098e4:	da08      	bge.n	80098f8 <sniprintf+0x20>
 80098e6:	238b      	movs	r3, #139	; 0x8b
 80098e8:	602b      	str	r3, [r5, #0]
 80098ea:	f04f 30ff 	mov.w	r0, #4294967295
 80098ee:	b01d      	add	sp, #116	; 0x74
 80098f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098f4:	b002      	add	sp, #8
 80098f6:	4770      	bx	lr
 80098f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80098fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009900:	bf14      	ite	ne
 8009902:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009906:	4623      	moveq	r3, r4
 8009908:	9304      	str	r3, [sp, #16]
 800990a:	9307      	str	r3, [sp, #28]
 800990c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009910:	9002      	str	r0, [sp, #8]
 8009912:	9006      	str	r0, [sp, #24]
 8009914:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009918:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800991a:	ab21      	add	r3, sp, #132	; 0x84
 800991c:	a902      	add	r1, sp, #8
 800991e:	4628      	mov	r0, r5
 8009920:	9301      	str	r3, [sp, #4]
 8009922:	f000 f8c3 	bl	8009aac <_svfiprintf_r>
 8009926:	1c43      	adds	r3, r0, #1
 8009928:	bfbc      	itt	lt
 800992a:	238b      	movlt	r3, #139	; 0x8b
 800992c:	602b      	strlt	r3, [r5, #0]
 800992e:	2c00      	cmp	r4, #0
 8009930:	d0dd      	beq.n	80098ee <sniprintf+0x16>
 8009932:	9b02      	ldr	r3, [sp, #8]
 8009934:	2200      	movs	r2, #0
 8009936:	701a      	strb	r2, [r3, #0]
 8009938:	e7d9      	b.n	80098ee <sniprintf+0x16>
 800993a:	bf00      	nop
 800993c:	2000005c 	.word	0x2000005c

08009940 <strdup>:
 8009940:	4b02      	ldr	r3, [pc, #8]	; (800994c <strdup+0xc>)
 8009942:	4601      	mov	r1, r0
 8009944:	6818      	ldr	r0, [r3, #0]
 8009946:	f000 b803 	b.w	8009950 <_strdup_r>
 800994a:	bf00      	nop
 800994c:	2000005c 	.word	0x2000005c

08009950 <_strdup_r>:
 8009950:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009952:	4604      	mov	r4, r0
 8009954:	4608      	mov	r0, r1
 8009956:	460d      	mov	r5, r1
 8009958:	f7f6 fc44 	bl	80001e4 <strlen>
 800995c:	1c42      	adds	r2, r0, #1
 800995e:	4611      	mov	r1, r2
 8009960:	4620      	mov	r0, r4
 8009962:	9201      	str	r2, [sp, #4]
 8009964:	f7ff fec8 	bl	80096f8 <_malloc_r>
 8009968:	4604      	mov	r4, r0
 800996a:	b118      	cbz	r0, 8009974 <_strdup_r+0x24>
 800996c:	9a01      	ldr	r2, [sp, #4]
 800996e:	4629      	mov	r1, r5
 8009970:	f7ff fe40 	bl	80095f4 <memcpy>
 8009974:	4620      	mov	r0, r4
 8009976:	b003      	add	sp, #12
 8009978:	bd30      	pop	{r4, r5, pc}
	...

0800997c <__assert_func>:
 800997c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800997e:	4614      	mov	r4, r2
 8009980:	461a      	mov	r2, r3
 8009982:	4b09      	ldr	r3, [pc, #36]	; (80099a8 <__assert_func+0x2c>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4605      	mov	r5, r0
 8009988:	68d8      	ldr	r0, [r3, #12]
 800998a:	b14c      	cbz	r4, 80099a0 <__assert_func+0x24>
 800998c:	4b07      	ldr	r3, [pc, #28]	; (80099ac <__assert_func+0x30>)
 800998e:	9100      	str	r1, [sp, #0]
 8009990:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009994:	4906      	ldr	r1, [pc, #24]	; (80099b0 <__assert_func+0x34>)
 8009996:	462b      	mov	r3, r5
 8009998:	f000 f80e 	bl	80099b8 <fiprintf>
 800999c:	f000 fd34 	bl	800a408 <abort>
 80099a0:	4b04      	ldr	r3, [pc, #16]	; (80099b4 <__assert_func+0x38>)
 80099a2:	461c      	mov	r4, r3
 80099a4:	e7f3      	b.n	800998e <__assert_func+0x12>
 80099a6:	bf00      	nop
 80099a8:	2000005c 	.word	0x2000005c
 80099ac:	0800e252 	.word	0x0800e252
 80099b0:	0800e25f 	.word	0x0800e25f
 80099b4:	0800e28d 	.word	0x0800e28d

080099b8 <fiprintf>:
 80099b8:	b40e      	push	{r1, r2, r3}
 80099ba:	b503      	push	{r0, r1, lr}
 80099bc:	4601      	mov	r1, r0
 80099be:	ab03      	add	r3, sp, #12
 80099c0:	4805      	ldr	r0, [pc, #20]	; (80099d8 <fiprintf+0x20>)
 80099c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80099c6:	6800      	ldr	r0, [r0, #0]
 80099c8:	9301      	str	r3, [sp, #4]
 80099ca:	f000 f999 	bl	8009d00 <_vfiprintf_r>
 80099ce:	b002      	add	sp, #8
 80099d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80099d4:	b003      	add	sp, #12
 80099d6:	4770      	bx	lr
 80099d8:	2000005c 	.word	0x2000005c

080099dc <__malloc_lock>:
 80099dc:	4801      	ldr	r0, [pc, #4]	; (80099e4 <__malloc_lock+0x8>)
 80099de:	f000 bed3 	b.w	800a788 <__retarget_lock_acquire_recursive>
 80099e2:	bf00      	nop
 80099e4:	20000750 	.word	0x20000750

080099e8 <__malloc_unlock>:
 80099e8:	4801      	ldr	r0, [pc, #4]	; (80099f0 <__malloc_unlock+0x8>)
 80099ea:	f000 bece 	b.w	800a78a <__retarget_lock_release_recursive>
 80099ee:	bf00      	nop
 80099f0:	20000750 	.word	0x20000750

080099f4 <__ssputs_r>:
 80099f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099f8:	688e      	ldr	r6, [r1, #8]
 80099fa:	429e      	cmp	r6, r3
 80099fc:	4682      	mov	sl, r0
 80099fe:	460c      	mov	r4, r1
 8009a00:	4690      	mov	r8, r2
 8009a02:	461f      	mov	r7, r3
 8009a04:	d838      	bhi.n	8009a78 <__ssputs_r+0x84>
 8009a06:	898a      	ldrh	r2, [r1, #12]
 8009a08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a0c:	d032      	beq.n	8009a74 <__ssputs_r+0x80>
 8009a0e:	6825      	ldr	r5, [r4, #0]
 8009a10:	6909      	ldr	r1, [r1, #16]
 8009a12:	eba5 0901 	sub.w	r9, r5, r1
 8009a16:	6965      	ldr	r5, [r4, #20]
 8009a18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a20:	3301      	adds	r3, #1
 8009a22:	444b      	add	r3, r9
 8009a24:	106d      	asrs	r5, r5, #1
 8009a26:	429d      	cmp	r5, r3
 8009a28:	bf38      	it	cc
 8009a2a:	461d      	movcc	r5, r3
 8009a2c:	0553      	lsls	r3, r2, #21
 8009a2e:	d531      	bpl.n	8009a94 <__ssputs_r+0xa0>
 8009a30:	4629      	mov	r1, r5
 8009a32:	f7ff fe61 	bl	80096f8 <_malloc_r>
 8009a36:	4606      	mov	r6, r0
 8009a38:	b950      	cbnz	r0, 8009a50 <__ssputs_r+0x5c>
 8009a3a:	230c      	movs	r3, #12
 8009a3c:	f8ca 3000 	str.w	r3, [sl]
 8009a40:	89a3      	ldrh	r3, [r4, #12]
 8009a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a46:	81a3      	strh	r3, [r4, #12]
 8009a48:	f04f 30ff 	mov.w	r0, #4294967295
 8009a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a50:	6921      	ldr	r1, [r4, #16]
 8009a52:	464a      	mov	r2, r9
 8009a54:	f7ff fdce 	bl	80095f4 <memcpy>
 8009a58:	89a3      	ldrh	r3, [r4, #12]
 8009a5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a62:	81a3      	strh	r3, [r4, #12]
 8009a64:	6126      	str	r6, [r4, #16]
 8009a66:	6165      	str	r5, [r4, #20]
 8009a68:	444e      	add	r6, r9
 8009a6a:	eba5 0509 	sub.w	r5, r5, r9
 8009a6e:	6026      	str	r6, [r4, #0]
 8009a70:	60a5      	str	r5, [r4, #8]
 8009a72:	463e      	mov	r6, r7
 8009a74:	42be      	cmp	r6, r7
 8009a76:	d900      	bls.n	8009a7a <__ssputs_r+0x86>
 8009a78:	463e      	mov	r6, r7
 8009a7a:	6820      	ldr	r0, [r4, #0]
 8009a7c:	4632      	mov	r2, r6
 8009a7e:	4641      	mov	r1, r8
 8009a80:	f000 feea 	bl	800a858 <memmove>
 8009a84:	68a3      	ldr	r3, [r4, #8]
 8009a86:	1b9b      	subs	r3, r3, r6
 8009a88:	60a3      	str	r3, [r4, #8]
 8009a8a:	6823      	ldr	r3, [r4, #0]
 8009a8c:	4433      	add	r3, r6
 8009a8e:	6023      	str	r3, [r4, #0]
 8009a90:	2000      	movs	r0, #0
 8009a92:	e7db      	b.n	8009a4c <__ssputs_r+0x58>
 8009a94:	462a      	mov	r2, r5
 8009a96:	f000 fef9 	bl	800a88c <_realloc_r>
 8009a9a:	4606      	mov	r6, r0
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	d1e1      	bne.n	8009a64 <__ssputs_r+0x70>
 8009aa0:	6921      	ldr	r1, [r4, #16]
 8009aa2:	4650      	mov	r0, sl
 8009aa4:	f7ff fdbc 	bl	8009620 <_free_r>
 8009aa8:	e7c7      	b.n	8009a3a <__ssputs_r+0x46>
	...

08009aac <_svfiprintf_r>:
 8009aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab0:	4698      	mov	r8, r3
 8009ab2:	898b      	ldrh	r3, [r1, #12]
 8009ab4:	061b      	lsls	r3, r3, #24
 8009ab6:	b09d      	sub	sp, #116	; 0x74
 8009ab8:	4607      	mov	r7, r0
 8009aba:	460d      	mov	r5, r1
 8009abc:	4614      	mov	r4, r2
 8009abe:	d50e      	bpl.n	8009ade <_svfiprintf_r+0x32>
 8009ac0:	690b      	ldr	r3, [r1, #16]
 8009ac2:	b963      	cbnz	r3, 8009ade <_svfiprintf_r+0x32>
 8009ac4:	2140      	movs	r1, #64	; 0x40
 8009ac6:	f7ff fe17 	bl	80096f8 <_malloc_r>
 8009aca:	6028      	str	r0, [r5, #0]
 8009acc:	6128      	str	r0, [r5, #16]
 8009ace:	b920      	cbnz	r0, 8009ada <_svfiprintf_r+0x2e>
 8009ad0:	230c      	movs	r3, #12
 8009ad2:	603b      	str	r3, [r7, #0]
 8009ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad8:	e0d1      	b.n	8009c7e <_svfiprintf_r+0x1d2>
 8009ada:	2340      	movs	r3, #64	; 0x40
 8009adc:	616b      	str	r3, [r5, #20]
 8009ade:	2300      	movs	r3, #0
 8009ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ae2:	2320      	movs	r3, #32
 8009ae4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ae8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009aec:	2330      	movs	r3, #48	; 0x30
 8009aee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009c98 <_svfiprintf_r+0x1ec>
 8009af2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009af6:	f04f 0901 	mov.w	r9, #1
 8009afa:	4623      	mov	r3, r4
 8009afc:	469a      	mov	sl, r3
 8009afe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b02:	b10a      	cbz	r2, 8009b08 <_svfiprintf_r+0x5c>
 8009b04:	2a25      	cmp	r2, #37	; 0x25
 8009b06:	d1f9      	bne.n	8009afc <_svfiprintf_r+0x50>
 8009b08:	ebba 0b04 	subs.w	fp, sl, r4
 8009b0c:	d00b      	beq.n	8009b26 <_svfiprintf_r+0x7a>
 8009b0e:	465b      	mov	r3, fp
 8009b10:	4622      	mov	r2, r4
 8009b12:	4629      	mov	r1, r5
 8009b14:	4638      	mov	r0, r7
 8009b16:	f7ff ff6d 	bl	80099f4 <__ssputs_r>
 8009b1a:	3001      	adds	r0, #1
 8009b1c:	f000 80aa 	beq.w	8009c74 <_svfiprintf_r+0x1c8>
 8009b20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b22:	445a      	add	r2, fp
 8009b24:	9209      	str	r2, [sp, #36]	; 0x24
 8009b26:	f89a 3000 	ldrb.w	r3, [sl]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f000 80a2 	beq.w	8009c74 <_svfiprintf_r+0x1c8>
 8009b30:	2300      	movs	r3, #0
 8009b32:	f04f 32ff 	mov.w	r2, #4294967295
 8009b36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b3a:	f10a 0a01 	add.w	sl, sl, #1
 8009b3e:	9304      	str	r3, [sp, #16]
 8009b40:	9307      	str	r3, [sp, #28]
 8009b42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b46:	931a      	str	r3, [sp, #104]	; 0x68
 8009b48:	4654      	mov	r4, sl
 8009b4a:	2205      	movs	r2, #5
 8009b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b50:	4851      	ldr	r0, [pc, #324]	; (8009c98 <_svfiprintf_r+0x1ec>)
 8009b52:	f7f6 fb55 	bl	8000200 <memchr>
 8009b56:	9a04      	ldr	r2, [sp, #16]
 8009b58:	b9d8      	cbnz	r0, 8009b92 <_svfiprintf_r+0xe6>
 8009b5a:	06d0      	lsls	r0, r2, #27
 8009b5c:	bf44      	itt	mi
 8009b5e:	2320      	movmi	r3, #32
 8009b60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b64:	0711      	lsls	r1, r2, #28
 8009b66:	bf44      	itt	mi
 8009b68:	232b      	movmi	r3, #43	; 0x2b
 8009b6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8009b72:	2b2a      	cmp	r3, #42	; 0x2a
 8009b74:	d015      	beq.n	8009ba2 <_svfiprintf_r+0xf6>
 8009b76:	9a07      	ldr	r2, [sp, #28]
 8009b78:	4654      	mov	r4, sl
 8009b7a:	2000      	movs	r0, #0
 8009b7c:	f04f 0c0a 	mov.w	ip, #10
 8009b80:	4621      	mov	r1, r4
 8009b82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b86:	3b30      	subs	r3, #48	; 0x30
 8009b88:	2b09      	cmp	r3, #9
 8009b8a:	d94e      	bls.n	8009c2a <_svfiprintf_r+0x17e>
 8009b8c:	b1b0      	cbz	r0, 8009bbc <_svfiprintf_r+0x110>
 8009b8e:	9207      	str	r2, [sp, #28]
 8009b90:	e014      	b.n	8009bbc <_svfiprintf_r+0x110>
 8009b92:	eba0 0308 	sub.w	r3, r0, r8
 8009b96:	fa09 f303 	lsl.w	r3, r9, r3
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	9304      	str	r3, [sp, #16]
 8009b9e:	46a2      	mov	sl, r4
 8009ba0:	e7d2      	b.n	8009b48 <_svfiprintf_r+0x9c>
 8009ba2:	9b03      	ldr	r3, [sp, #12]
 8009ba4:	1d19      	adds	r1, r3, #4
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	9103      	str	r1, [sp, #12]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	bfbb      	ittet	lt
 8009bae:	425b      	neglt	r3, r3
 8009bb0:	f042 0202 	orrlt.w	r2, r2, #2
 8009bb4:	9307      	strge	r3, [sp, #28]
 8009bb6:	9307      	strlt	r3, [sp, #28]
 8009bb8:	bfb8      	it	lt
 8009bba:	9204      	strlt	r2, [sp, #16]
 8009bbc:	7823      	ldrb	r3, [r4, #0]
 8009bbe:	2b2e      	cmp	r3, #46	; 0x2e
 8009bc0:	d10c      	bne.n	8009bdc <_svfiprintf_r+0x130>
 8009bc2:	7863      	ldrb	r3, [r4, #1]
 8009bc4:	2b2a      	cmp	r3, #42	; 0x2a
 8009bc6:	d135      	bne.n	8009c34 <_svfiprintf_r+0x188>
 8009bc8:	9b03      	ldr	r3, [sp, #12]
 8009bca:	1d1a      	adds	r2, r3, #4
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	9203      	str	r2, [sp, #12]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	bfb8      	it	lt
 8009bd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bd8:	3402      	adds	r4, #2
 8009bda:	9305      	str	r3, [sp, #20]
 8009bdc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ca8 <_svfiprintf_r+0x1fc>
 8009be0:	7821      	ldrb	r1, [r4, #0]
 8009be2:	2203      	movs	r2, #3
 8009be4:	4650      	mov	r0, sl
 8009be6:	f7f6 fb0b 	bl	8000200 <memchr>
 8009bea:	b140      	cbz	r0, 8009bfe <_svfiprintf_r+0x152>
 8009bec:	2340      	movs	r3, #64	; 0x40
 8009bee:	eba0 000a 	sub.w	r0, r0, sl
 8009bf2:	fa03 f000 	lsl.w	r0, r3, r0
 8009bf6:	9b04      	ldr	r3, [sp, #16]
 8009bf8:	4303      	orrs	r3, r0
 8009bfa:	3401      	adds	r4, #1
 8009bfc:	9304      	str	r3, [sp, #16]
 8009bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c02:	4826      	ldr	r0, [pc, #152]	; (8009c9c <_svfiprintf_r+0x1f0>)
 8009c04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c08:	2206      	movs	r2, #6
 8009c0a:	f7f6 faf9 	bl	8000200 <memchr>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	d038      	beq.n	8009c84 <_svfiprintf_r+0x1d8>
 8009c12:	4b23      	ldr	r3, [pc, #140]	; (8009ca0 <_svfiprintf_r+0x1f4>)
 8009c14:	bb1b      	cbnz	r3, 8009c5e <_svfiprintf_r+0x1b2>
 8009c16:	9b03      	ldr	r3, [sp, #12]
 8009c18:	3307      	adds	r3, #7
 8009c1a:	f023 0307 	bic.w	r3, r3, #7
 8009c1e:	3308      	adds	r3, #8
 8009c20:	9303      	str	r3, [sp, #12]
 8009c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c24:	4433      	add	r3, r6
 8009c26:	9309      	str	r3, [sp, #36]	; 0x24
 8009c28:	e767      	b.n	8009afa <_svfiprintf_r+0x4e>
 8009c2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c2e:	460c      	mov	r4, r1
 8009c30:	2001      	movs	r0, #1
 8009c32:	e7a5      	b.n	8009b80 <_svfiprintf_r+0xd4>
 8009c34:	2300      	movs	r3, #0
 8009c36:	3401      	adds	r4, #1
 8009c38:	9305      	str	r3, [sp, #20]
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	f04f 0c0a 	mov.w	ip, #10
 8009c40:	4620      	mov	r0, r4
 8009c42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c46:	3a30      	subs	r2, #48	; 0x30
 8009c48:	2a09      	cmp	r2, #9
 8009c4a:	d903      	bls.n	8009c54 <_svfiprintf_r+0x1a8>
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d0c5      	beq.n	8009bdc <_svfiprintf_r+0x130>
 8009c50:	9105      	str	r1, [sp, #20]
 8009c52:	e7c3      	b.n	8009bdc <_svfiprintf_r+0x130>
 8009c54:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c58:	4604      	mov	r4, r0
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e7f0      	b.n	8009c40 <_svfiprintf_r+0x194>
 8009c5e:	ab03      	add	r3, sp, #12
 8009c60:	9300      	str	r3, [sp, #0]
 8009c62:	462a      	mov	r2, r5
 8009c64:	4b0f      	ldr	r3, [pc, #60]	; (8009ca4 <_svfiprintf_r+0x1f8>)
 8009c66:	a904      	add	r1, sp, #16
 8009c68:	4638      	mov	r0, r7
 8009c6a:	f3af 8000 	nop.w
 8009c6e:	1c42      	adds	r2, r0, #1
 8009c70:	4606      	mov	r6, r0
 8009c72:	d1d6      	bne.n	8009c22 <_svfiprintf_r+0x176>
 8009c74:	89ab      	ldrh	r3, [r5, #12]
 8009c76:	065b      	lsls	r3, r3, #25
 8009c78:	f53f af2c 	bmi.w	8009ad4 <_svfiprintf_r+0x28>
 8009c7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c7e:	b01d      	add	sp, #116	; 0x74
 8009c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c84:	ab03      	add	r3, sp, #12
 8009c86:	9300      	str	r3, [sp, #0]
 8009c88:	462a      	mov	r2, r5
 8009c8a:	4b06      	ldr	r3, [pc, #24]	; (8009ca4 <_svfiprintf_r+0x1f8>)
 8009c8c:	a904      	add	r1, sp, #16
 8009c8e:	4638      	mov	r0, r7
 8009c90:	f000 f9d4 	bl	800a03c <_printf_i>
 8009c94:	e7eb      	b.n	8009c6e <_svfiprintf_r+0x1c2>
 8009c96:	bf00      	nop
 8009c98:	0800e28e 	.word	0x0800e28e
 8009c9c:	0800e298 	.word	0x0800e298
 8009ca0:	00000000 	.word	0x00000000
 8009ca4:	080099f5 	.word	0x080099f5
 8009ca8:	0800e294 	.word	0x0800e294

08009cac <__sfputc_r>:
 8009cac:	6893      	ldr	r3, [r2, #8]
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	b410      	push	{r4}
 8009cb4:	6093      	str	r3, [r2, #8]
 8009cb6:	da08      	bge.n	8009cca <__sfputc_r+0x1e>
 8009cb8:	6994      	ldr	r4, [r2, #24]
 8009cba:	42a3      	cmp	r3, r4
 8009cbc:	db01      	blt.n	8009cc2 <__sfputc_r+0x16>
 8009cbe:	290a      	cmp	r1, #10
 8009cc0:	d103      	bne.n	8009cca <__sfputc_r+0x1e>
 8009cc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cc6:	f000 badf 	b.w	800a288 <__swbuf_r>
 8009cca:	6813      	ldr	r3, [r2, #0]
 8009ccc:	1c58      	adds	r0, r3, #1
 8009cce:	6010      	str	r0, [r2, #0]
 8009cd0:	7019      	strb	r1, [r3, #0]
 8009cd2:	4608      	mov	r0, r1
 8009cd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cd8:	4770      	bx	lr

08009cda <__sfputs_r>:
 8009cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cdc:	4606      	mov	r6, r0
 8009cde:	460f      	mov	r7, r1
 8009ce0:	4614      	mov	r4, r2
 8009ce2:	18d5      	adds	r5, r2, r3
 8009ce4:	42ac      	cmp	r4, r5
 8009ce6:	d101      	bne.n	8009cec <__sfputs_r+0x12>
 8009ce8:	2000      	movs	r0, #0
 8009cea:	e007      	b.n	8009cfc <__sfputs_r+0x22>
 8009cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cf0:	463a      	mov	r2, r7
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	f7ff ffda 	bl	8009cac <__sfputc_r>
 8009cf8:	1c43      	adds	r3, r0, #1
 8009cfa:	d1f3      	bne.n	8009ce4 <__sfputs_r+0xa>
 8009cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d00 <_vfiprintf_r>:
 8009d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d04:	460d      	mov	r5, r1
 8009d06:	b09d      	sub	sp, #116	; 0x74
 8009d08:	4614      	mov	r4, r2
 8009d0a:	4698      	mov	r8, r3
 8009d0c:	4606      	mov	r6, r0
 8009d0e:	b118      	cbz	r0, 8009d18 <_vfiprintf_r+0x18>
 8009d10:	6983      	ldr	r3, [r0, #24]
 8009d12:	b90b      	cbnz	r3, 8009d18 <_vfiprintf_r+0x18>
 8009d14:	f000 fc9a 	bl	800a64c <__sinit>
 8009d18:	4b89      	ldr	r3, [pc, #548]	; (8009f40 <_vfiprintf_r+0x240>)
 8009d1a:	429d      	cmp	r5, r3
 8009d1c:	d11b      	bne.n	8009d56 <_vfiprintf_r+0x56>
 8009d1e:	6875      	ldr	r5, [r6, #4]
 8009d20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d22:	07d9      	lsls	r1, r3, #31
 8009d24:	d405      	bmi.n	8009d32 <_vfiprintf_r+0x32>
 8009d26:	89ab      	ldrh	r3, [r5, #12]
 8009d28:	059a      	lsls	r2, r3, #22
 8009d2a:	d402      	bmi.n	8009d32 <_vfiprintf_r+0x32>
 8009d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d2e:	f000 fd2b 	bl	800a788 <__retarget_lock_acquire_recursive>
 8009d32:	89ab      	ldrh	r3, [r5, #12]
 8009d34:	071b      	lsls	r3, r3, #28
 8009d36:	d501      	bpl.n	8009d3c <_vfiprintf_r+0x3c>
 8009d38:	692b      	ldr	r3, [r5, #16]
 8009d3a:	b9eb      	cbnz	r3, 8009d78 <_vfiprintf_r+0x78>
 8009d3c:	4629      	mov	r1, r5
 8009d3e:	4630      	mov	r0, r6
 8009d40:	f000 faf4 	bl	800a32c <__swsetup_r>
 8009d44:	b1c0      	cbz	r0, 8009d78 <_vfiprintf_r+0x78>
 8009d46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d48:	07dc      	lsls	r4, r3, #31
 8009d4a:	d50e      	bpl.n	8009d6a <_vfiprintf_r+0x6a>
 8009d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d50:	b01d      	add	sp, #116	; 0x74
 8009d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d56:	4b7b      	ldr	r3, [pc, #492]	; (8009f44 <_vfiprintf_r+0x244>)
 8009d58:	429d      	cmp	r5, r3
 8009d5a:	d101      	bne.n	8009d60 <_vfiprintf_r+0x60>
 8009d5c:	68b5      	ldr	r5, [r6, #8]
 8009d5e:	e7df      	b.n	8009d20 <_vfiprintf_r+0x20>
 8009d60:	4b79      	ldr	r3, [pc, #484]	; (8009f48 <_vfiprintf_r+0x248>)
 8009d62:	429d      	cmp	r5, r3
 8009d64:	bf08      	it	eq
 8009d66:	68f5      	ldreq	r5, [r6, #12]
 8009d68:	e7da      	b.n	8009d20 <_vfiprintf_r+0x20>
 8009d6a:	89ab      	ldrh	r3, [r5, #12]
 8009d6c:	0598      	lsls	r0, r3, #22
 8009d6e:	d4ed      	bmi.n	8009d4c <_vfiprintf_r+0x4c>
 8009d70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d72:	f000 fd0a 	bl	800a78a <__retarget_lock_release_recursive>
 8009d76:	e7e9      	b.n	8009d4c <_vfiprintf_r+0x4c>
 8009d78:	2300      	movs	r3, #0
 8009d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d7c:	2320      	movs	r3, #32
 8009d7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d82:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d86:	2330      	movs	r3, #48	; 0x30
 8009d88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009f4c <_vfiprintf_r+0x24c>
 8009d8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d90:	f04f 0901 	mov.w	r9, #1
 8009d94:	4623      	mov	r3, r4
 8009d96:	469a      	mov	sl, r3
 8009d98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d9c:	b10a      	cbz	r2, 8009da2 <_vfiprintf_r+0xa2>
 8009d9e:	2a25      	cmp	r2, #37	; 0x25
 8009da0:	d1f9      	bne.n	8009d96 <_vfiprintf_r+0x96>
 8009da2:	ebba 0b04 	subs.w	fp, sl, r4
 8009da6:	d00b      	beq.n	8009dc0 <_vfiprintf_r+0xc0>
 8009da8:	465b      	mov	r3, fp
 8009daa:	4622      	mov	r2, r4
 8009dac:	4629      	mov	r1, r5
 8009dae:	4630      	mov	r0, r6
 8009db0:	f7ff ff93 	bl	8009cda <__sfputs_r>
 8009db4:	3001      	adds	r0, #1
 8009db6:	f000 80aa 	beq.w	8009f0e <_vfiprintf_r+0x20e>
 8009dba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dbc:	445a      	add	r2, fp
 8009dbe:	9209      	str	r2, [sp, #36]	; 0x24
 8009dc0:	f89a 3000 	ldrb.w	r3, [sl]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f000 80a2 	beq.w	8009f0e <_vfiprintf_r+0x20e>
 8009dca:	2300      	movs	r3, #0
 8009dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8009dd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dd4:	f10a 0a01 	add.w	sl, sl, #1
 8009dd8:	9304      	str	r3, [sp, #16]
 8009dda:	9307      	str	r3, [sp, #28]
 8009ddc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009de0:	931a      	str	r3, [sp, #104]	; 0x68
 8009de2:	4654      	mov	r4, sl
 8009de4:	2205      	movs	r2, #5
 8009de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dea:	4858      	ldr	r0, [pc, #352]	; (8009f4c <_vfiprintf_r+0x24c>)
 8009dec:	f7f6 fa08 	bl	8000200 <memchr>
 8009df0:	9a04      	ldr	r2, [sp, #16]
 8009df2:	b9d8      	cbnz	r0, 8009e2c <_vfiprintf_r+0x12c>
 8009df4:	06d1      	lsls	r1, r2, #27
 8009df6:	bf44      	itt	mi
 8009df8:	2320      	movmi	r3, #32
 8009dfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dfe:	0713      	lsls	r3, r2, #28
 8009e00:	bf44      	itt	mi
 8009e02:	232b      	movmi	r3, #43	; 0x2b
 8009e04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e08:	f89a 3000 	ldrb.w	r3, [sl]
 8009e0c:	2b2a      	cmp	r3, #42	; 0x2a
 8009e0e:	d015      	beq.n	8009e3c <_vfiprintf_r+0x13c>
 8009e10:	9a07      	ldr	r2, [sp, #28]
 8009e12:	4654      	mov	r4, sl
 8009e14:	2000      	movs	r0, #0
 8009e16:	f04f 0c0a 	mov.w	ip, #10
 8009e1a:	4621      	mov	r1, r4
 8009e1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e20:	3b30      	subs	r3, #48	; 0x30
 8009e22:	2b09      	cmp	r3, #9
 8009e24:	d94e      	bls.n	8009ec4 <_vfiprintf_r+0x1c4>
 8009e26:	b1b0      	cbz	r0, 8009e56 <_vfiprintf_r+0x156>
 8009e28:	9207      	str	r2, [sp, #28]
 8009e2a:	e014      	b.n	8009e56 <_vfiprintf_r+0x156>
 8009e2c:	eba0 0308 	sub.w	r3, r0, r8
 8009e30:	fa09 f303 	lsl.w	r3, r9, r3
 8009e34:	4313      	orrs	r3, r2
 8009e36:	9304      	str	r3, [sp, #16]
 8009e38:	46a2      	mov	sl, r4
 8009e3a:	e7d2      	b.n	8009de2 <_vfiprintf_r+0xe2>
 8009e3c:	9b03      	ldr	r3, [sp, #12]
 8009e3e:	1d19      	adds	r1, r3, #4
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	9103      	str	r1, [sp, #12]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	bfbb      	ittet	lt
 8009e48:	425b      	neglt	r3, r3
 8009e4a:	f042 0202 	orrlt.w	r2, r2, #2
 8009e4e:	9307      	strge	r3, [sp, #28]
 8009e50:	9307      	strlt	r3, [sp, #28]
 8009e52:	bfb8      	it	lt
 8009e54:	9204      	strlt	r2, [sp, #16]
 8009e56:	7823      	ldrb	r3, [r4, #0]
 8009e58:	2b2e      	cmp	r3, #46	; 0x2e
 8009e5a:	d10c      	bne.n	8009e76 <_vfiprintf_r+0x176>
 8009e5c:	7863      	ldrb	r3, [r4, #1]
 8009e5e:	2b2a      	cmp	r3, #42	; 0x2a
 8009e60:	d135      	bne.n	8009ece <_vfiprintf_r+0x1ce>
 8009e62:	9b03      	ldr	r3, [sp, #12]
 8009e64:	1d1a      	adds	r2, r3, #4
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	9203      	str	r2, [sp, #12]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	bfb8      	it	lt
 8009e6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e72:	3402      	adds	r4, #2
 8009e74:	9305      	str	r3, [sp, #20]
 8009e76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009f5c <_vfiprintf_r+0x25c>
 8009e7a:	7821      	ldrb	r1, [r4, #0]
 8009e7c:	2203      	movs	r2, #3
 8009e7e:	4650      	mov	r0, sl
 8009e80:	f7f6 f9be 	bl	8000200 <memchr>
 8009e84:	b140      	cbz	r0, 8009e98 <_vfiprintf_r+0x198>
 8009e86:	2340      	movs	r3, #64	; 0x40
 8009e88:	eba0 000a 	sub.w	r0, r0, sl
 8009e8c:	fa03 f000 	lsl.w	r0, r3, r0
 8009e90:	9b04      	ldr	r3, [sp, #16]
 8009e92:	4303      	orrs	r3, r0
 8009e94:	3401      	adds	r4, #1
 8009e96:	9304      	str	r3, [sp, #16]
 8009e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e9c:	482c      	ldr	r0, [pc, #176]	; (8009f50 <_vfiprintf_r+0x250>)
 8009e9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ea2:	2206      	movs	r2, #6
 8009ea4:	f7f6 f9ac 	bl	8000200 <memchr>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	d03f      	beq.n	8009f2c <_vfiprintf_r+0x22c>
 8009eac:	4b29      	ldr	r3, [pc, #164]	; (8009f54 <_vfiprintf_r+0x254>)
 8009eae:	bb1b      	cbnz	r3, 8009ef8 <_vfiprintf_r+0x1f8>
 8009eb0:	9b03      	ldr	r3, [sp, #12]
 8009eb2:	3307      	adds	r3, #7
 8009eb4:	f023 0307 	bic.w	r3, r3, #7
 8009eb8:	3308      	adds	r3, #8
 8009eba:	9303      	str	r3, [sp, #12]
 8009ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ebe:	443b      	add	r3, r7
 8009ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ec2:	e767      	b.n	8009d94 <_vfiprintf_r+0x94>
 8009ec4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ec8:	460c      	mov	r4, r1
 8009eca:	2001      	movs	r0, #1
 8009ecc:	e7a5      	b.n	8009e1a <_vfiprintf_r+0x11a>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	3401      	adds	r4, #1
 8009ed2:	9305      	str	r3, [sp, #20]
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	f04f 0c0a 	mov.w	ip, #10
 8009eda:	4620      	mov	r0, r4
 8009edc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ee0:	3a30      	subs	r2, #48	; 0x30
 8009ee2:	2a09      	cmp	r2, #9
 8009ee4:	d903      	bls.n	8009eee <_vfiprintf_r+0x1ee>
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d0c5      	beq.n	8009e76 <_vfiprintf_r+0x176>
 8009eea:	9105      	str	r1, [sp, #20]
 8009eec:	e7c3      	b.n	8009e76 <_vfiprintf_r+0x176>
 8009eee:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e7f0      	b.n	8009eda <_vfiprintf_r+0x1da>
 8009ef8:	ab03      	add	r3, sp, #12
 8009efa:	9300      	str	r3, [sp, #0]
 8009efc:	462a      	mov	r2, r5
 8009efe:	4b16      	ldr	r3, [pc, #88]	; (8009f58 <_vfiprintf_r+0x258>)
 8009f00:	a904      	add	r1, sp, #16
 8009f02:	4630      	mov	r0, r6
 8009f04:	f3af 8000 	nop.w
 8009f08:	4607      	mov	r7, r0
 8009f0a:	1c78      	adds	r0, r7, #1
 8009f0c:	d1d6      	bne.n	8009ebc <_vfiprintf_r+0x1bc>
 8009f0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f10:	07d9      	lsls	r1, r3, #31
 8009f12:	d405      	bmi.n	8009f20 <_vfiprintf_r+0x220>
 8009f14:	89ab      	ldrh	r3, [r5, #12]
 8009f16:	059a      	lsls	r2, r3, #22
 8009f18:	d402      	bmi.n	8009f20 <_vfiprintf_r+0x220>
 8009f1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f1c:	f000 fc35 	bl	800a78a <__retarget_lock_release_recursive>
 8009f20:	89ab      	ldrh	r3, [r5, #12]
 8009f22:	065b      	lsls	r3, r3, #25
 8009f24:	f53f af12 	bmi.w	8009d4c <_vfiprintf_r+0x4c>
 8009f28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f2a:	e711      	b.n	8009d50 <_vfiprintf_r+0x50>
 8009f2c:	ab03      	add	r3, sp, #12
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	462a      	mov	r2, r5
 8009f32:	4b09      	ldr	r3, [pc, #36]	; (8009f58 <_vfiprintf_r+0x258>)
 8009f34:	a904      	add	r1, sp, #16
 8009f36:	4630      	mov	r0, r6
 8009f38:	f000 f880 	bl	800a03c <_printf_i>
 8009f3c:	e7e4      	b.n	8009f08 <_vfiprintf_r+0x208>
 8009f3e:	bf00      	nop
 8009f40:	0800e2e4 	.word	0x0800e2e4
 8009f44:	0800e304 	.word	0x0800e304
 8009f48:	0800e2c4 	.word	0x0800e2c4
 8009f4c:	0800e28e 	.word	0x0800e28e
 8009f50:	0800e298 	.word	0x0800e298
 8009f54:	00000000 	.word	0x00000000
 8009f58:	08009cdb 	.word	0x08009cdb
 8009f5c:	0800e294 	.word	0x0800e294

08009f60 <_printf_common>:
 8009f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f64:	4616      	mov	r6, r2
 8009f66:	4699      	mov	r9, r3
 8009f68:	688a      	ldr	r2, [r1, #8]
 8009f6a:	690b      	ldr	r3, [r1, #16]
 8009f6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f70:	4293      	cmp	r3, r2
 8009f72:	bfb8      	it	lt
 8009f74:	4613      	movlt	r3, r2
 8009f76:	6033      	str	r3, [r6, #0]
 8009f78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f7c:	4607      	mov	r7, r0
 8009f7e:	460c      	mov	r4, r1
 8009f80:	b10a      	cbz	r2, 8009f86 <_printf_common+0x26>
 8009f82:	3301      	adds	r3, #1
 8009f84:	6033      	str	r3, [r6, #0]
 8009f86:	6823      	ldr	r3, [r4, #0]
 8009f88:	0699      	lsls	r1, r3, #26
 8009f8a:	bf42      	ittt	mi
 8009f8c:	6833      	ldrmi	r3, [r6, #0]
 8009f8e:	3302      	addmi	r3, #2
 8009f90:	6033      	strmi	r3, [r6, #0]
 8009f92:	6825      	ldr	r5, [r4, #0]
 8009f94:	f015 0506 	ands.w	r5, r5, #6
 8009f98:	d106      	bne.n	8009fa8 <_printf_common+0x48>
 8009f9a:	f104 0a19 	add.w	sl, r4, #25
 8009f9e:	68e3      	ldr	r3, [r4, #12]
 8009fa0:	6832      	ldr	r2, [r6, #0]
 8009fa2:	1a9b      	subs	r3, r3, r2
 8009fa4:	42ab      	cmp	r3, r5
 8009fa6:	dc26      	bgt.n	8009ff6 <_printf_common+0x96>
 8009fa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009fac:	1e13      	subs	r3, r2, #0
 8009fae:	6822      	ldr	r2, [r4, #0]
 8009fb0:	bf18      	it	ne
 8009fb2:	2301      	movne	r3, #1
 8009fb4:	0692      	lsls	r2, r2, #26
 8009fb6:	d42b      	bmi.n	800a010 <_printf_common+0xb0>
 8009fb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fbc:	4649      	mov	r1, r9
 8009fbe:	4638      	mov	r0, r7
 8009fc0:	47c0      	blx	r8
 8009fc2:	3001      	adds	r0, #1
 8009fc4:	d01e      	beq.n	800a004 <_printf_common+0xa4>
 8009fc6:	6823      	ldr	r3, [r4, #0]
 8009fc8:	68e5      	ldr	r5, [r4, #12]
 8009fca:	6832      	ldr	r2, [r6, #0]
 8009fcc:	f003 0306 	and.w	r3, r3, #6
 8009fd0:	2b04      	cmp	r3, #4
 8009fd2:	bf08      	it	eq
 8009fd4:	1aad      	subeq	r5, r5, r2
 8009fd6:	68a3      	ldr	r3, [r4, #8]
 8009fd8:	6922      	ldr	r2, [r4, #16]
 8009fda:	bf0c      	ite	eq
 8009fdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fe0:	2500      	movne	r5, #0
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	bfc4      	itt	gt
 8009fe6:	1a9b      	subgt	r3, r3, r2
 8009fe8:	18ed      	addgt	r5, r5, r3
 8009fea:	2600      	movs	r6, #0
 8009fec:	341a      	adds	r4, #26
 8009fee:	42b5      	cmp	r5, r6
 8009ff0:	d11a      	bne.n	800a028 <_printf_common+0xc8>
 8009ff2:	2000      	movs	r0, #0
 8009ff4:	e008      	b.n	800a008 <_printf_common+0xa8>
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	4652      	mov	r2, sl
 8009ffa:	4649      	mov	r1, r9
 8009ffc:	4638      	mov	r0, r7
 8009ffe:	47c0      	blx	r8
 800a000:	3001      	adds	r0, #1
 800a002:	d103      	bne.n	800a00c <_printf_common+0xac>
 800a004:	f04f 30ff 	mov.w	r0, #4294967295
 800a008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a00c:	3501      	adds	r5, #1
 800a00e:	e7c6      	b.n	8009f9e <_printf_common+0x3e>
 800a010:	18e1      	adds	r1, r4, r3
 800a012:	1c5a      	adds	r2, r3, #1
 800a014:	2030      	movs	r0, #48	; 0x30
 800a016:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a01a:	4422      	add	r2, r4
 800a01c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a020:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a024:	3302      	adds	r3, #2
 800a026:	e7c7      	b.n	8009fb8 <_printf_common+0x58>
 800a028:	2301      	movs	r3, #1
 800a02a:	4622      	mov	r2, r4
 800a02c:	4649      	mov	r1, r9
 800a02e:	4638      	mov	r0, r7
 800a030:	47c0      	blx	r8
 800a032:	3001      	adds	r0, #1
 800a034:	d0e6      	beq.n	800a004 <_printf_common+0xa4>
 800a036:	3601      	adds	r6, #1
 800a038:	e7d9      	b.n	8009fee <_printf_common+0x8e>
	...

0800a03c <_printf_i>:
 800a03c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a040:	7e0f      	ldrb	r7, [r1, #24]
 800a042:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a044:	2f78      	cmp	r7, #120	; 0x78
 800a046:	4691      	mov	r9, r2
 800a048:	4680      	mov	r8, r0
 800a04a:	460c      	mov	r4, r1
 800a04c:	469a      	mov	sl, r3
 800a04e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a052:	d807      	bhi.n	800a064 <_printf_i+0x28>
 800a054:	2f62      	cmp	r7, #98	; 0x62
 800a056:	d80a      	bhi.n	800a06e <_printf_i+0x32>
 800a058:	2f00      	cmp	r7, #0
 800a05a:	f000 80d8 	beq.w	800a20e <_printf_i+0x1d2>
 800a05e:	2f58      	cmp	r7, #88	; 0x58
 800a060:	f000 80a3 	beq.w	800a1aa <_printf_i+0x16e>
 800a064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a068:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a06c:	e03a      	b.n	800a0e4 <_printf_i+0xa8>
 800a06e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a072:	2b15      	cmp	r3, #21
 800a074:	d8f6      	bhi.n	800a064 <_printf_i+0x28>
 800a076:	a101      	add	r1, pc, #4	; (adr r1, 800a07c <_printf_i+0x40>)
 800a078:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a07c:	0800a0d5 	.word	0x0800a0d5
 800a080:	0800a0e9 	.word	0x0800a0e9
 800a084:	0800a065 	.word	0x0800a065
 800a088:	0800a065 	.word	0x0800a065
 800a08c:	0800a065 	.word	0x0800a065
 800a090:	0800a065 	.word	0x0800a065
 800a094:	0800a0e9 	.word	0x0800a0e9
 800a098:	0800a065 	.word	0x0800a065
 800a09c:	0800a065 	.word	0x0800a065
 800a0a0:	0800a065 	.word	0x0800a065
 800a0a4:	0800a065 	.word	0x0800a065
 800a0a8:	0800a1f5 	.word	0x0800a1f5
 800a0ac:	0800a119 	.word	0x0800a119
 800a0b0:	0800a1d7 	.word	0x0800a1d7
 800a0b4:	0800a065 	.word	0x0800a065
 800a0b8:	0800a065 	.word	0x0800a065
 800a0bc:	0800a217 	.word	0x0800a217
 800a0c0:	0800a065 	.word	0x0800a065
 800a0c4:	0800a119 	.word	0x0800a119
 800a0c8:	0800a065 	.word	0x0800a065
 800a0cc:	0800a065 	.word	0x0800a065
 800a0d0:	0800a1df 	.word	0x0800a1df
 800a0d4:	682b      	ldr	r3, [r5, #0]
 800a0d6:	1d1a      	adds	r2, r3, #4
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	602a      	str	r2, [r5, #0]
 800a0dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e0a3      	b.n	800a230 <_printf_i+0x1f4>
 800a0e8:	6820      	ldr	r0, [r4, #0]
 800a0ea:	6829      	ldr	r1, [r5, #0]
 800a0ec:	0606      	lsls	r6, r0, #24
 800a0ee:	f101 0304 	add.w	r3, r1, #4
 800a0f2:	d50a      	bpl.n	800a10a <_printf_i+0xce>
 800a0f4:	680e      	ldr	r6, [r1, #0]
 800a0f6:	602b      	str	r3, [r5, #0]
 800a0f8:	2e00      	cmp	r6, #0
 800a0fa:	da03      	bge.n	800a104 <_printf_i+0xc8>
 800a0fc:	232d      	movs	r3, #45	; 0x2d
 800a0fe:	4276      	negs	r6, r6
 800a100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a104:	485e      	ldr	r0, [pc, #376]	; (800a280 <_printf_i+0x244>)
 800a106:	230a      	movs	r3, #10
 800a108:	e019      	b.n	800a13e <_printf_i+0x102>
 800a10a:	680e      	ldr	r6, [r1, #0]
 800a10c:	602b      	str	r3, [r5, #0]
 800a10e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a112:	bf18      	it	ne
 800a114:	b236      	sxthne	r6, r6
 800a116:	e7ef      	b.n	800a0f8 <_printf_i+0xbc>
 800a118:	682b      	ldr	r3, [r5, #0]
 800a11a:	6820      	ldr	r0, [r4, #0]
 800a11c:	1d19      	adds	r1, r3, #4
 800a11e:	6029      	str	r1, [r5, #0]
 800a120:	0601      	lsls	r1, r0, #24
 800a122:	d501      	bpl.n	800a128 <_printf_i+0xec>
 800a124:	681e      	ldr	r6, [r3, #0]
 800a126:	e002      	b.n	800a12e <_printf_i+0xf2>
 800a128:	0646      	lsls	r6, r0, #25
 800a12a:	d5fb      	bpl.n	800a124 <_printf_i+0xe8>
 800a12c:	881e      	ldrh	r6, [r3, #0]
 800a12e:	4854      	ldr	r0, [pc, #336]	; (800a280 <_printf_i+0x244>)
 800a130:	2f6f      	cmp	r7, #111	; 0x6f
 800a132:	bf0c      	ite	eq
 800a134:	2308      	moveq	r3, #8
 800a136:	230a      	movne	r3, #10
 800a138:	2100      	movs	r1, #0
 800a13a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a13e:	6865      	ldr	r5, [r4, #4]
 800a140:	60a5      	str	r5, [r4, #8]
 800a142:	2d00      	cmp	r5, #0
 800a144:	bfa2      	ittt	ge
 800a146:	6821      	ldrge	r1, [r4, #0]
 800a148:	f021 0104 	bicge.w	r1, r1, #4
 800a14c:	6021      	strge	r1, [r4, #0]
 800a14e:	b90e      	cbnz	r6, 800a154 <_printf_i+0x118>
 800a150:	2d00      	cmp	r5, #0
 800a152:	d04d      	beq.n	800a1f0 <_printf_i+0x1b4>
 800a154:	4615      	mov	r5, r2
 800a156:	fbb6 f1f3 	udiv	r1, r6, r3
 800a15a:	fb03 6711 	mls	r7, r3, r1, r6
 800a15e:	5dc7      	ldrb	r7, [r0, r7]
 800a160:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a164:	4637      	mov	r7, r6
 800a166:	42bb      	cmp	r3, r7
 800a168:	460e      	mov	r6, r1
 800a16a:	d9f4      	bls.n	800a156 <_printf_i+0x11a>
 800a16c:	2b08      	cmp	r3, #8
 800a16e:	d10b      	bne.n	800a188 <_printf_i+0x14c>
 800a170:	6823      	ldr	r3, [r4, #0]
 800a172:	07de      	lsls	r6, r3, #31
 800a174:	d508      	bpl.n	800a188 <_printf_i+0x14c>
 800a176:	6923      	ldr	r3, [r4, #16]
 800a178:	6861      	ldr	r1, [r4, #4]
 800a17a:	4299      	cmp	r1, r3
 800a17c:	bfde      	ittt	le
 800a17e:	2330      	movle	r3, #48	; 0x30
 800a180:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a184:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a188:	1b52      	subs	r2, r2, r5
 800a18a:	6122      	str	r2, [r4, #16]
 800a18c:	f8cd a000 	str.w	sl, [sp]
 800a190:	464b      	mov	r3, r9
 800a192:	aa03      	add	r2, sp, #12
 800a194:	4621      	mov	r1, r4
 800a196:	4640      	mov	r0, r8
 800a198:	f7ff fee2 	bl	8009f60 <_printf_common>
 800a19c:	3001      	adds	r0, #1
 800a19e:	d14c      	bne.n	800a23a <_printf_i+0x1fe>
 800a1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a4:	b004      	add	sp, #16
 800a1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1aa:	4835      	ldr	r0, [pc, #212]	; (800a280 <_printf_i+0x244>)
 800a1ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a1b0:	6829      	ldr	r1, [r5, #0]
 800a1b2:	6823      	ldr	r3, [r4, #0]
 800a1b4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a1b8:	6029      	str	r1, [r5, #0]
 800a1ba:	061d      	lsls	r5, r3, #24
 800a1bc:	d514      	bpl.n	800a1e8 <_printf_i+0x1ac>
 800a1be:	07df      	lsls	r7, r3, #31
 800a1c0:	bf44      	itt	mi
 800a1c2:	f043 0320 	orrmi.w	r3, r3, #32
 800a1c6:	6023      	strmi	r3, [r4, #0]
 800a1c8:	b91e      	cbnz	r6, 800a1d2 <_printf_i+0x196>
 800a1ca:	6823      	ldr	r3, [r4, #0]
 800a1cc:	f023 0320 	bic.w	r3, r3, #32
 800a1d0:	6023      	str	r3, [r4, #0]
 800a1d2:	2310      	movs	r3, #16
 800a1d4:	e7b0      	b.n	800a138 <_printf_i+0xfc>
 800a1d6:	6823      	ldr	r3, [r4, #0]
 800a1d8:	f043 0320 	orr.w	r3, r3, #32
 800a1dc:	6023      	str	r3, [r4, #0]
 800a1de:	2378      	movs	r3, #120	; 0x78
 800a1e0:	4828      	ldr	r0, [pc, #160]	; (800a284 <_printf_i+0x248>)
 800a1e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1e6:	e7e3      	b.n	800a1b0 <_printf_i+0x174>
 800a1e8:	0659      	lsls	r1, r3, #25
 800a1ea:	bf48      	it	mi
 800a1ec:	b2b6      	uxthmi	r6, r6
 800a1ee:	e7e6      	b.n	800a1be <_printf_i+0x182>
 800a1f0:	4615      	mov	r5, r2
 800a1f2:	e7bb      	b.n	800a16c <_printf_i+0x130>
 800a1f4:	682b      	ldr	r3, [r5, #0]
 800a1f6:	6826      	ldr	r6, [r4, #0]
 800a1f8:	6961      	ldr	r1, [r4, #20]
 800a1fa:	1d18      	adds	r0, r3, #4
 800a1fc:	6028      	str	r0, [r5, #0]
 800a1fe:	0635      	lsls	r5, r6, #24
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	d501      	bpl.n	800a208 <_printf_i+0x1cc>
 800a204:	6019      	str	r1, [r3, #0]
 800a206:	e002      	b.n	800a20e <_printf_i+0x1d2>
 800a208:	0670      	lsls	r0, r6, #25
 800a20a:	d5fb      	bpl.n	800a204 <_printf_i+0x1c8>
 800a20c:	8019      	strh	r1, [r3, #0]
 800a20e:	2300      	movs	r3, #0
 800a210:	6123      	str	r3, [r4, #16]
 800a212:	4615      	mov	r5, r2
 800a214:	e7ba      	b.n	800a18c <_printf_i+0x150>
 800a216:	682b      	ldr	r3, [r5, #0]
 800a218:	1d1a      	adds	r2, r3, #4
 800a21a:	602a      	str	r2, [r5, #0]
 800a21c:	681d      	ldr	r5, [r3, #0]
 800a21e:	6862      	ldr	r2, [r4, #4]
 800a220:	2100      	movs	r1, #0
 800a222:	4628      	mov	r0, r5
 800a224:	f7f5 ffec 	bl	8000200 <memchr>
 800a228:	b108      	cbz	r0, 800a22e <_printf_i+0x1f2>
 800a22a:	1b40      	subs	r0, r0, r5
 800a22c:	6060      	str	r0, [r4, #4]
 800a22e:	6863      	ldr	r3, [r4, #4]
 800a230:	6123      	str	r3, [r4, #16]
 800a232:	2300      	movs	r3, #0
 800a234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a238:	e7a8      	b.n	800a18c <_printf_i+0x150>
 800a23a:	6923      	ldr	r3, [r4, #16]
 800a23c:	462a      	mov	r2, r5
 800a23e:	4649      	mov	r1, r9
 800a240:	4640      	mov	r0, r8
 800a242:	47d0      	blx	sl
 800a244:	3001      	adds	r0, #1
 800a246:	d0ab      	beq.n	800a1a0 <_printf_i+0x164>
 800a248:	6823      	ldr	r3, [r4, #0]
 800a24a:	079b      	lsls	r3, r3, #30
 800a24c:	d413      	bmi.n	800a276 <_printf_i+0x23a>
 800a24e:	68e0      	ldr	r0, [r4, #12]
 800a250:	9b03      	ldr	r3, [sp, #12]
 800a252:	4298      	cmp	r0, r3
 800a254:	bfb8      	it	lt
 800a256:	4618      	movlt	r0, r3
 800a258:	e7a4      	b.n	800a1a4 <_printf_i+0x168>
 800a25a:	2301      	movs	r3, #1
 800a25c:	4632      	mov	r2, r6
 800a25e:	4649      	mov	r1, r9
 800a260:	4640      	mov	r0, r8
 800a262:	47d0      	blx	sl
 800a264:	3001      	adds	r0, #1
 800a266:	d09b      	beq.n	800a1a0 <_printf_i+0x164>
 800a268:	3501      	adds	r5, #1
 800a26a:	68e3      	ldr	r3, [r4, #12]
 800a26c:	9903      	ldr	r1, [sp, #12]
 800a26e:	1a5b      	subs	r3, r3, r1
 800a270:	42ab      	cmp	r3, r5
 800a272:	dcf2      	bgt.n	800a25a <_printf_i+0x21e>
 800a274:	e7eb      	b.n	800a24e <_printf_i+0x212>
 800a276:	2500      	movs	r5, #0
 800a278:	f104 0619 	add.w	r6, r4, #25
 800a27c:	e7f5      	b.n	800a26a <_printf_i+0x22e>
 800a27e:	bf00      	nop
 800a280:	0800e29f 	.word	0x0800e29f
 800a284:	0800e2b0 	.word	0x0800e2b0

0800a288 <__swbuf_r>:
 800a288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a28a:	460e      	mov	r6, r1
 800a28c:	4614      	mov	r4, r2
 800a28e:	4605      	mov	r5, r0
 800a290:	b118      	cbz	r0, 800a29a <__swbuf_r+0x12>
 800a292:	6983      	ldr	r3, [r0, #24]
 800a294:	b90b      	cbnz	r3, 800a29a <__swbuf_r+0x12>
 800a296:	f000 f9d9 	bl	800a64c <__sinit>
 800a29a:	4b21      	ldr	r3, [pc, #132]	; (800a320 <__swbuf_r+0x98>)
 800a29c:	429c      	cmp	r4, r3
 800a29e:	d12b      	bne.n	800a2f8 <__swbuf_r+0x70>
 800a2a0:	686c      	ldr	r4, [r5, #4]
 800a2a2:	69a3      	ldr	r3, [r4, #24]
 800a2a4:	60a3      	str	r3, [r4, #8]
 800a2a6:	89a3      	ldrh	r3, [r4, #12]
 800a2a8:	071a      	lsls	r2, r3, #28
 800a2aa:	d52f      	bpl.n	800a30c <__swbuf_r+0x84>
 800a2ac:	6923      	ldr	r3, [r4, #16]
 800a2ae:	b36b      	cbz	r3, 800a30c <__swbuf_r+0x84>
 800a2b0:	6923      	ldr	r3, [r4, #16]
 800a2b2:	6820      	ldr	r0, [r4, #0]
 800a2b4:	1ac0      	subs	r0, r0, r3
 800a2b6:	6963      	ldr	r3, [r4, #20]
 800a2b8:	b2f6      	uxtb	r6, r6
 800a2ba:	4283      	cmp	r3, r0
 800a2bc:	4637      	mov	r7, r6
 800a2be:	dc04      	bgt.n	800a2ca <__swbuf_r+0x42>
 800a2c0:	4621      	mov	r1, r4
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	f000 f92e 	bl	800a524 <_fflush_r>
 800a2c8:	bb30      	cbnz	r0, 800a318 <__swbuf_r+0x90>
 800a2ca:	68a3      	ldr	r3, [r4, #8]
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	60a3      	str	r3, [r4, #8]
 800a2d0:	6823      	ldr	r3, [r4, #0]
 800a2d2:	1c5a      	adds	r2, r3, #1
 800a2d4:	6022      	str	r2, [r4, #0]
 800a2d6:	701e      	strb	r6, [r3, #0]
 800a2d8:	6963      	ldr	r3, [r4, #20]
 800a2da:	3001      	adds	r0, #1
 800a2dc:	4283      	cmp	r3, r0
 800a2de:	d004      	beq.n	800a2ea <__swbuf_r+0x62>
 800a2e0:	89a3      	ldrh	r3, [r4, #12]
 800a2e2:	07db      	lsls	r3, r3, #31
 800a2e4:	d506      	bpl.n	800a2f4 <__swbuf_r+0x6c>
 800a2e6:	2e0a      	cmp	r6, #10
 800a2e8:	d104      	bne.n	800a2f4 <__swbuf_r+0x6c>
 800a2ea:	4621      	mov	r1, r4
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	f000 f919 	bl	800a524 <_fflush_r>
 800a2f2:	b988      	cbnz	r0, 800a318 <__swbuf_r+0x90>
 800a2f4:	4638      	mov	r0, r7
 800a2f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2f8:	4b0a      	ldr	r3, [pc, #40]	; (800a324 <__swbuf_r+0x9c>)
 800a2fa:	429c      	cmp	r4, r3
 800a2fc:	d101      	bne.n	800a302 <__swbuf_r+0x7a>
 800a2fe:	68ac      	ldr	r4, [r5, #8]
 800a300:	e7cf      	b.n	800a2a2 <__swbuf_r+0x1a>
 800a302:	4b09      	ldr	r3, [pc, #36]	; (800a328 <__swbuf_r+0xa0>)
 800a304:	429c      	cmp	r4, r3
 800a306:	bf08      	it	eq
 800a308:	68ec      	ldreq	r4, [r5, #12]
 800a30a:	e7ca      	b.n	800a2a2 <__swbuf_r+0x1a>
 800a30c:	4621      	mov	r1, r4
 800a30e:	4628      	mov	r0, r5
 800a310:	f000 f80c 	bl	800a32c <__swsetup_r>
 800a314:	2800      	cmp	r0, #0
 800a316:	d0cb      	beq.n	800a2b0 <__swbuf_r+0x28>
 800a318:	f04f 37ff 	mov.w	r7, #4294967295
 800a31c:	e7ea      	b.n	800a2f4 <__swbuf_r+0x6c>
 800a31e:	bf00      	nop
 800a320:	0800e2e4 	.word	0x0800e2e4
 800a324:	0800e304 	.word	0x0800e304
 800a328:	0800e2c4 	.word	0x0800e2c4

0800a32c <__swsetup_r>:
 800a32c:	4b32      	ldr	r3, [pc, #200]	; (800a3f8 <__swsetup_r+0xcc>)
 800a32e:	b570      	push	{r4, r5, r6, lr}
 800a330:	681d      	ldr	r5, [r3, #0]
 800a332:	4606      	mov	r6, r0
 800a334:	460c      	mov	r4, r1
 800a336:	b125      	cbz	r5, 800a342 <__swsetup_r+0x16>
 800a338:	69ab      	ldr	r3, [r5, #24]
 800a33a:	b913      	cbnz	r3, 800a342 <__swsetup_r+0x16>
 800a33c:	4628      	mov	r0, r5
 800a33e:	f000 f985 	bl	800a64c <__sinit>
 800a342:	4b2e      	ldr	r3, [pc, #184]	; (800a3fc <__swsetup_r+0xd0>)
 800a344:	429c      	cmp	r4, r3
 800a346:	d10f      	bne.n	800a368 <__swsetup_r+0x3c>
 800a348:	686c      	ldr	r4, [r5, #4]
 800a34a:	89a3      	ldrh	r3, [r4, #12]
 800a34c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a350:	0719      	lsls	r1, r3, #28
 800a352:	d42c      	bmi.n	800a3ae <__swsetup_r+0x82>
 800a354:	06dd      	lsls	r5, r3, #27
 800a356:	d411      	bmi.n	800a37c <__swsetup_r+0x50>
 800a358:	2309      	movs	r3, #9
 800a35a:	6033      	str	r3, [r6, #0]
 800a35c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a360:	81a3      	strh	r3, [r4, #12]
 800a362:	f04f 30ff 	mov.w	r0, #4294967295
 800a366:	e03e      	b.n	800a3e6 <__swsetup_r+0xba>
 800a368:	4b25      	ldr	r3, [pc, #148]	; (800a400 <__swsetup_r+0xd4>)
 800a36a:	429c      	cmp	r4, r3
 800a36c:	d101      	bne.n	800a372 <__swsetup_r+0x46>
 800a36e:	68ac      	ldr	r4, [r5, #8]
 800a370:	e7eb      	b.n	800a34a <__swsetup_r+0x1e>
 800a372:	4b24      	ldr	r3, [pc, #144]	; (800a404 <__swsetup_r+0xd8>)
 800a374:	429c      	cmp	r4, r3
 800a376:	bf08      	it	eq
 800a378:	68ec      	ldreq	r4, [r5, #12]
 800a37a:	e7e6      	b.n	800a34a <__swsetup_r+0x1e>
 800a37c:	0758      	lsls	r0, r3, #29
 800a37e:	d512      	bpl.n	800a3a6 <__swsetup_r+0x7a>
 800a380:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a382:	b141      	cbz	r1, 800a396 <__swsetup_r+0x6a>
 800a384:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a388:	4299      	cmp	r1, r3
 800a38a:	d002      	beq.n	800a392 <__swsetup_r+0x66>
 800a38c:	4630      	mov	r0, r6
 800a38e:	f7ff f947 	bl	8009620 <_free_r>
 800a392:	2300      	movs	r3, #0
 800a394:	6363      	str	r3, [r4, #52]	; 0x34
 800a396:	89a3      	ldrh	r3, [r4, #12]
 800a398:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a39c:	81a3      	strh	r3, [r4, #12]
 800a39e:	2300      	movs	r3, #0
 800a3a0:	6063      	str	r3, [r4, #4]
 800a3a2:	6923      	ldr	r3, [r4, #16]
 800a3a4:	6023      	str	r3, [r4, #0]
 800a3a6:	89a3      	ldrh	r3, [r4, #12]
 800a3a8:	f043 0308 	orr.w	r3, r3, #8
 800a3ac:	81a3      	strh	r3, [r4, #12]
 800a3ae:	6923      	ldr	r3, [r4, #16]
 800a3b0:	b94b      	cbnz	r3, 800a3c6 <__swsetup_r+0x9a>
 800a3b2:	89a3      	ldrh	r3, [r4, #12]
 800a3b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a3b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3bc:	d003      	beq.n	800a3c6 <__swsetup_r+0x9a>
 800a3be:	4621      	mov	r1, r4
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	f000 fa09 	bl	800a7d8 <__smakebuf_r>
 800a3c6:	89a0      	ldrh	r0, [r4, #12]
 800a3c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3cc:	f010 0301 	ands.w	r3, r0, #1
 800a3d0:	d00a      	beq.n	800a3e8 <__swsetup_r+0xbc>
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	60a3      	str	r3, [r4, #8]
 800a3d6:	6963      	ldr	r3, [r4, #20]
 800a3d8:	425b      	negs	r3, r3
 800a3da:	61a3      	str	r3, [r4, #24]
 800a3dc:	6923      	ldr	r3, [r4, #16]
 800a3de:	b943      	cbnz	r3, 800a3f2 <__swsetup_r+0xc6>
 800a3e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a3e4:	d1ba      	bne.n	800a35c <__swsetup_r+0x30>
 800a3e6:	bd70      	pop	{r4, r5, r6, pc}
 800a3e8:	0781      	lsls	r1, r0, #30
 800a3ea:	bf58      	it	pl
 800a3ec:	6963      	ldrpl	r3, [r4, #20]
 800a3ee:	60a3      	str	r3, [r4, #8]
 800a3f0:	e7f4      	b.n	800a3dc <__swsetup_r+0xb0>
 800a3f2:	2000      	movs	r0, #0
 800a3f4:	e7f7      	b.n	800a3e6 <__swsetup_r+0xba>
 800a3f6:	bf00      	nop
 800a3f8:	2000005c 	.word	0x2000005c
 800a3fc:	0800e2e4 	.word	0x0800e2e4
 800a400:	0800e304 	.word	0x0800e304
 800a404:	0800e2c4 	.word	0x0800e2c4

0800a408 <abort>:
 800a408:	b508      	push	{r3, lr}
 800a40a:	2006      	movs	r0, #6
 800a40c:	f000 fa96 	bl	800a93c <raise>
 800a410:	2001      	movs	r0, #1
 800a412:	f7f8 fb5d 	bl	8002ad0 <_exit>
	...

0800a418 <__sflush_r>:
 800a418:	898a      	ldrh	r2, [r1, #12]
 800a41a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a41e:	4605      	mov	r5, r0
 800a420:	0710      	lsls	r0, r2, #28
 800a422:	460c      	mov	r4, r1
 800a424:	d458      	bmi.n	800a4d8 <__sflush_r+0xc0>
 800a426:	684b      	ldr	r3, [r1, #4]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	dc05      	bgt.n	800a438 <__sflush_r+0x20>
 800a42c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a42e:	2b00      	cmp	r3, #0
 800a430:	dc02      	bgt.n	800a438 <__sflush_r+0x20>
 800a432:	2000      	movs	r0, #0
 800a434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a43a:	2e00      	cmp	r6, #0
 800a43c:	d0f9      	beq.n	800a432 <__sflush_r+0x1a>
 800a43e:	2300      	movs	r3, #0
 800a440:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a444:	682f      	ldr	r7, [r5, #0]
 800a446:	602b      	str	r3, [r5, #0]
 800a448:	d032      	beq.n	800a4b0 <__sflush_r+0x98>
 800a44a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a44c:	89a3      	ldrh	r3, [r4, #12]
 800a44e:	075a      	lsls	r2, r3, #29
 800a450:	d505      	bpl.n	800a45e <__sflush_r+0x46>
 800a452:	6863      	ldr	r3, [r4, #4]
 800a454:	1ac0      	subs	r0, r0, r3
 800a456:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a458:	b10b      	cbz	r3, 800a45e <__sflush_r+0x46>
 800a45a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a45c:	1ac0      	subs	r0, r0, r3
 800a45e:	2300      	movs	r3, #0
 800a460:	4602      	mov	r2, r0
 800a462:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a464:	6a21      	ldr	r1, [r4, #32]
 800a466:	4628      	mov	r0, r5
 800a468:	47b0      	blx	r6
 800a46a:	1c43      	adds	r3, r0, #1
 800a46c:	89a3      	ldrh	r3, [r4, #12]
 800a46e:	d106      	bne.n	800a47e <__sflush_r+0x66>
 800a470:	6829      	ldr	r1, [r5, #0]
 800a472:	291d      	cmp	r1, #29
 800a474:	d82c      	bhi.n	800a4d0 <__sflush_r+0xb8>
 800a476:	4a2a      	ldr	r2, [pc, #168]	; (800a520 <__sflush_r+0x108>)
 800a478:	40ca      	lsrs	r2, r1
 800a47a:	07d6      	lsls	r6, r2, #31
 800a47c:	d528      	bpl.n	800a4d0 <__sflush_r+0xb8>
 800a47e:	2200      	movs	r2, #0
 800a480:	6062      	str	r2, [r4, #4]
 800a482:	04d9      	lsls	r1, r3, #19
 800a484:	6922      	ldr	r2, [r4, #16]
 800a486:	6022      	str	r2, [r4, #0]
 800a488:	d504      	bpl.n	800a494 <__sflush_r+0x7c>
 800a48a:	1c42      	adds	r2, r0, #1
 800a48c:	d101      	bne.n	800a492 <__sflush_r+0x7a>
 800a48e:	682b      	ldr	r3, [r5, #0]
 800a490:	b903      	cbnz	r3, 800a494 <__sflush_r+0x7c>
 800a492:	6560      	str	r0, [r4, #84]	; 0x54
 800a494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a496:	602f      	str	r7, [r5, #0]
 800a498:	2900      	cmp	r1, #0
 800a49a:	d0ca      	beq.n	800a432 <__sflush_r+0x1a>
 800a49c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4a0:	4299      	cmp	r1, r3
 800a4a2:	d002      	beq.n	800a4aa <__sflush_r+0x92>
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	f7ff f8bb 	bl	8009620 <_free_r>
 800a4aa:	2000      	movs	r0, #0
 800a4ac:	6360      	str	r0, [r4, #52]	; 0x34
 800a4ae:	e7c1      	b.n	800a434 <__sflush_r+0x1c>
 800a4b0:	6a21      	ldr	r1, [r4, #32]
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	47b0      	blx	r6
 800a4b8:	1c41      	adds	r1, r0, #1
 800a4ba:	d1c7      	bne.n	800a44c <__sflush_r+0x34>
 800a4bc:	682b      	ldr	r3, [r5, #0]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d0c4      	beq.n	800a44c <__sflush_r+0x34>
 800a4c2:	2b1d      	cmp	r3, #29
 800a4c4:	d001      	beq.n	800a4ca <__sflush_r+0xb2>
 800a4c6:	2b16      	cmp	r3, #22
 800a4c8:	d101      	bne.n	800a4ce <__sflush_r+0xb6>
 800a4ca:	602f      	str	r7, [r5, #0]
 800a4cc:	e7b1      	b.n	800a432 <__sflush_r+0x1a>
 800a4ce:	89a3      	ldrh	r3, [r4, #12]
 800a4d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4d4:	81a3      	strh	r3, [r4, #12]
 800a4d6:	e7ad      	b.n	800a434 <__sflush_r+0x1c>
 800a4d8:	690f      	ldr	r7, [r1, #16]
 800a4da:	2f00      	cmp	r7, #0
 800a4dc:	d0a9      	beq.n	800a432 <__sflush_r+0x1a>
 800a4de:	0793      	lsls	r3, r2, #30
 800a4e0:	680e      	ldr	r6, [r1, #0]
 800a4e2:	bf08      	it	eq
 800a4e4:	694b      	ldreq	r3, [r1, #20]
 800a4e6:	600f      	str	r7, [r1, #0]
 800a4e8:	bf18      	it	ne
 800a4ea:	2300      	movne	r3, #0
 800a4ec:	eba6 0807 	sub.w	r8, r6, r7
 800a4f0:	608b      	str	r3, [r1, #8]
 800a4f2:	f1b8 0f00 	cmp.w	r8, #0
 800a4f6:	dd9c      	ble.n	800a432 <__sflush_r+0x1a>
 800a4f8:	6a21      	ldr	r1, [r4, #32]
 800a4fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a4fc:	4643      	mov	r3, r8
 800a4fe:	463a      	mov	r2, r7
 800a500:	4628      	mov	r0, r5
 800a502:	47b0      	blx	r6
 800a504:	2800      	cmp	r0, #0
 800a506:	dc06      	bgt.n	800a516 <__sflush_r+0xfe>
 800a508:	89a3      	ldrh	r3, [r4, #12]
 800a50a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a50e:	81a3      	strh	r3, [r4, #12]
 800a510:	f04f 30ff 	mov.w	r0, #4294967295
 800a514:	e78e      	b.n	800a434 <__sflush_r+0x1c>
 800a516:	4407      	add	r7, r0
 800a518:	eba8 0800 	sub.w	r8, r8, r0
 800a51c:	e7e9      	b.n	800a4f2 <__sflush_r+0xda>
 800a51e:	bf00      	nop
 800a520:	20400001 	.word	0x20400001

0800a524 <_fflush_r>:
 800a524:	b538      	push	{r3, r4, r5, lr}
 800a526:	690b      	ldr	r3, [r1, #16]
 800a528:	4605      	mov	r5, r0
 800a52a:	460c      	mov	r4, r1
 800a52c:	b913      	cbnz	r3, 800a534 <_fflush_r+0x10>
 800a52e:	2500      	movs	r5, #0
 800a530:	4628      	mov	r0, r5
 800a532:	bd38      	pop	{r3, r4, r5, pc}
 800a534:	b118      	cbz	r0, 800a53e <_fflush_r+0x1a>
 800a536:	6983      	ldr	r3, [r0, #24]
 800a538:	b90b      	cbnz	r3, 800a53e <_fflush_r+0x1a>
 800a53a:	f000 f887 	bl	800a64c <__sinit>
 800a53e:	4b14      	ldr	r3, [pc, #80]	; (800a590 <_fflush_r+0x6c>)
 800a540:	429c      	cmp	r4, r3
 800a542:	d11b      	bne.n	800a57c <_fflush_r+0x58>
 800a544:	686c      	ldr	r4, [r5, #4]
 800a546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d0ef      	beq.n	800a52e <_fflush_r+0xa>
 800a54e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a550:	07d0      	lsls	r0, r2, #31
 800a552:	d404      	bmi.n	800a55e <_fflush_r+0x3a>
 800a554:	0599      	lsls	r1, r3, #22
 800a556:	d402      	bmi.n	800a55e <_fflush_r+0x3a>
 800a558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a55a:	f000 f915 	bl	800a788 <__retarget_lock_acquire_recursive>
 800a55e:	4628      	mov	r0, r5
 800a560:	4621      	mov	r1, r4
 800a562:	f7ff ff59 	bl	800a418 <__sflush_r>
 800a566:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a568:	07da      	lsls	r2, r3, #31
 800a56a:	4605      	mov	r5, r0
 800a56c:	d4e0      	bmi.n	800a530 <_fflush_r+0xc>
 800a56e:	89a3      	ldrh	r3, [r4, #12]
 800a570:	059b      	lsls	r3, r3, #22
 800a572:	d4dd      	bmi.n	800a530 <_fflush_r+0xc>
 800a574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a576:	f000 f908 	bl	800a78a <__retarget_lock_release_recursive>
 800a57a:	e7d9      	b.n	800a530 <_fflush_r+0xc>
 800a57c:	4b05      	ldr	r3, [pc, #20]	; (800a594 <_fflush_r+0x70>)
 800a57e:	429c      	cmp	r4, r3
 800a580:	d101      	bne.n	800a586 <_fflush_r+0x62>
 800a582:	68ac      	ldr	r4, [r5, #8]
 800a584:	e7df      	b.n	800a546 <_fflush_r+0x22>
 800a586:	4b04      	ldr	r3, [pc, #16]	; (800a598 <_fflush_r+0x74>)
 800a588:	429c      	cmp	r4, r3
 800a58a:	bf08      	it	eq
 800a58c:	68ec      	ldreq	r4, [r5, #12]
 800a58e:	e7da      	b.n	800a546 <_fflush_r+0x22>
 800a590:	0800e2e4 	.word	0x0800e2e4
 800a594:	0800e304 	.word	0x0800e304
 800a598:	0800e2c4 	.word	0x0800e2c4

0800a59c <std>:
 800a59c:	2300      	movs	r3, #0
 800a59e:	b510      	push	{r4, lr}
 800a5a0:	4604      	mov	r4, r0
 800a5a2:	e9c0 3300 	strd	r3, r3, [r0]
 800a5a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5aa:	6083      	str	r3, [r0, #8]
 800a5ac:	8181      	strh	r1, [r0, #12]
 800a5ae:	6643      	str	r3, [r0, #100]	; 0x64
 800a5b0:	81c2      	strh	r2, [r0, #14]
 800a5b2:	6183      	str	r3, [r0, #24]
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	2208      	movs	r2, #8
 800a5b8:	305c      	adds	r0, #92	; 0x5c
 800a5ba:	f7ff f829 	bl	8009610 <memset>
 800a5be:	4b05      	ldr	r3, [pc, #20]	; (800a5d4 <std+0x38>)
 800a5c0:	6263      	str	r3, [r4, #36]	; 0x24
 800a5c2:	4b05      	ldr	r3, [pc, #20]	; (800a5d8 <std+0x3c>)
 800a5c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5c6:	4b05      	ldr	r3, [pc, #20]	; (800a5dc <std+0x40>)
 800a5c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5ca:	4b05      	ldr	r3, [pc, #20]	; (800a5e0 <std+0x44>)
 800a5cc:	6224      	str	r4, [r4, #32]
 800a5ce:	6323      	str	r3, [r4, #48]	; 0x30
 800a5d0:	bd10      	pop	{r4, pc}
 800a5d2:	bf00      	nop
 800a5d4:	0800a975 	.word	0x0800a975
 800a5d8:	0800a997 	.word	0x0800a997
 800a5dc:	0800a9cf 	.word	0x0800a9cf
 800a5e0:	0800a9f3 	.word	0x0800a9f3

0800a5e4 <_cleanup_r>:
 800a5e4:	4901      	ldr	r1, [pc, #4]	; (800a5ec <_cleanup_r+0x8>)
 800a5e6:	f000 b8af 	b.w	800a748 <_fwalk_reent>
 800a5ea:	bf00      	nop
 800a5ec:	0800a525 	.word	0x0800a525

0800a5f0 <__sfmoreglue>:
 800a5f0:	b570      	push	{r4, r5, r6, lr}
 800a5f2:	2268      	movs	r2, #104	; 0x68
 800a5f4:	1e4d      	subs	r5, r1, #1
 800a5f6:	4355      	muls	r5, r2
 800a5f8:	460e      	mov	r6, r1
 800a5fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a5fe:	f7ff f87b 	bl	80096f8 <_malloc_r>
 800a602:	4604      	mov	r4, r0
 800a604:	b140      	cbz	r0, 800a618 <__sfmoreglue+0x28>
 800a606:	2100      	movs	r1, #0
 800a608:	e9c0 1600 	strd	r1, r6, [r0]
 800a60c:	300c      	adds	r0, #12
 800a60e:	60a0      	str	r0, [r4, #8]
 800a610:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a614:	f7fe fffc 	bl	8009610 <memset>
 800a618:	4620      	mov	r0, r4
 800a61a:	bd70      	pop	{r4, r5, r6, pc}

0800a61c <__sfp_lock_acquire>:
 800a61c:	4801      	ldr	r0, [pc, #4]	; (800a624 <__sfp_lock_acquire+0x8>)
 800a61e:	f000 b8b3 	b.w	800a788 <__retarget_lock_acquire_recursive>
 800a622:	bf00      	nop
 800a624:	20000751 	.word	0x20000751

0800a628 <__sfp_lock_release>:
 800a628:	4801      	ldr	r0, [pc, #4]	; (800a630 <__sfp_lock_release+0x8>)
 800a62a:	f000 b8ae 	b.w	800a78a <__retarget_lock_release_recursive>
 800a62e:	bf00      	nop
 800a630:	20000751 	.word	0x20000751

0800a634 <__sinit_lock_acquire>:
 800a634:	4801      	ldr	r0, [pc, #4]	; (800a63c <__sinit_lock_acquire+0x8>)
 800a636:	f000 b8a7 	b.w	800a788 <__retarget_lock_acquire_recursive>
 800a63a:	bf00      	nop
 800a63c:	20000752 	.word	0x20000752

0800a640 <__sinit_lock_release>:
 800a640:	4801      	ldr	r0, [pc, #4]	; (800a648 <__sinit_lock_release+0x8>)
 800a642:	f000 b8a2 	b.w	800a78a <__retarget_lock_release_recursive>
 800a646:	bf00      	nop
 800a648:	20000752 	.word	0x20000752

0800a64c <__sinit>:
 800a64c:	b510      	push	{r4, lr}
 800a64e:	4604      	mov	r4, r0
 800a650:	f7ff fff0 	bl	800a634 <__sinit_lock_acquire>
 800a654:	69a3      	ldr	r3, [r4, #24]
 800a656:	b11b      	cbz	r3, 800a660 <__sinit+0x14>
 800a658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a65c:	f7ff bff0 	b.w	800a640 <__sinit_lock_release>
 800a660:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a664:	6523      	str	r3, [r4, #80]	; 0x50
 800a666:	4b13      	ldr	r3, [pc, #76]	; (800a6b4 <__sinit+0x68>)
 800a668:	4a13      	ldr	r2, [pc, #76]	; (800a6b8 <__sinit+0x6c>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a66e:	42a3      	cmp	r3, r4
 800a670:	bf04      	itt	eq
 800a672:	2301      	moveq	r3, #1
 800a674:	61a3      	streq	r3, [r4, #24]
 800a676:	4620      	mov	r0, r4
 800a678:	f000 f820 	bl	800a6bc <__sfp>
 800a67c:	6060      	str	r0, [r4, #4]
 800a67e:	4620      	mov	r0, r4
 800a680:	f000 f81c 	bl	800a6bc <__sfp>
 800a684:	60a0      	str	r0, [r4, #8]
 800a686:	4620      	mov	r0, r4
 800a688:	f000 f818 	bl	800a6bc <__sfp>
 800a68c:	2200      	movs	r2, #0
 800a68e:	60e0      	str	r0, [r4, #12]
 800a690:	2104      	movs	r1, #4
 800a692:	6860      	ldr	r0, [r4, #4]
 800a694:	f7ff ff82 	bl	800a59c <std>
 800a698:	68a0      	ldr	r0, [r4, #8]
 800a69a:	2201      	movs	r2, #1
 800a69c:	2109      	movs	r1, #9
 800a69e:	f7ff ff7d 	bl	800a59c <std>
 800a6a2:	68e0      	ldr	r0, [r4, #12]
 800a6a4:	2202      	movs	r2, #2
 800a6a6:	2112      	movs	r1, #18
 800a6a8:	f7ff ff78 	bl	800a59c <std>
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	61a3      	str	r3, [r4, #24]
 800a6b0:	e7d2      	b.n	800a658 <__sinit+0xc>
 800a6b2:	bf00      	nop
 800a6b4:	0800e1dc 	.word	0x0800e1dc
 800a6b8:	0800a5e5 	.word	0x0800a5e5

0800a6bc <__sfp>:
 800a6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6be:	4607      	mov	r7, r0
 800a6c0:	f7ff ffac 	bl	800a61c <__sfp_lock_acquire>
 800a6c4:	4b1e      	ldr	r3, [pc, #120]	; (800a740 <__sfp+0x84>)
 800a6c6:	681e      	ldr	r6, [r3, #0]
 800a6c8:	69b3      	ldr	r3, [r6, #24]
 800a6ca:	b913      	cbnz	r3, 800a6d2 <__sfp+0x16>
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	f7ff ffbd 	bl	800a64c <__sinit>
 800a6d2:	3648      	adds	r6, #72	; 0x48
 800a6d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	d503      	bpl.n	800a6e4 <__sfp+0x28>
 800a6dc:	6833      	ldr	r3, [r6, #0]
 800a6de:	b30b      	cbz	r3, 800a724 <__sfp+0x68>
 800a6e0:	6836      	ldr	r6, [r6, #0]
 800a6e2:	e7f7      	b.n	800a6d4 <__sfp+0x18>
 800a6e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a6e8:	b9d5      	cbnz	r5, 800a720 <__sfp+0x64>
 800a6ea:	4b16      	ldr	r3, [pc, #88]	; (800a744 <__sfp+0x88>)
 800a6ec:	60e3      	str	r3, [r4, #12]
 800a6ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a6f2:	6665      	str	r5, [r4, #100]	; 0x64
 800a6f4:	f000 f847 	bl	800a786 <__retarget_lock_init_recursive>
 800a6f8:	f7ff ff96 	bl	800a628 <__sfp_lock_release>
 800a6fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a700:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a704:	6025      	str	r5, [r4, #0]
 800a706:	61a5      	str	r5, [r4, #24]
 800a708:	2208      	movs	r2, #8
 800a70a:	4629      	mov	r1, r5
 800a70c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a710:	f7fe ff7e 	bl	8009610 <memset>
 800a714:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a718:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a71c:	4620      	mov	r0, r4
 800a71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a720:	3468      	adds	r4, #104	; 0x68
 800a722:	e7d9      	b.n	800a6d8 <__sfp+0x1c>
 800a724:	2104      	movs	r1, #4
 800a726:	4638      	mov	r0, r7
 800a728:	f7ff ff62 	bl	800a5f0 <__sfmoreglue>
 800a72c:	4604      	mov	r4, r0
 800a72e:	6030      	str	r0, [r6, #0]
 800a730:	2800      	cmp	r0, #0
 800a732:	d1d5      	bne.n	800a6e0 <__sfp+0x24>
 800a734:	f7ff ff78 	bl	800a628 <__sfp_lock_release>
 800a738:	230c      	movs	r3, #12
 800a73a:	603b      	str	r3, [r7, #0]
 800a73c:	e7ee      	b.n	800a71c <__sfp+0x60>
 800a73e:	bf00      	nop
 800a740:	0800e1dc 	.word	0x0800e1dc
 800a744:	ffff0001 	.word	0xffff0001

0800a748 <_fwalk_reent>:
 800a748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a74c:	4606      	mov	r6, r0
 800a74e:	4688      	mov	r8, r1
 800a750:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a754:	2700      	movs	r7, #0
 800a756:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a75a:	f1b9 0901 	subs.w	r9, r9, #1
 800a75e:	d505      	bpl.n	800a76c <_fwalk_reent+0x24>
 800a760:	6824      	ldr	r4, [r4, #0]
 800a762:	2c00      	cmp	r4, #0
 800a764:	d1f7      	bne.n	800a756 <_fwalk_reent+0xe>
 800a766:	4638      	mov	r0, r7
 800a768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a76c:	89ab      	ldrh	r3, [r5, #12]
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d907      	bls.n	800a782 <_fwalk_reent+0x3a>
 800a772:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a776:	3301      	adds	r3, #1
 800a778:	d003      	beq.n	800a782 <_fwalk_reent+0x3a>
 800a77a:	4629      	mov	r1, r5
 800a77c:	4630      	mov	r0, r6
 800a77e:	47c0      	blx	r8
 800a780:	4307      	orrs	r7, r0
 800a782:	3568      	adds	r5, #104	; 0x68
 800a784:	e7e9      	b.n	800a75a <_fwalk_reent+0x12>

0800a786 <__retarget_lock_init_recursive>:
 800a786:	4770      	bx	lr

0800a788 <__retarget_lock_acquire_recursive>:
 800a788:	4770      	bx	lr

0800a78a <__retarget_lock_release_recursive>:
 800a78a:	4770      	bx	lr

0800a78c <__swhatbuf_r>:
 800a78c:	b570      	push	{r4, r5, r6, lr}
 800a78e:	460e      	mov	r6, r1
 800a790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a794:	2900      	cmp	r1, #0
 800a796:	b096      	sub	sp, #88	; 0x58
 800a798:	4614      	mov	r4, r2
 800a79a:	461d      	mov	r5, r3
 800a79c:	da08      	bge.n	800a7b0 <__swhatbuf_r+0x24>
 800a79e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	602a      	str	r2, [r5, #0]
 800a7a6:	061a      	lsls	r2, r3, #24
 800a7a8:	d410      	bmi.n	800a7cc <__swhatbuf_r+0x40>
 800a7aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7ae:	e00e      	b.n	800a7ce <__swhatbuf_r+0x42>
 800a7b0:	466a      	mov	r2, sp
 800a7b2:	f000 f945 	bl	800aa40 <_fstat_r>
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	dbf1      	blt.n	800a79e <__swhatbuf_r+0x12>
 800a7ba:	9a01      	ldr	r2, [sp, #4]
 800a7bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a7c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a7c4:	425a      	negs	r2, r3
 800a7c6:	415a      	adcs	r2, r3
 800a7c8:	602a      	str	r2, [r5, #0]
 800a7ca:	e7ee      	b.n	800a7aa <__swhatbuf_r+0x1e>
 800a7cc:	2340      	movs	r3, #64	; 0x40
 800a7ce:	2000      	movs	r0, #0
 800a7d0:	6023      	str	r3, [r4, #0]
 800a7d2:	b016      	add	sp, #88	; 0x58
 800a7d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a7d8 <__smakebuf_r>:
 800a7d8:	898b      	ldrh	r3, [r1, #12]
 800a7da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7dc:	079d      	lsls	r5, r3, #30
 800a7de:	4606      	mov	r6, r0
 800a7e0:	460c      	mov	r4, r1
 800a7e2:	d507      	bpl.n	800a7f4 <__smakebuf_r+0x1c>
 800a7e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7e8:	6023      	str	r3, [r4, #0]
 800a7ea:	6123      	str	r3, [r4, #16]
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	6163      	str	r3, [r4, #20]
 800a7f0:	b002      	add	sp, #8
 800a7f2:	bd70      	pop	{r4, r5, r6, pc}
 800a7f4:	ab01      	add	r3, sp, #4
 800a7f6:	466a      	mov	r2, sp
 800a7f8:	f7ff ffc8 	bl	800a78c <__swhatbuf_r>
 800a7fc:	9900      	ldr	r1, [sp, #0]
 800a7fe:	4605      	mov	r5, r0
 800a800:	4630      	mov	r0, r6
 800a802:	f7fe ff79 	bl	80096f8 <_malloc_r>
 800a806:	b948      	cbnz	r0, 800a81c <__smakebuf_r+0x44>
 800a808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a80c:	059a      	lsls	r2, r3, #22
 800a80e:	d4ef      	bmi.n	800a7f0 <__smakebuf_r+0x18>
 800a810:	f023 0303 	bic.w	r3, r3, #3
 800a814:	f043 0302 	orr.w	r3, r3, #2
 800a818:	81a3      	strh	r3, [r4, #12]
 800a81a:	e7e3      	b.n	800a7e4 <__smakebuf_r+0xc>
 800a81c:	4b0d      	ldr	r3, [pc, #52]	; (800a854 <__smakebuf_r+0x7c>)
 800a81e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a820:	89a3      	ldrh	r3, [r4, #12]
 800a822:	6020      	str	r0, [r4, #0]
 800a824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a828:	81a3      	strh	r3, [r4, #12]
 800a82a:	9b00      	ldr	r3, [sp, #0]
 800a82c:	6163      	str	r3, [r4, #20]
 800a82e:	9b01      	ldr	r3, [sp, #4]
 800a830:	6120      	str	r0, [r4, #16]
 800a832:	b15b      	cbz	r3, 800a84c <__smakebuf_r+0x74>
 800a834:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a838:	4630      	mov	r0, r6
 800a83a:	f000 f913 	bl	800aa64 <_isatty_r>
 800a83e:	b128      	cbz	r0, 800a84c <__smakebuf_r+0x74>
 800a840:	89a3      	ldrh	r3, [r4, #12]
 800a842:	f023 0303 	bic.w	r3, r3, #3
 800a846:	f043 0301 	orr.w	r3, r3, #1
 800a84a:	81a3      	strh	r3, [r4, #12]
 800a84c:	89a0      	ldrh	r0, [r4, #12]
 800a84e:	4305      	orrs	r5, r0
 800a850:	81a5      	strh	r5, [r4, #12]
 800a852:	e7cd      	b.n	800a7f0 <__smakebuf_r+0x18>
 800a854:	0800a5e5 	.word	0x0800a5e5

0800a858 <memmove>:
 800a858:	4288      	cmp	r0, r1
 800a85a:	b510      	push	{r4, lr}
 800a85c:	eb01 0402 	add.w	r4, r1, r2
 800a860:	d902      	bls.n	800a868 <memmove+0x10>
 800a862:	4284      	cmp	r4, r0
 800a864:	4623      	mov	r3, r4
 800a866:	d807      	bhi.n	800a878 <memmove+0x20>
 800a868:	1e43      	subs	r3, r0, #1
 800a86a:	42a1      	cmp	r1, r4
 800a86c:	d008      	beq.n	800a880 <memmove+0x28>
 800a86e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a872:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a876:	e7f8      	b.n	800a86a <memmove+0x12>
 800a878:	4402      	add	r2, r0
 800a87a:	4601      	mov	r1, r0
 800a87c:	428a      	cmp	r2, r1
 800a87e:	d100      	bne.n	800a882 <memmove+0x2a>
 800a880:	bd10      	pop	{r4, pc}
 800a882:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a886:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a88a:	e7f7      	b.n	800a87c <memmove+0x24>

0800a88c <_realloc_r>:
 800a88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a890:	4680      	mov	r8, r0
 800a892:	4614      	mov	r4, r2
 800a894:	460e      	mov	r6, r1
 800a896:	b921      	cbnz	r1, 800a8a2 <_realloc_r+0x16>
 800a898:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a89c:	4611      	mov	r1, r2
 800a89e:	f7fe bf2b 	b.w	80096f8 <_malloc_r>
 800a8a2:	b92a      	cbnz	r2, 800a8b0 <_realloc_r+0x24>
 800a8a4:	f7fe febc 	bl	8009620 <_free_r>
 800a8a8:	4625      	mov	r5, r4
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8b0:	f000 f8fa 	bl	800aaa8 <_malloc_usable_size_r>
 800a8b4:	4284      	cmp	r4, r0
 800a8b6:	4607      	mov	r7, r0
 800a8b8:	d802      	bhi.n	800a8c0 <_realloc_r+0x34>
 800a8ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a8be:	d812      	bhi.n	800a8e6 <_realloc_r+0x5a>
 800a8c0:	4621      	mov	r1, r4
 800a8c2:	4640      	mov	r0, r8
 800a8c4:	f7fe ff18 	bl	80096f8 <_malloc_r>
 800a8c8:	4605      	mov	r5, r0
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	d0ed      	beq.n	800a8aa <_realloc_r+0x1e>
 800a8ce:	42bc      	cmp	r4, r7
 800a8d0:	4622      	mov	r2, r4
 800a8d2:	4631      	mov	r1, r6
 800a8d4:	bf28      	it	cs
 800a8d6:	463a      	movcs	r2, r7
 800a8d8:	f7fe fe8c 	bl	80095f4 <memcpy>
 800a8dc:	4631      	mov	r1, r6
 800a8de:	4640      	mov	r0, r8
 800a8e0:	f7fe fe9e 	bl	8009620 <_free_r>
 800a8e4:	e7e1      	b.n	800a8aa <_realloc_r+0x1e>
 800a8e6:	4635      	mov	r5, r6
 800a8e8:	e7df      	b.n	800a8aa <_realloc_r+0x1e>

0800a8ea <_raise_r>:
 800a8ea:	291f      	cmp	r1, #31
 800a8ec:	b538      	push	{r3, r4, r5, lr}
 800a8ee:	4604      	mov	r4, r0
 800a8f0:	460d      	mov	r5, r1
 800a8f2:	d904      	bls.n	800a8fe <_raise_r+0x14>
 800a8f4:	2316      	movs	r3, #22
 800a8f6:	6003      	str	r3, [r0, #0]
 800a8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8fc:	bd38      	pop	{r3, r4, r5, pc}
 800a8fe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a900:	b112      	cbz	r2, 800a908 <_raise_r+0x1e>
 800a902:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a906:	b94b      	cbnz	r3, 800a91c <_raise_r+0x32>
 800a908:	4620      	mov	r0, r4
 800a90a:	f000 f831 	bl	800a970 <_getpid_r>
 800a90e:	462a      	mov	r2, r5
 800a910:	4601      	mov	r1, r0
 800a912:	4620      	mov	r0, r4
 800a914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a918:	f000 b818 	b.w	800a94c <_kill_r>
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d00a      	beq.n	800a936 <_raise_r+0x4c>
 800a920:	1c59      	adds	r1, r3, #1
 800a922:	d103      	bne.n	800a92c <_raise_r+0x42>
 800a924:	2316      	movs	r3, #22
 800a926:	6003      	str	r3, [r0, #0]
 800a928:	2001      	movs	r0, #1
 800a92a:	e7e7      	b.n	800a8fc <_raise_r+0x12>
 800a92c:	2400      	movs	r4, #0
 800a92e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a932:	4628      	mov	r0, r5
 800a934:	4798      	blx	r3
 800a936:	2000      	movs	r0, #0
 800a938:	e7e0      	b.n	800a8fc <_raise_r+0x12>
	...

0800a93c <raise>:
 800a93c:	4b02      	ldr	r3, [pc, #8]	; (800a948 <raise+0xc>)
 800a93e:	4601      	mov	r1, r0
 800a940:	6818      	ldr	r0, [r3, #0]
 800a942:	f7ff bfd2 	b.w	800a8ea <_raise_r>
 800a946:	bf00      	nop
 800a948:	2000005c 	.word	0x2000005c

0800a94c <_kill_r>:
 800a94c:	b538      	push	{r3, r4, r5, lr}
 800a94e:	4d07      	ldr	r5, [pc, #28]	; (800a96c <_kill_r+0x20>)
 800a950:	2300      	movs	r3, #0
 800a952:	4604      	mov	r4, r0
 800a954:	4608      	mov	r0, r1
 800a956:	4611      	mov	r1, r2
 800a958:	602b      	str	r3, [r5, #0]
 800a95a:	f7f8 f8a9 	bl	8002ab0 <_kill>
 800a95e:	1c43      	adds	r3, r0, #1
 800a960:	d102      	bne.n	800a968 <_kill_r+0x1c>
 800a962:	682b      	ldr	r3, [r5, #0]
 800a964:	b103      	cbz	r3, 800a968 <_kill_r+0x1c>
 800a966:	6023      	str	r3, [r4, #0]
 800a968:	bd38      	pop	{r3, r4, r5, pc}
 800a96a:	bf00      	nop
 800a96c:	2000074c 	.word	0x2000074c

0800a970 <_getpid_r>:
 800a970:	f7f8 b896 	b.w	8002aa0 <_getpid>

0800a974 <__sread>:
 800a974:	b510      	push	{r4, lr}
 800a976:	460c      	mov	r4, r1
 800a978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a97c:	f000 f89c 	bl	800aab8 <_read_r>
 800a980:	2800      	cmp	r0, #0
 800a982:	bfab      	itete	ge
 800a984:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a986:	89a3      	ldrhlt	r3, [r4, #12]
 800a988:	181b      	addge	r3, r3, r0
 800a98a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a98e:	bfac      	ite	ge
 800a990:	6563      	strge	r3, [r4, #84]	; 0x54
 800a992:	81a3      	strhlt	r3, [r4, #12]
 800a994:	bd10      	pop	{r4, pc}

0800a996 <__swrite>:
 800a996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a99a:	461f      	mov	r7, r3
 800a99c:	898b      	ldrh	r3, [r1, #12]
 800a99e:	05db      	lsls	r3, r3, #23
 800a9a0:	4605      	mov	r5, r0
 800a9a2:	460c      	mov	r4, r1
 800a9a4:	4616      	mov	r6, r2
 800a9a6:	d505      	bpl.n	800a9b4 <__swrite+0x1e>
 800a9a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9ac:	2302      	movs	r3, #2
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f000 f868 	bl	800aa84 <_lseek_r>
 800a9b4:	89a3      	ldrh	r3, [r4, #12]
 800a9b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9be:	81a3      	strh	r3, [r4, #12]
 800a9c0:	4632      	mov	r2, r6
 800a9c2:	463b      	mov	r3, r7
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ca:	f000 b817 	b.w	800a9fc <_write_r>

0800a9ce <__sseek>:
 800a9ce:	b510      	push	{r4, lr}
 800a9d0:	460c      	mov	r4, r1
 800a9d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9d6:	f000 f855 	bl	800aa84 <_lseek_r>
 800a9da:	1c43      	adds	r3, r0, #1
 800a9dc:	89a3      	ldrh	r3, [r4, #12]
 800a9de:	bf15      	itete	ne
 800a9e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9ea:	81a3      	strheq	r3, [r4, #12]
 800a9ec:	bf18      	it	ne
 800a9ee:	81a3      	strhne	r3, [r4, #12]
 800a9f0:	bd10      	pop	{r4, pc}

0800a9f2 <__sclose>:
 800a9f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9f6:	f000 b813 	b.w	800aa20 <_close_r>
	...

0800a9fc <_write_r>:
 800a9fc:	b538      	push	{r3, r4, r5, lr}
 800a9fe:	4d07      	ldr	r5, [pc, #28]	; (800aa1c <_write_r+0x20>)
 800aa00:	4604      	mov	r4, r0
 800aa02:	4608      	mov	r0, r1
 800aa04:	4611      	mov	r1, r2
 800aa06:	2200      	movs	r2, #0
 800aa08:	602a      	str	r2, [r5, #0]
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	f7f8 f887 	bl	8002b1e <_write>
 800aa10:	1c43      	adds	r3, r0, #1
 800aa12:	d102      	bne.n	800aa1a <_write_r+0x1e>
 800aa14:	682b      	ldr	r3, [r5, #0]
 800aa16:	b103      	cbz	r3, 800aa1a <_write_r+0x1e>
 800aa18:	6023      	str	r3, [r4, #0]
 800aa1a:	bd38      	pop	{r3, r4, r5, pc}
 800aa1c:	2000074c 	.word	0x2000074c

0800aa20 <_close_r>:
 800aa20:	b538      	push	{r3, r4, r5, lr}
 800aa22:	4d06      	ldr	r5, [pc, #24]	; (800aa3c <_close_r+0x1c>)
 800aa24:	2300      	movs	r3, #0
 800aa26:	4604      	mov	r4, r0
 800aa28:	4608      	mov	r0, r1
 800aa2a:	602b      	str	r3, [r5, #0]
 800aa2c:	f7f8 f893 	bl	8002b56 <_close>
 800aa30:	1c43      	adds	r3, r0, #1
 800aa32:	d102      	bne.n	800aa3a <_close_r+0x1a>
 800aa34:	682b      	ldr	r3, [r5, #0]
 800aa36:	b103      	cbz	r3, 800aa3a <_close_r+0x1a>
 800aa38:	6023      	str	r3, [r4, #0]
 800aa3a:	bd38      	pop	{r3, r4, r5, pc}
 800aa3c:	2000074c 	.word	0x2000074c

0800aa40 <_fstat_r>:
 800aa40:	b538      	push	{r3, r4, r5, lr}
 800aa42:	4d07      	ldr	r5, [pc, #28]	; (800aa60 <_fstat_r+0x20>)
 800aa44:	2300      	movs	r3, #0
 800aa46:	4604      	mov	r4, r0
 800aa48:	4608      	mov	r0, r1
 800aa4a:	4611      	mov	r1, r2
 800aa4c:	602b      	str	r3, [r5, #0]
 800aa4e:	f7f8 f88e 	bl	8002b6e <_fstat>
 800aa52:	1c43      	adds	r3, r0, #1
 800aa54:	d102      	bne.n	800aa5c <_fstat_r+0x1c>
 800aa56:	682b      	ldr	r3, [r5, #0]
 800aa58:	b103      	cbz	r3, 800aa5c <_fstat_r+0x1c>
 800aa5a:	6023      	str	r3, [r4, #0]
 800aa5c:	bd38      	pop	{r3, r4, r5, pc}
 800aa5e:	bf00      	nop
 800aa60:	2000074c 	.word	0x2000074c

0800aa64 <_isatty_r>:
 800aa64:	b538      	push	{r3, r4, r5, lr}
 800aa66:	4d06      	ldr	r5, [pc, #24]	; (800aa80 <_isatty_r+0x1c>)
 800aa68:	2300      	movs	r3, #0
 800aa6a:	4604      	mov	r4, r0
 800aa6c:	4608      	mov	r0, r1
 800aa6e:	602b      	str	r3, [r5, #0]
 800aa70:	f7f8 f88d 	bl	8002b8e <_isatty>
 800aa74:	1c43      	adds	r3, r0, #1
 800aa76:	d102      	bne.n	800aa7e <_isatty_r+0x1a>
 800aa78:	682b      	ldr	r3, [r5, #0]
 800aa7a:	b103      	cbz	r3, 800aa7e <_isatty_r+0x1a>
 800aa7c:	6023      	str	r3, [r4, #0]
 800aa7e:	bd38      	pop	{r3, r4, r5, pc}
 800aa80:	2000074c 	.word	0x2000074c

0800aa84 <_lseek_r>:
 800aa84:	b538      	push	{r3, r4, r5, lr}
 800aa86:	4d07      	ldr	r5, [pc, #28]	; (800aaa4 <_lseek_r+0x20>)
 800aa88:	4604      	mov	r4, r0
 800aa8a:	4608      	mov	r0, r1
 800aa8c:	4611      	mov	r1, r2
 800aa8e:	2200      	movs	r2, #0
 800aa90:	602a      	str	r2, [r5, #0]
 800aa92:	461a      	mov	r2, r3
 800aa94:	f7f8 f886 	bl	8002ba4 <_lseek>
 800aa98:	1c43      	adds	r3, r0, #1
 800aa9a:	d102      	bne.n	800aaa2 <_lseek_r+0x1e>
 800aa9c:	682b      	ldr	r3, [r5, #0]
 800aa9e:	b103      	cbz	r3, 800aaa2 <_lseek_r+0x1e>
 800aaa0:	6023      	str	r3, [r4, #0]
 800aaa2:	bd38      	pop	{r3, r4, r5, pc}
 800aaa4:	2000074c 	.word	0x2000074c

0800aaa8 <_malloc_usable_size_r>:
 800aaa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaac:	1f18      	subs	r0, r3, #4
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	bfbc      	itt	lt
 800aab2:	580b      	ldrlt	r3, [r1, r0]
 800aab4:	18c0      	addlt	r0, r0, r3
 800aab6:	4770      	bx	lr

0800aab8 <_read_r>:
 800aab8:	b538      	push	{r3, r4, r5, lr}
 800aaba:	4d07      	ldr	r5, [pc, #28]	; (800aad8 <_read_r+0x20>)
 800aabc:	4604      	mov	r4, r0
 800aabe:	4608      	mov	r0, r1
 800aac0:	4611      	mov	r1, r2
 800aac2:	2200      	movs	r2, #0
 800aac4:	602a      	str	r2, [r5, #0]
 800aac6:	461a      	mov	r2, r3
 800aac8:	f7f8 f80c 	bl	8002ae4 <_read>
 800aacc:	1c43      	adds	r3, r0, #1
 800aace:	d102      	bne.n	800aad6 <_read_r+0x1e>
 800aad0:	682b      	ldr	r3, [r5, #0]
 800aad2:	b103      	cbz	r3, 800aad6 <_read_r+0x1e>
 800aad4:	6023      	str	r3, [r4, #0]
 800aad6:	bd38      	pop	{r3, r4, r5, pc}
 800aad8:	2000074c 	.word	0x2000074c

0800aadc <_init>:
 800aadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aade:	bf00      	nop
 800aae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aae2:	bc08      	pop	{r3}
 800aae4:	469e      	mov	lr, r3
 800aae6:	4770      	bx	lr

0800aae8 <_fini>:
 800aae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaea:	bf00      	nop
 800aaec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaee:	bc08      	pop	{r3}
 800aaf0:	469e      	mov	lr, r3
 800aaf2:	4770      	bx	lr
