
MusicMaster_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ecc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000369c  0800a05c  0800a05c  0001a05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d6f8  0800d6f8  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d6f8  0800d6f8  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d6f8  0800d6f8  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d6f8  0800d6f8  0001d6f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d6fc  0800d6fc  0001d6fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  0800d700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c4  2**0
                  CONTENTS
 10 .bss          00000734  200000c4  200000c4  000200c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007f8  200007f8  000200c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d59b  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036f7  00000000  00000000  0003d68f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001848  00000000  00000000  00040d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001740  00000000  00000000  000425d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021866  00000000  00000000  00043d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e364  00000000  00000000  00065576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c895e  00000000  00000000  000838da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014c238  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007364  00000000  00000000  0014c288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c4 	.word	0x200000c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a044 	.word	0x0800a044

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c8 	.word	0x200000c8
 80001cc:	0800a044 	.word	0x0800a044

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2uiz>:
 8000618:	004a      	lsls	r2, r1, #1
 800061a:	d211      	bcs.n	8000640 <__aeabi_d2uiz+0x28>
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000620:	d211      	bcs.n	8000646 <__aeabi_d2uiz+0x2e>
 8000622:	d50d      	bpl.n	8000640 <__aeabi_d2uiz+0x28>
 8000624:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d40e      	bmi.n	800064c <__aeabi_d2uiz+0x34>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	fa23 f002 	lsr.w	r0, r3, r2
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d102      	bne.n	8000652 <__aeabi_d2uiz+0x3a>
 800064c:	f04f 30ff 	mov.w	r0, #4294967295
 8000650:	4770      	bx	lr
 8000652:	f04f 0000 	mov.w	r0, #0
 8000656:	4770      	bx	lr

08000658 <hashString>:
	struct DictionaryNode **buckets;
	int size;
};

// Hash function for string keys
unsigned int hashString(const char *key, int size) {
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
	unsigned int hash = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
	while (*key) {
 8000666:	e007      	b.n	8000678 <hashString+0x20>
		hash = (hash << 5) + *key++;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	015a      	lsls	r2, r3, #5
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	1c59      	adds	r1, r3, #1
 8000670:	6079      	str	r1, [r7, #4]
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	4413      	add	r3, r2
 8000676:	60fb      	str	r3, [r7, #12]
	while (*key) {
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1f3      	bne.n	8000668 <hashString+0x10>
	}
	return hash % size;
 8000680:	683a      	ldr	r2, [r7, #0]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	fbb3 f1f2 	udiv	r1, r3, r2
 8000688:	fb01 f202 	mul.w	r2, r1, r2
 800068c:	1a9b      	subs	r3, r3, r2
}
 800068e:	4618      	mov	r0, r3
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <initDictionary>:

// Initialize dictionary
Dictionary* initDictionary(int size) {
 800069a:	b580      	push	{r7, lr}
 800069c:	b084      	sub	sp, #16
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
	Dictionary *dict = malloc(sizeof(Dictionary));
 80006a2:	2008      	movs	r0, #8
 80006a4:	f008 fc34 	bl	8008f10 <malloc>
 80006a8:	4603      	mov	r3, r0
 80006aa:	60bb      	str	r3, [r7, #8]
	dict->buckets = malloc(size * sizeof(struct DictionaryNode*));
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f008 fc2d 	bl	8008f10 <malloc>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	601a      	str	r2, [r3, #0]
	dict->size = size;
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < size; i++) {
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e009      	b.n	80006de <initDictionary+0x44>
		dict->buckets[i] = NULL;
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	4413      	add	r3, r2
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < size; i++) {
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	3301      	adds	r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	dbf1      	blt.n	80006ca <initDictionary+0x30>
	}
	return dict;
 80006e6:	68bb      	ldr	r3, [r7, #8]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <insert>:

// Insert key-value pair into dictionary
void insert(Dictionary *dict, const char *stringKey, struct Tone *tones,
		int numTones) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
 80006fc:	603b      	str	r3, [r7, #0]
	unsigned int index;
	struct DictionaryNode *newNode = malloc(sizeof(struct DictionaryNode));
 80006fe:	2014      	movs	r0, #20
 8000700:	f008 fc06 	bl	8008f10 <malloc>
 8000704:	4603      	mov	r3, r0
 8000706:	613b      	str	r3, [r7, #16]
	newNode->stringKey = strdup(stringKey);
 8000708:	68b8      	ldr	r0, [r7, #8]
 800070a:	f008 fd7b 	bl	8009204 <strdup>
 800070e:	4603      	mov	r3, r0
 8000710:	461a      	mov	r2, r3
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	601a      	str	r2, [r3, #0]
	newNode->tones = malloc(numTones * sizeof(struct Tone));
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	4618      	mov	r0, r3
 800071c:	f008 fbf8 	bl	8008f10 <malloc>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	605a      	str	r2, [r3, #4]
	memcpy(newNode->tones, tones, numTones * sizeof(struct Tone));
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	6858      	ldr	r0, [r3, #4]
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	00db      	lsls	r3, r3, #3
 8000730:	461a      	mov	r2, r3
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	f008 fbf4 	bl	8008f20 <memcpy>
	newNode->numTones = numTones;
 8000738:	693b      	ldr	r3, [r7, #16]
 800073a:	683a      	ldr	r2, [r7, #0]
 800073c:	609a      	str	r2, [r3, #8]
	newNode->black_listed = 0;
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]

	if (stringKey != NULL) {
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d006      	beq.n	8000758 <insert+0x68>
		index = hashString(stringKey, dict->size);
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	4619      	mov	r1, r3
 8000750:	68b8      	ldr	r0, [r7, #8]
 8000752:	f7ff ff81 	bl	8000658 <hashString>
 8000756:	6178      	str	r0, [r7, #20]
	}

	newNode->next = dict->buckets[index];
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	4413      	add	r3, r2
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	611a      	str	r2, [r3, #16]
	dict->buckets[index] = newNode;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4413      	add	r3, r2
 8000772:	693a      	ldr	r2, [r7, #16]
 8000774:	601a      	str	r2, [r3, #0]
}
 8000776:	bf00      	nop
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <lookup>:

// Lookup value by key
struct Tone* lookup(Dictionary *dict, const char *stringKey, int *numTones,
		struct DictionaryNode **node) {
 800077e:	b580      	push	{r7, lr}
 8000780:	b086      	sub	sp, #24
 8000782:	af00      	add	r7, sp, #0
 8000784:	60f8      	str	r0, [r7, #12]
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	607a      	str	r2, [r7, #4]
 800078a:	603b      	str	r3, [r7, #0]
	unsigned int index;
	struct DictionaryNode *current;

	if (stringKey != NULL) {
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d02b      	beq.n	80007ea <lookup+0x6c>
		index = hashString(stringKey, dict->size);
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	4619      	mov	r1, r3
 8000798:	68b8      	ldr	r0, [r7, #8]
 800079a:	f7ff ff5d 	bl	8000658 <hashString>
 800079e:	6138      	str	r0, [r7, #16]
		current = dict->buckets[index];
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	693b      	ldr	r3, [r7, #16]
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4413      	add	r3, r2
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	617b      	str	r3, [r7, #20]
		while (current) {
 80007ae:	e019      	b.n	80007e4 <lookup+0x66>
			if (current->stringKey
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d012      	beq.n	80007de <lookup+0x60>
					&& strcmp(current->stringKey, stringKey) == 0) {
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	68b9      	ldr	r1, [r7, #8]
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fd06 	bl	80001d0 <strcmp>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d109      	bne.n	80007de <lookup+0x60>
				*numTones = current->numTones;
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	689a      	ldr	r2, [r3, #8]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	601a      	str	r2, [r3, #0]
				*node = current;
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	697a      	ldr	r2, [r7, #20]
 80007d6:	601a      	str	r2, [r3, #0]
				return current->tones;
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	e009      	b.n	80007f2 <lookup+0x74>
			}
			current = current->next;
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	691b      	ldr	r3, [r3, #16]
 80007e2:	617b      	str	r3, [r7, #20]
		while (current) {
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d1e2      	bne.n	80007b0 <lookup+0x32>
		}
	}

	*numTones = 0;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
	return NULL;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <getDictSize>:

int getDictSize(Dictionary *dict) {
 80007fa:	b480      	push	{r7}
 80007fc:	b083      	sub	sp, #12
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
	return dict->size;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	685b      	ldr	r3, [r3, #4]
}
 8000806:	4618      	mov	r0, r3
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <setBlacklisted>:

// Function to set black_listed flag on
void setBlacklisted(struct DictionaryNode *node) {
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
    node->black_listed = 1;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2201      	movs	r2, #1
 800081e:	60da      	str	r2, [r3, #12]
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <unsetBlacklisted>:

// Function to set black_listed flag off
void unsetBlacklisted(struct DictionaryNode *node) {
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
    node->black_listed = 0;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <isBlacklisted>:

// Function to check if a node is blacklisted
int isBlacklisted(struct DictionaryNode *node) {
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
    return node->black_listed;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	68db      	ldr	r3, [r3, #12]
}
 8000852:	4618      	mov	r0, r3
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
	...

08000860 <initializePlaylistOrder>:
#define REST      0

struct Dictionary *playlist = NULL;
char **playlistOrder;

void initializePlaylistOrder() {
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
    playlistOrder = (char **)malloc(10 * sizeof(char *));
 8000864:	2028      	movs	r0, #40	; 0x28
 8000866:	f008 fb53 	bl	8008f10 <malloc>
 800086a:	4603      	mov	r3, r0
 800086c:	461a      	mov	r2, r3
 800086e:	4b02      	ldr	r3, [pc, #8]	; (8000878 <initializePlaylistOrder+0x18>)
 8000870:	601a      	str	r2, [r3, #0]
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200000e4 	.word	0x200000e4

0800087c <initTonesDictionary>:

void initTonesDictionary() {
 800087c:	b580      	push	{r7, lr}
 800087e:	f5ad 5d50 	sub.w	sp, sp, #13312	; 0x3400
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
    playlist = initDictionary(6);
 8000886:	2006      	movs	r0, #6
 8000888:	f7ff ff07 	bl	800069a <initDictionary>
 800088c:	4603      	mov	r3, r0
 800088e:	4a5b      	ldr	r2, [pc, #364]	; (80009fc <initTonesDictionary+0x180>)
 8000890:	6013      	str	r3, [r2, #0]
    initializePlaylistOrder();
 8000892:	f7ff ffe5 	bl	8000860 <initializePlaylistOrder>
    playlistOrder[0] = "super_mario_bros";
 8000896:	4b5a      	ldr	r3, [pc, #360]	; (8000a00 <initTonesDictionary+0x184>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a5a      	ldr	r2, [pc, #360]	; (8000a04 <initTonesDictionary+0x188>)
 800089c:	601a      	str	r2, [r3, #0]
    playlistOrder[1] = "hedwig_theme";
 800089e:	4b58      	ldr	r3, [pc, #352]	; (8000a00 <initTonesDictionary+0x184>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	3304      	adds	r3, #4
 80008a4:	4a58      	ldr	r2, [pc, #352]	; (8000a08 <initTonesDictionary+0x18c>)
 80008a6:	601a      	str	r2, [r3, #0]
    playlistOrder[2] = "doom";
 80008a8:	4b55      	ldr	r3, [pc, #340]	; (8000a00 <initTonesDictionary+0x184>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	3308      	adds	r3, #8
 80008ae:	4a57      	ldr	r2, [pc, #348]	; (8000a0c <initTonesDictionary+0x190>)
 80008b0:	601a      	str	r2, [r3, #0]
    playlistOrder[3] = "fur_elise";
 80008b2:	4b53      	ldr	r3, [pc, #332]	; (8000a00 <initTonesDictionary+0x184>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	330c      	adds	r3, #12
 80008b8:	4a55      	ldr	r2, [pc, #340]	; (8000a10 <initTonesDictionary+0x194>)
 80008ba:	601a      	str	r2, [r3, #0]
    playlistOrder[4] = "tetris";
 80008bc:	4b50      	ldr	r3, [pc, #320]	; (8000a00 <initTonesDictionary+0x184>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	3310      	adds	r3, #16
 80008c2:	4a54      	ldr	r2, [pc, #336]	; (8000a14 <initTonesDictionary+0x198>)
 80008c4:	601a      	str	r2, [r3, #0]
    playlistOrder[5] = "tokyo_drift";
 80008c6:	4b4e      	ldr	r3, [pc, #312]	; (8000a00 <initTonesDictionary+0x184>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	3314      	adds	r3, #20
 80008cc:	4a52      	ldr	r2, [pc, #328]	; (8000a18 <initTonesDictionary+0x19c>)
 80008ce:	601a      	str	r2, [r3, #0]

    // Example tones
    struct Tone super_mario_bros[]={{2637,306},{0,153},{2637,153},{0,153},{2093,153},{2637,153},{0,153},{3136,153},{0,459},{1586,153},{0,459},{2093,153},{0,306},{1586,153},{0,306},{1319,153},{0,306},{1760,153},{0,153},{1976,153},{0,153},{1865,153},{1760,153},{0,153},{1586,204},{2637,204},{3136,204},{3520,153},{0,153},{2794,153},{3136,153},{0,153},{2637,153},{0,153},{2093,153},{2349,153},{1976,153},{0,306},{2093,153},{0,306},{1586,153},{0,306},{1319,153},{0,306},{1760,153},{0,153},{1976,153},{0,153},{1865,153},{1760,153},{0,153},{1586,204},{2637,204},{3136,204},{3520,153},{0,153},{2794,153},{3136,153},{0,153},{2637,153},{0,153},{2093,153},{2349,153},{1976,153},{0,0}};
 80008d0:	f507 5350 	add.w	r3, r7, #13312	; 0x3400
 80008d4:	f103 0318 	add.w	r3, r3, #24
 80008d8:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80008dc:	4a4f      	ldr	r2, [pc, #316]	; (8000a1c <initTonesDictionary+0x1a0>)
 80008de:	4618      	mov	r0, r3
 80008e0:	4611      	mov	r1, r2
 80008e2:	f44f 7302 	mov.w	r3, #520	; 0x208
 80008e6:	461a      	mov	r2, r3
 80008e8:	f008 fb1a 	bl	8008f20 <memcpy>
    struct Tone hedwig_theme[]={{REST,750},{NOTE_D4,374},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_G4,750},{NOTE_D5,374},{NOTE_C5,1124},{NOTE_A4,1124},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_F4,750},{NOTE_GS4,374},{NOTE_D4,2249},{NOTE_D4,374},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_G4,750},{NOTE_D5,374},{NOTE_F5,750},{NOTE_E5,374},{NOTE_DS5,750},{NOTE_B4,374},{NOTE_DS5,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_B4,374},{NOTE_G4,2249},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_DS5,750},{NOTE_D5,374},{NOTE_CS5,750},{NOTE_A4,374},{NOTE_AS4,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_D4,374},{NOTE_D5,1700},{REST,150},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_F5,750},{NOTE_E5,374},{NOTE_DS5,750},{NOTE_B4,374},{NOTE_DS5,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_AS4,374},{NOTE_G4,2249},{0,0}};
 80008ec:	f507 5350 	add.w	r3, r7, #13312	; 0x3400
 80008f0:	f103 0318 	add.w	r3, r3, #24
 80008f4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80008f8:	4a49      	ldr	r2, [pc, #292]	; (8000a20 <initTonesDictionary+0x1a4>)
 80008fa:	4618      	mov	r0, r3
 80008fc:	4611      	mov	r1, r2
 80008fe:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000902:	461a      	mov	r2, r3
 8000904:	f008 fb0c 	bl	8008f20 <memcpy>
    struct Tone doom[]={{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_FS3,67},{NOTE_D3,67},{NOTE_B2,67},{NOTE_A3,67},{NOTE_FS3,67},{NOTE_B2,67},{NOTE_D3,67},{NOTE_FS3,67},{NOTE_A3,67},{NOTE_FS3,67},{NOTE_D3,67},{NOTE_B2,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B3,67},{NOTE_G3,67},{NOTE_E3,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_B3,67},{NOTE_G4,67},{NOTE_B4,67},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_E3,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,534},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_E3,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_C4,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_CS4,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_B3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_A3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_G3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_GS3,133},{NOTE_A3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_B3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_A3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_G3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_F3,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B3,67},{NOTE_G3,67},{NOTE_E3,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_B3,67},{NOTE_G4,67},{NOTE_B4,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{0,0}};
 8000908:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 800090c:	f103 0318 	add.w	r3, r3, #24
 8000910:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000914:	4a43      	ldr	r2, [pc, #268]	; (8000a24 <initTonesDictionary+0x1a8>)
 8000916:	4618      	mov	r0, r3
 8000918:	4611      	mov	r1, r2
 800091a:	f44f 6351 	mov.w	r3, #3344	; 0xd10
 800091e:	461a      	mov	r2, r3
 8000920:	f008 fafe 	bl	8008f20 <memcpy>
    struct Tone fur_elise[] = {{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,750},{REST,250},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_C5,188},{NOTE_C5,188},{NOTE_C5,188},{NOTE_C5,750},{NOTE_F5,282},{NOTE_E5,94},{NOTE_E5,250},{NOTE_D5,250},{NOTE_AS5,282},{NOTE_A5,94},{NOTE_A5,188},{NOTE_G5,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_AS4,250},{NOTE_A4,250},{NOTE_A4,94},{NOTE_G4,94},{NOTE_A4,94},{NOTE_B4,94},{NOTE_C5,750},{NOTE_D5,188},{NOTE_DS5,188},{NOTE_E5,375},{NOTE_E5,188},{NOTE_F5,188},{NOTE_A4,188},{NOTE_C5,750},{NOTE_D5,282},{NOTE_B4,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_G4,94},{NOTE_G5,94},{NOTE_A4,94},{NOTE_G5,94},{NOTE_B4,94},{NOTE_G5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_E5,94},{NOTE_G5,94},{NOTE_C6,94},{NOTE_B5,94},{NOTE_A5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_D5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_G4,94},{NOTE_G5,94},{NOTE_A4,94},{NOTE_G5,94},{NOTE_B4,94},{NOTE_G5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_E5,94},{NOTE_G5,94},{NOTE_C6,94},{NOTE_B5,94},{NOTE_A5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_D5,94},{NOTE_E5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,94},{NOTE_B4,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,94},{NOTE_B4,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,375},{NOTE_B4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,375},{NOTE_B4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{REST,188},{REST,250},{NOTE_CS5,1125},{NOTE_D5,750},{NOTE_E5,188},{NOTE_F5,188},{NOTE_F5,750},{NOTE_F5,250},{NOTE_E5,1125},{NOTE_D5,750},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,750},{NOTE_A4,250},{NOTE_A4,250},{NOTE_C5,250},{NOTE_B4,250},{NOTE_A4,1125},{NOTE_CS5,1125},{NOTE_D5,750},{NOTE_E5,188},{NOTE_F5,188},{NOTE_F5,750},{NOTE_F5,250},{NOTE_F5,1125},{NOTE_DS5,750},{NOTE_D5,188},{NOTE_C5,188},{NOTE_AS4,750},{NOTE_A4,250},{NOTE_GS4,750},{NOTE_G4,250},{NOTE_A4,1125},{NOTE_B4,750},{REST,250},{NOTE_A3,141},{NOTE_C4,141},{NOTE_E4,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_D5,141},{NOTE_C5,141},{NOTE_B4,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_A5,141},{NOTE_C6,141},{NOTE_E6,141},{NOTE_D6,141},{NOTE_C6,141},{NOTE_B5,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_A5,141},{NOTE_C6,141},{NOTE_E6,141},{NOTE_D6,141},{NOTE_C6,141},{NOTE_B5,141},{NOTE_AS5,141},{NOTE_A5,141},{NOTE_GS5,141},{NOTE_G5,141},{NOTE_FS5,141},{NOTE_F5,141},{NOTE_E5,141},{NOTE_DS5,141},{NOTE_D5,141},{NOTE_CS5,141},{NOTE_C5,141},{NOTE_B4,141},{NOTE_AS4,141},{NOTE_A4,141},{NOTE_GS4,141},{NOTE_G4,141},{NOTE_FS4,141},{NOTE_F4,141},{NOTE_E4,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,375},{REST,375},{REST,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,750},{REST,250},{REST,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_E5,250},{NOTE_E5,250},{NOTE_E6,375},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,1125},{0,0}};
 8000924:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8000928:	f103 0318 	add.w	r3, r3, #24
 800092c:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8000930:	4a3d      	ldr	r2, [pc, #244]	; (8000a28 <initTonesDictionary+0x1ac>)
 8000932:	4618      	mov	r0, r3
 8000934:	4611      	mov	r1, r2
 8000936:	f44f 5397 	mov.w	r3, #4832	; 0x12e0
 800093a:	461a      	mov	r2, r3
 800093c:	f008 faf0 	bl	8008f20 <memcpy>
    struct Tone tetris[] = {{NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 834}, {NOTE_A4, 834}, {NOTE_GS4, 834}, {NOTE_B4, 417}, {REST, 208}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 417}, {NOTE_E5, 417}, {NOTE_A5, 834}, {NOTE_GS5, 834},{NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 834}, {NOTE_A4, 834}, {NOTE_GS4, 834}, {NOTE_B4, 417}, {REST, 208}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 417}, {NOTE_E5, 417}, {NOTE_A5, 834}, {NOTE_GS5, 834},{NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 834}, {NOTE_A4, 834}, {NOTE_GS4, 834}, {NOTE_B4, 417}, {REST, 208}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 417}, {NOTE_E5, 417}, {NOTE_A5, 834}, {NOTE_GS5, 834},{0,0}};
 8000940:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8000944:	f103 0318 	add.w	r3, r3, #24
 8000948:	f5a3 6354 	sub.w	r3, r3, #3392	; 0xd40
 800094c:	4a37      	ldr	r2, [pc, #220]	; (8000a2c <initTonesDictionary+0x1b0>)
 800094e:	4618      	mov	r0, r3
 8000950:	4611      	mov	r1, r2
 8000952:	f44f 6315 	mov.w	r3, #2384	; 0x950
 8000956:	461a      	mov	r2, r3
 8000958:	f008 fae2 	bl	8008f20 <memcpy>
    struct Tone tokyo_drift[]={{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,500},{NOTE_B4,500},{NOTE_DS5,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{REST,0},{REST,0},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,500},{NOTE_B4,500},{NOTE_DS5,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{REST,0},{REST,0},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,500},{NOTE_B4,500},{NOTE_DS5,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{REST,0},{REST,0}};
 800095c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000960:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000964:	4a32      	ldr	r2, [pc, #200]	; (8000a30 <initTonesDictionary+0x1b4>)
 8000966:	4618      	mov	r0, r3
 8000968:	4611      	mov	r1, r2
 800096a:	f44f 63db 	mov.w	r3, #1752	; 0x6d8
 800096e:	461a      	mov	r2, r3
 8000970:	f008 fad6 	bl	8008f20 <memcpy>
    // Insert tones into dictionary
    insert(playlist, "super_mario_bros", super_mario_bros, sizeof(super_mario_bros) / sizeof(struct Tone));
 8000974:	4b21      	ldr	r3, [pc, #132]	; (80009fc <initTonesDictionary+0x180>)
 8000976:	6818      	ldr	r0, [r3, #0]
 8000978:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 800097c:	f102 0210 	add.w	r2, r2, #16
 8000980:	2341      	movs	r3, #65	; 0x41
 8000982:	4920      	ldr	r1, [pc, #128]	; (8000a04 <initTonesDictionary+0x188>)
 8000984:	f7ff feb4 	bl	80006f0 <insert>
    insert(playlist, "hedwig_theme", hedwig_theme, sizeof(hedwig_theme) / sizeof(struct Tone));
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <initTonesDictionary+0x180>)
 800098a:	6818      	ldr	r0, [r3, #0]
 800098c:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 8000990:	f102 0218 	add.w	r2, r2, #24
 8000994:	233f      	movs	r3, #63	; 0x3f
 8000996:	491c      	ldr	r1, [pc, #112]	; (8000a08 <initTonesDictionary+0x18c>)
 8000998:	f7ff feaa 	bl	80006f0 <insert>
    insert(playlist, "doom", doom, sizeof(doom) / sizeof(struct Tone));
 800099c:	4b17      	ldr	r3, [pc, #92]	; (80009fc <initTonesDictionary+0x180>)
 800099e:	6818      	ldr	r0, [r3, #0]
 80009a0:	f507 520c 	add.w	r2, r7, #8960	; 0x2300
 80009a4:	f102 0218 	add.w	r2, r2, #24
 80009a8:	3a10      	subs	r2, #16
 80009aa:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
 80009ae:	4917      	ldr	r1, [pc, #92]	; (8000a0c <initTonesDictionary+0x190>)
 80009b0:	f7ff fe9e 	bl	80006f0 <insert>
    insert(playlist, "fur_elise", fur_elise, sizeof(fur_elise) / sizeof(struct Tone));
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <initTonesDictionary+0x180>)
 80009b6:	6818      	ldr	r0, [r3, #0]
 80009b8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80009bc:	f102 0218 	add.w	r2, r2, #24
 80009c0:	3a30      	subs	r2, #48	; 0x30
 80009c2:	f44f 7317 	mov.w	r3, #604	; 0x25c
 80009c6:	4912      	ldr	r1, [pc, #72]	; (8000a10 <initTonesDictionary+0x194>)
 80009c8:	f7ff fe92 	bl	80006f0 <insert>
    insert(playlist, "tetris", tetris, sizeof(tetris) / sizeof(struct Tone));
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <initTonesDictionary+0x180>)
 80009ce:	6818      	ldr	r0, [r3, #0]
 80009d0:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 80009d4:	f44f 7395 	mov.w	r3, #298	; 0x12a
 80009d8:	490e      	ldr	r1, [pc, #56]	; (8000a14 <initTonesDictionary+0x198>)
 80009da:	f7ff fe89 	bl	80006f0 <insert>
    insert(playlist, "tokyo_drift", tokyo_drift, sizeof(tokyo_drift) / sizeof(struct Tone));
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <initTonesDictionary+0x180>)
 80009e0:	6818      	ldr	r0, [r3, #0]
 80009e2:	f107 0218 	add.w	r2, r7, #24
 80009e6:	3a18      	subs	r2, #24
 80009e8:	23db      	movs	r3, #219	; 0xdb
 80009ea:	490b      	ldr	r1, [pc, #44]	; (8000a18 <initTonesDictionary+0x19c>)
 80009ec:	f7ff fe80 	bl	80006f0 <insert>
}
 80009f0:	bf00      	nop
 80009f2:	f507 5750 	add.w	r7, r7, #13312	; 0x3400
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200000e0 	.word	0x200000e0
 8000a00:	200000e4 	.word	0x200000e4
 8000a04:	0800a05c 	.word	0x0800a05c
 8000a08:	0800a070 	.word	0x0800a070
 8000a0c:	0800a080 	.word	0x0800a080
 8000a10:	0800a088 	.word	0x0800a088
 8000a14:	0800a094 	.word	0x0800a094
 8000a18:	0800a09c 	.word	0x0800a09c
 8000a1c:	0800a0a8 	.word	0x0800a0a8
 8000a20:	0800a2b0 	.word	0x0800a2b0
 8000a24:	0800a4a8 	.word	0x0800a4a8
 8000a28:	0800b1b8 	.word	0x0800b1b8
 8000a2c:	0800c498 	.word	0x0800c498
 8000a30:	0800cde8 	.word	0x0800cde8

08000a34 <extractNumber>:
//PWM END

//UART BEGIN

//Function to extract music number from Set_Music()
void extractNumber(const uint8_t *data) {
 8000a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a38:	b089      	sub	sp, #36	; 0x24
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
 8000a3e:	466b      	mov	r3, sp
 8000a40:	461e      	mov	r6, r3
	int helper[digit_count(getDictSize(playlist))];
 8000a42:	4b4f      	ldr	r3, [pc, #316]	; (8000b80 <extractNumber+0x14c>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fed7 	bl	80007fa <getDictSize>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 faf0 	bl	8001034 <digit_count>
 8000a54:	4601      	mov	r1, r0
 8000a56:	1e4b      	subs	r3, r1, #1
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	460a      	mov	r2, r1
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	4690      	mov	r8, r2
 8000a60:	4699      	mov	r9, r3
 8000a62:	f04f 0200 	mov.w	r2, #0
 8000a66:	f04f 0300 	mov.w	r3, #0
 8000a6a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000a6e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000a72:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000a76:	460a      	mov	r2, r1
 8000a78:	2300      	movs	r3, #0
 8000a7a:	4614      	mov	r4, r2
 8000a7c:	461d      	mov	r5, r3
 8000a7e:	f04f 0200 	mov.w	r2, #0
 8000a82:	f04f 0300 	mov.w	r3, #0
 8000a86:	016b      	lsls	r3, r5, #5
 8000a88:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000a8c:	0162      	lsls	r2, r4, #5
 8000a8e:	460b      	mov	r3, r1
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	3307      	adds	r3, #7
 8000a94:	08db      	lsrs	r3, r3, #3
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	ebad 0d03 	sub.w	sp, sp, r3
 8000a9c:	466b      	mov	r3, sp
 8000a9e:	3303      	adds	r3, #3
 8000aa0:	089b      	lsrs	r3, r3, #2
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	613b      	str	r3, [r7, #16]
	int flag = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
	if (data[10 + digit_count(getDictSize(playlist))] == ')'
 8000aaa:	4b35      	ldr	r3, [pc, #212]	; (8000b80 <extractNumber+0x14c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fea3 	bl	80007fa <getDictSize>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 fabc 	bl	8001034 <digit_count>
 8000abc:	4603      	mov	r3, r0
 8000abe:	330a      	adds	r3, #10
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b29      	cmp	r3, #41	; 0x29
 8000aca:	d154      	bne.n	8000b76 <extractNumber+0x142>
			&& (data[10] != '0')) {
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	330a      	adds	r3, #10
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b30      	cmp	r3, #48	; 0x30
 8000ad4:	d04f      	beq.n	8000b76 <extractNumber+0x142>
		for (int i = 10; i < 10 + digit_count(getDictSize(playlist)); i++) {
 8000ad6:	230a      	movs	r3, #10
 8000ad8:	61fb      	str	r3, [r7, #28]
 8000ada:	e01e      	b.n	8000b1a <extractNumber+0xe6>
			if (data[i] <= '9' && data[i] >= '0') {
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b39      	cmp	r3, #57	; 0x39
 8000ae6:	d815      	bhi.n	8000b14 <extractNumber+0xe0>
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b2f      	cmp	r3, #47	; 0x2f
 8000af2:	d90f      	bls.n	8000b14 <extractNumber+0xe0>
				helper[i - 10] = data[i] - '0';
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	f1a3 020a 	sub.w	r2, r3, #10
 8000b04:	3930      	subs	r1, #48	; 0x30
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int i = 10; i < 10 + digit_count(getDictSize(playlist)); i++) {
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	61fb      	str	r3, [r7, #28]
 8000b12:	e002      	b.n	8000b1a <extractNumber+0xe6>
			} else {
				flag = 1;
 8000b14:	2301      	movs	r3, #1
 8000b16:	61bb      	str	r3, [r7, #24]
				break;
 8000b18:	e00d      	b.n	8000b36 <extractNumber+0x102>
		for (int i = 10; i < 10 + digit_count(getDictSize(playlist)); i++) {
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <extractNumber+0x14c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fe6b 	bl	80007fa <getDictSize>
 8000b24:	4603      	mov	r3, r0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 fa84 	bl	8001034 <digit_count>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	3309      	adds	r3, #9
 8000b30:	69fa      	ldr	r2, [r7, #28]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	ddd2      	ble.n	8000adc <extractNumber+0xa8>
			}
		}
		if (!flag) {
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d11c      	bne.n	8000b76 <extractNumber+0x142>
			int num = array_to_number(helper, digit_count(getDictSize(playlist)));
 8000b3c:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <extractNumber+0x14c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fe5a 	bl	80007fa <getDictSize>
 8000b46:	4603      	mov	r3, r0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 fa73 	bl	8001034 <digit_count>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	4619      	mov	r1, r3
 8000b52:	6938      	ldr	r0, [r7, #16]
 8000b54:	f000 fac8 	bl	80010e8 <array_to_number>
 8000b58:	60f8      	str	r0, [r7, #12]
			if(num <= getDictSize(playlist))
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <extractNumber+0x14c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fe4b 	bl	80007fa <getDictSize>
 8000b64:	4602      	mov	r2, r0
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	dc04      	bgt.n	8000b76 <extractNumber+0x142>
			{
				set_music(num);
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	f000 fbd7 	bl	8001320 <set_music>
 8000b72:	46b5      	mov	sp, r6
 8000b74:	e000      	b.n	8000b78 <extractNumber+0x144>
 8000b76:	46b5      	mov	sp, r6
				return;
			}
		}
	}
//failed
}
 8000b78:	3724      	adds	r7, #36	; 0x24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b80:	200000e0 	.word	0x200000e0

08000b84 <compareStrings>:

int compareStrings(const char *str1, const uint8_t *str2, int n) {
 8000b84:	b480      	push	{r7}
 8000b86:	b087      	sub	sp, #28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < n; i++) {
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	e00e      	b.n	8000bb4 <compareStrings+0x30>
		if (str1[i] != str2[i]) {
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	68fa      	ldr	r2, [r7, #12]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	781a      	ldrb	r2, [r3, #0]
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	68b9      	ldr	r1, [r7, #8]
 8000ba2:	440b      	add	r3, r1
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d001      	beq.n	8000bae <compareStrings+0x2a>
			return 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	e007      	b.n	8000bbe <compareStrings+0x3a>
	for (int i = 0; i < n; i++) {
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	697a      	ldr	r2, [r7, #20]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	dbec      	blt.n	8000b96 <compareStrings+0x12>
		}
	}
	return 1;
 8000bbc:	2301      	movs	r3, #1
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	371c      	adds	r7, #28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <HAL_UART_RxCpltCallback>:

uint8_t data[100];
uint8_t d;
uint8_t i;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000bcc:	b5b0      	push	{r4, r5, r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a6d      	ldr	r2, [pc, #436]	; (8000d90 <HAL_UART_RxCpltCallback+0x1c4>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	f040 80d3 	bne.w	8000d86 <HAL_UART_RxCpltCallback+0x1ba>
		HAL_UART_Receive_IT(&huart1, &d, 1);
 8000be0:	2201      	movs	r2, #1
 8000be2:	496c      	ldr	r1, [pc, #432]	; (8000d94 <HAL_UART_RxCpltCallback+0x1c8>)
 8000be4:	486c      	ldr	r0, [pc, #432]	; (8000d98 <HAL_UART_RxCpltCallback+0x1cc>)
 8000be6:	f006 fe97 	bl	8007918 <HAL_UART_Receive_IT>
		data[i++] = d;
 8000bea:	4b6c      	ldr	r3, [pc, #432]	; (8000d9c <HAL_UART_RxCpltCallback+0x1d0>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	1c5a      	adds	r2, r3, #1
 8000bf0:	b2d1      	uxtb	r1, r2
 8000bf2:	4a6a      	ldr	r2, [pc, #424]	; (8000d9c <HAL_UART_RxCpltCallback+0x1d0>)
 8000bf4:	7011      	strb	r1, [r2, #0]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	4b66      	ldr	r3, [pc, #408]	; (8000d94 <HAL_UART_RxCpltCallback+0x1c8>)
 8000bfa:	7819      	ldrb	r1, [r3, #0]
 8000bfc:	4b68      	ldr	r3, [pc, #416]	; (8000da0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000bfe:	5499      	strb	r1, [r3, r2]
		if (d == '\n') {
 8000c00:	4b64      	ldr	r3, [pc, #400]	; (8000d94 <HAL_UART_RxCpltCallback+0x1c8>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b0a      	cmp	r3, #10
 8000c06:	f040 80be 	bne.w	8000d86 <HAL_UART_RxCpltCallback+0x1ba>
			if ((i == 6 && compareStrings(pause, data, 5) == 1)) {
 8000c0a:	4b64      	ldr	r3, [pc, #400]	; (8000d9c <HAL_UART_RxCpltCallback+0x1d0>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b06      	cmp	r3, #6
 8000c10:	d110      	bne.n	8000c34 <HAL_UART_RxCpltCallback+0x68>
 8000c12:	2205      	movs	r2, #5
 8000c14:	4962      	ldr	r1, [pc, #392]	; (8000da0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000c16:	4863      	ldr	r0, [pc, #396]	; (8000da4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000c18:	f7ff ffb4 	bl	8000b84 <compareStrings>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d108      	bne.n	8000c34 <HAL_UART_RxCpltCallback+0x68>
				programState = Paused;
 8000c22:	4b61      	ldr	r3, [pc, #388]	; (8000da8 <HAL_UART_RxCpltCallback+0x1dc>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart1, "-=MUSIC PAUSED=-\r", 17);
 8000c28:	2211      	movs	r2, #17
 8000c2a:	4960      	ldr	r1, [pc, #384]	; (8000dac <HAL_UART_RxCpltCallback+0x1e0>)
 8000c2c:	485a      	ldr	r0, [pc, #360]	; (8000d98 <HAL_UART_RxCpltCallback+0x1cc>)
 8000c2e:	f006 fe15 	bl	800785c <HAL_UART_Transmit_IT>
 8000c32:	e0a5      	b.n	8000d80 <HAL_UART_RxCpltCallback+0x1b4>
			} else if (i == 7 && compareStrings(resume, data, 6) == 1) {
 8000c34:	4b59      	ldr	r3, [pc, #356]	; (8000d9c <HAL_UART_RxCpltCallback+0x1d0>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b07      	cmp	r3, #7
 8000c3a:	d110      	bne.n	8000c5e <HAL_UART_RxCpltCallback+0x92>
 8000c3c:	2206      	movs	r2, #6
 8000c3e:	4958      	ldr	r1, [pc, #352]	; (8000da0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000c40:	485b      	ldr	r0, [pc, #364]	; (8000db0 <HAL_UART_RxCpltCallback+0x1e4>)
 8000c42:	f7ff ff9f 	bl	8000b84 <compareStrings>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d108      	bne.n	8000c5e <HAL_UART_RxCpltCallback+0x92>

				programState = Resume;
 8000c4c:	4b56      	ldr	r3, [pc, #344]	; (8000da8 <HAL_UART_RxCpltCallback+0x1dc>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart1, "-=MUSIC RESUME=-\n", 17);
 8000c52:	2211      	movs	r2, #17
 8000c54:	4957      	ldr	r1, [pc, #348]	; (8000db4 <HAL_UART_RxCpltCallback+0x1e8>)
 8000c56:	4850      	ldr	r0, [pc, #320]	; (8000d98 <HAL_UART_RxCpltCallback+0x1cc>)
 8000c58:	f006 fe00 	bl	800785c <HAL_UART_Transmit_IT>
 8000c5c:	e090      	b.n	8000d80 <HAL_UART_RxCpltCallback+0x1b4>

			} else if (i == 12 + digit_count(getDictSize(playlist))
 8000c5e:	4b4f      	ldr	r3, [pc, #316]	; (8000d9c <HAL_UART_RxCpltCallback+0x1d0>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	461c      	mov	r4, r3
 8000c64:	4b54      	ldr	r3, [pc, #336]	; (8000db8 <HAL_UART_RxCpltCallback+0x1ec>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fdc6 	bl	80007fa <getDictSize>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 f9df 	bl	8001034 <digit_count>
 8000c76:	4603      	mov	r3, r0
 8000c78:	330c      	adds	r3, #12
 8000c7a:	429c      	cmp	r4, r3
 8000c7c:	d10b      	bne.n	8000c96 <HAL_UART_RxCpltCallback+0xca>
					&& compareStrings(setMusic, data, 10) == 1) {
 8000c7e:	220a      	movs	r2, #10
 8000c80:	4947      	ldr	r1, [pc, #284]	; (8000da0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000c82:	484e      	ldr	r0, [pc, #312]	; (8000dbc <HAL_UART_RxCpltCallback+0x1f0>)
 8000c84:	f7ff ff7e 	bl	8000b84 <compareStrings>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d103      	bne.n	8000c96 <HAL_UART_RxCpltCallback+0xca>
				extractNumber(data);
 8000c8e:	4844      	ldr	r0, [pc, #272]	; (8000da0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000c90:	f7ff fed0 	bl	8000a34 <extractNumber>
 8000c94:	e074      	b.n	8000d80 <HAL_UART_RxCpltCallback+0x1b4>

			} else if (i == 9) {
 8000c96:	4b41      	ldr	r3, [pc, #260]	; (8000d9c <HAL_UART_RxCpltCallback+0x1d0>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b09      	cmp	r3, #9
 8000c9c:	d117      	bne.n	8000cce <HAL_UART_RxCpltCallback+0x102>
				if (compareStrings(alertON, data, 8) == 1) {
 8000c9e:	2208      	movs	r2, #8
 8000ca0:	493f      	ldr	r1, [pc, #252]	; (8000da0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000ca2:	4847      	ldr	r0, [pc, #284]	; (8000dc0 <HAL_UART_RxCpltCallback+0x1f4>)
 8000ca4:	f7ff ff6e 	bl	8000b84 <compareStrings>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d168      	bne.n	8000d80 <HAL_UART_RxCpltCallback+0x1b4>
					alertStatus = 1;
 8000cae:	4b45      	ldr	r3, [pc, #276]	; (8000dc4 <HAL_UART_RxCpltCallback+0x1f8>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Alerts Turned ON\n",
 8000cb4:	2219      	movs	r2, #25
 8000cb6:	4944      	ldr	r1, [pc, #272]	; (8000dc8 <HAL_UART_RxCpltCallback+0x1fc>)
 8000cb8:	4837      	ldr	r0, [pc, #220]	; (8000d98 <HAL_UART_RxCpltCallback+0x1cc>)
 8000cba:	f006 fdcf 	bl	800785c <HAL_UART_Transmit_IT>
							25);
					buzzerEnterTime = HAL_GetTick();
 8000cbe:	f001 fd6b 	bl	8002798 <HAL_GetTick>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	4a41      	ldr	r2, [pc, #260]	; (8000dcc <HAL_UART_RxCpltCallback+0x200>)
 8000cc6:	6013      	str	r3, [r2, #0]
					PWM_Start();
 8000cc8:	f001 fa4e 	bl	8002168 <PWM_Start>
 8000ccc:	e058      	b.n	8000d80 <HAL_UART_RxCpltCallback+0x1b4>
				}
			} else if (i == 10) {
 8000cce:	4b33      	ldr	r3, [pc, #204]	; (8000d9c <HAL_UART_RxCpltCallback+0x1d0>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b0a      	cmp	r3, #10
 8000cd4:	d110      	bne.n	8000cf8 <HAL_UART_RxCpltCallback+0x12c>
				if (compareStrings(alertOFF, data, 9) == 1) {
 8000cd6:	2209      	movs	r2, #9
 8000cd8:	4931      	ldr	r1, [pc, #196]	; (8000da0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000cda:	483d      	ldr	r0, [pc, #244]	; (8000dd0 <HAL_UART_RxCpltCallback+0x204>)
 8000cdc:	f7ff ff52 	bl	8000b84 <compareStrings>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d14c      	bne.n	8000d80 <HAL_UART_RxCpltCallback+0x1b4>
					alertStatus = 0;
 8000ce6:	4b37      	ldr	r3, [pc, #220]	; (8000dc4 <HAL_UART_RxCpltCallback+0x1f8>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Alerts Turned OFF\n",
 8000cec:	221a      	movs	r2, #26
 8000cee:	4939      	ldr	r1, [pc, #228]	; (8000dd4 <HAL_UART_RxCpltCallback+0x208>)
 8000cf0:	4829      	ldr	r0, [pc, #164]	; (8000d98 <HAL_UART_RxCpltCallback+0x1cc>)
 8000cf2:	f006 fdb3 	bl	800785c <HAL_UART_Transmit_IT>
 8000cf6:	e043      	b.n	8000d80 <HAL_UART_RxCpltCallback+0x1b4>
							26);
				}
			} else if (i == 14 && (data[11] - '0') < 6
 8000cf8:	4b28      	ldr	r3, [pc, #160]	; (8000d9c <HAL_UART_RxCpltCallback+0x1d0>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b0e      	cmp	r3, #14
 8000cfe:	d12d      	bne.n	8000d5c <HAL_UART_RxCpltCallback+0x190>
 8000d00:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000d02:	7adb      	ldrb	r3, [r3, #11]
 8000d04:	2b35      	cmp	r3, #53	; 0x35
 8000d06:	d829      	bhi.n	8000d5c <HAL_UART_RxCpltCallback+0x190>
					&& (data[11] - '0') > -1) {
 8000d08:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000d0a:	7adb      	ldrb	r3, [r3, #11]
 8000d0c:	2b2f      	cmp	r3, #47	; 0x2f
 8000d0e:	d925      	bls.n	8000d5c <HAL_UART_RxCpltCallback+0x190>
				if (compareStrings(setVolume, data, 11) == 1
 8000d10:	220b      	movs	r2, #11
 8000d12:	4923      	ldr	r1, [pc, #140]	; (8000da0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000d14:	4830      	ldr	r0, [pc, #192]	; (8000dd8 <HAL_UART_RxCpltCallback+0x20c>)
 8000d16:	f7ff ff35 	bl	8000b84 <compareStrings>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d12e      	bne.n	8000d7e <HAL_UART_RxCpltCallback+0x1b2>
						&& data[12] == ')') {
 8000d20:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000d22:	7b1b      	ldrb	r3, [r3, #12]
 8000d24:	2b29      	cmp	r3, #41	; 0x29
 8000d26:	d12a      	bne.n	8000d7e <HAL_UART_RxCpltCallback+0x1b2>
					int v = data[11] - '0';
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000d2a:	7adb      	ldrb	r3, [r3, #11]
 8000d2c:	3b30      	subs	r3, #48	; 0x30
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
//					_volume = v * 10;
					char massage[24] = "Program Volume Set To  \n";
 8000d30:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <HAL_UART_RxCpltCallback+0x210>)
 8000d32:	f107 040c 	add.w	r4, r7, #12
 8000d36:	461d      	mov	r5, r3
 8000d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d3c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d40:	e884 0003 	stmia.w	r4, {r0, r1}
					massage[22] = data[11];
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000d46:	7adb      	ldrb	r3, [r3, #11]
 8000d48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					HAL_UART_Transmit_IT(&huart1, massage, 24);
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	2218      	movs	r2, #24
 8000d52:	4619      	mov	r1, r3
 8000d54:	4810      	ldr	r0, [pc, #64]	; (8000d98 <HAL_UART_RxCpltCallback+0x1cc>)
 8000d56:	f006 fd81 	bl	800785c <HAL_UART_Transmit_IT>
				if (compareStrings(setVolume, data, 11) == 1
 8000d5a:	e010      	b.n	8000d7e <HAL_UART_RxCpltCallback+0x1b2>
				}
			} else {
				HAL_UART_Transmit_IT(&huart1, "INVALID INPUT\n", 14);
 8000d5c:	220e      	movs	r2, #14
 8000d5e:	4920      	ldr	r1, [pc, #128]	; (8000de0 <HAL_UART_RxCpltCallback+0x214>)
 8000d60:	480d      	ldr	r0, [pc, #52]	; (8000d98 <HAL_UART_RxCpltCallback+0x1cc>)
 8000d62:	f006 fd7b 	bl	800785c <HAL_UART_Transmit_IT>
				buzzerEnterTime = HAL_GetTick();
 8000d66:	f001 fd17 	bl	8002798 <HAL_GetTick>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <HAL_UART_RxCpltCallback+0x200>)
 8000d6e:	6013      	str	r3, [r2, #0]
				if (alertStatus)
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <HAL_UART_RxCpltCallback+0x1f8>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d003      	beq.n	8000d80 <HAL_UART_RxCpltCallback+0x1b4>
					PWM_Start();
 8000d78:	f001 f9f6 	bl	8002168 <PWM_Start>
 8000d7c:	e000      	b.n	8000d80 <HAL_UART_RxCpltCallback+0x1b4>
				if (compareStrings(setVolume, data, 11) == 1
 8000d7e:	bf00      	nop
			}

			i = 0;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_UART_RxCpltCallback+0x1d0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8000d86:	bf00      	nop
 8000d88:	3728      	adds	r7, #40	; 0x28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40013800 	.word	0x40013800
 8000d94:	200006f8 	.word	0x200006f8
 8000d98:	20000288 	.word	0x20000288
 8000d9c:	200006f9 	.word	0x200006f9
 8000da0:	20000694 	.word	0x20000694
 8000da4:	20000010 	.word	0x20000010
 8000da8:	2000000c 	.word	0x2000000c
 8000dac:	0800d4c0 	.word	0x0800d4c0
 8000db0:	20000018 	.word	0x20000018
 8000db4:	0800d4d4 	.word	0x0800d4d4
 8000db8:	200000e0 	.word	0x200000e0
 8000dbc:	20000020 	.word	0x20000020
 8000dc0:	2000002c 	.word	0x2000002c
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	0800d4e8 	.word	0x0800d4e8
 8000dcc:	20000638 	.word	0x20000638
 8000dd0:	20000034 	.word	0x20000034
 8000dd4:	0800d504 	.word	0x0800d504
 8000dd8:	20000040 	.word	0x20000040
 8000ddc:	0800d530 	.word	0x0800d530
 8000de0:	0800d520 	.word	0x0800d520

08000de4 <normalize_adc>:
	CHANGE_MUSIC, CHANGE_VOLUME, NONE
};
enum ADC_FUNCTION adc_function = NONE;

uint32_t normalize_adc(uint32_t adc_value, uint32_t max_adc_value,
		uint32_t playlist_size) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
	if (adc_function == CHANGE_MUSIC) {
 8000df0:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <normalize_adc+0xb0>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d131      	bne.n	8000e5c <normalize_adc+0x78>
		// Calculate the step size
		float step = (float) max_adc_value / (playlist_size);
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	ee07 3a90 	vmov	s15, r3
 8000dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	ee07 3a90 	vmov	s15, r3
 8000e08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e10:	edc7 7a04 	vstr	s15, [r7, #16]
		// Calculate the normalized music number
		uint32_t normalized_number = (uint32_t) ((float) adc_value / step + 0.5); // Adding 0.5 for rounding
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	ee07 3a90 	vmov	s15, r3
 8000e1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e22:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000e26:	ee16 0a90 	vmov	r0, s13
 8000e2a:	f7ff fb9d 	bl	8000568 <__aeabi_f2d>
 8000e2e:	f04f 0200 	mov.w	r2, #0
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <normalize_adc+0xb4>)
 8000e34:	f7ff fa3a 	bl	80002ac <__adddf3>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f7ff fbea 	bl	8000618 <__aeabi_d2uiz>
 8000e44:	4603      	mov	r3, r0
 8000e46:	617b      	str	r3, [r7, #20]
		// Ensure the normalized number is at least 1
		if (normalized_number < 1) {
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d101      	bne.n	8000e52 <normalize_adc+0x6e>
			normalized_number = 1;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	617b      	str	r3, [r7, #20]
		}
		adc_select = normalized_number;
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	4a11      	ldr	r2, [pc, #68]	; (8000e9c <normalize_adc+0xb8>)
 8000e56:	6013      	str	r3, [r2, #0]
		return normalized_number;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	e016      	b.n	8000e8a <normalize_adc+0xa6>
	} else if (adc_function == CHANGE_VOLUME) {
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <normalize_adc+0xb0>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d112      	bne.n	8000e8a <normalize_adc+0xa6>
		adc_value = (adc_value * 101) / max_adc_value;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2265      	movs	r2, #101	; 0x65
 8000e68:	fb03 f202 	mul.w	r2, r3, r2
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e72:	60fb      	str	r3, [r7, #12]
		if (adc_value > 97)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2b61      	cmp	r3, #97	; 0x61
 8000e78:	d901      	bls.n	8000e7e <normalize_adc+0x9a>
			adc_value = 100;
 8000e7a:	2364      	movs	r3, #100	; 0x64
 8000e7c:	60fb      	str	r3, [r7, #12]
		volume = adc_value;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <normalize_adc+0xbc>)
 8000e84:	801a      	strh	r2, [r3, #0]
		return adc_value;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	e7ff      	b.n	8000e8a <normalize_adc+0xa6>
	}
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2000004b 	.word	0x2000004b
 8000e98:	3fe00000 	.word	0x3fe00000
 8000e9c:	20000604 	.word	0x20000604
 8000ea0:	20000050 	.word	0x20000050

08000ea4 <denoise_adc>:

int adc_indx = 0;
uint32_t adc_values[50];
int denoise_adc() {
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
	int sum = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 50; i++) {
 8000eae:	2300      	movs	r3, #0
 8000eb0:	603b      	str	r3, [r7, #0]
 8000eb2:	e009      	b.n	8000ec8 <denoise_adc+0x24>
		sum += adc_values[i];
 8000eb4:	4a0c      	ldr	r2, [pc, #48]	; (8000ee8 <denoise_adc+0x44>)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 50; i++) {
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	2b31      	cmp	r3, #49	; 0x31
 8000ecc:	ddf2      	ble.n	8000eb4 <denoise_adc+0x10>
	}
	return sum / 50;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <denoise_adc+0x48>)
 8000ed2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ed6:	1112      	asrs	r2, r2, #4
 8000ed8:	17db      	asrs	r3, r3, #31
 8000eda:	1ad3      	subs	r3, r2, r3
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	20000700 	.word	0x20000700
 8000eec:	51eb851f 	.word	0x51eb851f

08000ef0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f00:	d128      	bne.n	8000f54 <HAL_ADC_ConvCpltCallback+0x64>
		uint32_t value;
		value = HAL_ADC_GetValue(hadc);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f001 ffc5 	bl	8002e92 <HAL_ADC_GetValue>
 8000f08:	60f8      	str	r0, [r7, #12]
		if (adc_indx < 50)
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b31      	cmp	r3, #49	; 0x31
 8000f10:	dc09      	bgt.n	8000f26 <HAL_ADC_ConvCpltCallback+0x36>
			adc_values[adc_indx++] = value;
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	4910      	ldr	r1, [pc, #64]	; (8000f5c <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f1a:	600a      	str	r2, [r1, #0]
 8000f1c:	4910      	ldr	r1, [pc, #64]	; (8000f60 <HAL_ADC_ConvCpltCallback+0x70>)
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			value = denoise_adc();
			extract_int_to_carrier(
					normalize_adc(value, 4095, getDictSize(playlist)));
		}
	}
}
 8000f24:	e016      	b.n	8000f54 <HAL_ADC_ConvCpltCallback+0x64>
			adc_indx = 0;
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
			value = denoise_adc();
 8000f2c:	f7ff ffba 	bl	8000ea4 <denoise_adc>
 8000f30:	4603      	mov	r3, r0
 8000f32:	60fb      	str	r3, [r7, #12]
					normalize_adc(value, 4095, getDictSize(playlist)));
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <HAL_ADC_ConvCpltCallback+0x74>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fc5e 	bl	80007fa <getDictSize>
 8000f3e:	4603      	mov	r3, r0
			extract_int_to_carrier(
 8000f40:	461a      	mov	r2, r3
 8000f42:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000f46:	68f8      	ldr	r0, [r7, #12]
 8000f48:	f7ff ff4c 	bl	8000de4 <normalize_adc>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f890 	bl	8001074 <extract_int_to_carrier>
}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200006fc 	.word	0x200006fc
 8000f60:	20000700 	.word	0x20000700
 8000f64:	200000e0 	.word	0x200000e0

08000f68 <display_number>:
//ADC End

void display_number(int led_flag, int _number) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOD,
 8000f72:	2201      	movs	r2, #1
 8000f74:	211e      	movs	r1, #30
 8000f76:	4813      	ldr	r0, [pc, #76]	; (8000fc4 <display_number+0x5c>)
 8000f78:	f003 fb1e 	bl	80045b8 <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOD, led[led_flag], DISPLAY_ON);
 8000f7c:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <display_number+0x60>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f84:	2200      	movs	r2, #0
 8000f86:	4619      	mov	r1, r3
 8000f88:	480e      	ldr	r0, [pc, #56]	; (8000fc4 <display_number+0x5c>)
 8000f8a:	f003 fb15 	bl	80045b8 <HAL_GPIO_WritePin>
	if (_number != 0) {
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d009      	beq.n	8000fa8 <display_number+0x40>
		HAL_GPIO_WritePin(GPIOD, digits[_number].pattern, GPIO_PIN_SET);
 8000f94:	4a0d      	ldr	r2, [pc, #52]	; (8000fcc <display_number+0x64>)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	4413      	add	r3, r2
 8000f9c:	889b      	ldrh	r3, [r3, #4]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <display_number+0x5c>)
 8000fa4:	f003 fb08 	bl	80045b8 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(GPIOD, digits[_number].anti_pattern, GPIO_PIN_RESET);
 8000fa8:	4a08      	ldr	r2, [pc, #32]	; (8000fcc <display_number+0x64>)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	4413      	add	r3, r2
 8000fb0:	88db      	ldrh	r3, [r3, #6]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <display_number+0x5c>)
 8000fb8:	f003 fafe 	bl	80045b8 <HAL_GPIO_WritePin>
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	48000c00 	.word	0x48000c00
 8000fc8:	2000060c 	.word	0x2000060c
 8000fcc:	20000640 	.word	0x20000640

08000fd0 <increase>:

void increase(int _head) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	carrier[_head] += 1;
 8000fd8:	4a0c      	ldr	r2, [pc, #48]	; (800100c <increase+0x3c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe0:	1c5a      	adds	r2, r3, #1
 8000fe2:	490a      	ldr	r1, [pc, #40]	; (800100c <increase+0x3c>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (carrier[_head] == 10) {
 8000fea:	4a08      	ldr	r2, [pc, #32]	; (800100c <increase+0x3c>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff2:	2b0a      	cmp	r3, #10
 8000ff4:	d104      	bne.n	8001000 <increase+0x30>
		carrier[_head] = 0;
 8000ff6:	4a05      	ldr	r2, [pc, #20]	; (800100c <increase+0x3c>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	20000614 	.word	0x20000614

08001010 <init_display>:

void init_display() {
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
//Reset All Segment Values
	HAL_GPIO_WritePin(GPIOD,
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <init_display+0x20>)
 800101c:	f003 facc 	bl	80045b8 <HAL_GPIO_WritePin>
	GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_12, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOD,
 8001020:	2201      	movs	r2, #1
 8001022:	211e      	movs	r1, #30
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <init_display+0x20>)
 8001026:	f003 fac7 	bl	80045b8 <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	48000c00 	.word	0x48000c00

08001034 <digit_count>:

//Carrier is to be displayed on seven segment
int musicNumberSize = 0;
int digit_count(int val) {
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	int i, size = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
	int temp = val;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	60bb      	str	r3, [r7, #8]

	while (temp > 0) {
 8001044:	e00a      	b.n	800105c <digit_count+0x28>
		temp /= 10;
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	4a09      	ldr	r2, [pc, #36]	; (8001070 <digit_count+0x3c>)
 800104a:	fb82 1203 	smull	r1, r2, r2, r3
 800104e:	1092      	asrs	r2, r2, #2
 8001050:	17db      	asrs	r3, r3, #31
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	60bb      	str	r3, [r7, #8]
		size++;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	3301      	adds	r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
	while (temp > 0) {
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	2b00      	cmp	r3, #0
 8001060:	dcf1      	bgt.n	8001046 <digit_count+0x12>
	}
	return size;
 8001062:	68fb      	ldr	r3, [r7, #12]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	66666667 	.word	0x66666667

08001074 <extract_int_to_carrier>:

void extract_int_to_carrier(int val) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	int i;
	i = digit_count(val) - 1;
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ffd9 	bl	8001034 <digit_count>
 8001082:	4603      	mov	r3, r0
 8001084:	3b01      	subs	r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
	musicNumberSize = digit_count(val);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ffd3 	bl	8001034 <digit_count>
 800108e:	4603      	mov	r3, r0
 8001090:	4a12      	ldr	r2, [pc, #72]	; (80010dc <extract_int_to_carrier+0x68>)
 8001092:	6013      	str	r3, [r2, #0]

	while (val > 0) {
 8001094:	e019      	b.n	80010ca <extract_int_to_carrier+0x56>
		carrier[i--] = val % 10;
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	1e43      	subs	r3, r0, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	6879      	ldr	r1, [r7, #4]
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <extract_int_to_carrier+0x6c>)
 80010a0:	fb83 2301 	smull	r2, r3, r3, r1
 80010a4:	109a      	asrs	r2, r3, #2
 80010a6:	17cb      	asrs	r3, r1, #31
 80010a8:	1ad2      	subs	r2, r2, r3
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	1aca      	subs	r2, r1, r3
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <extract_int_to_carrier+0x70>)
 80010b6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		val /= 10;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <extract_int_to_carrier+0x6c>)
 80010be:	fb82 1203 	smull	r1, r2, r2, r3
 80010c2:	1092      	asrs	r2, r2, #2
 80010c4:	17db      	asrs	r3, r3, #31
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	607b      	str	r3, [r7, #4]
	while (val > 0) {
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	dce2      	bgt.n	8001096 <extract_int_to_carrier+0x22>
	}
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200007c8 	.word	0x200007c8
 80010e0:	66666667 	.word	0x66666667
 80010e4:	20000614 	.word	0x20000614

080010e8 <array_to_number>:

int array_to_number(int *array, int size) {
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
	int number = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < size; i++) {
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	e00f      	b.n	800111c <array_to_number+0x34>
		number = number * 10 + array[i];
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	4619      	mov	r1, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	4413      	add	r3, r2
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	440b      	add	r3, r1
 8001114:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < size; i++) {
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	3301      	adds	r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	dbeb      	blt.n	80010fc <array_to_number+0x14>
	}
	return number;
 8001124:	68fb      	ldr	r3, [r7, #12]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <generate_random_int>:

int generate_random_int() {
 8001134:	b598      	push	{r3, r4, r7, lr}
 8001136:	af00      	add	r7, sp, #0
	return random_number = rand() % getDictSize(playlist);
 8001138:	f008 f816 	bl	8009168 <rand>
 800113c:	4604      	mov	r4, r0
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <generate_random_int+0x2c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fb59 	bl	80007fa <getDictSize>
 8001148:	4603      	mov	r3, r0
 800114a:	fb94 f2f3 	sdiv	r2, r4, r3
 800114e:	fb02 f303 	mul.w	r3, r2, r3
 8001152:	1ae3      	subs	r3, r4, r3
 8001154:	4a03      	ldr	r2, [pc, #12]	; (8001164 <generate_random_int+0x30>)
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	4b02      	ldr	r3, [pc, #8]	; (8001164 <generate_random_int+0x30>)
 800115a:	681b      	ldr	r3, [r3, #0]
}
 800115c:	4618      	mov	r0, r3
 800115e:	bd98      	pop	{r3, r4, r7, pc}
 8001160:	200000e0 	.word	0x200000e0
 8001164:	20000624 	.word	0x20000624

08001168 <next_shuffle>:
	} else {
		programMode = Shuffle;
	}
}

int next_shuffle() {
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
	struct DictionaryNode *node = NULL;
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
	int toneCount = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
	srand(HAL_GetTick());
 8001176:	f001 fb0f 	bl	8002798 <HAL_GetTick>
 800117a:	4603      	mov	r3, r0
 800117c:	4618      	mov	r0, r3
 800117e:	f007 ffc5 	bl	800910c <srand>
	int i = generate_random_int();
 8001182:	f7ff ffd7 	bl	8001134 <generate_random_int>
 8001186:	60f8      	str	r0, [r7, #12]
	melody = lookup(playlist, playlistOrder[i], &toneCount, &node);
 8001188:	4b21      	ldr	r3, [pc, #132]	; (8001210 <next_shuffle+0xa8>)
 800118a:	6818      	ldr	r0, [r3, #0]
 800118c:	4b21      	ldr	r3, [pc, #132]	; (8001214 <next_shuffle+0xac>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	6819      	ldr	r1, [r3, #0]
 8001198:	f107 0308 	add.w	r3, r7, #8
 800119c:	1d3a      	adds	r2, r7, #4
 800119e:	f7ff faee 	bl	800077e <lookup>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4a1c      	ldr	r2, [pc, #112]	; (8001218 <next_shuffle+0xb0>)
 80011a6:	6013      	str	r3, [r2, #0]

	while (node && isBlacklisted(node)) {
 80011a8:	e012      	b.n	80011d0 <next_shuffle+0x68>
		i = generate_random_int();
 80011aa:	f7ff ffc3 	bl	8001134 <generate_random_int>
 80011ae:	60f8      	str	r0, [r7, #12]
		melody = lookup(playlist, playlistOrder[i], &toneCount, &node);
 80011b0:	4b17      	ldr	r3, [pc, #92]	; (8001210 <next_shuffle+0xa8>)
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <next_shuffle+0xac>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	6819      	ldr	r1, [r3, #0]
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	1d3a      	adds	r2, r7, #4
 80011c6:	f7ff fada 	bl	800077e <lookup>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a12      	ldr	r2, [pc, #72]	; (8001218 <next_shuffle+0xb0>)
 80011ce:	6013      	str	r3, [r2, #0]
	while (node && isBlacklisted(node)) {
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d006      	beq.n	80011e4 <next_shuffle+0x7c>
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fb34 	bl	8000846 <isBlacklisted>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1e2      	bne.n	80011aa <next_shuffle+0x42>
	}
	currentMusic = i + 1;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3301      	adds	r3, #1
 80011e8:	4a0c      	ldr	r2, [pc, #48]	; (800121c <next_shuffle+0xb4>)
 80011ea:	6013      	str	r3, [r2, #0]
	if (node) {
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d008      	beq.n	8001204 <next_shuffle+0x9c>
		setBlacklisted(node);
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fb0c 	bl	8000812 <setBlacklisted>
		playedCount++;
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <next_shuffle+0xb8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <next_shuffle+0xb8>)
 8001202:	6013      	str	r3, [r2, #0]
	}

	return toneCount;
 8001204:	687b      	ldr	r3, [r7, #4]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200000e0 	.word	0x200000e0
 8001214:	200000e4 	.word	0x200000e4
 8001218:	20000608 	.word	0x20000608
 800121c:	20000600 	.word	0x20000600
 8001220:	200005fc 	.word	0x200005fc

08001224 <next_music>:

//Choose next music based on programMode
void next_music() {
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
	int toneCount;
	struct DictionaryNode *node;
	if (programState == Resume) {
 800122a:	4b36      	ldr	r3, [pc, #216]	; (8001304 <next_music+0xe0>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d163      	bne.n	80012fa <next_music+0xd6>
		if (playedCount >= getDictSize(playlist)) {
 8001232:	4b35      	ldr	r3, [pc, #212]	; (8001308 <next_music+0xe4>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fadf 	bl	80007fa <getDictSize>
 800123c:	4602      	mov	r2, r0
 800123e:	4b33      	ldr	r3, [pc, #204]	; (800130c <next_music+0xe8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	429a      	cmp	r2, r3
 8001244:	dc25      	bgt.n	8001292 <next_music+0x6e>
			for (int i = 0; i < getDictSize(playlist); i++) {
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	e016      	b.n	800127a <next_music+0x56>
				melody = lookup(playlist, playlistOrder[i], &toneCount, &node);
 800124c:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <next_music+0xe4>)
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	4b2f      	ldr	r3, [pc, #188]	; (8001310 <next_music+0xec>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	6819      	ldr	r1, [r3, #0]
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	f107 0208 	add.w	r2, r7, #8
 8001262:	f7ff fa8c 	bl	800077e <lookup>
 8001266:	4603      	mov	r3, r0
 8001268:	4a2a      	ldr	r2, [pc, #168]	; (8001314 <next_music+0xf0>)
 800126a:	6013      	str	r3, [r2, #0]
				unsetBlacklisted(node);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fadc 	bl	800082c <unsetBlacklisted>
			for (int i = 0; i < getDictSize(playlist); i++) {
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	3301      	adds	r3, #1
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b23      	ldr	r3, [pc, #140]	; (8001308 <next_music+0xe4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fabb 	bl	80007fa <getDictSize>
 8001284:	4602      	mov	r2, r0
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4293      	cmp	r3, r2
 800128a:	dbdf      	blt.n	800124c <next_music+0x28>
			}
			playedCount = 0;
 800128c:	4b1f      	ldr	r3, [pc, #124]	; (800130c <next_music+0xe8>)
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
		}

		if (programMode == Liner) {
 8001292:	4b21      	ldr	r3, [pc, #132]	; (8001318 <next_music+0xf4>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d11f      	bne.n	80012da <next_music+0xb6>
			currentMusic = playedCount;
 800129a:	4b1c      	ldr	r3, [pc, #112]	; (800130c <next_music+0xe8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a1f      	ldr	r2, [pc, #124]	; (800131c <next_music+0xf8>)
 80012a0:	6013      	str	r3, [r2, #0]
			melody = lookup(playlist, playlistOrder[playedCount++], &toneCount,
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <next_music+0xe4>)
 80012a4:	6818      	ldr	r0, [r3, #0]
 80012a6:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <next_music+0xec>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <next_music+0xe8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	1c59      	adds	r1, r3, #1
 80012b0:	4c16      	ldr	r4, [pc, #88]	; (800130c <next_music+0xe8>)
 80012b2:	6021      	str	r1, [r4, #0]
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	6819      	ldr	r1, [r3, #0]
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	f107 0208 	add.w	r2, r7, #8
 80012c0:	f7ff fa5d 	bl	800077e <lookup>
 80012c4:	4603      	mov	r3, r0
 80012c6:	4a13      	ldr	r2, [pc, #76]	; (8001314 <next_music+0xf0>)
 80012c8:	6013      	str	r3, [r2, #0]
					&node);
			Change_Melody(melody, toneCount);
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <next_music+0xf0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	4611      	mov	r1, r2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f001 f80c 	bl	80022f0 <Change_Melody>
 80012d8:	e00a      	b.n	80012f0 <next_music+0xcc>
		} else {
			toneCount = next_shuffle();
 80012da:	f7ff ff45 	bl	8001168 <next_shuffle>
 80012de:	4603      	mov	r3, r0
 80012e0:	60bb      	str	r3, [r7, #8]
			Change_Melody(melody, toneCount);
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <next_music+0xf0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f001 f800 	bl	80022f0 <Change_Melody>
		}
		extract_int_to_carrier(currentMusic);
 80012f0:	4b0a      	ldr	r3, [pc, #40]	; (800131c <next_music+0xf8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff febd 	bl	8001074 <extract_int_to_carrier>
	}
}
 80012fa:	bf00      	nop
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd90      	pop	{r4, r7, pc}
 8001302:	bf00      	nop
 8001304:	2000000c 	.word	0x2000000c
 8001308:	200000e0 	.word	0x200000e0
 800130c:	200005fc 	.word	0x200005fc
 8001310:	200000e4 	.word	0x200000e4
 8001314:	20000608 	.word	0x20000608
 8001318:	20000690 	.word	0x20000690
 800131c:	20000600 	.word	0x20000600

08001320 <set_music>:

void set_music(int num) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	int toneCount;
	struct DictionaryNode *node;
	melody = lookup(playlist, playlistOrder[num - 1], &toneCount, &node);
 8001328:	4b15      	ldr	r3, [pc, #84]	; (8001380 <set_music+0x60>)
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <set_music+0x64>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001336:	3b01      	subs	r3, #1
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	6819      	ldr	r1, [r3, #0]
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	f107 020c 	add.w	r2, r7, #12
 8001346:	f7ff fa1a 	bl	800077e <lookup>
 800134a:	4603      	mov	r3, r0
 800134c:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <set_music+0x68>)
 800134e:	6013      	str	r3, [r2, #0]
	Change_Melody(melody, toneCount);
 8001350:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <set_music+0x68>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f000 ffc9 	bl	80022f0 <Change_Melody>
	currentMusic = num;
 800135e:	4a0b      	ldr	r2, [pc, #44]	; (800138c <set_music+0x6c>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6013      	str	r3, [r2, #0]
	unsetBlacklisted(node);
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fa60 	bl	800082c <unsetBlacklisted>
	extract_int_to_carrier(currentMusic);
 800136c:	4b07      	ldr	r3, [pc, #28]	; (800138c <set_music+0x6c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fe7f 	bl	8001074 <extract_int_to_carrier>
}
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200000e0 	.word	0x200000e0
 8001384:	200000e4 	.word	0x200000e4
 8001388:	20000608 	.word	0x20000608
 800138c:	20000600 	.word	0x20000600

08001390 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b096      	sub	sp, #88	; 0x58
 8001394:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	struct digit _digits[10];
	_digits[0].number = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
	_digits[0].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
 800139a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800139e:	817b      	strh	r3, [r7, #10]
			| GPIO_PIN_15;

	_digits[1].number = 1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
	_digits[1].pattern = GPIO_PIN_12;
 80013a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a8:	823b      	strh	r3, [r7, #16]
	_digits[1].anti_pattern = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80013aa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013ae:	827b      	strh	r3, [r7, #18]

	_digits[2].number = 2;
 80013b0:	2302      	movs	r3, #2
 80013b2:	617b      	str	r3, [r7, #20]
	_digits[2].pattern = GPIO_PIN_13;
 80013b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b8:	833b      	strh	r3, [r7, #24]
	_digits[2].anti_pattern = GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15;
 80013ba:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80013be:	837b      	strh	r3, [r7, #26]

	_digits[3].number = 3;
 80013c0:	2303      	movs	r3, #3
 80013c2:	61fb      	str	r3, [r7, #28]
	_digits[3].pattern = GPIO_PIN_12 | GPIO_PIN_13;
 80013c4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80013c8:	843b      	strh	r3, [r7, #32]
	_digits[3].anti_pattern = GPIO_PIN_14 | GPIO_PIN_15;
 80013ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80013ce:	847b      	strh	r3, [r7, #34]	; 0x22

	_digits[4].number = 4;
 80013d0:	2304      	movs	r3, #4
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
	_digits[4].pattern = GPIO_PIN_14;
 80013d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013d8:	853b      	strh	r3, [r7, #40]	; 0x28
	_digits[4].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15;
 80013da:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80013de:	857b      	strh	r3, [r7, #42]	; 0x2a

	_digits[5].number = 5;
 80013e0:	2305      	movs	r3, #5
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	_digits[5].pattern = GPIO_PIN_12 | GPIO_PIN_14;
 80013e4:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80013e8:	863b      	strh	r3, [r7, #48]	; 0x30
	_digits[5].anti_pattern = GPIO_PIN_13 | GPIO_PIN_15;
 80013ea:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80013ee:	867b      	strh	r3, [r7, #50]	; 0x32

	_digits[6].number = 6;
 80013f0:	2306      	movs	r3, #6
 80013f2:	637b      	str	r3, [r7, #52]	; 0x34
	_digits[6].pattern = GPIO_PIN_13 | GPIO_PIN_14;
 80013f4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80013f8:	873b      	strh	r3, [r7, #56]	; 0x38
	_digits[6].anti_pattern = GPIO_PIN_12 | GPIO_PIN_15;
 80013fa:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80013fe:	877b      	strh	r3, [r7, #58]	; 0x3a

	_digits[7].number = 7;
 8001400:	2307      	movs	r3, #7
 8001402:	63fb      	str	r3, [r7, #60]	; 0x3c
	_digits[7].pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 8001404:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001408:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	_digits[7].anti_pattern = GPIO_PIN_15;
 800140c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001410:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	_digits[8].number = 8;
 8001414:	2308      	movs	r3, #8
 8001416:	647b      	str	r3, [r7, #68]	; 0x44
	_digits[8].pattern = GPIO_PIN_15;
 8001418:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800141c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	_digits[8].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 8001420:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001424:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	_digits[9].number = 9;
 8001428:	2309      	movs	r3, #9
 800142a:	64fb      	str	r3, [r7, #76]	; 0x4c
	_digits[9].pattern = GPIO_PIN_12 | GPIO_PIN_15;
 800142c:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001430:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	_digits[9].anti_pattern = GPIO_PIN_13 | GPIO_PIN_14;
 8001434:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001438:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

//initialize Global digits structure
	for (int i = 0; i < 10; i++) {
 800143c:	2300      	movs	r3, #0
 800143e:	657b      	str	r3, [r7, #84]	; 0x54
 8001440:	e00f      	b.n	8001462 <main+0xd2>
		digits[i] = _digits[i];
 8001442:	4922      	ldr	r1, [pc, #136]	; (80014cc <main+0x13c>)
 8001444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001446:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001448:	00d2      	lsls	r2, r2, #3
 800144a:	3258      	adds	r2, #88	; 0x58
 800144c:	443a      	add	r2, r7
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	440b      	add	r3, r1
 8001452:	3a54      	subs	r2, #84	; 0x54
 8001454:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001458:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 0; i < 10; i++) {
 800145c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800145e:	3301      	adds	r3, #1
 8001460:	657b      	str	r3, [r7, #84]	; 0x54
 8001462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001464:	2b09      	cmp	r3, #9
 8001466:	ddec      	ble.n	8001442 <main+0xb2>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001468:	f001 f93c 	bl	80026e4 <HAL_Init>

	/* USER CODE BEGIN Init */

//Set 7-segment PINS
	led[0] = GPIO_PIN_1;
 800146c:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <main+0x140>)
 800146e:	2202      	movs	r2, #2
 8001470:	801a      	strh	r2, [r3, #0]
	led[1] = GPIO_PIN_2;
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <main+0x140>)
 8001474:	2204      	movs	r2, #4
 8001476:	805a      	strh	r2, [r3, #2]
	led[2] = GPIO_PIN_3;
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <main+0x140>)
 800147a:	2208      	movs	r2, #8
 800147c:	809a      	strh	r2, [r3, #4]
	led[3] = GPIO_PIN_4;
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <main+0x140>)
 8001480:	2210      	movs	r2, #16
 8001482:	80da      	strh	r2, [r3, #6]

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001484:	f000 f82e 	bl	80014e4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001488:	f000 fa9e 	bl	80019c8 <MX_GPIO_Init>
	MX_I2C1_Init();
 800148c:	f000 f902 	bl	8001694 <MX_I2C1_Init>
	MX_SPI1_Init();
 8001490:	f000 f940 	bl	8001714 <MX_SPI1_Init>
	MX_USB_PCD_Init();
 8001494:	f000 fa76 	bl	8001984 <MX_USB_PCD_Init>
	MX_TIM1_Init();
 8001498:	f000 f97a 	bl	8001790 <MX_TIM1_Init>
	MX_TIM2_Init();
 800149c:	f000 f9cc 	bl	8001838 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 80014a0:	f000 fa40 	bl	8001924 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 80014a4:	f000 f886 	bl	80015b4 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 80014a8:	480a      	ldr	r0, [pc, #40]	; (80014d4 <main+0x144>)
 80014aa:	f004 ffd3 	bl	8006454 <HAL_TIM_Base_Start_IT>
	HAL_UART_Transmit_IT(&huart1,
 80014ae:	222c      	movs	r2, #44	; 0x2c
 80014b0:	4909      	ldr	r1, [pc, #36]	; (80014d8 <main+0x148>)
 80014b2:	480a      	ldr	r0, [pc, #40]	; (80014dc <main+0x14c>)
 80014b4:	f006 f9d2 	bl	800785c <HAL_UART_Transmit_IT>
			"=============\nProgram Running\n=============\n", 44);
	HAL_UART_Receive_IT(&huart1, &d, 1);
 80014b8:	2201      	movs	r2, #1
 80014ba:	4909      	ldr	r1, [pc, #36]	; (80014e0 <main+0x150>)
 80014bc:	4807      	ldr	r0, [pc, #28]	; (80014dc <main+0x14c>)
 80014be:	f006 fa2b 	bl	8007918 <HAL_UART_Receive_IT>
	initTonesDictionary();
 80014c2:	f7ff f9db 	bl	800087c <initTonesDictionary>
	PWM_Start();
 80014c6:	f000 fe4f 	bl	8002168 <PWM_Start>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80014ca:	e7fe      	b.n	80014ca <main+0x13a>
 80014cc:	20000640 	.word	0x20000640
 80014d0:	2000060c 	.word	0x2000060c
 80014d4:	200001f0 	.word	0x200001f0
 80014d8:	0800d548 	.word	0x0800d548
 80014dc:	20000288 	.word	0x20000288
 80014e0:	200006f8 	.word	0x200006f8

080014e4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b09e      	sub	sp, #120	; 0x78
 80014e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80014ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014ee:	2228      	movs	r2, #40	; 0x28
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f007 fd22 	bl	8008f3c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80014f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001508:	463b      	mov	r3, r7
 800150a:	223c      	movs	r2, #60	; 0x3c
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f007 fd14 	bl	8008f3c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8001514:	2303      	movs	r3, #3
 8001516:	653b      	str	r3, [r7, #80]	; 0x50
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001518:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800151c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800151e:	2300      	movs	r3, #0
 8001520:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001522:	2301      	movs	r3, #1
 8001524:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001526:	2310      	movs	r3, #16
 8001528:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152a:	2302      	movs	r3, #2
 800152c:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800152e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001532:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001534:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001538:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800153a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800153e:	4618      	mov	r0, r3
 8001540:	f003 fa62 	bl	8004a08 <HAL_RCC_OscConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0x6a>
		Error_Handler();
 800154a:	f000 fc19 	bl	8001d80 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800154e:	230f      	movs	r3, #15
 8001550:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001552:	2302      	movs	r3, #2
 8001554:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800155a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800155e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001564:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001568:	2101      	movs	r1, #1
 800156a:	4618      	mov	r0, r3
 800156c:	f004 fa8a 	bl	8005a84 <HAL_RCC_ClockConfig>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <SystemClock_Config+0x96>
		Error_Handler();
 8001576:	f000 fc03 	bl	8001d80 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <SystemClock_Config+0xcc>)
 800157c:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_TIM1
			| RCC_PERIPHCLK_ADC12;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001582:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800158c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001590:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001592:	2300      	movs	r3, #0
 8001594:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001596:	463b      	mov	r3, r7
 8001598:	4618      	mov	r0, r3
 800159a:	f004 fca9 	bl	8005ef0 <HAL_RCCEx_PeriphCLKConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SystemClock_Config+0xc4>
		Error_Handler();
 80015a4:	f000 fbec 	bl	8001d80 <Error_Handler>
	}
}
 80015a8:	bf00      	nop
 80015aa:	3778      	adds	r7, #120	; 0x78
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	000210a1 	.word	0x000210a1

080015b4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 80015ba:	f107 031c 	add.w	r3, r7, #28
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
 80015d4:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80015d6:	4b2e      	ldr	r3, [pc, #184]	; (8001690 <MX_ADC1_Init+0xdc>)
 80015d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80015dc:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015de:	4b2c      	ldr	r3, [pc, #176]	; (8001690 <MX_ADC1_Init+0xdc>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015e4:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <MX_ADC1_Init+0xdc>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015ea:	4b29      	ldr	r3, [pc, #164]	; (8001690 <MX_ADC1_Init+0xdc>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80015f0:	4b27      	ldr	r3, [pc, #156]	; (8001690 <MX_ADC1_Init+0xdc>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	765a      	strb	r2, [r3, #25]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015f6:	4b26      	ldr	r3, [pc, #152]	; (8001690 <MX_ADC1_Init+0xdc>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015fe:	4b24      	ldr	r3, [pc, #144]	; (8001690 <MX_ADC1_Init+0xdc>)
 8001600:	2200      	movs	r2, #0
 8001602:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001604:	4b22      	ldr	r3, [pc, #136]	; (8001690 <MX_ADC1_Init+0xdc>)
 8001606:	2201      	movs	r2, #1
 8001608:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800160a:	4b21      	ldr	r3, [pc, #132]	; (8001690 <MX_ADC1_Init+0xdc>)
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001610:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <MX_ADC1_Init+0xdc>)
 8001612:	2201      	movs	r2, #1
 8001614:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001616:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <MX_ADC1_Init+0xdc>)
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800161e:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <MX_ADC1_Init+0xdc>)
 8001620:	2204      	movs	r2, #4
 8001622:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001624:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <MX_ADC1_Init+0xdc>)
 8001626:	2200      	movs	r2, #0
 8001628:	761a      	strb	r2, [r3, #24]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800162a:	4b19      	ldr	r3, [pc, #100]	; (8001690 <MX_ADC1_Init+0xdc>)
 800162c:	2200      	movs	r2, #0
 800162e:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001630:	4817      	ldr	r0, [pc, #92]	; (8001690 <MX_ADC1_Init+0xdc>)
 8001632:	f001 f8d1 	bl	80027d8 <HAL_ADC_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_ADC1_Init+0x8c>
		Error_Handler();
 800163c:	f000 fba0 	bl	8001d80 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	4811      	ldr	r0, [pc, #68]	; (8001690 <MX_ADC1_Init+0xdc>)
 800164c:	f002 fa28 	bl	8003aa0 <HAL_ADCEx_MultiModeConfigChannel>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_ADC1_Init+0xa6>
		Error_Handler();
 8001656:	f000 fb93 	bl	8001d80 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 800165a:	2305      	movs	r3, #5
 800165c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800165e:	2301      	movs	r3, #1
 8001660:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8001666:	2307      	movs	r3, #7
 8001668:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	4619      	mov	r1, r3
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <MX_ADC1_Init+0xdc>)
 8001678:	f001 ff26 	bl	80034c8 <HAL_ADC_ConfigChannel>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_ADC1_Init+0xd2>
		Error_Handler();
 8001682:	f000 fb7d 	bl	8001d80 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	3728      	adds	r7, #40	; 0x28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200000e8 	.word	0x200000e8

08001694 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <MX_I2C1_Init+0x74>)
 800169a:	4a1c      	ldr	r2, [pc, #112]	; (800170c <MX_I2C1_Init+0x78>)
 800169c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 800169e:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <MX_I2C1_Init+0x74>)
 80016a0:	4a1b      	ldr	r2, [pc, #108]	; (8001710 <MX_I2C1_Init+0x7c>)
 80016a2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80016a4:	4b18      	ldr	r3, [pc, #96]	; (8001708 <MX_I2C1_Init+0x74>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <MX_I2C1_Init+0x74>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <MX_I2C1_Init+0x74>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80016b6:	4b14      	ldr	r3, [pc, #80]	; (8001708 <MX_I2C1_Init+0x74>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <MX_I2C1_Init+0x74>)
 80016be:	2200      	movs	r2, #0
 80016c0:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_I2C1_Init+0x74>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <MX_I2C1_Init+0x74>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80016ce:	480e      	ldr	r0, [pc, #56]	; (8001708 <MX_I2C1_Init+0x74>)
 80016d0:	f002 ffa2 	bl	8004618 <HAL_I2C_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_I2C1_Init+0x4a>
		Error_Handler();
 80016da:	f000 fb51 	bl	8001d80 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80016de:	2100      	movs	r1, #0
 80016e0:	4809      	ldr	r0, [pc, #36]	; (8001708 <MX_I2C1_Init+0x74>)
 80016e2:	f003 f828 	bl	8004736 <HAL_I2CEx_ConfigAnalogFilter>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80016ec:	f000 fb48 	bl	8001d80 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80016f0:	2100      	movs	r1, #0
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_I2C1_Init+0x74>)
 80016f4:	f003 f86a 	bl	80047cc <HAL_I2CEx_ConfigDigitalFilter>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_I2C1_Init+0x6e>
		Error_Handler();
 80016fe:	f000 fb3f 	bl	8001d80 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000138 	.word	0x20000138
 800170c:	40005400 	.word	0x40005400
 8001710:	2000090e 	.word	0x2000090e

08001714 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <MX_SPI1_Init+0x74>)
 800171a:	4a1c      	ldr	r2, [pc, #112]	; (800178c <MX_SPI1_Init+0x78>)
 800171c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800171e:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <MX_SPI1_Init+0x74>)
 8001720:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001724:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001726:	4b18      	ldr	r3, [pc, #96]	; (8001788 <MX_SPI1_Init+0x74>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800172c:	4b16      	ldr	r3, [pc, #88]	; (8001788 <MX_SPI1_Init+0x74>)
 800172e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001732:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001734:	4b14      	ldr	r3, [pc, #80]	; (8001788 <MX_SPI1_Init+0x74>)
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800173a:	4b13      	ldr	r3, [pc, #76]	; (8001788 <MX_SPI1_Init+0x74>)
 800173c:	2200      	movs	r2, #0
 800173e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <MX_SPI1_Init+0x74>)
 8001742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001746:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <MX_SPI1_Init+0x74>)
 800174a:	2208      	movs	r2, #8
 800174c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800174e:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <MX_SPI1_Init+0x74>)
 8001750:	2200      	movs	r2, #0
 8001752:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <MX_SPI1_Init+0x74>)
 8001756:	2200      	movs	r2, #0
 8001758:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <MX_SPI1_Init+0x74>)
 800175c:	2200      	movs	r2, #0
 800175e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001760:	4b09      	ldr	r3, [pc, #36]	; (8001788 <MX_SPI1_Init+0x74>)
 8001762:	2207      	movs	r2, #7
 8001764:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001766:	4b08      	ldr	r3, [pc, #32]	; (8001788 <MX_SPI1_Init+0x74>)
 8001768:	2200      	movs	r2, #0
 800176a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <MX_SPI1_Init+0x74>)
 800176e:	2208      	movs	r2, #8
 8001770:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001772:	4805      	ldr	r0, [pc, #20]	; (8001788 <MX_SPI1_Init+0x74>)
 8001774:	f004 fd6c 	bl	8006250 <HAL_SPI_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_SPI1_Init+0x6e>
		Error_Handler();
 800177e:	f000 faff 	bl	8001d80 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000018c 	.word	0x2000018c
 800178c:	40013000 	.word	0x40013000

08001790 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001796:	f107 0310 	add.w	r3, r7, #16
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <MX_TIM1_Init+0xa0>)
 80017b0:	4a20      	ldr	r2, [pc, #128]	; (8001834 <MX_TIM1_Init+0xa4>)
 80017b2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 4800 - 1;
 80017b4:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <MX_TIM1_Init+0xa0>)
 80017b6:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80017ba:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017bc:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <MX_TIM1_Init+0xa0>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 5 - 1;
 80017c2:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <MX_TIM1_Init+0xa0>)
 80017c4:	2204      	movs	r2, #4
 80017c6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c8:	4b19      	ldr	r3, [pc, #100]	; (8001830 <MX_TIM1_Init+0xa0>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80017ce:	4b18      	ldr	r3, [pc, #96]	; (8001830 <MX_TIM1_Init+0xa0>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d4:	4b16      	ldr	r3, [pc, #88]	; (8001830 <MX_TIM1_Init+0xa0>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80017da:	4815      	ldr	r0, [pc, #84]	; (8001830 <MX_TIM1_Init+0xa0>)
 80017dc:	f004 fde3 	bl	80063a6 <HAL_TIM_Base_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM1_Init+0x5a>
		Error_Handler();
 80017e6:	f000 facb 	bl	8001d80 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ee:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	4619      	mov	r1, r3
 80017f6:	480e      	ldr	r0, [pc, #56]	; (8001830 <MX_TIM1_Init+0xa0>)
 80017f8:	f005 fa2c 	bl	8006c54 <HAL_TIM_ConfigClockSource>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM1_Init+0x76>
		Error_Handler();
 8001802:	f000 fabd 	bl	8001d80 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	4619      	mov	r1, r3
 8001816:	4806      	ldr	r0, [pc, #24]	; (8001830 <MX_TIM1_Init+0xa0>)
 8001818:	f005 ff34 	bl	8007684 <HAL_TIMEx_MasterConfigSynchronization>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8001822:	f000 faad 	bl	8001d80 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	3720      	adds	r7, #32
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200001f0 	.word	0x200001f0
 8001834:	40012c00 	.word	0x40012c00

08001838 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b08e      	sub	sp, #56	; 0x38
 800183c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800183e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800184c:	f107 031c 	add.w	r3, r7, #28
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001858:	463b      	mov	r3, r7
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
 8001864:	611a      	str	r2, [r3, #16]
 8001866:	615a      	str	r2, [r3, #20]
 8001868:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800186a:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <MX_TIM2_Init+0xe8>)
 800186c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001870:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001872:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <MX_TIM2_Init+0xe8>)
 8001874:	2200      	movs	r2, #0
 8001876:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001878:	4b29      	ldr	r3, [pc, #164]	; (8001920 <MX_TIM2_Init+0xe8>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <MX_TIM2_Init+0xe8>)
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <MX_TIM2_Init+0xe8>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <MX_TIM2_Init+0xe8>)
 800188e:	2200      	movs	r2, #0
 8001890:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001892:	4823      	ldr	r0, [pc, #140]	; (8001920 <MX_TIM2_Init+0xe8>)
 8001894:	f004 fd87 	bl	80063a6 <HAL_TIM_Base_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM2_Init+0x6a>
		Error_Handler();
 800189e:	f000 fa6f 	bl	8001d80 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80018a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ac:	4619      	mov	r1, r3
 80018ae:	481c      	ldr	r0, [pc, #112]	; (8001920 <MX_TIM2_Init+0xe8>)
 80018b0:	f005 f9d0 	bl	8006c54 <HAL_TIM_ConfigClockSource>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM2_Init+0x86>
		Error_Handler();
 80018ba:	f000 fa61 	bl	8001d80 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80018be:	4818      	ldr	r0, [pc, #96]	; (8001920 <MX_TIM2_Init+0xe8>)
 80018c0:	f004 fe32 	bl	8006528 <HAL_TIM_PWM_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM2_Init+0x96>
		Error_Handler();
 80018ca:	f000 fa59 	bl	8001d80 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80018d6:	f107 031c 	add.w	r3, r7, #28
 80018da:	4619      	mov	r1, r3
 80018dc:	4810      	ldr	r0, [pc, #64]	; (8001920 <MX_TIM2_Init+0xe8>)
 80018de:	f005 fed1 	bl	8007684 <HAL_TIMEx_MasterConfigSynchronization>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 80018e8:	f000 fa4a 	bl	8001d80 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ec:	2360      	movs	r3, #96	; 0x60
 80018ee:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80018fc:	463b      	mov	r3, r7
 80018fe:	2200      	movs	r2, #0
 8001900:	4619      	mov	r1, r3
 8001902:	4807      	ldr	r0, [pc, #28]	; (8001920 <MX_TIM2_Init+0xe8>)
 8001904:	f005 f892 	bl	8006a2c <HAL_TIM_PWM_ConfigChannel>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 800190e:	f000 fa37 	bl	8001d80 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001912:	4803      	ldr	r0, [pc, #12]	; (8001920 <MX_TIM2_Init+0xe8>)
 8001914:	f000 fb62 	bl	8001fdc <HAL_TIM_MspPostInit>

}
 8001918:	bf00      	nop
 800191a:	3738      	adds	r7, #56	; 0x38
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	2000023c 	.word	0x2000023c

08001924 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001928:	4b14      	ldr	r3, [pc, #80]	; (800197c <MX_USART1_UART_Init+0x58>)
 800192a:	4a15      	ldr	r2, [pc, #84]	; (8001980 <MX_USART1_UART_Init+0x5c>)
 800192c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800192e:	4b13      	ldr	r3, [pc, #76]	; (800197c <MX_USART1_UART_Init+0x58>)
 8001930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001934:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <MX_USART1_UART_Init+0x58>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <MX_USART1_UART_Init+0x58>)
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <MX_USART1_UART_Init+0x58>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <MX_USART1_UART_Init+0x58>)
 800194a:	220c      	movs	r2, #12
 800194c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <MX_USART1_UART_Init+0x58>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <MX_USART1_UART_Init+0x58>)
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800195a:	4b08      	ldr	r3, [pc, #32]	; (800197c <MX_USART1_UART_Init+0x58>)
 800195c:	2200      	movs	r2, #0
 800195e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <MX_USART1_UART_Init+0x58>)
 8001962:	2200      	movs	r2, #0
 8001964:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001966:	4805      	ldr	r0, [pc, #20]	; (800197c <MX_USART1_UART_Init+0x58>)
 8001968:	f005 ff2a 	bl	80077c0 <HAL_UART_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8001972:	f000 fa05 	bl	8001d80 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000288 	.word	0x20000288
 8001980:	40013800 	.word	0x40013800

08001984 <MX_USB_PCD_Init>:
/**
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void) {
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 8001988:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <MX_USB_PCD_Init+0x3c>)
 800198a:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <MX_USB_PCD_Init+0x40>)
 800198c:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <MX_USB_PCD_Init+0x3c>)
 8001990:	2208      	movs	r2, #8
 8001992:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <MX_USB_PCD_Init+0x3c>)
 8001996:	2202      	movs	r2, #2
 8001998:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <MX_USB_PCD_Init+0x3c>)
 800199c:	2202      	movs	r2, #2
 800199e:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80019a0:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <MX_USB_PCD_Init+0x3c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <MX_USB_PCD_Init+0x3c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK) {
 80019ac:	4804      	ldr	r0, [pc, #16]	; (80019c0 <MX_USB_PCD_Init+0x3c>)
 80019ae:	f002 ff59 	bl	8004864 <HAL_PCD_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_USB_PCD_Init+0x38>
		Error_Handler();
 80019b8:	f000 f9e2 	bl	8001d80 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000310 	.word	0x20000310
 80019c4:	40005c00 	.word	0x40005c00

080019c8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08c      	sub	sp, #48	; 0x30
 80019cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80019de:	4b62      	ldr	r3, [pc, #392]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	4a61      	ldr	r2, [pc, #388]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 80019e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019e8:	6153      	str	r3, [r2, #20]
 80019ea:	4b5f      	ldr	r3, [pc, #380]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f2:	61bb      	str	r3, [r7, #24]
 80019f4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80019f6:	4b5c      	ldr	r3, [pc, #368]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	4a5b      	ldr	r2, [pc, #364]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 80019fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a00:	6153      	str	r3, [r2, #20]
 8001a02:	4b59      	ldr	r3, [pc, #356]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001a0e:	4b56      	ldr	r3, [pc, #344]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	4a55      	ldr	r2, [pc, #340]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a18:	6153      	str	r3, [r2, #20]
 8001a1a:	4b53      	ldr	r3, [pc, #332]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	4b50      	ldr	r3, [pc, #320]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	4a4f      	ldr	r2, [pc, #316]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a30:	6153      	str	r3, [r2, #20]
 8001a32:	4b4d      	ldr	r3, [pc, #308]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001a3e:	4b4a      	ldr	r3, [pc, #296]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	4a49      	ldr	r2, [pc, #292]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a48:	6153      	str	r3, [r2, #20]
 8001a4a:	4b47      	ldr	r3, [pc, #284]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a56:	4b44      	ldr	r3, [pc, #272]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	4a43      	ldr	r2, [pc, #268]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a60:	6153      	str	r3, [r2, #20]
 8001a62:	4b41      	ldr	r3, [pc, #260]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2108      	movs	r1, #8
 8001a72:	483e      	ldr	r0, [pc, #248]	; (8001b6c <MX_GPIO_Init+0x1a4>)
 8001a74:	f002 fda0 	bl	80045b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f24f 011e 	movw	r1, #61470	; 0xf01e
 8001a7e:	483c      	ldr	r0, [pc, #240]	; (8001b70 <MX_GPIO_Init+0x1a8>)
 8001a80:	f002 fd9a 	bl	80045b8 <HAL_GPIO_WritePin>
			GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_1
					| GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001a84:	2308      	movs	r3, #8
 8001a86:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4834      	ldr	r0, [pc, #208]	; (8001b6c <MX_GPIO_Init+0x1a4>)
 8001a9c:	f002 fbfa 	bl	8004294 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT4_Pin */
	GPIO_InitStruct.Pin = MEMS_INT4_Pin;
 8001aa0:	2320      	movs	r3, #32
 8001aa2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001aa4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001aa8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT4_GPIO_Port, &GPIO_InitStruct);
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	482d      	ldr	r0, [pc, #180]	; (8001b6c <MX_GPIO_Init+0x1a4>)
 8001ab6:	f002 fbed 	bl	8004294 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aba:	2301      	movs	r3, #1
 8001abc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001abe:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001ac2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac8:	f107 031c 	add.w	r3, r7, #28
 8001acc:	4619      	mov	r1, r3
 8001ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad2:	f002 fbdf 	bl	8004294 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA2 PA3 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4;
 8001ad6:	231e      	movs	r3, #30
 8001ad8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ada:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001ade:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aee:	f002 fbd1 	bl	8004294 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15
	 PD1 PD2 PD3 PD4 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15
 8001af2:	f24f 031e 	movw	r3, #61470	; 0xf01e
 8001af6:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af8:	2301      	movs	r3, #1
 8001afa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4819      	ldr	r0, [pc, #100]	; (8001b70 <MX_GPIO_Init+0x1a8>)
 8001b0c:	f002 fbc2 	bl	8004294 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2100      	movs	r1, #0
 8001b14:	2006      	movs	r0, #6
 8001b16:	f002 fb10 	bl	800413a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b1a:	2006      	movs	r0, #6
 8001b1c:	f002 fb29 	bl	8004172 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2100      	movs	r1, #0
 8001b24:	2007      	movs	r0, #7
 8001b26:	f002 fb08 	bl	800413a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001b2a:	2007      	movs	r0, #7
 8001b2c:	f002 fb21 	bl	8004172 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8001b30:	2200      	movs	r2, #0
 8001b32:	2100      	movs	r1, #0
 8001b34:	2008      	movs	r0, #8
 8001b36:	f002 fb00 	bl	800413a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8001b3a:	2008      	movs	r0, #8
 8001b3c:	f002 fb19 	bl	8004172 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2100      	movs	r1, #0
 8001b44:	2009      	movs	r0, #9
 8001b46:	f002 faf8 	bl	800413a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001b4a:	2009      	movs	r0, #9
 8001b4c:	f002 fb11 	bl	8004172 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2100      	movs	r1, #0
 8001b54:	200a      	movs	r0, #10
 8001b56:	f002 faf0 	bl	800413a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001b5a:	200a      	movs	r0, #10
 8001b5c:	f002 fb09 	bl	8004172 <HAL_NVIC_EnableIRQ>

}
 8001b60:	bf00      	nop
 8001b62:	3730      	adds	r7, #48	; 0x30
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	48001000 	.word	0x48001000
 8001b70:	48000c00 	.word	0x48000c00

08001b74 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 8001b7e:	f000 fe0b 	bl	8002798 <HAL_GetTick>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4a58      	ldr	r2, [pc, #352]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x174>)
 8001b86:	6013      	str	r3, [r2, #0]
	if ((GPIO_Pin == GPIO_PIN_1) && LED != 4) {
 8001b88:	88fb      	ldrh	r3, [r7, #6]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d117      	bne.n	8001bbe <HAL_GPIO_EXTI_Callback+0x4a>
 8001b8e:	4b57      	ldr	r3, [pc, #348]	; (8001cec <HAL_GPIO_EXTI_Callback+0x178>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d013      	beq.n	8001bbe <HAL_GPIO_EXTI_Callback+0x4a>

		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 8001b96:	4b54      	ldr	r3, [pc, #336]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x174>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	4b55      	ldr	r3, [pc, #340]	; (8001cf0 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2bfa      	cmp	r3, #250	; 0xfa
 8001ba2:	f240 809c 	bls.w	8001cde <HAL_GPIO_EXTI_Callback+0x16a>
//			counterInside++;
			increase(LED);
 8001ba6:	4b51      	ldr	r3, [pc, #324]	; (8001cec <HAL_GPIO_EXTI_Callback+0x178>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fa10 	bl	8000fd0 <increase>
			next_music();
 8001bb0:	f7ff fb38 	bl	8001224 <next_music>
			previousMillis = currentMillis;
 8001bb4:	4b4c      	ldr	r3, [pc, #304]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x174>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a4d      	ldr	r2, [pc, #308]	; (8001cf0 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001bba:	6013      	str	r3, [r2, #0]
		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 8001bbc:	e08f      	b.n	8001cde <HAL_GPIO_EXTI_Callback+0x16a>
		}
	} else if ((GPIO_Pin == GPIO_PIN_2)) {
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d129      	bne.n	8001c18 <HAL_GPIO_EXTI_Callback+0xa4>
		if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)) {
 8001bc4:	2104      	movs	r1, #4
 8001bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bca:	f002 fcdd 	bl	8004588 <HAL_GPIO_ReadPin>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d115      	bne.n	8001c00 <HAL_GPIO_EXTI_Callback+0x8c>
			if ((currentMillis - previousMillis > DEBOUNCE_DELAY
 8001bd4:	4b44      	ldr	r3, [pc, #272]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x174>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b45      	ldr	r3, [pc, #276]	; (8001cf0 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2bfa      	cmp	r3, #250	; 0xfa
 8001be0:	d97d      	bls.n	8001cde <HAL_GPIO_EXTI_Callback+0x16a>
					&& adc_function != CHANGE_MUSIC)) {
 8001be2:	4b44      	ldr	r3, [pc, #272]	; (8001cf4 <HAL_GPIO_EXTI_Callback+0x180>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d079      	beq.n	8001cde <HAL_GPIO_EXTI_Callback+0x16a>
				// Rising edge of button 2
				adc_function = CHANGE_VOLUME;
 8001bea:	4b42      	ldr	r3, [pc, #264]	; (8001cf4 <HAL_GPIO_EXTI_Callback+0x180>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	701a      	strb	r2, [r3, #0]
				HAL_ADC_Start_IT(&hadc1);
 8001bf0:	4841      	ldr	r0, [pc, #260]	; (8001cf8 <HAL_GPIO_EXTI_Callback+0x184>)
 8001bf2:	f000 ffd1 	bl	8002b98 <HAL_ADC_Start_IT>
				previousMillis = currentMillis;
 8001bf6:	4b3c      	ldr	r3, [pc, #240]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x174>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a3d      	ldr	r2, [pc, #244]	; (8001cf0 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001bfc:	6013      	str	r3, [r2, #0]
		blink = 0;
		isCorrect = -1;
		prevEnterTime = HAL_GetTick();
//		PWM_Stop();
	}
}
 8001bfe:	e06e      	b.n	8001cde <HAL_GPIO_EXTI_Callback+0x16a>
			adc_function = NONE;
 8001c00:	4b3c      	ldr	r3, [pc, #240]	; (8001cf4 <HAL_GPIO_EXTI_Callback+0x180>)
 8001c02:	2202      	movs	r2, #2
 8001c04:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Stop_IT(&hadc1);
 8001c06:	483c      	ldr	r0, [pc, #240]	; (8001cf8 <HAL_GPIO_EXTI_Callback+0x184>)
 8001c08:	f001 f906 	bl	8002e18 <HAL_ADC_Stop_IT>
			extract_int_to_carrier(currentMusic);
 8001c0c:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <HAL_GPIO_EXTI_Callback+0x188>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fa2f 	bl	8001074 <extract_int_to_carrier>
}
 8001c16:	e062      	b.n	8001cde <HAL_GPIO_EXTI_Callback+0x16a>
	} else if ((GPIO_Pin == GPIO_PIN_3)) {
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d11e      	bne.n	8001c5c <HAL_GPIO_EXTI_Callback+0xe8>
		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 8001c1e:	4b32      	ldr	r3, [pc, #200]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x174>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	4b33      	ldr	r3, [pc, #204]	; (8001cf0 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2bfa      	cmp	r3, #250	; 0xfa
 8001c2a:	d958      	bls.n	8001cde <HAL_GPIO_EXTI_Callback+0x16a>
			if (programState == Paused || programState == IDLE)
 8001c2c:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <HAL_GPIO_EXTI_Callback+0x18c>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_EXTI_Callback+0xc8>
 8001c34:	4b32      	ldr	r3, [pc, #200]	; (8001d00 <HAL_GPIO_EXTI_Callback+0x18c>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d103      	bne.n	8001c44 <HAL_GPIO_EXTI_Callback+0xd0>
				programState = Resume;
 8001c3c:	4b30      	ldr	r3, [pc, #192]	; (8001d00 <HAL_GPIO_EXTI_Callback+0x18c>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	701a      	strb	r2, [r3, #0]
 8001c42:	e006      	b.n	8001c52 <HAL_GPIO_EXTI_Callback+0xde>
			else if (programState == Resume)
 8001c44:	4b2e      	ldr	r3, [pc, #184]	; (8001d00 <HAL_GPIO_EXTI_Callback+0x18c>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d102      	bne.n	8001c52 <HAL_GPIO_EXTI_Callback+0xde>
				programState = Paused;
 8001c4c:	4b2c      	ldr	r3, [pc, #176]	; (8001d00 <HAL_GPIO_EXTI_Callback+0x18c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
			previousMillis = currentMillis;
 8001c52:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x174>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a26      	ldr	r2, [pc, #152]	; (8001cf0 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001c58:	6013      	str	r3, [r2, #0]
}
 8001c5a:	e040      	b.n	8001cde <HAL_GPIO_EXTI_Callback+0x16a>
	} else if ((GPIO_Pin == GPIO_PIN_4)) {
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	2b10      	cmp	r3, #16
 8001c60:	d129      	bne.n	8001cb6 <HAL_GPIO_EXTI_Callback+0x142>
		if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)) {
 8001c62:	2110      	movs	r1, #16
 8001c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c68:	f002 fc8e 	bl	8004588 <HAL_GPIO_ReadPin>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d115      	bne.n	8001c9e <HAL_GPIO_EXTI_Callback+0x12a>
			if ((currentMillis - previousMillis > DEBOUNCE_DELAY
 8001c72:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x174>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2bfa      	cmp	r3, #250	; 0xfa
 8001c7e:	d92e      	bls.n	8001cde <HAL_GPIO_EXTI_Callback+0x16a>
					&& adc_function != CHANGE_VOLUME)) {
 8001c80:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <HAL_GPIO_EXTI_Callback+0x180>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d02a      	beq.n	8001cde <HAL_GPIO_EXTI_Callback+0x16a>
				adc_function = CHANGE_MUSIC;
 8001c88:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <HAL_GPIO_EXTI_Callback+0x180>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
				HAL_ADC_Start_IT(&hadc1);
 8001c8e:	481a      	ldr	r0, [pc, #104]	; (8001cf8 <HAL_GPIO_EXTI_Callback+0x184>)
 8001c90:	f000 ff82 	bl	8002b98 <HAL_ADC_Start_IT>
				previousMillis = currentMillis;
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x174>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a15      	ldr	r2, [pc, #84]	; (8001cf0 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001c9a:	6013      	str	r3, [r2, #0]
}
 8001c9c:	e01f      	b.n	8001cde <HAL_GPIO_EXTI_Callback+0x16a>
			adc_function = NONE;
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <HAL_GPIO_EXTI_Callback+0x180>)
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Stop_IT(&hadc1);
 8001ca4:	4814      	ldr	r0, [pc, #80]	; (8001cf8 <HAL_GPIO_EXTI_Callback+0x184>)
 8001ca6:	f001 f8b7 	bl	8002e18 <HAL_ADC_Stop_IT>
			set_music(adc_select);
 8001caa:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <HAL_GPIO_EXTI_Callback+0x190>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fb36 	bl	8001320 <set_music>
}
 8001cb4:	e013      	b.n	8001cde <HAL_GPIO_EXTI_Callback+0x16a>
	} else if (GPIO_Pin == GPIO_PIN_0 && isCorrect == 0) {
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d110      	bne.n	8001cde <HAL_GPIO_EXTI_Callback+0x16a>
 8001cbc:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <HAL_GPIO_EXTI_Callback+0x194>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10c      	bne.n	8001cde <HAL_GPIO_EXTI_Callback+0x16a>
		blink = 0;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <HAL_GPIO_EXTI_Callback+0x198>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
		isCorrect = -1;
 8001cca:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <HAL_GPIO_EXTI_Callback+0x194>)
 8001ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd0:	601a      	str	r2, [r3, #0]
		prevEnterTime = HAL_GetTick();
 8001cd2:	f000 fd61 	bl	8002798 <HAL_GetTick>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x19c>)
 8001cda:	6013      	str	r3, [r2, #0]
}
 8001cdc:	e7ff      	b.n	8001cde <HAL_GPIO_EXTI_Callback+0x16a>
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	2000062c 	.word	0x2000062c
 8001cec:	2000063c 	.word	0x2000063c
 8001cf0:	20000628 	.word	0x20000628
 8001cf4:	2000004b 	.word	0x2000004b
 8001cf8:	200000e8 	.word	0x200000e8
 8001cfc:	20000600 	.word	0x20000600
 8001d00:	2000000c 	.word	0x2000000c
 8001d04:	20000604 	.word	0x20000604
 8001d08:	20000004 	.word	0x20000004
 8001d0c:	20000008 	.word	0x20000008
 8001d10:	20000634 	.word	0x20000634

08001d14 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a13      	ldr	r2, [pc, #76]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d11f      	bne.n	8001d66 <HAL_TIM_PeriodElapsedCallback+0x52>
		if (index < musicNumberSize) {
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	da0a      	bge.n	8001d48 <HAL_TIM_PeriodElapsedCallback+0x34>
			display_number(index, carrier[index]);
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4910      	ldr	r1, [pc, #64]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001d3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d40:	4619      	mov	r1, r3
 8001d42:	4610      	mov	r0, r2
 8001d44:	f7ff f910 	bl	8000f68 <display_number>
		}
		if (index == 4) {
 8001d48:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d105      	bne.n	8001d5c <HAL_TIM_PeriodElapsedCallback+0x48>
			index = 0;
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
			init_display();
 8001d56:	f7ff f95b 	bl	8001010 <init_display>
		} else {
			++index;
		}

	}
}
 8001d5a:	e004      	b.n	8001d66 <HAL_TIM_PeriodElapsedCallback+0x52>
			++index;
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	3301      	adds	r3, #1
 8001d62:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001d64:	6013      	str	r3, [r2, #0]
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40012c00 	.word	0x40012c00
 8001d74:	20000630 	.word	0x20000630
 8001d78:	200007c8 	.word	0x200007c8
 8001d7c:	20000614 	.word	0x20000614

08001d80 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d84:	b672      	cpsid	i
}
 8001d86:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d88:	e7fe      	b.n	8001d88 <Error_Handler+0x8>
	...

08001d8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d92:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <HAL_MspInit+0x44>)
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	4a0e      	ldr	r2, [pc, #56]	; (8001dd0 <HAL_MspInit+0x44>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6193      	str	r3, [r2, #24]
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <HAL_MspInit+0x44>)
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	607b      	str	r3, [r7, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_MspInit+0x44>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	4a08      	ldr	r2, [pc, #32]	; (8001dd0 <HAL_MspInit+0x44>)
 8001db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db4:	61d3      	str	r3, [r2, #28]
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_MspInit+0x44>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001dc2:	2007      	movs	r0, #7
 8001dc4:	f002 f9ae 	bl	8004124 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40021000 	.word	0x40021000

08001dd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001df4:	d12b      	bne.n	8001e4e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001df6:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <HAL_ADC_MspInit+0x84>)
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <HAL_ADC_MspInit+0x84>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e00:	6153      	str	r3, [r2, #20]
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <HAL_ADC_MspInit+0x84>)
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e0e:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_ADC_MspInit+0x84>)
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	4a11      	ldr	r2, [pc, #68]	; (8001e58 <HAL_ADC_MspInit+0x84>)
 8001e14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e18:	6153      	str	r3, [r2, #20]
 8001e1a:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <HAL_ADC_MspInit+0x84>)
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e26:	2310      	movs	r3, #16
 8001e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	4619      	mov	r1, r3
 8001e38:	4808      	ldr	r0, [pc, #32]	; (8001e5c <HAL_ADC_MspInit+0x88>)
 8001e3a:	f002 fa2b 	bl	8004294 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	2012      	movs	r0, #18
 8001e44:	f002 f979 	bl	800413a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001e48:	2012      	movs	r0, #18
 8001e4a:	f002 f992 	bl	8004172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e4e:	bf00      	nop
 8001e50:	3728      	adds	r7, #40	; 0x28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	48001400 	.word	0x48001400

08001e60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08a      	sub	sp, #40	; 0x28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a17      	ldr	r2, [pc, #92]	; (8001edc <HAL_I2C_MspInit+0x7c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d127      	bne.n	8001ed2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e82:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <HAL_I2C_MspInit+0x80>)
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	4a16      	ldr	r2, [pc, #88]	; (8001ee0 <HAL_I2C_MspInit+0x80>)
 8001e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e8c:	6153      	str	r3, [r2, #20]
 8001e8e:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <HAL_I2C_MspInit+0x80>)
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001e9a:	23c0      	movs	r3, #192	; 0xc0
 8001e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e9e:	2312      	movs	r3, #18
 8001ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eaa:	2304      	movs	r3, #4
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480b      	ldr	r0, [pc, #44]	; (8001ee4 <HAL_I2C_MspInit+0x84>)
 8001eb6:	f002 f9ed 	bl	8004294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <HAL_I2C_MspInit+0x80>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	4a08      	ldr	r2, [pc, #32]	; (8001ee0 <HAL_I2C_MspInit+0x80>)
 8001ec0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ec4:	61d3      	str	r3, [r2, #28]
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_I2C_MspInit+0x80>)
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ed2:	bf00      	nop
 8001ed4:	3728      	adds	r7, #40	; 0x28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40005400 	.word	0x40005400
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	48000400 	.word	0x48000400

08001ee8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a17      	ldr	r2, [pc, #92]	; (8001f64 <HAL_SPI_MspInit+0x7c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d128      	bne.n	8001f5c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f0a:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <HAL_SPI_MspInit+0x80>)
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	4a16      	ldr	r2, [pc, #88]	; (8001f68 <HAL_SPI_MspInit+0x80>)
 8001f10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f14:	6193      	str	r3, [r2, #24]
 8001f16:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <HAL_SPI_MspInit+0x80>)
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <HAL_SPI_MspInit+0x80>)
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	4a10      	ldr	r2, [pc, #64]	; (8001f68 <HAL_SPI_MspInit+0x80>)
 8001f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f2c:	6153      	str	r3, [r2, #20]
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <HAL_SPI_MspInit+0x80>)
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001f3a:	23e0      	movs	r3, #224	; 0xe0
 8001f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f46:	2303      	movs	r3, #3
 8001f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f4a:	2305      	movs	r3, #5
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	4619      	mov	r1, r3
 8001f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f58:	f002 f99c 	bl	8004294 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f5c:	bf00      	nop
 8001f5e:	3728      	adds	r7, #40	; 0x28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40013000 	.word	0x40013000
 8001f68:	40021000 	.word	0x40021000

08001f6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a16      	ldr	r2, [pc, #88]	; (8001fd4 <HAL_TIM_Base_MspInit+0x68>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d114      	bne.n	8001fa8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f7e:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <HAL_TIM_Base_MspInit+0x6c>)
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	4a15      	ldr	r2, [pc, #84]	; (8001fd8 <HAL_TIM_Base_MspInit+0x6c>)
 8001f84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f88:	6193      	str	r3, [r2, #24]
 8001f8a:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <HAL_TIM_Base_MspInit+0x6c>)
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2100      	movs	r1, #0
 8001f9a:	2019      	movs	r0, #25
 8001f9c:	f002 f8cd 	bl	800413a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001fa0:	2019      	movs	r0, #25
 8001fa2:	f002 f8e6 	bl	8004172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001fa6:	e010      	b.n	8001fca <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb0:	d10b      	bne.n	8001fca <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_TIM_Base_MspInit+0x6c>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	4a08      	ldr	r2, [pc, #32]	; (8001fd8 <HAL_TIM_Base_MspInit+0x6c>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	61d3      	str	r3, [r2, #28]
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_TIM_Base_MspInit+0x6c>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
}
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40012c00 	.word	0x40012c00
 8001fd8:	40021000 	.word	0x40021000

08001fdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 030c 	add.w	r3, r7, #12
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ffc:	d11d      	bne.n	800203a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <HAL_TIM_MspPostInit+0x68>)
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	4a10      	ldr	r2, [pc, #64]	; (8002044 <HAL_TIM_MspPostInit+0x68>)
 8002004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002008:	6153      	str	r3, [r2, #20]
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <HAL_TIM_MspPostInit+0x68>)
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800201a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002028:	2301      	movs	r3, #1
 800202a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202c:	f107 030c 	add.w	r3, r7, #12
 8002030:	4619      	mov	r1, r3
 8002032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002036:	f002 f92d 	bl	8004294 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800203a:	bf00      	nop
 800203c:	3720      	adds	r7, #32
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000

08002048 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	; 0x28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a1b      	ldr	r2, [pc, #108]	; (80020d4 <HAL_UART_MspInit+0x8c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d12f      	bne.n	80020ca <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800206a:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <HAL_UART_MspInit+0x90>)
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	4a1a      	ldr	r2, [pc, #104]	; (80020d8 <HAL_UART_MspInit+0x90>)
 8002070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002074:	6193      	str	r3, [r2, #24]
 8002076:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <HAL_UART_MspInit+0x90>)
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <HAL_UART_MspInit+0x90>)
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <HAL_UART_MspInit+0x90>)
 8002088:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800208c:	6153      	str	r3, [r2, #20]
 800208e:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <HAL_UART_MspInit+0x90>)
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800209a:	2330      	movs	r3, #48	; 0x30
 800209c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020a6:	2303      	movs	r3, #3
 80020a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020aa:	2307      	movs	r3, #7
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ae:	f107 0314 	add.w	r3, r7, #20
 80020b2:	4619      	mov	r1, r3
 80020b4:	4809      	ldr	r0, [pc, #36]	; (80020dc <HAL_UART_MspInit+0x94>)
 80020b6:	f002 f8ed 	bl	8004294 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	2025      	movs	r0, #37	; 0x25
 80020c0:	f002 f83b 	bl	800413a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020c4:	2025      	movs	r0, #37	; 0x25
 80020c6:	f002 f854 	bl	8004172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80020ca:	bf00      	nop
 80020cc:	3728      	adds	r7, #40	; 0x28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40013800 	.word	0x40013800
 80020d8:	40021000 	.word	0x40021000
 80020dc:	48000800 	.word	0x48000800

080020e0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	; 0x28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a18      	ldr	r2, [pc, #96]	; (8002160 <HAL_PCD_MspInit+0x80>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d129      	bne.n	8002156 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002102:	4b18      	ldr	r3, [pc, #96]	; (8002164 <HAL_PCD_MspInit+0x84>)
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	4a17      	ldr	r2, [pc, #92]	; (8002164 <HAL_PCD_MspInit+0x84>)
 8002108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800210c:	6153      	str	r3, [r2, #20]
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <HAL_PCD_MspInit+0x84>)
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800211a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800211e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002128:	2303      	movs	r3, #3
 800212a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800212c:	230e      	movs	r3, #14
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	4619      	mov	r1, r3
 8002136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800213a:	f002 f8ab 	bl	8004294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800213e:	4b09      	ldr	r3, [pc, #36]	; (8002164 <HAL_PCD_MspInit+0x84>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	4a08      	ldr	r2, [pc, #32]	; (8002164 <HAL_PCD_MspInit+0x84>)
 8002144:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002148:	61d3      	str	r3, [r2, #28]
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_PCD_MspInit+0x84>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002156:	bf00      	nop
 8002158:	3728      	adds	r7, #40	; 0x28
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40005c00 	.word	0x40005c00
 8002164:	40021000 	.word	0x40021000

08002168 <PWM_Start>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PWM_Start() {
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 800216c:	4b04      	ldr	r3, [pc, #16]	; (8002180 <PWM_Start+0x18>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a04      	ldr	r2, [pc, #16]	; (8002184 <PWM_Start+0x1c>)
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	4611      	mov	r1, r2
 8002176:	4618      	mov	r0, r3
 8002178:	f004 fa38 	bl	80065ec <HAL_TIM_PWM_Start>
}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}
 8002180:	2000004c 	.word	0x2000004c
 8002184:	200007cc 	.word	0x200007cc

08002188 <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	460a      	mov	r2, r1
 8002192:	80fb      	strh	r3, [r7, #6]
 8002194:	4613      	mov	r3, r2
 8002196:	80bb      	strh	r3, [r7, #4]
	if (pwm_freq == 0 || pwm_freq > 20000) {
 8002198:	88fb      	ldrh	r3, [r7, #6]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d004      	beq.n	80021a8 <PWM_Change_Tone+0x20>
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d937      	bls.n	8002218 <PWM_Change_Tone+0x90>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 80021a8:	4b4e      	ldr	r3, [pc, #312]	; (80022e4 <PWM_Change_Tone+0x15c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d105      	bne.n	80021bc <PWM_Change_Tone+0x34>
 80021b0:	4b4d      	ldr	r3, [pc, #308]	; (80022e8 <PWM_Change_Tone+0x160>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2200      	movs	r2, #0
 80021b8:	635a      	str	r2, [r3, #52]	; 0x34
 80021ba:	e08e      	b.n	80022da <PWM_Change_Tone+0x152>
 80021bc:	4b49      	ldr	r3, [pc, #292]	; (80022e4 <PWM_Change_Tone+0x15c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d105      	bne.n	80021d0 <PWM_Change_Tone+0x48>
 80021c4:	4b48      	ldr	r3, [pc, #288]	; (80022e8 <PWM_Change_Tone+0x160>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	2300      	movs	r3, #0
 80021cc:	6393      	str	r3, [r2, #56]	; 0x38
 80021ce:	e084      	b.n	80022da <PWM_Change_Tone+0x152>
 80021d0:	4b44      	ldr	r3, [pc, #272]	; (80022e4 <PWM_Change_Tone+0x15c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d105      	bne.n	80021e4 <PWM_Change_Tone+0x5c>
 80021d8:	4b43      	ldr	r3, [pc, #268]	; (80022e8 <PWM_Change_Tone+0x160>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	2300      	movs	r3, #0
 80021e0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80021e2:	e07a      	b.n	80022da <PWM_Change_Tone+0x152>
 80021e4:	4b3f      	ldr	r3, [pc, #252]	; (80022e4 <PWM_Change_Tone+0x15c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b0c      	cmp	r3, #12
 80021ea:	d105      	bne.n	80021f8 <PWM_Change_Tone+0x70>
 80021ec:	4b3e      	ldr	r3, [pc, #248]	; (80022e8 <PWM_Change_Tone+0x160>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	2300      	movs	r3, #0
 80021f4:	6413      	str	r3, [r2, #64]	; 0x40
 80021f6:	e070      	b.n	80022da <PWM_Change_Tone+0x152>
 80021f8:	4b3a      	ldr	r3, [pc, #232]	; (80022e4 <PWM_Change_Tone+0x15c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b10      	cmp	r3, #16
 80021fe:	d105      	bne.n	800220c <PWM_Change_Tone+0x84>
 8002200:	4b39      	ldr	r3, [pc, #228]	; (80022e8 <PWM_Change_Tone+0x160>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	2300      	movs	r3, #0
 8002208:	6593      	str	r3, [r2, #88]	; 0x58
 800220a:	e066      	b.n	80022da <PWM_Change_Tone+0x152>
 800220c:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <PWM_Change_Tone+0x160>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	2300      	movs	r3, #0
 8002214:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002216:	e060      	b.n	80022da <PWM_Change_Tone+0x152>
	} else {
		const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 8002218:	f003 fdb0 	bl	8005d7c <HAL_RCC_GetSysClockFreq>
 800221c:	61f8      	str	r0, [r7, #28]
		const uint16_t prescaler = 1;
 800221e:	2301      	movs	r3, #1
 8002220:	837b      	strh	r3, [r7, #26]
		const uint32_t timer_clock = internal_clock_freq / prescaler;
 8002222:	8b7b      	ldrh	r3, [r7, #26]
 8002224:	69fa      	ldr	r2, [r7, #28]
 8002226:	fbb2 f3f3 	udiv	r3, r2, r3
 800222a:	617b      	str	r3, [r7, #20]
		const uint32_t period_cycles = timer_clock / pwm_freq;
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	fbb2 f3f3 	udiv	r3, r2, r3
 8002234:	613b      	str	r3, [r7, #16]
		const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 8002236:	88bb      	ldrh	r3, [r7, #4]
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	fb02 f303 	mul.w	r3, r2, r3
 800223e:	4a2b      	ldr	r2, [pc, #172]	; (80022ec <PWM_Change_Tone+0x164>)
 8002240:	fba2 2303 	umull	r2, r3, r2, r3
 8002244:	09db      	lsrs	r3, r3, #7
 8002246:	60fb      	str	r3, [r7, #12]

		pwm_timer->Instance->PSC = prescaler - 1;
 8002248:	8b7b      	ldrh	r3, [r7, #26]
 800224a:	1e5a      	subs	r2, r3, #1
 800224c:	4b26      	ldr	r3, [pc, #152]	; (80022e8 <PWM_Change_Tone+0x160>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	629a      	str	r2, [r3, #40]	; 0x28
		pwm_timer->Instance->ARR = period_cycles - 1;
 8002254:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <PWM_Change_Tone+0x160>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	3a01      	subs	r2, #1
 800225e:	62da      	str	r2, [r3, #44]	; 0x2c
		pwm_timer->Instance->EGR = TIM_EGR_UG;
 8002260:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <PWM_Change_Tone+0x160>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2201      	movs	r2, #1
 8002268:	615a      	str	r2, [r3, #20]
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 800226a:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <PWM_Change_Tone+0x15c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d105      	bne.n	800227e <PWM_Change_Tone+0xf6>
 8002272:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <PWM_Change_Tone+0x160>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 800227c:	e02d      	b.n	80022da <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 800227e:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <PWM_Change_Tone+0x15c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2b04      	cmp	r3, #4
 8002284:	d105      	bne.n	8002292 <PWM_Change_Tone+0x10a>
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <PWM_Change_Tone+0x160>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002290:	e023      	b.n	80022da <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8002292:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <PWM_Change_Tone+0x15c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b08      	cmp	r3, #8
 8002298:	d105      	bne.n	80022a6 <PWM_Change_Tone+0x11e>
 800229a:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <PWM_Change_Tone+0x160>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80022a4:	e019      	b.n	80022da <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80022a6:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <PWM_Change_Tone+0x15c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b0c      	cmp	r3, #12
 80022ac:	d105      	bne.n	80022ba <PWM_Change_Tone+0x132>
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <PWM_Change_Tone+0x160>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80022b8:	e00f      	b.n	80022da <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <PWM_Change_Tone+0x15c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b10      	cmp	r3, #16
 80022c0:	d105      	bne.n	80022ce <PWM_Change_Tone+0x146>
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <PWM_Change_Tone+0x160>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6593      	str	r3, [r2, #88]	; 0x58
}
 80022cc:	e005      	b.n	80022da <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <PWM_Change_Tone+0x160>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80022d8:	e7ff      	b.n	80022da <PWM_Change_Tone+0x152>
 80022da:	bf00      	nop
 80022dc:	3720      	adds	r7, #32
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	200007cc 	.word	0x200007cc
 80022e8:	2000004c 	.word	0x2000004c
 80022ec:	10624dd3 	.word	0x10624dd3

080022f0 <Change_Melody>:

void Change_Melody(const struct Tone *melody, uint16_t tone_count) {
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	807b      	strh	r3, [r7, #2]
	melody_ptr = melody;
 80022fc:	4a07      	ldr	r2, [pc, #28]	; (800231c <Change_Melody+0x2c>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6013      	str	r3, [r2, #0]
	melody_tone_count = tone_count;
 8002302:	4a07      	ldr	r2, [pc, #28]	; (8002320 <Change_Melody+0x30>)
 8002304:	887b      	ldrh	r3, [r7, #2]
 8002306:	8013      	strh	r3, [r2, #0]
	current_tone_number = 0;
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <Change_Melody+0x34>)
 800230a:	2200      	movs	r2, #0
 800230c:	801a      	strh	r2, [r3, #0]
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	200007d0 	.word	0x200007d0
 8002320:	200007d4 	.word	0x200007d4
 8002324:	200007d6 	.word	0x200007d6

08002328 <Update_Melody>:

void Update_Melody() {
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
	if (programState != Paused && programState != IDLE) {
 800232e:	4b28      	ldr	r3, [pc, #160]	; (80023d0 <Update_Melody+0xa8>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d042      	beq.n	80023bc <Update_Melody+0x94>
 8002336:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <Update_Melody+0xa8>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d03e      	beq.n	80023bc <Update_Melody+0x94>
		if ((HAL_GetTick() > current_tone_end)
 800233e:	f000 fa2b 	bl	8002798 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	4b23      	ldr	r3, [pc, #140]	; (80023d4 <Update_Melody+0xac>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d92c      	bls.n	80023a6 <Update_Melody+0x7e>
				&& (current_tone_number < melody_tone_count)) {
 800234c:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <Update_Melody+0xb0>)
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	b29a      	uxth	r2, r3
 8002352:	4b22      	ldr	r3, [pc, #136]	; (80023dc <Update_Melody+0xb4>)
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	429a      	cmp	r2, r3
 800235a:	d224      	bcs.n	80023a6 <Update_Melody+0x7e>
			const struct Tone active_tone = *(melody_ptr + current_tone_number);
 800235c:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <Update_Melody+0xb8>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <Update_Melody+0xb0>)
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	b29b      	uxth	r3, r3
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	441a      	add	r2, r3
 800236a:	463b      	mov	r3, r7
 800236c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002370:	e883 0003 	stmia.w	r3, {r0, r1}
			PWM_Change_Tone(active_tone.frequency, volume);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	b29b      	uxth	r3, r3
 8002378:	4a1a      	ldr	r2, [pc, #104]	; (80023e4 <Update_Melody+0xbc>)
 800237a:	8812      	ldrh	r2, [r2, #0]
 800237c:	b292      	uxth	r2, r2
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff01 	bl	8002188 <PWM_Change_Tone>
			current_tone_end = HAL_GetTick() + active_tone.duration;
 8002386:	f000 fa07 	bl	8002798 <HAL_GetTick>
 800238a:	4603      	mov	r3, r0
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	4413      	add	r3, r2
 8002390:	4a10      	ldr	r2, [pc, #64]	; (80023d4 <Update_Melody+0xac>)
 8002392:	6013      	str	r3, [r2, #0]
			current_tone_number++;
 8002394:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <Update_Melody+0xb0>)
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	b29b      	uxth	r3, r3
 800239a:	3301      	adds	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <Update_Melody+0xb0>)
 80023a0:	801a      	strh	r2, [r3, #0]
				&& (current_tone_number < melody_tone_count)) {
 80023a2:	bf00      	nop
		if ((HAL_GetTick() > current_tone_end)
 80023a4:	e00f      	b.n	80023c6 <Update_Melody+0x9e>
		}else if(current_tone_number >= melody_tone_count)
 80023a6:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <Update_Melody+0xb0>)
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <Update_Melody+0xb4>)
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d307      	bcc.n	80023c6 <Update_Melody+0x9e>
		{
			next_music();
 80023b6:	f7fe ff35 	bl	8001224 <next_music>
		if ((HAL_GetTick() > current_tone_end)
 80023ba:	e004      	b.n	80023c6 <Update_Melody+0x9e>
		}
	}else
	{
		PWM_Change_Tone(0, 0);
 80023bc:	2100      	movs	r1, #0
 80023be:	2000      	movs	r0, #0
 80023c0:	f7ff fee2 	bl	8002188 <PWM_Change_Tone>
	}
}
 80023c4:	e000      	b.n	80023c8 <Update_Melody+0xa0>
		if ((HAL_GetTick() > current_tone_end)
 80023c6:	bf00      	nop
}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	2000000c 	.word	0x2000000c
 80023d4:	200007d8 	.word	0x200007d8
 80023d8:	200007d6 	.word	0x200007d6
 80023dc:	200007d4 	.word	0x200007d4
 80023e0:	200007d0 	.word	0x200007d0
 80023e4:	20000050 	.word	0x20000050

080023e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80023ec:	e7fe      	b.n	80023ec <NMI_Handler+0x4>

080023ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023f2:	e7fe      	b.n	80023f2 <HardFault_Handler+0x4>

080023f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f8:	e7fe      	b.n	80023f8 <MemManage_Handler+0x4>

080023fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023fe:	e7fe      	b.n	80023fe <BusFault_Handler+0x4>

08002400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002404:	e7fe      	b.n	8002404 <UsageFault_Handler+0x4>

08002406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002434:	f000 f99c 	bl	8002770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	Update_Melody();
 8002438:	f7ff ff76 	bl	8002328 <Update_Melody>
  /* USER CODE END SysTick_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	bd80      	pop	{r7, pc}

08002440 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002444:	2001      	movs	r0, #1
 8002446:	f002 f8cf 	bl	80045e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	if (HAL_GetTick() > last_button_press + 200) {
 800244a:	f000 f9a5 	bl	8002798 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <EXTI0_IRQHandler+0x28>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	33c8      	adds	r3, #200	; 0xc8
 8002456:	429a      	cmp	r2, r3
 8002458:	d904      	bls.n	8002464 <EXTI0_IRQHandler+0x24>
		last_button_press = HAL_GetTick();
 800245a:	f000 f99d 	bl	8002798 <HAL_GetTick>
 800245e:	4603      	mov	r3, r0
 8002460:	4a01      	ldr	r2, [pc, #4]	; (8002468 <EXTI0_IRQHandler+0x28>)
 8002462:	6013      	str	r3, [r2, #0]

	}
  /* USER CODE END EXTI0_IRQn 1 */
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}
 8002468:	200007dc 	.word	0x200007dc

0800246c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002470:	2002      	movs	r0, #2
 8002472:	f002 f8b9 	bl	80045e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}

0800247a <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800247e:	2004      	movs	r0, #4
 8002480:	f002 f8b2 	bl	80045e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8002484:	bf00      	nop
 8002486:	bd80      	pop	{r7, pc}

08002488 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800248c:	2008      	movs	r0, #8
 800248e:	f002 f8ab 	bl	80045e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}

08002496 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800249a:	2010      	movs	r0, #16
 800249c:	f002 f8a4 	bl	80045e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <ADC1_2_IRQHandler+0x10>)
 80024aa:	f000 fcff 	bl	8002eac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200000e8 	.word	0x200000e8

080024b8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80024be:	f004 f995 	bl	80067ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200001f0 	.word	0x200001f0

080024cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024d0:	4802      	ldr	r0, [pc, #8]	; (80024dc <USART1_IRQHandler+0x10>)
 80024d2:	f005 fa65 	bl	80079a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000288 	.word	0x20000288

080024e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return 1;
 80024e4:	2301      	movs	r3, #1
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <_kill>:

int _kill(int pid, int sig)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024fa:	f006 fcdf 	bl	8008ebc <__errno>
 80024fe:	4603      	mov	r3, r0
 8002500:	2216      	movs	r2, #22
 8002502:	601a      	str	r2, [r3, #0]
  return -1;
 8002504:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <_exit>:

void _exit (int status)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002518:	f04f 31ff 	mov.w	r1, #4294967295
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ffe7 	bl	80024f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002522:	e7fe      	b.n	8002522 <_exit+0x12>

08002524 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	e00a      	b.n	800254c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002536:	f3af 8000 	nop.w
 800253a:	4601      	mov	r1, r0
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	60ba      	str	r2, [r7, #8]
 8002542:	b2ca      	uxtb	r2, r1
 8002544:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	3301      	adds	r3, #1
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	429a      	cmp	r2, r3
 8002552:	dbf0      	blt.n	8002536 <_read+0x12>
  }

  return len;
 8002554:	687b      	ldr	r3, [r7, #4]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	e009      	b.n	8002584 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	60ba      	str	r2, [r7, #8]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	3301      	adds	r3, #1
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	429a      	cmp	r2, r3
 800258a:	dbf1      	blt.n	8002570 <_write+0x12>
  }
  return len;
 800258c:	687b      	ldr	r3, [r7, #4]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <_close>:

int _close(int file)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800259e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025be:	605a      	str	r2, [r3, #4]
  return 0;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <_isatty>:

int _isatty(int file)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025d6:	2301      	movs	r3, #1
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
	...

08002600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002608:	4a14      	ldr	r2, [pc, #80]	; (800265c <_sbrk+0x5c>)
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <_sbrk+0x60>)
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002614:	4b13      	ldr	r3, [pc, #76]	; (8002664 <_sbrk+0x64>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d102      	bne.n	8002622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <_sbrk+0x64>)
 800261e:	4a12      	ldr	r2, [pc, #72]	; (8002668 <_sbrk+0x68>)
 8002620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <_sbrk+0x64>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	429a      	cmp	r2, r3
 800262e:	d207      	bcs.n	8002640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002630:	f006 fc44 	bl	8008ebc <__errno>
 8002634:	4603      	mov	r3, r0
 8002636:	220c      	movs	r2, #12
 8002638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
 800263e:	e009      	b.n	8002654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <_sbrk+0x64>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <_sbrk+0x64>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	4a05      	ldr	r2, [pc, #20]	; (8002664 <_sbrk+0x64>)
 8002650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002652:	68fb      	ldr	r3, [r7, #12]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	2000a000 	.word	0x2000a000
 8002660:	00000400 	.word	0x00000400
 8002664:	200007e0 	.word	0x200007e0
 8002668:	200007f8 	.word	0x200007f8

0800266c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <SystemInit+0x20>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002676:	4a05      	ldr	r2, [pc, #20]	; (800268c <SystemInit+0x20>)
 8002678:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800267c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026c8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002694:	f7ff ffea 	bl	800266c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002698:	480c      	ldr	r0, [pc, #48]	; (80026cc <LoopForever+0x6>)
  ldr r1, =_edata
 800269a:	490d      	ldr	r1, [pc, #52]	; (80026d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800269c:	4a0d      	ldr	r2, [pc, #52]	; (80026d4 <LoopForever+0xe>)
  movs r3, #0
 800269e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026a0:	e002      	b.n	80026a8 <LoopCopyDataInit>

080026a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026a6:	3304      	adds	r3, #4

080026a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026ac:	d3f9      	bcc.n	80026a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ae:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026b0:	4c0a      	ldr	r4, [pc, #40]	; (80026dc <LoopForever+0x16>)
  movs r3, #0
 80026b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026b4:	e001      	b.n	80026ba <LoopFillZerobss>

080026b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026b8:	3204      	adds	r2, #4

080026ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026bc:	d3fb      	bcc.n	80026b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026be:	f006 fc03 	bl	8008ec8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026c2:	f7fe fe65 	bl	8001390 <main>

080026c6 <LoopForever>:

LoopForever:
    b LoopForever
 80026c6:	e7fe      	b.n	80026c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026c8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80026cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026d0:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 80026d4:	0800d700 	.word	0x0800d700
  ldr r2, =_sbss
 80026d8:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 80026dc:	200007f8 	.word	0x200007f8

080026e0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026e0:	e7fe      	b.n	80026e0 <ADC3_IRQHandler>
	...

080026e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <HAL_Init+0x28>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a07      	ldr	r2, [pc, #28]	; (800270c <HAL_Init+0x28>)
 80026ee:	f043 0310 	orr.w	r3, r3, #16
 80026f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026f4:	2003      	movs	r0, #3
 80026f6:	f001 fd15 	bl	8004124 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026fa:	2000      	movs	r0, #0
 80026fc:	f000 f808 	bl	8002710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002700:	f7ff fb44 	bl	8001d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40022000 	.word	0x40022000

08002710 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_InitTick+0x54>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_InitTick+0x58>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	4619      	mov	r1, r3
 8002722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002726:	fbb3 f3f1 	udiv	r3, r3, r1
 800272a:	fbb2 f3f3 	udiv	r3, r2, r3
 800272e:	4618      	mov	r0, r3
 8002730:	f001 fd2d 	bl	800418e <HAL_SYSTICK_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e00e      	b.n	800275c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b0f      	cmp	r3, #15
 8002742:	d80a      	bhi.n	800275a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002744:	2200      	movs	r2, #0
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	f04f 30ff 	mov.w	r0, #4294967295
 800274c:	f001 fcf5 	bl	800413a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002750:	4a06      	ldr	r2, [pc, #24]	; (800276c <HAL_InitTick+0x5c>)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	e000      	b.n	800275c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
}
 800275c:	4618      	mov	r0, r3
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20000054 	.word	0x20000054
 8002768:	2000005c 	.word	0x2000005c
 800276c:	20000058 	.word	0x20000058

08002770 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_IncTick+0x20>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	461a      	mov	r2, r3
 800277a:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_IncTick+0x24>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4413      	add	r3, r2
 8002780:	4a04      	ldr	r2, [pc, #16]	; (8002794 <HAL_IncTick+0x24>)
 8002782:	6013      	str	r3, [r2, #0]
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	2000005c 	.word	0x2000005c
 8002794:	200007e4 	.word	0x200007e4

08002798 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return uwTick;  
 800279c:	4b03      	ldr	r3, [pc, #12]	; (80027ac <HAL_GetTick+0x14>)
 800279e:	681b      	ldr	r3, [r3, #0]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	200007e4 	.word	0x200007e4

080027b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b09a      	sub	sp, #104	; 0x68
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e1c9      	b.n	8002b8c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f003 0310 	and.w	r3, r3, #16
 8002806:	2b00      	cmp	r3, #0
 8002808:	d176      	bne.n	80028f8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	2b00      	cmp	r3, #0
 8002810:	d152      	bne.n	80028b8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff fad1 	bl	8001dd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d13b      	bne.n	80028b8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f001 fa83 	bl	8003d4c <ADC_Disable>
 8002846:	4603      	mov	r3, r0
 8002848:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	f003 0310 	and.w	r3, r3, #16
 8002854:	2b00      	cmp	r3, #0
 8002856:	d12f      	bne.n	80028b8 <HAL_ADC_Init+0xe0>
 8002858:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800285c:	2b00      	cmp	r3, #0
 800285e:	d12b      	bne.n	80028b8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002868:	f023 0302 	bic.w	r3, r3, #2
 800286c:	f043 0202 	orr.w	r2, r3, #2
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002882:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002892:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002894:	4b86      	ldr	r3, [pc, #536]	; (8002ab0 <HAL_ADC_Init+0x2d8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a86      	ldr	r2, [pc, #536]	; (8002ab4 <HAL_ADC_Init+0x2dc>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	0c9a      	lsrs	r2, r3, #18
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028aa:	e002      	b.n	80028b2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f9      	bne.n	80028ac <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d007      	beq.n	80028d6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80028d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028d4:	d110      	bne.n	80028f8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f023 0312 	bic.w	r3, r3, #18
 80028de:	f043 0210 	orr.w	r2, r3, #16
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	f043 0201 	orr.w	r2, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	f003 0310 	and.w	r3, r3, #16
 8002900:	2b00      	cmp	r3, #0
 8002902:	f040 8136 	bne.w	8002b72 <HAL_ADC_Init+0x39a>
 8002906:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800290a:	2b00      	cmp	r3, #0
 800290c:	f040 8131 	bne.w	8002b72 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800291a:	2b00      	cmp	r3, #0
 800291c:	f040 8129 	bne.w	8002b72 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002928:	f043 0202 	orr.w	r2, r3, #2
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002938:	d004      	beq.n	8002944 <HAL_ADC_Init+0x16c>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a5e      	ldr	r2, [pc, #376]	; (8002ab8 <HAL_ADC_Init+0x2e0>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d101      	bne.n	8002948 <HAL_ADC_Init+0x170>
 8002944:	4b5d      	ldr	r3, [pc, #372]	; (8002abc <HAL_ADC_Init+0x2e4>)
 8002946:	e000      	b.n	800294a <HAL_ADC_Init+0x172>
 8002948:	4b5d      	ldr	r3, [pc, #372]	; (8002ac0 <HAL_ADC_Init+0x2e8>)
 800294a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002954:	d102      	bne.n	800295c <HAL_ADC_Init+0x184>
 8002956:	4b58      	ldr	r3, [pc, #352]	; (8002ab8 <HAL_ADC_Init+0x2e0>)
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	e01a      	b.n	8002992 <HAL_ADC_Init+0x1ba>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a55      	ldr	r2, [pc, #340]	; (8002ab8 <HAL_ADC_Init+0x2e0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d103      	bne.n	800296e <HAL_ADC_Init+0x196>
 8002966:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	e011      	b.n	8002992 <HAL_ADC_Init+0x1ba>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a54      	ldr	r2, [pc, #336]	; (8002ac4 <HAL_ADC_Init+0x2ec>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d102      	bne.n	800297e <HAL_ADC_Init+0x1a6>
 8002978:	4b53      	ldr	r3, [pc, #332]	; (8002ac8 <HAL_ADC_Init+0x2f0>)
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	e009      	b.n	8002992 <HAL_ADC_Init+0x1ba>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a51      	ldr	r2, [pc, #324]	; (8002ac8 <HAL_ADC_Init+0x2f0>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d102      	bne.n	800298e <HAL_ADC_Init+0x1b6>
 8002988:	4b4e      	ldr	r3, [pc, #312]	; (8002ac4 <HAL_ADC_Init+0x2ec>)
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	e001      	b.n	8002992 <HAL_ADC_Init+0x1ba>
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	2b01      	cmp	r3, #1
 800299e:	d108      	bne.n	80029b2 <HAL_ADC_Init+0x1da>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_ADC_Init+0x1da>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <HAL_ADC_Init+0x1dc>
 80029b2:	2300      	movs	r3, #0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d11c      	bne.n	80029f2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80029b8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d010      	beq.n	80029e0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d107      	bne.n	80029da <HAL_ADC_Init+0x202>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_ADC_Init+0x202>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <HAL_ADC_Init+0x204>
 80029da:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d108      	bne.n	80029f2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80029e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	431a      	orrs	r2, r3
 80029ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029f0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	7e5b      	ldrb	r3, [r3, #25]
 80029f6:	035b      	lsls	r3, r3, #13
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029fc:	2a01      	cmp	r2, #1
 80029fe:	d002      	beq.n	8002a06 <HAL_ADC_Init+0x22e>
 8002a00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a04:	e000      	b.n	8002a08 <HAL_ADC_Init+0x230>
 8002a06:	2200      	movs	r2, #0
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d11b      	bne.n	8002a5e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	7e5b      	ldrb	r3, [r3, #25]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d109      	bne.n	8002a42 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	3b01      	subs	r3, #1
 8002a34:	045a      	lsls	r2, r3, #17
 8002a36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3e:	663b      	str	r3, [r7, #96]	; 0x60
 8002a40:	e00d      	b.n	8002a5e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	f043 0201 	orr.w	r2, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d03a      	beq.n	8002adc <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a16      	ldr	r2, [pc, #88]	; (8002ac4 <HAL_ADC_Init+0x2ec>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d004      	beq.n	8002a7a <HAL_ADC_Init+0x2a2>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a14      	ldr	r2, [pc, #80]	; (8002ac8 <HAL_ADC_Init+0x2f0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d128      	bne.n	8002acc <HAL_ADC_Init+0x2f4>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002a82:	d012      	beq.n	8002aaa <HAL_ADC_Init+0x2d2>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a8c:	d00a      	beq.n	8002aa4 <HAL_ADC_Init+0x2cc>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002a96:	d002      	beq.n	8002a9e <HAL_ADC_Init+0x2c6>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	e018      	b.n	8002ad0 <HAL_ADC_Init+0x2f8>
 8002a9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aa2:	e015      	b.n	8002ad0 <HAL_ADC_Init+0x2f8>
 8002aa4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002aa8:	e012      	b.n	8002ad0 <HAL_ADC_Init+0x2f8>
 8002aaa:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002aae:	e00f      	b.n	8002ad0 <HAL_ADC_Init+0x2f8>
 8002ab0:	20000054 	.word	0x20000054
 8002ab4:	431bde83 	.word	0x431bde83
 8002ab8:	50000100 	.word	0x50000100
 8002abc:	50000300 	.word	0x50000300
 8002ac0:	50000700 	.word	0x50000700
 8002ac4:	50000400 	.word	0x50000400
 8002ac8:	50000500 	.word	0x50000500
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d114      	bne.n	8002b14 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002af8:	f023 0302 	bic.w	r3, r3, #2
 8002afc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	7e1b      	ldrb	r3, [r3, #24]
 8002b02:	039a      	lsls	r2, r3, #14
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b10:	4313      	orrs	r3, r2
 8002b12:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	4b1e      	ldr	r3, [pc, #120]	; (8002b94 <HAL_ADC_Init+0x3bc>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6812      	ldr	r2, [r2, #0]
 8002b22:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002b24:	430b      	orrs	r3, r1
 8002b26:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d10c      	bne.n	8002b4a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	f023 010f 	bic.w	r1, r3, #15
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	1e5a      	subs	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	631a      	str	r2, [r3, #48]	; 0x30
 8002b48:	e007      	b.n	8002b5a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 020f 	bic.w	r2, r2, #15
 8002b58:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f023 0303 	bic.w	r3, r3, #3
 8002b68:	f043 0201 	orr.w	r2, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40
 8002b70:	e00a      	b.n	8002b88 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f023 0312 	bic.w	r3, r3, #18
 8002b7a:	f043 0210 	orr.w	r2, r3, #16
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002b82:	2301      	movs	r3, #1
 8002b84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002b88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3768      	adds	r7, #104	; 0x68
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	fff0c007 	.word	0xfff0c007

08002b98 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f040 8123 	bne.w	8002dfa <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <HAL_ADC_Start_IT+0x2a>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e11e      	b.n	8002e00 <HAL_ADC_Start_IT+0x268>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f001 f85a 	bl	8003c84 <ADC_Enable>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f040 810a 	bne.w	8002df0 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002be4:	f023 0301 	bic.w	r3, r3, #1
 8002be8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bf8:	d004      	beq.n	8002c04 <HAL_ADC_Start_IT+0x6c>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a82      	ldr	r2, [pc, #520]	; (8002e08 <HAL_ADC_Start_IT+0x270>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d106      	bne.n	8002c12 <HAL_ADC_Start_IT+0x7a>
 8002c04:	4b81      	ldr	r3, [pc, #516]	; (8002e0c <HAL_ADC_Start_IT+0x274>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d010      	beq.n	8002c32 <HAL_ADC_Start_IT+0x9a>
 8002c10:	e005      	b.n	8002c1e <HAL_ADC_Start_IT+0x86>
 8002c12:	4b7f      	ldr	r3, [pc, #508]	; (8002e10 <HAL_ADC_Start_IT+0x278>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 031f 	and.w	r3, r3, #31
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d009      	beq.n	8002c32 <HAL_ADC_Start_IT+0x9a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c26:	d004      	beq.n	8002c32 <HAL_ADC_Start_IT+0x9a>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a79      	ldr	r2, [pc, #484]	; (8002e14 <HAL_ADC_Start_IT+0x27c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d115      	bne.n	8002c5e <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d036      	beq.n	8002cba <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002c5c:	e02d      	b.n	8002cba <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c72:	d004      	beq.n	8002c7e <HAL_ADC_Start_IT+0xe6>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a63      	ldr	r2, [pc, #396]	; (8002e08 <HAL_ADC_Start_IT+0x270>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d10a      	bne.n	8002c94 <HAL_ADC_Start_IT+0xfc>
 8002c7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	bf14      	ite	ne
 8002c8c:	2301      	movne	r3, #1
 8002c8e:	2300      	moveq	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	e008      	b.n	8002ca6 <HAL_ADC_Start_IT+0x10e>
 8002c94:	4b5f      	ldr	r3, [pc, #380]	; (8002e14 <HAL_ADC_Start_IT+0x27c>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf14      	ite	ne
 8002ca0:	2301      	movne	r3, #1
 8002ca2:	2300      	moveq	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d007      	beq.n	8002cba <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cb2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc6:	d106      	bne.n	8002cd6 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ccc:	f023 0206 	bic.w	r2, r3, #6
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	645a      	str	r2, [r3, #68]	; 0x44
 8002cd4:	e002      	b.n	8002cdc <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	221c      	movs	r2, #28
 8002cea:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d110      	bne.n	8002d16 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0204 	bic.w	r2, r2, #4
 8002d02:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0208 	orr.w	r2, r2, #8
 8002d12:	605a      	str	r2, [r3, #4]
          break;
 8002d14:	e008      	b.n	8002d28 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 020c 	orr.w	r2, r2, #12
 8002d24:	605a      	str	r2, [r3, #4]
          break;
 8002d26:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d107      	bne.n	8002d40 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0210 	bic.w	r2, r2, #16
 8002d3e:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d48:	d004      	beq.n	8002d54 <HAL_ADC_Start_IT+0x1bc>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a2e      	ldr	r2, [pc, #184]	; (8002e08 <HAL_ADC_Start_IT+0x270>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d106      	bne.n	8002d62 <HAL_ADC_Start_IT+0x1ca>
 8002d54:	4b2d      	ldr	r3, [pc, #180]	; (8002e0c <HAL_ADC_Start_IT+0x274>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 031f 	and.w	r3, r3, #31
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d03e      	beq.n	8002dde <HAL_ADC_Start_IT+0x246>
 8002d60:	e005      	b.n	8002d6e <HAL_ADC_Start_IT+0x1d6>
 8002d62:	4b2b      	ldr	r3, [pc, #172]	; (8002e10 <HAL_ADC_Start_IT+0x278>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 031f 	and.w	r3, r3, #31
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d037      	beq.n	8002dde <HAL_ADC_Start_IT+0x246>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d76:	d004      	beq.n	8002d82 <HAL_ADC_Start_IT+0x1ea>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a22      	ldr	r2, [pc, #136]	; (8002e08 <HAL_ADC_Start_IT+0x270>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d106      	bne.n	8002d90 <HAL_ADC_Start_IT+0x1f8>
 8002d82:	4b22      	ldr	r3, [pc, #136]	; (8002e0c <HAL_ADC_Start_IT+0x274>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 031f 	and.w	r3, r3, #31
 8002d8a:	2b05      	cmp	r3, #5
 8002d8c:	d027      	beq.n	8002dde <HAL_ADC_Start_IT+0x246>
 8002d8e:	e005      	b.n	8002d9c <HAL_ADC_Start_IT+0x204>
 8002d90:	4b1f      	ldr	r3, [pc, #124]	; (8002e10 <HAL_ADC_Start_IT+0x278>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	2b05      	cmp	r3, #5
 8002d9a:	d020      	beq.n	8002dde <HAL_ADC_Start_IT+0x246>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002da4:	d004      	beq.n	8002db0 <HAL_ADC_Start_IT+0x218>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a17      	ldr	r2, [pc, #92]	; (8002e08 <HAL_ADC_Start_IT+0x270>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d106      	bne.n	8002dbe <HAL_ADC_Start_IT+0x226>
 8002db0:	4b16      	ldr	r3, [pc, #88]	; (8002e0c <HAL_ADC_Start_IT+0x274>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	2b09      	cmp	r3, #9
 8002dba:	d010      	beq.n	8002dde <HAL_ADC_Start_IT+0x246>
 8002dbc:	e005      	b.n	8002dca <HAL_ADC_Start_IT+0x232>
 8002dbe:	4b14      	ldr	r3, [pc, #80]	; (8002e10 <HAL_ADC_Start_IT+0x278>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 031f 	and.w	r3, r3, #31
 8002dc6:	2b09      	cmp	r3, #9
 8002dc8:	d009      	beq.n	8002dde <HAL_ADC_Start_IT+0x246>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dd2:	d004      	beq.n	8002dde <HAL_ADC_Start_IT+0x246>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a0e      	ldr	r2, [pc, #56]	; (8002e14 <HAL_ADC_Start_IT+0x27c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d10f      	bne.n	8002dfe <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 0204 	orr.w	r2, r2, #4
 8002dec:	609a      	str	r2, [r3, #8]
 8002dee:	e006      	b.n	8002dfe <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002df8:	e001      	b.n	8002dfe <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	50000100 	.word	0x50000100
 8002e0c:	50000300 	.word	0x50000300
 8002e10:	50000700 	.word	0x50000700
 8002e14:	50000400 	.word	0x50000400

08002e18 <HAL_ADC_Stop_IT>:
  *         use function @ref HAL_ADCEx_RegularStop_IT().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_ADC_Stop_IT+0x1a>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e02b      	b.n	8002e8a <HAL_ADC_Stop_IT+0x72>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002e3a:	216c      	movs	r1, #108	; 0x6c
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 ffeb 	bl	8003e18 <ADC_ConversionStop>
 8002e42:	4603      	mov	r3, r0
 8002e44:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d119      	bne.n	8002e80 <HAL_ADC_Stop_IT+0x68>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 021c 	bic.w	r2, r2, #28
 8002e5a:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 ff75 	bl	8003d4c <ADC_Disable>
 8002e62:	4603      	mov	r3, r0
 8002e64:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d109      	bne.n	8002e80 <HAL_ADC_Stop_IT+0x68>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e74:	f023 0301 	bic.w	r3, r3, #1
 8002e78:	f043 0201 	orr.w	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b088      	sub	sp, #32
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d004      	beq.n	8002ee4 <HAL_ADC_IRQHandler+0x38>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10b      	bne.n	8002efc <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 80bc 	beq.w	8003068 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 80b6 	beq.w	8003068 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d105      	bne.n	8002f14 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f1c:	d004      	beq.n	8002f28 <HAL_ADC_IRQHandler+0x7c>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a90      	ldr	r2, [pc, #576]	; (8003164 <HAL_ADC_IRQHandler+0x2b8>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d106      	bne.n	8002f36 <HAL_ADC_IRQHandler+0x8a>
 8002f28:	4b8f      	ldr	r3, [pc, #572]	; (8003168 <HAL_ADC_IRQHandler+0x2bc>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 031f 	and.w	r3, r3, #31
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d03e      	beq.n	8002fb2 <HAL_ADC_IRQHandler+0x106>
 8002f34:	e005      	b.n	8002f42 <HAL_ADC_IRQHandler+0x96>
 8002f36:	4b8d      	ldr	r3, [pc, #564]	; (800316c <HAL_ADC_IRQHandler+0x2c0>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d037      	beq.n	8002fb2 <HAL_ADC_IRQHandler+0x106>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f4a:	d004      	beq.n	8002f56 <HAL_ADC_IRQHandler+0xaa>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a84      	ldr	r2, [pc, #528]	; (8003164 <HAL_ADC_IRQHandler+0x2b8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d106      	bne.n	8002f64 <HAL_ADC_IRQHandler+0xb8>
 8002f56:	4b84      	ldr	r3, [pc, #528]	; (8003168 <HAL_ADC_IRQHandler+0x2bc>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 031f 	and.w	r3, r3, #31
 8002f5e:	2b05      	cmp	r3, #5
 8002f60:	d027      	beq.n	8002fb2 <HAL_ADC_IRQHandler+0x106>
 8002f62:	e005      	b.n	8002f70 <HAL_ADC_IRQHandler+0xc4>
 8002f64:	4b81      	ldr	r3, [pc, #516]	; (800316c <HAL_ADC_IRQHandler+0x2c0>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	2b05      	cmp	r3, #5
 8002f6e:	d020      	beq.n	8002fb2 <HAL_ADC_IRQHandler+0x106>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f78:	d004      	beq.n	8002f84 <HAL_ADC_IRQHandler+0xd8>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a79      	ldr	r2, [pc, #484]	; (8003164 <HAL_ADC_IRQHandler+0x2b8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d106      	bne.n	8002f92 <HAL_ADC_IRQHandler+0xe6>
 8002f84:	4b78      	ldr	r3, [pc, #480]	; (8003168 <HAL_ADC_IRQHandler+0x2bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 031f 	and.w	r3, r3, #31
 8002f8c:	2b09      	cmp	r3, #9
 8002f8e:	d010      	beq.n	8002fb2 <HAL_ADC_IRQHandler+0x106>
 8002f90:	e005      	b.n	8002f9e <HAL_ADC_IRQHandler+0xf2>
 8002f92:	4b76      	ldr	r3, [pc, #472]	; (800316c <HAL_ADC_IRQHandler+0x2c0>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 031f 	and.w	r3, r3, #31
 8002f9a:	2b09      	cmp	r3, #9
 8002f9c:	d009      	beq.n	8002fb2 <HAL_ADC_IRQHandler+0x106>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fa6:	d004      	beq.n	8002fb2 <HAL_ADC_IRQHandler+0x106>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a70      	ldr	r2, [pc, #448]	; (8003170 <HAL_ADC_IRQHandler+0x2c4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d104      	bne.n	8002fbc <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	e00f      	b.n	8002fdc <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fc4:	d004      	beq.n	8002fd0 <HAL_ADC_IRQHandler+0x124>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a66      	ldr	r2, [pc, #408]	; (8003164 <HAL_ADC_IRQHandler+0x2b8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d102      	bne.n	8002fd6 <HAL_ADC_IRQHandler+0x12a>
 8002fd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002fd4:	e000      	b.n	8002fd8 <HAL_ADC_IRQHandler+0x12c>
 8002fd6:	4b66      	ldr	r3, [pc, #408]	; (8003170 <HAL_ADC_IRQHandler+0x2c4>)
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d137      	bne.n	800305a <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d132      	bne.n	800305a <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d02d      	beq.n	800305a <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d11a      	bne.n	8003042 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 020c 	bic.w	r2, r2, #12
 800301a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d112      	bne.n	800305a <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	f043 0201 	orr.w	r2, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	641a      	str	r2, [r3, #64]	; 0x40
 8003040:	e00b      	b.n	800305a <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f043 0210 	orr.w	r2, r3, #16
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	f043 0201 	orr.w	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7fd ff48 	bl	8000ef0 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	220c      	movs	r2, #12
 8003066:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b00      	cmp	r3, #0
 8003070:	d004      	beq.n	800307c <HAL_ADC_IRQHandler+0x1d0>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f003 0320 	and.w	r3, r3, #32
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10b      	bne.n	8003094 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 8138 	beq.w	80032f8 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 8132 	beq.w	80032f8 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030a8:	d004      	beq.n	80030b4 <HAL_ADC_IRQHandler+0x208>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a2d      	ldr	r2, [pc, #180]	; (8003164 <HAL_ADC_IRQHandler+0x2b8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d106      	bne.n	80030c2 <HAL_ADC_IRQHandler+0x216>
 80030b4:	4b2c      	ldr	r3, [pc, #176]	; (8003168 <HAL_ADC_IRQHandler+0x2bc>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d03e      	beq.n	800313e <HAL_ADC_IRQHandler+0x292>
 80030c0:	e005      	b.n	80030ce <HAL_ADC_IRQHandler+0x222>
 80030c2:	4b2a      	ldr	r3, [pc, #168]	; (800316c <HAL_ADC_IRQHandler+0x2c0>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d037      	beq.n	800313e <HAL_ADC_IRQHandler+0x292>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030d6:	d004      	beq.n	80030e2 <HAL_ADC_IRQHandler+0x236>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a21      	ldr	r2, [pc, #132]	; (8003164 <HAL_ADC_IRQHandler+0x2b8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d106      	bne.n	80030f0 <HAL_ADC_IRQHandler+0x244>
 80030e2:	4b21      	ldr	r3, [pc, #132]	; (8003168 <HAL_ADC_IRQHandler+0x2bc>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 031f 	and.w	r3, r3, #31
 80030ea:	2b05      	cmp	r3, #5
 80030ec:	d027      	beq.n	800313e <HAL_ADC_IRQHandler+0x292>
 80030ee:	e005      	b.n	80030fc <HAL_ADC_IRQHandler+0x250>
 80030f0:	4b1e      	ldr	r3, [pc, #120]	; (800316c <HAL_ADC_IRQHandler+0x2c0>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 031f 	and.w	r3, r3, #31
 80030f8:	2b05      	cmp	r3, #5
 80030fa:	d020      	beq.n	800313e <HAL_ADC_IRQHandler+0x292>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003104:	d004      	beq.n	8003110 <HAL_ADC_IRQHandler+0x264>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a16      	ldr	r2, [pc, #88]	; (8003164 <HAL_ADC_IRQHandler+0x2b8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d106      	bne.n	800311e <HAL_ADC_IRQHandler+0x272>
 8003110:	4b15      	ldr	r3, [pc, #84]	; (8003168 <HAL_ADC_IRQHandler+0x2bc>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 031f 	and.w	r3, r3, #31
 8003118:	2b09      	cmp	r3, #9
 800311a:	d010      	beq.n	800313e <HAL_ADC_IRQHandler+0x292>
 800311c:	e005      	b.n	800312a <HAL_ADC_IRQHandler+0x27e>
 800311e:	4b13      	ldr	r3, [pc, #76]	; (800316c <HAL_ADC_IRQHandler+0x2c0>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 031f 	and.w	r3, r3, #31
 8003126:	2b09      	cmp	r3, #9
 8003128:	d009      	beq.n	800313e <HAL_ADC_IRQHandler+0x292>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003132:	d004      	beq.n	800313e <HAL_ADC_IRQHandler+0x292>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a0d      	ldr	r2, [pc, #52]	; (8003170 <HAL_ADC_IRQHandler+0x2c4>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d104      	bne.n	8003148 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	61bb      	str	r3, [r7, #24]
 8003146:	e018      	b.n	800317a <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003150:	d004      	beq.n	800315c <HAL_ADC_IRQHandler+0x2b0>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a03      	ldr	r2, [pc, #12]	; (8003164 <HAL_ADC_IRQHandler+0x2b8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d10b      	bne.n	8003174 <HAL_ADC_IRQHandler+0x2c8>
 800315c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003160:	e009      	b.n	8003176 <HAL_ADC_IRQHandler+0x2ca>
 8003162:	bf00      	nop
 8003164:	50000100 	.word	0x50000100
 8003168:	50000300 	.word	0x50000300
 800316c:	50000700 	.word	0x50000700
 8003170:	50000400 	.word	0x50000400
 8003174:	4b92      	ldr	r3, [pc, #584]	; (80033c0 <HAL_ADC_IRQHandler+0x514>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003180:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003184:	2b00      	cmp	r3, #0
 8003186:	f040 80b0 	bne.w	80032ea <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00d      	beq.n	80031b0 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f040 80a3 	bne.w	80032ea <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f040 809d 	bne.w	80032ea <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 8097 	beq.w	80032ea <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031c4:	d004      	beq.n	80031d0 <HAL_ADC_IRQHandler+0x324>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a7e      	ldr	r2, [pc, #504]	; (80033c4 <HAL_ADC_IRQHandler+0x518>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d106      	bne.n	80031de <HAL_ADC_IRQHandler+0x332>
 80031d0:	4b7d      	ldr	r3, [pc, #500]	; (80033c8 <HAL_ADC_IRQHandler+0x51c>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 031f 	and.w	r3, r3, #31
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d03e      	beq.n	800325a <HAL_ADC_IRQHandler+0x3ae>
 80031dc:	e005      	b.n	80031ea <HAL_ADC_IRQHandler+0x33e>
 80031de:	4b7b      	ldr	r3, [pc, #492]	; (80033cc <HAL_ADC_IRQHandler+0x520>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 031f 	and.w	r3, r3, #31
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d037      	beq.n	800325a <HAL_ADC_IRQHandler+0x3ae>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031f2:	d004      	beq.n	80031fe <HAL_ADC_IRQHandler+0x352>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a72      	ldr	r2, [pc, #456]	; (80033c4 <HAL_ADC_IRQHandler+0x518>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d106      	bne.n	800320c <HAL_ADC_IRQHandler+0x360>
 80031fe:	4b72      	ldr	r3, [pc, #456]	; (80033c8 <HAL_ADC_IRQHandler+0x51c>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	2b06      	cmp	r3, #6
 8003208:	d027      	beq.n	800325a <HAL_ADC_IRQHandler+0x3ae>
 800320a:	e005      	b.n	8003218 <HAL_ADC_IRQHandler+0x36c>
 800320c:	4b6f      	ldr	r3, [pc, #444]	; (80033cc <HAL_ADC_IRQHandler+0x520>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 031f 	and.w	r3, r3, #31
 8003214:	2b06      	cmp	r3, #6
 8003216:	d020      	beq.n	800325a <HAL_ADC_IRQHandler+0x3ae>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003220:	d004      	beq.n	800322c <HAL_ADC_IRQHandler+0x380>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a67      	ldr	r2, [pc, #412]	; (80033c4 <HAL_ADC_IRQHandler+0x518>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d106      	bne.n	800323a <HAL_ADC_IRQHandler+0x38e>
 800322c:	4b66      	ldr	r3, [pc, #408]	; (80033c8 <HAL_ADC_IRQHandler+0x51c>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 031f 	and.w	r3, r3, #31
 8003234:	2b07      	cmp	r3, #7
 8003236:	d010      	beq.n	800325a <HAL_ADC_IRQHandler+0x3ae>
 8003238:	e005      	b.n	8003246 <HAL_ADC_IRQHandler+0x39a>
 800323a:	4b64      	ldr	r3, [pc, #400]	; (80033cc <HAL_ADC_IRQHandler+0x520>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 031f 	and.w	r3, r3, #31
 8003242:	2b07      	cmp	r3, #7
 8003244:	d009      	beq.n	800325a <HAL_ADC_IRQHandler+0x3ae>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800324e:	d004      	beq.n	800325a <HAL_ADC_IRQHandler+0x3ae>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a5a      	ldr	r2, [pc, #360]	; (80033c0 <HAL_ADC_IRQHandler+0x514>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d104      	bne.n	8003264 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	e00f      	b.n	8003284 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800326c:	d004      	beq.n	8003278 <HAL_ADC_IRQHandler+0x3cc>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a54      	ldr	r2, [pc, #336]	; (80033c4 <HAL_ADC_IRQHandler+0x518>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d102      	bne.n	800327e <HAL_ADC_IRQHandler+0x3d2>
 8003278:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800327c:	e000      	b.n	8003280 <HAL_ADC_IRQHandler+0x3d4>
 800327e:	4b50      	ldr	r3, [pc, #320]	; (80033c0 <HAL_ADC_IRQHandler+0x514>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d12d      	bne.n	80032ea <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b00      	cmp	r3, #0
 800329a:	d11a      	bne.n	80032d2 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032aa:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d112      	bne.n	80032ea <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	f043 0201 	orr.w	r2, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	641a      	str	r2, [r3, #64]	; 0x40
 80032d0:	e00b      	b.n	80032ea <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f043 0210 	orr.w	r2, r3, #16
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	f043 0201 	orr.w	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f8c4 	bl	8003478 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2260      	movs	r2, #96	; 0x60
 80032f6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d011      	beq.n	8003326 <HAL_ADC_IRQHandler+0x47a>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00c      	beq.n	8003326 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff fa49 	bl	80027b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2280      	movs	r2, #128	; 0x80
 8003324:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	d012      	beq.n	8003356 <HAL_ADC_IRQHandler+0x4aa>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00d      	beq.n	8003356 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f8aa 	bl	80034a0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003354:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800335c:	2b00      	cmp	r3, #0
 800335e:	d012      	beq.n	8003386 <HAL_ADC_IRQHandler+0x4da>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00d      	beq.n	8003386 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f89c 	bl	80034b4 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003384:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b00      	cmp	r3, #0
 800338e:	d04f      	beq.n	8003430 <HAL_ADC_IRQHandler+0x584>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 0310 	and.w	r3, r3, #16
 8003396:	2b00      	cmp	r3, #0
 8003398:	d04a      	beq.n	8003430 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d102      	bne.n	80033a8 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 80033a2:	2301      	movs	r3, #1
 80033a4:	61fb      	str	r3, [r7, #28]
 80033a6:	e02d      	b.n	8003404 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033b0:	d004      	beq.n	80033bc <HAL_ADC_IRQHandler+0x510>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a03      	ldr	r2, [pc, #12]	; (80033c4 <HAL_ADC_IRQHandler+0x518>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d109      	bne.n	80033d0 <HAL_ADC_IRQHandler+0x524>
 80033bc:	4b02      	ldr	r3, [pc, #8]	; (80033c8 <HAL_ADC_IRQHandler+0x51c>)
 80033be:	e008      	b.n	80033d2 <HAL_ADC_IRQHandler+0x526>
 80033c0:	50000400 	.word	0x50000400
 80033c4:	50000100 	.word	0x50000100
 80033c8:	50000300 	.word	0x50000300
 80033cc:	50000700 	.word	0x50000700
 80033d0:	4b28      	ldr	r3, [pc, #160]	; (8003474 <HAL_ADC_IRQHandler+0x5c8>)
 80033d2:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d109      	bne.n	80033f4 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d10a      	bne.n	8003404 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80033ee:	2301      	movs	r3, #1
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	e007      	b.n	8003404 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8003400:	2301      	movs	r3, #1
 8003402:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d10e      	bne.n	8003428 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341a:	f043 0202 	orr.w	r2, r3, #2
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff f9ce 	bl	80027c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2210      	movs	r2, #16
 800342e:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003436:	2b00      	cmp	r3, #0
 8003438:	d018      	beq.n	800346c <HAL_ADC_IRQHandler+0x5c0>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003440:	2b00      	cmp	r3, #0
 8003442:	d013      	beq.n	800346c <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003454:	f043 0208 	orr.w	r2, r3, #8
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003464:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f810 	bl	800348c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 800346c:	bf00      	nop
 800346e:	3720      	adds	r7, #32
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	50000700 	.word	0x50000700

08003478 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b09b      	sub	sp, #108	; 0x6c
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x22>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e2ca      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x5b8>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f040 82ae 	bne.w	8003a5e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b04      	cmp	r3, #4
 8003508:	d81c      	bhi.n	8003544 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	4413      	add	r3, r2
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	461a      	mov	r2, r3
 800351e:	231f      	movs	r3, #31
 8003520:	4093      	lsls	r3, r2
 8003522:	43db      	mvns	r3, r3
 8003524:	4019      	ands	r1, r3
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	4413      	add	r3, r2
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	fa00 f203 	lsl.w	r2, r0, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	631a      	str	r2, [r3, #48]	; 0x30
 8003542:	e063      	b.n	800360c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b09      	cmp	r3, #9
 800354a:	d81e      	bhi.n	800358a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	4413      	add	r3, r2
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	3b1e      	subs	r3, #30
 8003560:	221f      	movs	r2, #31
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43db      	mvns	r3, r3
 8003568:	4019      	ands	r1, r3
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	4413      	add	r3, r2
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	3b1e      	subs	r3, #30
 800357c:	fa00 f203 	lsl.w	r2, r0, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	635a      	str	r2, [r3, #52]	; 0x34
 8003588:	e040      	b.n	800360c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b0e      	cmp	r3, #14
 8003590:	d81e      	bhi.n	80035d0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	4413      	add	r3, r2
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	3b3c      	subs	r3, #60	; 0x3c
 80035a6:	221f      	movs	r2, #31
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	4019      	ands	r1, r3
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	6818      	ldr	r0, [r3, #0]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	4413      	add	r3, r2
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	3b3c      	subs	r3, #60	; 0x3c
 80035c2:	fa00 f203 	lsl.w	r2, r0, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	639a      	str	r2, [r3, #56]	; 0x38
 80035ce:	e01d      	b.n	800360c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	4413      	add	r3, r2
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	3b5a      	subs	r3, #90	; 0x5a
 80035e4:	221f      	movs	r2, #31
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	43db      	mvns	r3, r3
 80035ec:	4019      	ands	r1, r3
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	6818      	ldr	r0, [r3, #0]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	4613      	mov	r3, r2
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	4413      	add	r3, r2
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	3b5a      	subs	r3, #90	; 0x5a
 8003600:	fa00 f203 	lsl.w	r2, r0, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	2b00      	cmp	r3, #0
 8003618:	f040 80e5 	bne.w	80037e6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b09      	cmp	r3, #9
 8003622:	d91c      	bls.n	800365e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6999      	ldr	r1, [r3, #24]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	4613      	mov	r3, r2
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	4413      	add	r3, r2
 8003634:	3b1e      	subs	r3, #30
 8003636:	2207      	movs	r2, #7
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	4019      	ands	r1, r3
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	6898      	ldr	r0, [r3, #8]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	4613      	mov	r3, r2
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	4413      	add	r3, r2
 800364e:	3b1e      	subs	r3, #30
 8003650:	fa00 f203 	lsl.w	r2, r0, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	619a      	str	r2, [r3, #24]
 800365c:	e019      	b.n	8003692 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6959      	ldr	r1, [r3, #20]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	4613      	mov	r3, r2
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	4413      	add	r3, r2
 800366e:	2207      	movs	r2, #7
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	43db      	mvns	r3, r3
 8003676:	4019      	ands	r1, r3
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	6898      	ldr	r0, [r3, #8]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	4613      	mov	r3, r2
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	4413      	add	r3, r2
 8003686:	fa00 f203 	lsl.w	r2, r0, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	695a      	ldr	r2, [r3, #20]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	08db      	lsrs	r3, r3, #3
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d84f      	bhi.n	8003754 <HAL_ADC_ConfigChannel+0x28c>
 80036b4:	a201      	add	r2, pc, #4	; (adr r2, 80036bc <HAL_ADC_ConfigChannel+0x1f4>)
 80036b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ba:	bf00      	nop
 80036bc:	080036cd 	.word	0x080036cd
 80036c0:	080036ef 	.word	0x080036ef
 80036c4:	08003711 	.word	0x08003711
 80036c8:	08003733 	.word	0x08003733
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036d2:	4b9a      	ldr	r3, [pc, #616]	; (800393c <HAL_ADC_ConfigChannel+0x474>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	6812      	ldr	r2, [r2, #0]
 80036da:	0691      	lsls	r1, r2, #26
 80036dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036de:	430a      	orrs	r2, r1
 80036e0:	431a      	orrs	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80036ea:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80036ec:	e07e      	b.n	80037ec <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80036f4:	4b91      	ldr	r3, [pc, #580]	; (800393c <HAL_ADC_ConfigChannel+0x474>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	0691      	lsls	r1, r2, #26
 80036fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003700:	430a      	orrs	r2, r1
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800370c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800370e:	e06d      	b.n	80037ec <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003716:	4b89      	ldr	r3, [pc, #548]	; (800393c <HAL_ADC_ConfigChannel+0x474>)
 8003718:	4013      	ands	r3, r2
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	6812      	ldr	r2, [r2, #0]
 800371e:	0691      	lsls	r1, r2, #26
 8003720:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003722:	430a      	orrs	r2, r1
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800372e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003730:	e05c      	b.n	80037ec <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003738:	4b80      	ldr	r3, [pc, #512]	; (800393c <HAL_ADC_ConfigChannel+0x474>)
 800373a:	4013      	ands	r3, r2
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	6812      	ldr	r2, [r2, #0]
 8003740:	0691      	lsls	r1, r2, #26
 8003742:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003744:	430a      	orrs	r2, r1
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003750:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003752:	e04b      	b.n	80037ec <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800375a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	069b      	lsls	r3, r3, #26
 8003764:	429a      	cmp	r2, r3
 8003766:	d107      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003776:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800377e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	069b      	lsls	r3, r3, #26
 8003788:	429a      	cmp	r2, r3
 800378a:	d107      	bne.n	800379c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800379a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	069b      	lsls	r3, r3, #26
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d107      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80037be:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	069b      	lsls	r3, r3, #26
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d10a      	bne.n	80037ea <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80037e2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80037e4:	e001      	b.n	80037ea <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80037e6:	bf00      	nop
 80037e8:	e000      	b.n	80037ec <HAL_ADC_ConfigChannel+0x324>
      break;
 80037ea:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d108      	bne.n	800380c <HAL_ADC_ConfigChannel+0x344>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_ADC_ConfigChannel+0x344>
 8003808:	2301      	movs	r3, #1
 800380a:	e000      	b.n	800380e <HAL_ADC_ConfigChannel+0x346>
 800380c:	2300      	movs	r3, #0
 800380e:	2b00      	cmp	r3, #0
 8003810:	f040 8130 	bne.w	8003a74 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d00f      	beq.n	800383c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2201      	movs	r2, #1
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	43da      	mvns	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	400a      	ands	r2, r1
 8003836:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800383a:	e049      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2201      	movs	r2, #1
 800384a:	409a      	lsls	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b09      	cmp	r3, #9
 800385c:	d91c      	bls.n	8003898 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6999      	ldr	r1, [r3, #24]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	4613      	mov	r3, r2
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	4413      	add	r3, r2
 800386e:	3b1b      	subs	r3, #27
 8003870:	2207      	movs	r2, #7
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	43db      	mvns	r3, r3
 8003878:	4019      	ands	r1, r3
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	6898      	ldr	r0, [r3, #8]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	4613      	mov	r3, r2
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	4413      	add	r3, r2
 8003888:	3b1b      	subs	r3, #27
 800388a:	fa00 f203 	lsl.w	r2, r0, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	619a      	str	r2, [r3, #24]
 8003896:	e01b      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6959      	ldr	r1, [r3, #20]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	4613      	mov	r3, r2
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	4413      	add	r3, r2
 80038aa:	2207      	movs	r2, #7
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	4019      	ands	r1, r3
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	6898      	ldr	r0, [r3, #8]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	4613      	mov	r3, r2
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	4413      	add	r3, r2
 80038c4:	fa00 f203 	lsl.w	r2, r0, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038d8:	d004      	beq.n	80038e4 <HAL_ADC_ConfigChannel+0x41c>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a18      	ldr	r2, [pc, #96]	; (8003940 <HAL_ADC_ConfigChannel+0x478>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d101      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x420>
 80038e4:	4b17      	ldr	r3, [pc, #92]	; (8003944 <HAL_ADC_ConfigChannel+0x47c>)
 80038e6:	e000      	b.n	80038ea <HAL_ADC_ConfigChannel+0x422>
 80038e8:	4b17      	ldr	r3, [pc, #92]	; (8003948 <HAL_ADC_ConfigChannel+0x480>)
 80038ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2b10      	cmp	r3, #16
 80038f2:	d105      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80038f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d015      	beq.n	800392c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003904:	2b11      	cmp	r3, #17
 8003906:	d105      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003908:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00b      	beq.n	800392c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003918:	2b12      	cmp	r3, #18
 800391a:	f040 80ab 	bne.w	8003a74 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800391e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003926:	2b00      	cmp	r3, #0
 8003928:	f040 80a4 	bne.w	8003a74 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003934:	d10a      	bne.n	800394c <HAL_ADC_ConfigChannel+0x484>
 8003936:	4b02      	ldr	r3, [pc, #8]	; (8003940 <HAL_ADC_ConfigChannel+0x478>)
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	e022      	b.n	8003982 <HAL_ADC_ConfigChannel+0x4ba>
 800393c:	83fff000 	.word	0x83fff000
 8003940:	50000100 	.word	0x50000100
 8003944:	50000300 	.word	0x50000300
 8003948:	50000700 	.word	0x50000700
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a4e      	ldr	r2, [pc, #312]	; (8003a8c <HAL_ADC_ConfigChannel+0x5c4>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d103      	bne.n	800395e <HAL_ADC_ConfigChannel+0x496>
 8003956:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	e011      	b.n	8003982 <HAL_ADC_ConfigChannel+0x4ba>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a4b      	ldr	r2, [pc, #300]	; (8003a90 <HAL_ADC_ConfigChannel+0x5c8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d102      	bne.n	800396e <HAL_ADC_ConfigChannel+0x4a6>
 8003968:	4b4a      	ldr	r3, [pc, #296]	; (8003a94 <HAL_ADC_ConfigChannel+0x5cc>)
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	e009      	b.n	8003982 <HAL_ADC_ConfigChannel+0x4ba>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a48      	ldr	r2, [pc, #288]	; (8003a94 <HAL_ADC_ConfigChannel+0x5cc>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d102      	bne.n	800397e <HAL_ADC_ConfigChannel+0x4b6>
 8003978:	4b45      	ldr	r3, [pc, #276]	; (8003a90 <HAL_ADC_ConfigChannel+0x5c8>)
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	e001      	b.n	8003982 <HAL_ADC_ConfigChannel+0x4ba>
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 0303 	and.w	r3, r3, #3
 800398c:	2b01      	cmp	r3, #1
 800398e:	d108      	bne.n	80039a2 <HAL_ADC_ConfigChannel+0x4da>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_ADC_ConfigChannel+0x4da>
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x4dc>
 80039a2:	2300      	movs	r3, #0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d150      	bne.n	8003a4a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80039a8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d010      	beq.n	80039d0 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d107      	bne.n	80039ca <HAL_ADC_ConfigChannel+0x502>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <HAL_ADC_ConfigChannel+0x502>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <HAL_ADC_ConfigChannel+0x504>
 80039ca:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d13c      	bne.n	8003a4a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b10      	cmp	r3, #16
 80039d6:	d11d      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x54c>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039e0:	d118      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80039e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80039ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ec:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039ee:	4b2a      	ldr	r3, [pc, #168]	; (8003a98 <HAL_ADC_ConfigChannel+0x5d0>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a2a      	ldr	r2, [pc, #168]	; (8003a9c <HAL_ADC_ConfigChannel+0x5d4>)
 80039f4:	fba2 2303 	umull	r2, r3, r2, r3
 80039f8:	0c9a      	lsrs	r2, r3, #18
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a04:	e002      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f9      	bne.n	8003a06 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003a12:	e02e      	b.n	8003a72 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b11      	cmp	r3, #17
 8003a1a:	d10b      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x56c>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a24:	d106      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003a2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a30:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003a32:	e01e      	b.n	8003a72 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2b12      	cmp	r3, #18
 8003a3a:	d11a      	bne.n	8003a72 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003a44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a46:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003a48:	e013      	b.n	8003a72 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f043 0220 	orr.w	r2, r3, #32
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003a5c:	e00a      	b.n	8003a74 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f043 0220 	orr.w	r2, r3, #32
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003a70:	e000      	b.n	8003a74 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003a72:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003a7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	376c      	adds	r7, #108	; 0x6c
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	50000100 	.word	0x50000100
 8003a90:	50000400 	.word	0x50000400
 8003a94:	50000500 	.word	0x50000500
 8003a98:	20000054 	.word	0x20000054
 8003a9c:	431bde83 	.word	0x431bde83

08003aa0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b099      	sub	sp, #100	; 0x64
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ab8:	d102      	bne.n	8003ac0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003aba:	4b6d      	ldr	r3, [pc, #436]	; (8003c70 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	e01a      	b.n	8003af6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a6a      	ldr	r2, [pc, #424]	; (8003c70 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d103      	bne.n	8003ad2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003aca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ace:	60bb      	str	r3, [r7, #8]
 8003ad0:	e011      	b.n	8003af6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a67      	ldr	r2, [pc, #412]	; (8003c74 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d102      	bne.n	8003ae2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003adc:	4b66      	ldr	r3, [pc, #408]	; (8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003ade:	60bb      	str	r3, [r7, #8]
 8003ae0:	e009      	b.n	8003af6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a64      	ldr	r2, [pc, #400]	; (8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d102      	bne.n	8003af2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003aec:	4b61      	ldr	r3, [pc, #388]	; (8003c74 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003aee:	60bb      	str	r3, [r7, #8]
 8003af0:	e001      	b.n	8003af6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003af2:	2300      	movs	r3, #0
 8003af4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0b0      	b.n	8003c62 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e0a9      	b.n	8003c62 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f040 808d 	bne.w	8003c40 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f040 8086 	bne.w	8003c40 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b3c:	d004      	beq.n	8003b48 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a4b      	ldr	r2, [pc, #300]	; (8003c70 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d101      	bne.n	8003b4c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003b48:	4b4c      	ldr	r3, [pc, #304]	; (8003c7c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003b4a:	e000      	b.n	8003b4e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003b4c:	4b4c      	ldr	r3, [pc, #304]	; (8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003b4e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d040      	beq.n	8003bda <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003b58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	6859      	ldr	r1, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b6a:	035b      	lsls	r3, r3, #13
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b72:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d108      	bne.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003b90:	2301      	movs	r3, #1
 8003b92:	e000      	b.n	8003b96 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003b94:	2300      	movs	r3, #0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d15c      	bne.n	8003c54 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d107      	bne.n	8003bb6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e000      	b.n	8003bb8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003bb6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d14b      	bne.n	8003c54 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003bbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003bc4:	f023 030f 	bic.w	r3, r3, #15
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	6811      	ldr	r1, [r2, #0]
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	6892      	ldr	r2, [r2, #8]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bd6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bd8:	e03c      	b.n	8003c54 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003be2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003be4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 0303 	and.w	r3, r3, #3
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d108      	bne.n	8003c06 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003c06:	2300      	movs	r3, #0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d123      	bne.n	8003c54 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d107      	bne.n	8003c28 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003c24:	2301      	movs	r3, #1
 8003c26:	e000      	b.n	8003c2a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003c28:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d112      	bne.n	8003c54 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003c2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c36:	f023 030f 	bic.w	r3, r3, #15
 8003c3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c3c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c3e:	e009      	b.n	8003c54 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	f043 0220 	orr.w	r2, r3, #32
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003c52:	e000      	b.n	8003c56 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c54:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003c5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003c62:	4618      	mov	r0, r3
 8003c64:	3764      	adds	r7, #100	; 0x64
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	50000100 	.word	0x50000100
 8003c74:	50000400 	.word	0x50000400
 8003c78:	50000500 	.word	0x50000500
 8003c7c:	50000300 	.word	0x50000300
 8003c80:	50000700 	.word	0x50000700

08003c84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d108      	bne.n	8003cb0 <ADC_Enable+0x2c>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <ADC_Enable+0x2c>
 8003cac:	2301      	movs	r3, #1
 8003cae:	e000      	b.n	8003cb2 <ADC_Enable+0x2e>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d143      	bne.n	8003d3e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	4b22      	ldr	r3, [pc, #136]	; (8003d48 <ADC_Enable+0xc4>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00d      	beq.n	8003ce0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	f043 0210 	orr.w	r2, r3, #16
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd4:	f043 0201 	orr.w	r2, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e02f      	b.n	8003d40 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0201 	orr.w	r2, r2, #1
 8003cee:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003cf0:	f7fe fd52 	bl	8002798 <HAL_GetTick>
 8003cf4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003cf6:	e01b      	b.n	8003d30 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003cf8:	f7fe fd4e 	bl	8002798 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d914      	bls.n	8003d30 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d00d      	beq.n	8003d30 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d18:	f043 0210 	orr.w	r2, r3, #16
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d24:	f043 0201 	orr.w	r2, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e007      	b.n	8003d40 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d1dc      	bne.n	8003cf8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	8000003f 	.word	0x8000003f

08003d4c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d108      	bne.n	8003d78 <ADC_Disable+0x2c>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <ADC_Disable+0x2c>
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <ADC_Disable+0x2e>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d047      	beq.n	8003e0e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 030d 	and.w	r3, r3, #13
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d10f      	bne.n	8003dac <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0202 	orr.w	r2, r2, #2
 8003d9a:	609a      	str	r2, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2203      	movs	r2, #3
 8003da2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003da4:	f7fe fcf8 	bl	8002798 <HAL_GetTick>
 8003da8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003daa:	e029      	b.n	8003e00 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	f043 0210 	orr.w	r2, r3, #16
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbc:	f043 0201 	orr.w	r2, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e023      	b.n	8003e10 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003dc8:	f7fe fce6 	bl	8002798 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d914      	bls.n	8003e00 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d10d      	bne.n	8003e00 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	f043 0210 	orr.w	r2, r3, #16
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df4:	f043 0201 	orr.w	r2, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e007      	b.n	8003e10 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d0dc      	beq.n	8003dc8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 030c 	and.w	r3, r3, #12
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 809b 	beq.w	8003f74 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e4c:	d12a      	bne.n	8003ea4 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d126      	bne.n	8003ea4 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d122      	bne.n	8003ea4 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8003e5e:	230c      	movs	r3, #12
 8003e60:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003e62:	e014      	b.n	8003e8e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	4a46      	ldr	r2, [pc, #280]	; (8003f80 <ADC_ConversionStop+0x168>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d90d      	bls.n	8003e88 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	f043 0210 	orr.w	r2, r3, #16
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7c:	f043 0201 	orr.w	r2, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e076      	b.n	8003f76 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e98:	2b40      	cmp	r3, #64	; 0x40
 8003e9a:	d1e3      	bne.n	8003e64 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2240      	movs	r2, #64	; 0x40
 8003ea2:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	2b60      	cmp	r3, #96	; 0x60
 8003ea8:	d015      	beq.n	8003ed6 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d10e      	bne.n	8003ed6 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d107      	bne.n	8003ed6 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f042 0210 	orr.w	r2, r2, #16
 8003ed4:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b0c      	cmp	r3, #12
 8003eda:	d015      	beq.n	8003f08 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b08      	cmp	r3, #8
 8003ee8:	d10e      	bne.n	8003f08 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d107      	bne.n	8003f08 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0220 	orr.w	r2, r2, #32
 8003f06:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2b60      	cmp	r3, #96	; 0x60
 8003f0c:	d005      	beq.n	8003f1a <ADC_ConversionStop+0x102>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b6c      	cmp	r3, #108	; 0x6c
 8003f12:	d105      	bne.n	8003f20 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003f14:	230c      	movs	r3, #12
 8003f16:	617b      	str	r3, [r7, #20]
        break;
 8003f18:	e005      	b.n	8003f26 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003f1a:	2308      	movs	r3, #8
 8003f1c:	617b      	str	r3, [r7, #20]
        break;
 8003f1e:	e002      	b.n	8003f26 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003f20:	2304      	movs	r3, #4
 8003f22:	617b      	str	r3, [r7, #20]
        break;
 8003f24:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003f26:	f7fe fc37 	bl	8002798 <HAL_GetTick>
 8003f2a:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003f2c:	e01b      	b.n	8003f66 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003f2e:	f7fe fc33 	bl	8002798 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b0b      	cmp	r3, #11
 8003f3a:	d914      	bls.n	8003f66 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00d      	beq.n	8003f66 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	f043 0210 	orr.w	r2, r3, #16
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5a:	f043 0201 	orr.w	r2, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e007      	b.n	8003f76 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1dc      	bne.n	8003f2e <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	000993ff 	.word	0x000993ff

08003f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f94:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fb6:	4a04      	ldr	r2, [pc, #16]	; (8003fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	60d3      	str	r3, [r2, #12]
}
 8003fbc:	bf00      	nop
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	e000ed00 	.word	0xe000ed00

08003fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fd0:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	0a1b      	lsrs	r3, r3, #8
 8003fd6:	f003 0307 	and.w	r3, r3, #7
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	e000ed00 	.word	0xe000ed00

08003fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	db0b      	blt.n	8004012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
 8003ffc:	f003 021f 	and.w	r2, r3, #31
 8004000:	4907      	ldr	r1, [pc, #28]	; (8004020 <__NVIC_EnableIRQ+0x38>)
 8004002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	2001      	movs	r0, #1
 800400a:	fa00 f202 	lsl.w	r2, r0, r2
 800400e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	e000e100 	.word	0xe000e100

08004024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	6039      	str	r1, [r7, #0]
 800402e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004034:	2b00      	cmp	r3, #0
 8004036:	db0a      	blt.n	800404e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	b2da      	uxtb	r2, r3
 800403c:	490c      	ldr	r1, [pc, #48]	; (8004070 <__NVIC_SetPriority+0x4c>)
 800403e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004042:	0112      	lsls	r2, r2, #4
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	440b      	add	r3, r1
 8004048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800404c:	e00a      	b.n	8004064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	b2da      	uxtb	r2, r3
 8004052:	4908      	ldr	r1, [pc, #32]	; (8004074 <__NVIC_SetPriority+0x50>)
 8004054:	79fb      	ldrb	r3, [r7, #7]
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	3b04      	subs	r3, #4
 800405c:	0112      	lsls	r2, r2, #4
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	440b      	add	r3, r1
 8004062:	761a      	strb	r2, [r3, #24]
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	e000e100 	.word	0xe000e100
 8004074:	e000ed00 	.word	0xe000ed00

08004078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004078:	b480      	push	{r7}
 800407a:	b089      	sub	sp, #36	; 0x24
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f1c3 0307 	rsb	r3, r3, #7
 8004092:	2b04      	cmp	r3, #4
 8004094:	bf28      	it	cs
 8004096:	2304      	movcs	r3, #4
 8004098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	3304      	adds	r3, #4
 800409e:	2b06      	cmp	r3, #6
 80040a0:	d902      	bls.n	80040a8 <NVIC_EncodePriority+0x30>
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	3b03      	subs	r3, #3
 80040a6:	e000      	b.n	80040aa <NVIC_EncodePriority+0x32>
 80040a8:	2300      	movs	r3, #0
 80040aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040ac:	f04f 32ff 	mov.w	r2, #4294967295
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	43da      	mvns	r2, r3
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	401a      	ands	r2, r3
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040c0:	f04f 31ff 	mov.w	r1, #4294967295
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ca:	43d9      	mvns	r1, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d0:	4313      	orrs	r3, r2
         );
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3724      	adds	r7, #36	; 0x24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
	...

080040e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040f0:	d301      	bcc.n	80040f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040f2:	2301      	movs	r3, #1
 80040f4:	e00f      	b.n	8004116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040f6:	4a0a      	ldr	r2, [pc, #40]	; (8004120 <SysTick_Config+0x40>)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040fe:	210f      	movs	r1, #15
 8004100:	f04f 30ff 	mov.w	r0, #4294967295
 8004104:	f7ff ff8e 	bl	8004024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004108:	4b05      	ldr	r3, [pc, #20]	; (8004120 <SysTick_Config+0x40>)
 800410a:	2200      	movs	r2, #0
 800410c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800410e:	4b04      	ldr	r3, [pc, #16]	; (8004120 <SysTick_Config+0x40>)
 8004110:	2207      	movs	r2, #7
 8004112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	e000e010 	.word	0xe000e010

08004124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7ff ff29 	bl	8003f84 <__NVIC_SetPriorityGrouping>
}
 8004132:	bf00      	nop
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b086      	sub	sp, #24
 800413e:	af00      	add	r7, sp, #0
 8004140:	4603      	mov	r3, r0
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	607a      	str	r2, [r7, #4]
 8004146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004148:	2300      	movs	r3, #0
 800414a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800414c:	f7ff ff3e 	bl	8003fcc <__NVIC_GetPriorityGrouping>
 8004150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	68b9      	ldr	r1, [r7, #8]
 8004156:	6978      	ldr	r0, [r7, #20]
 8004158:	f7ff ff8e 	bl	8004078 <NVIC_EncodePriority>
 800415c:	4602      	mov	r2, r0
 800415e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004162:	4611      	mov	r1, r2
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff ff5d 	bl	8004024 <__NVIC_SetPriority>
}
 800416a:	bf00      	nop
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b082      	sub	sp, #8
 8004176:	af00      	add	r7, sp, #0
 8004178:	4603      	mov	r3, r0
 800417a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800417c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff ff31 	bl	8003fe8 <__NVIC_EnableIRQ>
}
 8004186:	bf00      	nop
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b082      	sub	sp, #8
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7ff ffa2 	bl	80040e0 <SysTick_Config>
 800419c:	4603      	mov	r3, r0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d008      	beq.n	80041ca <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2204      	movs	r2, #4
 80041bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e020      	b.n	800420c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 020e 	bic.w	r2, r2, #14
 80041d8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0201 	bic.w	r2, r2, #1
 80041e8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f2:	2101      	movs	r1, #1
 80041f4:	fa01 f202 	lsl.w	r2, r1, r2
 80041f8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800422a:	2b02      	cmp	r3, #2
 800422c:	d005      	beq.n	800423a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2204      	movs	r2, #4
 8004232:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	73fb      	strb	r3, [r7, #15]
 8004238:	e027      	b.n	800428a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 020e 	bic.w	r2, r2, #14
 8004248:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0201 	bic.w	r2, r2, #1
 8004258:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004262:	2101      	movs	r1, #1
 8004264:	fa01 f202 	lsl.w	r2, r1, r2
 8004268:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	4798      	blx	r3
    } 
  }
  return status;
 800428a:	7bfb      	ldrb	r3, [r7, #15]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800429e:	2300      	movs	r3, #0
 80042a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042a2:	e154      	b.n	800454e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	2101      	movs	r1, #1
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	fa01 f303 	lsl.w	r3, r1, r3
 80042b0:	4013      	ands	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 8146 	beq.w	8004548 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f003 0303 	and.w	r3, r3, #3
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d005      	beq.n	80042d4 <HAL_GPIO_Init+0x40>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d130      	bne.n	8004336 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	2203      	movs	r2, #3
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	43db      	mvns	r3, r3
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4013      	ands	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800430a:	2201      	movs	r2, #1
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	43db      	mvns	r3, r3
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4013      	ands	r3, r2
 8004318:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	091b      	lsrs	r3, r3, #4
 8004320:	f003 0201 	and.w	r2, r3, #1
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	fa02 f303 	lsl.w	r3, r2, r3
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	4313      	orrs	r3, r2
 800432e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	2b03      	cmp	r3, #3
 8004340:	d017      	beq.n	8004372 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	2203      	movs	r2, #3
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	43db      	mvns	r3, r3
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4013      	ands	r3, r2
 8004358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d123      	bne.n	80043c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	08da      	lsrs	r2, r3, #3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3208      	adds	r2, #8
 8004386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800438a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	220f      	movs	r2, #15
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	43db      	mvns	r3, r3
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	4013      	ands	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	691a      	ldr	r2, [r3, #16]
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	fa02 f303 	lsl.w	r3, r2, r3
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	08da      	lsrs	r2, r3, #3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3208      	adds	r2, #8
 80043c0:	6939      	ldr	r1, [r7, #16]
 80043c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	2203      	movs	r2, #3
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	43db      	mvns	r3, r3
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4013      	ands	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f003 0203 	and.w	r2, r3, #3
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 80a0 	beq.w	8004548 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004408:	4b58      	ldr	r3, [pc, #352]	; (800456c <HAL_GPIO_Init+0x2d8>)
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	4a57      	ldr	r2, [pc, #348]	; (800456c <HAL_GPIO_Init+0x2d8>)
 800440e:	f043 0301 	orr.w	r3, r3, #1
 8004412:	6193      	str	r3, [r2, #24]
 8004414:	4b55      	ldr	r3, [pc, #340]	; (800456c <HAL_GPIO_Init+0x2d8>)
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	60bb      	str	r3, [r7, #8]
 800441e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004420:	4a53      	ldr	r2, [pc, #332]	; (8004570 <HAL_GPIO_Init+0x2dc>)
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	089b      	lsrs	r3, r3, #2
 8004426:	3302      	adds	r3, #2
 8004428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800442c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	220f      	movs	r2, #15
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	43db      	mvns	r3, r3
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	4013      	ands	r3, r2
 8004442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800444a:	d019      	beq.n	8004480 <HAL_GPIO_Init+0x1ec>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a49      	ldr	r2, [pc, #292]	; (8004574 <HAL_GPIO_Init+0x2e0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d013      	beq.n	800447c <HAL_GPIO_Init+0x1e8>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a48      	ldr	r2, [pc, #288]	; (8004578 <HAL_GPIO_Init+0x2e4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d00d      	beq.n	8004478 <HAL_GPIO_Init+0x1e4>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a47      	ldr	r2, [pc, #284]	; (800457c <HAL_GPIO_Init+0x2e8>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d007      	beq.n	8004474 <HAL_GPIO_Init+0x1e0>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a46      	ldr	r2, [pc, #280]	; (8004580 <HAL_GPIO_Init+0x2ec>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d101      	bne.n	8004470 <HAL_GPIO_Init+0x1dc>
 800446c:	2304      	movs	r3, #4
 800446e:	e008      	b.n	8004482 <HAL_GPIO_Init+0x1ee>
 8004470:	2305      	movs	r3, #5
 8004472:	e006      	b.n	8004482 <HAL_GPIO_Init+0x1ee>
 8004474:	2303      	movs	r3, #3
 8004476:	e004      	b.n	8004482 <HAL_GPIO_Init+0x1ee>
 8004478:	2302      	movs	r3, #2
 800447a:	e002      	b.n	8004482 <HAL_GPIO_Init+0x1ee>
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <HAL_GPIO_Init+0x1ee>
 8004480:	2300      	movs	r3, #0
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	f002 0203 	and.w	r2, r2, #3
 8004488:	0092      	lsls	r2, r2, #2
 800448a:	4093      	lsls	r3, r2
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004492:	4937      	ldr	r1, [pc, #220]	; (8004570 <HAL_GPIO_Init+0x2dc>)
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	089b      	lsrs	r3, r3, #2
 8004498:	3302      	adds	r3, #2
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044a0:	4b38      	ldr	r3, [pc, #224]	; (8004584 <HAL_GPIO_Init+0x2f0>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	43db      	mvns	r3, r3
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4013      	ands	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80044c4:	4a2f      	ldr	r2, [pc, #188]	; (8004584 <HAL_GPIO_Init+0x2f0>)
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044ca:	4b2e      	ldr	r3, [pc, #184]	; (8004584 <HAL_GPIO_Init+0x2f0>)
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	43db      	mvns	r3, r3
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4013      	ands	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80044ee:	4a25      	ldr	r2, [pc, #148]	; (8004584 <HAL_GPIO_Init+0x2f0>)
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044f4:	4b23      	ldr	r3, [pc, #140]	; (8004584 <HAL_GPIO_Init+0x2f0>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	43db      	mvns	r3, r3
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4013      	ands	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4313      	orrs	r3, r2
 8004516:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004518:	4a1a      	ldr	r2, [pc, #104]	; (8004584 <HAL_GPIO_Init+0x2f0>)
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800451e:	4b19      	ldr	r3, [pc, #100]	; (8004584 <HAL_GPIO_Init+0x2f0>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	43db      	mvns	r3, r3
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	4013      	ands	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004542:	4a10      	ldr	r2, [pc, #64]	; (8004584 <HAL_GPIO_Init+0x2f0>)
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	3301      	adds	r3, #1
 800454c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	fa22 f303 	lsr.w	r3, r2, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	f47f aea3 	bne.w	80042a4 <HAL_GPIO_Init+0x10>
  }
}
 800455e:	bf00      	nop
 8004560:	bf00      	nop
 8004562:	371c      	adds	r7, #28
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	40021000 	.word	0x40021000
 8004570:	40010000 	.word	0x40010000
 8004574:	48000400 	.word	0x48000400
 8004578:	48000800 	.word	0x48000800
 800457c:	48000c00 	.word	0x48000c00
 8004580:	48001000 	.word	0x48001000
 8004584:	40010400 	.word	0x40010400

08004588 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	887b      	ldrh	r3, [r7, #2]
 800459a:	4013      	ands	r3, r2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045a0:	2301      	movs	r3, #1
 80045a2:	73fb      	strb	r3, [r7, #15]
 80045a4:	e001      	b.n	80045aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045a6:	2300      	movs	r3, #0
 80045a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	807b      	strh	r3, [r7, #2]
 80045c4:	4613      	mov	r3, r2
 80045c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045c8:	787b      	ldrb	r3, [r7, #1]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045ce:	887a      	ldrh	r2, [r7, #2]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045d4:	e002      	b.n	80045dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045d6:	887a      	ldrh	r2, [r7, #2]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	4603      	mov	r3, r0
 80045f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80045f2:	4b08      	ldr	r3, [pc, #32]	; (8004614 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045f4:	695a      	ldr	r2, [r3, #20]
 80045f6:	88fb      	ldrh	r3, [r7, #6]
 80045f8:	4013      	ands	r3, r2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d006      	beq.n	800460c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045fe:	4a05      	ldr	r2, [pc, #20]	; (8004614 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004600:	88fb      	ldrh	r3, [r7, #6]
 8004602:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004604:	88fb      	ldrh	r3, [r7, #6]
 8004606:	4618      	mov	r0, r3
 8004608:	f7fd fab4 	bl	8001b74 <HAL_GPIO_EXTI_Callback>
  }
}
 800460c:	bf00      	nop
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40010400 	.word	0x40010400

08004618 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e081      	b.n	800472e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d106      	bne.n	8004644 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7fd fc0e 	bl	8001e60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2224      	movs	r2, #36	; 0x24
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0201 	bic.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004668:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004678:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d107      	bne.n	8004692 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689a      	ldr	r2, [r3, #8]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800468e:	609a      	str	r2, [r3, #8]
 8004690:	e006      	b.n	80046a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689a      	ldr	r2, [r3, #8]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800469e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d104      	bne.n	80046b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6812      	ldr	r2, [r2, #0]
 80046bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	69d9      	ldr	r1, [r3, #28]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1a      	ldr	r2, [r3, #32]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0201 	orr.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
 800473e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b20      	cmp	r3, #32
 800474a:	d138      	bne.n	80047be <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004752:	2b01      	cmp	r3, #1
 8004754:	d101      	bne.n	800475a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004756:	2302      	movs	r3, #2
 8004758:	e032      	b.n	80047c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2224      	movs	r2, #36	; 0x24
 8004766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0201 	bic.w	r2, r2, #1
 8004778:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004788:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6819      	ldr	r1, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f042 0201 	orr.w	r2, r2, #1
 80047a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2220      	movs	r2, #32
 80047ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	e000      	b.n	80047c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047be:	2302      	movs	r3, #2
  }
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b20      	cmp	r3, #32
 80047e0:	d139      	bne.n	8004856 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e033      	b.n	8004858 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2224      	movs	r2, #36	; 0x24
 80047fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0201 	bic.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800481e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	021b      	lsls	r3, r3, #8
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f042 0201 	orr.w	r2, r2, #1
 8004840:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	e000      	b.n	8004858 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004856:	2302      	movs	r3, #2
  }
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004866:	b08b      	sub	sp, #44	; 0x2c
 8004868:	af06      	add	r7, sp, #24
 800486a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e0c4      	b.n	8004a00 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d106      	bne.n	8004890 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7fd fc28 	bl	80020e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2203      	movs	r2, #3
 8004894:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4618      	mov	r0, r3
 800489e:	f004 fad1 	bl	8008e44 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048a2:	2300      	movs	r3, #0
 80048a4:	73fb      	strb	r3, [r7, #15]
 80048a6:	e040      	b.n	800492a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	4613      	mov	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	440b      	add	r3, r1
 80048b8:	3301      	adds	r3, #1
 80048ba:	2201      	movs	r2, #1
 80048bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80048be:	7bfb      	ldrb	r3, [r7, #15]
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	4613      	mov	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	440b      	add	r3, r1
 80048ce:	7bfa      	ldrb	r2, [r7, #15]
 80048d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	4613      	mov	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	440b      	add	r3, r1
 80048e2:	3303      	adds	r3, #3
 80048e4:	2200      	movs	r2, #0
 80048e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80048e8:	7bfa      	ldrb	r2, [r7, #15]
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	4613      	mov	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	440b      	add	r3, r1
 80048f6:	3338      	adds	r3, #56	; 0x38
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80048fc:	7bfa      	ldrb	r2, [r7, #15]
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	4613      	mov	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	440b      	add	r3, r1
 800490a:	333c      	adds	r3, #60	; 0x3c
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004910:	7bfa      	ldrb	r2, [r7, #15]
 8004912:	6879      	ldr	r1, [r7, #4]
 8004914:	4613      	mov	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	440b      	add	r3, r1
 800491e:	3340      	adds	r3, #64	; 0x40
 8004920:	2200      	movs	r2, #0
 8004922:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	3301      	adds	r3, #1
 8004928:	73fb      	strb	r3, [r7, #15]
 800492a:	7bfa      	ldrb	r2, [r7, #15]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	429a      	cmp	r2, r3
 8004932:	d3b9      	bcc.n	80048a8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004934:	2300      	movs	r3, #0
 8004936:	73fb      	strb	r3, [r7, #15]
 8004938:	e044      	b.n	80049c4 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800493a:	7bfa      	ldrb	r2, [r7, #15]
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	4613      	mov	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	440b      	add	r3, r1
 8004948:	f203 1369 	addw	r3, r3, #361	; 0x169
 800494c:	2200      	movs	r2, #0
 800494e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004950:	7bfa      	ldrb	r2, [r7, #15]
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	4613      	mov	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	440b      	add	r3, r1
 800495e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004962:	7bfa      	ldrb	r2, [r7, #15]
 8004964:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004966:	7bfa      	ldrb	r2, [r7, #15]
 8004968:	6879      	ldr	r1, [r7, #4]
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	440b      	add	r3, r1
 8004974:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004978:	2200      	movs	r2, #0
 800497a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800497c:	7bfa      	ldrb	r2, [r7, #15]
 800497e:	6879      	ldr	r1, [r7, #4]
 8004980:	4613      	mov	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	440b      	add	r3, r1
 800498a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800498e:	2200      	movs	r2, #0
 8004990:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004992:	7bfa      	ldrb	r2, [r7, #15]
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	4613      	mov	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	440b      	add	r3, r1
 80049a0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80049a8:	7bfa      	ldrb	r2, [r7, #15]
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	440b      	add	r3, r1
 80049b6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80049ba:	2200      	movs	r2, #0
 80049bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	3301      	adds	r3, #1
 80049c2:	73fb      	strb	r3, [r7, #15]
 80049c4:	7bfa      	ldrb	r2, [r7, #15]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d3b5      	bcc.n	800493a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	603b      	str	r3, [r7, #0]
 80049d4:	687e      	ldr	r6, [r7, #4]
 80049d6:	466d      	mov	r5, sp
 80049d8:	f106 0410 	add.w	r4, r6, #16
 80049dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	602b      	str	r3, [r5, #0]
 80049e4:	1d33      	adds	r3, r6, #4
 80049e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049e8:	6838      	ldr	r0, [r7, #0]
 80049ea:	f004 fa46 	bl	8008e7a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a18:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d102      	bne.n	8004a2e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	f001 b823 	b.w	8005a74 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 817d 	beq.w	8004d3e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004a44:	4bbc      	ldr	r3, [pc, #752]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f003 030c 	and.w	r3, r3, #12
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d00c      	beq.n	8004a6a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a50:	4bb9      	ldr	r3, [pc, #740]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f003 030c 	and.w	r3, r3, #12
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d15c      	bne.n	8004b16 <HAL_RCC_OscConfig+0x10e>
 8004a5c:	4bb6      	ldr	r3, [pc, #728]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a68:	d155      	bne.n	8004b16 <HAL_RCC_OscConfig+0x10e>
 8004a6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a6e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a72:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004a76:	fa93 f3a3 	rbit	r3, r3
 8004a7a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a7e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a82:	fab3 f383 	clz	r3, r3
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	095b      	lsrs	r3, r3, #5
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	f043 0301 	orr.w	r3, r3, #1
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d102      	bne.n	8004a9c <HAL_RCC_OscConfig+0x94>
 8004a96:	4ba8      	ldr	r3, [pc, #672]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	e015      	b.n	8004ac8 <HAL_RCC_OscConfig+0xc0>
 8004a9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004aa0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004aa8:	fa93 f3a3 	rbit	r3, r3
 8004aac:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004ab0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ab4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004ab8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004abc:	fa93 f3a3 	rbit	r3, r3
 8004ac0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004ac4:	4b9c      	ldr	r3, [pc, #624]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004acc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004ad0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004ad4:	fa92 f2a2 	rbit	r2, r2
 8004ad8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004adc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004ae0:	fab2 f282 	clz	r2, r2
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	f042 0220 	orr.w	r2, r2, #32
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	f002 021f 	and.w	r2, r2, #31
 8004af0:	2101      	movs	r1, #1
 8004af2:	fa01 f202 	lsl.w	r2, r1, r2
 8004af6:	4013      	ands	r3, r2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 811f 	beq.w	8004d3c <HAL_RCC_OscConfig+0x334>
 8004afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f040 8116 	bne.w	8004d3c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	f000 bfaf 	b.w	8005a74 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b26:	d106      	bne.n	8004b36 <HAL_RCC_OscConfig+0x12e>
 8004b28:	4b83      	ldr	r3, [pc, #524]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a82      	ldr	r2, [pc, #520]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	e036      	b.n	8004ba4 <HAL_RCC_OscConfig+0x19c>
 8004b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10c      	bne.n	8004b60 <HAL_RCC_OscConfig+0x158>
 8004b46:	4b7c      	ldr	r3, [pc, #496]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a7b      	ldr	r2, [pc, #492]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	4b79      	ldr	r3, [pc, #484]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a78      	ldr	r2, [pc, #480]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004b58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	e021      	b.n	8004ba4 <HAL_RCC_OscConfig+0x19c>
 8004b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b70:	d10c      	bne.n	8004b8c <HAL_RCC_OscConfig+0x184>
 8004b72:	4b71      	ldr	r3, [pc, #452]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a70      	ldr	r2, [pc, #448]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	4b6e      	ldr	r3, [pc, #440]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a6d      	ldr	r2, [pc, #436]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	e00b      	b.n	8004ba4 <HAL_RCC_OscConfig+0x19c>
 8004b8c:	4b6a      	ldr	r3, [pc, #424]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a69      	ldr	r2, [pc, #420]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	4b67      	ldr	r3, [pc, #412]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a66      	ldr	r2, [pc, #408]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ba2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ba4:	4b64      	ldr	r3, [pc, #400]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba8:	f023 020f 	bic.w	r2, r3, #15
 8004bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	495f      	ldr	r1, [pc, #380]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d059      	beq.n	8004c82 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bce:	f7fd fde3 	bl	8002798 <HAL_GetTick>
 8004bd2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd6:	e00a      	b.n	8004bee <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bd8:	f7fd fdde 	bl	8002798 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b64      	cmp	r3, #100	; 0x64
 8004be6:	d902      	bls.n	8004bee <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	f000 bf43 	b.w	8005a74 <HAL_RCC_OscConfig+0x106c>
 8004bee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bf2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004bfa:	fa93 f3a3 	rbit	r3, r3
 8004bfe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004c02:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c06:	fab3 f383 	clz	r3, r3
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	095b      	lsrs	r3, r3, #5
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	f043 0301 	orr.w	r3, r3, #1
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d102      	bne.n	8004c20 <HAL_RCC_OscConfig+0x218>
 8004c1a:	4b47      	ldr	r3, [pc, #284]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	e015      	b.n	8004c4c <HAL_RCC_OscConfig+0x244>
 8004c20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c24:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c28:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004c2c:	fa93 f3a3 	rbit	r3, r3
 8004c30:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004c34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c38:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004c3c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004c40:	fa93 f3a3 	rbit	r3, r3
 8004c44:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004c48:	4b3b      	ldr	r3, [pc, #236]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c50:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004c54:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004c58:	fa92 f2a2 	rbit	r2, r2
 8004c5c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004c60:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004c64:	fab2 f282 	clz	r2, r2
 8004c68:	b2d2      	uxtb	r2, r2
 8004c6a:	f042 0220 	orr.w	r2, r2, #32
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	f002 021f 	and.w	r2, r2, #31
 8004c74:	2101      	movs	r1, #1
 8004c76:	fa01 f202 	lsl.w	r2, r1, r2
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0ab      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x1d0>
 8004c80:	e05d      	b.n	8004d3e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c82:	f7fd fd89 	bl	8002798 <HAL_GetTick>
 8004c86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c8a:	e00a      	b.n	8004ca2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c8c:	f7fd fd84 	bl	8002798 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b64      	cmp	r3, #100	; 0x64
 8004c9a:	d902      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	f000 bee9 	b.w	8005a74 <HAL_RCC_OscConfig+0x106c>
 8004ca2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ca6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004caa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004cae:	fa93 f3a3 	rbit	r3, r3
 8004cb2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004cb6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cba:	fab3 f383 	clz	r3, r3
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	095b      	lsrs	r3, r3, #5
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	f043 0301 	orr.w	r3, r3, #1
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d102      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x2cc>
 8004cce:	4b1a      	ldr	r3, [pc, #104]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	e015      	b.n	8004d00 <HAL_RCC_OscConfig+0x2f8>
 8004cd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cd8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cdc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004ce0:	fa93 f3a3 	rbit	r3, r3
 8004ce4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004ce8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cec:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004cf0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004cf4:	fa93 f3a3 	rbit	r3, r3
 8004cf8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004cfc:	4b0e      	ldr	r3, [pc, #56]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d04:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004d08:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004d0c:	fa92 f2a2 	rbit	r2, r2
 8004d10:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004d14:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004d18:	fab2 f282 	clz	r2, r2
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	f042 0220 	orr.w	r2, r2, #32
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	f002 021f 	and.w	r2, r2, #31
 8004d28:	2101      	movs	r1, #1
 8004d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8004d2e:	4013      	ands	r3, r2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1ab      	bne.n	8004c8c <HAL_RCC_OscConfig+0x284>
 8004d34:	e003      	b.n	8004d3e <HAL_RCC_OscConfig+0x336>
 8004d36:	bf00      	nop
 8004d38:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 817d 	beq.w	800504e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004d54:	4ba6      	ldr	r3, [pc, #664]	; (8004ff0 <HAL_RCC_OscConfig+0x5e8>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f003 030c 	and.w	r3, r3, #12
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00b      	beq.n	8004d78 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004d60:	4ba3      	ldr	r3, [pc, #652]	; (8004ff0 <HAL_RCC_OscConfig+0x5e8>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f003 030c 	and.w	r3, r3, #12
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d172      	bne.n	8004e52 <HAL_RCC_OscConfig+0x44a>
 8004d6c:	4ba0      	ldr	r3, [pc, #640]	; (8004ff0 <HAL_RCC_OscConfig+0x5e8>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d16c      	bne.n	8004e52 <HAL_RCC_OscConfig+0x44a>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004d82:	fa93 f3a3 	rbit	r3, r3
 8004d86:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004d8a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d8e:	fab3 f383 	clz	r3, r3
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	095b      	lsrs	r3, r3, #5
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	f043 0301 	orr.w	r3, r3, #1
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d102      	bne.n	8004da8 <HAL_RCC_OscConfig+0x3a0>
 8004da2:	4b93      	ldr	r3, [pc, #588]	; (8004ff0 <HAL_RCC_OscConfig+0x5e8>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	e013      	b.n	8004dd0 <HAL_RCC_OscConfig+0x3c8>
 8004da8:	2302      	movs	r3, #2
 8004daa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dae:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004db2:	fa93 f3a3 	rbit	r3, r3
 8004db6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004dba:	2302      	movs	r3, #2
 8004dbc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004dc0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004dc4:	fa93 f3a3 	rbit	r3, r3
 8004dc8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004dcc:	4b88      	ldr	r3, [pc, #544]	; (8004ff0 <HAL_RCC_OscConfig+0x5e8>)
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004dd6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004dda:	fa92 f2a2 	rbit	r2, r2
 8004dde:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004de2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004de6:	fab2 f282 	clz	r2, r2
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	f042 0220 	orr.w	r2, r2, #32
 8004df0:	b2d2      	uxtb	r2, r2
 8004df2:	f002 021f 	and.w	r2, r2, #31
 8004df6:	2101      	movs	r1, #1
 8004df8:	fa01 f202 	lsl.w	r2, r1, r2
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <HAL_RCC_OscConfig+0x410>
 8004e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d002      	beq.n	8004e18 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	f000 be2e 	b.w	8005a74 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e18:	4b75      	ldr	r3, [pc, #468]	; (8004ff0 <HAL_RCC_OscConfig+0x5e8>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	21f8      	movs	r1, #248	; 0xf8
 8004e2e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e32:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004e36:	fa91 f1a1 	rbit	r1, r1
 8004e3a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004e3e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004e42:	fab1 f181 	clz	r1, r1
 8004e46:	b2c9      	uxtb	r1, r1
 8004e48:	408b      	lsls	r3, r1
 8004e4a:	4969      	ldr	r1, [pc, #420]	; (8004ff0 <HAL_RCC_OscConfig+0x5e8>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e50:	e0fd      	b.n	800504e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 8088 	beq.w	8004f74 <HAL_RCC_OscConfig+0x56c>
 8004e64:	2301      	movs	r3, #1
 8004e66:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004e6e:	fa93 f3a3 	rbit	r3, r3
 8004e72:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004e76:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e7a:	fab3 f383 	clz	r3, r3
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e90:	f7fd fc82 	bl	8002798 <HAL_GetTick>
 8004e94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e98:	e00a      	b.n	8004eb0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e9a:	f7fd fc7d 	bl	8002798 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d902      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	f000 bde2 	b.w	8005a74 <HAL_RCC_OscConfig+0x106c>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004eba:	fa93 f3a3 	rbit	r3, r3
 8004ebe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004ec2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ec6:	fab3 f383 	clz	r3, r3
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	095b      	lsrs	r3, r3, #5
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	f043 0301 	orr.w	r3, r3, #1
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d102      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x4d8>
 8004eda:	4b45      	ldr	r3, [pc, #276]	; (8004ff0 <HAL_RCC_OscConfig+0x5e8>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	e013      	b.n	8004f08 <HAL_RCC_OscConfig+0x500>
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004eea:	fa93 f3a3 	rbit	r3, r3
 8004eee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004ef8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004efc:	fa93 f3a3 	rbit	r3, r3
 8004f00:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004f04:	4b3a      	ldr	r3, [pc, #232]	; (8004ff0 <HAL_RCC_OscConfig+0x5e8>)
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	2202      	movs	r2, #2
 8004f0a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004f0e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004f12:	fa92 f2a2 	rbit	r2, r2
 8004f16:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004f1a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004f1e:	fab2 f282 	clz	r2, r2
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	f042 0220 	orr.w	r2, r2, #32
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	f002 021f 	and.w	r2, r2, #31
 8004f2e:	2101      	movs	r1, #1
 8004f30:	fa01 f202 	lsl.w	r2, r1, r2
 8004f34:	4013      	ands	r3, r2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0af      	beq.n	8004e9a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f3a:	4b2d      	ldr	r3, [pc, #180]	; (8004ff0 <HAL_RCC_OscConfig+0x5e8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	21f8      	movs	r1, #248	; 0xf8
 8004f50:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f54:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004f58:	fa91 f1a1 	rbit	r1, r1
 8004f5c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004f60:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004f64:	fab1 f181 	clz	r1, r1
 8004f68:	b2c9      	uxtb	r1, r1
 8004f6a:	408b      	lsls	r3, r1
 8004f6c:	4920      	ldr	r1, [pc, #128]	; (8004ff0 <HAL_RCC_OscConfig+0x5e8>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	600b      	str	r3, [r1, #0]
 8004f72:	e06c      	b.n	800504e <HAL_RCC_OscConfig+0x646>
 8004f74:	2301      	movs	r3, #1
 8004f76:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f7e:	fa93 f3a3 	rbit	r3, r3
 8004f82:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004f86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f8a:	fab3 f383 	clz	r3, r3
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa0:	f7fd fbfa 	bl	8002798 <HAL_GetTick>
 8004fa4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fa8:	e00a      	b.n	8004fc0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004faa:	f7fd fbf5 	bl	8002798 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d902      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	f000 bd5a 	b.w	8005a74 <HAL_RCC_OscConfig+0x106c>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004fca:	fa93 f3a3 	rbit	r3, r3
 8004fce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004fd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fd6:	fab3 f383 	clz	r3, r3
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	095b      	lsrs	r3, r3, #5
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	f043 0301 	orr.w	r3, r3, #1
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d104      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x5ec>
 8004fea:	4b01      	ldr	r3, [pc, #4]	; (8004ff0 <HAL_RCC_OscConfig+0x5e8>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	e015      	b.n	800501c <HAL_RCC_OscConfig+0x614>
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ffa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ffe:	fa93 f3a3 	rbit	r3, r3
 8005002:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005006:	2302      	movs	r3, #2
 8005008:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800500c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005010:	fa93 f3a3 	rbit	r3, r3
 8005014:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005018:	4bc8      	ldr	r3, [pc, #800]	; (800533c <HAL_RCC_OscConfig+0x934>)
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	2202      	movs	r2, #2
 800501e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005022:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005026:	fa92 f2a2 	rbit	r2, r2
 800502a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800502e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005032:	fab2 f282 	clz	r2, r2
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	f042 0220 	orr.w	r2, r2, #32
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	f002 021f 	and.w	r2, r2, #31
 8005042:	2101      	movs	r1, #1
 8005044:	fa01 f202 	lsl.w	r2, r1, r2
 8005048:	4013      	ands	r3, r2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1ad      	bne.n	8004faa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800504e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005052:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 8110 	beq.w	8005284 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005068:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d079      	beq.n	8005168 <HAL_RCC_OscConfig+0x760>
 8005074:	2301      	movs	r3, #1
 8005076:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800507a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800507e:	fa93 f3a3 	rbit	r3, r3
 8005082:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005086:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800508a:	fab3 f383 	clz	r3, r3
 800508e:	b2db      	uxtb	r3, r3
 8005090:	461a      	mov	r2, r3
 8005092:	4bab      	ldr	r3, [pc, #684]	; (8005340 <HAL_RCC_OscConfig+0x938>)
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	461a      	mov	r2, r3
 800509a:	2301      	movs	r3, #1
 800509c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800509e:	f7fd fb7b 	bl	8002798 <HAL_GetTick>
 80050a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a6:	e00a      	b.n	80050be <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050a8:	f7fd fb76 	bl	8002798 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d902      	bls.n	80050be <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	f000 bcdb 	b.w	8005a74 <HAL_RCC_OscConfig+0x106c>
 80050be:	2302      	movs	r3, #2
 80050c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80050c8:	fa93 f3a3 	rbit	r3, r3
 80050cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80050d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050d4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80050d8:	2202      	movs	r2, #2
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050e0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	fa93 f2a3 	rbit	r2, r3
 80050ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050fc:	2202      	movs	r2, #2
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	fa93 f2a3 	rbit	r2, r3
 800510e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005112:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005116:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005118:	4b88      	ldr	r3, [pc, #544]	; (800533c <HAL_RCC_OscConfig+0x934>)
 800511a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800511c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005120:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005124:	2102      	movs	r1, #2
 8005126:	6019      	str	r1, [r3, #0]
 8005128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800512c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	fa93 f1a3 	rbit	r1, r3
 8005136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800513a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800513e:	6019      	str	r1, [r3, #0]
  return result;
 8005140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005144:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	fab3 f383 	clz	r3, r3
 800514e:	b2db      	uxtb	r3, r3
 8005150:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005154:	b2db      	uxtb	r3, r3
 8005156:	f003 031f 	and.w	r3, r3, #31
 800515a:	2101      	movs	r1, #1
 800515c:	fa01 f303 	lsl.w	r3, r1, r3
 8005160:	4013      	ands	r3, r2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0a0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x6a0>
 8005166:	e08d      	b.n	8005284 <HAL_RCC_OscConfig+0x87c>
 8005168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800516c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005170:	2201      	movs	r2, #1
 8005172:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005178:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	fa93 f2a3 	rbit	r2, r3
 8005182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005186:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800518a:	601a      	str	r2, [r3, #0]
  return result;
 800518c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005190:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005194:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005196:	fab3 f383 	clz	r3, r3
 800519a:	b2db      	uxtb	r3, r3
 800519c:	461a      	mov	r2, r3
 800519e:	4b68      	ldr	r3, [pc, #416]	; (8005340 <HAL_RCC_OscConfig+0x938>)
 80051a0:	4413      	add	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	461a      	mov	r2, r3
 80051a6:	2300      	movs	r3, #0
 80051a8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051aa:	f7fd faf5 	bl	8002798 <HAL_GetTick>
 80051ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b2:	e00a      	b.n	80051ca <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051b4:	f7fd faf0 	bl	8002798 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d902      	bls.n	80051ca <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	f000 bc55 	b.w	8005a74 <HAL_RCC_OscConfig+0x106c>
 80051ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ce:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80051d2:	2202      	movs	r2, #2
 80051d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051da:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	fa93 f2a3 	rbit	r2, r3
 80051e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80051f6:	2202      	movs	r2, #2
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	fa93 f2a3 	rbit	r2, r3
 8005208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800520c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005210:	601a      	str	r2, [r3, #0]
 8005212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005216:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800521a:	2202      	movs	r2, #2
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005222:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	fa93 f2a3 	rbit	r2, r3
 800522c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005230:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005234:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005236:	4b41      	ldr	r3, [pc, #260]	; (800533c <HAL_RCC_OscConfig+0x934>)
 8005238:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800523a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800523e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005242:	2102      	movs	r1, #2
 8005244:	6019      	str	r1, [r3, #0]
 8005246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800524a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	fa93 f1a3 	rbit	r1, r3
 8005254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005258:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800525c:	6019      	str	r1, [r3, #0]
  return result;
 800525e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005262:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	fab3 f383 	clz	r3, r3
 800526c:	b2db      	uxtb	r3, r3
 800526e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005272:	b2db      	uxtb	r3, r3
 8005274:	f003 031f 	and.w	r3, r3, #31
 8005278:	2101      	movs	r1, #1
 800527a:	fa01 f303 	lsl.w	r3, r1, r3
 800527e:	4013      	ands	r3, r2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d197      	bne.n	80051b4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005288:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 81a1 	beq.w	80055dc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800529a:	2300      	movs	r3, #0
 800529c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052a0:	4b26      	ldr	r3, [pc, #152]	; (800533c <HAL_RCC_OscConfig+0x934>)
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d116      	bne.n	80052da <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ac:	4b23      	ldr	r3, [pc, #140]	; (800533c <HAL_RCC_OscConfig+0x934>)
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	4a22      	ldr	r2, [pc, #136]	; (800533c <HAL_RCC_OscConfig+0x934>)
 80052b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b6:	61d3      	str	r3, [r2, #28]
 80052b8:	4b20      	ldr	r3, [pc, #128]	; (800533c <HAL_RCC_OscConfig+0x934>)
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80052c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052c4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ce:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80052d2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80052d4:	2301      	movs	r3, #1
 80052d6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052da:	4b1a      	ldr	r3, [pc, #104]	; (8005344 <HAL_RCC_OscConfig+0x93c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d11a      	bne.n	800531c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052e6:	4b17      	ldr	r3, [pc, #92]	; (8005344 <HAL_RCC_OscConfig+0x93c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a16      	ldr	r2, [pc, #88]	; (8005344 <HAL_RCC_OscConfig+0x93c>)
 80052ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052f2:	f7fd fa51 	bl	8002798 <HAL_GetTick>
 80052f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052fa:	e009      	b.n	8005310 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052fc:	f7fd fa4c 	bl	8002798 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b64      	cmp	r3, #100	; 0x64
 800530a:	d901      	bls.n	8005310 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e3b1      	b.n	8005a74 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005310:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <HAL_RCC_OscConfig+0x93c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0ef      	beq.n	80052fc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800531c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005320:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d10d      	bne.n	8005348 <HAL_RCC_OscConfig+0x940>
 800532c:	4b03      	ldr	r3, [pc, #12]	; (800533c <HAL_RCC_OscConfig+0x934>)
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	4a02      	ldr	r2, [pc, #8]	; (800533c <HAL_RCC_OscConfig+0x934>)
 8005332:	f043 0301 	orr.w	r3, r3, #1
 8005336:	6213      	str	r3, [r2, #32]
 8005338:	e03c      	b.n	80053b4 <HAL_RCC_OscConfig+0x9ac>
 800533a:	bf00      	nop
 800533c:	40021000 	.word	0x40021000
 8005340:	10908120 	.word	0x10908120
 8005344:	40007000 	.word	0x40007000
 8005348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800534c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10c      	bne.n	8005372 <HAL_RCC_OscConfig+0x96a>
 8005358:	4bc1      	ldr	r3, [pc, #772]	; (8005660 <HAL_RCC_OscConfig+0xc58>)
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	4ac0      	ldr	r2, [pc, #768]	; (8005660 <HAL_RCC_OscConfig+0xc58>)
 800535e:	f023 0301 	bic.w	r3, r3, #1
 8005362:	6213      	str	r3, [r2, #32]
 8005364:	4bbe      	ldr	r3, [pc, #760]	; (8005660 <HAL_RCC_OscConfig+0xc58>)
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	4abd      	ldr	r2, [pc, #756]	; (8005660 <HAL_RCC_OscConfig+0xc58>)
 800536a:	f023 0304 	bic.w	r3, r3, #4
 800536e:	6213      	str	r3, [r2, #32]
 8005370:	e020      	b.n	80053b4 <HAL_RCC_OscConfig+0x9ac>
 8005372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005376:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	2b05      	cmp	r3, #5
 8005380:	d10c      	bne.n	800539c <HAL_RCC_OscConfig+0x994>
 8005382:	4bb7      	ldr	r3, [pc, #732]	; (8005660 <HAL_RCC_OscConfig+0xc58>)
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	4ab6      	ldr	r2, [pc, #728]	; (8005660 <HAL_RCC_OscConfig+0xc58>)
 8005388:	f043 0304 	orr.w	r3, r3, #4
 800538c:	6213      	str	r3, [r2, #32]
 800538e:	4bb4      	ldr	r3, [pc, #720]	; (8005660 <HAL_RCC_OscConfig+0xc58>)
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	4ab3      	ldr	r2, [pc, #716]	; (8005660 <HAL_RCC_OscConfig+0xc58>)
 8005394:	f043 0301 	orr.w	r3, r3, #1
 8005398:	6213      	str	r3, [r2, #32]
 800539a:	e00b      	b.n	80053b4 <HAL_RCC_OscConfig+0x9ac>
 800539c:	4bb0      	ldr	r3, [pc, #704]	; (8005660 <HAL_RCC_OscConfig+0xc58>)
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	4aaf      	ldr	r2, [pc, #700]	; (8005660 <HAL_RCC_OscConfig+0xc58>)
 80053a2:	f023 0301 	bic.w	r3, r3, #1
 80053a6:	6213      	str	r3, [r2, #32]
 80053a8:	4bad      	ldr	r3, [pc, #692]	; (8005660 <HAL_RCC_OscConfig+0xc58>)
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	4aac      	ldr	r2, [pc, #688]	; (8005660 <HAL_RCC_OscConfig+0xc58>)
 80053ae:	f023 0304 	bic.w	r3, r3, #4
 80053b2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 8081 	beq.w	80054c8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053c6:	f7fd f9e7 	bl	8002798 <HAL_GetTick>
 80053ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ce:	e00b      	b.n	80053e8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053d0:	f7fd f9e2 	bl	8002798 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e345      	b.n	8005a74 <HAL_RCC_OscConfig+0x106c>
 80053e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80053f0:	2202      	movs	r2, #2
 80053f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053f8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	fa93 f2a3 	rbit	r2, r3
 8005402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005406:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005410:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005414:	2202      	movs	r2, #2
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800541c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	fa93 f2a3 	rbit	r2, r3
 8005426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800542a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800542e:	601a      	str	r2, [r3, #0]
  return result;
 8005430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005434:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005438:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800543a:	fab3 f383 	clz	r3, r3
 800543e:	b2db      	uxtb	r3, r3
 8005440:	095b      	lsrs	r3, r3, #5
 8005442:	b2db      	uxtb	r3, r3
 8005444:	f043 0302 	orr.w	r3, r3, #2
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d102      	bne.n	8005454 <HAL_RCC_OscConfig+0xa4c>
 800544e:	4b84      	ldr	r3, [pc, #528]	; (8005660 <HAL_RCC_OscConfig+0xc58>)
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	e013      	b.n	800547c <HAL_RCC_OscConfig+0xa74>
 8005454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005458:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800545c:	2202      	movs	r2, #2
 800545e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005464:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	fa93 f2a3 	rbit	r2, r3
 800546e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005472:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	4b79      	ldr	r3, [pc, #484]	; (8005660 <HAL_RCC_OscConfig+0xc58>)
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005480:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005484:	2102      	movs	r1, #2
 8005486:	6011      	str	r1, [r2, #0]
 8005488:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800548c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005490:	6812      	ldr	r2, [r2, #0]
 8005492:	fa92 f1a2 	rbit	r1, r2
 8005496:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800549a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800549e:	6011      	str	r1, [r2, #0]
  return result;
 80054a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054a4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80054a8:	6812      	ldr	r2, [r2, #0]
 80054aa:	fab2 f282 	clz	r2, r2
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	f002 021f 	and.w	r2, r2, #31
 80054ba:	2101      	movs	r1, #1
 80054bc:	fa01 f202 	lsl.w	r2, r1, r2
 80054c0:	4013      	ands	r3, r2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d084      	beq.n	80053d0 <HAL_RCC_OscConfig+0x9c8>
 80054c6:	e07f      	b.n	80055c8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054c8:	f7fd f966 	bl	8002798 <HAL_GetTick>
 80054cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054d0:	e00b      	b.n	80054ea <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054d2:	f7fd f961 	bl	8002798 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	f241 3288 	movw	r2, #5000	; 0x1388
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e2c4      	b.n	8005a74 <HAL_RCC_OscConfig+0x106c>
 80054ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054ee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80054f2:	2202      	movs	r2, #2
 80054f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054fa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	fa93 f2a3 	rbit	r2, r3
 8005504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005508:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005512:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005516:	2202      	movs	r2, #2
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800551e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	fa93 f2a3 	rbit	r2, r3
 8005528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800552c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005530:	601a      	str	r2, [r3, #0]
  return result;
 8005532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005536:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800553a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800553c:	fab3 f383 	clz	r3, r3
 8005540:	b2db      	uxtb	r3, r3
 8005542:	095b      	lsrs	r3, r3, #5
 8005544:	b2db      	uxtb	r3, r3
 8005546:	f043 0302 	orr.w	r3, r3, #2
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d102      	bne.n	8005556 <HAL_RCC_OscConfig+0xb4e>
 8005550:	4b43      	ldr	r3, [pc, #268]	; (8005660 <HAL_RCC_OscConfig+0xc58>)
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	e013      	b.n	800557e <HAL_RCC_OscConfig+0xb76>
 8005556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800555a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800555e:	2202      	movs	r2, #2
 8005560:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005566:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	fa93 f2a3 	rbit	r2, r3
 8005570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005574:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	4b39      	ldr	r3, [pc, #228]	; (8005660 <HAL_RCC_OscConfig+0xc58>)
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005582:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005586:	2102      	movs	r1, #2
 8005588:	6011      	str	r1, [r2, #0]
 800558a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800558e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005592:	6812      	ldr	r2, [r2, #0]
 8005594:	fa92 f1a2 	rbit	r1, r2
 8005598:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800559c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80055a0:	6011      	str	r1, [r2, #0]
  return result;
 80055a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055a6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80055aa:	6812      	ldr	r2, [r2, #0]
 80055ac:	fab2 f282 	clz	r2, r2
 80055b0:	b2d2      	uxtb	r2, r2
 80055b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055b6:	b2d2      	uxtb	r2, r2
 80055b8:	f002 021f 	and.w	r2, r2, #31
 80055bc:	2101      	movs	r1, #1
 80055be:	fa01 f202 	lsl.w	r2, r1, r2
 80055c2:	4013      	ands	r3, r2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d184      	bne.n	80054d2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055c8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d105      	bne.n	80055dc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055d0:	4b23      	ldr	r3, [pc, #140]	; (8005660 <HAL_RCC_OscConfig+0xc58>)
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	4a22      	ldr	r2, [pc, #136]	; (8005660 <HAL_RCC_OscConfig+0xc58>)
 80055d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055da:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 8242 	beq.w	8005a72 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055ee:	4b1c      	ldr	r3, [pc, #112]	; (8005660 <HAL_RCC_OscConfig+0xc58>)
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f003 030c 	and.w	r3, r3, #12
 80055f6:	2b08      	cmp	r3, #8
 80055f8:	f000 8213 	beq.w	8005a22 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005600:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	2b02      	cmp	r3, #2
 800560a:	f040 8162 	bne.w	80058d2 <HAL_RCC_OscConfig+0xeca>
 800560e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005612:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005616:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800561a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800561c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005620:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	fa93 f2a3 	rbit	r2, r3
 800562a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800562e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005632:	601a      	str	r2, [r3, #0]
  return result;
 8005634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005638:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800563c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800563e:	fab3 f383 	clz	r3, r3
 8005642:	b2db      	uxtb	r3, r3
 8005644:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005648:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	461a      	mov	r2, r3
 8005650:	2300      	movs	r3, #0
 8005652:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005654:	f7fd f8a0 	bl	8002798 <HAL_GetTick>
 8005658:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800565c:	e00c      	b.n	8005678 <HAL_RCC_OscConfig+0xc70>
 800565e:	bf00      	nop
 8005660:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005664:	f7fd f898 	bl	8002798 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e1fd      	b.n	8005a74 <HAL_RCC_OscConfig+0x106c>
 8005678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800567c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005680:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005684:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800568a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	fa93 f2a3 	rbit	r2, r3
 8005694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005698:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800569c:	601a      	str	r2, [r3, #0]
  return result;
 800569e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056a2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80056a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056a8:	fab3 f383 	clz	r3, r3
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	095b      	lsrs	r3, r3, #5
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	f043 0301 	orr.w	r3, r3, #1
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d102      	bne.n	80056c2 <HAL_RCC_OscConfig+0xcba>
 80056bc:	4bb0      	ldr	r3, [pc, #704]	; (8005980 <HAL_RCC_OscConfig+0xf78>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	e027      	b.n	8005712 <HAL_RCC_OscConfig+0xd0a>
 80056c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056c6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80056ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	fa93 f2a3 	rbit	r2, r3
 80056de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056e2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056ec:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80056f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056fa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	fa93 f2a3 	rbit	r2, r3
 8005704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005708:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	4b9c      	ldr	r3, [pc, #624]	; (8005980 <HAL_RCC_OscConfig+0xf78>)
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005716:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800571a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800571e:	6011      	str	r1, [r2, #0]
 8005720:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005724:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005728:	6812      	ldr	r2, [r2, #0]
 800572a:	fa92 f1a2 	rbit	r1, r2
 800572e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005732:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005736:	6011      	str	r1, [r2, #0]
  return result;
 8005738:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800573c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005740:	6812      	ldr	r2, [r2, #0]
 8005742:	fab2 f282 	clz	r2, r2
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	f042 0220 	orr.w	r2, r2, #32
 800574c:	b2d2      	uxtb	r2, r2
 800574e:	f002 021f 	and.w	r2, r2, #31
 8005752:	2101      	movs	r1, #1
 8005754:	fa01 f202 	lsl.w	r2, r1, r2
 8005758:	4013      	ands	r3, r2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d182      	bne.n	8005664 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800575e:	4b88      	ldr	r3, [pc, #544]	; (8005980 <HAL_RCC_OscConfig+0xf78>)
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800576a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005776:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	430b      	orrs	r3, r1
 8005780:	497f      	ldr	r1, [pc, #508]	; (8005980 <HAL_RCC_OscConfig+0xf78>)
 8005782:	4313      	orrs	r3, r2
 8005784:	604b      	str	r3, [r1, #4]
 8005786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800578a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800578e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005792:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005798:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	fa93 f2a3 	rbit	r2, r3
 80057a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057a6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80057aa:	601a      	str	r2, [r3, #0]
  return result;
 80057ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057b0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80057b4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057b6:	fab3 f383 	clz	r3, r3
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80057c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	461a      	mov	r2, r3
 80057c8:	2301      	movs	r3, #1
 80057ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057cc:	f7fc ffe4 	bl	8002798 <HAL_GetTick>
 80057d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057d4:	e009      	b.n	80057ea <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057d6:	f7fc ffdf 	bl	8002798 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e144      	b.n	8005a74 <HAL_RCC_OscConfig+0x106c>
 80057ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ee:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80057f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057fc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	fa93 f2a3 	rbit	r2, r3
 8005806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800580a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800580e:	601a      	str	r2, [r3, #0]
  return result;
 8005810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005814:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005818:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800581a:	fab3 f383 	clz	r3, r3
 800581e:	b2db      	uxtb	r3, r3
 8005820:	095b      	lsrs	r3, r3, #5
 8005822:	b2db      	uxtb	r3, r3
 8005824:	f043 0301 	orr.w	r3, r3, #1
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b01      	cmp	r3, #1
 800582c:	d102      	bne.n	8005834 <HAL_RCC_OscConfig+0xe2c>
 800582e:	4b54      	ldr	r3, [pc, #336]	; (8005980 <HAL_RCC_OscConfig+0xf78>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	e027      	b.n	8005884 <HAL_RCC_OscConfig+0xe7c>
 8005834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005838:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800583c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005840:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005846:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	fa93 f2a3 	rbit	r2, r3
 8005850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005854:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800585e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005862:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800586c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	fa93 f2a3 	rbit	r2, r3
 8005876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800587a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	4b3f      	ldr	r3, [pc, #252]	; (8005980 <HAL_RCC_OscConfig+0xf78>)
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005888:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800588c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005890:	6011      	str	r1, [r2, #0]
 8005892:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005896:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800589a:	6812      	ldr	r2, [r2, #0]
 800589c:	fa92 f1a2 	rbit	r1, r2
 80058a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058a4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80058a8:	6011      	str	r1, [r2, #0]
  return result;
 80058aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058ae:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80058b2:	6812      	ldr	r2, [r2, #0]
 80058b4:	fab2 f282 	clz	r2, r2
 80058b8:	b2d2      	uxtb	r2, r2
 80058ba:	f042 0220 	orr.w	r2, r2, #32
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	f002 021f 	and.w	r2, r2, #31
 80058c4:	2101      	movs	r1, #1
 80058c6:	fa01 f202 	lsl.w	r2, r1, r2
 80058ca:	4013      	ands	r3, r2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d082      	beq.n	80057d6 <HAL_RCC_OscConfig+0xdce>
 80058d0:	e0cf      	b.n	8005a72 <HAL_RCC_OscConfig+0x106a>
 80058d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058d6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80058da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80058de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058e4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	fa93 f2a3 	rbit	r2, r3
 80058ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058f2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80058f6:	601a      	str	r2, [r3, #0]
  return result;
 80058f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058fc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005900:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005902:	fab3 f383 	clz	r3, r3
 8005906:	b2db      	uxtb	r3, r3
 8005908:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800590c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	461a      	mov	r2, r3
 8005914:	2300      	movs	r3, #0
 8005916:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005918:	f7fc ff3e 	bl	8002798 <HAL_GetTick>
 800591c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005920:	e009      	b.n	8005936 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005922:	f7fc ff39 	bl	8002798 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e09e      	b.n	8005a74 <HAL_RCC_OscConfig+0x106c>
 8005936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800593a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800593e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005942:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005948:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	fa93 f2a3 	rbit	r2, r3
 8005952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005956:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800595a:	601a      	str	r2, [r3, #0]
  return result;
 800595c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005960:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005964:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005966:	fab3 f383 	clz	r3, r3
 800596a:	b2db      	uxtb	r3, r3
 800596c:	095b      	lsrs	r3, r3, #5
 800596e:	b2db      	uxtb	r3, r3
 8005970:	f043 0301 	orr.w	r3, r3, #1
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b01      	cmp	r3, #1
 8005978:	d104      	bne.n	8005984 <HAL_RCC_OscConfig+0xf7c>
 800597a:	4b01      	ldr	r3, [pc, #4]	; (8005980 <HAL_RCC_OscConfig+0xf78>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	e029      	b.n	80059d4 <HAL_RCC_OscConfig+0xfcc>
 8005980:	40021000 	.word	0x40021000
 8005984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005988:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800598c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005990:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005996:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	fa93 f2a3 	rbit	r2, r3
 80059a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059a4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ae:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80059b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059bc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	fa93 f2a3 	rbit	r2, r3
 80059c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ca:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	4b2b      	ldr	r3, [pc, #172]	; (8005a80 <HAL_RCC_OscConfig+0x1078>)
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80059d8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80059dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80059e0:	6011      	str	r1, [r2, #0]
 80059e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80059e6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80059ea:	6812      	ldr	r2, [r2, #0]
 80059ec:	fa92 f1a2 	rbit	r1, r2
 80059f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80059f4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80059f8:	6011      	str	r1, [r2, #0]
  return result;
 80059fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80059fe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005a02:	6812      	ldr	r2, [r2, #0]
 8005a04:	fab2 f282 	clz	r2, r2
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	f042 0220 	orr.w	r2, r2, #32
 8005a0e:	b2d2      	uxtb	r2, r2
 8005a10:	f002 021f 	and.w	r2, r2, #31
 8005a14:	2101      	movs	r1, #1
 8005a16:	fa01 f202 	lsl.w	r2, r1, r2
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d180      	bne.n	8005922 <HAL_RCC_OscConfig+0xf1a>
 8005a20:	e027      	b.n	8005a72 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d101      	bne.n	8005a36 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e01e      	b.n	8005a74 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a36:	4b12      	ldr	r3, [pc, #72]	; (8005a80 <HAL_RCC_OscConfig+0x1078>)
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005a3e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005a42:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d10b      	bne.n	8005a6e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005a56:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005a5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d001      	beq.n	8005a72 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e000      	b.n	8005a74 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	40021000 	.word	0x40021000

08005a84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b09e      	sub	sp, #120	; 0x78
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e162      	b.n	8005d62 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a9c:	4b90      	ldr	r3, [pc, #576]	; (8005ce0 <HAL_RCC_ClockConfig+0x25c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d910      	bls.n	8005acc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aaa:	4b8d      	ldr	r3, [pc, #564]	; (8005ce0 <HAL_RCC_ClockConfig+0x25c>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f023 0207 	bic.w	r2, r3, #7
 8005ab2:	498b      	ldr	r1, [pc, #556]	; (8005ce0 <HAL_RCC_ClockConfig+0x25c>)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aba:	4b89      	ldr	r3, [pc, #548]	; (8005ce0 <HAL_RCC_ClockConfig+0x25c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0307 	and.w	r3, r3, #7
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d001      	beq.n	8005acc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e14a      	b.n	8005d62 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d008      	beq.n	8005aea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ad8:	4b82      	ldr	r3, [pc, #520]	; (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	497f      	ldr	r1, [pc, #508]	; (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 80dc 	beq.w	8005cb0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d13c      	bne.n	8005b7a <HAL_RCC_ClockConfig+0xf6>
 8005b00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b04:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b08:	fa93 f3a3 	rbit	r3, r3
 8005b0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b10:	fab3 f383 	clz	r3, r3
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	095b      	lsrs	r3, r3, #5
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	f043 0301 	orr.w	r3, r3, #1
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d102      	bne.n	8005b2a <HAL_RCC_ClockConfig+0xa6>
 8005b24:	4b6f      	ldr	r3, [pc, #444]	; (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	e00f      	b.n	8005b4a <HAL_RCC_ClockConfig+0xc6>
 8005b2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b2e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b32:	fa93 f3a3 	rbit	r3, r3
 8005b36:	667b      	str	r3, [r7, #100]	; 0x64
 8005b38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b3c:	663b      	str	r3, [r7, #96]	; 0x60
 8005b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b40:	fa93 f3a3 	rbit	r3, r3
 8005b44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b46:	4b67      	ldr	r3, [pc, #412]	; (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b4e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b52:	fa92 f2a2 	rbit	r2, r2
 8005b56:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005b58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b5a:	fab2 f282 	clz	r2, r2
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	f042 0220 	orr.w	r2, r2, #32
 8005b64:	b2d2      	uxtb	r2, r2
 8005b66:	f002 021f 	and.w	r2, r2, #31
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b70:	4013      	ands	r3, r2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d17b      	bne.n	8005c6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e0f3      	b.n	8005d62 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d13c      	bne.n	8005bfc <HAL_RCC_ClockConfig+0x178>
 8005b82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b86:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b8a:	fa93 f3a3 	rbit	r3, r3
 8005b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b92:	fab3 f383 	clz	r3, r3
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	095b      	lsrs	r3, r3, #5
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	f043 0301 	orr.w	r3, r3, #1
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d102      	bne.n	8005bac <HAL_RCC_ClockConfig+0x128>
 8005ba6:	4b4f      	ldr	r3, [pc, #316]	; (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	e00f      	b.n	8005bcc <HAL_RCC_ClockConfig+0x148>
 8005bac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bb0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb4:	fa93 f3a3 	rbit	r3, r3
 8005bb8:	647b      	str	r3, [r7, #68]	; 0x44
 8005bba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bbe:	643b      	str	r3, [r7, #64]	; 0x40
 8005bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bc2:	fa93 f3a3 	rbit	r3, r3
 8005bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bc8:	4b46      	ldr	r3, [pc, #280]	; (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bcc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bd0:	63ba      	str	r2, [r7, #56]	; 0x38
 8005bd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bd4:	fa92 f2a2 	rbit	r2, r2
 8005bd8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005bda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bdc:	fab2 f282 	clz	r2, r2
 8005be0:	b2d2      	uxtb	r2, r2
 8005be2:	f042 0220 	orr.w	r2, r2, #32
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	f002 021f 	and.w	r2, r2, #31
 8005bec:	2101      	movs	r1, #1
 8005bee:	fa01 f202 	lsl.w	r2, r1, r2
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d13a      	bne.n	8005c6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e0b2      	b.n	8005d62 <HAL_RCC_ClockConfig+0x2de>
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c02:	fa93 f3a3 	rbit	r3, r3
 8005c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c0a:	fab3 f383 	clz	r3, r3
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	095b      	lsrs	r3, r3, #5
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	f043 0301 	orr.w	r3, r3, #1
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d102      	bne.n	8005c24 <HAL_RCC_ClockConfig+0x1a0>
 8005c1e:	4b31      	ldr	r3, [pc, #196]	; (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	e00d      	b.n	8005c40 <HAL_RCC_ClockConfig+0x1bc>
 8005c24:	2302      	movs	r3, #2
 8005c26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2a:	fa93 f3a3 	rbit	r3, r3
 8005c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c30:	2302      	movs	r3, #2
 8005c32:	623b      	str	r3, [r7, #32]
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	fa93 f3a3 	rbit	r3, r3
 8005c3a:	61fb      	str	r3, [r7, #28]
 8005c3c:	4b29      	ldr	r3, [pc, #164]	; (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	2202      	movs	r2, #2
 8005c42:	61ba      	str	r2, [r7, #24]
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	fa92 f2a2 	rbit	r2, r2
 8005c4a:	617a      	str	r2, [r7, #20]
  return result;
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	fab2 f282 	clz	r2, r2
 8005c52:	b2d2      	uxtb	r2, r2
 8005c54:	f042 0220 	orr.w	r2, r2, #32
 8005c58:	b2d2      	uxtb	r2, r2
 8005c5a:	f002 021f 	and.w	r2, r2, #31
 8005c5e:	2101      	movs	r1, #1
 8005c60:	fa01 f202 	lsl.w	r2, r1, r2
 8005c64:	4013      	ands	r3, r2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e079      	b.n	8005d62 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c6e:	4b1d      	ldr	r3, [pc, #116]	; (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f023 0203 	bic.w	r2, r3, #3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	491a      	ldr	r1, [pc, #104]	; (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c80:	f7fc fd8a 	bl	8002798 <HAL_GetTick>
 8005c84:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c86:	e00a      	b.n	8005c9e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c88:	f7fc fd86 	bl	8002798 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e061      	b.n	8005d62 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c9e:	4b11      	ldr	r3, [pc, #68]	; (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f003 020c 	and.w	r2, r3, #12
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d1eb      	bne.n	8005c88 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <HAL_RCC_ClockConfig+0x25c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0307 	and.w	r3, r3, #7
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d214      	bcs.n	8005ce8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cbe:	4b08      	ldr	r3, [pc, #32]	; (8005ce0 <HAL_RCC_ClockConfig+0x25c>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f023 0207 	bic.w	r2, r3, #7
 8005cc6:	4906      	ldr	r1, [pc, #24]	; (8005ce0 <HAL_RCC_ClockConfig+0x25c>)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cce:	4b04      	ldr	r3, [pc, #16]	; (8005ce0 <HAL_RCC_ClockConfig+0x25c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0307 	and.w	r3, r3, #7
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d005      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e040      	b.n	8005d62 <HAL_RCC_ClockConfig+0x2de>
 8005ce0:	40022000 	.word	0x40022000
 8005ce4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d008      	beq.n	8005d06 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cf4:	4b1d      	ldr	r3, [pc, #116]	; (8005d6c <HAL_RCC_ClockConfig+0x2e8>)
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	491a      	ldr	r1, [pc, #104]	; (8005d6c <HAL_RCC_ClockConfig+0x2e8>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0308 	and.w	r3, r3, #8
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d009      	beq.n	8005d26 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d12:	4b16      	ldr	r3, [pc, #88]	; (8005d6c <HAL_RCC_ClockConfig+0x2e8>)
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	4912      	ldr	r1, [pc, #72]	; (8005d6c <HAL_RCC_ClockConfig+0x2e8>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005d26:	f000 f829 	bl	8005d7c <HAL_RCC_GetSysClockFreq>
 8005d2a:	4601      	mov	r1, r0
 8005d2c:	4b0f      	ldr	r3, [pc, #60]	; (8005d6c <HAL_RCC_ClockConfig+0x2e8>)
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d34:	22f0      	movs	r2, #240	; 0xf0
 8005d36:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	fa92 f2a2 	rbit	r2, r2
 8005d3e:	60fa      	str	r2, [r7, #12]
  return result;
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	fab2 f282 	clz	r2, r2
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	40d3      	lsrs	r3, r2
 8005d4a:	4a09      	ldr	r2, [pc, #36]	; (8005d70 <HAL_RCC_ClockConfig+0x2ec>)
 8005d4c:	5cd3      	ldrb	r3, [r2, r3]
 8005d4e:	fa21 f303 	lsr.w	r3, r1, r3
 8005d52:	4a08      	ldr	r2, [pc, #32]	; (8005d74 <HAL_RCC_ClockConfig+0x2f0>)
 8005d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005d56:	4b08      	ldr	r3, [pc, #32]	; (8005d78 <HAL_RCC_ClockConfig+0x2f4>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fc fcd8 	bl	8002710 <HAL_InitTick>
  
  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3778      	adds	r7, #120	; 0x78
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	40021000 	.word	0x40021000
 8005d70:	0800d578 	.word	0x0800d578
 8005d74:	20000054 	.word	0x20000054
 8005d78:	20000058 	.word	0x20000058

08005d7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b08b      	sub	sp, #44	; 0x2c
 8005d80:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d82:	2300      	movs	r3, #0
 8005d84:	61fb      	str	r3, [r7, #28]
 8005d86:	2300      	movs	r3, #0
 8005d88:	61bb      	str	r3, [r7, #24]
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d8e:	2300      	movs	r3, #0
 8005d90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005d96:	4b29      	ldr	r3, [pc, #164]	; (8005e3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	f003 030c 	and.w	r3, r3, #12
 8005da2:	2b04      	cmp	r3, #4
 8005da4:	d002      	beq.n	8005dac <HAL_RCC_GetSysClockFreq+0x30>
 8005da6:	2b08      	cmp	r3, #8
 8005da8:	d003      	beq.n	8005db2 <HAL_RCC_GetSysClockFreq+0x36>
 8005daa:	e03c      	b.n	8005e26 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005dac:	4b24      	ldr	r3, [pc, #144]	; (8005e40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005dae:	623b      	str	r3, [r7, #32]
      break;
 8005db0:	e03c      	b.n	8005e2c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005db8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005dbc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	fa92 f2a2 	rbit	r2, r2
 8005dc4:	607a      	str	r2, [r7, #4]
  return result;
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	fab2 f282 	clz	r2, r2
 8005dcc:	b2d2      	uxtb	r2, r2
 8005dce:	40d3      	lsrs	r3, r2
 8005dd0:	4a1c      	ldr	r2, [pc, #112]	; (8005e44 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005dd2:	5cd3      	ldrb	r3, [r2, r3]
 8005dd4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005dd6:	4b19      	ldr	r3, [pc, #100]	; (8005e3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dda:	f003 030f 	and.w	r3, r3, #15
 8005dde:	220f      	movs	r2, #15
 8005de0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	fa92 f2a2 	rbit	r2, r2
 8005de8:	60fa      	str	r2, [r7, #12]
  return result;
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	fab2 f282 	clz	r2, r2
 8005df0:	b2d2      	uxtb	r2, r2
 8005df2:	40d3      	lsrs	r3, r2
 8005df4:	4a14      	ldr	r2, [pc, #80]	; (8005e48 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005df6:	5cd3      	ldrb	r3, [r2, r3]
 8005df8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d008      	beq.n	8005e16 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005e04:	4a0e      	ldr	r2, [pc, #56]	; (8005e40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	fb02 f303 	mul.w	r3, r2, r3
 8005e12:	627b      	str	r3, [r7, #36]	; 0x24
 8005e14:	e004      	b.n	8005e20 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	4a0c      	ldr	r2, [pc, #48]	; (8005e4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e1a:	fb02 f303 	mul.w	r3, r2, r3
 8005e1e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	623b      	str	r3, [r7, #32]
      break;
 8005e24:	e002      	b.n	8005e2c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e26:	4b06      	ldr	r3, [pc, #24]	; (8005e40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005e28:	623b      	str	r3, [r7, #32]
      break;
 8005e2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	372c      	adds	r7, #44	; 0x2c
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40021000 	.word	0x40021000
 8005e40:	007a1200 	.word	0x007a1200
 8005e44:	0800d590 	.word	0x0800d590
 8005e48:	0800d5a0 	.word	0x0800d5a0
 8005e4c:	003d0900 	.word	0x003d0900

08005e50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e54:	4b03      	ldr	r3, [pc, #12]	; (8005e64 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e56:	681b      	ldr	r3, [r3, #0]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	20000054 	.word	0x20000054

08005e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005e6e:	f7ff ffef 	bl	8005e50 <HAL_RCC_GetHCLKFreq>
 8005e72:	4601      	mov	r1, r0
 8005e74:	4b0b      	ldr	r3, [pc, #44]	; (8005ea4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e7c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005e80:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	fa92 f2a2 	rbit	r2, r2
 8005e88:	603a      	str	r2, [r7, #0]
  return result;
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	fab2 f282 	clz	r2, r2
 8005e90:	b2d2      	uxtb	r2, r2
 8005e92:	40d3      	lsrs	r3, r2
 8005e94:	4a04      	ldr	r2, [pc, #16]	; (8005ea8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005e96:	5cd3      	ldrb	r3, [r2, r3]
 8005e98:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	40021000 	.word	0x40021000
 8005ea8:	0800d588 	.word	0x0800d588

08005eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005eb2:	f7ff ffcd 	bl	8005e50 <HAL_RCC_GetHCLKFreq>
 8005eb6:	4601      	mov	r1, r0
 8005eb8:	4b0b      	ldr	r3, [pc, #44]	; (8005ee8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005ec0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005ec4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	fa92 f2a2 	rbit	r2, r2
 8005ecc:	603a      	str	r2, [r7, #0]
  return result;
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	fab2 f282 	clz	r2, r2
 8005ed4:	b2d2      	uxtb	r2, r2
 8005ed6:	40d3      	lsrs	r3, r2
 8005ed8:	4a04      	ldr	r2, [pc, #16]	; (8005eec <HAL_RCC_GetPCLK2Freq+0x40>)
 8005eda:	5cd3      	ldrb	r3, [r2, r3]
 8005edc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	40021000 	.word	0x40021000
 8005eec:	0800d588 	.word	0x0800d588

08005ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b092      	sub	sp, #72	; 0x48
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005f00:	2300      	movs	r3, #0
 8005f02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 80d4 	beq.w	80060bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f14:	4b4e      	ldr	r3, [pc, #312]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10e      	bne.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f20:	4b4b      	ldr	r3, [pc, #300]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f22:	69db      	ldr	r3, [r3, #28]
 8005f24:	4a4a      	ldr	r2, [pc, #296]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f2a:	61d3      	str	r3, [r2, #28]
 8005f2c:	4b48      	ldr	r3, [pc, #288]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f2e:	69db      	ldr	r3, [r3, #28]
 8005f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f34:	60bb      	str	r3, [r7, #8]
 8005f36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f3e:	4b45      	ldr	r3, [pc, #276]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d118      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f4a:	4b42      	ldr	r3, [pc, #264]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a41      	ldr	r2, [pc, #260]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f54:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f56:	f7fc fc1f 	bl	8002798 <HAL_GetTick>
 8005f5a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f5c:	e008      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f5e:	f7fc fc1b 	bl	8002798 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b64      	cmp	r3, #100	; 0x64
 8005f6a:	d901      	bls.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e169      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f70:	4b38      	ldr	r3, [pc, #224]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d0f0      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f7c:	4b34      	ldr	r3, [pc, #208]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f84:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 8084 	beq.w	8006096 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d07c      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f9c:	4b2c      	ldr	r3, [pc, #176]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005faa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fae:	fa93 f3a3 	rbit	r3, r3
 8005fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fb6:	fab3 f383 	clz	r3, r3
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	4b26      	ldr	r3, [pc, #152]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005fc0:	4413      	add	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	6013      	str	r3, [r2, #0]
 8005fca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005fce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd2:	fa93 f3a3 	rbit	r3, r3
 8005fd6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005fda:	fab3 f383 	clz	r3, r3
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	4b1d      	ldr	r3, [pc, #116]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005fe4:	4413      	add	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	461a      	mov	r2, r3
 8005fea:	2300      	movs	r3, #0
 8005fec:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005fee:	4a18      	ldr	r2, [pc, #96]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ff2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d04b      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ffe:	f7fc fbcb 	bl	8002798 <HAL_GetTick>
 8006002:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006004:	e00a      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006006:	f7fc fbc7 	bl	8002798 <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	f241 3288 	movw	r2, #5000	; 0x1388
 8006014:	4293      	cmp	r3, r2
 8006016:	d901      	bls.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e113      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800601c:	2302      	movs	r3, #2
 800601e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006022:	fa93 f3a3 	rbit	r3, r3
 8006026:	627b      	str	r3, [r7, #36]	; 0x24
 8006028:	2302      	movs	r3, #2
 800602a:	623b      	str	r3, [r7, #32]
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	fa93 f3a3 	rbit	r3, r3
 8006032:	61fb      	str	r3, [r7, #28]
  return result;
 8006034:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006036:	fab3 f383 	clz	r3, r3
 800603a:	b2db      	uxtb	r3, r3
 800603c:	095b      	lsrs	r3, r3, #5
 800603e:	b2db      	uxtb	r3, r3
 8006040:	f043 0302 	orr.w	r3, r3, #2
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b02      	cmp	r3, #2
 8006048:	d108      	bne.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800604a:	4b01      	ldr	r3, [pc, #4]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	e00d      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006050:	40021000 	.word	0x40021000
 8006054:	40007000 	.word	0x40007000
 8006058:	10908100 	.word	0x10908100
 800605c:	2302      	movs	r3, #2
 800605e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	fa93 f3a3 	rbit	r3, r3
 8006066:	617b      	str	r3, [r7, #20]
 8006068:	4b78      	ldr	r3, [pc, #480]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	2202      	movs	r2, #2
 800606e:	613a      	str	r2, [r7, #16]
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	fa92 f2a2 	rbit	r2, r2
 8006076:	60fa      	str	r2, [r7, #12]
  return result;
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	fab2 f282 	clz	r2, r2
 800607e:	b2d2      	uxtb	r2, r2
 8006080:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006084:	b2d2      	uxtb	r2, r2
 8006086:	f002 021f 	and.w	r2, r2, #31
 800608a:	2101      	movs	r1, #1
 800608c:	fa01 f202 	lsl.w	r2, r1, r2
 8006090:	4013      	ands	r3, r2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d0b7      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006096:	4b6d      	ldr	r3, [pc, #436]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	496a      	ldr	r1, [pc, #424]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80060a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d105      	bne.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060b0:	4b66      	ldr	r3, [pc, #408]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	4a65      	ldr	r2, [pc, #404]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d008      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060c8:	4b60      	ldr	r3, [pc, #384]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060cc:	f023 0203 	bic.w	r2, r3, #3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	495d      	ldr	r1, [pc, #372]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d008      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060e6:	4b59      	ldr	r3, [pc, #356]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	4956      	ldr	r1, [pc, #344]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b00      	cmp	r3, #0
 8006102:	d008      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006104:	4b51      	ldr	r3, [pc, #324]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006108:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	494e      	ldr	r1, [pc, #312]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006112:	4313      	orrs	r3, r2
 8006114:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0320 	and.w	r3, r3, #32
 800611e:	2b00      	cmp	r3, #0
 8006120:	d008      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006122:	4b4a      	ldr	r3, [pc, #296]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006126:	f023 0210 	bic.w	r2, r3, #16
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	4947      	ldr	r1, [pc, #284]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006130:	4313      	orrs	r3, r2
 8006132:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d008      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006140:	4b42      	ldr	r3, [pc, #264]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614c:	493f      	ldr	r1, [pc, #252]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800614e:	4313      	orrs	r3, r2
 8006150:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615a:	2b00      	cmp	r3, #0
 800615c:	d008      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800615e:	4b3b      	ldr	r3, [pc, #236]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006162:	f023 0220 	bic.w	r2, r3, #32
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	4938      	ldr	r1, [pc, #224]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800616c:	4313      	orrs	r3, r2
 800616e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0308 	and.w	r3, r3, #8
 8006178:	2b00      	cmp	r3, #0
 800617a:	d008      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800617c:	4b33      	ldr	r3, [pc, #204]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800617e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006180:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	4930      	ldr	r1, [pc, #192]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800618a:	4313      	orrs	r3, r2
 800618c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0310 	and.w	r3, r3, #16
 8006196:	2b00      	cmp	r3, #0
 8006198:	d008      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800619a:	4b2c      	ldr	r3, [pc, #176]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800619c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	4929      	ldr	r1, [pc, #164]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d008      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80061b8:	4b24      	ldr	r3, [pc, #144]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c4:	4921      	ldr	r1, [pc, #132]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d008      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80061d6:	4b1d      	ldr	r3, [pc, #116]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061da:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	491a      	ldr	r1, [pc, #104]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d008      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80061f4:	4b15      	ldr	r3, [pc, #84]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006200:	4912      	ldr	r1, [pc, #72]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006202:	4313      	orrs	r3, r2
 8006204:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d008      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006212:	4b0e      	ldr	r3, [pc, #56]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621e:	490b      	ldr	r1, [pc, #44]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006220:	4313      	orrs	r3, r2
 8006222:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d008      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006230:	4b06      	ldr	r3, [pc, #24]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006234:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800623c:	4903      	ldr	r1, [pc, #12]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800623e:	4313      	orrs	r3, r2
 8006240:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3748      	adds	r7, #72	; 0x48
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	40021000 	.word	0x40021000

08006250 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e09d      	b.n	800639e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006266:	2b00      	cmp	r3, #0
 8006268:	d108      	bne.n	800627c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006272:	d009      	beq.n	8006288 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	61da      	str	r2, [r3, #28]
 800627a:	e005      	b.n	8006288 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d106      	bne.n	80062a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7fb fe20 	bl	8001ee8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2202      	movs	r2, #2
 80062ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062c8:	d902      	bls.n	80062d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80062ca:	2300      	movs	r3, #0
 80062cc:	60fb      	str	r3, [r7, #12]
 80062ce:	e002      	b.n	80062d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80062d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80062de:	d007      	beq.n	80062f0 <HAL_SPI_Init+0xa0>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062e8:	d002      	beq.n	80062f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006300:	431a      	orrs	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	431a      	orrs	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	431a      	orrs	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800631e:	431a      	orrs	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	69db      	ldr	r3, [r3, #28]
 8006324:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006332:	ea42 0103 	orr.w	r1, r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	0c1b      	lsrs	r3, r3, #16
 800634c:	f003 0204 	and.w	r2, r3, #4
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006354:	f003 0310 	and.w	r3, r3, #16
 8006358:	431a      	orrs	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800635e:	f003 0308 	and.w	r3, r3, #8
 8006362:	431a      	orrs	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800636c:	ea42 0103 	orr.w	r1, r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	69da      	ldr	r2, [r3, #28]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800638c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b082      	sub	sp, #8
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e049      	b.n	800644c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d106      	bne.n	80063d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f7fb fdcd 	bl	8001f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2202      	movs	r2, #2
 80063d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3304      	adds	r3, #4
 80063e2:	4619      	mov	r1, r3
 80063e4:	4610      	mov	r0, r2
 80063e6:	f000 fd27 	bl	8006e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b01      	cmp	r3, #1
 8006466:	d001      	beq.n	800646c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e04a      	b.n	8006502 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68da      	ldr	r2, [r3, #12]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0201 	orr.w	r2, r2, #1
 8006482:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a21      	ldr	r2, [pc, #132]	; (8006510 <HAL_TIM_Base_Start_IT+0xbc>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d018      	beq.n	80064c0 <HAL_TIM_Base_Start_IT+0x6c>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006496:	d013      	beq.n	80064c0 <HAL_TIM_Base_Start_IT+0x6c>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a1d      	ldr	r2, [pc, #116]	; (8006514 <HAL_TIM_Base_Start_IT+0xc0>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d00e      	beq.n	80064c0 <HAL_TIM_Base_Start_IT+0x6c>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a1c      	ldr	r2, [pc, #112]	; (8006518 <HAL_TIM_Base_Start_IT+0xc4>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d009      	beq.n	80064c0 <HAL_TIM_Base_Start_IT+0x6c>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a1a      	ldr	r2, [pc, #104]	; (800651c <HAL_TIM_Base_Start_IT+0xc8>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d004      	beq.n	80064c0 <HAL_TIM_Base_Start_IT+0x6c>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a19      	ldr	r2, [pc, #100]	; (8006520 <HAL_TIM_Base_Start_IT+0xcc>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d115      	bne.n	80064ec <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689a      	ldr	r2, [r3, #8]
 80064c6:	4b17      	ldr	r3, [pc, #92]	; (8006524 <HAL_TIM_Base_Start_IT+0xd0>)
 80064c8:	4013      	ands	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b06      	cmp	r3, #6
 80064d0:	d015      	beq.n	80064fe <HAL_TIM_Base_Start_IT+0xaa>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064d8:	d011      	beq.n	80064fe <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f042 0201 	orr.w	r2, r2, #1
 80064e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ea:	e008      	b.n	80064fe <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f042 0201 	orr.w	r2, r2, #1
 80064fa:	601a      	str	r2, [r3, #0]
 80064fc:	e000      	b.n	8006500 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	40012c00 	.word	0x40012c00
 8006514:	40000400 	.word	0x40000400
 8006518:	40000800 	.word	0x40000800
 800651c:	40013400 	.word	0x40013400
 8006520:	40014000 	.word	0x40014000
 8006524:	00010007 	.word	0x00010007

08006528 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e049      	b.n	80065ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d106      	bne.n	8006554 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f841 	bl	80065d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2202      	movs	r2, #2
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	3304      	adds	r3, #4
 8006564:	4619      	mov	r1, r3
 8006566:	4610      	mov	r0, r2
 8006568:	f000 fc66 	bl	8006e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b083      	sub	sp, #12
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80065de:	bf00      	nop
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
	...

080065ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d109      	bne.n	8006610 <HAL_TIM_PWM_Start+0x24>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b01      	cmp	r3, #1
 8006606:	bf14      	ite	ne
 8006608:	2301      	movne	r3, #1
 800660a:	2300      	moveq	r3, #0
 800660c:	b2db      	uxtb	r3, r3
 800660e:	e03c      	b.n	800668a <HAL_TIM_PWM_Start+0x9e>
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	2b04      	cmp	r3, #4
 8006614:	d109      	bne.n	800662a <HAL_TIM_PWM_Start+0x3e>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b01      	cmp	r3, #1
 8006620:	bf14      	ite	ne
 8006622:	2301      	movne	r3, #1
 8006624:	2300      	moveq	r3, #0
 8006626:	b2db      	uxtb	r3, r3
 8006628:	e02f      	b.n	800668a <HAL_TIM_PWM_Start+0x9e>
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	2b08      	cmp	r3, #8
 800662e:	d109      	bne.n	8006644 <HAL_TIM_PWM_Start+0x58>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b01      	cmp	r3, #1
 800663a:	bf14      	ite	ne
 800663c:	2301      	movne	r3, #1
 800663e:	2300      	moveq	r3, #0
 8006640:	b2db      	uxtb	r3, r3
 8006642:	e022      	b.n	800668a <HAL_TIM_PWM_Start+0x9e>
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2b0c      	cmp	r3, #12
 8006648:	d109      	bne.n	800665e <HAL_TIM_PWM_Start+0x72>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b01      	cmp	r3, #1
 8006654:	bf14      	ite	ne
 8006656:	2301      	movne	r3, #1
 8006658:	2300      	moveq	r3, #0
 800665a:	b2db      	uxtb	r3, r3
 800665c:	e015      	b.n	800668a <HAL_TIM_PWM_Start+0x9e>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b10      	cmp	r3, #16
 8006662:	d109      	bne.n	8006678 <HAL_TIM_PWM_Start+0x8c>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b01      	cmp	r3, #1
 800666e:	bf14      	ite	ne
 8006670:	2301      	movne	r3, #1
 8006672:	2300      	moveq	r3, #0
 8006674:	b2db      	uxtb	r3, r3
 8006676:	e008      	b.n	800668a <HAL_TIM_PWM_Start+0x9e>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b01      	cmp	r3, #1
 8006682:	bf14      	ite	ne
 8006684:	2301      	movne	r3, #1
 8006686:	2300      	moveq	r3, #0
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e097      	b.n	80067c2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d104      	bne.n	80066a2 <HAL_TIM_PWM_Start+0xb6>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066a0:	e023      	b.n	80066ea <HAL_TIM_PWM_Start+0xfe>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b04      	cmp	r3, #4
 80066a6:	d104      	bne.n	80066b2 <HAL_TIM_PWM_Start+0xc6>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2202      	movs	r2, #2
 80066ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066b0:	e01b      	b.n	80066ea <HAL_TIM_PWM_Start+0xfe>
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	2b08      	cmp	r3, #8
 80066b6:	d104      	bne.n	80066c2 <HAL_TIM_PWM_Start+0xd6>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2202      	movs	r2, #2
 80066bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066c0:	e013      	b.n	80066ea <HAL_TIM_PWM_Start+0xfe>
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2b0c      	cmp	r3, #12
 80066c6:	d104      	bne.n	80066d2 <HAL_TIM_PWM_Start+0xe6>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2202      	movs	r2, #2
 80066cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066d0:	e00b      	b.n	80066ea <HAL_TIM_PWM_Start+0xfe>
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b10      	cmp	r3, #16
 80066d6:	d104      	bne.n	80066e2 <HAL_TIM_PWM_Start+0xf6>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066e0:	e003      	b.n	80066ea <HAL_TIM_PWM_Start+0xfe>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2202      	movs	r2, #2
 80066e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2201      	movs	r2, #1
 80066f0:	6839      	ldr	r1, [r7, #0]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 ffa0 	bl	8007638 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a33      	ldr	r2, [pc, #204]	; (80067cc <HAL_TIM_PWM_Start+0x1e0>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d013      	beq.n	800672a <HAL_TIM_PWM_Start+0x13e>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a32      	ldr	r2, [pc, #200]	; (80067d0 <HAL_TIM_PWM_Start+0x1e4>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d00e      	beq.n	800672a <HAL_TIM_PWM_Start+0x13e>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a30      	ldr	r2, [pc, #192]	; (80067d4 <HAL_TIM_PWM_Start+0x1e8>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d009      	beq.n	800672a <HAL_TIM_PWM_Start+0x13e>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a2f      	ldr	r2, [pc, #188]	; (80067d8 <HAL_TIM_PWM_Start+0x1ec>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d004      	beq.n	800672a <HAL_TIM_PWM_Start+0x13e>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a2d      	ldr	r2, [pc, #180]	; (80067dc <HAL_TIM_PWM_Start+0x1f0>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d101      	bne.n	800672e <HAL_TIM_PWM_Start+0x142>
 800672a:	2301      	movs	r3, #1
 800672c:	e000      	b.n	8006730 <HAL_TIM_PWM_Start+0x144>
 800672e:	2300      	movs	r3, #0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d007      	beq.n	8006744 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006742:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a20      	ldr	r2, [pc, #128]	; (80067cc <HAL_TIM_PWM_Start+0x1e0>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d018      	beq.n	8006780 <HAL_TIM_PWM_Start+0x194>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006756:	d013      	beq.n	8006780 <HAL_TIM_PWM_Start+0x194>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a20      	ldr	r2, [pc, #128]	; (80067e0 <HAL_TIM_PWM_Start+0x1f4>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d00e      	beq.n	8006780 <HAL_TIM_PWM_Start+0x194>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a1f      	ldr	r2, [pc, #124]	; (80067e4 <HAL_TIM_PWM_Start+0x1f8>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d009      	beq.n	8006780 <HAL_TIM_PWM_Start+0x194>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a17      	ldr	r2, [pc, #92]	; (80067d0 <HAL_TIM_PWM_Start+0x1e4>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d004      	beq.n	8006780 <HAL_TIM_PWM_Start+0x194>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a16      	ldr	r2, [pc, #88]	; (80067d4 <HAL_TIM_PWM_Start+0x1e8>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d115      	bne.n	80067ac <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689a      	ldr	r2, [r3, #8]
 8006786:	4b18      	ldr	r3, [pc, #96]	; (80067e8 <HAL_TIM_PWM_Start+0x1fc>)
 8006788:	4013      	ands	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2b06      	cmp	r3, #6
 8006790:	d015      	beq.n	80067be <HAL_TIM_PWM_Start+0x1d2>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006798:	d011      	beq.n	80067be <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f042 0201 	orr.w	r2, r2, #1
 80067a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067aa:	e008      	b.n	80067be <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f042 0201 	orr.w	r2, r2, #1
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	e000      	b.n	80067c0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	40012c00 	.word	0x40012c00
 80067d0:	40013400 	.word	0x40013400
 80067d4:	40014000 	.word	0x40014000
 80067d8:	40014400 	.word	0x40014400
 80067dc:	40014800 	.word	0x40014800
 80067e0:	40000400 	.word	0x40000400
 80067e4:	40000800 	.word	0x40000800
 80067e8:	00010007 	.word	0x00010007

080067ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d122      	bne.n	8006848 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b02      	cmp	r3, #2
 800680e:	d11b      	bne.n	8006848 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f06f 0202 	mvn.w	r2, #2
 8006818:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	f003 0303 	and.w	r3, r3, #3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fae3 	bl	8006dfa <HAL_TIM_IC_CaptureCallback>
 8006834:	e005      	b.n	8006842 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fad5 	bl	8006de6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fae6 	bl	8006e0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b04      	cmp	r3, #4
 8006854:	d122      	bne.n	800689c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	2b04      	cmp	r3, #4
 8006862:	d11b      	bne.n	800689c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f06f 0204 	mvn.w	r2, #4
 800686c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2202      	movs	r2, #2
 8006872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fab9 	bl	8006dfa <HAL_TIM_IC_CaptureCallback>
 8006888:	e005      	b.n	8006896 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 faab 	bl	8006de6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fabc 	bl	8006e0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	f003 0308 	and.w	r3, r3, #8
 80068a6:	2b08      	cmp	r3, #8
 80068a8:	d122      	bne.n	80068f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f003 0308 	and.w	r3, r3, #8
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	d11b      	bne.n	80068f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f06f 0208 	mvn.w	r2, #8
 80068c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2204      	movs	r2, #4
 80068c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	f003 0303 	and.w	r3, r3, #3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fa8f 	bl	8006dfa <HAL_TIM_IC_CaptureCallback>
 80068dc:	e005      	b.n	80068ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fa81 	bl	8006de6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fa92 	bl	8006e0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f003 0310 	and.w	r3, r3, #16
 80068fa:	2b10      	cmp	r3, #16
 80068fc:	d122      	bne.n	8006944 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	f003 0310 	and.w	r3, r3, #16
 8006908:	2b10      	cmp	r3, #16
 800690a:	d11b      	bne.n	8006944 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f06f 0210 	mvn.w	r2, #16
 8006914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2208      	movs	r2, #8
 800691a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	69db      	ldr	r3, [r3, #28]
 8006922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006926:	2b00      	cmp	r3, #0
 8006928:	d003      	beq.n	8006932 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fa65 	bl	8006dfa <HAL_TIM_IC_CaptureCallback>
 8006930:	e005      	b.n	800693e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fa57 	bl	8006de6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fa68 	bl	8006e0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b01      	cmp	r3, #1
 8006950:	d10e      	bne.n	8006970 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b01      	cmp	r3, #1
 800695e:	d107      	bne.n	8006970 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f06f 0201 	mvn.w	r2, #1
 8006968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7fb f9d2 	bl	8001d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697a:	2b80      	cmp	r3, #128	; 0x80
 800697c:	d10e      	bne.n	800699c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006988:	2b80      	cmp	r3, #128	; 0x80
 800698a:	d107      	bne.n	800699c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fefe 	bl	8007798 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069aa:	d10e      	bne.n	80069ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b6:	2b80      	cmp	r3, #128	; 0x80
 80069b8:	d107      	bne.n	80069ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80069c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fef1 	bl	80077ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d4:	2b40      	cmp	r3, #64	; 0x40
 80069d6:	d10e      	bne.n	80069f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e2:	2b40      	cmp	r3, #64	; 0x40
 80069e4:	d107      	bne.n	80069f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fa16 	bl	8006e22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	f003 0320 	and.w	r3, r3, #32
 8006a00:	2b20      	cmp	r3, #32
 8006a02:	d10e      	bne.n	8006a22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f003 0320 	and.w	r3, r3, #32
 8006a0e:	2b20      	cmp	r3, #32
 8006a10:	d107      	bne.n	8006a22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f06f 0220 	mvn.w	r2, #32
 8006a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 feb1 	bl	8007784 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a22:	bf00      	nop
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d101      	bne.n	8006a4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a46:	2302      	movs	r3, #2
 8006a48:	e0ff      	b.n	8006c4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b14      	cmp	r3, #20
 8006a56:	f200 80f0 	bhi.w	8006c3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006a5a:	a201      	add	r2, pc, #4	; (adr r2, 8006a60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a60:	08006ab5 	.word	0x08006ab5
 8006a64:	08006c3b 	.word	0x08006c3b
 8006a68:	08006c3b 	.word	0x08006c3b
 8006a6c:	08006c3b 	.word	0x08006c3b
 8006a70:	08006af5 	.word	0x08006af5
 8006a74:	08006c3b 	.word	0x08006c3b
 8006a78:	08006c3b 	.word	0x08006c3b
 8006a7c:	08006c3b 	.word	0x08006c3b
 8006a80:	08006b37 	.word	0x08006b37
 8006a84:	08006c3b 	.word	0x08006c3b
 8006a88:	08006c3b 	.word	0x08006c3b
 8006a8c:	08006c3b 	.word	0x08006c3b
 8006a90:	08006b77 	.word	0x08006b77
 8006a94:	08006c3b 	.word	0x08006c3b
 8006a98:	08006c3b 	.word	0x08006c3b
 8006a9c:	08006c3b 	.word	0x08006c3b
 8006aa0:	08006bb9 	.word	0x08006bb9
 8006aa4:	08006c3b 	.word	0x08006c3b
 8006aa8:	08006c3b 	.word	0x08006c3b
 8006aac:	08006c3b 	.word	0x08006c3b
 8006ab0:	08006bf9 	.word	0x08006bf9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68b9      	ldr	r1, [r7, #8]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 fa4c 	bl	8006f58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	699a      	ldr	r2, [r3, #24]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f042 0208 	orr.w	r2, r2, #8
 8006ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	699a      	ldr	r2, [r3, #24]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 0204 	bic.w	r2, r2, #4
 8006ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6999      	ldr	r1, [r3, #24]
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	691a      	ldr	r2, [r3, #16]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	619a      	str	r2, [r3, #24]
      break;
 8006af2:	e0a5      	b.n	8006c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68b9      	ldr	r1, [r7, #8]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 fabc 	bl	8007078 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699a      	ldr	r2, [r3, #24]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	699a      	ldr	r2, [r3, #24]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6999      	ldr	r1, [r3, #24]
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	021a      	lsls	r2, r3, #8
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	619a      	str	r2, [r3, #24]
      break;
 8006b34:	e084      	b.n	8006c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68b9      	ldr	r1, [r7, #8]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 fb25 	bl	800718c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	69da      	ldr	r2, [r3, #28]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f042 0208 	orr.w	r2, r2, #8
 8006b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	69da      	ldr	r2, [r3, #28]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 0204 	bic.w	r2, r2, #4
 8006b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	69d9      	ldr	r1, [r3, #28]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	691a      	ldr	r2, [r3, #16]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	430a      	orrs	r2, r1
 8006b72:	61da      	str	r2, [r3, #28]
      break;
 8006b74:	e064      	b.n	8006c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68b9      	ldr	r1, [r7, #8]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f000 fb8d 	bl	800729c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	69da      	ldr	r2, [r3, #28]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	69da      	ldr	r2, [r3, #28]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	69d9      	ldr	r1, [r3, #28]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	021a      	lsls	r2, r3, #8
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	61da      	str	r2, [r3, #28]
      break;
 8006bb6:	e043      	b.n	8006c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68b9      	ldr	r1, [r7, #8]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 fbd6 	bl	8007370 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f042 0208 	orr.w	r2, r2, #8
 8006bd2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f022 0204 	bic.w	r2, r2, #4
 8006be2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	691a      	ldr	r2, [r3, #16]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006bf6:	e023      	b.n	8006c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68b9      	ldr	r1, [r7, #8]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 fc1a 	bl	8007438 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	021a      	lsls	r2, r3, #8
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	430a      	orrs	r2, r1
 8006c36:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c38:	e002      	b.n	8006c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3718      	adds	r7, #24
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop

08006c54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d101      	bne.n	8006c70 <HAL_TIM_ConfigClockSource+0x1c>
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	e0b6      	b.n	8006dde <HAL_TIM_ConfigClockSource+0x18a>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cac:	d03e      	beq.n	8006d2c <HAL_TIM_ConfigClockSource+0xd8>
 8006cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb2:	f200 8087 	bhi.w	8006dc4 <HAL_TIM_ConfigClockSource+0x170>
 8006cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cba:	f000 8086 	beq.w	8006dca <HAL_TIM_ConfigClockSource+0x176>
 8006cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc2:	d87f      	bhi.n	8006dc4 <HAL_TIM_ConfigClockSource+0x170>
 8006cc4:	2b70      	cmp	r3, #112	; 0x70
 8006cc6:	d01a      	beq.n	8006cfe <HAL_TIM_ConfigClockSource+0xaa>
 8006cc8:	2b70      	cmp	r3, #112	; 0x70
 8006cca:	d87b      	bhi.n	8006dc4 <HAL_TIM_ConfigClockSource+0x170>
 8006ccc:	2b60      	cmp	r3, #96	; 0x60
 8006cce:	d050      	beq.n	8006d72 <HAL_TIM_ConfigClockSource+0x11e>
 8006cd0:	2b60      	cmp	r3, #96	; 0x60
 8006cd2:	d877      	bhi.n	8006dc4 <HAL_TIM_ConfigClockSource+0x170>
 8006cd4:	2b50      	cmp	r3, #80	; 0x50
 8006cd6:	d03c      	beq.n	8006d52 <HAL_TIM_ConfigClockSource+0xfe>
 8006cd8:	2b50      	cmp	r3, #80	; 0x50
 8006cda:	d873      	bhi.n	8006dc4 <HAL_TIM_ConfigClockSource+0x170>
 8006cdc:	2b40      	cmp	r3, #64	; 0x40
 8006cde:	d058      	beq.n	8006d92 <HAL_TIM_ConfigClockSource+0x13e>
 8006ce0:	2b40      	cmp	r3, #64	; 0x40
 8006ce2:	d86f      	bhi.n	8006dc4 <HAL_TIM_ConfigClockSource+0x170>
 8006ce4:	2b30      	cmp	r3, #48	; 0x30
 8006ce6:	d064      	beq.n	8006db2 <HAL_TIM_ConfigClockSource+0x15e>
 8006ce8:	2b30      	cmp	r3, #48	; 0x30
 8006cea:	d86b      	bhi.n	8006dc4 <HAL_TIM_ConfigClockSource+0x170>
 8006cec:	2b20      	cmp	r3, #32
 8006cee:	d060      	beq.n	8006db2 <HAL_TIM_ConfigClockSource+0x15e>
 8006cf0:	2b20      	cmp	r3, #32
 8006cf2:	d867      	bhi.n	8006dc4 <HAL_TIM_ConfigClockSource+0x170>
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d05c      	beq.n	8006db2 <HAL_TIM_ConfigClockSource+0x15e>
 8006cf8:	2b10      	cmp	r3, #16
 8006cfa:	d05a      	beq.n	8006db2 <HAL_TIM_ConfigClockSource+0x15e>
 8006cfc:	e062      	b.n	8006dc4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6818      	ldr	r0, [r3, #0]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	6899      	ldr	r1, [r3, #8]
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685a      	ldr	r2, [r3, #4]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	f000 fc73 	bl	80075f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	609a      	str	r2, [r3, #8]
      break;
 8006d2a:	e04f      	b.n	8006dcc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6818      	ldr	r0, [r3, #0]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	6899      	ldr	r1, [r3, #8]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	f000 fc5c 	bl	80075f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689a      	ldr	r2, [r3, #8]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d4e:	609a      	str	r2, [r3, #8]
      break;
 8006d50:	e03c      	b.n	8006dcc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6818      	ldr	r0, [r3, #0]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	6859      	ldr	r1, [r3, #4]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f000 fbd0 	bl	8007504 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2150      	movs	r1, #80	; 0x50
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f000 fc29 	bl	80075c2 <TIM_ITRx_SetConfig>
      break;
 8006d70:	e02c      	b.n	8006dcc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6818      	ldr	r0, [r3, #0]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	6859      	ldr	r1, [r3, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	f000 fbef 	bl	8007562 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2160      	movs	r1, #96	; 0x60
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 fc19 	bl	80075c2 <TIM_ITRx_SetConfig>
      break;
 8006d90:	e01c      	b.n	8006dcc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6818      	ldr	r0, [r3, #0]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	6859      	ldr	r1, [r3, #4]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f000 fbb0 	bl	8007504 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2140      	movs	r1, #64	; 0x40
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 fc09 	bl	80075c2 <TIM_ITRx_SetConfig>
      break;
 8006db0:	e00c      	b.n	8006dcc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4619      	mov	r1, r3
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	f000 fc00 	bl	80075c2 <TIM_ITRx_SetConfig>
      break;
 8006dc2:	e003      	b.n	8006dcc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8006dc8:	e000      	b.n	8006dcc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006dca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b083      	sub	sp, #12
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dee:	bf00      	nop
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b083      	sub	sp, #12
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e02:	bf00      	nop
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b083      	sub	sp, #12
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e16:	bf00      	nop
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e22:	b480      	push	{r7}
 8006e24:	b083      	sub	sp, #12
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e2a:	bf00      	nop
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
	...

08006e38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a3c      	ldr	r2, [pc, #240]	; (8006f3c <TIM_Base_SetConfig+0x104>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d00f      	beq.n	8006e70 <TIM_Base_SetConfig+0x38>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e56:	d00b      	beq.n	8006e70 <TIM_Base_SetConfig+0x38>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a39      	ldr	r2, [pc, #228]	; (8006f40 <TIM_Base_SetConfig+0x108>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d007      	beq.n	8006e70 <TIM_Base_SetConfig+0x38>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a38      	ldr	r2, [pc, #224]	; (8006f44 <TIM_Base_SetConfig+0x10c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d003      	beq.n	8006e70 <TIM_Base_SetConfig+0x38>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a37      	ldr	r2, [pc, #220]	; (8006f48 <TIM_Base_SetConfig+0x110>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d108      	bne.n	8006e82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a2d      	ldr	r2, [pc, #180]	; (8006f3c <TIM_Base_SetConfig+0x104>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d01b      	beq.n	8006ec2 <TIM_Base_SetConfig+0x8a>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e90:	d017      	beq.n	8006ec2 <TIM_Base_SetConfig+0x8a>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a2a      	ldr	r2, [pc, #168]	; (8006f40 <TIM_Base_SetConfig+0x108>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d013      	beq.n	8006ec2 <TIM_Base_SetConfig+0x8a>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a29      	ldr	r2, [pc, #164]	; (8006f44 <TIM_Base_SetConfig+0x10c>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d00f      	beq.n	8006ec2 <TIM_Base_SetConfig+0x8a>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a28      	ldr	r2, [pc, #160]	; (8006f48 <TIM_Base_SetConfig+0x110>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d00b      	beq.n	8006ec2 <TIM_Base_SetConfig+0x8a>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a27      	ldr	r2, [pc, #156]	; (8006f4c <TIM_Base_SetConfig+0x114>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d007      	beq.n	8006ec2 <TIM_Base_SetConfig+0x8a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a26      	ldr	r2, [pc, #152]	; (8006f50 <TIM_Base_SetConfig+0x118>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d003      	beq.n	8006ec2 <TIM_Base_SetConfig+0x8a>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a25      	ldr	r2, [pc, #148]	; (8006f54 <TIM_Base_SetConfig+0x11c>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d108      	bne.n	8006ed4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a10      	ldr	r2, [pc, #64]	; (8006f3c <TIM_Base_SetConfig+0x104>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d00f      	beq.n	8006f20 <TIM_Base_SetConfig+0xe8>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a11      	ldr	r2, [pc, #68]	; (8006f48 <TIM_Base_SetConfig+0x110>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d00b      	beq.n	8006f20 <TIM_Base_SetConfig+0xe8>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a10      	ldr	r2, [pc, #64]	; (8006f4c <TIM_Base_SetConfig+0x114>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d007      	beq.n	8006f20 <TIM_Base_SetConfig+0xe8>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a0f      	ldr	r2, [pc, #60]	; (8006f50 <TIM_Base_SetConfig+0x118>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d003      	beq.n	8006f20 <TIM_Base_SetConfig+0xe8>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a0e      	ldr	r2, [pc, #56]	; (8006f54 <TIM_Base_SetConfig+0x11c>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d103      	bne.n	8006f28 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	691a      	ldr	r2, [r3, #16]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	615a      	str	r2, [r3, #20]
}
 8006f2e:	bf00      	nop
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	40012c00 	.word	0x40012c00
 8006f40:	40000400 	.word	0x40000400
 8006f44:	40000800 	.word	0x40000800
 8006f48:	40013400 	.word	0x40013400
 8006f4c:	40014000 	.word	0x40014000
 8006f50:	40014400 	.word	0x40014400
 8006f54:	40014800 	.word	0x40014800

08006f58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b087      	sub	sp, #28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	f023 0201 	bic.w	r2, r3, #1
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f023 0303 	bic.w	r3, r3, #3
 8006f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f023 0302 	bic.w	r3, r3, #2
 8006fa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a2c      	ldr	r2, [pc, #176]	; (8007064 <TIM_OC1_SetConfig+0x10c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d00f      	beq.n	8006fd8 <TIM_OC1_SetConfig+0x80>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a2b      	ldr	r2, [pc, #172]	; (8007068 <TIM_OC1_SetConfig+0x110>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d00b      	beq.n	8006fd8 <TIM_OC1_SetConfig+0x80>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a2a      	ldr	r2, [pc, #168]	; (800706c <TIM_OC1_SetConfig+0x114>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d007      	beq.n	8006fd8 <TIM_OC1_SetConfig+0x80>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a29      	ldr	r2, [pc, #164]	; (8007070 <TIM_OC1_SetConfig+0x118>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d003      	beq.n	8006fd8 <TIM_OC1_SetConfig+0x80>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a28      	ldr	r2, [pc, #160]	; (8007074 <TIM_OC1_SetConfig+0x11c>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d10c      	bne.n	8006ff2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f023 0308 	bic.w	r3, r3, #8
 8006fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	f023 0304 	bic.w	r3, r3, #4
 8006ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a1b      	ldr	r2, [pc, #108]	; (8007064 <TIM_OC1_SetConfig+0x10c>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d00f      	beq.n	800701a <TIM_OC1_SetConfig+0xc2>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a1a      	ldr	r2, [pc, #104]	; (8007068 <TIM_OC1_SetConfig+0x110>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d00b      	beq.n	800701a <TIM_OC1_SetConfig+0xc2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a19      	ldr	r2, [pc, #100]	; (800706c <TIM_OC1_SetConfig+0x114>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d007      	beq.n	800701a <TIM_OC1_SetConfig+0xc2>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a18      	ldr	r2, [pc, #96]	; (8007070 <TIM_OC1_SetConfig+0x118>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d003      	beq.n	800701a <TIM_OC1_SetConfig+0xc2>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a17      	ldr	r2, [pc, #92]	; (8007074 <TIM_OC1_SetConfig+0x11c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d111      	bne.n	800703e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	4313      	orrs	r3, r2
 8007032:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	4313      	orrs	r3, r2
 800703c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	685a      	ldr	r2, [r3, #4]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	697a      	ldr	r2, [r7, #20]
 8007056:	621a      	str	r2, [r3, #32]
}
 8007058:	bf00      	nop
 800705a:	371c      	adds	r7, #28
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	40012c00 	.word	0x40012c00
 8007068:	40013400 	.word	0x40013400
 800706c:	40014000 	.word	0x40014000
 8007070:	40014400 	.word	0x40014400
 8007074:	40014800 	.word	0x40014800

08007078 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007078:	b480      	push	{r7}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	f023 0210 	bic.w	r2, r3, #16
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	021b      	lsls	r3, r3, #8
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	4313      	orrs	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	f023 0320 	bic.w	r3, r3, #32
 80070c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	011b      	lsls	r3, r3, #4
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a28      	ldr	r2, [pc, #160]	; (8007178 <TIM_OC2_SetConfig+0x100>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d003      	beq.n	80070e4 <TIM_OC2_SetConfig+0x6c>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a27      	ldr	r2, [pc, #156]	; (800717c <TIM_OC2_SetConfig+0x104>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d10d      	bne.n	8007100 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	011b      	lsls	r3, r3, #4
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a1d      	ldr	r2, [pc, #116]	; (8007178 <TIM_OC2_SetConfig+0x100>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d00f      	beq.n	8007128 <TIM_OC2_SetConfig+0xb0>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a1c      	ldr	r2, [pc, #112]	; (800717c <TIM_OC2_SetConfig+0x104>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d00b      	beq.n	8007128 <TIM_OC2_SetConfig+0xb0>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a1b      	ldr	r2, [pc, #108]	; (8007180 <TIM_OC2_SetConfig+0x108>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d007      	beq.n	8007128 <TIM_OC2_SetConfig+0xb0>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a1a      	ldr	r2, [pc, #104]	; (8007184 <TIM_OC2_SetConfig+0x10c>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d003      	beq.n	8007128 <TIM_OC2_SetConfig+0xb0>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a19      	ldr	r2, [pc, #100]	; (8007188 <TIM_OC2_SetConfig+0x110>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d113      	bne.n	8007150 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800712e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007136:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	4313      	orrs	r3, r2
 8007142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	4313      	orrs	r3, r2
 800714e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	621a      	str	r2, [r3, #32]
}
 800716a:	bf00      	nop
 800716c:	371c      	adds	r7, #28
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	40012c00 	.word	0x40012c00
 800717c:	40013400 	.word	0x40013400
 8007180:	40014000 	.word	0x40014000
 8007184:	40014400 	.word	0x40014400
 8007188:	40014800 	.word	0x40014800

0800718c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f023 0303 	bic.w	r3, r3, #3
 80071c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	021b      	lsls	r3, r3, #8
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a27      	ldr	r2, [pc, #156]	; (8007288 <TIM_OC3_SetConfig+0xfc>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d003      	beq.n	80071f6 <TIM_OC3_SetConfig+0x6a>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a26      	ldr	r2, [pc, #152]	; (800728c <TIM_OC3_SetConfig+0x100>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d10d      	bne.n	8007212 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	021b      	lsls	r3, r3, #8
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	4313      	orrs	r3, r2
 8007208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007210:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a1c      	ldr	r2, [pc, #112]	; (8007288 <TIM_OC3_SetConfig+0xfc>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d00f      	beq.n	800723a <TIM_OC3_SetConfig+0xae>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a1b      	ldr	r2, [pc, #108]	; (800728c <TIM_OC3_SetConfig+0x100>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d00b      	beq.n	800723a <TIM_OC3_SetConfig+0xae>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a1a      	ldr	r2, [pc, #104]	; (8007290 <TIM_OC3_SetConfig+0x104>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d007      	beq.n	800723a <TIM_OC3_SetConfig+0xae>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a19      	ldr	r2, [pc, #100]	; (8007294 <TIM_OC3_SetConfig+0x108>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d003      	beq.n	800723a <TIM_OC3_SetConfig+0xae>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a18      	ldr	r2, [pc, #96]	; (8007298 <TIM_OC3_SetConfig+0x10c>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d113      	bne.n	8007262 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	011b      	lsls	r3, r3, #4
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	4313      	orrs	r3, r2
 8007254:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	011b      	lsls	r3, r3, #4
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	4313      	orrs	r3, r2
 8007260:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	685a      	ldr	r2, [r3, #4]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	621a      	str	r2, [r3, #32]
}
 800727c:	bf00      	nop
 800727e:	371c      	adds	r7, #28
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr
 8007288:	40012c00 	.word	0x40012c00
 800728c:	40013400 	.word	0x40013400
 8007290:	40014000 	.word	0x40014000
 8007294:	40014400 	.word	0x40014400
 8007298:	40014800 	.word	0x40014800

0800729c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800729c:	b480      	push	{r7}
 800729e:	b087      	sub	sp, #28
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	021b      	lsls	r3, r3, #8
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	031b      	lsls	r3, r3, #12
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a18      	ldr	r2, [pc, #96]	; (800735c <TIM_OC4_SetConfig+0xc0>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d00f      	beq.n	8007320 <TIM_OC4_SetConfig+0x84>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a17      	ldr	r2, [pc, #92]	; (8007360 <TIM_OC4_SetConfig+0xc4>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d00b      	beq.n	8007320 <TIM_OC4_SetConfig+0x84>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a16      	ldr	r2, [pc, #88]	; (8007364 <TIM_OC4_SetConfig+0xc8>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d007      	beq.n	8007320 <TIM_OC4_SetConfig+0x84>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a15      	ldr	r2, [pc, #84]	; (8007368 <TIM_OC4_SetConfig+0xcc>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d003      	beq.n	8007320 <TIM_OC4_SetConfig+0x84>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a14      	ldr	r2, [pc, #80]	; (800736c <TIM_OC4_SetConfig+0xd0>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d109      	bne.n	8007334 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007326:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	019b      	lsls	r3, r3, #6
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	4313      	orrs	r3, r2
 8007332:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	621a      	str	r2, [r3, #32]
}
 800734e:	bf00      	nop
 8007350:	371c      	adds	r7, #28
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	40012c00 	.word	0x40012c00
 8007360:	40013400 	.word	0x40013400
 8007364:	40014000 	.word	0x40014000
 8007368:	40014400 	.word	0x40014400
 800736c:	40014800 	.word	0x40014800

08007370 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007370:	b480      	push	{r7}
 8007372:	b087      	sub	sp, #28
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800739e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80073b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	041b      	lsls	r3, r3, #16
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	4313      	orrs	r3, r2
 80073c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a17      	ldr	r2, [pc, #92]	; (8007424 <TIM_OC5_SetConfig+0xb4>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d00f      	beq.n	80073ea <TIM_OC5_SetConfig+0x7a>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a16      	ldr	r2, [pc, #88]	; (8007428 <TIM_OC5_SetConfig+0xb8>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d00b      	beq.n	80073ea <TIM_OC5_SetConfig+0x7a>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a15      	ldr	r2, [pc, #84]	; (800742c <TIM_OC5_SetConfig+0xbc>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d007      	beq.n	80073ea <TIM_OC5_SetConfig+0x7a>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a14      	ldr	r2, [pc, #80]	; (8007430 <TIM_OC5_SetConfig+0xc0>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d003      	beq.n	80073ea <TIM_OC5_SetConfig+0x7a>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a13      	ldr	r2, [pc, #76]	; (8007434 <TIM_OC5_SetConfig+0xc4>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d109      	bne.n	80073fe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	021b      	lsls	r3, r3, #8
 80073f8:	697a      	ldr	r2, [r7, #20]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	621a      	str	r2, [r3, #32]
}
 8007418:	bf00      	nop
 800741a:	371c      	adds	r7, #28
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	40012c00 	.word	0x40012c00
 8007428:	40013400 	.word	0x40013400
 800742c:	40014000 	.word	0x40014000
 8007430:	40014400 	.word	0x40014400
 8007434:	40014800 	.word	0x40014800

08007438 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800745e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800746a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	021b      	lsls	r3, r3, #8
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	4313      	orrs	r3, r2
 8007476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800747e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	051b      	lsls	r3, r3, #20
 8007486:	693a      	ldr	r2, [r7, #16]
 8007488:	4313      	orrs	r3, r2
 800748a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a18      	ldr	r2, [pc, #96]	; (80074f0 <TIM_OC6_SetConfig+0xb8>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d00f      	beq.n	80074b4 <TIM_OC6_SetConfig+0x7c>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a17      	ldr	r2, [pc, #92]	; (80074f4 <TIM_OC6_SetConfig+0xbc>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d00b      	beq.n	80074b4 <TIM_OC6_SetConfig+0x7c>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a16      	ldr	r2, [pc, #88]	; (80074f8 <TIM_OC6_SetConfig+0xc0>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d007      	beq.n	80074b4 <TIM_OC6_SetConfig+0x7c>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a15      	ldr	r2, [pc, #84]	; (80074fc <TIM_OC6_SetConfig+0xc4>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d003      	beq.n	80074b4 <TIM_OC6_SetConfig+0x7c>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a14      	ldr	r2, [pc, #80]	; (8007500 <TIM_OC6_SetConfig+0xc8>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d109      	bne.n	80074c8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	695b      	ldr	r3, [r3, #20]
 80074c0:	029b      	lsls	r3, r3, #10
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	685a      	ldr	r2, [r3, #4]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	621a      	str	r2, [r3, #32]
}
 80074e2:	bf00      	nop
 80074e4:	371c      	adds	r7, #28
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	40012c00 	.word	0x40012c00
 80074f4:	40013400 	.word	0x40013400
 80074f8:	40014000 	.word	0x40014000
 80074fc:	40014400 	.word	0x40014400
 8007500:	40014800 	.word	0x40014800

08007504 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007504:	b480      	push	{r7}
 8007506:	b087      	sub	sp, #28
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6a1b      	ldr	r3, [r3, #32]
 8007514:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	f023 0201 	bic.w	r2, r3, #1
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800752e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	011b      	lsls	r3, r3, #4
 8007534:	693a      	ldr	r2, [r7, #16]
 8007536:	4313      	orrs	r3, r2
 8007538:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f023 030a 	bic.w	r3, r3, #10
 8007540:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	4313      	orrs	r3, r2
 8007548:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	621a      	str	r2, [r3, #32]
}
 8007556:	bf00      	nop
 8007558:	371c      	adds	r7, #28
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007562:	b480      	push	{r7}
 8007564:	b087      	sub	sp, #28
 8007566:	af00      	add	r7, sp, #0
 8007568:	60f8      	str	r0, [r7, #12]
 800756a:	60b9      	str	r1, [r7, #8]
 800756c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6a1b      	ldr	r3, [r3, #32]
 8007572:	f023 0210 	bic.w	r2, r3, #16
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6a1b      	ldr	r3, [r3, #32]
 8007584:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800758c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	031b      	lsls	r3, r3, #12
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	4313      	orrs	r3, r2
 8007596:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800759e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	011b      	lsls	r3, r3, #4
 80075a4:	693a      	ldr	r2, [r7, #16]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	621a      	str	r2, [r3, #32]
}
 80075b6:	bf00      	nop
 80075b8:	371c      	adds	r7, #28
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b085      	sub	sp, #20
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075da:	683a      	ldr	r2, [r7, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	4313      	orrs	r3, r2
 80075e0:	f043 0307 	orr.w	r3, r3, #7
 80075e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	609a      	str	r2, [r3, #8]
}
 80075ec:	bf00      	nop
 80075ee:	3714      	adds	r7, #20
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b087      	sub	sp, #28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
 8007604:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007612:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	021a      	lsls	r2, r3, #8
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	431a      	orrs	r2, r3
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	4313      	orrs	r3, r2
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	4313      	orrs	r3, r2
 8007624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	609a      	str	r2, [r3, #8]
}
 800762c:	bf00      	nop
 800762e:	371c      	adds	r7, #28
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	f003 031f 	and.w	r3, r3, #31
 800764a:	2201      	movs	r2, #1
 800764c:	fa02 f303 	lsl.w	r3, r2, r3
 8007650:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6a1a      	ldr	r2, [r3, #32]
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	43db      	mvns	r3, r3
 800765a:	401a      	ands	r2, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6a1a      	ldr	r2, [r3, #32]
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	f003 031f 	and.w	r3, r3, #31
 800766a:	6879      	ldr	r1, [r7, #4]
 800766c:	fa01 f303 	lsl.w	r3, r1, r3
 8007670:	431a      	orrs	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	621a      	str	r2, [r3, #32]
}
 8007676:	bf00      	nop
 8007678:	371c      	adds	r7, #28
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
	...

08007684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007694:	2b01      	cmp	r3, #1
 8007696:	d101      	bne.n	800769c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007698:	2302      	movs	r3, #2
 800769a:	e063      	b.n	8007764 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2202      	movs	r2, #2
 80076a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a2b      	ldr	r2, [pc, #172]	; (8007770 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d004      	beq.n	80076d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a2a      	ldr	r2, [pc, #168]	; (8007774 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d108      	bne.n	80076e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80076d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	4313      	orrs	r3, r2
 80076e0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a1b      	ldr	r2, [pc, #108]	; (8007770 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d018      	beq.n	8007738 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800770e:	d013      	beq.n	8007738 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a18      	ldr	r2, [pc, #96]	; (8007778 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d00e      	beq.n	8007738 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a17      	ldr	r2, [pc, #92]	; (800777c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d009      	beq.n	8007738 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a12      	ldr	r2, [pc, #72]	; (8007774 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d004      	beq.n	8007738 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a13      	ldr	r2, [pc, #76]	; (8007780 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d10c      	bne.n	8007752 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800773e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	4313      	orrs	r3, r2
 8007748:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	40012c00 	.word	0x40012c00
 8007774:	40013400 	.word	0x40013400
 8007778:	40000400 	.word	0x40000400
 800777c:	40000800 	.word	0x40000800
 8007780:	40014000 	.word	0x40014000

08007784 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d101      	bne.n	80077d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e040      	b.n	8007854 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d106      	bne.n	80077e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7fa fc30 	bl	8002048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2224      	movs	r2, #36	; 0x24
 80077ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f022 0201 	bic.w	r2, r2, #1
 80077fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fbd4 	bl	8007fac <UART_SetConfig>
 8007804:	4603      	mov	r3, r0
 8007806:	2b01      	cmp	r3, #1
 8007808:	d101      	bne.n	800780e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e022      	b.n	8007854 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007812:	2b00      	cmp	r3, #0
 8007814:	d002      	beq.n	800781c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fd9c 	bl	8008354 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685a      	ldr	r2, [r3, #4]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800782a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689a      	ldr	r2, [r3, #8]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800783a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f042 0201 	orr.w	r2, r2, #1
 800784a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fe23 	bl	8008498 <UART_CheckIdleState>
 8007852:	4603      	mov	r3, r0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800785c:	b480      	push	{r7}
 800785e:	b08b      	sub	sp, #44	; 0x2c
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	4613      	mov	r3, r2
 8007868:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800786e:	2b20      	cmp	r3, #32
 8007870:	d147      	bne.n	8007902 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d002      	beq.n	800787e <HAL_UART_Transmit_IT+0x22>
 8007878:	88fb      	ldrh	r3, [r7, #6]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e040      	b.n	8007904 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	88fa      	ldrh	r2, [r7, #6]
 800788c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	88fa      	ldrh	r2, [r7, #6]
 8007894:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2221      	movs	r2, #33	; 0x21
 80078aa:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078b4:	d107      	bne.n	80078c6 <HAL_UART_Transmit_IT+0x6a>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d103      	bne.n	80078c6 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	4a13      	ldr	r2, [pc, #76]	; (8007910 <HAL_UART_Transmit_IT+0xb4>)
 80078c2:	66da      	str	r2, [r3, #108]	; 0x6c
 80078c4:	e002      	b.n	80078cc <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	4a12      	ldr	r2, [pc, #72]	; (8007914 <HAL_UART_Transmit_IT+0xb8>)
 80078ca:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	e853 3f00 	ldrex	r3, [r3]
 80078d8:	613b      	str	r3, [r7, #16]
   return(result);
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078e0:	627b      	str	r3, [r7, #36]	; 0x24
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	461a      	mov	r2, r3
 80078e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ea:	623b      	str	r3, [r7, #32]
 80078ec:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ee:	69f9      	ldr	r1, [r7, #28]
 80078f0:	6a3a      	ldr	r2, [r7, #32]
 80078f2:	e841 2300 	strex	r3, r2, [r1]
 80078f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1e6      	bne.n	80078cc <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	e000      	b.n	8007904 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007902:	2302      	movs	r3, #2
  }
}
 8007904:	4618      	mov	r0, r3
 8007906:	372c      	adds	r7, #44	; 0x2c
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	080089cd 	.word	0x080089cd
 8007914:	08008915 	.word	0x08008915

08007918 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b08a      	sub	sp, #40	; 0x28
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	4613      	mov	r3, r2
 8007924:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800792c:	2b20      	cmp	r3, #32
 800792e:	d132      	bne.n	8007996 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d002      	beq.n	800793c <HAL_UART_Receive_IT+0x24>
 8007936:	88fb      	ldrh	r3, [r7, #6]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e02b      	b.n	8007998 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d018      	beq.n	8007986 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	e853 3f00 	ldrex	r3, [r3]
 8007960:	613b      	str	r3, [r7, #16]
   return(result);
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007968:	627b      	str	r3, [r7, #36]	; 0x24
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	461a      	mov	r2, r3
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007972:	623b      	str	r3, [r7, #32]
 8007974:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007976:	69f9      	ldr	r1, [r7, #28]
 8007978:	6a3a      	ldr	r2, [r7, #32]
 800797a:	e841 2300 	strex	r3, r2, [r1]
 800797e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1e6      	bne.n	8007954 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007986:	88fb      	ldrh	r3, [r7, #6]
 8007988:	461a      	mov	r2, r3
 800798a:	68b9      	ldr	r1, [r7, #8]
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 fe93 	bl	80086b8 <UART_Start_Receive_IT>
 8007992:	4603      	mov	r3, r0
 8007994:	e000      	b.n	8007998 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007996:	2302      	movs	r3, #2
  }
}
 8007998:	4618      	mov	r0, r3
 800799a:	3728      	adds	r7, #40	; 0x28
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b0ba      	sub	sp, #232	; 0xe8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	69db      	ldr	r3, [r3, #28]
 80079ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80079c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80079ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80079ce:	4013      	ands	r3, r2
 80079d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80079d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d115      	bne.n	8007a08 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80079dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079e0:	f003 0320 	and.w	r3, r3, #32
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00f      	beq.n	8007a08 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80079e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079ec:	f003 0320 	and.w	r3, r3, #32
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d009      	beq.n	8007a08 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 82ab 	beq.w	8007f54 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	4798      	blx	r3
      }
      return;
 8007a06:	e2a5      	b.n	8007f54 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007a08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f000 8117 	beq.w	8007c40 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d106      	bne.n	8007a2c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007a1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007a22:	4b85      	ldr	r3, [pc, #532]	; (8007c38 <HAL_UART_IRQHandler+0x298>)
 8007a24:	4013      	ands	r3, r2
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f000 810a 	beq.w	8007c40 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d011      	beq.n	8007a5c <HAL_UART_IRQHandler+0xbc>
 8007a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00b      	beq.n	8007a5c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a52:	f043 0201 	orr.w	r2, r3, #1
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a60:	f003 0302 	and.w	r3, r3, #2
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d011      	beq.n	8007a8c <HAL_UART_IRQHandler+0xec>
 8007a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00b      	beq.n	8007a8c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2202      	movs	r2, #2
 8007a7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a82:	f043 0204 	orr.w	r2, r3, #4
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a90:	f003 0304 	and.w	r3, r3, #4
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d011      	beq.n	8007abc <HAL_UART_IRQHandler+0x11c>
 8007a98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a9c:	f003 0301 	and.w	r3, r3, #1
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00b      	beq.n	8007abc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2204      	movs	r2, #4
 8007aaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ab2:	f043 0202 	orr.w	r2, r3, #2
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac0:	f003 0308 	and.w	r3, r3, #8
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d017      	beq.n	8007af8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007acc:	f003 0320 	and.w	r3, r3, #32
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d105      	bne.n	8007ae0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ad8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00b      	beq.n	8007af8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2208      	movs	r2, #8
 8007ae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aee:	f043 0208 	orr.w	r2, r3, #8
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007afc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d012      	beq.n	8007b2a <HAL_UART_IRQHandler+0x18a>
 8007b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00c      	beq.n	8007b2a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b20:	f043 0220 	orr.w	r2, r3, #32
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f000 8211 	beq.w	8007f58 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b3a:	f003 0320 	and.w	r3, r3, #32
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00d      	beq.n	8007b5e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b46:	f003 0320 	and.w	r3, r3, #32
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d007      	beq.n	8007b5e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d003      	beq.n	8007b5e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b72:	2b40      	cmp	r3, #64	; 0x40
 8007b74:	d005      	beq.n	8007b82 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d04f      	beq.n	8007c22 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fe4c 	bl	8008820 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b92:	2b40      	cmp	r3, #64	; 0x40
 8007b94:	d141      	bne.n	8007c1a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3308      	adds	r3, #8
 8007b9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ba4:	e853 3f00 	ldrex	r3, [r3]
 8007ba8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007bac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	3308      	adds	r3, #8
 8007bbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007bc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007bc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007bce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007bd2:	e841 2300 	strex	r3, r2, [r1]
 8007bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007bda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1d9      	bne.n	8007b96 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d013      	beq.n	8007c12 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bee:	4a13      	ldr	r2, [pc, #76]	; (8007c3c <HAL_UART_IRQHandler+0x29c>)
 8007bf0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fc fb0e 	bl	8004218 <HAL_DMA_Abort_IT>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d017      	beq.n	8007c32 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c10:	e00f      	b.n	8007c32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f9b4 	bl	8007f80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c18:	e00b      	b.n	8007c32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f9b0 	bl	8007f80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c20:	e007      	b.n	8007c32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f9ac 	bl	8007f80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007c30:	e192      	b.n	8007f58 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c32:	bf00      	nop
    return;
 8007c34:	e190      	b.n	8007f58 <HAL_UART_IRQHandler+0x5b8>
 8007c36:	bf00      	nop
 8007c38:	04000120 	.word	0x04000120
 8007c3c:	080088e9 	.word	0x080088e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	f040 814b 	bne.w	8007ee0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c4e:	f003 0310 	and.w	r3, r3, #16
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f000 8144 	beq.w	8007ee0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c5c:	f003 0310 	and.w	r3, r3, #16
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f000 813d 	beq.w	8007ee0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2210      	movs	r2, #16
 8007c6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c78:	2b40      	cmp	r3, #64	; 0x40
 8007c7a:	f040 80b5 	bne.w	8007de8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c8a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f000 8164 	beq.w	8007f5c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	f080 815c 	bcs.w	8007f5c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007caa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	2b20      	cmp	r3, #32
 8007cb6:	f000 8086 	beq.w	8007dc6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cc6:	e853 3f00 	ldrex	r3, [r3]
 8007cca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007cce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cd6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ce4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007ce8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007cf0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007cf4:	e841 2300 	strex	r3, r2, [r1]
 8007cf8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007cfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1da      	bne.n	8007cba <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	3308      	adds	r3, #8
 8007d0a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d0e:	e853 3f00 	ldrex	r3, [r3]
 8007d12:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d16:	f023 0301 	bic.w	r3, r3, #1
 8007d1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	3308      	adds	r3, #8
 8007d24:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d28:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d2c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d30:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d34:	e841 2300 	strex	r3, r2, [r1]
 8007d38:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d1e1      	bne.n	8007d04 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3308      	adds	r3, #8
 8007d46:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d4a:	e853 3f00 	ldrex	r3, [r3]
 8007d4e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	3308      	adds	r3, #8
 8007d60:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d64:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d68:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d6a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d6c:	e841 2300 	strex	r3, r2, [r1]
 8007d70:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1e3      	bne.n	8007d40 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d8e:	e853 3f00 	ldrex	r3, [r3]
 8007d92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d96:	f023 0310 	bic.w	r3, r3, #16
 8007d9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	461a      	mov	r2, r3
 8007da4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007da8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007daa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007dae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007db0:	e841 2300 	strex	r3, r2, [r1]
 8007db4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1e4      	bne.n	8007d86 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7fc f9f0 	bl	80041a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2202      	movs	r2, #2
 8007dca:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	4619      	mov	r1, r3
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f8d7 	bl	8007f94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007de6:	e0b9      	b.n	8007f5c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f000 80ab 	beq.w	8007f60 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007e0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 80a6 	beq.w	8007f60 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1c:	e853 3f00 	ldrex	r3, [r3]
 8007e20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	461a      	mov	r2, r3
 8007e32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e36:	647b      	str	r3, [r7, #68]	; 0x44
 8007e38:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e3e:	e841 2300 	strex	r3, r2, [r1]
 8007e42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1e4      	bne.n	8007e14 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3308      	adds	r3, #8
 8007e50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e54:	e853 3f00 	ldrex	r3, [r3]
 8007e58:	623b      	str	r3, [r7, #32]
   return(result);
 8007e5a:	6a3b      	ldr	r3, [r7, #32]
 8007e5c:	f023 0301 	bic.w	r3, r3, #1
 8007e60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	3308      	adds	r3, #8
 8007e6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e6e:	633a      	str	r2, [r7, #48]	; 0x30
 8007e70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e76:	e841 2300 	strex	r3, r2, [r1]
 8007e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1e3      	bne.n	8007e4a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2220      	movs	r2, #32
 8007e86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	e853 3f00 	ldrex	r3, [r3]
 8007ea2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f023 0310 	bic.w	r3, r3, #16
 8007eaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007eb8:	61fb      	str	r3, [r7, #28]
 8007eba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebc:	69b9      	ldr	r1, [r7, #24]
 8007ebe:	69fa      	ldr	r2, [r7, #28]
 8007ec0:	e841 2300 	strex	r3, r2, [r1]
 8007ec4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1e4      	bne.n	8007e96 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2202      	movs	r2, #2
 8007ed0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ed2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f85b 	bl	8007f94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ede:	e03f      	b.n	8007f60 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00e      	beq.n	8007f0a <HAL_UART_IRQHandler+0x56a>
 8007eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d008      	beq.n	8007f0a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007f00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 ff94 	bl	8008e30 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f08:	e02d      	b.n	8007f66 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00e      	beq.n	8007f34 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d008      	beq.n	8007f34 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d01c      	beq.n	8007f64 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	4798      	blx	r3
    }
    return;
 8007f32:	e017      	b.n	8007f64 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d012      	beq.n	8007f66 <HAL_UART_IRQHandler+0x5c6>
 8007f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00c      	beq.n	8007f66 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fd9d 	bl	8008a8c <UART_EndTransmit_IT>
    return;
 8007f52:	e008      	b.n	8007f66 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007f54:	bf00      	nop
 8007f56:	e006      	b.n	8007f66 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007f58:	bf00      	nop
 8007f5a:	e004      	b.n	8007f66 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007f5c:	bf00      	nop
 8007f5e:	e002      	b.n	8007f66 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007f60:	bf00      	nop
 8007f62:	e000      	b.n	8007f66 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007f64:	bf00      	nop
  }

}
 8007f66:	37e8      	adds	r7, #232	; 0xe8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007fa0:	bf00      	nop
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b088      	sub	sp, #32
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	689a      	ldr	r2, [r3, #8]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	431a      	orrs	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	695b      	ldr	r3, [r3, #20]
 8007fc6:	431a      	orrs	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	69db      	ldr	r3, [r3, #28]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007fda:	f023 030c 	bic.w	r3, r3, #12
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	6812      	ldr	r2, [r2, #0]
 8007fe2:	6979      	ldr	r1, [r7, #20]
 8007fe4:	430b      	orrs	r3, r1
 8007fe6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	68da      	ldr	r2, [r3, #12]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a1b      	ldr	r3, [r3, #32]
 8008008:	697a      	ldr	r2, [r7, #20]
 800800a:	4313      	orrs	r3, r2
 800800c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	430a      	orrs	r2, r1
 8008020:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4aa7      	ldr	r2, [pc, #668]	; (80082c4 <UART_SetConfig+0x318>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d120      	bne.n	800806e <UART_SetConfig+0xc2>
 800802c:	4ba6      	ldr	r3, [pc, #664]	; (80082c8 <UART_SetConfig+0x31c>)
 800802e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008030:	f003 0303 	and.w	r3, r3, #3
 8008034:	2b03      	cmp	r3, #3
 8008036:	d817      	bhi.n	8008068 <UART_SetConfig+0xbc>
 8008038:	a201      	add	r2, pc, #4	; (adr r2, 8008040 <UART_SetConfig+0x94>)
 800803a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803e:	bf00      	nop
 8008040:	08008051 	.word	0x08008051
 8008044:	0800805d 	.word	0x0800805d
 8008048:	08008063 	.word	0x08008063
 800804c:	08008057 	.word	0x08008057
 8008050:	2301      	movs	r3, #1
 8008052:	77fb      	strb	r3, [r7, #31]
 8008054:	e0b5      	b.n	80081c2 <UART_SetConfig+0x216>
 8008056:	2302      	movs	r3, #2
 8008058:	77fb      	strb	r3, [r7, #31]
 800805a:	e0b2      	b.n	80081c2 <UART_SetConfig+0x216>
 800805c:	2304      	movs	r3, #4
 800805e:	77fb      	strb	r3, [r7, #31]
 8008060:	e0af      	b.n	80081c2 <UART_SetConfig+0x216>
 8008062:	2308      	movs	r3, #8
 8008064:	77fb      	strb	r3, [r7, #31]
 8008066:	e0ac      	b.n	80081c2 <UART_SetConfig+0x216>
 8008068:	2310      	movs	r3, #16
 800806a:	77fb      	strb	r3, [r7, #31]
 800806c:	e0a9      	b.n	80081c2 <UART_SetConfig+0x216>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a96      	ldr	r2, [pc, #600]	; (80082cc <UART_SetConfig+0x320>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d124      	bne.n	80080c2 <UART_SetConfig+0x116>
 8008078:	4b93      	ldr	r3, [pc, #588]	; (80082c8 <UART_SetConfig+0x31c>)
 800807a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800807c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008080:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008084:	d011      	beq.n	80080aa <UART_SetConfig+0xfe>
 8008086:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800808a:	d817      	bhi.n	80080bc <UART_SetConfig+0x110>
 800808c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008090:	d011      	beq.n	80080b6 <UART_SetConfig+0x10a>
 8008092:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008096:	d811      	bhi.n	80080bc <UART_SetConfig+0x110>
 8008098:	2b00      	cmp	r3, #0
 800809a:	d003      	beq.n	80080a4 <UART_SetConfig+0xf8>
 800809c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080a0:	d006      	beq.n	80080b0 <UART_SetConfig+0x104>
 80080a2:	e00b      	b.n	80080bc <UART_SetConfig+0x110>
 80080a4:	2300      	movs	r3, #0
 80080a6:	77fb      	strb	r3, [r7, #31]
 80080a8:	e08b      	b.n	80081c2 <UART_SetConfig+0x216>
 80080aa:	2302      	movs	r3, #2
 80080ac:	77fb      	strb	r3, [r7, #31]
 80080ae:	e088      	b.n	80081c2 <UART_SetConfig+0x216>
 80080b0:	2304      	movs	r3, #4
 80080b2:	77fb      	strb	r3, [r7, #31]
 80080b4:	e085      	b.n	80081c2 <UART_SetConfig+0x216>
 80080b6:	2308      	movs	r3, #8
 80080b8:	77fb      	strb	r3, [r7, #31]
 80080ba:	e082      	b.n	80081c2 <UART_SetConfig+0x216>
 80080bc:	2310      	movs	r3, #16
 80080be:	77fb      	strb	r3, [r7, #31]
 80080c0:	e07f      	b.n	80081c2 <UART_SetConfig+0x216>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a82      	ldr	r2, [pc, #520]	; (80082d0 <UART_SetConfig+0x324>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d124      	bne.n	8008116 <UART_SetConfig+0x16a>
 80080cc:	4b7e      	ldr	r3, [pc, #504]	; (80082c8 <UART_SetConfig+0x31c>)
 80080ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80080d4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80080d8:	d011      	beq.n	80080fe <UART_SetConfig+0x152>
 80080da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80080de:	d817      	bhi.n	8008110 <UART_SetConfig+0x164>
 80080e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80080e4:	d011      	beq.n	800810a <UART_SetConfig+0x15e>
 80080e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80080ea:	d811      	bhi.n	8008110 <UART_SetConfig+0x164>
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d003      	beq.n	80080f8 <UART_SetConfig+0x14c>
 80080f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080f4:	d006      	beq.n	8008104 <UART_SetConfig+0x158>
 80080f6:	e00b      	b.n	8008110 <UART_SetConfig+0x164>
 80080f8:	2300      	movs	r3, #0
 80080fa:	77fb      	strb	r3, [r7, #31]
 80080fc:	e061      	b.n	80081c2 <UART_SetConfig+0x216>
 80080fe:	2302      	movs	r3, #2
 8008100:	77fb      	strb	r3, [r7, #31]
 8008102:	e05e      	b.n	80081c2 <UART_SetConfig+0x216>
 8008104:	2304      	movs	r3, #4
 8008106:	77fb      	strb	r3, [r7, #31]
 8008108:	e05b      	b.n	80081c2 <UART_SetConfig+0x216>
 800810a:	2308      	movs	r3, #8
 800810c:	77fb      	strb	r3, [r7, #31]
 800810e:	e058      	b.n	80081c2 <UART_SetConfig+0x216>
 8008110:	2310      	movs	r3, #16
 8008112:	77fb      	strb	r3, [r7, #31]
 8008114:	e055      	b.n	80081c2 <UART_SetConfig+0x216>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a6e      	ldr	r2, [pc, #440]	; (80082d4 <UART_SetConfig+0x328>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d124      	bne.n	800816a <UART_SetConfig+0x1be>
 8008120:	4b69      	ldr	r3, [pc, #420]	; (80082c8 <UART_SetConfig+0x31c>)
 8008122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008124:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008128:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800812c:	d011      	beq.n	8008152 <UART_SetConfig+0x1a6>
 800812e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008132:	d817      	bhi.n	8008164 <UART_SetConfig+0x1b8>
 8008134:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008138:	d011      	beq.n	800815e <UART_SetConfig+0x1b2>
 800813a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800813e:	d811      	bhi.n	8008164 <UART_SetConfig+0x1b8>
 8008140:	2b00      	cmp	r3, #0
 8008142:	d003      	beq.n	800814c <UART_SetConfig+0x1a0>
 8008144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008148:	d006      	beq.n	8008158 <UART_SetConfig+0x1ac>
 800814a:	e00b      	b.n	8008164 <UART_SetConfig+0x1b8>
 800814c:	2300      	movs	r3, #0
 800814e:	77fb      	strb	r3, [r7, #31]
 8008150:	e037      	b.n	80081c2 <UART_SetConfig+0x216>
 8008152:	2302      	movs	r3, #2
 8008154:	77fb      	strb	r3, [r7, #31]
 8008156:	e034      	b.n	80081c2 <UART_SetConfig+0x216>
 8008158:	2304      	movs	r3, #4
 800815a:	77fb      	strb	r3, [r7, #31]
 800815c:	e031      	b.n	80081c2 <UART_SetConfig+0x216>
 800815e:	2308      	movs	r3, #8
 8008160:	77fb      	strb	r3, [r7, #31]
 8008162:	e02e      	b.n	80081c2 <UART_SetConfig+0x216>
 8008164:	2310      	movs	r3, #16
 8008166:	77fb      	strb	r3, [r7, #31]
 8008168:	e02b      	b.n	80081c2 <UART_SetConfig+0x216>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a5a      	ldr	r2, [pc, #360]	; (80082d8 <UART_SetConfig+0x32c>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d124      	bne.n	80081be <UART_SetConfig+0x212>
 8008174:	4b54      	ldr	r3, [pc, #336]	; (80082c8 <UART_SetConfig+0x31c>)
 8008176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008178:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800817c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008180:	d011      	beq.n	80081a6 <UART_SetConfig+0x1fa>
 8008182:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008186:	d817      	bhi.n	80081b8 <UART_SetConfig+0x20c>
 8008188:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800818c:	d011      	beq.n	80081b2 <UART_SetConfig+0x206>
 800818e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008192:	d811      	bhi.n	80081b8 <UART_SetConfig+0x20c>
 8008194:	2b00      	cmp	r3, #0
 8008196:	d003      	beq.n	80081a0 <UART_SetConfig+0x1f4>
 8008198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800819c:	d006      	beq.n	80081ac <UART_SetConfig+0x200>
 800819e:	e00b      	b.n	80081b8 <UART_SetConfig+0x20c>
 80081a0:	2300      	movs	r3, #0
 80081a2:	77fb      	strb	r3, [r7, #31]
 80081a4:	e00d      	b.n	80081c2 <UART_SetConfig+0x216>
 80081a6:	2302      	movs	r3, #2
 80081a8:	77fb      	strb	r3, [r7, #31]
 80081aa:	e00a      	b.n	80081c2 <UART_SetConfig+0x216>
 80081ac:	2304      	movs	r3, #4
 80081ae:	77fb      	strb	r3, [r7, #31]
 80081b0:	e007      	b.n	80081c2 <UART_SetConfig+0x216>
 80081b2:	2308      	movs	r3, #8
 80081b4:	77fb      	strb	r3, [r7, #31]
 80081b6:	e004      	b.n	80081c2 <UART_SetConfig+0x216>
 80081b8:	2310      	movs	r3, #16
 80081ba:	77fb      	strb	r3, [r7, #31]
 80081bc:	e001      	b.n	80081c2 <UART_SetConfig+0x216>
 80081be:	2310      	movs	r3, #16
 80081c0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	69db      	ldr	r3, [r3, #28]
 80081c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081ca:	d15b      	bne.n	8008284 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80081cc:	7ffb      	ldrb	r3, [r7, #31]
 80081ce:	2b08      	cmp	r3, #8
 80081d0:	d827      	bhi.n	8008222 <UART_SetConfig+0x276>
 80081d2:	a201      	add	r2, pc, #4	; (adr r2, 80081d8 <UART_SetConfig+0x22c>)
 80081d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d8:	080081fd 	.word	0x080081fd
 80081dc:	08008205 	.word	0x08008205
 80081e0:	0800820d 	.word	0x0800820d
 80081e4:	08008223 	.word	0x08008223
 80081e8:	08008213 	.word	0x08008213
 80081ec:	08008223 	.word	0x08008223
 80081f0:	08008223 	.word	0x08008223
 80081f4:	08008223 	.word	0x08008223
 80081f8:	0800821b 	.word	0x0800821b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081fc:	f7fd fe34 	bl	8005e68 <HAL_RCC_GetPCLK1Freq>
 8008200:	61b8      	str	r0, [r7, #24]
        break;
 8008202:	e013      	b.n	800822c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008204:	f7fd fe52 	bl	8005eac <HAL_RCC_GetPCLK2Freq>
 8008208:	61b8      	str	r0, [r7, #24]
        break;
 800820a:	e00f      	b.n	800822c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800820c:	4b33      	ldr	r3, [pc, #204]	; (80082dc <UART_SetConfig+0x330>)
 800820e:	61bb      	str	r3, [r7, #24]
        break;
 8008210:	e00c      	b.n	800822c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008212:	f7fd fdb3 	bl	8005d7c <HAL_RCC_GetSysClockFreq>
 8008216:	61b8      	str	r0, [r7, #24]
        break;
 8008218:	e008      	b.n	800822c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800821a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800821e:	61bb      	str	r3, [r7, #24]
        break;
 8008220:	e004      	b.n	800822c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8008222:	2300      	movs	r3, #0
 8008224:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	77bb      	strb	r3, [r7, #30]
        break;
 800822a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	2b00      	cmp	r3, #0
 8008230:	f000 8082 	beq.w	8008338 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	005a      	lsls	r2, r3, #1
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	085b      	lsrs	r3, r3, #1
 800823e:	441a      	add	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	fbb2 f3f3 	udiv	r3, r2, r3
 8008248:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	2b0f      	cmp	r3, #15
 800824e:	d916      	bls.n	800827e <UART_SetConfig+0x2d2>
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008256:	d212      	bcs.n	800827e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	b29b      	uxth	r3, r3
 800825c:	f023 030f 	bic.w	r3, r3, #15
 8008260:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	085b      	lsrs	r3, r3, #1
 8008266:	b29b      	uxth	r3, r3
 8008268:	f003 0307 	and.w	r3, r3, #7
 800826c:	b29a      	uxth	r2, r3
 800826e:	89fb      	ldrh	r3, [r7, #14]
 8008270:	4313      	orrs	r3, r2
 8008272:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	89fa      	ldrh	r2, [r7, #14]
 800827a:	60da      	str	r2, [r3, #12]
 800827c:	e05c      	b.n	8008338 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	77bb      	strb	r3, [r7, #30]
 8008282:	e059      	b.n	8008338 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008284:	7ffb      	ldrb	r3, [r7, #31]
 8008286:	2b08      	cmp	r3, #8
 8008288:	d835      	bhi.n	80082f6 <UART_SetConfig+0x34a>
 800828a:	a201      	add	r2, pc, #4	; (adr r2, 8008290 <UART_SetConfig+0x2e4>)
 800828c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008290:	080082b5 	.word	0x080082b5
 8008294:	080082bd 	.word	0x080082bd
 8008298:	080082e1 	.word	0x080082e1
 800829c:	080082f7 	.word	0x080082f7
 80082a0:	080082e7 	.word	0x080082e7
 80082a4:	080082f7 	.word	0x080082f7
 80082a8:	080082f7 	.word	0x080082f7
 80082ac:	080082f7 	.word	0x080082f7
 80082b0:	080082ef 	.word	0x080082ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082b4:	f7fd fdd8 	bl	8005e68 <HAL_RCC_GetPCLK1Freq>
 80082b8:	61b8      	str	r0, [r7, #24]
        break;
 80082ba:	e021      	b.n	8008300 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082bc:	f7fd fdf6 	bl	8005eac <HAL_RCC_GetPCLK2Freq>
 80082c0:	61b8      	str	r0, [r7, #24]
        break;
 80082c2:	e01d      	b.n	8008300 <UART_SetConfig+0x354>
 80082c4:	40013800 	.word	0x40013800
 80082c8:	40021000 	.word	0x40021000
 80082cc:	40004400 	.word	0x40004400
 80082d0:	40004800 	.word	0x40004800
 80082d4:	40004c00 	.word	0x40004c00
 80082d8:	40005000 	.word	0x40005000
 80082dc:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082e0:	4b1b      	ldr	r3, [pc, #108]	; (8008350 <UART_SetConfig+0x3a4>)
 80082e2:	61bb      	str	r3, [r7, #24]
        break;
 80082e4:	e00c      	b.n	8008300 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082e6:	f7fd fd49 	bl	8005d7c <HAL_RCC_GetSysClockFreq>
 80082ea:	61b8      	str	r0, [r7, #24]
        break;
 80082ec:	e008      	b.n	8008300 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082f2:	61bb      	str	r3, [r7, #24]
        break;
 80082f4:	e004      	b.n	8008300 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80082f6:	2300      	movs	r3, #0
 80082f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	77bb      	strb	r3, [r7, #30]
        break;
 80082fe:	bf00      	nop
    }

    if (pclk != 0U)
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d018      	beq.n	8008338 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	085a      	lsrs	r2, r3, #1
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	441a      	add	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	fbb2 f3f3 	udiv	r3, r2, r3
 8008318:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	2b0f      	cmp	r3, #15
 800831e:	d909      	bls.n	8008334 <UART_SetConfig+0x388>
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008326:	d205      	bcs.n	8008334 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	b29a      	uxth	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	60da      	str	r2, [r3, #12]
 8008332:	e001      	b.n	8008338 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008344:	7fbb      	ldrb	r3, [r7, #30]
}
 8008346:	4618      	mov	r0, r3
 8008348:	3720      	adds	r7, #32
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	007a1200 	.word	0x007a1200

08008354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008360:	f003 0301 	and.w	r3, r3, #1
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00a      	beq.n	800837e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	430a      	orrs	r2, r1
 800837c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008382:	f003 0302 	and.w	r3, r3, #2
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	430a      	orrs	r2, r1
 800839e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a4:	f003 0304 	and.w	r3, r3, #4
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00a      	beq.n	80083c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	430a      	orrs	r2, r1
 80083c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c6:	f003 0308 	and.w	r3, r3, #8
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00a      	beq.n	80083e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	430a      	orrs	r2, r1
 80083e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e8:	f003 0310 	and.w	r3, r3, #16
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00a      	beq.n	8008406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	430a      	orrs	r2, r1
 8008404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840a:	f003 0320 	and.w	r3, r3, #32
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00a      	beq.n	8008428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	430a      	orrs	r2, r1
 8008426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008430:	2b00      	cmp	r3, #0
 8008432:	d01a      	beq.n	800846a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	430a      	orrs	r2, r1
 8008448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008452:	d10a      	bne.n	800846a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	430a      	orrs	r2, r1
 8008468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00a      	beq.n	800848c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	430a      	orrs	r2, r1
 800848a:	605a      	str	r2, [r3, #4]
  }
}
 800848c:	bf00      	nop
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b098      	sub	sp, #96	; 0x60
 800849c:	af02      	add	r7, sp, #8
 800849e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084a8:	f7fa f976 	bl	8002798 <HAL_GetTick>
 80084ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 0308 	and.w	r3, r3, #8
 80084b8:	2b08      	cmp	r3, #8
 80084ba:	d12e      	bne.n	800851a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084c4:	2200      	movs	r2, #0
 80084c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f88c 	bl	80085e8 <UART_WaitOnFlagUntilTimeout>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d021      	beq.n	800851a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084de:	e853 3f00 	ldrex	r3, [r3]
 80084e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084ea:	653b      	str	r3, [r7, #80]	; 0x50
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	461a      	mov	r2, r3
 80084f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084f4:	647b      	str	r3, [r7, #68]	; 0x44
 80084f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084fc:	e841 2300 	strex	r3, r2, [r1]
 8008500:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1e6      	bne.n	80084d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2220      	movs	r2, #32
 800850c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	e062      	b.n	80085e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0304 	and.w	r3, r3, #4
 8008524:	2b04      	cmp	r3, #4
 8008526:	d149      	bne.n	80085bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008528:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008530:	2200      	movs	r2, #0
 8008532:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f856 	bl	80085e8 <UART_WaitOnFlagUntilTimeout>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d03c      	beq.n	80085bc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854a:	e853 3f00 	ldrex	r3, [r3]
 800854e:	623b      	str	r3, [r7, #32]
   return(result);
 8008550:	6a3b      	ldr	r3, [r7, #32]
 8008552:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	461a      	mov	r2, r3
 800855e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008560:	633b      	str	r3, [r7, #48]	; 0x30
 8008562:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008564:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008568:	e841 2300 	strex	r3, r2, [r1]
 800856c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800856e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1e6      	bne.n	8008542 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	3308      	adds	r3, #8
 800857a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	e853 3f00 	ldrex	r3, [r3]
 8008582:	60fb      	str	r3, [r7, #12]
   return(result);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f023 0301 	bic.w	r3, r3, #1
 800858a:	64bb      	str	r3, [r7, #72]	; 0x48
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	3308      	adds	r3, #8
 8008592:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008594:	61fa      	str	r2, [r7, #28]
 8008596:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008598:	69b9      	ldr	r1, [r7, #24]
 800859a:	69fa      	ldr	r2, [r7, #28]
 800859c:	e841 2300 	strex	r3, r2, [r1]
 80085a0:	617b      	str	r3, [r7, #20]
   return(result);
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1e5      	bne.n	8008574 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2220      	movs	r2, #32
 80085ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e011      	b.n	80085e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2220      	movs	r2, #32
 80085c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2220      	movs	r2, #32
 80085c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3758      	adds	r7, #88	; 0x58
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	603b      	str	r3, [r7, #0]
 80085f4:	4613      	mov	r3, r2
 80085f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085f8:	e049      	b.n	800868e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008600:	d045      	beq.n	800868e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008602:	f7fa f8c9 	bl	8002798 <HAL_GetTick>
 8008606:	4602      	mov	r2, r0
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	69ba      	ldr	r2, [r7, #24]
 800860e:	429a      	cmp	r2, r3
 8008610:	d302      	bcc.n	8008618 <UART_WaitOnFlagUntilTimeout+0x30>
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d101      	bne.n	800861c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008618:	2303      	movs	r3, #3
 800861a:	e048      	b.n	80086ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0304 	and.w	r3, r3, #4
 8008626:	2b00      	cmp	r3, #0
 8008628:	d031      	beq.n	800868e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	69db      	ldr	r3, [r3, #28]
 8008630:	f003 0308 	and.w	r3, r3, #8
 8008634:	2b08      	cmp	r3, #8
 8008636:	d110      	bne.n	800865a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2208      	movs	r2, #8
 800863e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f000 f8ed 	bl	8008820 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2208      	movs	r2, #8
 800864a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2200      	movs	r2, #0
 8008652:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e029      	b.n	80086ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	69db      	ldr	r3, [r3, #28]
 8008660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008668:	d111      	bne.n	800868e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008672:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f000 f8d3 	bl	8008820 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2220      	movs	r2, #32
 800867e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	e00f      	b.n	80086ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	69da      	ldr	r2, [r3, #28]
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	4013      	ands	r3, r2
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	429a      	cmp	r2, r3
 800869c:	bf0c      	ite	eq
 800869e:	2301      	moveq	r3, #1
 80086a0:	2300      	movne	r3, #0
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	461a      	mov	r2, r3
 80086a6:	79fb      	ldrb	r3, [r7, #7]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d0a6      	beq.n	80085fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
	...

080086b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b097      	sub	sp, #92	; 0x5c
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	4613      	mov	r3, r2
 80086c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	68ba      	ldr	r2, [r7, #8]
 80086ca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	88fa      	ldrh	r2, [r7, #6]
 80086d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	88fa      	ldrh	r2, [r7, #6]
 80086d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2200      	movs	r2, #0
 80086e0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ea:	d10e      	bne.n	800870a <UART_Start_Receive_IT+0x52>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d105      	bne.n	8008700 <UART_Start_Receive_IT+0x48>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80086fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086fe:	e01a      	b.n	8008736 <UART_Start_Receive_IT+0x7e>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	22ff      	movs	r2, #255	; 0xff
 8008704:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008708:	e015      	b.n	8008736 <UART_Start_Receive_IT+0x7e>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d10d      	bne.n	800872e <UART_Start_Receive_IT+0x76>
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d104      	bne.n	8008724 <UART_Start_Receive_IT+0x6c>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	22ff      	movs	r2, #255	; 0xff
 800871e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008722:	e008      	b.n	8008736 <UART_Start_Receive_IT+0x7e>
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	227f      	movs	r2, #127	; 0x7f
 8008728:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800872c:	e003      	b.n	8008736 <UART_Start_Receive_IT+0x7e>
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2200      	movs	r2, #0
 800873a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2222      	movs	r2, #34	; 0x22
 8008742:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	3308      	adds	r3, #8
 800874c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008750:	e853 3f00 	ldrex	r3, [r3]
 8008754:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008758:	f043 0301 	orr.w	r3, r3, #1
 800875c:	657b      	str	r3, [r7, #84]	; 0x54
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3308      	adds	r3, #8
 8008764:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008766:	64ba      	str	r2, [r7, #72]	; 0x48
 8008768:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800876c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800876e:	e841 2300 	strex	r3, r2, [r1]
 8008772:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1e5      	bne.n	8008746 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008782:	d107      	bne.n	8008794 <UART_Start_Receive_IT+0xdc>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d103      	bne.n	8008794 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	4a22      	ldr	r2, [pc, #136]	; (8008818 <UART_Start_Receive_IT+0x160>)
 8008790:	669a      	str	r2, [r3, #104]	; 0x68
 8008792:	e002      	b.n	800879a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	4a21      	ldr	r2, [pc, #132]	; (800881c <UART_Start_Receive_IT+0x164>)
 8008798:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d019      	beq.n	80087d6 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087aa:	e853 3f00 	ldrex	r3, [r3]
 80087ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80087b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	461a      	mov	r2, r3
 80087be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087c0:	637b      	str	r3, [r7, #52]	; 0x34
 80087c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80087c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087c8:	e841 2300 	strex	r3, r2, [r1]
 80087cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80087ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1e6      	bne.n	80087a2 <UART_Start_Receive_IT+0xea>
 80087d4:	e018      	b.n	8008808 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	e853 3f00 	ldrex	r3, [r3]
 80087e2:	613b      	str	r3, [r7, #16]
   return(result);
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	f043 0320 	orr.w	r3, r3, #32
 80087ea:	653b      	str	r3, [r7, #80]	; 0x50
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	461a      	mov	r2, r3
 80087f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087f4:	623b      	str	r3, [r7, #32]
 80087f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f8:	69f9      	ldr	r1, [r7, #28]
 80087fa:	6a3a      	ldr	r2, [r7, #32]
 80087fc:	e841 2300 	strex	r3, r2, [r1]
 8008800:	61bb      	str	r3, [r7, #24]
   return(result);
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d1e6      	bne.n	80087d6 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	375c      	adds	r7, #92	; 0x5c
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	08008c89 	.word	0x08008c89
 800881c:	08008ae1 	.word	0x08008ae1

08008820 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008820:	b480      	push	{r7}
 8008822:	b095      	sub	sp, #84	; 0x54
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008830:	e853 3f00 	ldrex	r3, [r3]
 8008834:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008838:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800883c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	461a      	mov	r2, r3
 8008844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008846:	643b      	str	r3, [r7, #64]	; 0x40
 8008848:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800884c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800884e:	e841 2300 	strex	r3, r2, [r1]
 8008852:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1e6      	bne.n	8008828 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	3308      	adds	r3, #8
 8008860:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008862:	6a3b      	ldr	r3, [r7, #32]
 8008864:	e853 3f00 	ldrex	r3, [r3]
 8008868:	61fb      	str	r3, [r7, #28]
   return(result);
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	f023 0301 	bic.w	r3, r3, #1
 8008870:	64bb      	str	r3, [r7, #72]	; 0x48
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	3308      	adds	r3, #8
 8008878:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800887a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800887c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008882:	e841 2300 	strex	r3, r2, [r1]
 8008886:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1e5      	bne.n	800885a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008892:	2b01      	cmp	r3, #1
 8008894:	d118      	bne.n	80088c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	e853 3f00 	ldrex	r3, [r3]
 80088a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	f023 0310 	bic.w	r3, r3, #16
 80088aa:	647b      	str	r3, [r7, #68]	; 0x44
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	461a      	mov	r2, r3
 80088b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088b4:	61bb      	str	r3, [r7, #24]
 80088b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b8:	6979      	ldr	r1, [r7, #20]
 80088ba:	69ba      	ldr	r2, [r7, #24]
 80088bc:	e841 2300 	strex	r3, r2, [r1]
 80088c0:	613b      	str	r3, [r7, #16]
   return(result);
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d1e6      	bne.n	8008896 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2220      	movs	r2, #32
 80088cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	669a      	str	r2, [r3, #104]	; 0x68
}
 80088dc:	bf00      	nop
 80088de:	3754      	adds	r7, #84	; 0x54
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f7ff fb3a 	bl	8007f80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800890c:	bf00      	nop
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008914:	b480      	push	{r7}
 8008916:	b08f      	sub	sp, #60	; 0x3c
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008920:	2b21      	cmp	r3, #33	; 0x21
 8008922:	d14d      	bne.n	80089c0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800892a:	b29b      	uxth	r3, r3
 800892c:	2b00      	cmp	r3, #0
 800892e:	d132      	bne.n	8008996 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008936:	6a3b      	ldr	r3, [r7, #32]
 8008938:	e853 3f00 	ldrex	r3, [r3]
 800893c:	61fb      	str	r3, [r7, #28]
   return(result);
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008944:	637b      	str	r3, [r7, #52]	; 0x34
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	461a      	mov	r2, r3
 800894c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008950:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008952:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008956:	e841 2300 	strex	r3, r2, [r1]
 800895a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1e6      	bne.n	8008930 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	e853 3f00 	ldrex	r3, [r3]
 800896e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008976:	633b      	str	r3, [r7, #48]	; 0x30
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	461a      	mov	r2, r3
 800897e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008980:	61bb      	str	r3, [r7, #24]
 8008982:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008984:	6979      	ldr	r1, [r7, #20]
 8008986:	69ba      	ldr	r2, [r7, #24]
 8008988:	e841 2300 	strex	r3, r2, [r1]
 800898c:	613b      	str	r3, [r7, #16]
   return(result);
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1e6      	bne.n	8008962 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008994:	e014      	b.n	80089c0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800899a:	781a      	ldrb	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	b292      	uxth	r2, r2
 80089a2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089a8:	1c5a      	adds	r2, r3, #1
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	3b01      	subs	r3, #1
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80089c0:	bf00      	nop
 80089c2:	373c      	adds	r7, #60	; 0x3c
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b091      	sub	sp, #68	; 0x44
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089d8:	2b21      	cmp	r3, #33	; 0x21
 80089da:	d151      	bne.n	8008a80 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d132      	bne.n	8008a4e <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f0:	e853 3f00 	ldrex	r3, [r3]
 80089f4:	623b      	str	r3, [r7, #32]
   return(result);
 80089f6:	6a3b      	ldr	r3, [r7, #32]
 80089f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	461a      	mov	r2, r3
 8008a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a06:	633b      	str	r3, [r7, #48]	; 0x30
 8008a08:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a0e:	e841 2300 	strex	r3, r2, [r1]
 8008a12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1e6      	bne.n	80089e8 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	e853 3f00 	ldrex	r3, [r3]
 8008a26:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a2e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	461a      	mov	r2, r3
 8008a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a38:	61fb      	str	r3, [r7, #28]
 8008a3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3c:	69b9      	ldr	r1, [r7, #24]
 8008a3e:	69fa      	ldr	r2, [r7, #28]
 8008a40:	e841 2300 	strex	r3, r2, [r1]
 8008a44:	617b      	str	r3, [r7, #20]
   return(result);
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1e6      	bne.n	8008a1a <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008a4c:	e018      	b.n	8008a80 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a52:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a56:	881a      	ldrh	r2, [r3, #0]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a60:	b292      	uxth	r2, r2
 8008a62:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a68:	1c9a      	adds	r2, r3, #2
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	3b01      	subs	r3, #1
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008a80:	bf00      	nop
 8008a82:	3744      	adds	r7, #68	; 0x44
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b088      	sub	sp, #32
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	e853 3f00 	ldrex	r3, [r3]
 8008aa0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008aa8:	61fb      	str	r3, [r7, #28]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	61bb      	str	r3, [r7, #24]
 8008ab4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab6:	6979      	ldr	r1, [r7, #20]
 8008ab8:	69ba      	ldr	r2, [r7, #24]
 8008aba:	e841 2300 	strex	r3, r2, [r1]
 8008abe:	613b      	str	r3, [r7, #16]
   return(result);
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1e6      	bne.n	8008a94 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2220      	movs	r2, #32
 8008aca:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7ff fa4a 	bl	8007f6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ad8:	bf00      	nop
 8008ada:	3720      	adds	r7, #32
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b09c      	sub	sp, #112	; 0x70
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008aee:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008af8:	2b22      	cmp	r3, #34	; 0x22
 8008afa:	f040 80b9 	bne.w	8008c70 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008b04:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008b08:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008b0c:	b2d9      	uxtb	r1, r3
 8008b0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008b12:	b2da      	uxtb	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b18:	400a      	ands	r2, r1
 8008b1a:	b2d2      	uxtb	r2, r2
 8008b1c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b22:	1c5a      	adds	r2, r3, #1
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	3b01      	subs	r3, #1
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f040 809c 	bne.w	8008c80 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b50:	e853 3f00 	ldrex	r3, [r3]
 8008b54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	461a      	mov	r2, r3
 8008b64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b66:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b68:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b6e:	e841 2300 	strex	r3, r2, [r1]
 8008b72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1e6      	bne.n	8008b48 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	3308      	adds	r3, #8
 8008b80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b84:	e853 3f00 	ldrex	r3, [r3]
 8008b88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b8c:	f023 0301 	bic.w	r3, r3, #1
 8008b90:	667b      	str	r3, [r7, #100]	; 0x64
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	3308      	adds	r3, #8
 8008b98:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008b9a:	647a      	str	r2, [r7, #68]	; 0x44
 8008b9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ba0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ba2:	e841 2300 	strex	r3, r2, [r1]
 8008ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1e5      	bne.n	8008b7a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2220      	movs	r2, #32
 8008bb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d018      	beq.n	8008c02 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd8:	e853 3f00 	ldrex	r3, [r3]
 8008bdc:	623b      	str	r3, [r7, #32]
   return(result);
 8008bde:	6a3b      	ldr	r3, [r7, #32]
 8008be0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008be4:	663b      	str	r3, [r7, #96]	; 0x60
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	461a      	mov	r2, r3
 8008bec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bee:	633b      	str	r3, [r7, #48]	; 0x30
 8008bf0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bf6:	e841 2300 	strex	r3, r2, [r1]
 8008bfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1e6      	bne.n	8008bd0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d12e      	bne.n	8008c68 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	e853 3f00 	ldrex	r3, [r3]
 8008c1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f023 0310 	bic.w	r3, r3, #16
 8008c24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c2e:	61fb      	str	r3, [r7, #28]
 8008c30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c32:	69b9      	ldr	r1, [r7, #24]
 8008c34:	69fa      	ldr	r2, [r7, #28]
 8008c36:	e841 2300 	strex	r3, r2, [r1]
 8008c3a:	617b      	str	r3, [r7, #20]
   return(result);
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1e6      	bne.n	8008c10 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	69db      	ldr	r3, [r3, #28]
 8008c48:	f003 0310 	and.w	r3, r3, #16
 8008c4c:	2b10      	cmp	r3, #16
 8008c4e:	d103      	bne.n	8008c58 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2210      	movs	r2, #16
 8008c56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7ff f997 	bl	8007f94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c66:	e00b      	b.n	8008c80 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7f7 ffaf 	bl	8000bcc <HAL_UART_RxCpltCallback>
}
 8008c6e:	e007      	b.n	8008c80 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	699a      	ldr	r2, [r3, #24]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f042 0208 	orr.w	r2, r2, #8
 8008c7e:	619a      	str	r2, [r3, #24]
}
 8008c80:	bf00      	nop
 8008c82:	3770      	adds	r7, #112	; 0x70
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b09c      	sub	sp, #112	; 0x70
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c96:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ca0:	2b22      	cmp	r3, #34	; 0x22
 8008ca2:	f040 80b9 	bne.w	8008e18 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008cac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cb4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008cb6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008cba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	b29a      	uxth	r2, r3
 8008cc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008cc4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cca:	1c9a      	adds	r2, r3, #2
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	b29a      	uxth	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f040 809c 	bne.w	8008e28 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cf8:	e853 3f00 	ldrex	r3, [r3]
 8008cfc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d04:	667b      	str	r3, [r7, #100]	; 0x64
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d0e:	657b      	str	r3, [r7, #84]	; 0x54
 8008d10:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008d14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d16:	e841 2300 	strex	r3, r2, [r1]
 8008d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1e6      	bne.n	8008cf0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	3308      	adds	r3, #8
 8008d28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d2c:	e853 3f00 	ldrex	r3, [r3]
 8008d30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d34:	f023 0301 	bic.w	r3, r3, #1
 8008d38:	663b      	str	r3, [r7, #96]	; 0x60
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3308      	adds	r3, #8
 8008d40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d42:	643a      	str	r2, [r7, #64]	; 0x40
 8008d44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d4a:	e841 2300 	strex	r3, r2, [r1]
 8008d4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1e5      	bne.n	8008d22 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2220      	movs	r2, #32
 8008d5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d018      	beq.n	8008daa <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7e:	6a3b      	ldr	r3, [r7, #32]
 8008d80:	e853 3f00 	ldrex	r3, [r3]
 8008d84:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	461a      	mov	r2, r3
 8008d94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d98:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d9e:	e841 2300 	strex	r3, r2, [r1]
 8008da2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1e6      	bne.n	8008d78 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d12e      	bne.n	8008e10 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	e853 3f00 	ldrex	r3, [r3]
 8008dc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	f023 0310 	bic.w	r3, r3, #16
 8008dcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008dd6:	61bb      	str	r3, [r7, #24]
 8008dd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dda:	6979      	ldr	r1, [r7, #20]
 8008ddc:	69ba      	ldr	r2, [r7, #24]
 8008dde:	e841 2300 	strex	r3, r2, [r1]
 8008de2:	613b      	str	r3, [r7, #16]
   return(result);
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1e6      	bne.n	8008db8 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	69db      	ldr	r3, [r3, #28]
 8008df0:	f003 0310 	and.w	r3, r3, #16
 8008df4:	2b10      	cmp	r3, #16
 8008df6:	d103      	bne.n	8008e00 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2210      	movs	r2, #16
 8008dfe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008e06:	4619      	mov	r1, r3
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f7ff f8c3 	bl	8007f94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e0e:	e00b      	b.n	8008e28 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f7f7 fedb 	bl	8000bcc <HAL_UART_RxCpltCallback>
}
 8008e16:	e007      	b.n	8008e28 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	699a      	ldr	r2, [r3, #24]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f042 0208 	orr.w	r2, r2, #8
 8008e26:	619a      	str	r2, [r3, #24]
}
 8008e28:	bf00      	nop
 8008e2a:	3770      	adds	r7, #112	; 0x70
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008e38:	bf00      	nop
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008e4c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008e50:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	43db      	mvns	r3, r3
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	4013      	ands	r3, r2
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3714      	adds	r7, #20
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr

08008e7a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	f107 0014 	add.w	r0, r7, #20
 8008e88:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	b004      	add	sp, #16
 8008eba:	4770      	bx	lr

08008ebc <__errno>:
 8008ebc:	4b01      	ldr	r3, [pc, #4]	; (8008ec4 <__errno+0x8>)
 8008ebe:	6818      	ldr	r0, [r3, #0]
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	20000060 	.word	0x20000060

08008ec8 <__libc_init_array>:
 8008ec8:	b570      	push	{r4, r5, r6, lr}
 8008eca:	4d0d      	ldr	r5, [pc, #52]	; (8008f00 <__libc_init_array+0x38>)
 8008ecc:	4c0d      	ldr	r4, [pc, #52]	; (8008f04 <__libc_init_array+0x3c>)
 8008ece:	1b64      	subs	r4, r4, r5
 8008ed0:	10a4      	asrs	r4, r4, #2
 8008ed2:	2600      	movs	r6, #0
 8008ed4:	42a6      	cmp	r6, r4
 8008ed6:	d109      	bne.n	8008eec <__libc_init_array+0x24>
 8008ed8:	4d0b      	ldr	r5, [pc, #44]	; (8008f08 <__libc_init_array+0x40>)
 8008eda:	4c0c      	ldr	r4, [pc, #48]	; (8008f0c <__libc_init_array+0x44>)
 8008edc:	f001 f8b2 	bl	800a044 <_init>
 8008ee0:	1b64      	subs	r4, r4, r5
 8008ee2:	10a4      	asrs	r4, r4, #2
 8008ee4:	2600      	movs	r6, #0
 8008ee6:	42a6      	cmp	r6, r4
 8008ee8:	d105      	bne.n	8008ef6 <__libc_init_array+0x2e>
 8008eea:	bd70      	pop	{r4, r5, r6, pc}
 8008eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ef0:	4798      	blx	r3
 8008ef2:	3601      	adds	r6, #1
 8008ef4:	e7ee      	b.n	8008ed4 <__libc_init_array+0xc>
 8008ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008efa:	4798      	blx	r3
 8008efc:	3601      	adds	r6, #1
 8008efe:	e7f2      	b.n	8008ee6 <__libc_init_array+0x1e>
 8008f00:	0800d6f8 	.word	0x0800d6f8
 8008f04:	0800d6f8 	.word	0x0800d6f8
 8008f08:	0800d6f8 	.word	0x0800d6f8
 8008f0c:	0800d6fc 	.word	0x0800d6fc

08008f10 <malloc>:
 8008f10:	4b02      	ldr	r3, [pc, #8]	; (8008f1c <malloc+0xc>)
 8008f12:	4601      	mov	r1, r0
 8008f14:	6818      	ldr	r0, [r3, #0]
 8008f16:	f000 b885 	b.w	8009024 <_malloc_r>
 8008f1a:	bf00      	nop
 8008f1c:	20000060 	.word	0x20000060

08008f20 <memcpy>:
 8008f20:	440a      	add	r2, r1
 8008f22:	4291      	cmp	r1, r2
 8008f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f28:	d100      	bne.n	8008f2c <memcpy+0xc>
 8008f2a:	4770      	bx	lr
 8008f2c:	b510      	push	{r4, lr}
 8008f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f36:	4291      	cmp	r1, r2
 8008f38:	d1f9      	bne.n	8008f2e <memcpy+0xe>
 8008f3a:	bd10      	pop	{r4, pc}

08008f3c <memset>:
 8008f3c:	4402      	add	r2, r0
 8008f3e:	4603      	mov	r3, r0
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d100      	bne.n	8008f46 <memset+0xa>
 8008f44:	4770      	bx	lr
 8008f46:	f803 1b01 	strb.w	r1, [r3], #1
 8008f4a:	e7f9      	b.n	8008f40 <memset+0x4>

08008f4c <_free_r>:
 8008f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f4e:	2900      	cmp	r1, #0
 8008f50:	d044      	beq.n	8008fdc <_free_r+0x90>
 8008f52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f56:	9001      	str	r0, [sp, #4]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f1a1 0404 	sub.w	r4, r1, #4
 8008f5e:	bfb8      	it	lt
 8008f60:	18e4      	addlt	r4, r4, r3
 8008f62:	f000 f99d 	bl	80092a0 <__malloc_lock>
 8008f66:	4a1e      	ldr	r2, [pc, #120]	; (8008fe0 <_free_r+0x94>)
 8008f68:	9801      	ldr	r0, [sp, #4]
 8008f6a:	6813      	ldr	r3, [r2, #0]
 8008f6c:	b933      	cbnz	r3, 8008f7c <_free_r+0x30>
 8008f6e:	6063      	str	r3, [r4, #4]
 8008f70:	6014      	str	r4, [r2, #0]
 8008f72:	b003      	add	sp, #12
 8008f74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f78:	f000 b998 	b.w	80092ac <__malloc_unlock>
 8008f7c:	42a3      	cmp	r3, r4
 8008f7e:	d908      	bls.n	8008f92 <_free_r+0x46>
 8008f80:	6825      	ldr	r5, [r4, #0]
 8008f82:	1961      	adds	r1, r4, r5
 8008f84:	428b      	cmp	r3, r1
 8008f86:	bf01      	itttt	eq
 8008f88:	6819      	ldreq	r1, [r3, #0]
 8008f8a:	685b      	ldreq	r3, [r3, #4]
 8008f8c:	1949      	addeq	r1, r1, r5
 8008f8e:	6021      	streq	r1, [r4, #0]
 8008f90:	e7ed      	b.n	8008f6e <_free_r+0x22>
 8008f92:	461a      	mov	r2, r3
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	b10b      	cbz	r3, 8008f9c <_free_r+0x50>
 8008f98:	42a3      	cmp	r3, r4
 8008f9a:	d9fa      	bls.n	8008f92 <_free_r+0x46>
 8008f9c:	6811      	ldr	r1, [r2, #0]
 8008f9e:	1855      	adds	r5, r2, r1
 8008fa0:	42a5      	cmp	r5, r4
 8008fa2:	d10b      	bne.n	8008fbc <_free_r+0x70>
 8008fa4:	6824      	ldr	r4, [r4, #0]
 8008fa6:	4421      	add	r1, r4
 8008fa8:	1854      	adds	r4, r2, r1
 8008faa:	42a3      	cmp	r3, r4
 8008fac:	6011      	str	r1, [r2, #0]
 8008fae:	d1e0      	bne.n	8008f72 <_free_r+0x26>
 8008fb0:	681c      	ldr	r4, [r3, #0]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	6053      	str	r3, [r2, #4]
 8008fb6:	4421      	add	r1, r4
 8008fb8:	6011      	str	r1, [r2, #0]
 8008fba:	e7da      	b.n	8008f72 <_free_r+0x26>
 8008fbc:	d902      	bls.n	8008fc4 <_free_r+0x78>
 8008fbe:	230c      	movs	r3, #12
 8008fc0:	6003      	str	r3, [r0, #0]
 8008fc2:	e7d6      	b.n	8008f72 <_free_r+0x26>
 8008fc4:	6825      	ldr	r5, [r4, #0]
 8008fc6:	1961      	adds	r1, r4, r5
 8008fc8:	428b      	cmp	r3, r1
 8008fca:	bf04      	itt	eq
 8008fcc:	6819      	ldreq	r1, [r3, #0]
 8008fce:	685b      	ldreq	r3, [r3, #4]
 8008fd0:	6063      	str	r3, [r4, #4]
 8008fd2:	bf04      	itt	eq
 8008fd4:	1949      	addeq	r1, r1, r5
 8008fd6:	6021      	streq	r1, [r4, #0]
 8008fd8:	6054      	str	r4, [r2, #4]
 8008fda:	e7ca      	b.n	8008f72 <_free_r+0x26>
 8008fdc:	b003      	add	sp, #12
 8008fde:	bd30      	pop	{r4, r5, pc}
 8008fe0:	200007e8 	.word	0x200007e8

08008fe4 <sbrk_aligned>:
 8008fe4:	b570      	push	{r4, r5, r6, lr}
 8008fe6:	4e0e      	ldr	r6, [pc, #56]	; (8009020 <sbrk_aligned+0x3c>)
 8008fe8:	460c      	mov	r4, r1
 8008fea:	6831      	ldr	r1, [r6, #0]
 8008fec:	4605      	mov	r5, r0
 8008fee:	b911      	cbnz	r1, 8008ff6 <sbrk_aligned+0x12>
 8008ff0:	f000 f8f8 	bl	80091e4 <_sbrk_r>
 8008ff4:	6030      	str	r0, [r6, #0]
 8008ff6:	4621      	mov	r1, r4
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	f000 f8f3 	bl	80091e4 <_sbrk_r>
 8008ffe:	1c43      	adds	r3, r0, #1
 8009000:	d00a      	beq.n	8009018 <sbrk_aligned+0x34>
 8009002:	1cc4      	adds	r4, r0, #3
 8009004:	f024 0403 	bic.w	r4, r4, #3
 8009008:	42a0      	cmp	r0, r4
 800900a:	d007      	beq.n	800901c <sbrk_aligned+0x38>
 800900c:	1a21      	subs	r1, r4, r0
 800900e:	4628      	mov	r0, r5
 8009010:	f000 f8e8 	bl	80091e4 <_sbrk_r>
 8009014:	3001      	adds	r0, #1
 8009016:	d101      	bne.n	800901c <sbrk_aligned+0x38>
 8009018:	f04f 34ff 	mov.w	r4, #4294967295
 800901c:	4620      	mov	r0, r4
 800901e:	bd70      	pop	{r4, r5, r6, pc}
 8009020:	200007ec 	.word	0x200007ec

08009024 <_malloc_r>:
 8009024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009028:	1ccd      	adds	r5, r1, #3
 800902a:	f025 0503 	bic.w	r5, r5, #3
 800902e:	3508      	adds	r5, #8
 8009030:	2d0c      	cmp	r5, #12
 8009032:	bf38      	it	cc
 8009034:	250c      	movcc	r5, #12
 8009036:	2d00      	cmp	r5, #0
 8009038:	4607      	mov	r7, r0
 800903a:	db01      	blt.n	8009040 <_malloc_r+0x1c>
 800903c:	42a9      	cmp	r1, r5
 800903e:	d905      	bls.n	800904c <_malloc_r+0x28>
 8009040:	230c      	movs	r3, #12
 8009042:	603b      	str	r3, [r7, #0]
 8009044:	2600      	movs	r6, #0
 8009046:	4630      	mov	r0, r6
 8009048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800904c:	4e2e      	ldr	r6, [pc, #184]	; (8009108 <_malloc_r+0xe4>)
 800904e:	f000 f927 	bl	80092a0 <__malloc_lock>
 8009052:	6833      	ldr	r3, [r6, #0]
 8009054:	461c      	mov	r4, r3
 8009056:	bb34      	cbnz	r4, 80090a6 <_malloc_r+0x82>
 8009058:	4629      	mov	r1, r5
 800905a:	4638      	mov	r0, r7
 800905c:	f7ff ffc2 	bl	8008fe4 <sbrk_aligned>
 8009060:	1c43      	adds	r3, r0, #1
 8009062:	4604      	mov	r4, r0
 8009064:	d14d      	bne.n	8009102 <_malloc_r+0xde>
 8009066:	6834      	ldr	r4, [r6, #0]
 8009068:	4626      	mov	r6, r4
 800906a:	2e00      	cmp	r6, #0
 800906c:	d140      	bne.n	80090f0 <_malloc_r+0xcc>
 800906e:	6823      	ldr	r3, [r4, #0]
 8009070:	4631      	mov	r1, r6
 8009072:	4638      	mov	r0, r7
 8009074:	eb04 0803 	add.w	r8, r4, r3
 8009078:	f000 f8b4 	bl	80091e4 <_sbrk_r>
 800907c:	4580      	cmp	r8, r0
 800907e:	d13a      	bne.n	80090f6 <_malloc_r+0xd2>
 8009080:	6821      	ldr	r1, [r4, #0]
 8009082:	3503      	adds	r5, #3
 8009084:	1a6d      	subs	r5, r5, r1
 8009086:	f025 0503 	bic.w	r5, r5, #3
 800908a:	3508      	adds	r5, #8
 800908c:	2d0c      	cmp	r5, #12
 800908e:	bf38      	it	cc
 8009090:	250c      	movcc	r5, #12
 8009092:	4629      	mov	r1, r5
 8009094:	4638      	mov	r0, r7
 8009096:	f7ff ffa5 	bl	8008fe4 <sbrk_aligned>
 800909a:	3001      	adds	r0, #1
 800909c:	d02b      	beq.n	80090f6 <_malloc_r+0xd2>
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	442b      	add	r3, r5
 80090a2:	6023      	str	r3, [r4, #0]
 80090a4:	e00e      	b.n	80090c4 <_malloc_r+0xa0>
 80090a6:	6822      	ldr	r2, [r4, #0]
 80090a8:	1b52      	subs	r2, r2, r5
 80090aa:	d41e      	bmi.n	80090ea <_malloc_r+0xc6>
 80090ac:	2a0b      	cmp	r2, #11
 80090ae:	d916      	bls.n	80090de <_malloc_r+0xba>
 80090b0:	1961      	adds	r1, r4, r5
 80090b2:	42a3      	cmp	r3, r4
 80090b4:	6025      	str	r5, [r4, #0]
 80090b6:	bf18      	it	ne
 80090b8:	6059      	strne	r1, [r3, #4]
 80090ba:	6863      	ldr	r3, [r4, #4]
 80090bc:	bf08      	it	eq
 80090be:	6031      	streq	r1, [r6, #0]
 80090c0:	5162      	str	r2, [r4, r5]
 80090c2:	604b      	str	r3, [r1, #4]
 80090c4:	4638      	mov	r0, r7
 80090c6:	f104 060b 	add.w	r6, r4, #11
 80090ca:	f000 f8ef 	bl	80092ac <__malloc_unlock>
 80090ce:	f026 0607 	bic.w	r6, r6, #7
 80090d2:	1d23      	adds	r3, r4, #4
 80090d4:	1af2      	subs	r2, r6, r3
 80090d6:	d0b6      	beq.n	8009046 <_malloc_r+0x22>
 80090d8:	1b9b      	subs	r3, r3, r6
 80090da:	50a3      	str	r3, [r4, r2]
 80090dc:	e7b3      	b.n	8009046 <_malloc_r+0x22>
 80090de:	6862      	ldr	r2, [r4, #4]
 80090e0:	42a3      	cmp	r3, r4
 80090e2:	bf0c      	ite	eq
 80090e4:	6032      	streq	r2, [r6, #0]
 80090e6:	605a      	strne	r2, [r3, #4]
 80090e8:	e7ec      	b.n	80090c4 <_malloc_r+0xa0>
 80090ea:	4623      	mov	r3, r4
 80090ec:	6864      	ldr	r4, [r4, #4]
 80090ee:	e7b2      	b.n	8009056 <_malloc_r+0x32>
 80090f0:	4634      	mov	r4, r6
 80090f2:	6876      	ldr	r6, [r6, #4]
 80090f4:	e7b9      	b.n	800906a <_malloc_r+0x46>
 80090f6:	230c      	movs	r3, #12
 80090f8:	603b      	str	r3, [r7, #0]
 80090fa:	4638      	mov	r0, r7
 80090fc:	f000 f8d6 	bl	80092ac <__malloc_unlock>
 8009100:	e7a1      	b.n	8009046 <_malloc_r+0x22>
 8009102:	6025      	str	r5, [r4, #0]
 8009104:	e7de      	b.n	80090c4 <_malloc_r+0xa0>
 8009106:	bf00      	nop
 8009108:	200007e8 	.word	0x200007e8

0800910c <srand>:
 800910c:	b538      	push	{r3, r4, r5, lr}
 800910e:	4b10      	ldr	r3, [pc, #64]	; (8009150 <srand+0x44>)
 8009110:	681d      	ldr	r5, [r3, #0]
 8009112:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009114:	4604      	mov	r4, r0
 8009116:	b9b3      	cbnz	r3, 8009146 <srand+0x3a>
 8009118:	2018      	movs	r0, #24
 800911a:	f7ff fef9 	bl	8008f10 <malloc>
 800911e:	4602      	mov	r2, r0
 8009120:	63a8      	str	r0, [r5, #56]	; 0x38
 8009122:	b920      	cbnz	r0, 800912e <srand+0x22>
 8009124:	4b0b      	ldr	r3, [pc, #44]	; (8009154 <srand+0x48>)
 8009126:	480c      	ldr	r0, [pc, #48]	; (8009158 <srand+0x4c>)
 8009128:	2142      	movs	r1, #66	; 0x42
 800912a:	f000 f889 	bl	8009240 <__assert_func>
 800912e:	490b      	ldr	r1, [pc, #44]	; (800915c <srand+0x50>)
 8009130:	4b0b      	ldr	r3, [pc, #44]	; (8009160 <srand+0x54>)
 8009132:	e9c0 1300 	strd	r1, r3, [r0]
 8009136:	4b0b      	ldr	r3, [pc, #44]	; (8009164 <srand+0x58>)
 8009138:	6083      	str	r3, [r0, #8]
 800913a:	230b      	movs	r3, #11
 800913c:	8183      	strh	r3, [r0, #12]
 800913e:	2100      	movs	r1, #0
 8009140:	2001      	movs	r0, #1
 8009142:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009146:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009148:	2200      	movs	r2, #0
 800914a:	611c      	str	r4, [r3, #16]
 800914c:	615a      	str	r2, [r3, #20]
 800914e:	bd38      	pop	{r3, r4, r5, pc}
 8009150:	20000060 	.word	0x20000060
 8009154:	0800d5b4 	.word	0x0800d5b4
 8009158:	0800d5cb 	.word	0x0800d5cb
 800915c:	abcd330e 	.word	0xabcd330e
 8009160:	e66d1234 	.word	0xe66d1234
 8009164:	0005deec 	.word	0x0005deec

08009168 <rand>:
 8009168:	4b16      	ldr	r3, [pc, #88]	; (80091c4 <rand+0x5c>)
 800916a:	b510      	push	{r4, lr}
 800916c:	681c      	ldr	r4, [r3, #0]
 800916e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009170:	b9b3      	cbnz	r3, 80091a0 <rand+0x38>
 8009172:	2018      	movs	r0, #24
 8009174:	f7ff fecc 	bl	8008f10 <malloc>
 8009178:	63a0      	str	r0, [r4, #56]	; 0x38
 800917a:	b928      	cbnz	r0, 8009188 <rand+0x20>
 800917c:	4602      	mov	r2, r0
 800917e:	4b12      	ldr	r3, [pc, #72]	; (80091c8 <rand+0x60>)
 8009180:	4812      	ldr	r0, [pc, #72]	; (80091cc <rand+0x64>)
 8009182:	214e      	movs	r1, #78	; 0x4e
 8009184:	f000 f85c 	bl	8009240 <__assert_func>
 8009188:	4a11      	ldr	r2, [pc, #68]	; (80091d0 <rand+0x68>)
 800918a:	4b12      	ldr	r3, [pc, #72]	; (80091d4 <rand+0x6c>)
 800918c:	e9c0 2300 	strd	r2, r3, [r0]
 8009190:	4b11      	ldr	r3, [pc, #68]	; (80091d8 <rand+0x70>)
 8009192:	6083      	str	r3, [r0, #8]
 8009194:	230b      	movs	r3, #11
 8009196:	8183      	strh	r3, [r0, #12]
 8009198:	2201      	movs	r2, #1
 800919a:	2300      	movs	r3, #0
 800919c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80091a0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80091a2:	4a0e      	ldr	r2, [pc, #56]	; (80091dc <rand+0x74>)
 80091a4:	6920      	ldr	r0, [r4, #16]
 80091a6:	6963      	ldr	r3, [r4, #20]
 80091a8:	490d      	ldr	r1, [pc, #52]	; (80091e0 <rand+0x78>)
 80091aa:	4342      	muls	r2, r0
 80091ac:	fb01 2203 	mla	r2, r1, r3, r2
 80091b0:	fba0 0101 	umull	r0, r1, r0, r1
 80091b4:	1c43      	adds	r3, r0, #1
 80091b6:	eb42 0001 	adc.w	r0, r2, r1
 80091ba:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80091be:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80091c2:	bd10      	pop	{r4, pc}
 80091c4:	20000060 	.word	0x20000060
 80091c8:	0800d5b4 	.word	0x0800d5b4
 80091cc:	0800d5cb 	.word	0x0800d5cb
 80091d0:	abcd330e 	.word	0xabcd330e
 80091d4:	e66d1234 	.word	0xe66d1234
 80091d8:	0005deec 	.word	0x0005deec
 80091dc:	5851f42d 	.word	0x5851f42d
 80091e0:	4c957f2d 	.word	0x4c957f2d

080091e4 <_sbrk_r>:
 80091e4:	b538      	push	{r3, r4, r5, lr}
 80091e6:	4d06      	ldr	r5, [pc, #24]	; (8009200 <_sbrk_r+0x1c>)
 80091e8:	2300      	movs	r3, #0
 80091ea:	4604      	mov	r4, r0
 80091ec:	4608      	mov	r0, r1
 80091ee:	602b      	str	r3, [r5, #0]
 80091f0:	f7f9 fa06 	bl	8002600 <_sbrk>
 80091f4:	1c43      	adds	r3, r0, #1
 80091f6:	d102      	bne.n	80091fe <_sbrk_r+0x1a>
 80091f8:	682b      	ldr	r3, [r5, #0]
 80091fa:	b103      	cbz	r3, 80091fe <_sbrk_r+0x1a>
 80091fc:	6023      	str	r3, [r4, #0]
 80091fe:	bd38      	pop	{r3, r4, r5, pc}
 8009200:	200007f0 	.word	0x200007f0

08009204 <strdup>:
 8009204:	4b02      	ldr	r3, [pc, #8]	; (8009210 <strdup+0xc>)
 8009206:	4601      	mov	r1, r0
 8009208:	6818      	ldr	r0, [r3, #0]
 800920a:	f000 b803 	b.w	8009214 <_strdup_r>
 800920e:	bf00      	nop
 8009210:	20000060 	.word	0x20000060

08009214 <_strdup_r>:
 8009214:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009216:	4604      	mov	r4, r0
 8009218:	4608      	mov	r0, r1
 800921a:	460d      	mov	r5, r1
 800921c:	f7f6 ffe2 	bl	80001e4 <strlen>
 8009220:	1c42      	adds	r2, r0, #1
 8009222:	4611      	mov	r1, r2
 8009224:	4620      	mov	r0, r4
 8009226:	9201      	str	r2, [sp, #4]
 8009228:	f7ff fefc 	bl	8009024 <_malloc_r>
 800922c:	4604      	mov	r4, r0
 800922e:	b118      	cbz	r0, 8009238 <_strdup_r+0x24>
 8009230:	9a01      	ldr	r2, [sp, #4]
 8009232:	4629      	mov	r1, r5
 8009234:	f7ff fe74 	bl	8008f20 <memcpy>
 8009238:	4620      	mov	r0, r4
 800923a:	b003      	add	sp, #12
 800923c:	bd30      	pop	{r4, r5, pc}
	...

08009240 <__assert_func>:
 8009240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009242:	4614      	mov	r4, r2
 8009244:	461a      	mov	r2, r3
 8009246:	4b09      	ldr	r3, [pc, #36]	; (800926c <__assert_func+0x2c>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4605      	mov	r5, r0
 800924c:	68d8      	ldr	r0, [r3, #12]
 800924e:	b14c      	cbz	r4, 8009264 <__assert_func+0x24>
 8009250:	4b07      	ldr	r3, [pc, #28]	; (8009270 <__assert_func+0x30>)
 8009252:	9100      	str	r1, [sp, #0]
 8009254:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009258:	4906      	ldr	r1, [pc, #24]	; (8009274 <__assert_func+0x34>)
 800925a:	462b      	mov	r3, r5
 800925c:	f000 f80e 	bl	800927c <fiprintf>
 8009260:	f000 fbd8 	bl	8009a14 <abort>
 8009264:	4b04      	ldr	r3, [pc, #16]	; (8009278 <__assert_func+0x38>)
 8009266:	461c      	mov	r4, r3
 8009268:	e7f3      	b.n	8009252 <__assert_func+0x12>
 800926a:	bf00      	nop
 800926c:	20000060 	.word	0x20000060
 8009270:	0800d626 	.word	0x0800d626
 8009274:	0800d633 	.word	0x0800d633
 8009278:	0800d661 	.word	0x0800d661

0800927c <fiprintf>:
 800927c:	b40e      	push	{r1, r2, r3}
 800927e:	b503      	push	{r0, r1, lr}
 8009280:	4601      	mov	r1, r0
 8009282:	ab03      	add	r3, sp, #12
 8009284:	4805      	ldr	r0, [pc, #20]	; (800929c <fiprintf+0x20>)
 8009286:	f853 2b04 	ldr.w	r2, [r3], #4
 800928a:	6800      	ldr	r0, [r0, #0]
 800928c:	9301      	str	r3, [sp, #4]
 800928e:	f000 f83d 	bl	800930c <_vfiprintf_r>
 8009292:	b002      	add	sp, #8
 8009294:	f85d eb04 	ldr.w	lr, [sp], #4
 8009298:	b003      	add	sp, #12
 800929a:	4770      	bx	lr
 800929c:	20000060 	.word	0x20000060

080092a0 <__malloc_lock>:
 80092a0:	4801      	ldr	r0, [pc, #4]	; (80092a8 <__malloc_lock+0x8>)
 80092a2:	f000 bd77 	b.w	8009d94 <__retarget_lock_acquire_recursive>
 80092a6:	bf00      	nop
 80092a8:	200007f4 	.word	0x200007f4

080092ac <__malloc_unlock>:
 80092ac:	4801      	ldr	r0, [pc, #4]	; (80092b4 <__malloc_unlock+0x8>)
 80092ae:	f000 bd72 	b.w	8009d96 <__retarget_lock_release_recursive>
 80092b2:	bf00      	nop
 80092b4:	200007f4 	.word	0x200007f4

080092b8 <__sfputc_r>:
 80092b8:	6893      	ldr	r3, [r2, #8]
 80092ba:	3b01      	subs	r3, #1
 80092bc:	2b00      	cmp	r3, #0
 80092be:	b410      	push	{r4}
 80092c0:	6093      	str	r3, [r2, #8]
 80092c2:	da08      	bge.n	80092d6 <__sfputc_r+0x1e>
 80092c4:	6994      	ldr	r4, [r2, #24]
 80092c6:	42a3      	cmp	r3, r4
 80092c8:	db01      	blt.n	80092ce <__sfputc_r+0x16>
 80092ca:	290a      	cmp	r1, #10
 80092cc:	d103      	bne.n	80092d6 <__sfputc_r+0x1e>
 80092ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092d2:	f000 badf 	b.w	8009894 <__swbuf_r>
 80092d6:	6813      	ldr	r3, [r2, #0]
 80092d8:	1c58      	adds	r0, r3, #1
 80092da:	6010      	str	r0, [r2, #0]
 80092dc:	7019      	strb	r1, [r3, #0]
 80092de:	4608      	mov	r0, r1
 80092e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092e4:	4770      	bx	lr

080092e6 <__sfputs_r>:
 80092e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092e8:	4606      	mov	r6, r0
 80092ea:	460f      	mov	r7, r1
 80092ec:	4614      	mov	r4, r2
 80092ee:	18d5      	adds	r5, r2, r3
 80092f0:	42ac      	cmp	r4, r5
 80092f2:	d101      	bne.n	80092f8 <__sfputs_r+0x12>
 80092f4:	2000      	movs	r0, #0
 80092f6:	e007      	b.n	8009308 <__sfputs_r+0x22>
 80092f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092fc:	463a      	mov	r2, r7
 80092fe:	4630      	mov	r0, r6
 8009300:	f7ff ffda 	bl	80092b8 <__sfputc_r>
 8009304:	1c43      	adds	r3, r0, #1
 8009306:	d1f3      	bne.n	80092f0 <__sfputs_r+0xa>
 8009308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800930c <_vfiprintf_r>:
 800930c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009310:	460d      	mov	r5, r1
 8009312:	b09d      	sub	sp, #116	; 0x74
 8009314:	4614      	mov	r4, r2
 8009316:	4698      	mov	r8, r3
 8009318:	4606      	mov	r6, r0
 800931a:	b118      	cbz	r0, 8009324 <_vfiprintf_r+0x18>
 800931c:	6983      	ldr	r3, [r0, #24]
 800931e:	b90b      	cbnz	r3, 8009324 <_vfiprintf_r+0x18>
 8009320:	f000 fc9a 	bl	8009c58 <__sinit>
 8009324:	4b89      	ldr	r3, [pc, #548]	; (800954c <_vfiprintf_r+0x240>)
 8009326:	429d      	cmp	r5, r3
 8009328:	d11b      	bne.n	8009362 <_vfiprintf_r+0x56>
 800932a:	6875      	ldr	r5, [r6, #4]
 800932c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800932e:	07d9      	lsls	r1, r3, #31
 8009330:	d405      	bmi.n	800933e <_vfiprintf_r+0x32>
 8009332:	89ab      	ldrh	r3, [r5, #12]
 8009334:	059a      	lsls	r2, r3, #22
 8009336:	d402      	bmi.n	800933e <_vfiprintf_r+0x32>
 8009338:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800933a:	f000 fd2b 	bl	8009d94 <__retarget_lock_acquire_recursive>
 800933e:	89ab      	ldrh	r3, [r5, #12]
 8009340:	071b      	lsls	r3, r3, #28
 8009342:	d501      	bpl.n	8009348 <_vfiprintf_r+0x3c>
 8009344:	692b      	ldr	r3, [r5, #16]
 8009346:	b9eb      	cbnz	r3, 8009384 <_vfiprintf_r+0x78>
 8009348:	4629      	mov	r1, r5
 800934a:	4630      	mov	r0, r6
 800934c:	f000 faf4 	bl	8009938 <__swsetup_r>
 8009350:	b1c0      	cbz	r0, 8009384 <_vfiprintf_r+0x78>
 8009352:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009354:	07dc      	lsls	r4, r3, #31
 8009356:	d50e      	bpl.n	8009376 <_vfiprintf_r+0x6a>
 8009358:	f04f 30ff 	mov.w	r0, #4294967295
 800935c:	b01d      	add	sp, #116	; 0x74
 800935e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009362:	4b7b      	ldr	r3, [pc, #492]	; (8009550 <_vfiprintf_r+0x244>)
 8009364:	429d      	cmp	r5, r3
 8009366:	d101      	bne.n	800936c <_vfiprintf_r+0x60>
 8009368:	68b5      	ldr	r5, [r6, #8]
 800936a:	e7df      	b.n	800932c <_vfiprintf_r+0x20>
 800936c:	4b79      	ldr	r3, [pc, #484]	; (8009554 <_vfiprintf_r+0x248>)
 800936e:	429d      	cmp	r5, r3
 8009370:	bf08      	it	eq
 8009372:	68f5      	ldreq	r5, [r6, #12]
 8009374:	e7da      	b.n	800932c <_vfiprintf_r+0x20>
 8009376:	89ab      	ldrh	r3, [r5, #12]
 8009378:	0598      	lsls	r0, r3, #22
 800937a:	d4ed      	bmi.n	8009358 <_vfiprintf_r+0x4c>
 800937c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800937e:	f000 fd0a 	bl	8009d96 <__retarget_lock_release_recursive>
 8009382:	e7e9      	b.n	8009358 <_vfiprintf_r+0x4c>
 8009384:	2300      	movs	r3, #0
 8009386:	9309      	str	r3, [sp, #36]	; 0x24
 8009388:	2320      	movs	r3, #32
 800938a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800938e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009392:	2330      	movs	r3, #48	; 0x30
 8009394:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009558 <_vfiprintf_r+0x24c>
 8009398:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800939c:	f04f 0901 	mov.w	r9, #1
 80093a0:	4623      	mov	r3, r4
 80093a2:	469a      	mov	sl, r3
 80093a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093a8:	b10a      	cbz	r2, 80093ae <_vfiprintf_r+0xa2>
 80093aa:	2a25      	cmp	r2, #37	; 0x25
 80093ac:	d1f9      	bne.n	80093a2 <_vfiprintf_r+0x96>
 80093ae:	ebba 0b04 	subs.w	fp, sl, r4
 80093b2:	d00b      	beq.n	80093cc <_vfiprintf_r+0xc0>
 80093b4:	465b      	mov	r3, fp
 80093b6:	4622      	mov	r2, r4
 80093b8:	4629      	mov	r1, r5
 80093ba:	4630      	mov	r0, r6
 80093bc:	f7ff ff93 	bl	80092e6 <__sfputs_r>
 80093c0:	3001      	adds	r0, #1
 80093c2:	f000 80aa 	beq.w	800951a <_vfiprintf_r+0x20e>
 80093c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093c8:	445a      	add	r2, fp
 80093ca:	9209      	str	r2, [sp, #36]	; 0x24
 80093cc:	f89a 3000 	ldrb.w	r3, [sl]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f000 80a2 	beq.w	800951a <_vfiprintf_r+0x20e>
 80093d6:	2300      	movs	r3, #0
 80093d8:	f04f 32ff 	mov.w	r2, #4294967295
 80093dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093e0:	f10a 0a01 	add.w	sl, sl, #1
 80093e4:	9304      	str	r3, [sp, #16]
 80093e6:	9307      	str	r3, [sp, #28]
 80093e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093ec:	931a      	str	r3, [sp, #104]	; 0x68
 80093ee:	4654      	mov	r4, sl
 80093f0:	2205      	movs	r2, #5
 80093f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093f6:	4858      	ldr	r0, [pc, #352]	; (8009558 <_vfiprintf_r+0x24c>)
 80093f8:	f7f6 ff02 	bl	8000200 <memchr>
 80093fc:	9a04      	ldr	r2, [sp, #16]
 80093fe:	b9d8      	cbnz	r0, 8009438 <_vfiprintf_r+0x12c>
 8009400:	06d1      	lsls	r1, r2, #27
 8009402:	bf44      	itt	mi
 8009404:	2320      	movmi	r3, #32
 8009406:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800940a:	0713      	lsls	r3, r2, #28
 800940c:	bf44      	itt	mi
 800940e:	232b      	movmi	r3, #43	; 0x2b
 8009410:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009414:	f89a 3000 	ldrb.w	r3, [sl]
 8009418:	2b2a      	cmp	r3, #42	; 0x2a
 800941a:	d015      	beq.n	8009448 <_vfiprintf_r+0x13c>
 800941c:	9a07      	ldr	r2, [sp, #28]
 800941e:	4654      	mov	r4, sl
 8009420:	2000      	movs	r0, #0
 8009422:	f04f 0c0a 	mov.w	ip, #10
 8009426:	4621      	mov	r1, r4
 8009428:	f811 3b01 	ldrb.w	r3, [r1], #1
 800942c:	3b30      	subs	r3, #48	; 0x30
 800942e:	2b09      	cmp	r3, #9
 8009430:	d94e      	bls.n	80094d0 <_vfiprintf_r+0x1c4>
 8009432:	b1b0      	cbz	r0, 8009462 <_vfiprintf_r+0x156>
 8009434:	9207      	str	r2, [sp, #28]
 8009436:	e014      	b.n	8009462 <_vfiprintf_r+0x156>
 8009438:	eba0 0308 	sub.w	r3, r0, r8
 800943c:	fa09 f303 	lsl.w	r3, r9, r3
 8009440:	4313      	orrs	r3, r2
 8009442:	9304      	str	r3, [sp, #16]
 8009444:	46a2      	mov	sl, r4
 8009446:	e7d2      	b.n	80093ee <_vfiprintf_r+0xe2>
 8009448:	9b03      	ldr	r3, [sp, #12]
 800944a:	1d19      	adds	r1, r3, #4
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	9103      	str	r1, [sp, #12]
 8009450:	2b00      	cmp	r3, #0
 8009452:	bfbb      	ittet	lt
 8009454:	425b      	neglt	r3, r3
 8009456:	f042 0202 	orrlt.w	r2, r2, #2
 800945a:	9307      	strge	r3, [sp, #28]
 800945c:	9307      	strlt	r3, [sp, #28]
 800945e:	bfb8      	it	lt
 8009460:	9204      	strlt	r2, [sp, #16]
 8009462:	7823      	ldrb	r3, [r4, #0]
 8009464:	2b2e      	cmp	r3, #46	; 0x2e
 8009466:	d10c      	bne.n	8009482 <_vfiprintf_r+0x176>
 8009468:	7863      	ldrb	r3, [r4, #1]
 800946a:	2b2a      	cmp	r3, #42	; 0x2a
 800946c:	d135      	bne.n	80094da <_vfiprintf_r+0x1ce>
 800946e:	9b03      	ldr	r3, [sp, #12]
 8009470:	1d1a      	adds	r2, r3, #4
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	9203      	str	r2, [sp, #12]
 8009476:	2b00      	cmp	r3, #0
 8009478:	bfb8      	it	lt
 800947a:	f04f 33ff 	movlt.w	r3, #4294967295
 800947e:	3402      	adds	r4, #2
 8009480:	9305      	str	r3, [sp, #20]
 8009482:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009568 <_vfiprintf_r+0x25c>
 8009486:	7821      	ldrb	r1, [r4, #0]
 8009488:	2203      	movs	r2, #3
 800948a:	4650      	mov	r0, sl
 800948c:	f7f6 feb8 	bl	8000200 <memchr>
 8009490:	b140      	cbz	r0, 80094a4 <_vfiprintf_r+0x198>
 8009492:	2340      	movs	r3, #64	; 0x40
 8009494:	eba0 000a 	sub.w	r0, r0, sl
 8009498:	fa03 f000 	lsl.w	r0, r3, r0
 800949c:	9b04      	ldr	r3, [sp, #16]
 800949e:	4303      	orrs	r3, r0
 80094a0:	3401      	adds	r4, #1
 80094a2:	9304      	str	r3, [sp, #16]
 80094a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094a8:	482c      	ldr	r0, [pc, #176]	; (800955c <_vfiprintf_r+0x250>)
 80094aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094ae:	2206      	movs	r2, #6
 80094b0:	f7f6 fea6 	bl	8000200 <memchr>
 80094b4:	2800      	cmp	r0, #0
 80094b6:	d03f      	beq.n	8009538 <_vfiprintf_r+0x22c>
 80094b8:	4b29      	ldr	r3, [pc, #164]	; (8009560 <_vfiprintf_r+0x254>)
 80094ba:	bb1b      	cbnz	r3, 8009504 <_vfiprintf_r+0x1f8>
 80094bc:	9b03      	ldr	r3, [sp, #12]
 80094be:	3307      	adds	r3, #7
 80094c0:	f023 0307 	bic.w	r3, r3, #7
 80094c4:	3308      	adds	r3, #8
 80094c6:	9303      	str	r3, [sp, #12]
 80094c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ca:	443b      	add	r3, r7
 80094cc:	9309      	str	r3, [sp, #36]	; 0x24
 80094ce:	e767      	b.n	80093a0 <_vfiprintf_r+0x94>
 80094d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80094d4:	460c      	mov	r4, r1
 80094d6:	2001      	movs	r0, #1
 80094d8:	e7a5      	b.n	8009426 <_vfiprintf_r+0x11a>
 80094da:	2300      	movs	r3, #0
 80094dc:	3401      	adds	r4, #1
 80094de:	9305      	str	r3, [sp, #20]
 80094e0:	4619      	mov	r1, r3
 80094e2:	f04f 0c0a 	mov.w	ip, #10
 80094e6:	4620      	mov	r0, r4
 80094e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094ec:	3a30      	subs	r2, #48	; 0x30
 80094ee:	2a09      	cmp	r2, #9
 80094f0:	d903      	bls.n	80094fa <_vfiprintf_r+0x1ee>
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d0c5      	beq.n	8009482 <_vfiprintf_r+0x176>
 80094f6:	9105      	str	r1, [sp, #20]
 80094f8:	e7c3      	b.n	8009482 <_vfiprintf_r+0x176>
 80094fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80094fe:	4604      	mov	r4, r0
 8009500:	2301      	movs	r3, #1
 8009502:	e7f0      	b.n	80094e6 <_vfiprintf_r+0x1da>
 8009504:	ab03      	add	r3, sp, #12
 8009506:	9300      	str	r3, [sp, #0]
 8009508:	462a      	mov	r2, r5
 800950a:	4b16      	ldr	r3, [pc, #88]	; (8009564 <_vfiprintf_r+0x258>)
 800950c:	a904      	add	r1, sp, #16
 800950e:	4630      	mov	r0, r6
 8009510:	f3af 8000 	nop.w
 8009514:	4607      	mov	r7, r0
 8009516:	1c78      	adds	r0, r7, #1
 8009518:	d1d6      	bne.n	80094c8 <_vfiprintf_r+0x1bc>
 800951a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800951c:	07d9      	lsls	r1, r3, #31
 800951e:	d405      	bmi.n	800952c <_vfiprintf_r+0x220>
 8009520:	89ab      	ldrh	r3, [r5, #12]
 8009522:	059a      	lsls	r2, r3, #22
 8009524:	d402      	bmi.n	800952c <_vfiprintf_r+0x220>
 8009526:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009528:	f000 fc35 	bl	8009d96 <__retarget_lock_release_recursive>
 800952c:	89ab      	ldrh	r3, [r5, #12]
 800952e:	065b      	lsls	r3, r3, #25
 8009530:	f53f af12 	bmi.w	8009358 <_vfiprintf_r+0x4c>
 8009534:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009536:	e711      	b.n	800935c <_vfiprintf_r+0x50>
 8009538:	ab03      	add	r3, sp, #12
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	462a      	mov	r2, r5
 800953e:	4b09      	ldr	r3, [pc, #36]	; (8009564 <_vfiprintf_r+0x258>)
 8009540:	a904      	add	r1, sp, #16
 8009542:	4630      	mov	r0, r6
 8009544:	f000 f880 	bl	8009648 <_printf_i>
 8009548:	e7e4      	b.n	8009514 <_vfiprintf_r+0x208>
 800954a:	bf00      	nop
 800954c:	0800d6b8 	.word	0x0800d6b8
 8009550:	0800d6d8 	.word	0x0800d6d8
 8009554:	0800d698 	.word	0x0800d698
 8009558:	0800d662 	.word	0x0800d662
 800955c:	0800d66c 	.word	0x0800d66c
 8009560:	00000000 	.word	0x00000000
 8009564:	080092e7 	.word	0x080092e7
 8009568:	0800d668 	.word	0x0800d668

0800956c <_printf_common>:
 800956c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009570:	4616      	mov	r6, r2
 8009572:	4699      	mov	r9, r3
 8009574:	688a      	ldr	r2, [r1, #8]
 8009576:	690b      	ldr	r3, [r1, #16]
 8009578:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800957c:	4293      	cmp	r3, r2
 800957e:	bfb8      	it	lt
 8009580:	4613      	movlt	r3, r2
 8009582:	6033      	str	r3, [r6, #0]
 8009584:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009588:	4607      	mov	r7, r0
 800958a:	460c      	mov	r4, r1
 800958c:	b10a      	cbz	r2, 8009592 <_printf_common+0x26>
 800958e:	3301      	adds	r3, #1
 8009590:	6033      	str	r3, [r6, #0]
 8009592:	6823      	ldr	r3, [r4, #0]
 8009594:	0699      	lsls	r1, r3, #26
 8009596:	bf42      	ittt	mi
 8009598:	6833      	ldrmi	r3, [r6, #0]
 800959a:	3302      	addmi	r3, #2
 800959c:	6033      	strmi	r3, [r6, #0]
 800959e:	6825      	ldr	r5, [r4, #0]
 80095a0:	f015 0506 	ands.w	r5, r5, #6
 80095a4:	d106      	bne.n	80095b4 <_printf_common+0x48>
 80095a6:	f104 0a19 	add.w	sl, r4, #25
 80095aa:	68e3      	ldr	r3, [r4, #12]
 80095ac:	6832      	ldr	r2, [r6, #0]
 80095ae:	1a9b      	subs	r3, r3, r2
 80095b0:	42ab      	cmp	r3, r5
 80095b2:	dc26      	bgt.n	8009602 <_printf_common+0x96>
 80095b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095b8:	1e13      	subs	r3, r2, #0
 80095ba:	6822      	ldr	r2, [r4, #0]
 80095bc:	bf18      	it	ne
 80095be:	2301      	movne	r3, #1
 80095c0:	0692      	lsls	r2, r2, #26
 80095c2:	d42b      	bmi.n	800961c <_printf_common+0xb0>
 80095c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095c8:	4649      	mov	r1, r9
 80095ca:	4638      	mov	r0, r7
 80095cc:	47c0      	blx	r8
 80095ce:	3001      	adds	r0, #1
 80095d0:	d01e      	beq.n	8009610 <_printf_common+0xa4>
 80095d2:	6823      	ldr	r3, [r4, #0]
 80095d4:	68e5      	ldr	r5, [r4, #12]
 80095d6:	6832      	ldr	r2, [r6, #0]
 80095d8:	f003 0306 	and.w	r3, r3, #6
 80095dc:	2b04      	cmp	r3, #4
 80095de:	bf08      	it	eq
 80095e0:	1aad      	subeq	r5, r5, r2
 80095e2:	68a3      	ldr	r3, [r4, #8]
 80095e4:	6922      	ldr	r2, [r4, #16]
 80095e6:	bf0c      	ite	eq
 80095e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095ec:	2500      	movne	r5, #0
 80095ee:	4293      	cmp	r3, r2
 80095f0:	bfc4      	itt	gt
 80095f2:	1a9b      	subgt	r3, r3, r2
 80095f4:	18ed      	addgt	r5, r5, r3
 80095f6:	2600      	movs	r6, #0
 80095f8:	341a      	adds	r4, #26
 80095fa:	42b5      	cmp	r5, r6
 80095fc:	d11a      	bne.n	8009634 <_printf_common+0xc8>
 80095fe:	2000      	movs	r0, #0
 8009600:	e008      	b.n	8009614 <_printf_common+0xa8>
 8009602:	2301      	movs	r3, #1
 8009604:	4652      	mov	r2, sl
 8009606:	4649      	mov	r1, r9
 8009608:	4638      	mov	r0, r7
 800960a:	47c0      	blx	r8
 800960c:	3001      	adds	r0, #1
 800960e:	d103      	bne.n	8009618 <_printf_common+0xac>
 8009610:	f04f 30ff 	mov.w	r0, #4294967295
 8009614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009618:	3501      	adds	r5, #1
 800961a:	e7c6      	b.n	80095aa <_printf_common+0x3e>
 800961c:	18e1      	adds	r1, r4, r3
 800961e:	1c5a      	adds	r2, r3, #1
 8009620:	2030      	movs	r0, #48	; 0x30
 8009622:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009626:	4422      	add	r2, r4
 8009628:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800962c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009630:	3302      	adds	r3, #2
 8009632:	e7c7      	b.n	80095c4 <_printf_common+0x58>
 8009634:	2301      	movs	r3, #1
 8009636:	4622      	mov	r2, r4
 8009638:	4649      	mov	r1, r9
 800963a:	4638      	mov	r0, r7
 800963c:	47c0      	blx	r8
 800963e:	3001      	adds	r0, #1
 8009640:	d0e6      	beq.n	8009610 <_printf_common+0xa4>
 8009642:	3601      	adds	r6, #1
 8009644:	e7d9      	b.n	80095fa <_printf_common+0x8e>
	...

08009648 <_printf_i>:
 8009648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800964c:	7e0f      	ldrb	r7, [r1, #24]
 800964e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009650:	2f78      	cmp	r7, #120	; 0x78
 8009652:	4691      	mov	r9, r2
 8009654:	4680      	mov	r8, r0
 8009656:	460c      	mov	r4, r1
 8009658:	469a      	mov	sl, r3
 800965a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800965e:	d807      	bhi.n	8009670 <_printf_i+0x28>
 8009660:	2f62      	cmp	r7, #98	; 0x62
 8009662:	d80a      	bhi.n	800967a <_printf_i+0x32>
 8009664:	2f00      	cmp	r7, #0
 8009666:	f000 80d8 	beq.w	800981a <_printf_i+0x1d2>
 800966a:	2f58      	cmp	r7, #88	; 0x58
 800966c:	f000 80a3 	beq.w	80097b6 <_printf_i+0x16e>
 8009670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009674:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009678:	e03a      	b.n	80096f0 <_printf_i+0xa8>
 800967a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800967e:	2b15      	cmp	r3, #21
 8009680:	d8f6      	bhi.n	8009670 <_printf_i+0x28>
 8009682:	a101      	add	r1, pc, #4	; (adr r1, 8009688 <_printf_i+0x40>)
 8009684:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009688:	080096e1 	.word	0x080096e1
 800968c:	080096f5 	.word	0x080096f5
 8009690:	08009671 	.word	0x08009671
 8009694:	08009671 	.word	0x08009671
 8009698:	08009671 	.word	0x08009671
 800969c:	08009671 	.word	0x08009671
 80096a0:	080096f5 	.word	0x080096f5
 80096a4:	08009671 	.word	0x08009671
 80096a8:	08009671 	.word	0x08009671
 80096ac:	08009671 	.word	0x08009671
 80096b0:	08009671 	.word	0x08009671
 80096b4:	08009801 	.word	0x08009801
 80096b8:	08009725 	.word	0x08009725
 80096bc:	080097e3 	.word	0x080097e3
 80096c0:	08009671 	.word	0x08009671
 80096c4:	08009671 	.word	0x08009671
 80096c8:	08009823 	.word	0x08009823
 80096cc:	08009671 	.word	0x08009671
 80096d0:	08009725 	.word	0x08009725
 80096d4:	08009671 	.word	0x08009671
 80096d8:	08009671 	.word	0x08009671
 80096dc:	080097eb 	.word	0x080097eb
 80096e0:	682b      	ldr	r3, [r5, #0]
 80096e2:	1d1a      	adds	r2, r3, #4
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	602a      	str	r2, [r5, #0]
 80096e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096f0:	2301      	movs	r3, #1
 80096f2:	e0a3      	b.n	800983c <_printf_i+0x1f4>
 80096f4:	6820      	ldr	r0, [r4, #0]
 80096f6:	6829      	ldr	r1, [r5, #0]
 80096f8:	0606      	lsls	r6, r0, #24
 80096fa:	f101 0304 	add.w	r3, r1, #4
 80096fe:	d50a      	bpl.n	8009716 <_printf_i+0xce>
 8009700:	680e      	ldr	r6, [r1, #0]
 8009702:	602b      	str	r3, [r5, #0]
 8009704:	2e00      	cmp	r6, #0
 8009706:	da03      	bge.n	8009710 <_printf_i+0xc8>
 8009708:	232d      	movs	r3, #45	; 0x2d
 800970a:	4276      	negs	r6, r6
 800970c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009710:	485e      	ldr	r0, [pc, #376]	; (800988c <_printf_i+0x244>)
 8009712:	230a      	movs	r3, #10
 8009714:	e019      	b.n	800974a <_printf_i+0x102>
 8009716:	680e      	ldr	r6, [r1, #0]
 8009718:	602b      	str	r3, [r5, #0]
 800971a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800971e:	bf18      	it	ne
 8009720:	b236      	sxthne	r6, r6
 8009722:	e7ef      	b.n	8009704 <_printf_i+0xbc>
 8009724:	682b      	ldr	r3, [r5, #0]
 8009726:	6820      	ldr	r0, [r4, #0]
 8009728:	1d19      	adds	r1, r3, #4
 800972a:	6029      	str	r1, [r5, #0]
 800972c:	0601      	lsls	r1, r0, #24
 800972e:	d501      	bpl.n	8009734 <_printf_i+0xec>
 8009730:	681e      	ldr	r6, [r3, #0]
 8009732:	e002      	b.n	800973a <_printf_i+0xf2>
 8009734:	0646      	lsls	r6, r0, #25
 8009736:	d5fb      	bpl.n	8009730 <_printf_i+0xe8>
 8009738:	881e      	ldrh	r6, [r3, #0]
 800973a:	4854      	ldr	r0, [pc, #336]	; (800988c <_printf_i+0x244>)
 800973c:	2f6f      	cmp	r7, #111	; 0x6f
 800973e:	bf0c      	ite	eq
 8009740:	2308      	moveq	r3, #8
 8009742:	230a      	movne	r3, #10
 8009744:	2100      	movs	r1, #0
 8009746:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800974a:	6865      	ldr	r5, [r4, #4]
 800974c:	60a5      	str	r5, [r4, #8]
 800974e:	2d00      	cmp	r5, #0
 8009750:	bfa2      	ittt	ge
 8009752:	6821      	ldrge	r1, [r4, #0]
 8009754:	f021 0104 	bicge.w	r1, r1, #4
 8009758:	6021      	strge	r1, [r4, #0]
 800975a:	b90e      	cbnz	r6, 8009760 <_printf_i+0x118>
 800975c:	2d00      	cmp	r5, #0
 800975e:	d04d      	beq.n	80097fc <_printf_i+0x1b4>
 8009760:	4615      	mov	r5, r2
 8009762:	fbb6 f1f3 	udiv	r1, r6, r3
 8009766:	fb03 6711 	mls	r7, r3, r1, r6
 800976a:	5dc7      	ldrb	r7, [r0, r7]
 800976c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009770:	4637      	mov	r7, r6
 8009772:	42bb      	cmp	r3, r7
 8009774:	460e      	mov	r6, r1
 8009776:	d9f4      	bls.n	8009762 <_printf_i+0x11a>
 8009778:	2b08      	cmp	r3, #8
 800977a:	d10b      	bne.n	8009794 <_printf_i+0x14c>
 800977c:	6823      	ldr	r3, [r4, #0]
 800977e:	07de      	lsls	r6, r3, #31
 8009780:	d508      	bpl.n	8009794 <_printf_i+0x14c>
 8009782:	6923      	ldr	r3, [r4, #16]
 8009784:	6861      	ldr	r1, [r4, #4]
 8009786:	4299      	cmp	r1, r3
 8009788:	bfde      	ittt	le
 800978a:	2330      	movle	r3, #48	; 0x30
 800978c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009790:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009794:	1b52      	subs	r2, r2, r5
 8009796:	6122      	str	r2, [r4, #16]
 8009798:	f8cd a000 	str.w	sl, [sp]
 800979c:	464b      	mov	r3, r9
 800979e:	aa03      	add	r2, sp, #12
 80097a0:	4621      	mov	r1, r4
 80097a2:	4640      	mov	r0, r8
 80097a4:	f7ff fee2 	bl	800956c <_printf_common>
 80097a8:	3001      	adds	r0, #1
 80097aa:	d14c      	bne.n	8009846 <_printf_i+0x1fe>
 80097ac:	f04f 30ff 	mov.w	r0, #4294967295
 80097b0:	b004      	add	sp, #16
 80097b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097b6:	4835      	ldr	r0, [pc, #212]	; (800988c <_printf_i+0x244>)
 80097b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80097bc:	6829      	ldr	r1, [r5, #0]
 80097be:	6823      	ldr	r3, [r4, #0]
 80097c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80097c4:	6029      	str	r1, [r5, #0]
 80097c6:	061d      	lsls	r5, r3, #24
 80097c8:	d514      	bpl.n	80097f4 <_printf_i+0x1ac>
 80097ca:	07df      	lsls	r7, r3, #31
 80097cc:	bf44      	itt	mi
 80097ce:	f043 0320 	orrmi.w	r3, r3, #32
 80097d2:	6023      	strmi	r3, [r4, #0]
 80097d4:	b91e      	cbnz	r6, 80097de <_printf_i+0x196>
 80097d6:	6823      	ldr	r3, [r4, #0]
 80097d8:	f023 0320 	bic.w	r3, r3, #32
 80097dc:	6023      	str	r3, [r4, #0]
 80097de:	2310      	movs	r3, #16
 80097e0:	e7b0      	b.n	8009744 <_printf_i+0xfc>
 80097e2:	6823      	ldr	r3, [r4, #0]
 80097e4:	f043 0320 	orr.w	r3, r3, #32
 80097e8:	6023      	str	r3, [r4, #0]
 80097ea:	2378      	movs	r3, #120	; 0x78
 80097ec:	4828      	ldr	r0, [pc, #160]	; (8009890 <_printf_i+0x248>)
 80097ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80097f2:	e7e3      	b.n	80097bc <_printf_i+0x174>
 80097f4:	0659      	lsls	r1, r3, #25
 80097f6:	bf48      	it	mi
 80097f8:	b2b6      	uxthmi	r6, r6
 80097fa:	e7e6      	b.n	80097ca <_printf_i+0x182>
 80097fc:	4615      	mov	r5, r2
 80097fe:	e7bb      	b.n	8009778 <_printf_i+0x130>
 8009800:	682b      	ldr	r3, [r5, #0]
 8009802:	6826      	ldr	r6, [r4, #0]
 8009804:	6961      	ldr	r1, [r4, #20]
 8009806:	1d18      	adds	r0, r3, #4
 8009808:	6028      	str	r0, [r5, #0]
 800980a:	0635      	lsls	r5, r6, #24
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	d501      	bpl.n	8009814 <_printf_i+0x1cc>
 8009810:	6019      	str	r1, [r3, #0]
 8009812:	e002      	b.n	800981a <_printf_i+0x1d2>
 8009814:	0670      	lsls	r0, r6, #25
 8009816:	d5fb      	bpl.n	8009810 <_printf_i+0x1c8>
 8009818:	8019      	strh	r1, [r3, #0]
 800981a:	2300      	movs	r3, #0
 800981c:	6123      	str	r3, [r4, #16]
 800981e:	4615      	mov	r5, r2
 8009820:	e7ba      	b.n	8009798 <_printf_i+0x150>
 8009822:	682b      	ldr	r3, [r5, #0]
 8009824:	1d1a      	adds	r2, r3, #4
 8009826:	602a      	str	r2, [r5, #0]
 8009828:	681d      	ldr	r5, [r3, #0]
 800982a:	6862      	ldr	r2, [r4, #4]
 800982c:	2100      	movs	r1, #0
 800982e:	4628      	mov	r0, r5
 8009830:	f7f6 fce6 	bl	8000200 <memchr>
 8009834:	b108      	cbz	r0, 800983a <_printf_i+0x1f2>
 8009836:	1b40      	subs	r0, r0, r5
 8009838:	6060      	str	r0, [r4, #4]
 800983a:	6863      	ldr	r3, [r4, #4]
 800983c:	6123      	str	r3, [r4, #16]
 800983e:	2300      	movs	r3, #0
 8009840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009844:	e7a8      	b.n	8009798 <_printf_i+0x150>
 8009846:	6923      	ldr	r3, [r4, #16]
 8009848:	462a      	mov	r2, r5
 800984a:	4649      	mov	r1, r9
 800984c:	4640      	mov	r0, r8
 800984e:	47d0      	blx	sl
 8009850:	3001      	adds	r0, #1
 8009852:	d0ab      	beq.n	80097ac <_printf_i+0x164>
 8009854:	6823      	ldr	r3, [r4, #0]
 8009856:	079b      	lsls	r3, r3, #30
 8009858:	d413      	bmi.n	8009882 <_printf_i+0x23a>
 800985a:	68e0      	ldr	r0, [r4, #12]
 800985c:	9b03      	ldr	r3, [sp, #12]
 800985e:	4298      	cmp	r0, r3
 8009860:	bfb8      	it	lt
 8009862:	4618      	movlt	r0, r3
 8009864:	e7a4      	b.n	80097b0 <_printf_i+0x168>
 8009866:	2301      	movs	r3, #1
 8009868:	4632      	mov	r2, r6
 800986a:	4649      	mov	r1, r9
 800986c:	4640      	mov	r0, r8
 800986e:	47d0      	blx	sl
 8009870:	3001      	adds	r0, #1
 8009872:	d09b      	beq.n	80097ac <_printf_i+0x164>
 8009874:	3501      	adds	r5, #1
 8009876:	68e3      	ldr	r3, [r4, #12]
 8009878:	9903      	ldr	r1, [sp, #12]
 800987a:	1a5b      	subs	r3, r3, r1
 800987c:	42ab      	cmp	r3, r5
 800987e:	dcf2      	bgt.n	8009866 <_printf_i+0x21e>
 8009880:	e7eb      	b.n	800985a <_printf_i+0x212>
 8009882:	2500      	movs	r5, #0
 8009884:	f104 0619 	add.w	r6, r4, #25
 8009888:	e7f5      	b.n	8009876 <_printf_i+0x22e>
 800988a:	bf00      	nop
 800988c:	0800d673 	.word	0x0800d673
 8009890:	0800d684 	.word	0x0800d684

08009894 <__swbuf_r>:
 8009894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009896:	460e      	mov	r6, r1
 8009898:	4614      	mov	r4, r2
 800989a:	4605      	mov	r5, r0
 800989c:	b118      	cbz	r0, 80098a6 <__swbuf_r+0x12>
 800989e:	6983      	ldr	r3, [r0, #24]
 80098a0:	b90b      	cbnz	r3, 80098a6 <__swbuf_r+0x12>
 80098a2:	f000 f9d9 	bl	8009c58 <__sinit>
 80098a6:	4b21      	ldr	r3, [pc, #132]	; (800992c <__swbuf_r+0x98>)
 80098a8:	429c      	cmp	r4, r3
 80098aa:	d12b      	bne.n	8009904 <__swbuf_r+0x70>
 80098ac:	686c      	ldr	r4, [r5, #4]
 80098ae:	69a3      	ldr	r3, [r4, #24]
 80098b0:	60a3      	str	r3, [r4, #8]
 80098b2:	89a3      	ldrh	r3, [r4, #12]
 80098b4:	071a      	lsls	r2, r3, #28
 80098b6:	d52f      	bpl.n	8009918 <__swbuf_r+0x84>
 80098b8:	6923      	ldr	r3, [r4, #16]
 80098ba:	b36b      	cbz	r3, 8009918 <__swbuf_r+0x84>
 80098bc:	6923      	ldr	r3, [r4, #16]
 80098be:	6820      	ldr	r0, [r4, #0]
 80098c0:	1ac0      	subs	r0, r0, r3
 80098c2:	6963      	ldr	r3, [r4, #20]
 80098c4:	b2f6      	uxtb	r6, r6
 80098c6:	4283      	cmp	r3, r0
 80098c8:	4637      	mov	r7, r6
 80098ca:	dc04      	bgt.n	80098d6 <__swbuf_r+0x42>
 80098cc:	4621      	mov	r1, r4
 80098ce:	4628      	mov	r0, r5
 80098d0:	f000 f92e 	bl	8009b30 <_fflush_r>
 80098d4:	bb30      	cbnz	r0, 8009924 <__swbuf_r+0x90>
 80098d6:	68a3      	ldr	r3, [r4, #8]
 80098d8:	3b01      	subs	r3, #1
 80098da:	60a3      	str	r3, [r4, #8]
 80098dc:	6823      	ldr	r3, [r4, #0]
 80098de:	1c5a      	adds	r2, r3, #1
 80098e0:	6022      	str	r2, [r4, #0]
 80098e2:	701e      	strb	r6, [r3, #0]
 80098e4:	6963      	ldr	r3, [r4, #20]
 80098e6:	3001      	adds	r0, #1
 80098e8:	4283      	cmp	r3, r0
 80098ea:	d004      	beq.n	80098f6 <__swbuf_r+0x62>
 80098ec:	89a3      	ldrh	r3, [r4, #12]
 80098ee:	07db      	lsls	r3, r3, #31
 80098f0:	d506      	bpl.n	8009900 <__swbuf_r+0x6c>
 80098f2:	2e0a      	cmp	r6, #10
 80098f4:	d104      	bne.n	8009900 <__swbuf_r+0x6c>
 80098f6:	4621      	mov	r1, r4
 80098f8:	4628      	mov	r0, r5
 80098fa:	f000 f919 	bl	8009b30 <_fflush_r>
 80098fe:	b988      	cbnz	r0, 8009924 <__swbuf_r+0x90>
 8009900:	4638      	mov	r0, r7
 8009902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009904:	4b0a      	ldr	r3, [pc, #40]	; (8009930 <__swbuf_r+0x9c>)
 8009906:	429c      	cmp	r4, r3
 8009908:	d101      	bne.n	800990e <__swbuf_r+0x7a>
 800990a:	68ac      	ldr	r4, [r5, #8]
 800990c:	e7cf      	b.n	80098ae <__swbuf_r+0x1a>
 800990e:	4b09      	ldr	r3, [pc, #36]	; (8009934 <__swbuf_r+0xa0>)
 8009910:	429c      	cmp	r4, r3
 8009912:	bf08      	it	eq
 8009914:	68ec      	ldreq	r4, [r5, #12]
 8009916:	e7ca      	b.n	80098ae <__swbuf_r+0x1a>
 8009918:	4621      	mov	r1, r4
 800991a:	4628      	mov	r0, r5
 800991c:	f000 f80c 	bl	8009938 <__swsetup_r>
 8009920:	2800      	cmp	r0, #0
 8009922:	d0cb      	beq.n	80098bc <__swbuf_r+0x28>
 8009924:	f04f 37ff 	mov.w	r7, #4294967295
 8009928:	e7ea      	b.n	8009900 <__swbuf_r+0x6c>
 800992a:	bf00      	nop
 800992c:	0800d6b8 	.word	0x0800d6b8
 8009930:	0800d6d8 	.word	0x0800d6d8
 8009934:	0800d698 	.word	0x0800d698

08009938 <__swsetup_r>:
 8009938:	4b32      	ldr	r3, [pc, #200]	; (8009a04 <__swsetup_r+0xcc>)
 800993a:	b570      	push	{r4, r5, r6, lr}
 800993c:	681d      	ldr	r5, [r3, #0]
 800993e:	4606      	mov	r6, r0
 8009940:	460c      	mov	r4, r1
 8009942:	b125      	cbz	r5, 800994e <__swsetup_r+0x16>
 8009944:	69ab      	ldr	r3, [r5, #24]
 8009946:	b913      	cbnz	r3, 800994e <__swsetup_r+0x16>
 8009948:	4628      	mov	r0, r5
 800994a:	f000 f985 	bl	8009c58 <__sinit>
 800994e:	4b2e      	ldr	r3, [pc, #184]	; (8009a08 <__swsetup_r+0xd0>)
 8009950:	429c      	cmp	r4, r3
 8009952:	d10f      	bne.n	8009974 <__swsetup_r+0x3c>
 8009954:	686c      	ldr	r4, [r5, #4]
 8009956:	89a3      	ldrh	r3, [r4, #12]
 8009958:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800995c:	0719      	lsls	r1, r3, #28
 800995e:	d42c      	bmi.n	80099ba <__swsetup_r+0x82>
 8009960:	06dd      	lsls	r5, r3, #27
 8009962:	d411      	bmi.n	8009988 <__swsetup_r+0x50>
 8009964:	2309      	movs	r3, #9
 8009966:	6033      	str	r3, [r6, #0]
 8009968:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800996c:	81a3      	strh	r3, [r4, #12]
 800996e:	f04f 30ff 	mov.w	r0, #4294967295
 8009972:	e03e      	b.n	80099f2 <__swsetup_r+0xba>
 8009974:	4b25      	ldr	r3, [pc, #148]	; (8009a0c <__swsetup_r+0xd4>)
 8009976:	429c      	cmp	r4, r3
 8009978:	d101      	bne.n	800997e <__swsetup_r+0x46>
 800997a:	68ac      	ldr	r4, [r5, #8]
 800997c:	e7eb      	b.n	8009956 <__swsetup_r+0x1e>
 800997e:	4b24      	ldr	r3, [pc, #144]	; (8009a10 <__swsetup_r+0xd8>)
 8009980:	429c      	cmp	r4, r3
 8009982:	bf08      	it	eq
 8009984:	68ec      	ldreq	r4, [r5, #12]
 8009986:	e7e6      	b.n	8009956 <__swsetup_r+0x1e>
 8009988:	0758      	lsls	r0, r3, #29
 800998a:	d512      	bpl.n	80099b2 <__swsetup_r+0x7a>
 800998c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800998e:	b141      	cbz	r1, 80099a2 <__swsetup_r+0x6a>
 8009990:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009994:	4299      	cmp	r1, r3
 8009996:	d002      	beq.n	800999e <__swsetup_r+0x66>
 8009998:	4630      	mov	r0, r6
 800999a:	f7ff fad7 	bl	8008f4c <_free_r>
 800999e:	2300      	movs	r3, #0
 80099a0:	6363      	str	r3, [r4, #52]	; 0x34
 80099a2:	89a3      	ldrh	r3, [r4, #12]
 80099a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099a8:	81a3      	strh	r3, [r4, #12]
 80099aa:	2300      	movs	r3, #0
 80099ac:	6063      	str	r3, [r4, #4]
 80099ae:	6923      	ldr	r3, [r4, #16]
 80099b0:	6023      	str	r3, [r4, #0]
 80099b2:	89a3      	ldrh	r3, [r4, #12]
 80099b4:	f043 0308 	orr.w	r3, r3, #8
 80099b8:	81a3      	strh	r3, [r4, #12]
 80099ba:	6923      	ldr	r3, [r4, #16]
 80099bc:	b94b      	cbnz	r3, 80099d2 <__swsetup_r+0x9a>
 80099be:	89a3      	ldrh	r3, [r4, #12]
 80099c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80099c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099c8:	d003      	beq.n	80099d2 <__swsetup_r+0x9a>
 80099ca:	4621      	mov	r1, r4
 80099cc:	4630      	mov	r0, r6
 80099ce:	f000 fa09 	bl	8009de4 <__smakebuf_r>
 80099d2:	89a0      	ldrh	r0, [r4, #12]
 80099d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099d8:	f010 0301 	ands.w	r3, r0, #1
 80099dc:	d00a      	beq.n	80099f4 <__swsetup_r+0xbc>
 80099de:	2300      	movs	r3, #0
 80099e0:	60a3      	str	r3, [r4, #8]
 80099e2:	6963      	ldr	r3, [r4, #20]
 80099e4:	425b      	negs	r3, r3
 80099e6:	61a3      	str	r3, [r4, #24]
 80099e8:	6923      	ldr	r3, [r4, #16]
 80099ea:	b943      	cbnz	r3, 80099fe <__swsetup_r+0xc6>
 80099ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80099f0:	d1ba      	bne.n	8009968 <__swsetup_r+0x30>
 80099f2:	bd70      	pop	{r4, r5, r6, pc}
 80099f4:	0781      	lsls	r1, r0, #30
 80099f6:	bf58      	it	pl
 80099f8:	6963      	ldrpl	r3, [r4, #20]
 80099fa:	60a3      	str	r3, [r4, #8]
 80099fc:	e7f4      	b.n	80099e8 <__swsetup_r+0xb0>
 80099fe:	2000      	movs	r0, #0
 8009a00:	e7f7      	b.n	80099f2 <__swsetup_r+0xba>
 8009a02:	bf00      	nop
 8009a04:	20000060 	.word	0x20000060
 8009a08:	0800d6b8 	.word	0x0800d6b8
 8009a0c:	0800d6d8 	.word	0x0800d6d8
 8009a10:	0800d698 	.word	0x0800d698

08009a14 <abort>:
 8009a14:	b508      	push	{r3, lr}
 8009a16:	2006      	movs	r0, #6
 8009a18:	f000 fa4c 	bl	8009eb4 <raise>
 8009a1c:	2001      	movs	r0, #1
 8009a1e:	f7f8 fd77 	bl	8002510 <_exit>
	...

08009a24 <__sflush_r>:
 8009a24:	898a      	ldrh	r2, [r1, #12]
 8009a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a2a:	4605      	mov	r5, r0
 8009a2c:	0710      	lsls	r0, r2, #28
 8009a2e:	460c      	mov	r4, r1
 8009a30:	d458      	bmi.n	8009ae4 <__sflush_r+0xc0>
 8009a32:	684b      	ldr	r3, [r1, #4]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	dc05      	bgt.n	8009a44 <__sflush_r+0x20>
 8009a38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	dc02      	bgt.n	8009a44 <__sflush_r+0x20>
 8009a3e:	2000      	movs	r0, #0
 8009a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a46:	2e00      	cmp	r6, #0
 8009a48:	d0f9      	beq.n	8009a3e <__sflush_r+0x1a>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a50:	682f      	ldr	r7, [r5, #0]
 8009a52:	602b      	str	r3, [r5, #0]
 8009a54:	d032      	beq.n	8009abc <__sflush_r+0x98>
 8009a56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a58:	89a3      	ldrh	r3, [r4, #12]
 8009a5a:	075a      	lsls	r2, r3, #29
 8009a5c:	d505      	bpl.n	8009a6a <__sflush_r+0x46>
 8009a5e:	6863      	ldr	r3, [r4, #4]
 8009a60:	1ac0      	subs	r0, r0, r3
 8009a62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a64:	b10b      	cbz	r3, 8009a6a <__sflush_r+0x46>
 8009a66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a68:	1ac0      	subs	r0, r0, r3
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a70:	6a21      	ldr	r1, [r4, #32]
 8009a72:	4628      	mov	r0, r5
 8009a74:	47b0      	blx	r6
 8009a76:	1c43      	adds	r3, r0, #1
 8009a78:	89a3      	ldrh	r3, [r4, #12]
 8009a7a:	d106      	bne.n	8009a8a <__sflush_r+0x66>
 8009a7c:	6829      	ldr	r1, [r5, #0]
 8009a7e:	291d      	cmp	r1, #29
 8009a80:	d82c      	bhi.n	8009adc <__sflush_r+0xb8>
 8009a82:	4a2a      	ldr	r2, [pc, #168]	; (8009b2c <__sflush_r+0x108>)
 8009a84:	40ca      	lsrs	r2, r1
 8009a86:	07d6      	lsls	r6, r2, #31
 8009a88:	d528      	bpl.n	8009adc <__sflush_r+0xb8>
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	6062      	str	r2, [r4, #4]
 8009a8e:	04d9      	lsls	r1, r3, #19
 8009a90:	6922      	ldr	r2, [r4, #16]
 8009a92:	6022      	str	r2, [r4, #0]
 8009a94:	d504      	bpl.n	8009aa0 <__sflush_r+0x7c>
 8009a96:	1c42      	adds	r2, r0, #1
 8009a98:	d101      	bne.n	8009a9e <__sflush_r+0x7a>
 8009a9a:	682b      	ldr	r3, [r5, #0]
 8009a9c:	b903      	cbnz	r3, 8009aa0 <__sflush_r+0x7c>
 8009a9e:	6560      	str	r0, [r4, #84]	; 0x54
 8009aa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009aa2:	602f      	str	r7, [r5, #0]
 8009aa4:	2900      	cmp	r1, #0
 8009aa6:	d0ca      	beq.n	8009a3e <__sflush_r+0x1a>
 8009aa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009aac:	4299      	cmp	r1, r3
 8009aae:	d002      	beq.n	8009ab6 <__sflush_r+0x92>
 8009ab0:	4628      	mov	r0, r5
 8009ab2:	f7ff fa4b 	bl	8008f4c <_free_r>
 8009ab6:	2000      	movs	r0, #0
 8009ab8:	6360      	str	r0, [r4, #52]	; 0x34
 8009aba:	e7c1      	b.n	8009a40 <__sflush_r+0x1c>
 8009abc:	6a21      	ldr	r1, [r4, #32]
 8009abe:	2301      	movs	r3, #1
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	47b0      	blx	r6
 8009ac4:	1c41      	adds	r1, r0, #1
 8009ac6:	d1c7      	bne.n	8009a58 <__sflush_r+0x34>
 8009ac8:	682b      	ldr	r3, [r5, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d0c4      	beq.n	8009a58 <__sflush_r+0x34>
 8009ace:	2b1d      	cmp	r3, #29
 8009ad0:	d001      	beq.n	8009ad6 <__sflush_r+0xb2>
 8009ad2:	2b16      	cmp	r3, #22
 8009ad4:	d101      	bne.n	8009ada <__sflush_r+0xb6>
 8009ad6:	602f      	str	r7, [r5, #0]
 8009ad8:	e7b1      	b.n	8009a3e <__sflush_r+0x1a>
 8009ada:	89a3      	ldrh	r3, [r4, #12]
 8009adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ae0:	81a3      	strh	r3, [r4, #12]
 8009ae2:	e7ad      	b.n	8009a40 <__sflush_r+0x1c>
 8009ae4:	690f      	ldr	r7, [r1, #16]
 8009ae6:	2f00      	cmp	r7, #0
 8009ae8:	d0a9      	beq.n	8009a3e <__sflush_r+0x1a>
 8009aea:	0793      	lsls	r3, r2, #30
 8009aec:	680e      	ldr	r6, [r1, #0]
 8009aee:	bf08      	it	eq
 8009af0:	694b      	ldreq	r3, [r1, #20]
 8009af2:	600f      	str	r7, [r1, #0]
 8009af4:	bf18      	it	ne
 8009af6:	2300      	movne	r3, #0
 8009af8:	eba6 0807 	sub.w	r8, r6, r7
 8009afc:	608b      	str	r3, [r1, #8]
 8009afe:	f1b8 0f00 	cmp.w	r8, #0
 8009b02:	dd9c      	ble.n	8009a3e <__sflush_r+0x1a>
 8009b04:	6a21      	ldr	r1, [r4, #32]
 8009b06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b08:	4643      	mov	r3, r8
 8009b0a:	463a      	mov	r2, r7
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	47b0      	blx	r6
 8009b10:	2800      	cmp	r0, #0
 8009b12:	dc06      	bgt.n	8009b22 <__sflush_r+0xfe>
 8009b14:	89a3      	ldrh	r3, [r4, #12]
 8009b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b1a:	81a3      	strh	r3, [r4, #12]
 8009b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b20:	e78e      	b.n	8009a40 <__sflush_r+0x1c>
 8009b22:	4407      	add	r7, r0
 8009b24:	eba8 0800 	sub.w	r8, r8, r0
 8009b28:	e7e9      	b.n	8009afe <__sflush_r+0xda>
 8009b2a:	bf00      	nop
 8009b2c:	20400001 	.word	0x20400001

08009b30 <_fflush_r>:
 8009b30:	b538      	push	{r3, r4, r5, lr}
 8009b32:	690b      	ldr	r3, [r1, #16]
 8009b34:	4605      	mov	r5, r0
 8009b36:	460c      	mov	r4, r1
 8009b38:	b913      	cbnz	r3, 8009b40 <_fflush_r+0x10>
 8009b3a:	2500      	movs	r5, #0
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	bd38      	pop	{r3, r4, r5, pc}
 8009b40:	b118      	cbz	r0, 8009b4a <_fflush_r+0x1a>
 8009b42:	6983      	ldr	r3, [r0, #24]
 8009b44:	b90b      	cbnz	r3, 8009b4a <_fflush_r+0x1a>
 8009b46:	f000 f887 	bl	8009c58 <__sinit>
 8009b4a:	4b14      	ldr	r3, [pc, #80]	; (8009b9c <_fflush_r+0x6c>)
 8009b4c:	429c      	cmp	r4, r3
 8009b4e:	d11b      	bne.n	8009b88 <_fflush_r+0x58>
 8009b50:	686c      	ldr	r4, [r5, #4]
 8009b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d0ef      	beq.n	8009b3a <_fflush_r+0xa>
 8009b5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b5c:	07d0      	lsls	r0, r2, #31
 8009b5e:	d404      	bmi.n	8009b6a <_fflush_r+0x3a>
 8009b60:	0599      	lsls	r1, r3, #22
 8009b62:	d402      	bmi.n	8009b6a <_fflush_r+0x3a>
 8009b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b66:	f000 f915 	bl	8009d94 <__retarget_lock_acquire_recursive>
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	4621      	mov	r1, r4
 8009b6e:	f7ff ff59 	bl	8009a24 <__sflush_r>
 8009b72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b74:	07da      	lsls	r2, r3, #31
 8009b76:	4605      	mov	r5, r0
 8009b78:	d4e0      	bmi.n	8009b3c <_fflush_r+0xc>
 8009b7a:	89a3      	ldrh	r3, [r4, #12]
 8009b7c:	059b      	lsls	r3, r3, #22
 8009b7e:	d4dd      	bmi.n	8009b3c <_fflush_r+0xc>
 8009b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b82:	f000 f908 	bl	8009d96 <__retarget_lock_release_recursive>
 8009b86:	e7d9      	b.n	8009b3c <_fflush_r+0xc>
 8009b88:	4b05      	ldr	r3, [pc, #20]	; (8009ba0 <_fflush_r+0x70>)
 8009b8a:	429c      	cmp	r4, r3
 8009b8c:	d101      	bne.n	8009b92 <_fflush_r+0x62>
 8009b8e:	68ac      	ldr	r4, [r5, #8]
 8009b90:	e7df      	b.n	8009b52 <_fflush_r+0x22>
 8009b92:	4b04      	ldr	r3, [pc, #16]	; (8009ba4 <_fflush_r+0x74>)
 8009b94:	429c      	cmp	r4, r3
 8009b96:	bf08      	it	eq
 8009b98:	68ec      	ldreq	r4, [r5, #12]
 8009b9a:	e7da      	b.n	8009b52 <_fflush_r+0x22>
 8009b9c:	0800d6b8 	.word	0x0800d6b8
 8009ba0:	0800d6d8 	.word	0x0800d6d8
 8009ba4:	0800d698 	.word	0x0800d698

08009ba8 <std>:
 8009ba8:	2300      	movs	r3, #0
 8009baa:	b510      	push	{r4, lr}
 8009bac:	4604      	mov	r4, r0
 8009bae:	e9c0 3300 	strd	r3, r3, [r0]
 8009bb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bb6:	6083      	str	r3, [r0, #8]
 8009bb8:	8181      	strh	r1, [r0, #12]
 8009bba:	6643      	str	r3, [r0, #100]	; 0x64
 8009bbc:	81c2      	strh	r2, [r0, #14]
 8009bbe:	6183      	str	r3, [r0, #24]
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	2208      	movs	r2, #8
 8009bc4:	305c      	adds	r0, #92	; 0x5c
 8009bc6:	f7ff f9b9 	bl	8008f3c <memset>
 8009bca:	4b05      	ldr	r3, [pc, #20]	; (8009be0 <std+0x38>)
 8009bcc:	6263      	str	r3, [r4, #36]	; 0x24
 8009bce:	4b05      	ldr	r3, [pc, #20]	; (8009be4 <std+0x3c>)
 8009bd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009bd2:	4b05      	ldr	r3, [pc, #20]	; (8009be8 <std+0x40>)
 8009bd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009bd6:	4b05      	ldr	r3, [pc, #20]	; (8009bec <std+0x44>)
 8009bd8:	6224      	str	r4, [r4, #32]
 8009bda:	6323      	str	r3, [r4, #48]	; 0x30
 8009bdc:	bd10      	pop	{r4, pc}
 8009bde:	bf00      	nop
 8009be0:	08009eed 	.word	0x08009eed
 8009be4:	08009f0f 	.word	0x08009f0f
 8009be8:	08009f47 	.word	0x08009f47
 8009bec:	08009f6b 	.word	0x08009f6b

08009bf0 <_cleanup_r>:
 8009bf0:	4901      	ldr	r1, [pc, #4]	; (8009bf8 <_cleanup_r+0x8>)
 8009bf2:	f000 b8af 	b.w	8009d54 <_fwalk_reent>
 8009bf6:	bf00      	nop
 8009bf8:	08009b31 	.word	0x08009b31

08009bfc <__sfmoreglue>:
 8009bfc:	b570      	push	{r4, r5, r6, lr}
 8009bfe:	2268      	movs	r2, #104	; 0x68
 8009c00:	1e4d      	subs	r5, r1, #1
 8009c02:	4355      	muls	r5, r2
 8009c04:	460e      	mov	r6, r1
 8009c06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c0a:	f7ff fa0b 	bl	8009024 <_malloc_r>
 8009c0e:	4604      	mov	r4, r0
 8009c10:	b140      	cbz	r0, 8009c24 <__sfmoreglue+0x28>
 8009c12:	2100      	movs	r1, #0
 8009c14:	e9c0 1600 	strd	r1, r6, [r0]
 8009c18:	300c      	adds	r0, #12
 8009c1a:	60a0      	str	r0, [r4, #8]
 8009c1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c20:	f7ff f98c 	bl	8008f3c <memset>
 8009c24:	4620      	mov	r0, r4
 8009c26:	bd70      	pop	{r4, r5, r6, pc}

08009c28 <__sfp_lock_acquire>:
 8009c28:	4801      	ldr	r0, [pc, #4]	; (8009c30 <__sfp_lock_acquire+0x8>)
 8009c2a:	f000 b8b3 	b.w	8009d94 <__retarget_lock_acquire_recursive>
 8009c2e:	bf00      	nop
 8009c30:	200007f5 	.word	0x200007f5

08009c34 <__sfp_lock_release>:
 8009c34:	4801      	ldr	r0, [pc, #4]	; (8009c3c <__sfp_lock_release+0x8>)
 8009c36:	f000 b8ae 	b.w	8009d96 <__retarget_lock_release_recursive>
 8009c3a:	bf00      	nop
 8009c3c:	200007f5 	.word	0x200007f5

08009c40 <__sinit_lock_acquire>:
 8009c40:	4801      	ldr	r0, [pc, #4]	; (8009c48 <__sinit_lock_acquire+0x8>)
 8009c42:	f000 b8a7 	b.w	8009d94 <__retarget_lock_acquire_recursive>
 8009c46:	bf00      	nop
 8009c48:	200007f6 	.word	0x200007f6

08009c4c <__sinit_lock_release>:
 8009c4c:	4801      	ldr	r0, [pc, #4]	; (8009c54 <__sinit_lock_release+0x8>)
 8009c4e:	f000 b8a2 	b.w	8009d96 <__retarget_lock_release_recursive>
 8009c52:	bf00      	nop
 8009c54:	200007f6 	.word	0x200007f6

08009c58 <__sinit>:
 8009c58:	b510      	push	{r4, lr}
 8009c5a:	4604      	mov	r4, r0
 8009c5c:	f7ff fff0 	bl	8009c40 <__sinit_lock_acquire>
 8009c60:	69a3      	ldr	r3, [r4, #24]
 8009c62:	b11b      	cbz	r3, 8009c6c <__sinit+0x14>
 8009c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c68:	f7ff bff0 	b.w	8009c4c <__sinit_lock_release>
 8009c6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c70:	6523      	str	r3, [r4, #80]	; 0x50
 8009c72:	4b13      	ldr	r3, [pc, #76]	; (8009cc0 <__sinit+0x68>)
 8009c74:	4a13      	ldr	r2, [pc, #76]	; (8009cc4 <__sinit+0x6c>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c7a:	42a3      	cmp	r3, r4
 8009c7c:	bf04      	itt	eq
 8009c7e:	2301      	moveq	r3, #1
 8009c80:	61a3      	streq	r3, [r4, #24]
 8009c82:	4620      	mov	r0, r4
 8009c84:	f000 f820 	bl	8009cc8 <__sfp>
 8009c88:	6060      	str	r0, [r4, #4]
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	f000 f81c 	bl	8009cc8 <__sfp>
 8009c90:	60a0      	str	r0, [r4, #8]
 8009c92:	4620      	mov	r0, r4
 8009c94:	f000 f818 	bl	8009cc8 <__sfp>
 8009c98:	2200      	movs	r2, #0
 8009c9a:	60e0      	str	r0, [r4, #12]
 8009c9c:	2104      	movs	r1, #4
 8009c9e:	6860      	ldr	r0, [r4, #4]
 8009ca0:	f7ff ff82 	bl	8009ba8 <std>
 8009ca4:	68a0      	ldr	r0, [r4, #8]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	2109      	movs	r1, #9
 8009caa:	f7ff ff7d 	bl	8009ba8 <std>
 8009cae:	68e0      	ldr	r0, [r4, #12]
 8009cb0:	2202      	movs	r2, #2
 8009cb2:	2112      	movs	r1, #18
 8009cb4:	f7ff ff78 	bl	8009ba8 <std>
 8009cb8:	2301      	movs	r3, #1
 8009cba:	61a3      	str	r3, [r4, #24]
 8009cbc:	e7d2      	b.n	8009c64 <__sinit+0xc>
 8009cbe:	bf00      	nop
 8009cc0:	0800d5b0 	.word	0x0800d5b0
 8009cc4:	08009bf1 	.word	0x08009bf1

08009cc8 <__sfp>:
 8009cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cca:	4607      	mov	r7, r0
 8009ccc:	f7ff ffac 	bl	8009c28 <__sfp_lock_acquire>
 8009cd0:	4b1e      	ldr	r3, [pc, #120]	; (8009d4c <__sfp+0x84>)
 8009cd2:	681e      	ldr	r6, [r3, #0]
 8009cd4:	69b3      	ldr	r3, [r6, #24]
 8009cd6:	b913      	cbnz	r3, 8009cde <__sfp+0x16>
 8009cd8:	4630      	mov	r0, r6
 8009cda:	f7ff ffbd 	bl	8009c58 <__sinit>
 8009cde:	3648      	adds	r6, #72	; 0x48
 8009ce0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	d503      	bpl.n	8009cf0 <__sfp+0x28>
 8009ce8:	6833      	ldr	r3, [r6, #0]
 8009cea:	b30b      	cbz	r3, 8009d30 <__sfp+0x68>
 8009cec:	6836      	ldr	r6, [r6, #0]
 8009cee:	e7f7      	b.n	8009ce0 <__sfp+0x18>
 8009cf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009cf4:	b9d5      	cbnz	r5, 8009d2c <__sfp+0x64>
 8009cf6:	4b16      	ldr	r3, [pc, #88]	; (8009d50 <__sfp+0x88>)
 8009cf8:	60e3      	str	r3, [r4, #12]
 8009cfa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009cfe:	6665      	str	r5, [r4, #100]	; 0x64
 8009d00:	f000 f847 	bl	8009d92 <__retarget_lock_init_recursive>
 8009d04:	f7ff ff96 	bl	8009c34 <__sfp_lock_release>
 8009d08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d10:	6025      	str	r5, [r4, #0]
 8009d12:	61a5      	str	r5, [r4, #24]
 8009d14:	2208      	movs	r2, #8
 8009d16:	4629      	mov	r1, r5
 8009d18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d1c:	f7ff f90e 	bl	8008f3c <memset>
 8009d20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d28:	4620      	mov	r0, r4
 8009d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d2c:	3468      	adds	r4, #104	; 0x68
 8009d2e:	e7d9      	b.n	8009ce4 <__sfp+0x1c>
 8009d30:	2104      	movs	r1, #4
 8009d32:	4638      	mov	r0, r7
 8009d34:	f7ff ff62 	bl	8009bfc <__sfmoreglue>
 8009d38:	4604      	mov	r4, r0
 8009d3a:	6030      	str	r0, [r6, #0]
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	d1d5      	bne.n	8009cec <__sfp+0x24>
 8009d40:	f7ff ff78 	bl	8009c34 <__sfp_lock_release>
 8009d44:	230c      	movs	r3, #12
 8009d46:	603b      	str	r3, [r7, #0]
 8009d48:	e7ee      	b.n	8009d28 <__sfp+0x60>
 8009d4a:	bf00      	nop
 8009d4c:	0800d5b0 	.word	0x0800d5b0
 8009d50:	ffff0001 	.word	0xffff0001

08009d54 <_fwalk_reent>:
 8009d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d58:	4606      	mov	r6, r0
 8009d5a:	4688      	mov	r8, r1
 8009d5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d60:	2700      	movs	r7, #0
 8009d62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d66:	f1b9 0901 	subs.w	r9, r9, #1
 8009d6a:	d505      	bpl.n	8009d78 <_fwalk_reent+0x24>
 8009d6c:	6824      	ldr	r4, [r4, #0]
 8009d6e:	2c00      	cmp	r4, #0
 8009d70:	d1f7      	bne.n	8009d62 <_fwalk_reent+0xe>
 8009d72:	4638      	mov	r0, r7
 8009d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d78:	89ab      	ldrh	r3, [r5, #12]
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d907      	bls.n	8009d8e <_fwalk_reent+0x3a>
 8009d7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d82:	3301      	adds	r3, #1
 8009d84:	d003      	beq.n	8009d8e <_fwalk_reent+0x3a>
 8009d86:	4629      	mov	r1, r5
 8009d88:	4630      	mov	r0, r6
 8009d8a:	47c0      	blx	r8
 8009d8c:	4307      	orrs	r7, r0
 8009d8e:	3568      	adds	r5, #104	; 0x68
 8009d90:	e7e9      	b.n	8009d66 <_fwalk_reent+0x12>

08009d92 <__retarget_lock_init_recursive>:
 8009d92:	4770      	bx	lr

08009d94 <__retarget_lock_acquire_recursive>:
 8009d94:	4770      	bx	lr

08009d96 <__retarget_lock_release_recursive>:
 8009d96:	4770      	bx	lr

08009d98 <__swhatbuf_r>:
 8009d98:	b570      	push	{r4, r5, r6, lr}
 8009d9a:	460e      	mov	r6, r1
 8009d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009da0:	2900      	cmp	r1, #0
 8009da2:	b096      	sub	sp, #88	; 0x58
 8009da4:	4614      	mov	r4, r2
 8009da6:	461d      	mov	r5, r3
 8009da8:	da08      	bge.n	8009dbc <__swhatbuf_r+0x24>
 8009daa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009dae:	2200      	movs	r2, #0
 8009db0:	602a      	str	r2, [r5, #0]
 8009db2:	061a      	lsls	r2, r3, #24
 8009db4:	d410      	bmi.n	8009dd8 <__swhatbuf_r+0x40>
 8009db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dba:	e00e      	b.n	8009dda <__swhatbuf_r+0x42>
 8009dbc:	466a      	mov	r2, sp
 8009dbe:	f000 f8fb 	bl	8009fb8 <_fstat_r>
 8009dc2:	2800      	cmp	r0, #0
 8009dc4:	dbf1      	blt.n	8009daa <__swhatbuf_r+0x12>
 8009dc6:	9a01      	ldr	r2, [sp, #4]
 8009dc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009dcc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009dd0:	425a      	negs	r2, r3
 8009dd2:	415a      	adcs	r2, r3
 8009dd4:	602a      	str	r2, [r5, #0]
 8009dd6:	e7ee      	b.n	8009db6 <__swhatbuf_r+0x1e>
 8009dd8:	2340      	movs	r3, #64	; 0x40
 8009dda:	2000      	movs	r0, #0
 8009ddc:	6023      	str	r3, [r4, #0]
 8009dde:	b016      	add	sp, #88	; 0x58
 8009de0:	bd70      	pop	{r4, r5, r6, pc}
	...

08009de4 <__smakebuf_r>:
 8009de4:	898b      	ldrh	r3, [r1, #12]
 8009de6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009de8:	079d      	lsls	r5, r3, #30
 8009dea:	4606      	mov	r6, r0
 8009dec:	460c      	mov	r4, r1
 8009dee:	d507      	bpl.n	8009e00 <__smakebuf_r+0x1c>
 8009df0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009df4:	6023      	str	r3, [r4, #0]
 8009df6:	6123      	str	r3, [r4, #16]
 8009df8:	2301      	movs	r3, #1
 8009dfa:	6163      	str	r3, [r4, #20]
 8009dfc:	b002      	add	sp, #8
 8009dfe:	bd70      	pop	{r4, r5, r6, pc}
 8009e00:	ab01      	add	r3, sp, #4
 8009e02:	466a      	mov	r2, sp
 8009e04:	f7ff ffc8 	bl	8009d98 <__swhatbuf_r>
 8009e08:	9900      	ldr	r1, [sp, #0]
 8009e0a:	4605      	mov	r5, r0
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	f7ff f909 	bl	8009024 <_malloc_r>
 8009e12:	b948      	cbnz	r0, 8009e28 <__smakebuf_r+0x44>
 8009e14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e18:	059a      	lsls	r2, r3, #22
 8009e1a:	d4ef      	bmi.n	8009dfc <__smakebuf_r+0x18>
 8009e1c:	f023 0303 	bic.w	r3, r3, #3
 8009e20:	f043 0302 	orr.w	r3, r3, #2
 8009e24:	81a3      	strh	r3, [r4, #12]
 8009e26:	e7e3      	b.n	8009df0 <__smakebuf_r+0xc>
 8009e28:	4b0d      	ldr	r3, [pc, #52]	; (8009e60 <__smakebuf_r+0x7c>)
 8009e2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e2c:	89a3      	ldrh	r3, [r4, #12]
 8009e2e:	6020      	str	r0, [r4, #0]
 8009e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e34:	81a3      	strh	r3, [r4, #12]
 8009e36:	9b00      	ldr	r3, [sp, #0]
 8009e38:	6163      	str	r3, [r4, #20]
 8009e3a:	9b01      	ldr	r3, [sp, #4]
 8009e3c:	6120      	str	r0, [r4, #16]
 8009e3e:	b15b      	cbz	r3, 8009e58 <__smakebuf_r+0x74>
 8009e40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e44:	4630      	mov	r0, r6
 8009e46:	f000 f8c9 	bl	8009fdc <_isatty_r>
 8009e4a:	b128      	cbz	r0, 8009e58 <__smakebuf_r+0x74>
 8009e4c:	89a3      	ldrh	r3, [r4, #12]
 8009e4e:	f023 0303 	bic.w	r3, r3, #3
 8009e52:	f043 0301 	orr.w	r3, r3, #1
 8009e56:	81a3      	strh	r3, [r4, #12]
 8009e58:	89a0      	ldrh	r0, [r4, #12]
 8009e5a:	4305      	orrs	r5, r0
 8009e5c:	81a5      	strh	r5, [r4, #12]
 8009e5e:	e7cd      	b.n	8009dfc <__smakebuf_r+0x18>
 8009e60:	08009bf1 	.word	0x08009bf1

08009e64 <_raise_r>:
 8009e64:	291f      	cmp	r1, #31
 8009e66:	b538      	push	{r3, r4, r5, lr}
 8009e68:	4604      	mov	r4, r0
 8009e6a:	460d      	mov	r5, r1
 8009e6c:	d904      	bls.n	8009e78 <_raise_r+0x14>
 8009e6e:	2316      	movs	r3, #22
 8009e70:	6003      	str	r3, [r0, #0]
 8009e72:	f04f 30ff 	mov.w	r0, #4294967295
 8009e76:	bd38      	pop	{r3, r4, r5, pc}
 8009e78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e7a:	b112      	cbz	r2, 8009e82 <_raise_r+0x1e>
 8009e7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e80:	b94b      	cbnz	r3, 8009e96 <_raise_r+0x32>
 8009e82:	4620      	mov	r0, r4
 8009e84:	f000 f830 	bl	8009ee8 <_getpid_r>
 8009e88:	462a      	mov	r2, r5
 8009e8a:	4601      	mov	r1, r0
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e92:	f000 b817 	b.w	8009ec4 <_kill_r>
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d00a      	beq.n	8009eb0 <_raise_r+0x4c>
 8009e9a:	1c59      	adds	r1, r3, #1
 8009e9c:	d103      	bne.n	8009ea6 <_raise_r+0x42>
 8009e9e:	2316      	movs	r3, #22
 8009ea0:	6003      	str	r3, [r0, #0]
 8009ea2:	2001      	movs	r0, #1
 8009ea4:	e7e7      	b.n	8009e76 <_raise_r+0x12>
 8009ea6:	2400      	movs	r4, #0
 8009ea8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009eac:	4628      	mov	r0, r5
 8009eae:	4798      	blx	r3
 8009eb0:	2000      	movs	r0, #0
 8009eb2:	e7e0      	b.n	8009e76 <_raise_r+0x12>

08009eb4 <raise>:
 8009eb4:	4b02      	ldr	r3, [pc, #8]	; (8009ec0 <raise+0xc>)
 8009eb6:	4601      	mov	r1, r0
 8009eb8:	6818      	ldr	r0, [r3, #0]
 8009eba:	f7ff bfd3 	b.w	8009e64 <_raise_r>
 8009ebe:	bf00      	nop
 8009ec0:	20000060 	.word	0x20000060

08009ec4 <_kill_r>:
 8009ec4:	b538      	push	{r3, r4, r5, lr}
 8009ec6:	4d07      	ldr	r5, [pc, #28]	; (8009ee4 <_kill_r+0x20>)
 8009ec8:	2300      	movs	r3, #0
 8009eca:	4604      	mov	r4, r0
 8009ecc:	4608      	mov	r0, r1
 8009ece:	4611      	mov	r1, r2
 8009ed0:	602b      	str	r3, [r5, #0]
 8009ed2:	f7f8 fb0d 	bl	80024f0 <_kill>
 8009ed6:	1c43      	adds	r3, r0, #1
 8009ed8:	d102      	bne.n	8009ee0 <_kill_r+0x1c>
 8009eda:	682b      	ldr	r3, [r5, #0]
 8009edc:	b103      	cbz	r3, 8009ee0 <_kill_r+0x1c>
 8009ede:	6023      	str	r3, [r4, #0]
 8009ee0:	bd38      	pop	{r3, r4, r5, pc}
 8009ee2:	bf00      	nop
 8009ee4:	200007f0 	.word	0x200007f0

08009ee8 <_getpid_r>:
 8009ee8:	f7f8 bafa 	b.w	80024e0 <_getpid>

08009eec <__sread>:
 8009eec:	b510      	push	{r4, lr}
 8009eee:	460c      	mov	r4, r1
 8009ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ef4:	f000 f894 	bl	800a020 <_read_r>
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	bfab      	itete	ge
 8009efc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009efe:	89a3      	ldrhlt	r3, [r4, #12]
 8009f00:	181b      	addge	r3, r3, r0
 8009f02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f06:	bfac      	ite	ge
 8009f08:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f0a:	81a3      	strhlt	r3, [r4, #12]
 8009f0c:	bd10      	pop	{r4, pc}

08009f0e <__swrite>:
 8009f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f12:	461f      	mov	r7, r3
 8009f14:	898b      	ldrh	r3, [r1, #12]
 8009f16:	05db      	lsls	r3, r3, #23
 8009f18:	4605      	mov	r5, r0
 8009f1a:	460c      	mov	r4, r1
 8009f1c:	4616      	mov	r6, r2
 8009f1e:	d505      	bpl.n	8009f2c <__swrite+0x1e>
 8009f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f24:	2302      	movs	r3, #2
 8009f26:	2200      	movs	r2, #0
 8009f28:	f000 f868 	bl	8009ffc <_lseek_r>
 8009f2c:	89a3      	ldrh	r3, [r4, #12]
 8009f2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f36:	81a3      	strh	r3, [r4, #12]
 8009f38:	4632      	mov	r2, r6
 8009f3a:	463b      	mov	r3, r7
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f42:	f000 b817 	b.w	8009f74 <_write_r>

08009f46 <__sseek>:
 8009f46:	b510      	push	{r4, lr}
 8009f48:	460c      	mov	r4, r1
 8009f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f4e:	f000 f855 	bl	8009ffc <_lseek_r>
 8009f52:	1c43      	adds	r3, r0, #1
 8009f54:	89a3      	ldrh	r3, [r4, #12]
 8009f56:	bf15      	itete	ne
 8009f58:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f62:	81a3      	strheq	r3, [r4, #12]
 8009f64:	bf18      	it	ne
 8009f66:	81a3      	strhne	r3, [r4, #12]
 8009f68:	bd10      	pop	{r4, pc}

08009f6a <__sclose>:
 8009f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f6e:	f000 b813 	b.w	8009f98 <_close_r>
	...

08009f74 <_write_r>:
 8009f74:	b538      	push	{r3, r4, r5, lr}
 8009f76:	4d07      	ldr	r5, [pc, #28]	; (8009f94 <_write_r+0x20>)
 8009f78:	4604      	mov	r4, r0
 8009f7a:	4608      	mov	r0, r1
 8009f7c:	4611      	mov	r1, r2
 8009f7e:	2200      	movs	r2, #0
 8009f80:	602a      	str	r2, [r5, #0]
 8009f82:	461a      	mov	r2, r3
 8009f84:	f7f8 faeb 	bl	800255e <_write>
 8009f88:	1c43      	adds	r3, r0, #1
 8009f8a:	d102      	bne.n	8009f92 <_write_r+0x1e>
 8009f8c:	682b      	ldr	r3, [r5, #0]
 8009f8e:	b103      	cbz	r3, 8009f92 <_write_r+0x1e>
 8009f90:	6023      	str	r3, [r4, #0]
 8009f92:	bd38      	pop	{r3, r4, r5, pc}
 8009f94:	200007f0 	.word	0x200007f0

08009f98 <_close_r>:
 8009f98:	b538      	push	{r3, r4, r5, lr}
 8009f9a:	4d06      	ldr	r5, [pc, #24]	; (8009fb4 <_close_r+0x1c>)
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	4608      	mov	r0, r1
 8009fa2:	602b      	str	r3, [r5, #0]
 8009fa4:	f7f8 faf7 	bl	8002596 <_close>
 8009fa8:	1c43      	adds	r3, r0, #1
 8009faa:	d102      	bne.n	8009fb2 <_close_r+0x1a>
 8009fac:	682b      	ldr	r3, [r5, #0]
 8009fae:	b103      	cbz	r3, 8009fb2 <_close_r+0x1a>
 8009fb0:	6023      	str	r3, [r4, #0]
 8009fb2:	bd38      	pop	{r3, r4, r5, pc}
 8009fb4:	200007f0 	.word	0x200007f0

08009fb8 <_fstat_r>:
 8009fb8:	b538      	push	{r3, r4, r5, lr}
 8009fba:	4d07      	ldr	r5, [pc, #28]	; (8009fd8 <_fstat_r+0x20>)
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	4604      	mov	r4, r0
 8009fc0:	4608      	mov	r0, r1
 8009fc2:	4611      	mov	r1, r2
 8009fc4:	602b      	str	r3, [r5, #0]
 8009fc6:	f7f8 faf2 	bl	80025ae <_fstat>
 8009fca:	1c43      	adds	r3, r0, #1
 8009fcc:	d102      	bne.n	8009fd4 <_fstat_r+0x1c>
 8009fce:	682b      	ldr	r3, [r5, #0]
 8009fd0:	b103      	cbz	r3, 8009fd4 <_fstat_r+0x1c>
 8009fd2:	6023      	str	r3, [r4, #0]
 8009fd4:	bd38      	pop	{r3, r4, r5, pc}
 8009fd6:	bf00      	nop
 8009fd8:	200007f0 	.word	0x200007f0

08009fdc <_isatty_r>:
 8009fdc:	b538      	push	{r3, r4, r5, lr}
 8009fde:	4d06      	ldr	r5, [pc, #24]	; (8009ff8 <_isatty_r+0x1c>)
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	4604      	mov	r4, r0
 8009fe4:	4608      	mov	r0, r1
 8009fe6:	602b      	str	r3, [r5, #0]
 8009fe8:	f7f8 faf1 	bl	80025ce <_isatty>
 8009fec:	1c43      	adds	r3, r0, #1
 8009fee:	d102      	bne.n	8009ff6 <_isatty_r+0x1a>
 8009ff0:	682b      	ldr	r3, [r5, #0]
 8009ff2:	b103      	cbz	r3, 8009ff6 <_isatty_r+0x1a>
 8009ff4:	6023      	str	r3, [r4, #0]
 8009ff6:	bd38      	pop	{r3, r4, r5, pc}
 8009ff8:	200007f0 	.word	0x200007f0

08009ffc <_lseek_r>:
 8009ffc:	b538      	push	{r3, r4, r5, lr}
 8009ffe:	4d07      	ldr	r5, [pc, #28]	; (800a01c <_lseek_r+0x20>)
 800a000:	4604      	mov	r4, r0
 800a002:	4608      	mov	r0, r1
 800a004:	4611      	mov	r1, r2
 800a006:	2200      	movs	r2, #0
 800a008:	602a      	str	r2, [r5, #0]
 800a00a:	461a      	mov	r2, r3
 800a00c:	f7f8 faea 	bl	80025e4 <_lseek>
 800a010:	1c43      	adds	r3, r0, #1
 800a012:	d102      	bne.n	800a01a <_lseek_r+0x1e>
 800a014:	682b      	ldr	r3, [r5, #0]
 800a016:	b103      	cbz	r3, 800a01a <_lseek_r+0x1e>
 800a018:	6023      	str	r3, [r4, #0]
 800a01a:	bd38      	pop	{r3, r4, r5, pc}
 800a01c:	200007f0 	.word	0x200007f0

0800a020 <_read_r>:
 800a020:	b538      	push	{r3, r4, r5, lr}
 800a022:	4d07      	ldr	r5, [pc, #28]	; (800a040 <_read_r+0x20>)
 800a024:	4604      	mov	r4, r0
 800a026:	4608      	mov	r0, r1
 800a028:	4611      	mov	r1, r2
 800a02a:	2200      	movs	r2, #0
 800a02c:	602a      	str	r2, [r5, #0]
 800a02e:	461a      	mov	r2, r3
 800a030:	f7f8 fa78 	bl	8002524 <_read>
 800a034:	1c43      	adds	r3, r0, #1
 800a036:	d102      	bne.n	800a03e <_read_r+0x1e>
 800a038:	682b      	ldr	r3, [r5, #0]
 800a03a:	b103      	cbz	r3, 800a03e <_read_r+0x1e>
 800a03c:	6023      	str	r3, [r4, #0]
 800a03e:	bd38      	pop	{r3, r4, r5, pc}
 800a040:	200007f0 	.word	0x200007f0

0800a044 <_init>:
 800a044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a046:	bf00      	nop
 800a048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a04a:	bc08      	pop	{r3}
 800a04c:	469e      	mov	lr, r3
 800a04e:	4770      	bx	lr

0800a050 <_fini>:
 800a050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a052:	bf00      	nop
 800a054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a056:	bc08      	pop	{r3}
 800a058:	469e      	mov	lr, r3
 800a05a:	4770      	bx	lr
