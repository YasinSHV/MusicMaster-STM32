
MusicMaster_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a24  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08006bac  08006bac  00016bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cd4  08006cd4  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08006cd4  08006cd4  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006cd4  08006cd4  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cd4  08006cd4  00016cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cd8  08006cd8  00016cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08006cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          000005e4  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000680  20000680  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019023  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c26  00000000  00000000  000390ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  0003bd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013b8  00000000  00000000  0003d170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e7e5  00000000  00000000  0003e528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019596  00000000  00000000  0005cd0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba061  00000000  00000000  000762a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00130304  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005794  00000000  00000000  00130354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000009c 	.word	0x2000009c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006b94 	.word	0x08006b94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a0 	.word	0x200000a0
 80001c4:	08006b94 	.word	0x08006b94

080001c8 <PWM_Start>:
//PWM BEGIN
TIM_HandleTypeDef *pwm_timer = &htim2;
uint32_t pwm_channel = TIM_CHANNEL_1;
uint16_t _volume = 10;

void PWM_Start() {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <PWM_Start+0x18>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a04      	ldr	r2, [pc, #16]	; (80001e4 <PWM_Start+0x1c>)
 80001d2:	6812      	ldr	r2, [r2, #0]
 80001d4:	4611      	mov	r1, r2
 80001d6:	4618      	mov	r0, r3
 80001d8:	f003 ffb2 	bl	8004140 <HAL_TIM_PWM_Start>
}
 80001dc:	bf00      	nop
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	2000004c 	.word	0x2000004c
 80001e4:	20000610 	.word	0x20000610

080001e8 <PWM_Stop>:
void PWM_Stop() {
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(pwm_timer, pwm_channel);
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <PWM_Stop+0x18>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a04      	ldr	r2, [pc, #16]	; (8000204 <PWM_Stop+0x1c>)
 80001f2:	6812      	ldr	r2, [r2, #0]
 80001f4:	4611      	mov	r1, r2
 80001f6:	4618      	mov	r0, r3
 80001f8:	f004 f8a2 	bl	8004340 <HAL_TIM_PWM_Stop>
}
 80001fc:	bf00      	nop
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	2000004c 	.word	0x2000004c
 8000204:	20000610 	.word	0x20000610

08000208 <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) //(1-20000), (0-1000)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b088      	sub	sp, #32
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	460a      	mov	r2, r1
 8000212:	80fb      	strh	r3, [r7, #6]
 8000214:	4613      	mov	r3, r2
 8000216:	80bb      	strh	r3, [r7, #4]
	if (pwm_freq == 0 || pwm_freq > 20000)
 8000218:	88fb      	ldrh	r3, [r7, #6]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d004      	beq.n	8000228 <PWM_Change_Tone+0x20>
 800021e:	88fb      	ldrh	r3, [r7, #6]
 8000220:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000224:	4293      	cmp	r3, r2
 8000226:	d937      	bls.n	8000298 <PWM_Change_Tone+0x90>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 8000228:	4b52      	ldr	r3, [pc, #328]	; (8000374 <PWM_Change_Tone+0x16c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d105      	bne.n	800023c <PWM_Change_Tone+0x34>
 8000230:	4b51      	ldr	r3, [pc, #324]	; (8000378 <PWM_Change_Tone+0x170>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2200      	movs	r2, #0
 8000238:	635a      	str	r2, [r3, #52]	; 0x34
 800023a:	e097      	b.n	800036c <PWM_Change_Tone+0x164>
 800023c:	4b4d      	ldr	r3, [pc, #308]	; (8000374 <PWM_Change_Tone+0x16c>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	2b04      	cmp	r3, #4
 8000242:	d105      	bne.n	8000250 <PWM_Change_Tone+0x48>
 8000244:	4b4c      	ldr	r3, [pc, #304]	; (8000378 <PWM_Change_Tone+0x170>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	2300      	movs	r3, #0
 800024c:	6393      	str	r3, [r2, #56]	; 0x38
 800024e:	e08d      	b.n	800036c <PWM_Change_Tone+0x164>
 8000250:	4b48      	ldr	r3, [pc, #288]	; (8000374 <PWM_Change_Tone+0x16c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2b08      	cmp	r3, #8
 8000256:	d105      	bne.n	8000264 <PWM_Change_Tone+0x5c>
 8000258:	4b47      	ldr	r3, [pc, #284]	; (8000378 <PWM_Change_Tone+0x170>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	681a      	ldr	r2, [r3, #0]
 800025e:	2300      	movs	r3, #0
 8000260:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000262:	e083      	b.n	800036c <PWM_Change_Tone+0x164>
 8000264:	4b43      	ldr	r3, [pc, #268]	; (8000374 <PWM_Change_Tone+0x16c>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	2b0c      	cmp	r3, #12
 800026a:	d105      	bne.n	8000278 <PWM_Change_Tone+0x70>
 800026c:	4b42      	ldr	r3, [pc, #264]	; (8000378 <PWM_Change_Tone+0x170>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	681a      	ldr	r2, [r3, #0]
 8000272:	2300      	movs	r3, #0
 8000274:	6413      	str	r3, [r2, #64]	; 0x40
 8000276:	e079      	b.n	800036c <PWM_Change_Tone+0x164>
 8000278:	4b3e      	ldr	r3, [pc, #248]	; (8000374 <PWM_Change_Tone+0x16c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b10      	cmp	r3, #16
 800027e:	d105      	bne.n	800028c <PWM_Change_Tone+0x84>
 8000280:	4b3d      	ldr	r3, [pc, #244]	; (8000378 <PWM_Change_Tone+0x170>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	2300      	movs	r3, #0
 8000288:	6593      	str	r3, [r2, #88]	; 0x58
 800028a:	e06f      	b.n	800036c <PWM_Change_Tone+0x164>
 800028c:	4b3a      	ldr	r3, [pc, #232]	; (8000378 <PWM_Change_Tone+0x170>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	2300      	movs	r3, #0
 8000294:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000296:	e069      	b.n	800036c <PWM_Change_Tone+0x164>
	else {
		const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 8000298:	f003 fb1a 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 800029c:	61f8      	str	r0, [r7, #28]

		const uint16_t prescaler = 1 + internal_clock_freq / pwm_freq / 60000;
 800029e:	88fb      	ldrh	r3, [r7, #6]
 80002a0:	69fa      	ldr	r2, [r7, #28]
 80002a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a6:	4a35      	ldr	r2, [pc, #212]	; (800037c <PWM_Change_Tone+0x174>)
 80002a8:	fba2 2303 	umull	r2, r3, r2, r3
 80002ac:	0b9b      	lsrs	r3, r3, #14
 80002ae:	b29b      	uxth	r3, r3
 80002b0:	3301      	adds	r3, #1
 80002b2:	837b      	strh	r3, [r7, #26]
		const uint32_t timer_clock = internal_clock_freq / prescaler;
 80002b4:	8b7b      	ldrh	r3, [r7, #26]
 80002b6:	69fa      	ldr	r2, [r7, #28]
 80002b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002bc:	617b      	str	r3, [r7, #20]
		const uint32_t period_cycles = timer_clock / pwm_freq;
 80002be:	88fb      	ldrh	r3, [r7, #6]
 80002c0:	697a      	ldr	r2, [r7, #20]
 80002c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80002c6:	613b      	str	r3, [r7, #16]
		const uint32_t puls_width = volume * period_cycles / 1000 / 2;
 80002c8:	88bb      	ldrh	r3, [r7, #4]
 80002ca:	693a      	ldr	r2, [r7, #16]
 80002cc:	fb02 f303 	mul.w	r3, r2, r3
 80002d0:	4a2b      	ldr	r2, [pc, #172]	; (8000380 <PWM_Change_Tone+0x178>)
 80002d2:	fba2 2303 	umull	r2, r3, r2, r3
 80002d6:	09db      	lsrs	r3, r3, #7
 80002d8:	60fb      	str	r3, [r7, #12]

		pwm_timer->Instance->PSC = prescaler - 1;
 80002da:	8b7b      	ldrh	r3, [r7, #26]
 80002dc:	1e5a      	subs	r2, r3, #1
 80002de:	4b26      	ldr	r3, [pc, #152]	; (8000378 <PWM_Change_Tone+0x170>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	629a      	str	r2, [r3, #40]	; 0x28
		pwm_timer->Instance->ARR = period_cycles - 1;
 80002e6:	4b24      	ldr	r3, [pc, #144]	; (8000378 <PWM_Change_Tone+0x170>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	693a      	ldr	r2, [r7, #16]
 80002ee:	3a01      	subs	r2, #1
 80002f0:	62da      	str	r2, [r3, #44]	; 0x2c
		pwm_timer->Instance->EGR = TIM_EGR_UG;
 80002f2:	4b21      	ldr	r3, [pc, #132]	; (8000378 <PWM_Change_Tone+0x170>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2201      	movs	r2, #1
 80002fa:	615a      	str	r2, [r3, #20]
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, puls_width);
 80002fc:	4b1d      	ldr	r3, [pc, #116]	; (8000374 <PWM_Change_Tone+0x16c>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d105      	bne.n	8000310 <PWM_Change_Tone+0x108>
 8000304:	4b1c      	ldr	r3, [pc, #112]	; (8000378 <PWM_Change_Tone+0x170>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	68fa      	ldr	r2, [r7, #12]
 800030c:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 800030e:	e02d      	b.n	800036c <PWM_Change_Tone+0x164>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, puls_width);
 8000310:	4b18      	ldr	r3, [pc, #96]	; (8000374 <PWM_Change_Tone+0x16c>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b04      	cmp	r3, #4
 8000316:	d105      	bne.n	8000324 <PWM_Change_Tone+0x11c>
 8000318:	4b17      	ldr	r3, [pc, #92]	; (8000378 <PWM_Change_Tone+0x170>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000322:	e023      	b.n	800036c <PWM_Change_Tone+0x164>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, puls_width);
 8000324:	4b13      	ldr	r3, [pc, #76]	; (8000374 <PWM_Change_Tone+0x16c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2b08      	cmp	r3, #8
 800032a:	d105      	bne.n	8000338 <PWM_Change_Tone+0x130>
 800032c:	4b12      	ldr	r3, [pc, #72]	; (8000378 <PWM_Change_Tone+0x170>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000336:	e019      	b.n	800036c <PWM_Change_Tone+0x164>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, puls_width);
 8000338:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <PWM_Change_Tone+0x16c>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b0c      	cmp	r3, #12
 800033e:	d105      	bne.n	800034c <PWM_Change_Tone+0x144>
 8000340:	4b0d      	ldr	r3, [pc, #52]	; (8000378 <PWM_Change_Tone+0x170>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	6413      	str	r3, [r2, #64]	; 0x40
}
 800034a:	e00f      	b.n	800036c <PWM_Change_Tone+0x164>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, puls_width);
 800034c:	4b09      	ldr	r3, [pc, #36]	; (8000374 <PWM_Change_Tone+0x16c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2b10      	cmp	r3, #16
 8000352:	d105      	bne.n	8000360 <PWM_Change_Tone+0x158>
 8000354:	4b08      	ldr	r3, [pc, #32]	; (8000378 <PWM_Change_Tone+0x170>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	6593      	str	r3, [r2, #88]	; 0x58
}
 800035e:	e005      	b.n	800036c <PWM_Change_Tone+0x164>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, puls_width);
 8000360:	4b05      	ldr	r3, [pc, #20]	; (8000378 <PWM_Change_Tone+0x170>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800036a:	e7ff      	b.n	800036c <PWM_Change_Tone+0x164>
 800036c:	bf00      	nop
 800036e:	3720      	adds	r7, #32
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20000610 	.word	0x20000610
 8000378:	2000004c 	.word	0x2000004c
 800037c:	45e7b273 	.word	0x45e7b273
 8000380:	10624dd3 	.word	0x10624dd3

08000384 <extractNumber>:
//PWM END

//UART BEGIN

void extractNumber(const uint8_t *data) {
 8000384:	b5b0      	push	{r4, r5, r7, lr}
 8000386:	b088      	sub	sp, #32
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	isCorrect = -1;
 800038c:	4b3d      	ldr	r3, [pc, #244]	; (8000484 <extractNumber+0x100>)
 800038e:	f04f 32ff 	mov.w	r2, #4294967295
 8000392:	601a      	str	r2, [r3, #0]
	// Extract the first four characters and convert them to integers
	char pass[19] = "PASS_CHANGED(XXXX)\n";
 8000394:	4b3c      	ldr	r3, [pc, #240]	; (8000488 <extractNumber+0x104>)
 8000396:	f107 0408 	add.w	r4, r7, #8
 800039a:	461d      	mov	r5, r3
 800039c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800039e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003a0:	682b      	ldr	r3, [r5, #0]
 80003a2:	461a      	mov	r2, r3
 80003a4:	8022      	strh	r2, [r4, #0]
 80003a6:	3402      	adds	r4, #2
 80003a8:	0c1b      	lsrs	r3, r3, #16
 80003aa:	7023      	strb	r3, [r4, #0]
	pass[13] = data[9];
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	3309      	adds	r3, #9
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	757b      	strb	r3, [r7, #21]
	pass[14] = data[10];
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	330a      	adds	r3, #10
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	75bb      	strb	r3, [r7, #22]
	pass[15] = data[11];
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	330b      	adds	r3, #11
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	75fb      	strb	r3, [r7, #23]
	pass[16] = data[12];
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	330c      	adds	r3, #12
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	763b      	strb	r3, [r7, #24]

	for (int i = 9; i < 13; i++) {
 80003cc:	2309      	movs	r3, #9
 80003ce:	61fb      	str	r3, [r7, #28]
 80003d0:	e037      	b.n	8000442 <extractNumber+0xbe>
		if (data[i] <= '9' && data[i] >= '0') {
 80003d2:	69fb      	ldr	r3, [r7, #28]
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	4413      	add	r3, r2
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	2b39      	cmp	r3, #57	; 0x39
 80003dc:	d814      	bhi.n	8000408 <extractNumber+0x84>
 80003de:	69fb      	ldr	r3, [r7, #28]
 80003e0:	687a      	ldr	r2, [r7, #4]
 80003e2:	4413      	add	r3, r2
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	2b2f      	cmp	r3, #47	; 0x2f
 80003e8:	d90e      	bls.n	8000408 <extractNumber+0x84>
			password[i - 9] = data[i] - '0';
 80003ea:	69fb      	ldr	r3, [r7, #28]
 80003ec:	687a      	ldr	r2, [r7, #4]
 80003ee:	4413      	add	r3, r2
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	461a      	mov	r2, r3
 80003f4:	69fb      	ldr	r3, [r7, #28]
 80003f6:	3b09      	subs	r3, #9
 80003f8:	3a30      	subs	r2, #48	; 0x30
 80003fa:	4924      	ldr	r1, [pc, #144]	; (800048c <extractNumber+0x108>)
 80003fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 9; i < 13; i++) {
 8000400:	69fb      	ldr	r3, [r7, #28]
 8000402:	3301      	adds	r3, #1
 8000404:	61fb      	str	r3, [r7, #28]
 8000406:	e01c      	b.n	8000442 <extractNumber+0xbe>
		} else {
			if (logStatus) {
 8000408:	4b21      	ldr	r3, [pc, #132]	; (8000490 <extractNumber+0x10c>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d004      	beq.n	800041a <extractNumber+0x96>
				HAL_UART_Transmit_IT(&huart1, "ERROR(INCORRECT FORMAT)\n", 24);
 8000410:	2218      	movs	r2, #24
 8000412:	4920      	ldr	r1, [pc, #128]	; (8000494 <extractNumber+0x110>)
 8000414:	4820      	ldr	r0, [pc, #128]	; (8000498 <extractNumber+0x114>)
 8000416:	f005 f861 	bl	80054dc <HAL_UART_Transmit_IT>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 800041a:	2200      	movs	r2, #0
 800041c:	2101      	movs	r1, #1
 800041e:	481f      	ldr	r0, [pc, #124]	; (800049c <extractNumber+0x118>)
 8000420:	f001 fe5a 	bl	80020d8 <HAL_GPIO_WritePin>
			buzzer_flag = WrongInput;
 8000424:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <extractNumber+0x11c>)
 8000426:	2201      	movs	r2, #1
 8000428:	701a      	strb	r2, [r3, #0]
			buzzerEnterTime = HAL_GetTick();
 800042a:	f001 fb47 	bl	8001abc <HAL_GetTick>
 800042e:	4603      	mov	r3, r0
 8000430:	4a1c      	ldr	r2, [pc, #112]	; (80004a4 <extractNumber+0x120>)
 8000432:	6013      	str	r3, [r2, #0]
			if (alertStatus)
 8000434:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <extractNumber+0x124>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d01f      	beq.n	800047c <extractNumber+0xf8>
				PWM_Start();
 800043c:	f7ff fec4 	bl	80001c8 <PWM_Start>
 8000440:	e01d      	b.n	800047e <extractNumber+0xfa>
	for (int i = 9; i < 13; i++) {
 8000442:	69fb      	ldr	r3, [r7, #28]
 8000444:	2b0c      	cmp	r3, #12
 8000446:	ddc4      	ble.n	80003d2 <extractNumber+0x4e>
			return;
		}
	}
	if (logStatus) {
 8000448:	4b11      	ldr	r3, [pc, #68]	; (8000490 <extractNumber+0x10c>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d016      	beq.n	800047e <extractNumber+0xfa>
		HAL_UART_Transmit_IT(&huart1, pass, 19);
 8000450:	f107 0308 	add.w	r3, r7, #8
 8000454:	2213      	movs	r2, #19
 8000456:	4619      	mov	r1, r3
 8000458:	480f      	ldr	r0, [pc, #60]	; (8000498 <extractNumber+0x114>)
 800045a:	f005 f83f 	bl	80054dc <HAL_UART_Transmit_IT>
		buzzer_flag = CorrectInput;
 800045e:	4b10      	ldr	r3, [pc, #64]	; (80004a0 <extractNumber+0x11c>)
 8000460:	2200      	movs	r2, #0
 8000462:	701a      	strb	r2, [r3, #0]
		buzzerEnterTime = HAL_GetTick();
 8000464:	f001 fb2a 	bl	8001abc <HAL_GetTick>
 8000468:	4603      	mov	r3, r0
 800046a:	4a0e      	ldr	r2, [pc, #56]	; (80004a4 <extractNumber+0x120>)
 800046c:	6013      	str	r3, [r2, #0]
		if (alertStatus)
 800046e:	4b0e      	ldr	r3, [pc, #56]	; (80004a8 <extractNumber+0x124>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d003      	beq.n	800047e <extractNumber+0xfa>
			PWM_Start();
 8000476:	f7ff fea7 	bl	80001c8 <PWM_Start>
 800047a:	e000      	b.n	800047e <extractNumber+0xfa>
			return;
 800047c:	bf00      	nop
	}
}
 800047e:	3720      	adds	r7, #32
 8000480:	46bd      	mov	sp, r7
 8000482:	bdb0      	pop	{r4, r5, r7, pc}
 8000484:	20000040 	.word	0x20000040
 8000488:	08006bc8 	.word	0x08006bc8
 800048c:	20000000 	.word	0x20000000
 8000490:	20000038 	.word	0x20000038
 8000494:	08006bac 	.word	0x08006bac
 8000498:	20000208 	.word	0x20000208
 800049c:	48000800 	.word	0x48000800
 80004a0:	20000048 	.word	0x20000048
 80004a4:	200005b4 	.word	0x200005b4
 80004a8:	2000003c 	.word	0x2000003c

080004ac <compareStrings>:

int compareStrings(const char *str1, const uint8_t *str2, int n) {
 80004ac:	b480      	push	{r7}
 80004ae:	b087      	sub	sp, #28
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	60f8      	str	r0, [r7, #12]
 80004b4:	60b9      	str	r1, [r7, #8]
 80004b6:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < n; i++) {
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]
 80004bc:	e00e      	b.n	80004dc <compareStrings+0x30>
		if (str1[i] != str2[i]) {
 80004be:	697b      	ldr	r3, [r7, #20]
 80004c0:	68fa      	ldr	r2, [r7, #12]
 80004c2:	4413      	add	r3, r2
 80004c4:	781a      	ldrb	r2, [r3, #0]
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	68b9      	ldr	r1, [r7, #8]
 80004ca:	440b      	add	r3, r1
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	429a      	cmp	r2, r3
 80004d0:	d001      	beq.n	80004d6 <compareStrings+0x2a>
			return 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	e007      	b.n	80004e6 <compareStrings+0x3a>
	for (int i = 0; i < n; i++) {
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	3301      	adds	r3, #1
 80004da:	617b      	str	r3, [r7, #20]
 80004dc:	697a      	ldr	r2, [r7, #20]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	dbec      	blt.n	80004be <compareStrings+0x12>
		}
	}
	return 1;
 80004e4:	2301      	movs	r3, #1
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	371c      	adds	r7, #28
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
	...

080004f4 <HAL_UART_RxCpltCallback>:

uint8_t data[100];
uint8_t d;
uint8_t i;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80004f4:	b5b0      	push	{r4, r5, r7, lr}
 80004f6:	b08a      	sub	sp, #40	; 0x28
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a77      	ldr	r2, [pc, #476]	; (80006e0 <HAL_UART_RxCpltCallback+0x1ec>)
 8000502:	4293      	cmp	r3, r2
 8000504:	f040 80e7 	bne.w	80006d6 <HAL_UART_RxCpltCallback+0x1e2>
		HAL_UART_Receive_IT(&huart1, &d, 1);
 8000508:	2201      	movs	r2, #1
 800050a:	4976      	ldr	r1, [pc, #472]	; (80006e4 <HAL_UART_RxCpltCallback+0x1f0>)
 800050c:	4876      	ldr	r0, [pc, #472]	; (80006e8 <HAL_UART_RxCpltCallback+0x1f4>)
 800050e:	f005 f843 	bl	8005598 <HAL_UART_Receive_IT>
		data[i++] = d;
 8000512:	4b76      	ldr	r3, [pc, #472]	; (80006ec <HAL_UART_RxCpltCallback+0x1f8>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	1c5a      	adds	r2, r3, #1
 8000518:	b2d1      	uxtb	r1, r2
 800051a:	4a74      	ldr	r2, [pc, #464]	; (80006ec <HAL_UART_RxCpltCallback+0x1f8>)
 800051c:	7011      	strb	r1, [r2, #0]
 800051e:	461a      	mov	r2, r3
 8000520:	4b70      	ldr	r3, [pc, #448]	; (80006e4 <HAL_UART_RxCpltCallback+0x1f0>)
 8000522:	7819      	ldrb	r1, [r3, #0]
 8000524:	4b72      	ldr	r3, [pc, #456]	; (80006f0 <HAL_UART_RxCpltCallback+0x1fc>)
 8000526:	5499      	strb	r1, [r3, r2]
		if (d == '\n') {
 8000528:	4b6e      	ldr	r3, [pc, #440]	; (80006e4 <HAL_UART_RxCpltCallback+0x1f0>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b0a      	cmp	r3, #10
 800052e:	f040 80d2 	bne.w	80006d6 <HAL_UART_RxCpltCallback+0x1e2>
			if ((i == 15 && compareStrings(setPass, data, 9) == 1)
 8000532:	4b6e      	ldr	r3, [pc, #440]	; (80006ec <HAL_UART_RxCpltCallback+0x1f8>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b0f      	cmp	r3, #15
 8000538:	d11a      	bne.n	8000570 <HAL_UART_RxCpltCallback+0x7c>
 800053a:	2209      	movs	r2, #9
 800053c:	496c      	ldr	r1, [pc, #432]	; (80006f0 <HAL_UART_RxCpltCallback+0x1fc>)
 800053e:	486d      	ldr	r0, [pc, #436]	; (80006f4 <HAL_UART_RxCpltCallback+0x200>)
 8000540:	f7ff ffb4 	bl	80004ac <compareStrings>
 8000544:	4603      	mov	r3, r0
 8000546:	2b01      	cmp	r3, #1
 8000548:	d112      	bne.n	8000570 <HAL_UART_RxCpltCallback+0x7c>
					&& isCorrect == -1) {
 800054a:	4b6b      	ldr	r3, [pc, #428]	; (80006f8 <HAL_UART_RxCpltCallback+0x204>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000552:	d10d      	bne.n	8000570 <HAL_UART_RxCpltCallback+0x7c>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8000554:	2201      	movs	r2, #1
 8000556:	2101      	movs	r1, #1
 8000558:	4868      	ldr	r0, [pc, #416]	; (80006fc <HAL_UART_RxCpltCallback+0x208>)
 800055a:	f001 fdbd 	bl	80020d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 800055e:	2200      	movs	r2, #0
 8000560:	2104      	movs	r1, #4
 8000562:	4866      	ldr	r0, [pc, #408]	; (80006fc <HAL_UART_RxCpltCallback+0x208>)
 8000564:	f001 fdb8 	bl	80020d8 <HAL_GPIO_WritePin>
				extractNumber(data);
 8000568:	4861      	ldr	r0, [pc, #388]	; (80006f0 <HAL_UART_RxCpltCallback+0x1fc>)
 800056a:	f7ff ff0b 	bl	8000384 <extractNumber>
 800056e:	e0af      	b.n	80006d0 <HAL_UART_RxCpltCallback+0x1dc>
			} else if (i == 7) {
 8000570:	4b5e      	ldr	r3, [pc, #376]	; (80006ec <HAL_UART_RxCpltCallback+0x1f8>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b07      	cmp	r3, #7
 8000576:	d111      	bne.n	800059c <HAL_UART_RxCpltCallback+0xa8>
				if (compareStrings(logON, data, 6) == 1) {
 8000578:	2206      	movs	r2, #6
 800057a:	495d      	ldr	r1, [pc, #372]	; (80006f0 <HAL_UART_RxCpltCallback+0x1fc>)
 800057c:	4860      	ldr	r0, [pc, #384]	; (8000700 <HAL_UART_RxCpltCallback+0x20c>)
 800057e:	f7ff ff95 	bl	80004ac <compareStrings>
 8000582:	4603      	mov	r3, r0
 8000584:	2b01      	cmp	r3, #1
 8000586:	f040 80a3 	bne.w	80006d0 <HAL_UART_RxCpltCallback+0x1dc>
					logStatus = 1;
 800058a:	4b5e      	ldr	r3, [pc, #376]	; (8000704 <HAL_UART_RxCpltCallback+0x210>)
 800058c:	2201      	movs	r2, #1
 800058e:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Log Turned ON\n",
 8000590:	2216      	movs	r2, #22
 8000592:	495d      	ldr	r1, [pc, #372]	; (8000708 <HAL_UART_RxCpltCallback+0x214>)
 8000594:	4854      	ldr	r0, [pc, #336]	; (80006e8 <HAL_UART_RxCpltCallback+0x1f4>)
 8000596:	f004 ffa1 	bl	80054dc <HAL_UART_Transmit_IT>
 800059a:	e099      	b.n	80006d0 <HAL_UART_RxCpltCallback+0x1dc>
							22);
				}
			} else if (i == 8) {
 800059c:	4b53      	ldr	r3, [pc, #332]	; (80006ec <HAL_UART_RxCpltCallback+0x1f8>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b08      	cmp	r3, #8
 80005a2:	d111      	bne.n	80005c8 <HAL_UART_RxCpltCallback+0xd4>
				if (compareStrings(logOFF, data, 7) == 1) {
 80005a4:	2207      	movs	r2, #7
 80005a6:	4952      	ldr	r1, [pc, #328]	; (80006f0 <HAL_UART_RxCpltCallback+0x1fc>)
 80005a8:	4858      	ldr	r0, [pc, #352]	; (800070c <HAL_UART_RxCpltCallback+0x218>)
 80005aa:	f7ff ff7f 	bl	80004ac <compareStrings>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	f040 808d 	bne.w	80006d0 <HAL_UART_RxCpltCallback+0x1dc>
					logStatus = 0;
 80005b6:	4b53      	ldr	r3, [pc, #332]	; (8000704 <HAL_UART_RxCpltCallback+0x210>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Log Turned OFF\n",
 80005bc:	2217      	movs	r2, #23
 80005be:	4954      	ldr	r1, [pc, #336]	; (8000710 <HAL_UART_RxCpltCallback+0x21c>)
 80005c0:	4849      	ldr	r0, [pc, #292]	; (80006e8 <HAL_UART_RxCpltCallback+0x1f4>)
 80005c2:	f004 ff8b 	bl	80054dc <HAL_UART_Transmit_IT>
 80005c6:	e083      	b.n	80006d0 <HAL_UART_RxCpltCallback+0x1dc>
							23);
				}
			} else if (i == 9) {
 80005c8:	4b48      	ldr	r3, [pc, #288]	; (80006ec <HAL_UART_RxCpltCallback+0x1f8>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b09      	cmp	r3, #9
 80005ce:	d11a      	bne.n	8000606 <HAL_UART_RxCpltCallback+0x112>
				if (compareStrings(alertON, data, 8) == 1) {
 80005d0:	2208      	movs	r2, #8
 80005d2:	4947      	ldr	r1, [pc, #284]	; (80006f0 <HAL_UART_RxCpltCallback+0x1fc>)
 80005d4:	484f      	ldr	r0, [pc, #316]	; (8000714 <HAL_UART_RxCpltCallback+0x220>)
 80005d6:	f7ff ff69 	bl	80004ac <compareStrings>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d177      	bne.n	80006d0 <HAL_UART_RxCpltCallback+0x1dc>
					alertStatus = 1;
 80005e0:	4b4d      	ldr	r3, [pc, #308]	; (8000718 <HAL_UART_RxCpltCallback+0x224>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Alerts Turned ON\n",
 80005e6:	2219      	movs	r2, #25
 80005e8:	494c      	ldr	r1, [pc, #304]	; (800071c <HAL_UART_RxCpltCallback+0x228>)
 80005ea:	483f      	ldr	r0, [pc, #252]	; (80006e8 <HAL_UART_RxCpltCallback+0x1f4>)
 80005ec:	f004 ff76 	bl	80054dc <HAL_UART_Transmit_IT>
							25);
					buzzer_flag = CorrectInput;
 80005f0:	4b4b      	ldr	r3, [pc, #300]	; (8000720 <HAL_UART_RxCpltCallback+0x22c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
					buzzerEnterTime = HAL_GetTick();
 80005f6:	f001 fa61 	bl	8001abc <HAL_GetTick>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a49      	ldr	r2, [pc, #292]	; (8000724 <HAL_UART_RxCpltCallback+0x230>)
 80005fe:	6013      	str	r3, [r2, #0]
					PWM_Start();
 8000600:	f7ff fde2 	bl	80001c8 <PWM_Start>
 8000604:	e064      	b.n	80006d0 <HAL_UART_RxCpltCallback+0x1dc>
				}
			} else if (i == 10) {
 8000606:	4b39      	ldr	r3, [pc, #228]	; (80006ec <HAL_UART_RxCpltCallback+0x1f8>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b0a      	cmp	r3, #10
 800060c:	d110      	bne.n	8000630 <HAL_UART_RxCpltCallback+0x13c>
				if (compareStrings(alertOFF, data, 9) == 1) {
 800060e:	2209      	movs	r2, #9
 8000610:	4937      	ldr	r1, [pc, #220]	; (80006f0 <HAL_UART_RxCpltCallback+0x1fc>)
 8000612:	4845      	ldr	r0, [pc, #276]	; (8000728 <HAL_UART_RxCpltCallback+0x234>)
 8000614:	f7ff ff4a 	bl	80004ac <compareStrings>
 8000618:	4603      	mov	r3, r0
 800061a:	2b01      	cmp	r3, #1
 800061c:	d158      	bne.n	80006d0 <HAL_UART_RxCpltCallback+0x1dc>
					alertStatus = 0;
 800061e:	4b3e      	ldr	r3, [pc, #248]	; (8000718 <HAL_UART_RxCpltCallback+0x224>)
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Alerts Turned OFF\n",
 8000624:	221a      	movs	r2, #26
 8000626:	4941      	ldr	r1, [pc, #260]	; (800072c <HAL_UART_RxCpltCallback+0x238>)
 8000628:	482f      	ldr	r0, [pc, #188]	; (80006e8 <HAL_UART_RxCpltCallback+0x1f4>)
 800062a:	f004 ff57 	bl	80054dc <HAL_UART_Transmit_IT>
 800062e:	e04f      	b.n	80006d0 <HAL_UART_RxCpltCallback+0x1dc>
							26);
				}
			} else if (i == 14 && (data[11] - '0') < 6
 8000630:	4b2e      	ldr	r3, [pc, #184]	; (80006ec <HAL_UART_RxCpltCallback+0x1f8>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b0e      	cmp	r3, #14
 8000636:	d136      	bne.n	80006a6 <HAL_UART_RxCpltCallback+0x1b2>
 8000638:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <HAL_UART_RxCpltCallback+0x1fc>)
 800063a:	7adb      	ldrb	r3, [r3, #11]
 800063c:	2b35      	cmp	r3, #53	; 0x35
 800063e:	d832      	bhi.n	80006a6 <HAL_UART_RxCpltCallback+0x1b2>
					&& (data[11] - '0') > -1) {
 8000640:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <HAL_UART_RxCpltCallback+0x1fc>)
 8000642:	7adb      	ldrb	r3, [r3, #11]
 8000644:	2b2f      	cmp	r3, #47	; 0x2f
 8000646:	d92e      	bls.n	80006a6 <HAL_UART_RxCpltCallback+0x1b2>
				if (compareStrings(setVolume, data, 11) == 1
 8000648:	220b      	movs	r2, #11
 800064a:	4929      	ldr	r1, [pc, #164]	; (80006f0 <HAL_UART_RxCpltCallback+0x1fc>)
 800064c:	4838      	ldr	r0, [pc, #224]	; (8000730 <HAL_UART_RxCpltCallback+0x23c>)
 800064e:	f7ff ff2d 	bl	80004ac <compareStrings>
 8000652:	4603      	mov	r3, r0
 8000654:	2b01      	cmp	r3, #1
 8000656:	d13a      	bne.n	80006ce <HAL_UART_RxCpltCallback+0x1da>
						&& data[12] == ')') {
 8000658:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <HAL_UART_RxCpltCallback+0x1fc>)
 800065a:	7b1b      	ldrb	r3, [r3, #12]
 800065c:	2b29      	cmp	r3, #41	; 0x29
 800065e:	d136      	bne.n	80006ce <HAL_UART_RxCpltCallback+0x1da>
					int v = data[11] - '0';
 8000660:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <HAL_UART_RxCpltCallback+0x1fc>)
 8000662:	7adb      	ldrb	r3, [r3, #11]
 8000664:	3b30      	subs	r3, #48	; 0x30
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
					_volume = v * 10;
 8000668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066a:	b29b      	uxth	r3, r3
 800066c:	461a      	mov	r2, r3
 800066e:	0092      	lsls	r2, r2, #2
 8000670:	4413      	add	r3, r2
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	b29a      	uxth	r2, r3
 8000676:	4b2f      	ldr	r3, [pc, #188]	; (8000734 <HAL_UART_RxCpltCallback+0x240>)
 8000678:	801a      	strh	r2, [r3, #0]
					char massage[24] = "Program Volume Set To  \n";
 800067a:	4b2f      	ldr	r3, [pc, #188]	; (8000738 <HAL_UART_RxCpltCallback+0x244>)
 800067c:	f107 040c 	add.w	r4, r7, #12
 8000680:	461d      	mov	r5, r3
 8000682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000686:	e895 0003 	ldmia.w	r5, {r0, r1}
 800068a:	e884 0003 	stmia.w	r4, {r0, r1}
					massage[22] = data[11];
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <HAL_UART_RxCpltCallback+0x1fc>)
 8000690:	7adb      	ldrb	r3, [r3, #11]
 8000692:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					HAL_UART_Transmit_IT(&huart1, massage, 24);
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	2218      	movs	r2, #24
 800069c:	4619      	mov	r1, r3
 800069e:	4812      	ldr	r0, [pc, #72]	; (80006e8 <HAL_UART_RxCpltCallback+0x1f4>)
 80006a0:	f004 ff1c 	bl	80054dc <HAL_UART_Transmit_IT>
				if (compareStrings(setVolume, data, 11) == 1
 80006a4:	e013      	b.n	80006ce <HAL_UART_RxCpltCallback+0x1da>
				}
			} else {
				HAL_UART_Transmit_IT(&huart1, "INVALID INPUT\n", 14);
 80006a6:	220e      	movs	r2, #14
 80006a8:	4924      	ldr	r1, [pc, #144]	; (800073c <HAL_UART_RxCpltCallback+0x248>)
 80006aa:	480f      	ldr	r0, [pc, #60]	; (80006e8 <HAL_UART_RxCpltCallback+0x1f4>)
 80006ac:	f004 ff16 	bl	80054dc <HAL_UART_Transmit_IT>
				buzzer_flag = WrongInput;
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <HAL_UART_RxCpltCallback+0x22c>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
				buzzerEnterTime = HAL_GetTick();
 80006b6:	f001 fa01 	bl	8001abc <HAL_GetTick>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a19      	ldr	r2, [pc, #100]	; (8000724 <HAL_UART_RxCpltCallback+0x230>)
 80006be:	6013      	str	r3, [r2, #0]
				if (alertStatus)
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <HAL_UART_RxCpltCallback+0x224>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d003      	beq.n	80006d0 <HAL_UART_RxCpltCallback+0x1dc>
					PWM_Start();
 80006c8:	f7ff fd7e 	bl	80001c8 <PWM_Start>
 80006cc:	e000      	b.n	80006d0 <HAL_UART_RxCpltCallback+0x1dc>
				if (compareStrings(setVolume, data, 11) == 1
 80006ce:	bf00      	nop
			}

			i = 0;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_UART_RxCpltCallback+0x1f8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]
		}

	}
}
 80006d6:	bf00      	nop
 80006d8:	3728      	adds	r7, #40	; 0x28
 80006da:	46bd      	mov	sp, r7
 80006dc:	bdb0      	pop	{r4, r5, r7, pc}
 80006de:	bf00      	nop
 80006e0:	40013800 	.word	0x40013800
 80006e4:	20000678 	.word	0x20000678
 80006e8:	20000208 	.word	0x20000208
 80006ec:	20000679 	.word	0x20000679
 80006f0:	20000614 	.word	0x20000614
 80006f4:	20000054 	.word	0x20000054
 80006f8:	20000040 	.word	0x20000040
 80006fc:	48000800 	.word	0x48000800
 8000700:	20000060 	.word	0x20000060
 8000704:	20000038 	.word	0x20000038
 8000708:	08006bdc 	.word	0x08006bdc
 800070c:	20000068 	.word	0x20000068
 8000710:	08006bf4 	.word	0x08006bf4
 8000714:	20000070 	.word	0x20000070
 8000718:	2000003c 	.word	0x2000003c
 800071c:	08006c0c 	.word	0x08006c0c
 8000720:	20000048 	.word	0x20000048
 8000724:	200005b4 	.word	0x200005b4
 8000728:	20000078 	.word	0x20000078
 800072c:	08006c28 	.word	0x08006c28
 8000730:	20000084 	.word	0x20000084
 8000734:	20000050 	.word	0x20000050
 8000738:	08006c54 	.word	0x08006c54
 800073c:	08006c44 	.word	0x08006c44

08000740 <display_number>:

//UART END

void display_number(int led_flag, int _number) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOD,
 800074a:	2201      	movs	r2, #1
 800074c:	211e      	movs	r1, #30
 800074e:	4813      	ldr	r0, [pc, #76]	; (800079c <display_number+0x5c>)
 8000750:	f001 fcc2 	bl	80020d8 <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOD, led[led_flag], GPIO_PIN_RESET);
 8000754:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <display_number+0x60>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800075c:	2200      	movs	r2, #0
 800075e:	4619      	mov	r1, r3
 8000760:	480e      	ldr	r0, [pc, #56]	; (800079c <display_number+0x5c>)
 8000762:	f001 fcb9 	bl	80020d8 <HAL_GPIO_WritePin>
	if (_number != 0) {
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d009      	beq.n	8000780 <display_number+0x40>
		HAL_GPIO_WritePin(GPIOD, digits[_number].pattern, GPIO_PIN_SET);
 800076c:	4a0d      	ldr	r2, [pc, #52]	; (80007a4 <display_number+0x64>)
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	4413      	add	r3, r2
 8000774:	889b      	ldrh	r3, [r3, #4]
 8000776:	2201      	movs	r2, #1
 8000778:	4619      	mov	r1, r3
 800077a:	4808      	ldr	r0, [pc, #32]	; (800079c <display_number+0x5c>)
 800077c:	f001 fcac 	bl	80020d8 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(GPIOD, digits[_number].anti_pattern, GPIO_PIN_RESET);
 8000780:	4a08      	ldr	r2, [pc, #32]	; (80007a4 <display_number+0x64>)
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	4413      	add	r3, r2
 8000788:	88db      	ldrh	r3, [r3, #6]
 800078a:	2200      	movs	r2, #0
 800078c:	4619      	mov	r1, r3
 800078e:	4803      	ldr	r0, [pc, #12]	; (800079c <display_number+0x5c>)
 8000790:	f001 fca2 	bl	80020d8 <HAL_GPIO_WritePin>
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	48000c00 	.word	0x48000c00
 80007a0:	2000057c 	.word	0x2000057c
 80007a4:	200005bc 	.word	0x200005bc

080007a8 <increase>:

void increase(int _head) {
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	carrier[_head] += 1;
 80007b0:	4a0c      	ldr	r2, [pc, #48]	; (80007e4 <increase+0x3c>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b8:	1c5a      	adds	r2, r3, #1
 80007ba:	490a      	ldr	r1, [pc, #40]	; (80007e4 <increase+0x3c>)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (carrier[_head] == 10) {
 80007c2:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <increase+0x3c>)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ca:	2b0a      	cmp	r3, #10
 80007cc:	d104      	bne.n	80007d8 <increase+0x30>
		carrier[_head] = 0;
 80007ce:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <increase+0x3c>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2100      	movs	r1, #0
 80007d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	20000584 	.word	0x20000584

080007e8 <init_display>:

void init_display() {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,
 80007ec:	2201      	movs	r2, #1
 80007ee:	211e      	movs	r1, #30
 80007f0:	4802      	ldr	r0, [pc, #8]	; (80007fc <init_display+0x14>)
 80007f2:	f001 fc71 	bl	80020d8 <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	48000c00 	.word	0x48000c00

08000800 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b096      	sub	sp, #88	; 0x58
 8000804:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	struct digit _digits[10];
	_digits[0].number = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
	_digits[0].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
 800080a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800080e:	817b      	strh	r3, [r7, #10]
			| GPIO_PIN_15;

	_digits[1].number = 1;
 8000810:	2301      	movs	r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
	_digits[1].pattern = GPIO_PIN_12;
 8000814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000818:	823b      	strh	r3, [r7, #16]
	_digits[1].anti_pattern = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800081a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800081e:	827b      	strh	r3, [r7, #18]

	_digits[2].number = 2;
 8000820:	2302      	movs	r3, #2
 8000822:	617b      	str	r3, [r7, #20]
	_digits[2].pattern = GPIO_PIN_13;
 8000824:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000828:	833b      	strh	r3, [r7, #24]
	_digits[2].anti_pattern = GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15;
 800082a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800082e:	837b      	strh	r3, [r7, #26]

	_digits[3].number = 3;
 8000830:	2303      	movs	r3, #3
 8000832:	61fb      	str	r3, [r7, #28]
	_digits[3].pattern = GPIO_PIN_12 | GPIO_PIN_13;
 8000834:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000838:	843b      	strh	r3, [r7, #32]
	_digits[3].anti_pattern = GPIO_PIN_14 | GPIO_PIN_15;
 800083a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800083e:	847b      	strh	r3, [r7, #34]	; 0x22

	_digits[4].number = 4;
 8000840:	2304      	movs	r3, #4
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
	_digits[4].pattern = GPIO_PIN_14;
 8000844:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000848:	853b      	strh	r3, [r7, #40]	; 0x28
	_digits[4].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15;
 800084a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800084e:	857b      	strh	r3, [r7, #42]	; 0x2a

	_digits[5].number = 5;
 8000850:	2305      	movs	r3, #5
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
	_digits[5].pattern = GPIO_PIN_12 | GPIO_PIN_14;
 8000854:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000858:	863b      	strh	r3, [r7, #48]	; 0x30
	_digits[5].anti_pattern = GPIO_PIN_13 | GPIO_PIN_15;
 800085a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800085e:	867b      	strh	r3, [r7, #50]	; 0x32

	_digits[6].number = 6;
 8000860:	2306      	movs	r3, #6
 8000862:	637b      	str	r3, [r7, #52]	; 0x34
	_digits[6].pattern = GPIO_PIN_13 | GPIO_PIN_14;
 8000864:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000868:	873b      	strh	r3, [r7, #56]	; 0x38
	_digits[6].anti_pattern = GPIO_PIN_12 | GPIO_PIN_15;
 800086a:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 800086e:	877b      	strh	r3, [r7, #58]	; 0x3a

	_digits[7].number = 7;
 8000870:	2307      	movs	r3, #7
 8000872:	63fb      	str	r3, [r7, #60]	; 0x3c
	_digits[7].pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 8000874:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000878:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	_digits[7].anti_pattern = GPIO_PIN_15;
 800087c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000880:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	_digits[8].number = 8;
 8000884:	2308      	movs	r3, #8
 8000886:	647b      	str	r3, [r7, #68]	; 0x44
	_digits[8].pattern = GPIO_PIN_15;
 8000888:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800088c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	_digits[8].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 8000890:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000894:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	_digits[9].number = 9;
 8000898:	2309      	movs	r3, #9
 800089a:	64fb      	str	r3, [r7, #76]	; 0x4c
	_digits[9].pattern = GPIO_PIN_12 | GPIO_PIN_15;
 800089c:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80008a0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	_digits[9].anti_pattern = GPIO_PIN_13 | GPIO_PIN_14;
 80008a4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80008a8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	for (int i = 0; i < 10; i++) {
 80008ac:	2300      	movs	r3, #0
 80008ae:	657b      	str	r3, [r7, #84]	; 0x54
 80008b0:	e00f      	b.n	80008d2 <main+0xd2>
		digits[i] = _digits[i];
 80008b2:	491f      	ldr	r1, [pc, #124]	; (8000930 <main+0x130>)
 80008b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80008b8:	00d2      	lsls	r2, r2, #3
 80008ba:	3258      	adds	r2, #88	; 0x58
 80008bc:	443a      	add	r2, r7
 80008be:	00db      	lsls	r3, r3, #3
 80008c0:	440b      	add	r3, r1
 80008c2:	3a54      	subs	r2, #84	; 0x54
 80008c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008c8:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 0; i < 10; i++) {
 80008cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008ce:	3301      	adds	r3, #1
 80008d0:	657b      	str	r3, [r7, #84]	; 0x54
 80008d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008d4:	2b09      	cmp	r3, #9
 80008d6:	ddec      	ble.n	80008b2 <main+0xb2>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008d8:	f001 f896 	bl	8001a08 <HAL_Init>

	/* USER CODE BEGIN Init */

	led[0] = GPIO_PIN_1;
 80008dc:	4b15      	ldr	r3, [pc, #84]	; (8000934 <main+0x134>)
 80008de:	2202      	movs	r2, #2
 80008e0:	801a      	strh	r2, [r3, #0]
	led[1] = GPIO_PIN_2;
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <main+0x134>)
 80008e4:	2204      	movs	r2, #4
 80008e6:	805a      	strh	r2, [r3, #2]
	led[2] = GPIO_PIN_3;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <main+0x134>)
 80008ea:	2208      	movs	r2, #8
 80008ec:	809a      	strh	r2, [r3, #4]
	led[3] = GPIO_PIN_4;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <main+0x134>)
 80008f0:	2210      	movs	r2, #16
 80008f2:	80da      	strh	r2, [r3, #6]

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008f4:	f000 f828 	bl	8000948 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008f8:	f000 fa26 	bl	8000d48 <MX_GPIO_Init>
	MX_I2C1_Init();
 80008fc:	f000 f88a 	bl	8000a14 <MX_I2C1_Init>
	MX_SPI1_Init();
 8000900:	f000 f8c8 	bl	8000a94 <MX_SPI1_Init>
	MX_USB_PCD_Init();
 8000904:	f000 f9fe 	bl	8000d04 <MX_USB_PCD_Init>
	MX_TIM1_Init();
 8000908:	f000 f902 	bl	8000b10 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 800090c:	f000 f9ca 	bl	8000ca4 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 8000910:	f000 f952 	bl	8000bb8 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8000914:	4808      	ldr	r0, [pc, #32]	; (8000938 <main+0x138>)
 8000916:	f003 fb47 	bl	8003fa8 <HAL_TIM_Base_Start_IT>
	HAL_UART_Transmit_IT(&huart1,
 800091a:	222c      	movs	r2, #44	; 0x2c
 800091c:	4907      	ldr	r1, [pc, #28]	; (800093c <main+0x13c>)
 800091e:	4808      	ldr	r0, [pc, #32]	; (8000940 <main+0x140>)
 8000920:	f004 fddc 	bl	80054dc <HAL_UART_Transmit_IT>
			"=============\nProgram Running\n=============\n", 44);
	HAL_UART_Receive_IT(&huart1, &d, 1);
 8000924:	2201      	movs	r2, #1
 8000926:	4907      	ldr	r1, [pc, #28]	; (8000944 <main+0x144>)
 8000928:	4805      	ldr	r0, [pc, #20]	; (8000940 <main+0x140>)
 800092a:	f004 fe35 	bl	8005598 <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800092e:	e7fe      	b.n	800092e <main+0x12e>
 8000930:	200005bc 	.word	0x200005bc
 8000934:	2000057c 	.word	0x2000057c
 8000938:	20000170 	.word	0x20000170
 800093c:	08006c6c 	.word	0x08006c6c
 8000940:	20000208 	.word	0x20000208
 8000944:	20000678 	.word	0x20000678

08000948 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b09e      	sub	sp, #120	; 0x78
 800094c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800094e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000952:	2228      	movs	r2, #40	; 0x28
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f006 f914 	bl	8006b84 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800095c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800096c:	463b      	mov	r3, r7
 800096e:	223c      	movs	r2, #60	; 0x3c
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f006 f906 	bl	8006b84 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000978:	2303      	movs	r3, #3
 800097a:	653b      	str	r3, [r7, #80]	; 0x50
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800097c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000980:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000986:	2301      	movs	r3, #1
 8000988:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800098a:	2310      	movs	r3, #16
 800098c:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098e:	2302      	movs	r3, #2
 8000990:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000992:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000996:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000998:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800099c:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800099e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80009a2:	4618      	mov	r0, r3
 80009a4:	f001 fdda 	bl	800255c <HAL_RCC_OscConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0x6a>
		Error_Handler();
 80009ae:	f000 fde7 	bl	8001580 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80009b2:	230f      	movs	r3, #15
 80009b4:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b6:	2302      	movs	r3, #2
 80009b8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80009c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009cc:	2101      	movs	r1, #1
 80009ce:	4618      	mov	r0, r3
 80009d0:	f002 fe02 	bl	80035d8 <HAL_RCC_ClockConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0x96>
		Error_Handler();
 80009da:	f000 fdd1 	bl	8001580 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <SystemClock_Config+0xc8>)
 80009e0:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_TIM1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80009ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ee:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80009f0:	2300      	movs	r3, #0
 80009f2:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80009f4:	463b      	mov	r3, r7
 80009f6:	4618      	mov	r0, r3
 80009f8:	f003 f824 	bl	8003a44 <HAL_RCCEx_PeriphCLKConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0xbe>
		Error_Handler();
 8000a02:	f000 fdbd 	bl	8001580 <Error_Handler>
	}
}
 8000a06:	bf00      	nop
 8000a08:	3778      	adds	r7, #120	; 0x78
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	00021021 	.word	0x00021021

08000a14 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a1a:	4a1c      	ldr	r2, [pc, #112]	; (8000a8c <MX_I2C1_Init+0x78>)
 8000a1c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a20:	4a1b      	ldr	r2, [pc, #108]	; (8000a90 <MX_I2C1_Init+0x7c>)
 8000a22:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000a24:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000a4e:	480e      	ldr	r0, [pc, #56]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a50:	f001 fb8c 	bl	800216c <HAL_I2C_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000a5a:	f000 fd91 	bl	8001580 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4809      	ldr	r0, [pc, #36]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a62:	f001 fc12 	bl	800228a <HAL_I2CEx_ConfigAnalogFilter>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000a6c:	f000 fd88 	bl	8001580 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000a70:	2100      	movs	r1, #0
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a74:	f001 fc54 	bl	8002320 <HAL_I2CEx_ConfigDigitalFilter>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000a7e:	f000 fd7f 	bl	8001580 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200000b8 	.word	0x200000b8
 8000a8c:	40005400 	.word	0x40005400
 8000a90:	2000090e 	.word	0x2000090e

08000a94 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000a9a:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <MX_SPI1_Init+0x78>)
 8000a9c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000aa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000aa4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aa6:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000aae:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ab2:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac6:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000aca:	2208      	movs	r2, #8
 8000acc:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000ae2:	2207      	movs	r2, #7
 8000ae4:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000aee:	2208      	movs	r2, #8
 8000af0:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000af4:	f003 f956 	bl	8003da4 <HAL_SPI_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_SPI1_Init+0x6e>
		Error_Handler();
 8000afe:	f000 fd3f 	bl	8001580 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2000010c 	.word	0x2000010c
 8000b0c:	40013000 	.word	0x40013000

08000b10 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000b16:	f107 0310 	add.w	r3, r7, #16
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000b2e:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <MX_TIM1_Init+0xa0>)
 8000b30:	4a20      	ldr	r2, [pc, #128]	; (8000bb4 <MX_TIM1_Init+0xa4>)
 8000b32:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 4800 - 1;
 8000b34:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <MX_TIM1_Init+0xa0>)
 8000b36:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000b3a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3c:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <MX_TIM1_Init+0xa0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 5 - 1;
 8000b42:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <MX_TIM1_Init+0xa0>)
 8000b44:	2204      	movs	r2, #4
 8000b46:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b48:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <MX_TIM1_Init+0xa0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <MX_TIM1_Init+0xa0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b54:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <MX_TIM1_Init+0xa0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000b5a:	4815      	ldr	r0, [pc, #84]	; (8000bb0 <MX_TIM1_Init+0xa0>)
 8000b5c:	f003 f9cd 	bl	8003efa <HAL_TIM_Base_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM1_Init+0x5a>
		Error_Handler();
 8000b66:	f000 fd0b 	bl	8001580 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	4619      	mov	r1, r3
 8000b76:	480e      	ldr	r0, [pc, #56]	; (8000bb0 <MX_TIM1_Init+0xa0>)
 8000b78:	f003 feac 	bl	80048d4 <HAL_TIM_ConfigClockSource>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM1_Init+0x76>
		Error_Handler();
 8000b82:	f000 fcfd 	bl	8001580 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	4619      	mov	r1, r3
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <MX_TIM1_Init+0xa0>)
 8000b98:	f004 fbb4 	bl	8005304 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8000ba2:	f000 fced 	bl	8001580 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	3720      	adds	r7, #32
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000170 	.word	0x20000170
 8000bb4:	40012c00 	.word	0x40012c00

08000bb8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08e      	sub	sp, #56	; 0x38
 8000bbc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000bbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000bd8:	463b      	mov	r3, r7
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]
 8000be6:	615a      	str	r2, [r3, #20]
 8000be8:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000bea:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <MX_TIM2_Init+0xe8>)
 8000bec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf0:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000bf2:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <MX_TIM2_Init+0xe8>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf8:	4b29      	ldr	r3, [pc, #164]	; (8000ca0 <MX_TIM2_Init+0xe8>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8000bfe:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <MX_TIM2_Init+0xe8>)
 8000c00:	f04f 32ff 	mov.w	r2, #4294967295
 8000c04:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c06:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <MX_TIM2_Init+0xe8>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0c:	4b24      	ldr	r3, [pc, #144]	; (8000ca0 <MX_TIM2_Init+0xe8>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000c12:	4823      	ldr	r0, [pc, #140]	; (8000ca0 <MX_TIM2_Init+0xe8>)
 8000c14:	f003 f971 	bl	8003efa <HAL_TIM_Base_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM2_Init+0x6a>
		Error_Handler();
 8000c1e:	f000 fcaf 	bl	8001580 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000c28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	481c      	ldr	r0, [pc, #112]	; (8000ca0 <MX_TIM2_Init+0xe8>)
 8000c30:	f003 fe50 	bl	80048d4 <HAL_TIM_ConfigClockSource>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM2_Init+0x86>
		Error_Handler();
 8000c3a:	f000 fca1 	bl	8001580 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000c3e:	4818      	ldr	r0, [pc, #96]	; (8000ca0 <MX_TIM2_Init+0xe8>)
 8000c40:	f003 fa1c 	bl	800407c <HAL_TIM_PWM_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM2_Init+0x96>
		Error_Handler();
 8000c4a:	f000 fc99 	bl	8001580 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4810      	ldr	r0, [pc, #64]	; (8000ca0 <MX_TIM2_Init+0xe8>)
 8000c5e:	f004 fb51 	bl	8005304 <HAL_TIMEx_MasterConfigSynchronization>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8000c68:	f000 fc8a 	bl	8001580 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c6c:	2360      	movs	r3, #96	; 0x60
 8000c6e:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	2200      	movs	r2, #0
 8000c80:	4619      	mov	r1, r3
 8000c82:	4807      	ldr	r0, [pc, #28]	; (8000ca0 <MX_TIM2_Init+0xe8>)
 8000c84:	f003 fd12 	bl	80046ac <HAL_TIM_PWM_ConfigChannel>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 8000c8e:	f000 fc77 	bl	8001580 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000c92:	4803      	ldr	r0, [pc, #12]	; (8000ca0 <MX_TIM2_Init+0xe8>)
 8000c94:	f000 fd5c 	bl	8001750 <HAL_TIM_MspPostInit>

}
 8000c98:	bf00      	nop
 8000c9a:	3738      	adds	r7, #56	; 0x38
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200001bc 	.word	0x200001bc

08000ca4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_USART1_UART_Init+0x58>)
 8000caa:	4a15      	ldr	r2, [pc, #84]	; (8000d00 <MX_USART1_UART_Init+0x5c>)
 8000cac:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <MX_USART1_UART_Init+0x58>)
 8000cb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_USART1_UART_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_USART1_UART_Init+0x58>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MX_USART1_UART_Init+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_USART1_UART_Init+0x58>)
 8000cca:	220c      	movs	r2, #12
 8000ccc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <MX_USART1_UART_Init+0x58>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_USART1_UART_Init+0x58>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <MX_USART1_UART_Init+0x58>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <MX_USART1_UART_Init+0x58>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_USART1_UART_Init+0x58>)
 8000ce8:	f004 fbaa 	bl	8005440 <HAL_UART_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000cf2:	f000 fc45 	bl	8001580 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000208 	.word	0x20000208
 8000d00:	40013800 	.word	0x40013800

08000d04 <MX_USB_PCD_Init>:
/**
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 8000d08:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <MX_USB_PCD_Init+0x3c>)
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <MX_USB_PCD_Init+0x40>)
 8000d0c:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_USB_PCD_Init+0x3c>)
 8000d10:	2208      	movs	r2, #8
 8000d12:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <MX_USB_PCD_Init+0x3c>)
 8000d16:	2202      	movs	r2, #2
 8000d18:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_USB_PCD_Init+0x3c>)
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <MX_USB_PCD_Init+0x3c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_USB_PCD_Init+0x3c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK) {
 8000d2c:	4804      	ldr	r0, [pc, #16]	; (8000d40 <MX_USB_PCD_Init+0x3c>)
 8000d2e:	f001 fb43 	bl	80023b8 <HAL_PCD_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_USB_PCD_Init+0x38>
		Error_Handler();
 8000d38:	f000 fc22 	bl	8001580 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000290 	.word	0x20000290
 8000d44:	40005c00 	.word	0x40005c00

08000d48 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08c      	sub	sp, #48	; 0x30
 8000d4c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d4e:	f107 031c 	add.w	r3, r7, #28
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
 8000d5c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000d5e:	4b5d      	ldr	r3, [pc, #372]	; (8000ed4 <MX_GPIO_Init+0x18c>)
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	4a5c      	ldr	r2, [pc, #368]	; (8000ed4 <MX_GPIO_Init+0x18c>)
 8000d64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d68:	6153      	str	r3, [r2, #20]
 8000d6a:	4b5a      	ldr	r3, [pc, #360]	; (8000ed4 <MX_GPIO_Init+0x18c>)
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d72:	61bb      	str	r3, [r7, #24]
 8000d74:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d76:	4b57      	ldr	r3, [pc, #348]	; (8000ed4 <MX_GPIO_Init+0x18c>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	4a56      	ldr	r2, [pc, #344]	; (8000ed4 <MX_GPIO_Init+0x18c>)
 8000d7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d80:	6153      	str	r3, [r2, #20]
 8000d82:	4b54      	ldr	r3, [pc, #336]	; (8000ed4 <MX_GPIO_Init+0x18c>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000d8e:	4b51      	ldr	r3, [pc, #324]	; (8000ed4 <MX_GPIO_Init+0x18c>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	4a50      	ldr	r2, [pc, #320]	; (8000ed4 <MX_GPIO_Init+0x18c>)
 8000d94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d98:	6153      	str	r3, [r2, #20]
 8000d9a:	4b4e      	ldr	r3, [pc, #312]	; (8000ed4 <MX_GPIO_Init+0x18c>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b4b      	ldr	r3, [pc, #300]	; (8000ed4 <MX_GPIO_Init+0x18c>)
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	4a4a      	ldr	r2, [pc, #296]	; (8000ed4 <MX_GPIO_Init+0x18c>)
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db0:	6153      	str	r3, [r2, #20]
 8000db2:	4b48      	ldr	r3, [pc, #288]	; (8000ed4 <MX_GPIO_Init+0x18c>)
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000dbe:	4b45      	ldr	r3, [pc, #276]	; (8000ed4 <MX_GPIO_Init+0x18c>)
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	4a44      	ldr	r2, [pc, #272]	; (8000ed4 <MX_GPIO_Init+0x18c>)
 8000dc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000dc8:	6153      	str	r3, [r2, #20]
 8000dca:	4b42      	ldr	r3, [pc, #264]	; (8000ed4 <MX_GPIO_Init+0x18c>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4b3f      	ldr	r3, [pc, #252]	; (8000ed4 <MX_GPIO_Init+0x18c>)
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	4a3e      	ldr	r2, [pc, #248]	; (8000ed4 <MX_GPIO_Init+0x18c>)
 8000ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de0:	6153      	str	r3, [r2, #20]
 8000de2:	4b3c      	ldr	r3, [pc, #240]	; (8000ed4 <MX_GPIO_Init+0x18c>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2108      	movs	r1, #8
 8000df2:	4839      	ldr	r0, [pc, #228]	; (8000ed8 <MX_GPIO_Init+0x190>)
 8000df4:	f001 f970 	bl	80020d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2,
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2107      	movs	r1, #7
 8000dfc:	4837      	ldr	r0, [pc, #220]	; (8000edc <MX_GPIO_Init+0x194>)
 8000dfe:	f001 f96b 	bl	80020d8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000e02:	2200      	movs	r2, #0
 8000e04:	f24f 011e 	movw	r1, #61470	; 0xf01e
 8000e08:	4835      	ldr	r0, [pc, #212]	; (8000ee0 <MX_GPIO_Init+0x198>)
 8000e0a:	f001 f965 	bl	80020d8 <HAL_GPIO_WritePin>
			GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_1
					| GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET);


	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000e0e:	2308      	movs	r3, #8
 8000e10:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	4619      	mov	r1, r3
 8000e24:	482c      	ldr	r0, [pc, #176]	; (8000ed8 <MX_GPIO_Init+0x190>)
 8000e26:	f000 ffdd 	bl	8001de4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC0 PC1 PC2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4826      	ldr	r0, [pc, #152]	; (8000edc <MX_GPIO_Init+0x194>)
 8000e42:	f000 ffcf 	bl	8001de4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e46:	2301      	movs	r3, #1
 8000e48:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e4a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000e4e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	f107 031c 	add.w	r3, r7, #28
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5e:	f000 ffc1 	bl	8001de4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_3;
 8000e62:	230a      	movs	r3, #10
 8000e64:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e66:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000e6a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4619      	mov	r1, r3
 8000e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7a:	f000 ffb3 	bl	8001de4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15
	 PD1 PD2 PD3 PD4 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15
 8000e7e:	f24f 031e 	movw	r3, #61470	; 0xf01e
 8000e82:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	4812      	ldr	r0, [pc, #72]	; (8000ee0 <MX_GPIO_Init+0x198>)
 8000e98:	f000 ffa4 	bl	8001de4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2006      	movs	r0, #6
 8000ea2:	f000 fef2 	bl	8001c8a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ea6:	2006      	movs	r0, #6
 8000ea8:	f000 ff0b 	bl	8001cc2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2007      	movs	r0, #7
 8000eb2:	f000 feea 	bl	8001c8a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000eb6:	2007      	movs	r0, #7
 8000eb8:	f000 ff03 	bl	8001cc2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2009      	movs	r0, #9
 8000ec2:	f000 fee2 	bl	8001c8a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000ec6:	2009      	movs	r0, #9
 8000ec8:	f000 fefb 	bl	8001cc2 <HAL_NVIC_EnableIRQ>

}
 8000ecc:	bf00      	nop
 8000ece:	3730      	adds	r7, #48	; 0x30
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	48001000 	.word	0x48001000
 8000edc:	48000800 	.word	0x48000800
 8000ee0:	48000c00 	.word	0x48000c00

08000ee4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 8000eee:	f000 fde5 	bl	8001abc <HAL_GetTick>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4a91      	ldr	r2, [pc, #580]	; (800113c <HAL_GPIO_EXTI_Callback+0x258>)
 8000ef6:	6013      	str	r3, [r2, #0]
	if ((GPIO_Pin == GPIO_PIN_1) && LED != 4) {
 8000ef8:	88fb      	ldrh	r3, [r7, #6]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d116      	bne.n	8000f2c <HAL_GPIO_EXTI_Callback+0x48>
 8000efe:	4b90      	ldr	r3, [pc, #576]	; (8001140 <HAL_GPIO_EXTI_Callback+0x25c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	d012      	beq.n	8000f2c <HAL_GPIO_EXTI_Callback+0x48>
		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 8000f06:	4b8d      	ldr	r3, [pc, #564]	; (800113c <HAL_GPIO_EXTI_Callback+0x258>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4b8e      	ldr	r3, [pc, #568]	; (8001144 <HAL_GPIO_EXTI_Callback+0x260>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000f14:	f240 8152 	bls.w	80011bc <HAL_GPIO_EXTI_Callback+0x2d8>
//			counterInside++;
			increase(LED);
 8000f18:	4b89      	ldr	r3, [pc, #548]	; (8001140 <HAL_GPIO_EXTI_Callback+0x25c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fc43 	bl	80007a8 <increase>
			previousMillis = currentMillis;
 8000f22:	4b86      	ldr	r3, [pc, #536]	; (800113c <HAL_GPIO_EXTI_Callback+0x258>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a87      	ldr	r2, [pc, #540]	; (8001144 <HAL_GPIO_EXTI_Callback+0x260>)
 8000f28:	6013      	str	r3, [r2, #0]
		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 8000f2a:	e147      	b.n	80011bc <HAL_GPIO_EXTI_Callback+0x2d8>
		}
	} else if ((GPIO_Pin == GPIO_PIN_3)) {
 8000f2c:	88fb      	ldrh	r3, [r7, #6]
 8000f2e:	2b08      	cmp	r3, #8
 8000f30:	f040 812a 	bne.w	8001188 <HAL_GPIO_EXTI_Callback+0x2a4>

		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 8000f34:	4b81      	ldr	r3, [pc, #516]	; (800113c <HAL_GPIO_EXTI_Callback+0x258>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b82      	ldr	r3, [pc, #520]	; (8001144 <HAL_GPIO_EXTI_Callback+0x260>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000f42:	f240 813b 	bls.w	80011bc <HAL_GPIO_EXTI_Callback+0x2d8>
			if (nextTurn < 6)
 8000f46:	4b80      	ldr	r3, [pc, #512]	; (8001148 <HAL_GPIO_EXTI_Callback+0x264>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b05      	cmp	r3, #5
 8000f4c:	dc04      	bgt.n	8000f58 <HAL_GPIO_EXTI_Callback+0x74>
				nextTurn++;
 8000f4e:	4b7e      	ldr	r3, [pc, #504]	; (8001148 <HAL_GPIO_EXTI_Callback+0x264>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	3301      	adds	r3, #1
 8000f54:	4a7c      	ldr	r2, [pc, #496]	; (8001148 <HAL_GPIO_EXTI_Callback+0x264>)
 8000f56:	6013      	str	r3, [r2, #0]
			if ((isCorrect == -1) && nextTurn == 6) {
 8000f58:	4b7c      	ldr	r3, [pc, #496]	; (800114c <HAL_GPIO_EXTI_Callback+0x268>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f60:	d126      	bne.n	8000fb0 <HAL_GPIO_EXTI_Callback+0xcc>
 8000f62:	4b79      	ldr	r3, [pc, #484]	; (8001148 <HAL_GPIO_EXTI_Callback+0x264>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	d122      	bne.n	8000fb0 <HAL_GPIO_EXTI_Callback+0xcc>
				for (int i = 0; i < 4; i++) {
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	e007      	b.n	8000f80 <HAL_GPIO_EXTI_Callback+0x9c>
					carrier[i] = 0;
 8000f70:	4a77      	ldr	r2, [pc, #476]	; (8001150 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	2100      	movs	r1, #0
 8000f76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int i = 0; i < 4; i++) {
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	ddf4      	ble.n	8000f70 <HAL_GPIO_EXTI_Callback+0x8c>
				    //password[i] = 0;
				}
				//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2102      	movs	r1, #2
 8000f8a:	4872      	ldr	r0, [pc, #456]	; (8001154 <HAL_GPIO_EXTI_Callback+0x270>)
 8000f8c:	f001 f8a4 	bl	80020d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2104      	movs	r1, #4
 8000f94:	486f      	ldr	r0, [pc, #444]	; (8001154 <HAL_GPIO_EXTI_Callback+0x270>)
 8000f96:	f001 f89f 	bl	80020d8 <HAL_GPIO_WritePin>
				LED = -1;
 8000f9a:	4b69      	ldr	r3, [pc, #420]	; (8001140 <HAL_GPIO_EXTI_Callback+0x25c>)
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa0:	601a      	str	r2, [r3, #0]
				nextTurn = 0;
 8000fa2:	4b69      	ldr	r3, [pc, #420]	; (8001148 <HAL_GPIO_EXTI_Callback+0x264>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
				blink = 1;
 8000fa8:	4b6b      	ldr	r3, [pc, #428]	; (8001158 <HAL_GPIO_EXTI_Callback+0x274>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	601a      	str	r2, [r3, #0]
				return;
 8000fae:	e105      	b.n	80011bc <HAL_GPIO_EXTI_Callback+0x2d8>
			} else if ((isCorrect != 0 && isCorrect != 1)) {
 8000fb0:	4b66      	ldr	r3, [pc, #408]	; (800114c <HAL_GPIO_EXTI_Callback+0x268>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 80bb 	beq.w	8001130 <HAL_GPIO_EXTI_Callback+0x24c>
 8000fba:	4b64      	ldr	r3, [pc, #400]	; (800114c <HAL_GPIO_EXTI_Callback+0x268>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	f000 80b6 	beq.w	8001130 <HAL_GPIO_EXTI_Callback+0x24c>

				LED += 1;
 8000fc4:	4b5e      	ldr	r3, [pc, #376]	; (8001140 <HAL_GPIO_EXTI_Callback+0x25c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	4a5d      	ldr	r2, [pc, #372]	; (8001140 <HAL_GPIO_EXTI_Callback+0x25c>)
 8000fcc:	6013      	str	r3, [r2, #0]
				if (LED == 4) {
 8000fce:	4b5c      	ldr	r3, [pc, #368]	; (8001140 <HAL_GPIO_EXTI_Callback+0x25c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	f040 80ac 	bne.w	8001130 <HAL_GPIO_EXTI_Callback+0x24c>
					int bool = 1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
					for (int i = 0; i < 4; i++) {
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	e061      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x1c2>
						if (password[i] != carrier[i]) {
 8000fe2:	4a5e      	ldr	r2, [pc, #376]	; (800115c <HAL_GPIO_EXTI_Callback+0x278>)
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fea:	4959      	ldr	r1, [pc, #356]	; (8001150 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d054      	beq.n	80010a0 <HAL_GPIO_EXTI_Callback+0x1bc>
							bool = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
							logFailed[4] = carrier[0] + '0';
 8000ffa:	4b55      	ldr	r3, [pc, #340]	; (8001150 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	3330      	adds	r3, #48	; 0x30
 8001002:	b2da      	uxtb	r2, r3
 8001004:	4b56      	ldr	r3, [pc, #344]	; (8001160 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001006:	711a      	strb	r2, [r3, #4]
							logFailed[5] = carrier[1] + '0';
 8001008:	4b51      	ldr	r3, [pc, #324]	; (8001150 <HAL_GPIO_EXTI_Callback+0x26c>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	3330      	adds	r3, #48	; 0x30
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4b53      	ldr	r3, [pc, #332]	; (8001160 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001014:	715a      	strb	r2, [r3, #5]
							logFailed[6] = carrier[2] + '0';
 8001016:	4b4e      	ldr	r3, [pc, #312]	; (8001150 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	3330      	adds	r3, #48	; 0x30
 800101e:	b2da      	uxtb	r2, r3
 8001020:	4b4f      	ldr	r3, [pc, #316]	; (8001160 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001022:	719a      	strb	r2, [r3, #6]
							logFailed[7] = carrier[3] + '0';
 8001024:	4b4a      	ldr	r3, [pc, #296]	; (8001150 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	3330      	adds	r3, #48	; 0x30
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4b4c      	ldr	r3, [pc, #304]	; (8001160 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001030:	71da      	strb	r2, [r3, #7]
							isCorrect = 0;
 8001032:	4b46      	ldr	r3, [pc, #280]	; (800114c <HAL_GPIO_EXTI_Callback+0x268>)
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
							if (logStatus)
 8001038:	4b4a      	ldr	r3, [pc, #296]	; (8001164 <HAL_GPIO_EXTI_Callback+0x280>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d004      	beq.n	800104a <HAL_GPIO_EXTI_Callback+0x166>
								HAL_UART_Transmit_IT(&huart1, logFailed, 18);
 8001040:	2212      	movs	r2, #18
 8001042:	4947      	ldr	r1, [pc, #284]	; (8001160 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001044:	4848      	ldr	r0, [pc, #288]	; (8001168 <HAL_GPIO_EXTI_Callback+0x284>)
 8001046:	f004 fa49 	bl	80054dc <HAL_UART_Transmit_IT>
							prevEnterTime = HAL_GetTick();
 800104a:	f000 fd37 	bl	8001abc <HAL_GetTick>
 800104e:	4603      	mov	r3, r0
 8001050:	4a46      	ldr	r2, [pc, #280]	; (800116c <HAL_GPIO_EXTI_Callback+0x288>)
 8001052:	6013      	str	r3, [r2, #0]
							wrongPassCounter++;
 8001054:	4b46      	ldr	r3, [pc, #280]	; (8001170 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	4a45      	ldr	r2, [pc, #276]	; (8001170 <HAL_GPIO_EXTI_Callback+0x28c>)
 800105c:	6013      	str	r3, [r2, #0]
							if (wrongPassCounter % 3 == 0)
 800105e:	4b44      	ldr	r3, [pc, #272]	; (8001170 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001060:	6819      	ldr	r1, [r3, #0]
 8001062:	4b44      	ldr	r3, [pc, #272]	; (8001174 <HAL_GPIO_EXTI_Callback+0x290>)
 8001064:	fb83 3201 	smull	r3, r2, r3, r1
 8001068:	17cb      	asrs	r3, r1, #31
 800106a:	1ad2      	subs	r2, r2, r3
 800106c:	4613      	mov	r3, r2
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	4413      	add	r3, r2
 8001072:	1aca      	subs	r2, r1, r3
 8001074:	2a00      	cmp	r2, #0
 8001076:	d103      	bne.n	8001080 <HAL_GPIO_EXTI_Callback+0x19c>
								buzzer_flag = SuperWrongPass;
 8001078:	4b3f      	ldr	r3, [pc, #252]	; (8001178 <HAL_GPIO_EXTI_Callback+0x294>)
 800107a:	2204      	movs	r2, #4
 800107c:	701a      	strb	r2, [r3, #0]
 800107e:	e002      	b.n	8001086 <HAL_GPIO_EXTI_Callback+0x1a2>
							else
								buzzer_flag = WrongPass;
 8001080:	4b3d      	ldr	r3, [pc, #244]	; (8001178 <HAL_GPIO_EXTI_Callback+0x294>)
 8001082:	2203      	movs	r2, #3
 8001084:	701a      	strb	r2, [r3, #0]
							buzzerEnterTime = HAL_GetTick();
 8001086:	f000 fd19 	bl	8001abc <HAL_GetTick>
 800108a:	4603      	mov	r3, r0
 800108c:	4a3b      	ldr	r2, [pc, #236]	; (800117c <HAL_GPIO_EXTI_Callback+0x298>)
 800108e:	6013      	str	r3, [r2, #0]
							if (alertStatus)
 8001090:	4b3b      	ldr	r3, [pc, #236]	; (8001180 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	f000 8090 	beq.w	80011ba <HAL_GPIO_EXTI_Callback+0x2d6>
								PWM_Start();
 800109a:	f7ff f895 	bl	80001c8 <PWM_Start>
							return;
 800109e:	e08c      	b.n	80011ba <HAL_GPIO_EXTI_Callback+0x2d6>
					for (int i = 0; i < 4; i++) {
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	3301      	adds	r3, #1
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	dd9a      	ble.n	8000fe2 <HAL_GPIO_EXTI_Callback+0xfe>
						}
					}
					if (bool) {
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d03e      	beq.n	8001130 <HAL_GPIO_EXTI_Callback+0x24c>
						logCorrect[4] = carrier[0] + '0';
 80010b2:	4b27      	ldr	r3, [pc, #156]	; (8001150 <HAL_GPIO_EXTI_Callback+0x26c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	3330      	adds	r3, #48	; 0x30
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	4b31      	ldr	r3, [pc, #196]	; (8001184 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80010be:	711a      	strb	r2, [r3, #4]
						logCorrect[5] = carrier[1] + '0';
 80010c0:	4b23      	ldr	r3, [pc, #140]	; (8001150 <HAL_GPIO_EXTI_Callback+0x26c>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	3330      	adds	r3, #48	; 0x30
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b2e      	ldr	r3, [pc, #184]	; (8001184 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80010cc:	715a      	strb	r2, [r3, #5]
						logCorrect[6] = carrier[2] + '0';
 80010ce:	4b20      	ldr	r3, [pc, #128]	; (8001150 <HAL_GPIO_EXTI_Callback+0x26c>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	3330      	adds	r3, #48	; 0x30
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80010da:	719a      	strb	r2, [r3, #6]
						logCorrect[7] = carrier[3] + '0';
 80010dc:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <HAL_GPIO_EXTI_Callback+0x26c>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	3330      	adds	r3, #48	; 0x30
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b27      	ldr	r3, [pc, #156]	; (8001184 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80010e8:	71da      	strb	r2, [r3, #7]
						isCorrect = 1;
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <HAL_GPIO_EXTI_Callback+0x268>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	601a      	str	r2, [r3, #0]
						if (logStatus)
 80010f0:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <HAL_GPIO_EXTI_Callback+0x280>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d004      	beq.n	8001102 <HAL_GPIO_EXTI_Callback+0x21e>
							HAL_UART_Transmit_IT(&huart1, logCorrect, 19);
 80010f8:	2213      	movs	r2, #19
 80010fa:	4922      	ldr	r1, [pc, #136]	; (8001184 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80010fc:	481a      	ldr	r0, [pc, #104]	; (8001168 <HAL_GPIO_EXTI_Callback+0x284>)
 80010fe:	f004 f9ed 	bl	80054dc <HAL_UART_Transmit_IT>
						prevEnterTime = HAL_GetTick();
 8001102:	f000 fcdb 	bl	8001abc <HAL_GetTick>
 8001106:	4603      	mov	r3, r0
 8001108:	4a18      	ldr	r2, [pc, #96]	; (800116c <HAL_GPIO_EXTI_Callback+0x288>)
 800110a:	6013      	str	r3, [r2, #0]
						buzzer_flag = CorrectPass;
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <HAL_GPIO_EXTI_Callback+0x294>)
 800110e:	2202      	movs	r2, #2
 8001110:	701a      	strb	r2, [r3, #0]
						buzzerEnterTime = HAL_GetTick();
 8001112:	f000 fcd3 	bl	8001abc <HAL_GetTick>
 8001116:	4603      	mov	r3, r0
 8001118:	4a18      	ldr	r2, [pc, #96]	; (800117c <HAL_GPIO_EXTI_Callback+0x298>)
 800111a:	6013      	str	r3, [r2, #0]
						if (alertStatus)
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <HAL_GPIO_EXTI_Callback+0x29c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <HAL_GPIO_EXTI_Callback+0x244>
							PWM_Start();
 8001124:	f7ff f850 	bl	80001c8 <PWM_Start>
						wrongPassCounter = 0;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <HAL_GPIO_EXTI_Callback+0x28c>)
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
						return;
 800112e:	e045      	b.n	80011bc <HAL_GPIO_EXTI_Callback+0x2d8>
					}
				}
			}
			previousMillis = currentMillis;
 8001130:	4b02      	ldr	r3, [pc, #8]	; (800113c <HAL_GPIO_EXTI_Callback+0x258>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a03      	ldr	r2, [pc, #12]	; (8001144 <HAL_GPIO_EXTI_Callback+0x260>)
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	e040      	b.n	80011bc <HAL_GPIO_EXTI_Callback+0x2d8>
 800113a:	bf00      	nop
 800113c:	2000059c 	.word	0x2000059c
 8001140:	200005b8 	.word	0x200005b8
 8001144:	20000598 	.word	0x20000598
 8001148:	200005a8 	.word	0x200005a8
 800114c:	20000040 	.word	0x20000040
 8001150:	20000584 	.word	0x20000584
 8001154:	48000800 	.word	0x48000800
 8001158:	20000044 	.word	0x20000044
 800115c:	20000000 	.word	0x20000000
 8001160:	20000024 	.word	0x20000024
 8001164:	20000038 	.word	0x20000038
 8001168:	20000208 	.word	0x20000208
 800116c:	200005b0 	.word	0x200005b0
 8001170:	20000594 	.word	0x20000594
 8001174:	55555556 	.word	0x55555556
 8001178:	20000048 	.word	0x20000048
 800117c:	200005b4 	.word	0x200005b4
 8001180:	2000003c 	.word	0x2000003c
 8001184:	20000010 	.word	0x20000010
		}

	} else if (GPIO_Pin == GPIO_PIN_0 && isCorrect == 0) {
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d116      	bne.n	80011bc <HAL_GPIO_EXTI_Callback+0x2d8>
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d112      	bne.n	80011bc <HAL_GPIO_EXTI_Callback+0x2d8>
		blink = 0;
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
		isCorrect = -1;
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800119e:	f04f 32ff 	mov.w	r2, #4294967295
 80011a2:	601a      	str	r2, [r3, #0]
		prevEnterTime = HAL_GetTick();
 80011a4:	f000 fc8a 	bl	8001abc <HAL_GetTick>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4a08      	ldr	r2, [pc, #32]	; (80011cc <HAL_GPIO_EXTI_Callback+0x2e8>)
 80011ac:	6013      	str	r3, [r2, #0]
		PWM_Stop();
 80011ae:	f7ff f81b 	bl	80001e8 <PWM_Stop>
		buzzer_flag = NONE;
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80011b4:	2205      	movs	r2, #5
 80011b6:	701a      	strb	r2, [r3, #0]
 80011b8:	e000      	b.n	80011bc <HAL_GPIO_EXTI_Callback+0x2d8>
							return;
 80011ba:	bf00      	nop
	}
}
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000040 	.word	0x20000040
 80011c8:	20000044 	.word	0x20000044
 80011cc:	200005b0 	.word	0x200005b0
 80011d0:	20000048 	.word	0x20000048

080011d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4aa8      	ldr	r2, [pc, #672]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	f040 81bc 	bne.w	8001560 <HAL_TIM_PeriodElapsedCallback+0x38c>
		if (index == LED && HAL_GetTick() - prevTime < 400) {
 80011e8:	4ba7      	ldr	r3, [pc, #668]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4ba7      	ldr	r3, [pc, #668]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d119      	bne.n	8001228 <HAL_TIM_PeriodElapsedCallback+0x54>
 80011f4:	f000 fc62 	bl	8001abc <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	4ba5      	ldr	r3, [pc, #660]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001204:	d210      	bcs.n	8001228 <HAL_TIM_PeriodElapsedCallback+0x54>
			display_number(index, carrier[index]);
 8001206:	4ba0      	ldr	r3, [pc, #640]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4b9f      	ldr	r3, [pc, #636]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	49a1      	ldr	r1, [pc, #644]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001214:	4619      	mov	r1, r3
 8001216:	4610      	mov	r0, r2
 8001218:	f7ff fa92 	bl	8000740 <display_number>
			coolDownTimer = HAL_GetTick();
 800121c:	f000 fc4e 	bl	8001abc <HAL_GetTick>
 8001220:	4603      	mov	r3, r0
 8001222:	4a9d      	ldr	r2, [pc, #628]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	e02d      	b.n	8001284 <HAL_TIM_PeriodElapsedCallback+0xb0>
		} else if (index == LED && HAL_GetTick() - prevTime > 900) {
 8001228:	4b97      	ldr	r3, [pc, #604]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b97      	ldr	r3, [pc, #604]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	429a      	cmp	r2, r3
 8001232:	d116      	bne.n	8001262 <HAL_TIM_PeriodElapsedCallback+0x8e>
 8001234:	f000 fc42 	bl	8001abc <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	4b95      	ldr	r3, [pc, #596]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001244:	d90d      	bls.n	8001262 <HAL_TIM_PeriodElapsedCallback+0x8e>
			//coolDown
			if (HAL_GetTick() - coolDownTimer > 100) {
 8001246:	f000 fc39 	bl	8001abc <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	4b92      	ldr	r3, [pc, #584]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b64      	cmp	r3, #100	; 0x64
 8001254:	d916      	bls.n	8001284 <HAL_TIM_PeriodElapsedCallback+0xb0>
				prevTime = HAL_GetTick();
 8001256:	f000 fc31 	bl	8001abc <HAL_GetTick>
 800125a:	4603      	mov	r3, r0
 800125c:	4a8c      	ldr	r2, [pc, #560]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800125e:	6013      	str	r3, [r2, #0]
			if (HAL_GetTick() - coolDownTimer > 100) {
 8001260:	e010      	b.n	8001284 <HAL_TIM_PeriodElapsedCallback+0xb0>
			}
		} else if (index != LED) {
 8001262:	4b89      	ldr	r3, [pc, #548]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	4b89      	ldr	r3, [pc, #548]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	429a      	cmp	r2, r3
 800126c:	d00a      	beq.n	8001284 <HAL_TIM_PeriodElapsedCallback+0xb0>
			display_number(index, carrier[index]);
 800126e:	4b86      	ldr	r3, [pc, #536]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4b85      	ldr	r3, [pc, #532]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4987      	ldr	r1, [pc, #540]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001278:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800127c:	4619      	mov	r1, r3
 800127e:	4610      	mov	r0, r2
 8001280:	f7ff fa5e 	bl	8000740 <display_number>
		}
		if (index == 4) {
 8001284:	4b80      	ldr	r3, [pc, #512]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b04      	cmp	r3, #4
 800128a:	d105      	bne.n	8001298 <HAL_TIM_PeriodElapsedCallback+0xc4>
			index = 0;
 800128c:	4b7e      	ldr	r3, [pc, #504]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
			init_display();
 8001292:	f7ff faa9 	bl	80007e8 <init_display>
 8001296:	e004      	b.n	80012a2 <HAL_TIM_PeriodElapsedCallback+0xce>
		} else {
			++index;
 8001298:	4b7b      	ldr	r3, [pc, #492]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3301      	adds	r3, #1
 800129e:	4a7a      	ldr	r2, [pc, #488]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80012a0:	6013      	str	r3, [r2, #0]
		}

		if (isCorrect == 1 && blink == 1) {
 80012a2:	4b7e      	ldr	r3, [pc, #504]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d123      	bne.n	80012f2 <HAL_TIM_PeriodElapsedCallback+0x11e>
 80012aa:	4b7d      	ldr	r3, [pc, #500]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d11f      	bne.n	80012f2 <HAL_TIM_PeriodElapsedCallback+0x11e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 80012b2:	2201      	movs	r2, #1
 80012b4:	2102      	movs	r1, #2
 80012b6:	487b      	ldr	r0, [pc, #492]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80012b8:	f000 ff0e 	bl	80020d8 <HAL_GPIO_WritePin>
			if (HAL_GetTick() - prevEnterTime > 5000) {
 80012bc:	f000 fbfe 	bl	8001abc <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	4b79      	ldr	r3, [pc, #484]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d910      	bls.n	80012f2 <HAL_TIM_PeriodElapsedCallback+0x11e>
				blink = 0;
 80012d0:	4b73      	ldr	r3, [pc, #460]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2102      	movs	r1, #2
 80012da:	4872      	ldr	r0, [pc, #456]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80012dc:	f000 fefc 	bl	80020d8 <HAL_GPIO_WritePin>
				prevEnterTime = HAL_GetTick();
 80012e0:	f000 fbec 	bl	8001abc <HAL_GetTick>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4a70      	ldr	r2, [pc, #448]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80012e8:	6013      	str	r3, [r2, #0]
				isCorrect = -1;
 80012ea:	4b6c      	ldr	r3, [pc, #432]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80012ec:	f04f 32ff 	mov.w	r2, #4294967295
 80012f0:	601a      	str	r2, [r3, #0]
			}
		}

		if (isCorrect == 0 && blink == 1) {
 80012f2:	4b6a      	ldr	r3, [pc, #424]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d134      	bne.n	8001364 <HAL_TIM_PeriodElapsedCallback+0x190>
 80012fa:	4b69      	ldr	r3, [pc, #420]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d130      	bne.n	8001364 <HAL_TIM_PeriodElapsedCallback+0x190>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2104      	movs	r1, #4
 8001306:	4867      	ldr	r0, [pc, #412]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001308:	f000 fee6 	bl	80020d8 <HAL_GPIO_WritePin>
			if (HAL_GetTick() - prevEnterTime < 5000) {
 800130c:	f000 fbd6 	bl	8001abc <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	4b65      	ldr	r3, [pc, #404]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	f241 3287 	movw	r2, #4999	; 0x1387
 800131c:	4293      	cmp	r3, r2
 800131e:	d811      	bhi.n	8001344 <HAL_TIM_PeriodElapsedCallback+0x170>
				if (HAL_GetTick() - prevTime > 100) {
 8001320:	f000 fbcc 	bl	8001abc <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	4b5a      	ldr	r3, [pc, #360]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b64      	cmp	r3, #100	; 0x64
 800132e:	d919      	bls.n	8001364 <HAL_TIM_PeriodElapsedCallback+0x190>
					HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 8001330:	2104      	movs	r1, #4
 8001332:	485c      	ldr	r0, [pc, #368]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001334:	f000 fee8 	bl	8002108 <HAL_GPIO_TogglePin>
					prevTime = HAL_GetTick();
 8001338:	f000 fbc0 	bl	8001abc <HAL_GetTick>
 800133c:	4603      	mov	r3, r0
 800133e:	4a54      	ldr	r2, [pc, #336]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e00f      	b.n	8001364 <HAL_TIM_PeriodElapsedCallback+0x190>
				}
			} else {
				if (buzzer_flag != SuperWrongPass) {
 8001344:	4b59      	ldr	r3, [pc, #356]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b04      	cmp	r3, #4
 800134a:	d00b      	beq.n	8001364 <HAL_TIM_PeriodElapsedCallback+0x190>
					blink = 0;
 800134c:	4b54      	ldr	r3, [pc, #336]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
					isCorrect = -1;
 8001352:	4b52      	ldr	r3, [pc, #328]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001354:	f04f 32ff 	mov.w	r2, #4294967295
 8001358:	601a      	str	r2, [r3, #0]
					prevEnterTime = HAL_GetTick();
 800135a:	f000 fbaf 	bl	8001abc <HAL_GetTick>
 800135e:	4603      	mov	r3, r0
 8001360:	4a51      	ldr	r2, [pc, #324]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001362:	6013      	str	r3, [r2, #0]
				}
			}
		}

		switch (buzzer_flag) {
 8001364:	4b51      	ldr	r3, [pc, #324]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b04      	cmp	r3, #4
 800136a:	f200 80fc 	bhi.w	8001566 <HAL_TIM_PeriodElapsedCallback+0x392>
 800136e:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001374:	08001389 	.word	0x08001389
 8001378:	080013bf 	.word	0x080013bf
 800137c:	08001423 	.word	0x08001423
 8001380:	080014e5 	.word	0x080014e5
 8001384:	08001551 	.word	0x08001551
		case CorrectInput:
			if (buzzer_flag == CorrectInput) {
 8001388:	4b48      	ldr	r3, [pc, #288]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	f040 80e9 	bne.w	8001564 <HAL_TIM_PeriodElapsedCallback+0x390>
				if (HAL_GetTick() - buzzerEnterTime < 50) {
 8001392:	f000 fb93 	bl	8001abc <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	4b45      	ldr	r3, [pc, #276]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b31      	cmp	r3, #49	; 0x31
 80013a0:	d807      	bhi.n	80013b2 <HAL_TIM_PeriodElapsedCallback+0x1de>
					PWM_Change_Tone(507, _volume);
 80013a2:	4b44      	ldr	r3, [pc, #272]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	4619      	mov	r1, r3
 80013a8:	f240 10fb 	movw	r0, #507	; 0x1fb
 80013ac:	f7fe ff2c 	bl	8000208 <PWM_Change_Tone>
				} else {
					PWM_Stop();
					buzzer_flag = NONE;
				}
			}
			break;
 80013b0:	e0d8      	b.n	8001564 <HAL_TIM_PeriodElapsedCallback+0x390>
					PWM_Stop();
 80013b2:	f7fe ff19 	bl	80001e8 <PWM_Stop>
					buzzer_flag = NONE;
 80013b6:	4b3d      	ldr	r3, [pc, #244]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80013b8:	2205      	movs	r2, #5
 80013ba:	701a      	strb	r2, [r3, #0]
			break;
 80013bc:	e0d2      	b.n	8001564 <HAL_TIM_PeriodElapsedCallback+0x390>
		case WrongInput:
			if (HAL_GetTick() - buzzerEnterTime < 1000) {
 80013be:	f000 fb7d 	bl	8001abc <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	4b3a      	ldr	r3, [pc, #232]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013ce:	d222      	bcs.n	8001416 <HAL_TIM_PeriodElapsedCallback+0x242>
				if (HAL_GetTick() - buzzerCoolDown < 50) {
 80013d0:	f000 fb74 	bl	8001abc <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	4b38      	ldr	r3, [pc, #224]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b31      	cmp	r3, #49	; 0x31
 80013de:	d806      	bhi.n	80013ee <HAL_TIM_PeriodElapsedCallback+0x21a>
					PWM_Change_Tone(236, _volume);
 80013e0:	4b34      	ldr	r3, [pc, #208]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	20ec      	movs	r0, #236	; 0xec
 80013e8:	f7fe ff0e 	bl	8000208 <PWM_Change_Tone>
					buzzerCoolDown = HAL_GetTick();
			} else {
				PWM_Stop();
				buzzer_flag = NONE;
			}
			break;
 80013ec:	e0bb      	b.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x392>
				} else if (HAL_GetTick() - buzzerCoolDown < 300) {
 80013ee:	f000 fb65 	bl	8001abc <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	4b30      	ldr	r3, [pc, #192]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80013fe:	d204      	bcs.n	800140a <HAL_TIM_PeriodElapsedCallback+0x236>
					PWM_Change_Tone(0, 0);
 8001400:	2100      	movs	r1, #0
 8001402:	2000      	movs	r0, #0
 8001404:	f7fe ff00 	bl	8000208 <PWM_Change_Tone>
			break;
 8001408:	e0ad      	b.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x392>
					buzzerCoolDown = HAL_GetTick();
 800140a:	f000 fb57 	bl	8001abc <HAL_GetTick>
 800140e:	4603      	mov	r3, r0
 8001410:	4a29      	ldr	r2, [pc, #164]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001412:	6013      	str	r3, [r2, #0]
			break;
 8001414:	e0a7      	b.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x392>
				PWM_Stop();
 8001416:	f7fe fee7 	bl	80001e8 <PWM_Stop>
				buzzer_flag = NONE;
 800141a:	4b24      	ldr	r3, [pc, #144]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800141c:	2205      	movs	r2, #5
 800141e:	701a      	strb	r2, [r3, #0]
			break;
 8001420:	e0a1      	b.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x392>
		case CorrectPass:
			if (HAL_GetTick() - buzzerEnterTime < 1200) {
 8001422:	f000 fb4b 	bl	8001abc <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001432:	d251      	bcs.n	80014d8 <HAL_TIM_PeriodElapsedCallback+0x304>
				if (HAL_GetTick() - buzzerEnterTime < 800) {
 8001434:	f000 fb42 	bl	8001abc <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001444:	d240      	bcs.n	80014c8 <HAL_TIM_PeriodElapsedCallback+0x2f4>
					if (HAL_GetTick() - buzzerCoolDown < 50) {
 8001446:	f000 fb39 	bl	8001abc <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b31      	cmp	r3, #49	; 0x31
 8001454:	d807      	bhi.n	8001466 <HAL_TIM_PeriodElapsedCallback+0x292>
						PWM_Change_Tone(1000, _volume);
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	4619      	mov	r1, r3
 800145c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001460:	f7fe fed2 	bl	8000208 <PWM_Change_Tone>
				}
			} else {
				PWM_Stop();
				buzzer_flag = NONE;
			}
			break;
 8001464:	e07f      	b.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x392>
					} else if (HAL_GetTick() - buzzerCoolDown < 100) {
 8001466:	f000 fb29 	bl	8001abc <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b63      	cmp	r3, #99	; 0x63
 8001474:	d822      	bhi.n	80014bc <HAL_TIM_PeriodElapsedCallback+0x2e8>
						PWM_Change_Tone(0, _volume);
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	4619      	mov	r1, r3
 800147c:	2000      	movs	r0, #0
 800147e:	f7fe fec3 	bl	8000208 <PWM_Change_Tone>
			break;
 8001482:	e070      	b.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x392>
 8001484:	40012c00 	.word	0x40012c00
 8001488:	200005ac 	.word	0x200005ac
 800148c:	200005b8 	.word	0x200005b8
 8001490:	200005a0 	.word	0x200005a0
 8001494:	20000584 	.word	0x20000584
 8001498:	200005a4 	.word	0x200005a4
 800149c:	20000040 	.word	0x20000040
 80014a0:	20000044 	.word	0x20000044
 80014a4:	48000800 	.word	0x48000800
 80014a8:	200005b0 	.word	0x200005b0
 80014ac:	20000048 	.word	0x20000048
 80014b0:	200005b4 	.word	0x200005b4
 80014b4:	20000050 	.word	0x20000050
 80014b8:	2000060c 	.word	0x2000060c
						buzzerCoolDown = HAL_GetTick();
 80014bc:	f000 fafe 	bl	8001abc <HAL_GetTick>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4a2b      	ldr	r2, [pc, #172]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80014c4:	6013      	str	r3, [r2, #0]
			break;
 80014c6:	e04e      	b.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x392>
					PWM_Change_Tone(1000, _volume);
 80014c8:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	4619      	mov	r1, r3
 80014ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014d2:	f7fe fe99 	bl	8000208 <PWM_Change_Tone>
			break;
 80014d6:	e046      	b.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x392>
				PWM_Stop();
 80014d8:	f7fe fe86 	bl	80001e8 <PWM_Stop>
				buzzer_flag = NONE;
 80014dc:	4b26      	ldr	r3, [pc, #152]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80014de:	2205      	movs	r2, #5
 80014e0:	701a      	strb	r2, [r3, #0]
			break;
 80014e2:	e040      	b.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x392>
		case WrongPass:
			if (HAL_GetTick() - buzzerEnterTime < 1500) {
 80014e4:	f000 faea 	bl	8001abc <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	4b24      	ldr	r3, [pc, #144]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	f240 52db 	movw	r2, #1499	; 0x5db
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d825      	bhi.n	8001544 <HAL_TIM_PeriodElapsedCallback+0x370>
				if (HAL_GetTick() - buzzerCoolDown < 150) {
 80014f8:	f000 fae0 	bl	8001abc <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b95      	cmp	r3, #149	; 0x95
 8001506:	d807      	bhi.n	8001518 <HAL_TIM_PeriodElapsedCallback+0x344>
					PWM_Change_Tone(700, _volume);
 8001508:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001512:	f7fe fe79 	bl	8000208 <PWM_Change_Tone>
					buzzerCoolDown = HAL_GetTick();
			} else {
				PWM_Stop();
				buzzer_flag = NONE;
			}
			break;
 8001516:	e026      	b.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x392>
				} else if (HAL_GetTick() - buzzerCoolDown < 450) {
 8001518:	f000 fad0 	bl	8001abc <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8001528:	d206      	bcs.n	8001538 <HAL_TIM_PeriodElapsedCallback+0x364>
					PWM_Change_Tone(0, _volume);
 800152a:	4b12      	ldr	r3, [pc, #72]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	4619      	mov	r1, r3
 8001530:	2000      	movs	r0, #0
 8001532:	f7fe fe69 	bl	8000208 <PWM_Change_Tone>
			break;
 8001536:	e016      	b.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x392>
					buzzerCoolDown = HAL_GetTick();
 8001538:	f000 fac0 	bl	8001abc <HAL_GetTick>
 800153c:	4603      	mov	r3, r0
 800153e:	4a0c      	ldr	r2, [pc, #48]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001540:	6013      	str	r3, [r2, #0]
			break;
 8001542:	e010      	b.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x392>
				PWM_Stop();
 8001544:	f7fe fe50 	bl	80001e8 <PWM_Stop>
				buzzer_flag = NONE;
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800154a:	2205      	movs	r2, #5
 800154c:	701a      	strb	r2, [r3, #0]
			break;
 800154e:	e00a      	b.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x392>
		case SuperWrongPass:
			PWM_Change_Tone(1000, _volume);
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	4619      	mov	r1, r3
 8001556:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800155a:	f7fe fe55 	bl	8000208 <PWM_Change_Tone>
			break;
 800155e:	e002      	b.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x392>
		}
	}
 8001560:	bf00      	nop
 8001562:	e000      	b.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x392>
			break;
 8001564:	bf00      	nop
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	2000060c 	.word	0x2000060c
 8001574:	20000050 	.word	0x20000050
 8001578:	20000048 	.word	0x20000048
 800157c:	200005b4 	.word	0x200005b4

08001580 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001588:	e7fe      	b.n	8001588 <Error_Handler+0x8>
	...

0800158c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <HAL_MspInit+0x44>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <HAL_MspInit+0x44>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6193      	str	r3, [r2, #24]
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <HAL_MspInit+0x44>)
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_MspInit+0x44>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <HAL_MspInit+0x44>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	61d3      	str	r3, [r2, #28]
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_MspInit+0x44>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015c2:	2007      	movs	r0, #7
 80015c4:	f000 fb56 	bl	8001c74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40021000 	.word	0x40021000

080015d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a17      	ldr	r2, [pc, #92]	; (8001650 <HAL_I2C_MspInit+0x7c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d127      	bne.n	8001646 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	4b17      	ldr	r3, [pc, #92]	; (8001654 <HAL_I2C_MspInit+0x80>)
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	4a16      	ldr	r2, [pc, #88]	; (8001654 <HAL_I2C_MspInit+0x80>)
 80015fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001600:	6153      	str	r3, [r2, #20]
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <HAL_I2C_MspInit+0x80>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800160e:	23c0      	movs	r3, #192	; 0xc0
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001612:	2312      	movs	r3, #18
 8001614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001616:	2301      	movs	r3, #1
 8001618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800161e:	2304      	movs	r3, #4
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	480b      	ldr	r0, [pc, #44]	; (8001658 <HAL_I2C_MspInit+0x84>)
 800162a:	f000 fbdb 	bl	8001de4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_I2C_MspInit+0x80>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	4a08      	ldr	r2, [pc, #32]	; (8001654 <HAL_I2C_MspInit+0x80>)
 8001634:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001638:	61d3      	str	r3, [r2, #28]
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_I2C_MspInit+0x80>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001646:	bf00      	nop
 8001648:	3728      	adds	r7, #40	; 0x28
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40005400 	.word	0x40005400
 8001654:	40021000 	.word	0x40021000
 8001658:	48000400 	.word	0x48000400

0800165c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <HAL_SPI_MspInit+0x7c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d128      	bne.n	80016d0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800167e:	4b17      	ldr	r3, [pc, #92]	; (80016dc <HAL_SPI_MspInit+0x80>)
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	4a16      	ldr	r2, [pc, #88]	; (80016dc <HAL_SPI_MspInit+0x80>)
 8001684:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001688:	6193      	str	r3, [r2, #24]
 800168a:	4b14      	ldr	r3, [pc, #80]	; (80016dc <HAL_SPI_MspInit+0x80>)
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <HAL_SPI_MspInit+0x80>)
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	4a10      	ldr	r2, [pc, #64]	; (80016dc <HAL_SPI_MspInit+0x80>)
 800169c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a0:	6153      	str	r3, [r2, #20]
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_SPI_MspInit+0x80>)
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80016ae:	23e0      	movs	r3, #224	; 0xe0
 80016b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ba:	2303      	movs	r3, #3
 80016bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016be:	2305      	movs	r3, #5
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016cc:	f000 fb8a 	bl	8001de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016d0:	bf00      	nop
 80016d2:	3728      	adds	r7, #40	; 0x28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40013000 	.word	0x40013000
 80016dc:	40021000 	.word	0x40021000

080016e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a16      	ldr	r2, [pc, #88]	; (8001748 <HAL_TIM_Base_MspInit+0x68>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d114      	bne.n	800171c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016f2:	4b16      	ldr	r3, [pc, #88]	; (800174c <HAL_TIM_Base_MspInit+0x6c>)
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	4a15      	ldr	r2, [pc, #84]	; (800174c <HAL_TIM_Base_MspInit+0x6c>)
 80016f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016fc:	6193      	str	r3, [r2, #24]
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <HAL_TIM_Base_MspInit+0x6c>)
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	2019      	movs	r0, #25
 8001710:	f000 fabb 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001714:	2019      	movs	r0, #25
 8001716:	f000 fad4 	bl	8001cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800171a:	e010      	b.n	800173e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001724:	d10b      	bne.n	800173e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_TIM_Base_MspInit+0x6c>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	4a08      	ldr	r2, [pc, #32]	; (800174c <HAL_TIM_Base_MspInit+0x6c>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	61d3      	str	r3, [r2, #28]
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_TIM_Base_MspInit+0x6c>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40012c00 	.word	0x40012c00
 800174c:	40021000 	.word	0x40021000

08001750 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001770:	d11d      	bne.n	80017ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <HAL_TIM_MspPostInit+0x68>)
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	4a10      	ldr	r2, [pc, #64]	; (80017b8 <HAL_TIM_MspPostInit+0x68>)
 8001778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177c:	6153      	str	r3, [r2, #20]
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <HAL_TIM_MspPostInit+0x68>)
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800178a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800178e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2300      	movs	r3, #0
 800179a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800179c:	2301      	movs	r3, #1
 800179e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	4619      	mov	r1, r3
 80017a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017aa:	f000 fb1b 	bl	8001de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80017ae:	bf00      	nop
 80017b0:	3720      	adds	r7, #32
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40021000 	.word	0x40021000

080017bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	; 0x28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a1b      	ldr	r2, [pc, #108]	; (8001848 <HAL_UART_MspInit+0x8c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d12f      	bne.n	800183e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017de:	4b1b      	ldr	r3, [pc, #108]	; (800184c <HAL_UART_MspInit+0x90>)
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	4a1a      	ldr	r2, [pc, #104]	; (800184c <HAL_UART_MspInit+0x90>)
 80017e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e8:	6193      	str	r3, [r2, #24]
 80017ea:	4b18      	ldr	r3, [pc, #96]	; (800184c <HAL_UART_MspInit+0x90>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_UART_MspInit+0x90>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	4a14      	ldr	r2, [pc, #80]	; (800184c <HAL_UART_MspInit+0x90>)
 80017fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001800:	6153      	str	r3, [r2, #20]
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_UART_MspInit+0x90>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800180e:	2330      	movs	r3, #48	; 0x30
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800181e:	2307      	movs	r3, #7
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	4809      	ldr	r0, [pc, #36]	; (8001850 <HAL_UART_MspInit+0x94>)
 800182a:	f000 fadb 	bl	8001de4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	2025      	movs	r0, #37	; 0x25
 8001834:	f000 fa29 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001838:	2025      	movs	r0, #37	; 0x25
 800183a:	f000 fa42 	bl	8001cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800183e:	bf00      	nop
 8001840:	3728      	adds	r7, #40	; 0x28
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40013800 	.word	0x40013800
 800184c:	40021000 	.word	0x40021000
 8001850:	48000800 	.word	0x48000800

08001854 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a18      	ldr	r2, [pc, #96]	; (80018d4 <HAL_PCD_MspInit+0x80>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d129      	bne.n	80018ca <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <HAL_PCD_MspInit+0x84>)
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	4a17      	ldr	r2, [pc, #92]	; (80018d8 <HAL_PCD_MspInit+0x84>)
 800187c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001880:	6153      	str	r3, [r2, #20]
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_PCD_MspInit+0x84>)
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800188e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800189c:	2303      	movs	r3, #3
 800189e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80018a0:	230e      	movs	r3, #14
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4619      	mov	r1, r3
 80018aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ae:	f000 fa99 	bl	8001de4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_PCD_MspInit+0x84>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	4a08      	ldr	r2, [pc, #32]	; (80018d8 <HAL_PCD_MspInit+0x84>)
 80018b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018bc:	61d3      	str	r3, [r2, #28]
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_PCD_MspInit+0x84>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80018ca:	bf00      	nop
 80018cc:	3728      	adds	r7, #40	; 0x28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40005c00 	.word	0x40005c00
 80018d8:	40021000 	.word	0x40021000

080018dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <NMI_Handler+0x4>

080018e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e6:	e7fe      	b.n	80018e6 <HardFault_Handler+0x4>

080018e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <MemManage_Handler+0x4>

080018ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <BusFault_Handler+0x4>

080018f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <UsageFault_Handler+0x4>

080018fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001928:	f000 f8b4 	bl	8001a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}

08001930 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001934:	2001      	movs	r0, #1
 8001936:	f000 fc01 	bl	800213c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}

0800193e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001942:	2002      	movs	r0, #2
 8001944:	f000 fbfa 	bl	800213c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}

0800194c <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001950:	2004      	movs	r0, #4
 8001952:	f000 fbf3 	bl	800213c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}

0800195a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800195e:	2008      	movs	r0, #8
 8001960:	f000 fbec 	bl	800213c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}

08001968 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800196e:	f002 fd7d 	bl	800446c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000170 	.word	0x20000170

0800197c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <USART1_IRQHandler+0x10>)
 8001982:	f003 fe4d 	bl	8005620 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000208 	.word	0x20000208

08001990 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <SystemInit+0x20>)
 8001996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800199a:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <SystemInit+0x20>)
 800199c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019ec <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80019b8:	f7ff ffea 	bl	8001990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019bc:	480c      	ldr	r0, [pc, #48]	; (80019f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80019be:	490d      	ldr	r1, [pc, #52]	; (80019f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019c0:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <LoopForever+0xe>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c4:	e002      	b.n	80019cc <LoopCopyDataInit>

080019c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ca:	3304      	adds	r3, #4

080019cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d0:	d3f9      	bcc.n	80019c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80019d4:	4c0a      	ldr	r4, [pc, #40]	; (8001a00 <LoopForever+0x16>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d8:	e001      	b.n	80019de <LoopFillZerobss>

080019da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019dc:	3204      	adds	r2, #4

080019de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e0:	d3fb      	bcc.n	80019da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019e2:	f005 f8ab 	bl	8006b3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019e6:	f7fe ff0b 	bl	8000800 <main>

080019ea <LoopForever>:

LoopForever:
    b LoopForever
 80019ea:	e7fe      	b.n	80019ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019ec:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80019f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f4:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80019f8:	08006cdc 	.word	0x08006cdc
  ldr r2, =_sbss
 80019fc:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001a00:	20000680 	.word	0x20000680

08001a04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a04:	e7fe      	b.n	8001a04 <ADC1_2_IRQHandler>
	...

08001a08 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <HAL_Init+0x28>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a07      	ldr	r2, [pc, #28]	; (8001a30 <HAL_Init+0x28>)
 8001a12:	f043 0310 	orr.w	r3, r3, #16
 8001a16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a18:	2003      	movs	r0, #3
 8001a1a:	f000 f92b 	bl	8001c74 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f000 f808 	bl	8001a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a24:	f7ff fdb2 	bl	800158c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40022000 	.word	0x40022000

08001a34 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_InitTick+0x54>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_InitTick+0x58>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	4619      	mov	r1, r3
 8001a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 f943 	bl	8001cde <HAL_SYSTICK_Config>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e00e      	b.n	8001a80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b0f      	cmp	r3, #15
 8001a66:	d80a      	bhi.n	8001a7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a70:	f000 f90b 	bl	8001c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a74:	4a06      	ldr	r2, [pc, #24]	; (8001a90 <HAL_InitTick+0x5c>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e000      	b.n	8001a80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000090 	.word	0x20000090
 8001a8c:	20000098 	.word	0x20000098
 8001a90:	20000094 	.word	0x20000094

08001a94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_IncTick+0x20>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_IncTick+0x24>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <HAL_IncTick+0x24>)
 8001aa6:	6013      	str	r3, [r2, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000098 	.word	0x20000098
 8001ab8:	2000067c 	.word	0x2000067c

08001abc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return uwTick;  
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <HAL_GetTick+0x14>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	2000067c 	.word	0x2000067c

08001ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af0:	4013      	ands	r3, r2
 8001af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b06:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	60d3      	str	r3, [r2, #12]
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b20:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <__NVIC_GetPriorityGrouping+0x18>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	f003 0307 	and.w	r3, r3, #7
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	db0b      	blt.n	8001b62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	f003 021f 	and.w	r2, r3, #31
 8001b50:	4907      	ldr	r1, [pc, #28]	; (8001b70 <__NVIC_EnableIRQ+0x38>)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	095b      	lsrs	r3, r3, #5
 8001b58:	2001      	movs	r0, #1
 8001b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000e100 	.word	0xe000e100

08001b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	6039      	str	r1, [r7, #0]
 8001b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	db0a      	blt.n	8001b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	490c      	ldr	r1, [pc, #48]	; (8001bc0 <__NVIC_SetPriority+0x4c>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	0112      	lsls	r2, r2, #4
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	440b      	add	r3, r1
 8001b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b9c:	e00a      	b.n	8001bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4908      	ldr	r1, [pc, #32]	; (8001bc4 <__NVIC_SetPriority+0x50>)
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	3b04      	subs	r3, #4
 8001bac:	0112      	lsls	r2, r2, #4
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	761a      	strb	r2, [r3, #24]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000e100 	.word	0xe000e100
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	; 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f1c3 0307 	rsb	r3, r3, #7
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	bf28      	it	cs
 8001be6:	2304      	movcs	r3, #4
 8001be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3304      	adds	r3, #4
 8001bee:	2b06      	cmp	r3, #6
 8001bf0:	d902      	bls.n	8001bf8 <NVIC_EncodePriority+0x30>
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3b03      	subs	r3, #3
 8001bf6:	e000      	b.n	8001bfa <NVIC_EncodePriority+0x32>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43da      	mvns	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	43d9      	mvns	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	4313      	orrs	r3, r2
         );
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3724      	adds	r7, #36	; 0x24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c40:	d301      	bcc.n	8001c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00f      	b.n	8001c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c46:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <SysTick_Config+0x40>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4e:	210f      	movs	r1, #15
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	f7ff ff8e 	bl	8001b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <SysTick_Config+0x40>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5e:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <SysTick_Config+0x40>)
 8001c60:	2207      	movs	r2, #7
 8001c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	e000e010 	.word	0xe000e010

08001c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff ff29 	bl	8001ad4 <__NVIC_SetPriorityGrouping>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c9c:	f7ff ff3e 	bl	8001b1c <__NVIC_GetPriorityGrouping>
 8001ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	6978      	ldr	r0, [r7, #20]
 8001ca8:	f7ff ff8e 	bl	8001bc8 <NVIC_EncodePriority>
 8001cac:	4602      	mov	r2, r0
 8001cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff5d 	bl	8001b74 <__NVIC_SetPriority>
}
 8001cba:	bf00      	nop
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff31 	bl	8001b38 <__NVIC_EnableIRQ>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff ffa2 	bl	8001c30 <SysTick_Config>
 8001cec:	4603      	mov	r3, r0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d008      	beq.n	8001d1a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2204      	movs	r2, #4
 8001d0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e020      	b.n	8001d5c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 020e 	bic.w	r2, r2, #14
 8001d28:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0201 	bic.w	r2, r2, #1
 8001d38:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d42:	2101      	movs	r1, #1
 8001d44:	fa01 f202 	lsl.w	r2, r1, r2
 8001d48:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d005      	beq.n	8001d8a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2204      	movs	r2, #4
 8001d82:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
 8001d88:	e027      	b.n	8001dda <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 020e 	bic.w	r2, r2, #14
 8001d98:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0201 	bic.w	r2, r2, #1
 8001da8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db2:	2101      	movs	r1, #1
 8001db4:	fa01 f202 	lsl.w	r2, r1, r2
 8001db8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	4798      	blx	r3
    } 
  }
  return status;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df2:	e154      	b.n	800209e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2101      	movs	r1, #1
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001e00:	4013      	ands	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 8146 	beq.w	8002098 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d005      	beq.n	8001e24 <HAL_GPIO_Init+0x40>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d130      	bne.n	8001e86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	2203      	movs	r2, #3
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	091b      	lsrs	r3, r3, #4
 8001e70:	f003 0201 	and.w	r2, r3, #1
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d017      	beq.n	8001ec2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d123      	bne.n	8001f16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	08da      	lsrs	r2, r3, #3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3208      	adds	r2, #8
 8001ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	220f      	movs	r2, #15
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	691a      	ldr	r2, [r3, #16]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	08da      	lsrs	r2, r3, #3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3208      	adds	r2, #8
 8001f10:	6939      	ldr	r1, [r7, #16]
 8001f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	2203      	movs	r2, #3
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0203 	and.w	r2, r3, #3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 80a0 	beq.w	8002098 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f58:	4b58      	ldr	r3, [pc, #352]	; (80020bc <HAL_GPIO_Init+0x2d8>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	4a57      	ldr	r2, [pc, #348]	; (80020bc <HAL_GPIO_Init+0x2d8>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6193      	str	r3, [r2, #24]
 8001f64:	4b55      	ldr	r3, [pc, #340]	; (80020bc <HAL_GPIO_Init+0x2d8>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f70:	4a53      	ldr	r2, [pc, #332]	; (80020c0 <HAL_GPIO_Init+0x2dc>)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	089b      	lsrs	r3, r3, #2
 8001f76:	3302      	adds	r3, #2
 8001f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	220f      	movs	r2, #15
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f9a:	d019      	beq.n	8001fd0 <HAL_GPIO_Init+0x1ec>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a49      	ldr	r2, [pc, #292]	; (80020c4 <HAL_GPIO_Init+0x2e0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d013      	beq.n	8001fcc <HAL_GPIO_Init+0x1e8>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a48      	ldr	r2, [pc, #288]	; (80020c8 <HAL_GPIO_Init+0x2e4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d00d      	beq.n	8001fc8 <HAL_GPIO_Init+0x1e4>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a47      	ldr	r2, [pc, #284]	; (80020cc <HAL_GPIO_Init+0x2e8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d007      	beq.n	8001fc4 <HAL_GPIO_Init+0x1e0>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a46      	ldr	r2, [pc, #280]	; (80020d0 <HAL_GPIO_Init+0x2ec>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d101      	bne.n	8001fc0 <HAL_GPIO_Init+0x1dc>
 8001fbc:	2304      	movs	r3, #4
 8001fbe:	e008      	b.n	8001fd2 <HAL_GPIO_Init+0x1ee>
 8001fc0:	2305      	movs	r3, #5
 8001fc2:	e006      	b.n	8001fd2 <HAL_GPIO_Init+0x1ee>
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e004      	b.n	8001fd2 <HAL_GPIO_Init+0x1ee>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e002      	b.n	8001fd2 <HAL_GPIO_Init+0x1ee>
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <HAL_GPIO_Init+0x1ee>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	f002 0203 	and.w	r2, r2, #3
 8001fd8:	0092      	lsls	r2, r2, #2
 8001fda:	4093      	lsls	r3, r2
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fe2:	4937      	ldr	r1, [pc, #220]	; (80020c0 <HAL_GPIO_Init+0x2dc>)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	3302      	adds	r3, #2
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ff0:	4b38      	ldr	r3, [pc, #224]	; (80020d4 <HAL_GPIO_Init+0x2f0>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4313      	orrs	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002014:	4a2f      	ldr	r2, [pc, #188]	; (80020d4 <HAL_GPIO_Init+0x2f0>)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800201a:	4b2e      	ldr	r3, [pc, #184]	; (80020d4 <HAL_GPIO_Init+0x2f0>)
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	43db      	mvns	r3, r3
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4013      	ands	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4313      	orrs	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800203e:	4a25      	ldr	r2, [pc, #148]	; (80020d4 <HAL_GPIO_Init+0x2f0>)
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002044:	4b23      	ldr	r3, [pc, #140]	; (80020d4 <HAL_GPIO_Init+0x2f0>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	43db      	mvns	r3, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002068:	4a1a      	ldr	r2, [pc, #104]	; (80020d4 <HAL_GPIO_Init+0x2f0>)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800206e:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <HAL_GPIO_Init+0x2f0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	43db      	mvns	r3, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4313      	orrs	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002092:	4a10      	ldr	r2, [pc, #64]	; (80020d4 <HAL_GPIO_Init+0x2f0>)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	3301      	adds	r3, #1
 800209c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f47f aea3 	bne.w	8001df4 <HAL_GPIO_Init+0x10>
  }
}
 80020ae:	bf00      	nop
 80020b0:	bf00      	nop
 80020b2:	371c      	adds	r7, #28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40010000 	.word	0x40010000
 80020c4:	48000400 	.word	0x48000400
 80020c8:	48000800 	.word	0x48000800
 80020cc:	48000c00 	.word	0x48000c00
 80020d0:	48001000 	.word	0x48001000
 80020d4:	40010400 	.word	0x40010400

080020d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	807b      	strh	r3, [r7, #2]
 80020e4:	4613      	mov	r3, r2
 80020e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e8:	787b      	ldrb	r3, [r7, #1]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020ee:	887a      	ldrh	r2, [r7, #2]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020f4:	e002      	b.n	80020fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020f6:	887a      	ldrh	r2, [r7, #2]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800211a:	887a      	ldrh	r2, [r7, #2]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4013      	ands	r3, r2
 8002120:	041a      	lsls	r2, r3, #16
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	43d9      	mvns	r1, r3
 8002126:	887b      	ldrh	r3, [r7, #2]
 8002128:	400b      	ands	r3, r1
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	619a      	str	r2, [r3, #24]
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002146:	4b08      	ldr	r3, [pc, #32]	; (8002168 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	4013      	ands	r3, r2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d006      	beq.n	8002160 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002152:	4a05      	ldr	r2, [pc, #20]	; (8002168 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002158:	88fb      	ldrh	r3, [r7, #6]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fec2 	bl	8000ee4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40010400 	.word	0x40010400

0800216c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e081      	b.n	8002282 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff fa1e 	bl	80015d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2224      	movs	r2, #36	; 0x24
 800219c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0201 	bic.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d107      	bne.n	80021e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	e006      	b.n	80021f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d104      	bne.n	8002206 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002204:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002218:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002228:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69d9      	ldr	r1, [r3, #28]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1a      	ldr	r2, [r3, #32]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2220      	movs	r2, #32
 800226e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b20      	cmp	r3, #32
 800229e:	d138      	bne.n	8002312 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e032      	b.n	8002314 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2224      	movs	r2, #36	; 0x24
 80022ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0201 	bic.w	r2, r2, #1
 80022cc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022dc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6819      	ldr	r1, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f042 0201 	orr.w	r2, r2, #1
 80022fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2220      	movs	r2, #32
 8002302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	e000      	b.n	8002314 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002312:	2302      	movs	r3, #2
  }
}
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b20      	cmp	r3, #32
 8002334:	d139      	bne.n	80023aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002340:	2302      	movs	r3, #2
 8002342:	e033      	b.n	80023ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2224      	movs	r2, #36	; 0x24
 8002350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0201 	bic.w	r2, r2, #1
 8002362:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002372:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	4313      	orrs	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f042 0201 	orr.w	r2, r2, #1
 8002394:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2220      	movs	r2, #32
 800239a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023a6:	2300      	movs	r3, #0
 80023a8:	e000      	b.n	80023ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80023aa:	2302      	movs	r3, #2
  }
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ba:	b08b      	sub	sp, #44	; 0x2c
 80023bc:	af06      	add	r7, sp, #24
 80023be:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e0c4      	b.n	8002554 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d106      	bne.n	80023e4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff fa38 	bl	8001854 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2203      	movs	r2, #3
 80023e8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f004 fb67 	bl	8006ac4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]
 80023fa:	e040      	b.n	800247e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	440b      	add	r3, r1
 800240c:	3301      	adds	r3, #1
 800240e:	2201      	movs	r2, #1
 8002410:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	440b      	add	r3, r1
 8002422:	7bfa      	ldrb	r2, [r7, #15]
 8002424:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	1c5a      	adds	r2, r3, #1
 800242c:	4613      	mov	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	440b      	add	r3, r1
 8002436:	3303      	adds	r3, #3
 8002438:	2200      	movs	r2, #0
 800243a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800243c:	7bfa      	ldrb	r2, [r7, #15]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	440b      	add	r3, r1
 800244a:	3338      	adds	r3, #56	; 0x38
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002450:	7bfa      	ldrb	r2, [r7, #15]
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	440b      	add	r3, r1
 800245e:	333c      	adds	r3, #60	; 0x3c
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002464:	7bfa      	ldrb	r2, [r7, #15]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	440b      	add	r3, r1
 8002472:	3340      	adds	r3, #64	; 0x40
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	3301      	adds	r3, #1
 800247c:	73fb      	strb	r3, [r7, #15]
 800247e:	7bfa      	ldrb	r2, [r7, #15]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	429a      	cmp	r2, r3
 8002486:	d3b9      	bcc.n	80023fc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002488:	2300      	movs	r3, #0
 800248a:	73fb      	strb	r3, [r7, #15]
 800248c:	e044      	b.n	8002518 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800248e:	7bfa      	ldrb	r2, [r7, #15]
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	440b      	add	r3, r1
 800249c:	f203 1369 	addw	r3, r3, #361	; 0x169
 80024a0:	2200      	movs	r2, #0
 80024a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024a4:	7bfa      	ldrb	r2, [r7, #15]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	440b      	add	r3, r1
 80024b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024b6:	7bfa      	ldrb	r2, [r7, #15]
 80024b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024ba:	7bfa      	ldrb	r2, [r7, #15]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	440b      	add	r3, r1
 80024c8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024d0:	7bfa      	ldrb	r2, [r7, #15]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	440b      	add	r3, r1
 80024de:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024e6:	7bfa      	ldrb	r2, [r7, #15]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	440b      	add	r3, r1
 80024f4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024fc:	7bfa      	ldrb	r2, [r7, #15]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	440b      	add	r3, r1
 800250a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	3301      	adds	r3, #1
 8002516:	73fb      	strb	r3, [r7, #15]
 8002518:	7bfa      	ldrb	r2, [r7, #15]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	429a      	cmp	r2, r3
 8002520:	d3b5      	bcc.n	800248e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	687e      	ldr	r6, [r7, #4]
 800252a:	466d      	mov	r5, sp
 800252c:	f106 0410 	add.w	r4, r6, #16
 8002530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002532:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002534:	6823      	ldr	r3, [r4, #0]
 8002536:	602b      	str	r3, [r5, #0]
 8002538:	1d33      	adds	r3, r6, #4
 800253a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800253c:	6838      	ldr	r0, [r7, #0]
 800253e:	f004 fadc 	bl	8006afa <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800255c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002562:	af00      	add	r7, sp, #0
 8002564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002568:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800256c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800256e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002572:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d102      	bne.n	8002582 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	f001 b823 	b.w	80035c8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002586:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 817d 	beq.w	8002892 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002598:	4bbc      	ldr	r3, [pc, #752]	; (800288c <HAL_RCC_OscConfig+0x330>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 030c 	and.w	r3, r3, #12
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d00c      	beq.n	80025be <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025a4:	4bb9      	ldr	r3, [pc, #740]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 030c 	and.w	r3, r3, #12
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d15c      	bne.n	800266a <HAL_RCC_OscConfig+0x10e>
 80025b0:	4bb6      	ldr	r3, [pc, #728]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025bc:	d155      	bne.n	800266a <HAL_RCC_OscConfig+0x10e>
 80025be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80025ca:	fa93 f3a3 	rbit	r3, r3
 80025ce:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025d2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	095b      	lsrs	r3, r3, #5
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d102      	bne.n	80025f0 <HAL_RCC_OscConfig+0x94>
 80025ea:	4ba8      	ldr	r3, [pc, #672]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	e015      	b.n	800261c <HAL_RCC_OscConfig+0xc0>
 80025f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025f4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80025fc:	fa93 f3a3 	rbit	r3, r3
 8002600:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002604:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002608:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800260c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002618:	4b9c      	ldr	r3, [pc, #624]	; (800288c <HAL_RCC_OscConfig+0x330>)
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002620:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002624:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002628:	fa92 f2a2 	rbit	r2, r2
 800262c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002630:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002634:	fab2 f282 	clz	r2, r2
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	f042 0220 	orr.w	r2, r2, #32
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	f002 021f 	and.w	r2, r2, #31
 8002644:	2101      	movs	r1, #1
 8002646:	fa01 f202 	lsl.w	r2, r1, r2
 800264a:	4013      	ands	r3, r2
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 811f 	beq.w	8002890 <HAL_RCC_OscConfig+0x334>
 8002652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002656:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	f040 8116 	bne.w	8002890 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	f000 bfaf 	b.w	80035c8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800266a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267a:	d106      	bne.n	800268a <HAL_RCC_OscConfig+0x12e>
 800267c:	4b83      	ldr	r3, [pc, #524]	; (800288c <HAL_RCC_OscConfig+0x330>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a82      	ldr	r2, [pc, #520]	; (800288c <HAL_RCC_OscConfig+0x330>)
 8002682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	e036      	b.n	80026f8 <HAL_RCC_OscConfig+0x19c>
 800268a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10c      	bne.n	80026b4 <HAL_RCC_OscConfig+0x158>
 800269a:	4b7c      	ldr	r3, [pc, #496]	; (800288c <HAL_RCC_OscConfig+0x330>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a7b      	ldr	r2, [pc, #492]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80026a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	4b79      	ldr	r3, [pc, #484]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a78      	ldr	r2, [pc, #480]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80026ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	e021      	b.n	80026f8 <HAL_RCC_OscConfig+0x19c>
 80026b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x184>
 80026c6:	4b71      	ldr	r3, [pc, #452]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a70      	ldr	r2, [pc, #448]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80026cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	4b6e      	ldr	r3, [pc, #440]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a6d      	ldr	r2, [pc, #436]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e00b      	b.n	80026f8 <HAL_RCC_OscConfig+0x19c>
 80026e0:	4b6a      	ldr	r3, [pc, #424]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a69      	ldr	r2, [pc, #420]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80026e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	4b67      	ldr	r3, [pc, #412]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a66      	ldr	r2, [pc, #408]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80026f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026f8:	4b64      	ldr	r3, [pc, #400]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	f023 020f 	bic.w	r2, r3, #15
 8002700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002704:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	495f      	ldr	r1, [pc, #380]	; (800288c <HAL_RCC_OscConfig+0x330>)
 800270e:	4313      	orrs	r3, r2
 8002710:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002716:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d059      	beq.n	80027d6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002722:	f7ff f9cb 	bl	8001abc <HAL_GetTick>
 8002726:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272a:	e00a      	b.n	8002742 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800272c:	f7ff f9c6 	bl	8001abc <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b64      	cmp	r3, #100	; 0x64
 800273a:	d902      	bls.n	8002742 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	f000 bf43 	b.w	80035c8 <HAL_RCC_OscConfig+0x106c>
 8002742:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002746:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002756:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275a:	fab3 f383 	clz	r3, r3
 800275e:	b2db      	uxtb	r3, r3
 8002760:	095b      	lsrs	r3, r3, #5
 8002762:	b2db      	uxtb	r3, r3
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b01      	cmp	r3, #1
 800276c:	d102      	bne.n	8002774 <HAL_RCC_OscConfig+0x218>
 800276e:	4b47      	ldr	r3, [pc, #284]	; (800288c <HAL_RCC_OscConfig+0x330>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	e015      	b.n	80027a0 <HAL_RCC_OscConfig+0x244>
 8002774:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002778:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002780:	fa93 f3a3 	rbit	r3, r3
 8002784:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002788:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800278c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002790:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800279c:	4b3b      	ldr	r3, [pc, #236]	; (800288c <HAL_RCC_OscConfig+0x330>)
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027a4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80027a8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80027ac:	fa92 f2a2 	rbit	r2, r2
 80027b0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80027b4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80027b8:	fab2 f282 	clz	r2, r2
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	f042 0220 	orr.w	r2, r2, #32
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	f002 021f 	and.w	r2, r2, #31
 80027c8:	2101      	movs	r1, #1
 80027ca:	fa01 f202 	lsl.w	r2, r1, r2
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0ab      	beq.n	800272c <HAL_RCC_OscConfig+0x1d0>
 80027d4:	e05d      	b.n	8002892 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d6:	f7ff f971 	bl	8001abc <HAL_GetTick>
 80027da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027de:	e00a      	b.n	80027f6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e0:	f7ff f96c 	bl	8001abc <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b64      	cmp	r3, #100	; 0x64
 80027ee:	d902      	bls.n	80027f6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	f000 bee9 	b.w	80035c8 <HAL_RCC_OscConfig+0x106c>
 80027f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027fa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800280a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280e:	fab3 f383 	clz	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	095b      	lsrs	r3, r3, #5
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b01      	cmp	r3, #1
 8002820:	d102      	bne.n	8002828 <HAL_RCC_OscConfig+0x2cc>
 8002822:	4b1a      	ldr	r3, [pc, #104]	; (800288c <HAL_RCC_OscConfig+0x330>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	e015      	b.n	8002854 <HAL_RCC_OscConfig+0x2f8>
 8002828:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800282c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002830:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002834:	fa93 f3a3 	rbit	r3, r3
 8002838:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800283c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002840:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002844:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002850:	4b0e      	ldr	r3, [pc, #56]	; (800288c <HAL_RCC_OscConfig+0x330>)
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002858:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800285c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002860:	fa92 f2a2 	rbit	r2, r2
 8002864:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002868:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800286c:	fab2 f282 	clz	r2, r2
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	f042 0220 	orr.w	r2, r2, #32
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	f002 021f 	and.w	r2, r2, #31
 800287c:	2101      	movs	r1, #1
 800287e:	fa01 f202 	lsl.w	r2, r1, r2
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1ab      	bne.n	80027e0 <HAL_RCC_OscConfig+0x284>
 8002888:	e003      	b.n	8002892 <HAL_RCC_OscConfig+0x336>
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002896:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 817d 	beq.w	8002ba2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028a8:	4ba6      	ldr	r3, [pc, #664]	; (8002b44 <HAL_RCC_OscConfig+0x5e8>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 030c 	and.w	r3, r3, #12
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00b      	beq.n	80028cc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028b4:	4ba3      	ldr	r3, [pc, #652]	; (8002b44 <HAL_RCC_OscConfig+0x5e8>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 030c 	and.w	r3, r3, #12
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d172      	bne.n	80029a6 <HAL_RCC_OscConfig+0x44a>
 80028c0:	4ba0      	ldr	r3, [pc, #640]	; (8002b44 <HAL_RCC_OscConfig+0x5e8>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d16c      	bne.n	80029a6 <HAL_RCC_OscConfig+0x44a>
 80028cc:	2302      	movs	r3, #2
 80028ce:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80028d6:	fa93 f3a3 	rbit	r3, r3
 80028da:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80028de:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e2:	fab3 f383 	clz	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	095b      	lsrs	r3, r3, #5
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d102      	bne.n	80028fc <HAL_RCC_OscConfig+0x3a0>
 80028f6:	4b93      	ldr	r3, [pc, #588]	; (8002b44 <HAL_RCC_OscConfig+0x5e8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	e013      	b.n	8002924 <HAL_RCC_OscConfig+0x3c8>
 80028fc:	2302      	movs	r3, #2
 80028fe:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800290e:	2302      	movs	r3, #2
 8002910:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002914:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002918:	fa93 f3a3 	rbit	r3, r3
 800291c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002920:	4b88      	ldr	r3, [pc, #544]	; (8002b44 <HAL_RCC_OscConfig+0x5e8>)
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	2202      	movs	r2, #2
 8002926:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800292a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800292e:	fa92 f2a2 	rbit	r2, r2
 8002932:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002936:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800293a:	fab2 f282 	clz	r2, r2
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	f042 0220 	orr.w	r2, r2, #32
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	f002 021f 	and.w	r2, r2, #31
 800294a:	2101      	movs	r1, #1
 800294c:	fa01 f202 	lsl.w	r2, r1, r2
 8002950:	4013      	ands	r3, r2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <HAL_RCC_OscConfig+0x410>
 8002956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d002      	beq.n	800296c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	f000 be2e 	b.w	80035c8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296c:	4b75      	ldr	r3, [pc, #468]	; (8002b44 <HAL_RCC_OscConfig+0x5e8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002978:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	21f8      	movs	r1, #248	; 0xf8
 8002982:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800298a:	fa91 f1a1 	rbit	r1, r1
 800298e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002992:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002996:	fab1 f181 	clz	r1, r1
 800299a:	b2c9      	uxtb	r1, r1
 800299c:	408b      	lsls	r3, r1
 800299e:	4969      	ldr	r1, [pc, #420]	; (8002b44 <HAL_RCC_OscConfig+0x5e8>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a4:	e0fd      	b.n	8002ba2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 8088 	beq.w	8002ac8 <HAL_RCC_OscConfig+0x56c>
 80029b8:	2301      	movs	r3, #1
 80029ba:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80029c2:	fa93 f3a3 	rbit	r3, r3
 80029c6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80029ca:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	461a      	mov	r2, r3
 80029e0:	2301      	movs	r3, #1
 80029e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e4:	f7ff f86a 	bl	8001abc <HAL_GetTick>
 80029e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ec:	e00a      	b.n	8002a04 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ee:	f7ff f865 	bl	8001abc <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d902      	bls.n	8002a04 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	f000 bde2 	b.w	80035c8 <HAL_RCC_OscConfig+0x106c>
 8002a04:	2302      	movs	r3, #2
 8002a06:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002a0e:	fa93 f3a3 	rbit	r3, r3
 8002a12:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002a16:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	095b      	lsrs	r3, r3, #5
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d102      	bne.n	8002a34 <HAL_RCC_OscConfig+0x4d8>
 8002a2e:	4b45      	ldr	r3, [pc, #276]	; (8002b44 <HAL_RCC_OscConfig+0x5e8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	e013      	b.n	8002a5c <HAL_RCC_OscConfig+0x500>
 8002a34:	2302      	movs	r3, #2
 8002a36:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002a3e:	fa93 f3a3 	rbit	r3, r3
 8002a42:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a46:	2302      	movs	r3, #2
 8002a48:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a4c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002a50:	fa93 f3a3 	rbit	r3, r3
 8002a54:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002a58:	4b3a      	ldr	r3, [pc, #232]	; (8002b44 <HAL_RCC_OscConfig+0x5e8>)
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002a62:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002a66:	fa92 f2a2 	rbit	r2, r2
 8002a6a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002a6e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002a72:	fab2 f282 	clz	r2, r2
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	f042 0220 	orr.w	r2, r2, #32
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	f002 021f 	and.w	r2, r2, #31
 8002a82:	2101      	movs	r1, #1
 8002a84:	fa01 f202 	lsl.w	r2, r1, r2
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0af      	beq.n	80029ee <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8e:	4b2d      	ldr	r3, [pc, #180]	; (8002b44 <HAL_RCC_OscConfig+0x5e8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	21f8      	movs	r1, #248	; 0xf8
 8002aa4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002aac:	fa91 f1a1 	rbit	r1, r1
 8002ab0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002ab4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002ab8:	fab1 f181 	clz	r1, r1
 8002abc:	b2c9      	uxtb	r1, r1
 8002abe:	408b      	lsls	r3, r1
 8002ac0:	4920      	ldr	r1, [pc, #128]	; (8002b44 <HAL_RCC_OscConfig+0x5e8>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	600b      	str	r3, [r1, #0]
 8002ac6:	e06c      	b.n	8002ba2 <HAL_RCC_OscConfig+0x646>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002ada:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ade:	fab3 f383 	clz	r3, r3
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ae8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	461a      	mov	r2, r3
 8002af0:	2300      	movs	r3, #0
 8002af2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af4:	f7fe ffe2 	bl	8001abc <HAL_GetTick>
 8002af8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afc:	e00a      	b.n	8002b14 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002afe:	f7fe ffdd 	bl	8001abc <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d902      	bls.n	8002b14 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	f000 bd5a 	b.w	80035c8 <HAL_RCC_OscConfig+0x106c>
 8002b14:	2302      	movs	r3, #2
 8002b16:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d104      	bne.n	8002b48 <HAL_RCC_OscConfig+0x5ec>
 8002b3e:	4b01      	ldr	r3, [pc, #4]	; (8002b44 <HAL_RCC_OscConfig+0x5e8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	e015      	b.n	8002b70 <HAL_RCC_OscConfig+0x614>
 8002b44:	40021000 	.word	0x40021000
 8002b48:	2302      	movs	r3, #2
 8002b4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002b60:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b64:	fa93 f3a3 	rbit	r3, r3
 8002b68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002b6c:	4bc8      	ldr	r3, [pc, #800]	; (8002e90 <HAL_RCC_OscConfig+0x934>)
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	2202      	movs	r2, #2
 8002b72:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002b76:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b7a:	fa92 f2a2 	rbit	r2, r2
 8002b7e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002b82:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002b86:	fab2 f282 	clz	r2, r2
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	f042 0220 	orr.w	r2, r2, #32
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	f002 021f 	and.w	r2, r2, #31
 8002b96:	2101      	movs	r1, #1
 8002b98:	fa01 f202 	lsl.w	r2, r1, r2
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1ad      	bne.n	8002afe <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 8110 	beq.w	8002dd8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d079      	beq.n	8002cbc <HAL_RCC_OscConfig+0x760>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bde:	fab3 f383 	clz	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	461a      	mov	r2, r3
 8002be6:	4bab      	ldr	r3, [pc, #684]	; (8002e94 <HAL_RCC_OscConfig+0x938>)
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	461a      	mov	r2, r3
 8002bee:	2301      	movs	r3, #1
 8002bf0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf2:	f7fe ff63 	bl	8001abc <HAL_GetTick>
 8002bf6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfa:	e00a      	b.n	8002c12 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bfc:	f7fe ff5e 	bl	8001abc <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d902      	bls.n	8002c12 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	f000 bcdb 	b.w	80035c8 <HAL_RCC_OscConfig+0x106c>
 8002c12:	2302      	movs	r3, #2
 8002c14:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c28:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c34:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	fa93 f2a3 	rbit	r2, r3
 8002c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c50:	2202      	movs	r2, #2
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	fa93 f2a3 	rbit	r2, r3
 8002c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c66:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c6a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c6c:	4b88      	ldr	r3, [pc, #544]	; (8002e90 <HAL_RCC_OscConfig+0x934>)
 8002c6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c74:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c78:	2102      	movs	r1, #2
 8002c7a:	6019      	str	r1, [r3, #0]
 8002c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c80:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	fa93 f1a3 	rbit	r1, r3
 8002c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c92:	6019      	str	r1, [r3, #0]
  return result;
 8002c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c98:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	fab3 f383 	clz	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	2101      	movs	r1, #1
 8002cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0a0      	beq.n	8002bfc <HAL_RCC_OscConfig+0x6a0>
 8002cba:	e08d      	b.n	8002dd8 <HAL_RCC_OscConfig+0x87c>
 8002cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ccc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	fa93 f2a3 	rbit	r2, r3
 8002cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cda:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002cde:	601a      	str	r2, [r3, #0]
  return result;
 8002ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ce8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4b68      	ldr	r3, [pc, #416]	; (8002e94 <HAL_RCC_OscConfig+0x938>)
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfe:	f7fe fedd 	bl	8001abc <HAL_GetTick>
 8002d02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d08:	f7fe fed8 	bl	8001abc <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d902      	bls.n	8002d1e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	f000 bc55 	b.w	80035c8 <HAL_RCC_OscConfig+0x106c>
 8002d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d22:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d26:	2202      	movs	r2, #2
 8002d28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	fa93 f2a3 	rbit	r2, r3
 8002d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d46:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d52:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	fa93 f2a3 	rbit	r2, r3
 8002d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d6e:	2202      	movs	r2, #2
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	fa93 f2a3 	rbit	r2, r3
 8002d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d84:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d88:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d8a:	4b41      	ldr	r3, [pc, #260]	; (8002e90 <HAL_RCC_OscConfig+0x934>)
 8002d8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d92:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002d96:	2102      	movs	r1, #2
 8002d98:	6019      	str	r1, [r3, #0]
 8002d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	fa93 f1a3 	rbit	r1, r3
 8002da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dac:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002db0:	6019      	str	r1, [r3, #0]
  return result;
 8002db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	fab3 f383 	clz	r3, r3
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	2101      	movs	r1, #1
 8002dce:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d197      	bne.n	8002d08 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ddc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 81a1 	beq.w	8003130 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dee:	2300      	movs	r3, #0
 8002df0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002df4:	4b26      	ldr	r3, [pc, #152]	; (8002e90 <HAL_RCC_OscConfig+0x934>)
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d116      	bne.n	8002e2e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e00:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <HAL_RCC_OscConfig+0x934>)
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	4a22      	ldr	r2, [pc, #136]	; (8002e90 <HAL_RCC_OscConfig+0x934>)
 8002e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	61d3      	str	r3, [r2, #28]
 8002e0c:	4b20      	ldr	r3, [pc, #128]	; (8002e90 <HAL_RCC_OscConfig+0x934>)
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e18:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e22:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002e26:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2e:	4b1a      	ldr	r3, [pc, #104]	; (8002e98 <HAL_RCC_OscConfig+0x93c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d11a      	bne.n	8002e70 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e3a:	4b17      	ldr	r3, [pc, #92]	; (8002e98 <HAL_RCC_OscConfig+0x93c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a16      	ldr	r2, [pc, #88]	; (8002e98 <HAL_RCC_OscConfig+0x93c>)
 8002e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e44:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e46:	f7fe fe39 	bl	8001abc <HAL_GetTick>
 8002e4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4e:	e009      	b.n	8002e64 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e50:	f7fe fe34 	bl	8001abc <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b64      	cmp	r3, #100	; 0x64
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e3b1      	b.n	80035c8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e64:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <HAL_RCC_OscConfig+0x93c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0ef      	beq.n	8002e50 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d10d      	bne.n	8002e9c <HAL_RCC_OscConfig+0x940>
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <HAL_RCC_OscConfig+0x934>)
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	4a02      	ldr	r2, [pc, #8]	; (8002e90 <HAL_RCC_OscConfig+0x934>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6213      	str	r3, [r2, #32]
 8002e8c:	e03c      	b.n	8002f08 <HAL_RCC_OscConfig+0x9ac>
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000
 8002e94:	10908120 	.word	0x10908120
 8002e98:	40007000 	.word	0x40007000
 8002e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10c      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x96a>
 8002eac:	4bc1      	ldr	r3, [pc, #772]	; (80031b4 <HAL_RCC_OscConfig+0xc58>)
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	4ac0      	ldr	r2, [pc, #768]	; (80031b4 <HAL_RCC_OscConfig+0xc58>)
 8002eb2:	f023 0301 	bic.w	r3, r3, #1
 8002eb6:	6213      	str	r3, [r2, #32]
 8002eb8:	4bbe      	ldr	r3, [pc, #760]	; (80031b4 <HAL_RCC_OscConfig+0xc58>)
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	4abd      	ldr	r2, [pc, #756]	; (80031b4 <HAL_RCC_OscConfig+0xc58>)
 8002ebe:	f023 0304 	bic.w	r3, r3, #4
 8002ec2:	6213      	str	r3, [r2, #32]
 8002ec4:	e020      	b.n	8002f08 <HAL_RCC_OscConfig+0x9ac>
 8002ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	2b05      	cmp	r3, #5
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x994>
 8002ed6:	4bb7      	ldr	r3, [pc, #732]	; (80031b4 <HAL_RCC_OscConfig+0xc58>)
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	4ab6      	ldr	r2, [pc, #728]	; (80031b4 <HAL_RCC_OscConfig+0xc58>)
 8002edc:	f043 0304 	orr.w	r3, r3, #4
 8002ee0:	6213      	str	r3, [r2, #32]
 8002ee2:	4bb4      	ldr	r3, [pc, #720]	; (80031b4 <HAL_RCC_OscConfig+0xc58>)
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	4ab3      	ldr	r2, [pc, #716]	; (80031b4 <HAL_RCC_OscConfig+0xc58>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	6213      	str	r3, [r2, #32]
 8002eee:	e00b      	b.n	8002f08 <HAL_RCC_OscConfig+0x9ac>
 8002ef0:	4bb0      	ldr	r3, [pc, #704]	; (80031b4 <HAL_RCC_OscConfig+0xc58>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	4aaf      	ldr	r2, [pc, #700]	; (80031b4 <HAL_RCC_OscConfig+0xc58>)
 8002ef6:	f023 0301 	bic.w	r3, r3, #1
 8002efa:	6213      	str	r3, [r2, #32]
 8002efc:	4bad      	ldr	r3, [pc, #692]	; (80031b4 <HAL_RCC_OscConfig+0xc58>)
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	4aac      	ldr	r2, [pc, #688]	; (80031b4 <HAL_RCC_OscConfig+0xc58>)
 8002f02:	f023 0304 	bic.w	r3, r3, #4
 8002f06:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 8081 	beq.w	800301c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1a:	f7fe fdcf 	bl	8001abc <HAL_GetTick>
 8002f1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f22:	e00b      	b.n	8002f3c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f24:	f7fe fdca 	bl	8001abc <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e345      	b.n	80035c8 <HAL_RCC_OscConfig+0x106c>
 8002f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f40:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f44:	2202      	movs	r2, #2
 8002f46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	fa93 f2a3 	rbit	r2, r3
 8002f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f64:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f68:	2202      	movs	r2, #2
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f70:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	fa93 f2a3 	rbit	r2, r3
 8002f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002f82:	601a      	str	r2, [r3, #0]
  return result;
 8002f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f88:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002f8c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f8e:	fab3 f383 	clz	r3, r3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	095b      	lsrs	r3, r3, #5
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	f043 0302 	orr.w	r3, r3, #2
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d102      	bne.n	8002fa8 <HAL_RCC_OscConfig+0xa4c>
 8002fa2:	4b84      	ldr	r3, [pc, #528]	; (80031b4 <HAL_RCC_OscConfig+0xc58>)
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	e013      	b.n	8002fd0 <HAL_RCC_OscConfig+0xa74>
 8002fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fac:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	fa93 f2a3 	rbit	r2, r3
 8002fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	4b79      	ldr	r3, [pc, #484]	; (80031b4 <HAL_RCC_OscConfig+0xc58>)
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fd4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002fd8:	2102      	movs	r1, #2
 8002fda:	6011      	str	r1, [r2, #0]
 8002fdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fe0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002fe4:	6812      	ldr	r2, [r2, #0]
 8002fe6:	fa92 f1a2 	rbit	r1, r2
 8002fea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fee:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002ff2:	6011      	str	r1, [r2, #0]
  return result;
 8002ff4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ff8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	fab2 f282 	clz	r2, r2
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	f002 021f 	and.w	r2, r2, #31
 800300e:	2101      	movs	r1, #1
 8003010:	fa01 f202 	lsl.w	r2, r1, r2
 8003014:	4013      	ands	r3, r2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d084      	beq.n	8002f24 <HAL_RCC_OscConfig+0x9c8>
 800301a:	e07f      	b.n	800311c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301c:	f7fe fd4e 	bl	8001abc <HAL_GetTick>
 8003020:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003024:	e00b      	b.n	800303e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003026:	f7fe fd49 	bl	8001abc <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	f241 3288 	movw	r2, #5000	; 0x1388
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e2c4      	b.n	80035c8 <HAL_RCC_OscConfig+0x106c>
 800303e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003042:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003046:	2202      	movs	r2, #2
 8003048:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	fa93 f2a3 	rbit	r2, r3
 8003058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003066:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800306a:	2202      	movs	r2, #2
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003072:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	fa93 f2a3 	rbit	r2, r3
 800307c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003080:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003084:	601a      	str	r2, [r3, #0]
  return result;
 8003086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800308e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003090:	fab3 f383 	clz	r3, r3
 8003094:	b2db      	uxtb	r3, r3
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	b2db      	uxtb	r3, r3
 800309a:	f043 0302 	orr.w	r3, r3, #2
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d102      	bne.n	80030aa <HAL_RCC_OscConfig+0xb4e>
 80030a4:	4b43      	ldr	r3, [pc, #268]	; (80031b4 <HAL_RCC_OscConfig+0xc58>)
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	e013      	b.n	80030d2 <HAL_RCC_OscConfig+0xb76>
 80030aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ae:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80030b2:	2202      	movs	r2, #2
 80030b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ba:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	fa93 f2a3 	rbit	r2, r3
 80030c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	4b39      	ldr	r3, [pc, #228]	; (80031b4 <HAL_RCC_OscConfig+0xc58>)
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030d6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80030da:	2102      	movs	r1, #2
 80030dc:	6011      	str	r1, [r2, #0]
 80030de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030e2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	fa92 f1a2 	rbit	r1, r2
 80030ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030f0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80030f4:	6011      	str	r1, [r2, #0]
  return result;
 80030f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030fa:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	fab2 f282 	clz	r2, r2
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	f002 021f 	and.w	r2, r2, #31
 8003110:	2101      	movs	r1, #1
 8003112:	fa01 f202 	lsl.w	r2, r1, r2
 8003116:	4013      	ands	r3, r2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d184      	bne.n	8003026 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800311c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003120:	2b01      	cmp	r3, #1
 8003122:	d105      	bne.n	8003130 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003124:	4b23      	ldr	r3, [pc, #140]	; (80031b4 <HAL_RCC_OscConfig+0xc58>)
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	4a22      	ldr	r2, [pc, #136]	; (80031b4 <HAL_RCC_OscConfig+0xc58>)
 800312a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800312e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003134:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 8242 	beq.w	80035c6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003142:	4b1c      	ldr	r3, [pc, #112]	; (80031b4 <HAL_RCC_OscConfig+0xc58>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f003 030c 	and.w	r3, r3, #12
 800314a:	2b08      	cmp	r3, #8
 800314c:	f000 8213 	beq.w	8003576 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003154:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	2b02      	cmp	r3, #2
 800315e:	f040 8162 	bne.w	8003426 <HAL_RCC_OscConfig+0xeca>
 8003162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003166:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800316a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800316e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003174:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	fa93 f2a3 	rbit	r2, r3
 800317e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003182:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003186:	601a      	str	r2, [r3, #0]
  return result;
 8003188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003190:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003192:	fab3 f383 	clz	r3, r3
 8003196:	b2db      	uxtb	r3, r3
 8003198:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800319c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	461a      	mov	r2, r3
 80031a4:	2300      	movs	r3, #0
 80031a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a8:	f7fe fc88 	bl	8001abc <HAL_GetTick>
 80031ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031b0:	e00c      	b.n	80031cc <HAL_RCC_OscConfig+0xc70>
 80031b2:	bf00      	nop
 80031b4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b8:	f7fe fc80 	bl	8001abc <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e1fd      	b.n	80035c8 <HAL_RCC_OscConfig+0x106c>
 80031cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80031d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031de:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	fa93 f2a3 	rbit	r2, r3
 80031e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ec:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80031f0:	601a      	str	r2, [r3, #0]
  return result;
 80031f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80031fa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031fc:	fab3 f383 	clz	r3, r3
 8003200:	b2db      	uxtb	r3, r3
 8003202:	095b      	lsrs	r3, r3, #5
 8003204:	b2db      	uxtb	r3, r3
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b01      	cmp	r3, #1
 800320e:	d102      	bne.n	8003216 <HAL_RCC_OscConfig+0xcba>
 8003210:	4bb0      	ldr	r3, [pc, #704]	; (80034d4 <HAL_RCC_OscConfig+0xf78>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	e027      	b.n	8003266 <HAL_RCC_OscConfig+0xd0a>
 8003216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800321e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003222:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003228:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	fa93 f2a3 	rbit	r2, r3
 8003232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003236:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003240:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003244:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	fa93 f2a3 	rbit	r2, r3
 8003258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	4b9c      	ldr	r3, [pc, #624]	; (80034d4 <HAL_RCC_OscConfig+0xf78>)
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800326a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800326e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003272:	6011      	str	r1, [r2, #0]
 8003274:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003278:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800327c:	6812      	ldr	r2, [r2, #0]
 800327e:	fa92 f1a2 	rbit	r1, r2
 8003282:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003286:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800328a:	6011      	str	r1, [r2, #0]
  return result;
 800328c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003290:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	fab2 f282 	clz	r2, r2
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	f042 0220 	orr.w	r2, r2, #32
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	f002 021f 	and.w	r2, r2, #31
 80032a6:	2101      	movs	r1, #1
 80032a8:	fa01 f202 	lsl.w	r2, r1, r2
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d182      	bne.n	80031b8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032b2:	4b88      	ldr	r3, [pc, #544]	; (80034d4 <HAL_RCC_OscConfig+0xf78>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80032c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	430b      	orrs	r3, r1
 80032d4:	497f      	ldr	r1, [pc, #508]	; (80034d4 <HAL_RCC_OscConfig+0xf78>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	604b      	str	r3, [r1, #4]
 80032da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032de:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80032e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ec:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	fa93 f2a3 	rbit	r2, r3
 80032f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80032fe:	601a      	str	r2, [r3, #0]
  return result;
 8003300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003304:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003308:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800330a:	fab3 f383 	clz	r3, r3
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003314:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	461a      	mov	r2, r3
 800331c:	2301      	movs	r3, #1
 800331e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003320:	f7fe fbcc 	bl	8001abc <HAL_GetTick>
 8003324:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003328:	e009      	b.n	800333e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800332a:	f7fe fbc7 	bl	8001abc <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e144      	b.n	80035c8 <HAL_RCC_OscConfig+0x106c>
 800333e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003342:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003346:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800334a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003350:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	fa93 f2a3 	rbit	r2, r3
 800335a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003362:	601a      	str	r2, [r3, #0]
  return result;
 8003364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003368:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800336c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800336e:	fab3 f383 	clz	r3, r3
 8003372:	b2db      	uxtb	r3, r3
 8003374:	095b      	lsrs	r3, r3, #5
 8003376:	b2db      	uxtb	r3, r3
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b01      	cmp	r3, #1
 8003380:	d102      	bne.n	8003388 <HAL_RCC_OscConfig+0xe2c>
 8003382:	4b54      	ldr	r3, [pc, #336]	; (80034d4 <HAL_RCC_OscConfig+0xf78>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	e027      	b.n	80033d8 <HAL_RCC_OscConfig+0xe7c>
 8003388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003390:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003394:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	fa93 f2a3 	rbit	r2, r3
 80033a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80033b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	fa93 f2a3 	rbit	r2, r3
 80033ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ce:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	4b3f      	ldr	r3, [pc, #252]	; (80034d4 <HAL_RCC_OscConfig+0xf78>)
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033dc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80033e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033e4:	6011      	str	r1, [r2, #0]
 80033e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033ea:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80033ee:	6812      	ldr	r2, [r2, #0]
 80033f0:	fa92 f1a2 	rbit	r1, r2
 80033f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033f8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80033fc:	6011      	str	r1, [r2, #0]
  return result;
 80033fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003402:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003406:	6812      	ldr	r2, [r2, #0]
 8003408:	fab2 f282 	clz	r2, r2
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	f042 0220 	orr.w	r2, r2, #32
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	f002 021f 	and.w	r2, r2, #31
 8003418:	2101      	movs	r1, #1
 800341a:	fa01 f202 	lsl.w	r2, r1, r2
 800341e:	4013      	ands	r3, r2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d082      	beq.n	800332a <HAL_RCC_OscConfig+0xdce>
 8003424:	e0cf      	b.n	80035c6 <HAL_RCC_OscConfig+0x106a>
 8003426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800342e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003432:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003438:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	fa93 f2a3 	rbit	r2, r3
 8003442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003446:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800344a:	601a      	str	r2, [r3, #0]
  return result;
 800344c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003450:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003454:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003460:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	461a      	mov	r2, r3
 8003468:	2300      	movs	r3, #0
 800346a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fe fb26 	bl	8001abc <HAL_GetTick>
 8003470:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003474:	e009      	b.n	800348a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003476:	f7fe fb21 	bl	8001abc <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e09e      	b.n	80035c8 <HAL_RCC_OscConfig+0x106c>
 800348a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003492:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003496:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	fa93 f2a3 	rbit	r2, r3
 80034a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034aa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034ae:	601a      	str	r2, [r3, #0]
  return result;
 80034b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ba:	fab3 f383 	clz	r3, r3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	095b      	lsrs	r3, r3, #5
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d104      	bne.n	80034d8 <HAL_RCC_OscConfig+0xf7c>
 80034ce:	4b01      	ldr	r3, [pc, #4]	; (80034d4 <HAL_RCC_OscConfig+0xf78>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	e029      	b.n	8003528 <HAL_RCC_OscConfig+0xfcc>
 80034d4:	40021000 	.word	0x40021000
 80034d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034dc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80034e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ea:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	fa93 f2a3 	rbit	r2, r3
 80034f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003502:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003506:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003510:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	fa93 f2a3 	rbit	r2, r3
 800351a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	4b2b      	ldr	r3, [pc, #172]	; (80035d4 <HAL_RCC_OscConfig+0x1078>)
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800352c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003530:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003534:	6011      	str	r1, [r2, #0]
 8003536:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800353a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800353e:	6812      	ldr	r2, [r2, #0]
 8003540:	fa92 f1a2 	rbit	r1, r2
 8003544:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003548:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800354c:	6011      	str	r1, [r2, #0]
  return result;
 800354e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003552:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	fab2 f282 	clz	r2, r2
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	f042 0220 	orr.w	r2, r2, #32
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	f002 021f 	and.w	r2, r2, #31
 8003568:	2101      	movs	r1, #1
 800356a:	fa01 f202 	lsl.w	r2, r1, r2
 800356e:	4013      	ands	r3, r2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d180      	bne.n	8003476 <HAL_RCC_OscConfig+0xf1a>
 8003574:	e027      	b.n	80035c6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e01e      	b.n	80035c8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800358a:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <HAL_RCC_OscConfig+0x1078>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003592:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003596:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800359a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d10b      	bne.n	80035c2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80035aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80035ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035be:	429a      	cmp	r2, r3
 80035c0:	d001      	beq.n	80035c6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40021000 	.word	0x40021000

080035d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b09e      	sub	sp, #120	; 0x78
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e162      	b.n	80038b6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035f0:	4b90      	ldr	r3, [pc, #576]	; (8003834 <HAL_RCC_ClockConfig+0x25c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d910      	bls.n	8003620 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fe:	4b8d      	ldr	r3, [pc, #564]	; (8003834 <HAL_RCC_ClockConfig+0x25c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f023 0207 	bic.w	r2, r3, #7
 8003606:	498b      	ldr	r1, [pc, #556]	; (8003834 <HAL_RCC_ClockConfig+0x25c>)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	4313      	orrs	r3, r2
 800360c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800360e:	4b89      	ldr	r3, [pc, #548]	; (8003834 <HAL_RCC_ClockConfig+0x25c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d001      	beq.n	8003620 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e14a      	b.n	80038b6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d008      	beq.n	800363e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800362c:	4b82      	ldr	r3, [pc, #520]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	497f      	ldr	r1, [pc, #508]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 800363a:	4313      	orrs	r3, r2
 800363c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 80dc 	beq.w	8003804 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d13c      	bne.n	80036ce <HAL_RCC_ClockConfig+0xf6>
 8003654:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003658:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800365c:	fa93 f3a3 	rbit	r3, r3
 8003660:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003664:	fab3 f383 	clz	r3, r3
 8003668:	b2db      	uxtb	r3, r3
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	b2db      	uxtb	r3, r3
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b01      	cmp	r3, #1
 8003676:	d102      	bne.n	800367e <HAL_RCC_ClockConfig+0xa6>
 8003678:	4b6f      	ldr	r3, [pc, #444]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	e00f      	b.n	800369e <HAL_RCC_ClockConfig+0xc6>
 800367e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003682:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003684:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003686:	fa93 f3a3 	rbit	r3, r3
 800368a:	667b      	str	r3, [r7, #100]	; 0x64
 800368c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003690:	663b      	str	r3, [r7, #96]	; 0x60
 8003692:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003694:	fa93 f3a3 	rbit	r3, r3
 8003698:	65fb      	str	r3, [r7, #92]	; 0x5c
 800369a:	4b67      	ldr	r3, [pc, #412]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80036a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036a6:	fa92 f2a2 	rbit	r2, r2
 80036aa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80036ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036ae:	fab2 f282 	clz	r2, r2
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	f042 0220 	orr.w	r2, r2, #32
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	f002 021f 	and.w	r2, r2, #31
 80036be:	2101      	movs	r1, #1
 80036c0:	fa01 f202 	lsl.w	r2, r1, r2
 80036c4:	4013      	ands	r3, r2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d17b      	bne.n	80037c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e0f3      	b.n	80038b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d13c      	bne.n	8003750 <HAL_RCC_ClockConfig+0x178>
 80036d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80036e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e6:	fab3 f383 	clz	r3, r3
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	095b      	lsrs	r3, r3, #5
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d102      	bne.n	8003700 <HAL_RCC_ClockConfig+0x128>
 80036fa:	4b4f      	ldr	r3, [pc, #316]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	e00f      	b.n	8003720 <HAL_RCC_ClockConfig+0x148>
 8003700:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003704:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003708:	fa93 f3a3 	rbit	r3, r3
 800370c:	647b      	str	r3, [r7, #68]	; 0x44
 800370e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003712:	643b      	str	r3, [r7, #64]	; 0x40
 8003714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003716:	fa93 f3a3 	rbit	r3, r3
 800371a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800371c:	4b46      	ldr	r3, [pc, #280]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003724:	63ba      	str	r2, [r7, #56]	; 0x38
 8003726:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003728:	fa92 f2a2 	rbit	r2, r2
 800372c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800372e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003730:	fab2 f282 	clz	r2, r2
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	f042 0220 	orr.w	r2, r2, #32
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	f002 021f 	and.w	r2, r2, #31
 8003740:	2101      	movs	r1, #1
 8003742:	fa01 f202 	lsl.w	r2, r1, r2
 8003746:	4013      	ands	r3, r2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d13a      	bne.n	80037c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0b2      	b.n	80038b6 <HAL_RCC_ClockConfig+0x2de>
 8003750:	2302      	movs	r3, #2
 8003752:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003756:	fa93 f3a3 	rbit	r3, r3
 800375a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375e:	fab3 f383 	clz	r3, r3
 8003762:	b2db      	uxtb	r3, r3
 8003764:	095b      	lsrs	r3, r3, #5
 8003766:	b2db      	uxtb	r3, r3
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b01      	cmp	r3, #1
 8003770:	d102      	bne.n	8003778 <HAL_RCC_ClockConfig+0x1a0>
 8003772:	4b31      	ldr	r3, [pc, #196]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	e00d      	b.n	8003794 <HAL_RCC_ClockConfig+0x1bc>
 8003778:	2302      	movs	r3, #2
 800377a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377e:	fa93 f3a3 	rbit	r3, r3
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
 8003784:	2302      	movs	r3, #2
 8003786:	623b      	str	r3, [r7, #32]
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	fa93 f3a3 	rbit	r3, r3
 800378e:	61fb      	str	r3, [r7, #28]
 8003790:	4b29      	ldr	r3, [pc, #164]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	2202      	movs	r2, #2
 8003796:	61ba      	str	r2, [r7, #24]
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	fa92 f2a2 	rbit	r2, r2
 800379e:	617a      	str	r2, [r7, #20]
  return result;
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	fab2 f282 	clz	r2, r2
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	f042 0220 	orr.w	r2, r2, #32
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	f002 021f 	and.w	r2, r2, #31
 80037b2:	2101      	movs	r1, #1
 80037b4:	fa01 f202 	lsl.w	r2, r1, r2
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e079      	b.n	80038b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037c2:	4b1d      	ldr	r3, [pc, #116]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f023 0203 	bic.w	r2, r3, #3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	491a      	ldr	r1, [pc, #104]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037d4:	f7fe f972 	bl	8001abc <HAL_GetTick>
 80037d8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037da:	e00a      	b.n	80037f2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037dc:	f7fe f96e 	bl	8001abc <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e061      	b.n	80038b6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f2:	4b11      	ldr	r3, [pc, #68]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f003 020c 	and.w	r2, r3, #12
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	429a      	cmp	r2, r3
 8003802:	d1eb      	bne.n	80037dc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003804:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <HAL_RCC_ClockConfig+0x25c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d214      	bcs.n	800383c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003812:	4b08      	ldr	r3, [pc, #32]	; (8003834 <HAL_RCC_ClockConfig+0x25c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 0207 	bic.w	r2, r3, #7
 800381a:	4906      	ldr	r1, [pc, #24]	; (8003834 <HAL_RCC_ClockConfig+0x25c>)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	4313      	orrs	r3, r2
 8003820:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b04      	ldr	r3, [pc, #16]	; (8003834 <HAL_RCC_ClockConfig+0x25c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d005      	beq.n	800383c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e040      	b.n	80038b6 <HAL_RCC_ClockConfig+0x2de>
 8003834:	40022000 	.word	0x40022000
 8003838:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003848:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <HAL_RCC_ClockConfig+0x2e8>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	491a      	ldr	r1, [pc, #104]	; (80038c0 <HAL_RCC_ClockConfig+0x2e8>)
 8003856:	4313      	orrs	r3, r2
 8003858:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d009      	beq.n	800387a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003866:	4b16      	ldr	r3, [pc, #88]	; (80038c0 <HAL_RCC_ClockConfig+0x2e8>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	4912      	ldr	r1, [pc, #72]	; (80038c0 <HAL_RCC_ClockConfig+0x2e8>)
 8003876:	4313      	orrs	r3, r2
 8003878:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800387a:	f000 f829 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 800387e:	4601      	mov	r1, r0
 8003880:	4b0f      	ldr	r3, [pc, #60]	; (80038c0 <HAL_RCC_ClockConfig+0x2e8>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003888:	22f0      	movs	r2, #240	; 0xf0
 800388a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	fa92 f2a2 	rbit	r2, r2
 8003892:	60fa      	str	r2, [r7, #12]
  return result;
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	fab2 f282 	clz	r2, r2
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	40d3      	lsrs	r3, r2
 800389e:	4a09      	ldr	r2, [pc, #36]	; (80038c4 <HAL_RCC_ClockConfig+0x2ec>)
 80038a0:	5cd3      	ldrb	r3, [r2, r3]
 80038a2:	fa21 f303 	lsr.w	r3, r1, r3
 80038a6:	4a08      	ldr	r2, [pc, #32]	; (80038c8 <HAL_RCC_ClockConfig+0x2f0>)
 80038a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80038aa:	4b08      	ldr	r3, [pc, #32]	; (80038cc <HAL_RCC_ClockConfig+0x2f4>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fe f8c0 	bl	8001a34 <HAL_InitTick>
  
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3778      	adds	r7, #120	; 0x78
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40021000 	.word	0x40021000
 80038c4:	08006c9c 	.word	0x08006c9c
 80038c8:	20000090 	.word	0x20000090
 80038cc:	20000094 	.word	0x20000094

080038d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b08b      	sub	sp, #44	; 0x2c
 80038d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
 80038da:	2300      	movs	r3, #0
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	2300      	movs	r3, #0
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80038ea:	4b29      	ldr	r3, [pc, #164]	; (8003990 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d002      	beq.n	8003900 <HAL_RCC_GetSysClockFreq+0x30>
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d003      	beq.n	8003906 <HAL_RCC_GetSysClockFreq+0x36>
 80038fe:	e03c      	b.n	800397a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003900:	4b24      	ldr	r3, [pc, #144]	; (8003994 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003902:	623b      	str	r3, [r7, #32]
      break;
 8003904:	e03c      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800390c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003910:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	fa92 f2a2 	rbit	r2, r2
 8003918:	607a      	str	r2, [r7, #4]
  return result;
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	fab2 f282 	clz	r2, r2
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	40d3      	lsrs	r3, r2
 8003924:	4a1c      	ldr	r2, [pc, #112]	; (8003998 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003926:	5cd3      	ldrb	r3, [r2, r3]
 8003928:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800392a:	4b19      	ldr	r3, [pc, #100]	; (8003990 <HAL_RCC_GetSysClockFreq+0xc0>)
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	220f      	movs	r2, #15
 8003934:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	fa92 f2a2 	rbit	r2, r2
 800393c:	60fa      	str	r2, [r7, #12]
  return result;
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	fab2 f282 	clz	r2, r2
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	40d3      	lsrs	r3, r2
 8003948:	4a14      	ldr	r2, [pc, #80]	; (800399c <HAL_RCC_GetSysClockFreq+0xcc>)
 800394a:	5cd3      	ldrb	r3, [r2, r3]
 800394c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003958:	4a0e      	ldr	r2, [pc, #56]	; (8003994 <HAL_RCC_GetSysClockFreq+0xc4>)
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	fb02 f303 	mul.w	r3, r2, r3
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
 8003968:	e004      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	4a0c      	ldr	r2, [pc, #48]	; (80039a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800396e:	fb02 f303 	mul.w	r3, r2, r3
 8003972:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	623b      	str	r3, [r7, #32]
      break;
 8003978:	e002      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <HAL_RCC_GetSysClockFreq+0xc4>)
 800397c:	623b      	str	r3, [r7, #32]
      break;
 800397e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003980:	6a3b      	ldr	r3, [r7, #32]
}
 8003982:	4618      	mov	r0, r3
 8003984:	372c      	adds	r7, #44	; 0x2c
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	40021000 	.word	0x40021000
 8003994:	007a1200 	.word	0x007a1200
 8003998:	08006cb4 	.word	0x08006cb4
 800399c:	08006cc4 	.word	0x08006cc4
 80039a0:	003d0900 	.word	0x003d0900

080039a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039a8:	4b03      	ldr	r3, [pc, #12]	; (80039b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039aa:	681b      	ldr	r3, [r3, #0]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	20000090 	.word	0x20000090

080039bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80039c2:	f7ff ffef 	bl	80039a4 <HAL_RCC_GetHCLKFreq>
 80039c6:	4601      	mov	r1, r0
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039d0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80039d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	fa92 f2a2 	rbit	r2, r2
 80039dc:	603a      	str	r2, [r7, #0]
  return result;
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	fab2 f282 	clz	r2, r2
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	40d3      	lsrs	r3, r2
 80039e8:	4a04      	ldr	r2, [pc, #16]	; (80039fc <HAL_RCC_GetPCLK1Freq+0x40>)
 80039ea:	5cd3      	ldrb	r3, [r2, r3]
 80039ec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40021000 	.word	0x40021000
 80039fc:	08006cac 	.word	0x08006cac

08003a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003a06:	f7ff ffcd 	bl	80039a4 <HAL_RCC_GetHCLKFreq>
 8003a0a:	4601      	mov	r1, r0
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003a14:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003a18:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	fa92 f2a2 	rbit	r2, r2
 8003a20:	603a      	str	r2, [r7, #0]
  return result;
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	fab2 f282 	clz	r2, r2
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	40d3      	lsrs	r3, r2
 8003a2c:	4a04      	ldr	r2, [pc, #16]	; (8003a40 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003a2e:	5cd3      	ldrb	r3, [r2, r3]
 8003a30:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003a34:	4618      	mov	r0, r3
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	08006cac 	.word	0x08006cac

08003a44 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b092      	sub	sp, #72	; 0x48
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003a54:	2300      	movs	r3, #0
 8003a56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 80d4 	beq.w	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a68:	4b4e      	ldr	r3, [pc, #312]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10e      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a74:	4b4b      	ldr	r3, [pc, #300]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	4a4a      	ldr	r2, [pc, #296]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	61d3      	str	r3, [r2, #28]
 8003a80:	4b48      	ldr	r3, [pc, #288]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a88:	60bb      	str	r3, [r7, #8]
 8003a8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a92:	4b45      	ldr	r3, [pc, #276]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d118      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a9e:	4b42      	ldr	r3, [pc, #264]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a41      	ldr	r2, [pc, #260]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aaa:	f7fe f807 	bl	8001abc <HAL_GetTick>
 8003aae:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab2:	f7fe f803 	bl	8001abc <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b64      	cmp	r3, #100	; 0x64
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e169      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac4:	4b38      	ldr	r3, [pc, #224]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f0      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ad0:	4b34      	ldr	r3, [pc, #208]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 8084 	beq.w	8003bea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d07c      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003af0:	4b2c      	ldr	r3, [pc, #176]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003afa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003afe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b02:	fa93 f3a3 	rbit	r3, r3
 8003b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b0a:	fab3 f383 	clz	r3, r3
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	461a      	mov	r2, r3
 8003b12:	4b26      	ldr	r3, [pc, #152]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	461a      	mov	r2, r3
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b26:	fa93 f3a3 	rbit	r3, r3
 8003b2a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b2e:	fab3 f383 	clz	r3, r3
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	461a      	mov	r2, r3
 8003b36:	4b1d      	ldr	r3, [pc, #116]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	2300      	movs	r3, #0
 8003b40:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b42:	4a18      	ldr	r2, [pc, #96]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b46:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d04b      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b52:	f7fd ffb3 	bl	8001abc <HAL_GetTick>
 8003b56:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b58:	e00a      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5a:	f7fd ffaf 	bl	8001abc <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e113      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003b70:	2302      	movs	r3, #2
 8003b72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b76:	fa93 f3a3 	rbit	r3, r3
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	623b      	str	r3, [r7, #32]
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	fa93 f3a3 	rbit	r3, r3
 8003b86:	61fb      	str	r3, [r7, #28]
  return result;
 8003b88:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8a:	fab3 f383 	clz	r3, r3
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	095b      	lsrs	r3, r3, #5
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	f043 0302 	orr.w	r3, r3, #2
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d108      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003b9e:	4b01      	ldr	r3, [pc, #4]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	e00d      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	40007000 	.word	0x40007000
 8003bac:	10908100 	.word	0x10908100
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	fa93 f3a3 	rbit	r3, r3
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	4b78      	ldr	r3, [pc, #480]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	613a      	str	r2, [r7, #16]
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	fa92 f2a2 	rbit	r2, r2
 8003bca:	60fa      	str	r2, [r7, #12]
  return result;
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	fab2 f282 	clz	r2, r2
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	f002 021f 	and.w	r2, r2, #31
 8003bde:	2101      	movs	r1, #1
 8003be0:	fa01 f202 	lsl.w	r2, r1, r2
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0b7      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003bea:	4b6d      	ldr	r3, [pc, #436]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	496a      	ldr	r1, [pc, #424]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bfc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d105      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c04:	4b66      	ldr	r3, [pc, #408]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	4a65      	ldr	r2, [pc, #404]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c1c:	4b60      	ldr	r3, [pc, #384]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	f023 0203 	bic.w	r2, r3, #3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	495d      	ldr	r1, [pc, #372]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d008      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c3a:	4b59      	ldr	r3, [pc, #356]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	4956      	ldr	r1, [pc, #344]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c58:	4b51      	ldr	r3, [pc, #324]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	494e      	ldr	r1, [pc, #312]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0320 	and.w	r3, r3, #32
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d008      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c76:	4b4a      	ldr	r3, [pc, #296]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	f023 0210 	bic.w	r2, r3, #16
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	4947      	ldr	r1, [pc, #284]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003c94:	4b42      	ldr	r3, [pc, #264]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	493f      	ldr	r1, [pc, #252]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d008      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cb2:	4b3b      	ldr	r3, [pc, #236]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	f023 0220 	bic.w	r2, r3, #32
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	4938      	ldr	r1, [pc, #224]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0308 	and.w	r3, r3, #8
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d008      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cd0:	4b33      	ldr	r3, [pc, #204]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	4930      	ldr	r1, [pc, #192]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0310 	and.w	r3, r3, #16
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d008      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cee:	4b2c      	ldr	r3, [pc, #176]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	4929      	ldr	r1, [pc, #164]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d0c:	4b24      	ldr	r3, [pc, #144]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	4921      	ldr	r1, [pc, #132]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d008      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d2a:	4b1d      	ldr	r3, [pc, #116]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	491a      	ldr	r1, [pc, #104]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003d48:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	4912      	ldr	r1, [pc, #72]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d66:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	490b      	ldr	r1, [pc, #44]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003d84:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d88:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d90:	4903      	ldr	r1, [pc, #12]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3748      	adds	r7, #72	; 0x48
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40021000 	.word	0x40021000

08003da4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e09d      	b.n	8003ef2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d108      	bne.n	8003dd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dc6:	d009      	beq.n	8003ddc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	61da      	str	r2, [r3, #28]
 8003dce:	e005      	b.n	8003ddc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fd fc30 	bl	800165c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e1c:	d902      	bls.n	8003e24 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	e002      	b.n	8003e2a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e28:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e32:	d007      	beq.n	8003e44 <HAL_SPI_Init+0xa0>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e3c:	d002      	beq.n	8003e44 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e54:	431a      	orrs	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e86:	ea42 0103 	orr.w	r1, r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	0c1b      	lsrs	r3, r3, #16
 8003ea0:	f003 0204 	and.w	r2, r3, #4
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ec0:	ea42 0103 	orr.w	r1, r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69da      	ldr	r2, [r3, #28]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ee0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b082      	sub	sp, #8
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e049      	b.n	8003fa0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d106      	bne.n	8003f26 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7fd fbdd 	bl	80016e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2202      	movs	r2, #2
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3304      	adds	r3, #4
 8003f36:	4619      	mov	r1, r3
 8003f38:	4610      	mov	r0, r2
 8003f3a:	f000 fdbd 	bl	8004ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d001      	beq.n	8003fc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e04a      	b.n	8004056 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0201 	orr.w	r2, r2, #1
 8003fd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a21      	ldr	r2, [pc, #132]	; (8004064 <HAL_TIM_Base_Start_IT+0xbc>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d018      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x6c>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fea:	d013      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x6c>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a1d      	ldr	r2, [pc, #116]	; (8004068 <HAL_TIM_Base_Start_IT+0xc0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00e      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x6c>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a1c      	ldr	r2, [pc, #112]	; (800406c <HAL_TIM_Base_Start_IT+0xc4>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d009      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x6c>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a1a      	ldr	r2, [pc, #104]	; (8004070 <HAL_TIM_Base_Start_IT+0xc8>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d004      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x6c>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a19      	ldr	r2, [pc, #100]	; (8004074 <HAL_TIM_Base_Start_IT+0xcc>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d115      	bne.n	8004040 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	4b17      	ldr	r3, [pc, #92]	; (8004078 <HAL_TIM_Base_Start_IT+0xd0>)
 800401c:	4013      	ands	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b06      	cmp	r3, #6
 8004024:	d015      	beq.n	8004052 <HAL_TIM_Base_Start_IT+0xaa>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800402c:	d011      	beq.n	8004052 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0201 	orr.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403e:	e008      	b.n	8004052 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	e000      	b.n	8004054 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004052:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40012c00 	.word	0x40012c00
 8004068:	40000400 	.word	0x40000400
 800406c:	40000800 	.word	0x40000800
 8004070:	40013400 	.word	0x40013400
 8004074:	40014000 	.word	0x40014000
 8004078:	00010007 	.word	0x00010007

0800407c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e049      	b.n	8004122 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f841 	bl	800412a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3304      	adds	r3, #4
 80040b8:	4619      	mov	r1, r3
 80040ba:	4610      	mov	r0, r2
 80040bc:	f000 fcfc 	bl	8004ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
	...

08004140 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d109      	bne.n	8004164 <HAL_TIM_PWM_Start+0x24>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b01      	cmp	r3, #1
 800415a:	bf14      	ite	ne
 800415c:	2301      	movne	r3, #1
 800415e:	2300      	moveq	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	e03c      	b.n	80041de <HAL_TIM_PWM_Start+0x9e>
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2b04      	cmp	r3, #4
 8004168:	d109      	bne.n	800417e <HAL_TIM_PWM_Start+0x3e>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b01      	cmp	r3, #1
 8004174:	bf14      	ite	ne
 8004176:	2301      	movne	r3, #1
 8004178:	2300      	moveq	r3, #0
 800417a:	b2db      	uxtb	r3, r3
 800417c:	e02f      	b.n	80041de <HAL_TIM_PWM_Start+0x9e>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b08      	cmp	r3, #8
 8004182:	d109      	bne.n	8004198 <HAL_TIM_PWM_Start+0x58>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b01      	cmp	r3, #1
 800418e:	bf14      	ite	ne
 8004190:	2301      	movne	r3, #1
 8004192:	2300      	moveq	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	e022      	b.n	80041de <HAL_TIM_PWM_Start+0x9e>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2b0c      	cmp	r3, #12
 800419c:	d109      	bne.n	80041b2 <HAL_TIM_PWM_Start+0x72>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	bf14      	ite	ne
 80041aa:	2301      	movne	r3, #1
 80041ac:	2300      	moveq	r3, #0
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	e015      	b.n	80041de <HAL_TIM_PWM_Start+0x9e>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b10      	cmp	r3, #16
 80041b6:	d109      	bne.n	80041cc <HAL_TIM_PWM_Start+0x8c>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	bf14      	ite	ne
 80041c4:	2301      	movne	r3, #1
 80041c6:	2300      	moveq	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	e008      	b.n	80041de <HAL_TIM_PWM_Start+0x9e>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	bf14      	ite	ne
 80041d8:	2301      	movne	r3, #1
 80041da:	2300      	moveq	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e097      	b.n	8004316 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d104      	bne.n	80041f6 <HAL_TIM_PWM_Start+0xb6>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041f4:	e023      	b.n	800423e <HAL_TIM_PWM_Start+0xfe>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d104      	bne.n	8004206 <HAL_TIM_PWM_Start+0xc6>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004204:	e01b      	b.n	800423e <HAL_TIM_PWM_Start+0xfe>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b08      	cmp	r3, #8
 800420a:	d104      	bne.n	8004216 <HAL_TIM_PWM_Start+0xd6>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004214:	e013      	b.n	800423e <HAL_TIM_PWM_Start+0xfe>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b0c      	cmp	r3, #12
 800421a:	d104      	bne.n	8004226 <HAL_TIM_PWM_Start+0xe6>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004224:	e00b      	b.n	800423e <HAL_TIM_PWM_Start+0xfe>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b10      	cmp	r3, #16
 800422a:	d104      	bne.n	8004236 <HAL_TIM_PWM_Start+0xf6>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004234:	e003      	b.n	800423e <HAL_TIM_PWM_Start+0xfe>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2202      	movs	r2, #2
 800423a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2201      	movs	r2, #1
 8004244:	6839      	ldr	r1, [r7, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f001 f836 	bl	80052b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a33      	ldr	r2, [pc, #204]	; (8004320 <HAL_TIM_PWM_Start+0x1e0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d013      	beq.n	800427e <HAL_TIM_PWM_Start+0x13e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a32      	ldr	r2, [pc, #200]	; (8004324 <HAL_TIM_PWM_Start+0x1e4>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d00e      	beq.n	800427e <HAL_TIM_PWM_Start+0x13e>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a30      	ldr	r2, [pc, #192]	; (8004328 <HAL_TIM_PWM_Start+0x1e8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d009      	beq.n	800427e <HAL_TIM_PWM_Start+0x13e>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a2f      	ldr	r2, [pc, #188]	; (800432c <HAL_TIM_PWM_Start+0x1ec>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d004      	beq.n	800427e <HAL_TIM_PWM_Start+0x13e>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a2d      	ldr	r2, [pc, #180]	; (8004330 <HAL_TIM_PWM_Start+0x1f0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d101      	bne.n	8004282 <HAL_TIM_PWM_Start+0x142>
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <HAL_TIM_PWM_Start+0x144>
 8004282:	2300      	movs	r3, #0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d007      	beq.n	8004298 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004296:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a20      	ldr	r2, [pc, #128]	; (8004320 <HAL_TIM_PWM_Start+0x1e0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d018      	beq.n	80042d4 <HAL_TIM_PWM_Start+0x194>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042aa:	d013      	beq.n	80042d4 <HAL_TIM_PWM_Start+0x194>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a20      	ldr	r2, [pc, #128]	; (8004334 <HAL_TIM_PWM_Start+0x1f4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00e      	beq.n	80042d4 <HAL_TIM_PWM_Start+0x194>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a1f      	ldr	r2, [pc, #124]	; (8004338 <HAL_TIM_PWM_Start+0x1f8>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d009      	beq.n	80042d4 <HAL_TIM_PWM_Start+0x194>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a17      	ldr	r2, [pc, #92]	; (8004324 <HAL_TIM_PWM_Start+0x1e4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d004      	beq.n	80042d4 <HAL_TIM_PWM_Start+0x194>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a16      	ldr	r2, [pc, #88]	; (8004328 <HAL_TIM_PWM_Start+0x1e8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d115      	bne.n	8004300 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	4b18      	ldr	r3, [pc, #96]	; (800433c <HAL_TIM_PWM_Start+0x1fc>)
 80042dc:	4013      	ands	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b06      	cmp	r3, #6
 80042e4:	d015      	beq.n	8004312 <HAL_TIM_PWM_Start+0x1d2>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ec:	d011      	beq.n	8004312 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f042 0201 	orr.w	r2, r2, #1
 80042fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042fe:	e008      	b.n	8004312 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	e000      	b.n	8004314 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004312:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40012c00 	.word	0x40012c00
 8004324:	40013400 	.word	0x40013400
 8004328:	40014000 	.word	0x40014000
 800432c:	40014400 	.word	0x40014400
 8004330:	40014800 	.word	0x40014800
 8004334:	40000400 	.word	0x40000400
 8004338:	40000800 	.word	0x40000800
 800433c:	00010007 	.word	0x00010007

08004340 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2200      	movs	r2, #0
 8004350:	6839      	ldr	r1, [r7, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f000 ffb0 	bl	80052b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a3e      	ldr	r2, [pc, #248]	; (8004458 <HAL_TIM_PWM_Stop+0x118>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d013      	beq.n	800438a <HAL_TIM_PWM_Stop+0x4a>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a3d      	ldr	r2, [pc, #244]	; (800445c <HAL_TIM_PWM_Stop+0x11c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00e      	beq.n	800438a <HAL_TIM_PWM_Stop+0x4a>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a3b      	ldr	r2, [pc, #236]	; (8004460 <HAL_TIM_PWM_Stop+0x120>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d009      	beq.n	800438a <HAL_TIM_PWM_Stop+0x4a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a3a      	ldr	r2, [pc, #232]	; (8004464 <HAL_TIM_PWM_Stop+0x124>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d004      	beq.n	800438a <HAL_TIM_PWM_Stop+0x4a>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a38      	ldr	r2, [pc, #224]	; (8004468 <HAL_TIM_PWM_Stop+0x128>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d101      	bne.n	800438e <HAL_TIM_PWM_Stop+0x4e>
 800438a:	2301      	movs	r3, #1
 800438c:	e000      	b.n	8004390 <HAL_TIM_PWM_Stop+0x50>
 800438e:	2300      	movs	r3, #0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d017      	beq.n	80043c4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6a1a      	ldr	r2, [r3, #32]
 800439a:	f241 1311 	movw	r3, #4369	; 0x1111
 800439e:	4013      	ands	r3, r2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10f      	bne.n	80043c4 <HAL_TIM_PWM_Stop+0x84>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6a1a      	ldr	r2, [r3, #32]
 80043aa:	f240 4344 	movw	r3, #1092	; 0x444
 80043ae:	4013      	ands	r3, r2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d107      	bne.n	80043c4 <HAL_TIM_PWM_Stop+0x84>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6a1a      	ldr	r2, [r3, #32]
 80043ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80043ce:	4013      	ands	r3, r2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10f      	bne.n	80043f4 <HAL_TIM_PWM_Stop+0xb4>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6a1a      	ldr	r2, [r3, #32]
 80043da:	f240 4344 	movw	r3, #1092	; 0x444
 80043de:	4013      	ands	r3, r2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d107      	bne.n	80043f4 <HAL_TIM_PWM_Stop+0xb4>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0201 	bic.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d104      	bne.n	8004404 <HAL_TIM_PWM_Stop+0xc4>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004402:	e023      	b.n	800444c <HAL_TIM_PWM_Stop+0x10c>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2b04      	cmp	r3, #4
 8004408:	d104      	bne.n	8004414 <HAL_TIM_PWM_Stop+0xd4>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004412:	e01b      	b.n	800444c <HAL_TIM_PWM_Stop+0x10c>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2b08      	cmp	r3, #8
 8004418:	d104      	bne.n	8004424 <HAL_TIM_PWM_Stop+0xe4>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004422:	e013      	b.n	800444c <HAL_TIM_PWM_Stop+0x10c>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	2b0c      	cmp	r3, #12
 8004428:	d104      	bne.n	8004434 <HAL_TIM_PWM_Stop+0xf4>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004432:	e00b      	b.n	800444c <HAL_TIM_PWM_Stop+0x10c>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2b10      	cmp	r3, #16
 8004438:	d104      	bne.n	8004444 <HAL_TIM_PWM_Stop+0x104>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004442:	e003      	b.n	800444c <HAL_TIM_PWM_Stop+0x10c>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40012c00 	.word	0x40012c00
 800445c:	40013400 	.word	0x40013400
 8004460:	40014000 	.word	0x40014000
 8004464:	40014400 	.word	0x40014400
 8004468:	40014800 	.word	0x40014800

0800446c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b02      	cmp	r3, #2
 8004480:	d122      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b02      	cmp	r3, #2
 800448e:	d11b      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f06f 0202 	mvn.w	r2, #2
 8004498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 fae3 	bl	8004a7a <HAL_TIM_IC_CaptureCallback>
 80044b4:	e005      	b.n	80044c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fad5 	bl	8004a66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 fae6 	bl	8004a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f003 0304 	and.w	r3, r3, #4
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d122      	bne.n	800451c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b04      	cmp	r3, #4
 80044e2:	d11b      	bne.n	800451c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0204 	mvn.w	r2, #4
 80044ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2202      	movs	r2, #2
 80044f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fab9 	bl	8004a7a <HAL_TIM_IC_CaptureCallback>
 8004508:	e005      	b.n	8004516 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 faab 	bl	8004a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 fabc 	bl	8004a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b08      	cmp	r3, #8
 8004528:	d122      	bne.n	8004570 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	2b08      	cmp	r3, #8
 8004536:	d11b      	bne.n	8004570 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f06f 0208 	mvn.w	r2, #8
 8004540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2204      	movs	r2, #4
 8004546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fa8f 	bl	8004a7a <HAL_TIM_IC_CaptureCallback>
 800455c:	e005      	b.n	800456a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fa81 	bl	8004a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fa92 	bl	8004a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f003 0310 	and.w	r3, r3, #16
 800457a:	2b10      	cmp	r3, #16
 800457c:	d122      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f003 0310 	and.w	r3, r3, #16
 8004588:	2b10      	cmp	r3, #16
 800458a:	d11b      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0210 	mvn.w	r2, #16
 8004594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2208      	movs	r2, #8
 800459a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fa65 	bl	8004a7a <HAL_TIM_IC_CaptureCallback>
 80045b0:	e005      	b.n	80045be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fa57 	bl	8004a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 fa68 	bl	8004a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d10e      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d107      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0201 	mvn.w	r2, #1
 80045e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fc fdf2 	bl	80011d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fa:	2b80      	cmp	r3, #128	; 0x80
 80045fc:	d10e      	bne.n	800461c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004608:	2b80      	cmp	r3, #128	; 0x80
 800460a:	d107      	bne.n	800461c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fefe 	bl	8005418 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800462a:	d10e      	bne.n	800464a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004636:	2b80      	cmp	r3, #128	; 0x80
 8004638:	d107      	bne.n	800464a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 fef1 	bl	800542c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004654:	2b40      	cmp	r3, #64	; 0x40
 8004656:	d10e      	bne.n	8004676 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004662:	2b40      	cmp	r3, #64	; 0x40
 8004664:	d107      	bne.n	8004676 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800466e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 fa16 	bl	8004aa2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	f003 0320 	and.w	r3, r3, #32
 8004680:	2b20      	cmp	r3, #32
 8004682:	d10e      	bne.n	80046a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f003 0320 	and.w	r3, r3, #32
 800468e:	2b20      	cmp	r3, #32
 8004690:	d107      	bne.n	80046a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f06f 0220 	mvn.w	r2, #32
 800469a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 feb1 	bl	8005404 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046a2:	bf00      	nop
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e0ff      	b.n	80048ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b14      	cmp	r3, #20
 80046d6:	f200 80f0 	bhi.w	80048ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80046da:	a201      	add	r2, pc, #4	; (adr r2, 80046e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e0:	08004735 	.word	0x08004735
 80046e4:	080048bb 	.word	0x080048bb
 80046e8:	080048bb 	.word	0x080048bb
 80046ec:	080048bb 	.word	0x080048bb
 80046f0:	08004775 	.word	0x08004775
 80046f4:	080048bb 	.word	0x080048bb
 80046f8:	080048bb 	.word	0x080048bb
 80046fc:	080048bb 	.word	0x080048bb
 8004700:	080047b7 	.word	0x080047b7
 8004704:	080048bb 	.word	0x080048bb
 8004708:	080048bb 	.word	0x080048bb
 800470c:	080048bb 	.word	0x080048bb
 8004710:	080047f7 	.word	0x080047f7
 8004714:	080048bb 	.word	0x080048bb
 8004718:	080048bb 	.word	0x080048bb
 800471c:	080048bb 	.word	0x080048bb
 8004720:	08004839 	.word	0x08004839
 8004724:	080048bb 	.word	0x080048bb
 8004728:	080048bb 	.word	0x080048bb
 800472c:	080048bb 	.word	0x080048bb
 8004730:	08004879 	.word	0x08004879
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68b9      	ldr	r1, [r7, #8]
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fa4c 	bl	8004bd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699a      	ldr	r2, [r3, #24]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0208 	orr.w	r2, r2, #8
 800474e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699a      	ldr	r2, [r3, #24]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0204 	bic.w	r2, r2, #4
 800475e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6999      	ldr	r1, [r3, #24]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	691a      	ldr	r2, [r3, #16]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	619a      	str	r2, [r3, #24]
      break;
 8004772:	e0a5      	b.n	80048c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68b9      	ldr	r1, [r7, #8]
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fabc 	bl	8004cf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699a      	ldr	r2, [r3, #24]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800478e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800479e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6999      	ldr	r1, [r3, #24]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	021a      	lsls	r2, r3, #8
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	619a      	str	r2, [r3, #24]
      break;
 80047b4:	e084      	b.n	80048c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68b9      	ldr	r1, [r7, #8]
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 fb25 	bl	8004e0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69da      	ldr	r2, [r3, #28]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f042 0208 	orr.w	r2, r2, #8
 80047d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69da      	ldr	r2, [r3, #28]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0204 	bic.w	r2, r2, #4
 80047e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69d9      	ldr	r1, [r3, #28]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	61da      	str	r2, [r3, #28]
      break;
 80047f4:	e064      	b.n	80048c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68b9      	ldr	r1, [r7, #8]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 fb8d 	bl	8004f1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69da      	ldr	r2, [r3, #28]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	69da      	ldr	r2, [r3, #28]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69d9      	ldr	r1, [r3, #28]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	021a      	lsls	r2, r3, #8
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	61da      	str	r2, [r3, #28]
      break;
 8004836:	e043      	b.n	80048c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68b9      	ldr	r1, [r7, #8]
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fbd6 	bl	8004ff0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0208 	orr.w	r2, r2, #8
 8004852:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0204 	bic.w	r2, r2, #4
 8004862:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	691a      	ldr	r2, [r3, #16]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004876:	e023      	b.n	80048c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68b9      	ldr	r1, [r7, #8]
 800487e:	4618      	mov	r0, r3
 8004880:	f000 fc1a 	bl	80050b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004892:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	021a      	lsls	r2, r3, #8
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80048b8:	e002      	b.n	80048c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	75fb      	strb	r3, [r7, #23]
      break;
 80048be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop

080048d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_TIM_ConfigClockSource+0x1c>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e0b6      	b.n	8004a5e <HAL_TIM_ConfigClockSource+0x18a>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800490e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800491a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800492c:	d03e      	beq.n	80049ac <HAL_TIM_ConfigClockSource+0xd8>
 800492e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004932:	f200 8087 	bhi.w	8004a44 <HAL_TIM_ConfigClockSource+0x170>
 8004936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800493a:	f000 8086 	beq.w	8004a4a <HAL_TIM_ConfigClockSource+0x176>
 800493e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004942:	d87f      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x170>
 8004944:	2b70      	cmp	r3, #112	; 0x70
 8004946:	d01a      	beq.n	800497e <HAL_TIM_ConfigClockSource+0xaa>
 8004948:	2b70      	cmp	r3, #112	; 0x70
 800494a:	d87b      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x170>
 800494c:	2b60      	cmp	r3, #96	; 0x60
 800494e:	d050      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0x11e>
 8004950:	2b60      	cmp	r3, #96	; 0x60
 8004952:	d877      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x170>
 8004954:	2b50      	cmp	r3, #80	; 0x50
 8004956:	d03c      	beq.n	80049d2 <HAL_TIM_ConfigClockSource+0xfe>
 8004958:	2b50      	cmp	r3, #80	; 0x50
 800495a:	d873      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x170>
 800495c:	2b40      	cmp	r3, #64	; 0x40
 800495e:	d058      	beq.n	8004a12 <HAL_TIM_ConfigClockSource+0x13e>
 8004960:	2b40      	cmp	r3, #64	; 0x40
 8004962:	d86f      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x170>
 8004964:	2b30      	cmp	r3, #48	; 0x30
 8004966:	d064      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0x15e>
 8004968:	2b30      	cmp	r3, #48	; 0x30
 800496a:	d86b      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x170>
 800496c:	2b20      	cmp	r3, #32
 800496e:	d060      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0x15e>
 8004970:	2b20      	cmp	r3, #32
 8004972:	d867      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x170>
 8004974:	2b00      	cmp	r3, #0
 8004976:	d05c      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0x15e>
 8004978:	2b10      	cmp	r3, #16
 800497a:	d05a      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0x15e>
 800497c:	e062      	b.n	8004a44 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6818      	ldr	r0, [r3, #0]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	6899      	ldr	r1, [r3, #8]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f000 fc73 	bl	8005278 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	609a      	str	r2, [r3, #8]
      break;
 80049aa:	e04f      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	6899      	ldr	r1, [r3, #8]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f000 fc5c 	bl	8005278 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049ce:	609a      	str	r2, [r3, #8]
      break;
 80049d0:	e03c      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6818      	ldr	r0, [r3, #0]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	6859      	ldr	r1, [r3, #4]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	461a      	mov	r2, r3
 80049e0:	f000 fbd0 	bl	8005184 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2150      	movs	r1, #80	; 0x50
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 fc29 	bl	8005242 <TIM_ITRx_SetConfig>
      break;
 80049f0:	e02c      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6818      	ldr	r0, [r3, #0]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	6859      	ldr	r1, [r3, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	461a      	mov	r2, r3
 8004a00:	f000 fbef 	bl	80051e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2160      	movs	r1, #96	; 0x60
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 fc19 	bl	8005242 <TIM_ITRx_SetConfig>
      break;
 8004a10:	e01c      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	6859      	ldr	r1, [r3, #4]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	f000 fbb0 	bl	8005184 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2140      	movs	r1, #64	; 0x40
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 fc09 	bl	8005242 <TIM_ITRx_SetConfig>
      break;
 8004a30:	e00c      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	f000 fc00 	bl	8005242 <TIM_ITRx_SetConfig>
      break;
 8004a42:	e003      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	73fb      	strb	r3, [r7, #15]
      break;
 8004a48:	e000      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004a4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
	...

08004ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a3c      	ldr	r2, [pc, #240]	; (8004bbc <TIM_Base_SetConfig+0x104>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d00f      	beq.n	8004af0 <TIM_Base_SetConfig+0x38>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad6:	d00b      	beq.n	8004af0 <TIM_Base_SetConfig+0x38>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a39      	ldr	r2, [pc, #228]	; (8004bc0 <TIM_Base_SetConfig+0x108>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d007      	beq.n	8004af0 <TIM_Base_SetConfig+0x38>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a38      	ldr	r2, [pc, #224]	; (8004bc4 <TIM_Base_SetConfig+0x10c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d003      	beq.n	8004af0 <TIM_Base_SetConfig+0x38>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a37      	ldr	r2, [pc, #220]	; (8004bc8 <TIM_Base_SetConfig+0x110>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d108      	bne.n	8004b02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a2d      	ldr	r2, [pc, #180]	; (8004bbc <TIM_Base_SetConfig+0x104>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d01b      	beq.n	8004b42 <TIM_Base_SetConfig+0x8a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b10:	d017      	beq.n	8004b42 <TIM_Base_SetConfig+0x8a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a2a      	ldr	r2, [pc, #168]	; (8004bc0 <TIM_Base_SetConfig+0x108>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d013      	beq.n	8004b42 <TIM_Base_SetConfig+0x8a>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a29      	ldr	r2, [pc, #164]	; (8004bc4 <TIM_Base_SetConfig+0x10c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00f      	beq.n	8004b42 <TIM_Base_SetConfig+0x8a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a28      	ldr	r2, [pc, #160]	; (8004bc8 <TIM_Base_SetConfig+0x110>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00b      	beq.n	8004b42 <TIM_Base_SetConfig+0x8a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a27      	ldr	r2, [pc, #156]	; (8004bcc <TIM_Base_SetConfig+0x114>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d007      	beq.n	8004b42 <TIM_Base_SetConfig+0x8a>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a26      	ldr	r2, [pc, #152]	; (8004bd0 <TIM_Base_SetConfig+0x118>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d003      	beq.n	8004b42 <TIM_Base_SetConfig+0x8a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a25      	ldr	r2, [pc, #148]	; (8004bd4 <TIM_Base_SetConfig+0x11c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d108      	bne.n	8004b54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a10      	ldr	r2, [pc, #64]	; (8004bbc <TIM_Base_SetConfig+0x104>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00f      	beq.n	8004ba0 <TIM_Base_SetConfig+0xe8>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a11      	ldr	r2, [pc, #68]	; (8004bc8 <TIM_Base_SetConfig+0x110>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00b      	beq.n	8004ba0 <TIM_Base_SetConfig+0xe8>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a10      	ldr	r2, [pc, #64]	; (8004bcc <TIM_Base_SetConfig+0x114>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d007      	beq.n	8004ba0 <TIM_Base_SetConfig+0xe8>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a0f      	ldr	r2, [pc, #60]	; (8004bd0 <TIM_Base_SetConfig+0x118>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d003      	beq.n	8004ba0 <TIM_Base_SetConfig+0xe8>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a0e      	ldr	r2, [pc, #56]	; (8004bd4 <TIM_Base_SetConfig+0x11c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d103      	bne.n	8004ba8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	691a      	ldr	r2, [r3, #16]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	615a      	str	r2, [r3, #20]
}
 8004bae:	bf00      	nop
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	40012c00 	.word	0x40012c00
 8004bc0:	40000400 	.word	0x40000400
 8004bc4:	40000800 	.word	0x40000800
 8004bc8:	40013400 	.word	0x40013400
 8004bcc:	40014000 	.word	0x40014000
 8004bd0:	40014400 	.word	0x40014400
 8004bd4:	40014800 	.word	0x40014800

08004bd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	f023 0201 	bic.w	r2, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0303 	bic.w	r3, r3, #3
 8004c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f023 0302 	bic.w	r3, r3, #2
 8004c24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a2c      	ldr	r2, [pc, #176]	; (8004ce4 <TIM_OC1_SetConfig+0x10c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00f      	beq.n	8004c58 <TIM_OC1_SetConfig+0x80>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a2b      	ldr	r2, [pc, #172]	; (8004ce8 <TIM_OC1_SetConfig+0x110>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d00b      	beq.n	8004c58 <TIM_OC1_SetConfig+0x80>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a2a      	ldr	r2, [pc, #168]	; (8004cec <TIM_OC1_SetConfig+0x114>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d007      	beq.n	8004c58 <TIM_OC1_SetConfig+0x80>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a29      	ldr	r2, [pc, #164]	; (8004cf0 <TIM_OC1_SetConfig+0x118>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d003      	beq.n	8004c58 <TIM_OC1_SetConfig+0x80>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a28      	ldr	r2, [pc, #160]	; (8004cf4 <TIM_OC1_SetConfig+0x11c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d10c      	bne.n	8004c72 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f023 0308 	bic.w	r3, r3, #8
 8004c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f023 0304 	bic.w	r3, r3, #4
 8004c70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a1b      	ldr	r2, [pc, #108]	; (8004ce4 <TIM_OC1_SetConfig+0x10c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00f      	beq.n	8004c9a <TIM_OC1_SetConfig+0xc2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a1a      	ldr	r2, [pc, #104]	; (8004ce8 <TIM_OC1_SetConfig+0x110>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00b      	beq.n	8004c9a <TIM_OC1_SetConfig+0xc2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a19      	ldr	r2, [pc, #100]	; (8004cec <TIM_OC1_SetConfig+0x114>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d007      	beq.n	8004c9a <TIM_OC1_SetConfig+0xc2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a18      	ldr	r2, [pc, #96]	; (8004cf0 <TIM_OC1_SetConfig+0x118>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d003      	beq.n	8004c9a <TIM_OC1_SetConfig+0xc2>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a17      	ldr	r2, [pc, #92]	; (8004cf4 <TIM_OC1_SetConfig+0x11c>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d111      	bne.n	8004cbe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ca0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	621a      	str	r2, [r3, #32]
}
 8004cd8:	bf00      	nop
 8004cda:	371c      	adds	r7, #28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	40012c00 	.word	0x40012c00
 8004ce8:	40013400 	.word	0x40013400
 8004cec:	40014000 	.word	0x40014000
 8004cf0:	40014400 	.word	0x40014400
 8004cf4:	40014800 	.word	0x40014800

08004cf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	f023 0210 	bic.w	r2, r3, #16
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	021b      	lsls	r3, r3, #8
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f023 0320 	bic.w	r3, r3, #32
 8004d46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	011b      	lsls	r3, r3, #4
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a28      	ldr	r2, [pc, #160]	; (8004df8 <TIM_OC2_SetConfig+0x100>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d003      	beq.n	8004d64 <TIM_OC2_SetConfig+0x6c>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a27      	ldr	r2, [pc, #156]	; (8004dfc <TIM_OC2_SetConfig+0x104>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d10d      	bne.n	8004d80 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a1d      	ldr	r2, [pc, #116]	; (8004df8 <TIM_OC2_SetConfig+0x100>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d00f      	beq.n	8004da8 <TIM_OC2_SetConfig+0xb0>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a1c      	ldr	r2, [pc, #112]	; (8004dfc <TIM_OC2_SetConfig+0x104>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00b      	beq.n	8004da8 <TIM_OC2_SetConfig+0xb0>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a1b      	ldr	r2, [pc, #108]	; (8004e00 <TIM_OC2_SetConfig+0x108>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d007      	beq.n	8004da8 <TIM_OC2_SetConfig+0xb0>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a1a      	ldr	r2, [pc, #104]	; (8004e04 <TIM_OC2_SetConfig+0x10c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d003      	beq.n	8004da8 <TIM_OC2_SetConfig+0xb0>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a19      	ldr	r2, [pc, #100]	; (8004e08 <TIM_OC2_SetConfig+0x110>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d113      	bne.n	8004dd0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dae:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004db6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	621a      	str	r2, [r3, #32]
}
 8004dea:	bf00      	nop
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40012c00 	.word	0x40012c00
 8004dfc:	40013400 	.word	0x40013400
 8004e00:	40014000 	.word	0x40014000
 8004e04:	40014400 	.word	0x40014400
 8004e08:	40014800 	.word	0x40014800

08004e0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 0303 	bic.w	r3, r3, #3
 8004e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	021b      	lsls	r3, r3, #8
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a27      	ldr	r2, [pc, #156]	; (8004f08 <TIM_OC3_SetConfig+0xfc>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d003      	beq.n	8004e76 <TIM_OC3_SetConfig+0x6a>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a26      	ldr	r2, [pc, #152]	; (8004f0c <TIM_OC3_SetConfig+0x100>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d10d      	bne.n	8004e92 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	021b      	lsls	r3, r3, #8
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e90:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a1c      	ldr	r2, [pc, #112]	; (8004f08 <TIM_OC3_SetConfig+0xfc>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00f      	beq.n	8004eba <TIM_OC3_SetConfig+0xae>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a1b      	ldr	r2, [pc, #108]	; (8004f0c <TIM_OC3_SetConfig+0x100>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00b      	beq.n	8004eba <TIM_OC3_SetConfig+0xae>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a1a      	ldr	r2, [pc, #104]	; (8004f10 <TIM_OC3_SetConfig+0x104>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d007      	beq.n	8004eba <TIM_OC3_SetConfig+0xae>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a19      	ldr	r2, [pc, #100]	; (8004f14 <TIM_OC3_SetConfig+0x108>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d003      	beq.n	8004eba <TIM_OC3_SetConfig+0xae>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a18      	ldr	r2, [pc, #96]	; (8004f18 <TIM_OC3_SetConfig+0x10c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d113      	bne.n	8004ee2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	011b      	lsls	r3, r3, #4
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	621a      	str	r2, [r3, #32]
}
 8004efc:	bf00      	nop
 8004efe:	371c      	adds	r7, #28
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	40012c00 	.word	0x40012c00
 8004f0c:	40013400 	.word	0x40013400
 8004f10:	40014000 	.word	0x40014000
 8004f14:	40014400 	.word	0x40014400
 8004f18:	40014800 	.word	0x40014800

08004f1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	021b      	lsls	r3, r3, #8
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	031b      	lsls	r3, r3, #12
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a18      	ldr	r2, [pc, #96]	; (8004fdc <TIM_OC4_SetConfig+0xc0>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00f      	beq.n	8004fa0 <TIM_OC4_SetConfig+0x84>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a17      	ldr	r2, [pc, #92]	; (8004fe0 <TIM_OC4_SetConfig+0xc4>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00b      	beq.n	8004fa0 <TIM_OC4_SetConfig+0x84>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a16      	ldr	r2, [pc, #88]	; (8004fe4 <TIM_OC4_SetConfig+0xc8>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d007      	beq.n	8004fa0 <TIM_OC4_SetConfig+0x84>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a15      	ldr	r2, [pc, #84]	; (8004fe8 <TIM_OC4_SetConfig+0xcc>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d003      	beq.n	8004fa0 <TIM_OC4_SetConfig+0x84>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a14      	ldr	r2, [pc, #80]	; (8004fec <TIM_OC4_SetConfig+0xd0>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d109      	bne.n	8004fb4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	019b      	lsls	r3, r3, #6
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	621a      	str	r2, [r3, #32]
}
 8004fce:	bf00      	nop
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40012c00 	.word	0x40012c00
 8004fe0:	40013400 	.word	0x40013400
 8004fe4:	40014000 	.word	0x40014000
 8004fe8:	40014400 	.word	0x40014400
 8004fec:	40014800 	.word	0x40014800

08004ff0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800501e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	4313      	orrs	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005034:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	041b      	lsls	r3, r3, #16
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	4313      	orrs	r3, r2
 8005040:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a17      	ldr	r2, [pc, #92]	; (80050a4 <TIM_OC5_SetConfig+0xb4>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00f      	beq.n	800506a <TIM_OC5_SetConfig+0x7a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a16      	ldr	r2, [pc, #88]	; (80050a8 <TIM_OC5_SetConfig+0xb8>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d00b      	beq.n	800506a <TIM_OC5_SetConfig+0x7a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a15      	ldr	r2, [pc, #84]	; (80050ac <TIM_OC5_SetConfig+0xbc>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d007      	beq.n	800506a <TIM_OC5_SetConfig+0x7a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a14      	ldr	r2, [pc, #80]	; (80050b0 <TIM_OC5_SetConfig+0xc0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d003      	beq.n	800506a <TIM_OC5_SetConfig+0x7a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a13      	ldr	r2, [pc, #76]	; (80050b4 <TIM_OC5_SetConfig+0xc4>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d109      	bne.n	800507e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005070:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	021b      	lsls	r3, r3, #8
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	621a      	str	r2, [r3, #32]
}
 8005098:	bf00      	nop
 800509a:	371c      	adds	r7, #28
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	40012c00 	.word	0x40012c00
 80050a8:	40013400 	.word	0x40013400
 80050ac:	40014000 	.word	0x40014000
 80050b0:	40014400 	.word	0x40014400
 80050b4:	40014800 	.word	0x40014800

080050b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	021b      	lsls	r3, r3, #8
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	051b      	lsls	r3, r3, #20
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	4313      	orrs	r3, r2
 800510a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a18      	ldr	r2, [pc, #96]	; (8005170 <TIM_OC6_SetConfig+0xb8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d00f      	beq.n	8005134 <TIM_OC6_SetConfig+0x7c>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a17      	ldr	r2, [pc, #92]	; (8005174 <TIM_OC6_SetConfig+0xbc>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d00b      	beq.n	8005134 <TIM_OC6_SetConfig+0x7c>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a16      	ldr	r2, [pc, #88]	; (8005178 <TIM_OC6_SetConfig+0xc0>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d007      	beq.n	8005134 <TIM_OC6_SetConfig+0x7c>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a15      	ldr	r2, [pc, #84]	; (800517c <TIM_OC6_SetConfig+0xc4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d003      	beq.n	8005134 <TIM_OC6_SetConfig+0x7c>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a14      	ldr	r2, [pc, #80]	; (8005180 <TIM_OC6_SetConfig+0xc8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d109      	bne.n	8005148 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800513a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	029b      	lsls	r3, r3, #10
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	4313      	orrs	r3, r2
 8005146:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	621a      	str	r2, [r3, #32]
}
 8005162:	bf00      	nop
 8005164:	371c      	adds	r7, #28
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	40012c00 	.word	0x40012c00
 8005174:	40013400 	.word	0x40013400
 8005178:	40014000 	.word	0x40014000
 800517c:	40014400 	.word	0x40014400
 8005180:	40014800 	.word	0x40014800

08005184 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	f023 0201 	bic.w	r2, r3, #1
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	011b      	lsls	r3, r3, #4
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f023 030a 	bic.w	r3, r3, #10
 80051c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	621a      	str	r2, [r3, #32]
}
 80051d6:	bf00      	nop
 80051d8:	371c      	adds	r7, #28
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b087      	sub	sp, #28
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	60f8      	str	r0, [r7, #12]
 80051ea:	60b9      	str	r1, [r7, #8]
 80051ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	f023 0210 	bic.w	r2, r3, #16
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800520c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	031b      	lsls	r3, r3, #12
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	4313      	orrs	r3, r2
 8005216:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800521e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	011b      	lsls	r3, r3, #4
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	621a      	str	r2, [r3, #32]
}
 8005236:	bf00      	nop
 8005238:	371c      	adds	r7, #28
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005242:	b480      	push	{r7}
 8005244:	b085      	sub	sp, #20
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005258:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4313      	orrs	r3, r2
 8005260:	f043 0307 	orr.w	r3, r3, #7
 8005264:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	609a      	str	r2, [r3, #8]
}
 800526c:	bf00      	nop
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
 8005284:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005292:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	021a      	lsls	r2, r3, #8
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	431a      	orrs	r2, r3
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4313      	orrs	r3, r2
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	609a      	str	r2, [r3, #8]
}
 80052ac:	bf00      	nop
 80052ae:	371c      	adds	r7, #28
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f003 031f 	and.w	r3, r3, #31
 80052ca:	2201      	movs	r2, #1
 80052cc:	fa02 f303 	lsl.w	r3, r2, r3
 80052d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a1a      	ldr	r2, [r3, #32]
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	43db      	mvns	r3, r3
 80052da:	401a      	ands	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6a1a      	ldr	r2, [r3, #32]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f003 031f 	and.w	r3, r3, #31
 80052ea:	6879      	ldr	r1, [r7, #4]
 80052ec:	fa01 f303 	lsl.w	r3, r1, r3
 80052f0:	431a      	orrs	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	621a      	str	r2, [r3, #32]
}
 80052f6:	bf00      	nop
 80052f8:	371c      	adds	r7, #28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
	...

08005304 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005318:	2302      	movs	r3, #2
 800531a:	e063      	b.n	80053e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a2b      	ldr	r2, [pc, #172]	; (80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d004      	beq.n	8005350 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a2a      	ldr	r2, [pc, #168]	; (80053f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d108      	bne.n	8005362 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005356:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	4313      	orrs	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005368:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4313      	orrs	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a1b      	ldr	r2, [pc, #108]	; (80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d018      	beq.n	80053b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538e:	d013      	beq.n	80053b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a18      	ldr	r2, [pc, #96]	; (80053f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00e      	beq.n	80053b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a17      	ldr	r2, [pc, #92]	; (80053fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d009      	beq.n	80053b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a12      	ldr	r2, [pc, #72]	; (80053f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d004      	beq.n	80053b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a13      	ldr	r2, [pc, #76]	; (8005400 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d10c      	bne.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	40012c00 	.word	0x40012c00
 80053f4:	40013400 	.word	0x40013400
 80053f8:	40000400 	.word	0x40000400
 80053fc:	40000800 	.word	0x40000800
 8005400:	40014000 	.word	0x40014000

08005404 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e040      	b.n	80054d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005456:	2b00      	cmp	r3, #0
 8005458:	d106      	bne.n	8005468 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7fc f9aa 	bl	80017bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2224      	movs	r2, #36	; 0x24
 800546c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 0201 	bic.w	r2, r2, #1
 800547c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fbd4 	bl	8005c2c <UART_SetConfig>
 8005484:	4603      	mov	r3, r0
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e022      	b.n	80054d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fd9c 	bl	8005fd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689a      	ldr	r2, [r3, #8]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f042 0201 	orr.w	r2, r2, #1
 80054ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 fe23 	bl	8006118 <UART_CheckIdleState>
 80054d2:	4603      	mov	r3, r0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3708      	adds	r7, #8
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80054dc:	b480      	push	{r7}
 80054de:	b08b      	sub	sp, #44	; 0x2c
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	4613      	mov	r3, r2
 80054e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ee:	2b20      	cmp	r3, #32
 80054f0:	d147      	bne.n	8005582 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <HAL_UART_Transmit_IT+0x22>
 80054f8:	88fb      	ldrh	r3, [r7, #6]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e040      	b.n	8005584 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	88fa      	ldrh	r2, [r7, #6]
 800550c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	88fa      	ldrh	r2, [r7, #6]
 8005514:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2221      	movs	r2, #33	; 0x21
 800552a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005534:	d107      	bne.n	8005546 <HAL_UART_Transmit_IT+0x6a>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d103      	bne.n	8005546 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4a13      	ldr	r2, [pc, #76]	; (8005590 <HAL_UART_Transmit_IT+0xb4>)
 8005542:	66da      	str	r2, [r3, #108]	; 0x6c
 8005544:	e002      	b.n	800554c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4a12      	ldr	r2, [pc, #72]	; (8005594 <HAL_UART_Transmit_IT+0xb8>)
 800554a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	e853 3f00 	ldrex	r3, [r3]
 8005558:	613b      	str	r3, [r7, #16]
   return(result);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	623b      	str	r3, [r7, #32]
 800556c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556e:	69f9      	ldr	r1, [r7, #28]
 8005570:	6a3a      	ldr	r2, [r7, #32]
 8005572:	e841 2300 	strex	r3, r2, [r1]
 8005576:	61bb      	str	r3, [r7, #24]
   return(result);
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1e6      	bne.n	800554c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	e000      	b.n	8005584 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005582:	2302      	movs	r3, #2
  }
}
 8005584:	4618      	mov	r0, r3
 8005586:	372c      	adds	r7, #44	; 0x2c
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	0800664d 	.word	0x0800664d
 8005594:	08006595 	.word	0x08006595

08005598 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08a      	sub	sp, #40	; 0x28
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	4613      	mov	r3, r2
 80055a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055ac:	2b20      	cmp	r3, #32
 80055ae:	d132      	bne.n	8005616 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <HAL_UART_Receive_IT+0x24>
 80055b6:	88fb      	ldrh	r3, [r7, #6]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d101      	bne.n	80055c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e02b      	b.n	8005618 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d018      	beq.n	8005606 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	613b      	str	r3, [r7, #16]
   return(result);
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055e8:	627b      	str	r3, [r7, #36]	; 0x24
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	623b      	str	r3, [r7, #32]
 80055f4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	69f9      	ldr	r1, [r7, #28]
 80055f8:	6a3a      	ldr	r2, [r7, #32]
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1e6      	bne.n	80055d4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005606:	88fb      	ldrh	r3, [r7, #6]
 8005608:	461a      	mov	r2, r3
 800560a:	68b9      	ldr	r1, [r7, #8]
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 fe93 	bl	8006338 <UART_Start_Receive_IT>
 8005612:	4603      	mov	r3, r0
 8005614:	e000      	b.n	8005618 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005616:	2302      	movs	r3, #2
  }
}
 8005618:	4618      	mov	r0, r3
 800561a:	3728      	adds	r7, #40	; 0x28
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b0ba      	sub	sp, #232	; 0xe8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005646:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800564a:	f640 030f 	movw	r3, #2063	; 0x80f
 800564e:	4013      	ands	r3, r2
 8005650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005654:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005658:	2b00      	cmp	r3, #0
 800565a:	d115      	bne.n	8005688 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800565c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005660:	f003 0320 	and.w	r3, r3, #32
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00f      	beq.n	8005688 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800566c:	f003 0320 	and.w	r3, r3, #32
 8005670:	2b00      	cmp	r3, #0
 8005672:	d009      	beq.n	8005688 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 82ab 	beq.w	8005bd4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	4798      	blx	r3
      }
      return;
 8005686:	e2a5      	b.n	8005bd4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005688:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 8117 	beq.w	80058c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	d106      	bne.n	80056ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800569e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80056a2:	4b85      	ldr	r3, [pc, #532]	; (80058b8 <HAL_UART_IRQHandler+0x298>)
 80056a4:	4013      	ands	r3, r2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 810a 	beq.w	80058c0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d011      	beq.n	80056dc <HAL_UART_IRQHandler+0xbc>
 80056b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00b      	beq.n	80056dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2201      	movs	r2, #1
 80056ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056d2:	f043 0201 	orr.w	r2, r3, #1
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d011      	beq.n	800570c <HAL_UART_IRQHandler+0xec>
 80056e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00b      	beq.n	800570c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2202      	movs	r2, #2
 80056fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005702:	f043 0204 	orr.w	r2, r3, #4
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800570c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b00      	cmp	r3, #0
 8005716:	d011      	beq.n	800573c <HAL_UART_IRQHandler+0x11c>
 8005718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00b      	beq.n	800573c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2204      	movs	r2, #4
 800572a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005732:	f043 0202 	orr.w	r2, r3, #2
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800573c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b00      	cmp	r3, #0
 8005746:	d017      	beq.n	8005778 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800574c:	f003 0320 	and.w	r3, r3, #32
 8005750:	2b00      	cmp	r3, #0
 8005752:	d105      	bne.n	8005760 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005758:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00b      	beq.n	8005778 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2208      	movs	r2, #8
 8005766:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800576e:	f043 0208 	orr.w	r2, r3, #8
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800577c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005780:	2b00      	cmp	r3, #0
 8005782:	d012      	beq.n	80057aa <HAL_UART_IRQHandler+0x18a>
 8005784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005788:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00c      	beq.n	80057aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005798:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057a0:	f043 0220 	orr.w	r2, r3, #32
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 8211 	beq.w	8005bd8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80057b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00d      	beq.n	80057de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80057c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057c6:	f003 0320 	and.w	r3, r3, #32
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d007      	beq.n	80057de <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f2:	2b40      	cmp	r3, #64	; 0x40
 80057f4:	d005      	beq.n	8005802 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d04f      	beq.n	80058a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fe4c 	bl	80064a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005812:	2b40      	cmp	r3, #64	; 0x40
 8005814:	d141      	bne.n	800589a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	3308      	adds	r3, #8
 800581c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005820:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800582c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005834:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	3308      	adds	r3, #8
 800583e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005842:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005846:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800584e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005852:	e841 2300 	strex	r3, r2, [r1]
 8005856:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800585a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1d9      	bne.n	8005816 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005866:	2b00      	cmp	r3, #0
 8005868:	d013      	beq.n	8005892 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800586e:	4a13      	ldr	r2, [pc, #76]	; (80058bc <HAL_UART_IRQHandler+0x29c>)
 8005870:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005876:	4618      	mov	r0, r3
 8005878:	f7fc fa76 	bl	8001d68 <HAL_DMA_Abort_IT>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d017      	beq.n	80058b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800588c:	4610      	mov	r0, r2
 800588e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005890:	e00f      	b.n	80058b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f9b4 	bl	8005c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005898:	e00b      	b.n	80058b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f9b0 	bl	8005c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a0:	e007      	b.n	80058b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f9ac 	bl	8005c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80058b0:	e192      	b.n	8005bd8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b2:	bf00      	nop
    return;
 80058b4:	e190      	b.n	8005bd8 <HAL_UART_IRQHandler+0x5b8>
 80058b6:	bf00      	nop
 80058b8:	04000120 	.word	0x04000120
 80058bc:	08006569 	.word	0x08006569

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	f040 814b 	bne.w	8005b60 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ce:	f003 0310 	and.w	r3, r3, #16
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 8144 	beq.w	8005b60 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80058d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058dc:	f003 0310 	and.w	r3, r3, #16
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 813d 	beq.w	8005b60 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2210      	movs	r2, #16
 80058ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f8:	2b40      	cmp	r3, #64	; 0x40
 80058fa:	f040 80b5 	bne.w	8005a68 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800590a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800590e:	2b00      	cmp	r3, #0
 8005910:	f000 8164 	beq.w	8005bdc <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800591a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800591e:	429a      	cmp	r2, r3
 8005920:	f080 815c 	bcs.w	8005bdc <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800592a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	2b20      	cmp	r3, #32
 8005936:	f000 8086 	beq.w	8005a46 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005942:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005946:	e853 3f00 	ldrex	r3, [r3]
 800594a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800594e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005952:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005956:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005964:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005968:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005970:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005974:	e841 2300 	strex	r3, r2, [r1]
 8005978:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800597c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1da      	bne.n	800593a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	3308      	adds	r3, #8
 800598a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800598e:	e853 3f00 	ldrex	r3, [r3]
 8005992:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005994:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005996:	f023 0301 	bic.w	r3, r3, #1
 800599a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	3308      	adds	r3, #8
 80059a4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059a8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80059ac:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ae:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80059b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059b4:	e841 2300 	strex	r3, r2, [r1]
 80059b8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80059ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1e1      	bne.n	8005984 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3308      	adds	r3, #8
 80059c6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059ca:	e853 3f00 	ldrex	r3, [r3]
 80059ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80059d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3308      	adds	r3, #8
 80059e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80059e4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059ec:	e841 2300 	strex	r3, r2, [r1]
 80059f0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80059f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1e3      	bne.n	80059c0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a0e:	e853 3f00 	ldrex	r3, [r3]
 8005a12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a16:	f023 0310 	bic.w	r3, r3, #16
 8005a1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	461a      	mov	r2, r3
 8005a24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a28:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a2a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a30:	e841 2300 	strex	r3, r2, [r1]
 8005a34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1e4      	bne.n	8005a06 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7fc f958 	bl	8001cf6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2202      	movs	r2, #2
 8005a4a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	4619      	mov	r1, r3
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f8d7 	bl	8005c14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a66:	e0b9      	b.n	8005bdc <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 80ab 	beq.w	8005be0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005a8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 80a6 	beq.w	8005be0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9c:	e853 3f00 	ldrex	r3, [r3]
 8005aa0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005aa8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ab8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005abc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005abe:	e841 2300 	strex	r3, r2, [r1]
 8005ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1e4      	bne.n	8005a94 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3308      	adds	r3, #8
 8005ad0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	e853 3f00 	ldrex	r3, [r3]
 8005ad8:	623b      	str	r3, [r7, #32]
   return(result);
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	f023 0301 	bic.w	r3, r3, #1
 8005ae0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3308      	adds	r3, #8
 8005aea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005aee:	633a      	str	r2, [r7, #48]	; 0x30
 8005af0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e3      	bne.n	8005aca <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2220      	movs	r2, #32
 8005b06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	e853 3f00 	ldrex	r3, [r3]
 8005b22:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f023 0310 	bic.w	r3, r3, #16
 8005b2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	461a      	mov	r2, r3
 8005b34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b38:	61fb      	str	r3, [r7, #28]
 8005b3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3c:	69b9      	ldr	r1, [r7, #24]
 8005b3e:	69fa      	ldr	r2, [r7, #28]
 8005b40:	e841 2300 	strex	r3, r2, [r1]
 8005b44:	617b      	str	r3, [r7, #20]
   return(result);
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1e4      	bne.n	8005b16 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b56:	4619      	mov	r1, r3
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 f85b 	bl	8005c14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b5e:	e03f      	b.n	8005be0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00e      	beq.n	8005b8a <HAL_UART_IRQHandler+0x56a>
 8005b6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d008      	beq.n	8005b8a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 ff94 	bl	8006ab0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b88:	e02d      	b.n	8005be6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00e      	beq.n	8005bb4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d008      	beq.n	8005bb4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d01c      	beq.n	8005be4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	4798      	blx	r3
    }
    return;
 8005bb2:	e017      	b.n	8005be4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d012      	beq.n	8005be6 <HAL_UART_IRQHandler+0x5c6>
 8005bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00c      	beq.n	8005be6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fd9d 	bl	800670c <UART_EndTransmit_IT>
    return;
 8005bd2:	e008      	b.n	8005be6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005bd4:	bf00      	nop
 8005bd6:	e006      	b.n	8005be6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005bd8:	bf00      	nop
 8005bda:	e004      	b.n	8005be6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005bdc:	bf00      	nop
 8005bde:	e002      	b.n	8005be6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005be0:	bf00      	nop
 8005be2:	e000      	b.n	8005be6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005be4:	bf00      	nop
  }

}
 8005be6:	37e8      	adds	r7, #232	; 0xe8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b088      	sub	sp, #32
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	431a      	orrs	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	431a      	orrs	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005c5a:	f023 030c 	bic.w	r3, r3, #12
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	6812      	ldr	r2, [r2, #0]
 8005c62:	6979      	ldr	r1, [r7, #20]
 8005c64:	430b      	orrs	r3, r1
 8005c66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4aa7      	ldr	r2, [pc, #668]	; (8005f44 <UART_SetConfig+0x318>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d120      	bne.n	8005cee <UART_SetConfig+0xc2>
 8005cac:	4ba6      	ldr	r3, [pc, #664]	; (8005f48 <UART_SetConfig+0x31c>)
 8005cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb0:	f003 0303 	and.w	r3, r3, #3
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d817      	bhi.n	8005ce8 <UART_SetConfig+0xbc>
 8005cb8:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <UART_SetConfig+0x94>)
 8005cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbe:	bf00      	nop
 8005cc0:	08005cd1 	.word	0x08005cd1
 8005cc4:	08005cdd 	.word	0x08005cdd
 8005cc8:	08005ce3 	.word	0x08005ce3
 8005ccc:	08005cd7 	.word	0x08005cd7
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	77fb      	strb	r3, [r7, #31]
 8005cd4:	e0b5      	b.n	8005e42 <UART_SetConfig+0x216>
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	77fb      	strb	r3, [r7, #31]
 8005cda:	e0b2      	b.n	8005e42 <UART_SetConfig+0x216>
 8005cdc:	2304      	movs	r3, #4
 8005cde:	77fb      	strb	r3, [r7, #31]
 8005ce0:	e0af      	b.n	8005e42 <UART_SetConfig+0x216>
 8005ce2:	2308      	movs	r3, #8
 8005ce4:	77fb      	strb	r3, [r7, #31]
 8005ce6:	e0ac      	b.n	8005e42 <UART_SetConfig+0x216>
 8005ce8:	2310      	movs	r3, #16
 8005cea:	77fb      	strb	r3, [r7, #31]
 8005cec:	e0a9      	b.n	8005e42 <UART_SetConfig+0x216>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a96      	ldr	r2, [pc, #600]	; (8005f4c <UART_SetConfig+0x320>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d124      	bne.n	8005d42 <UART_SetConfig+0x116>
 8005cf8:	4b93      	ldr	r3, [pc, #588]	; (8005f48 <UART_SetConfig+0x31c>)
 8005cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d04:	d011      	beq.n	8005d2a <UART_SetConfig+0xfe>
 8005d06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d0a:	d817      	bhi.n	8005d3c <UART_SetConfig+0x110>
 8005d0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d10:	d011      	beq.n	8005d36 <UART_SetConfig+0x10a>
 8005d12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d16:	d811      	bhi.n	8005d3c <UART_SetConfig+0x110>
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d003      	beq.n	8005d24 <UART_SetConfig+0xf8>
 8005d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d20:	d006      	beq.n	8005d30 <UART_SetConfig+0x104>
 8005d22:	e00b      	b.n	8005d3c <UART_SetConfig+0x110>
 8005d24:	2300      	movs	r3, #0
 8005d26:	77fb      	strb	r3, [r7, #31]
 8005d28:	e08b      	b.n	8005e42 <UART_SetConfig+0x216>
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	77fb      	strb	r3, [r7, #31]
 8005d2e:	e088      	b.n	8005e42 <UART_SetConfig+0x216>
 8005d30:	2304      	movs	r3, #4
 8005d32:	77fb      	strb	r3, [r7, #31]
 8005d34:	e085      	b.n	8005e42 <UART_SetConfig+0x216>
 8005d36:	2308      	movs	r3, #8
 8005d38:	77fb      	strb	r3, [r7, #31]
 8005d3a:	e082      	b.n	8005e42 <UART_SetConfig+0x216>
 8005d3c:	2310      	movs	r3, #16
 8005d3e:	77fb      	strb	r3, [r7, #31]
 8005d40:	e07f      	b.n	8005e42 <UART_SetConfig+0x216>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a82      	ldr	r2, [pc, #520]	; (8005f50 <UART_SetConfig+0x324>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d124      	bne.n	8005d96 <UART_SetConfig+0x16a>
 8005d4c:	4b7e      	ldr	r3, [pc, #504]	; (8005f48 <UART_SetConfig+0x31c>)
 8005d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d50:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005d54:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005d58:	d011      	beq.n	8005d7e <UART_SetConfig+0x152>
 8005d5a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005d5e:	d817      	bhi.n	8005d90 <UART_SetConfig+0x164>
 8005d60:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d64:	d011      	beq.n	8005d8a <UART_SetConfig+0x15e>
 8005d66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d6a:	d811      	bhi.n	8005d90 <UART_SetConfig+0x164>
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <UART_SetConfig+0x14c>
 8005d70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d74:	d006      	beq.n	8005d84 <UART_SetConfig+0x158>
 8005d76:	e00b      	b.n	8005d90 <UART_SetConfig+0x164>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	77fb      	strb	r3, [r7, #31]
 8005d7c:	e061      	b.n	8005e42 <UART_SetConfig+0x216>
 8005d7e:	2302      	movs	r3, #2
 8005d80:	77fb      	strb	r3, [r7, #31]
 8005d82:	e05e      	b.n	8005e42 <UART_SetConfig+0x216>
 8005d84:	2304      	movs	r3, #4
 8005d86:	77fb      	strb	r3, [r7, #31]
 8005d88:	e05b      	b.n	8005e42 <UART_SetConfig+0x216>
 8005d8a:	2308      	movs	r3, #8
 8005d8c:	77fb      	strb	r3, [r7, #31]
 8005d8e:	e058      	b.n	8005e42 <UART_SetConfig+0x216>
 8005d90:	2310      	movs	r3, #16
 8005d92:	77fb      	strb	r3, [r7, #31]
 8005d94:	e055      	b.n	8005e42 <UART_SetConfig+0x216>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a6e      	ldr	r2, [pc, #440]	; (8005f54 <UART_SetConfig+0x328>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d124      	bne.n	8005dea <UART_SetConfig+0x1be>
 8005da0:	4b69      	ldr	r3, [pc, #420]	; (8005f48 <UART_SetConfig+0x31c>)
 8005da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005da8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dac:	d011      	beq.n	8005dd2 <UART_SetConfig+0x1a6>
 8005dae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005db2:	d817      	bhi.n	8005de4 <UART_SetConfig+0x1b8>
 8005db4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005db8:	d011      	beq.n	8005dde <UART_SetConfig+0x1b2>
 8005dba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dbe:	d811      	bhi.n	8005de4 <UART_SetConfig+0x1b8>
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <UART_SetConfig+0x1a0>
 8005dc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dc8:	d006      	beq.n	8005dd8 <UART_SetConfig+0x1ac>
 8005dca:	e00b      	b.n	8005de4 <UART_SetConfig+0x1b8>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	77fb      	strb	r3, [r7, #31]
 8005dd0:	e037      	b.n	8005e42 <UART_SetConfig+0x216>
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	77fb      	strb	r3, [r7, #31]
 8005dd6:	e034      	b.n	8005e42 <UART_SetConfig+0x216>
 8005dd8:	2304      	movs	r3, #4
 8005dda:	77fb      	strb	r3, [r7, #31]
 8005ddc:	e031      	b.n	8005e42 <UART_SetConfig+0x216>
 8005dde:	2308      	movs	r3, #8
 8005de0:	77fb      	strb	r3, [r7, #31]
 8005de2:	e02e      	b.n	8005e42 <UART_SetConfig+0x216>
 8005de4:	2310      	movs	r3, #16
 8005de6:	77fb      	strb	r3, [r7, #31]
 8005de8:	e02b      	b.n	8005e42 <UART_SetConfig+0x216>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a5a      	ldr	r2, [pc, #360]	; (8005f58 <UART_SetConfig+0x32c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d124      	bne.n	8005e3e <UART_SetConfig+0x212>
 8005df4:	4b54      	ldr	r3, [pc, #336]	; (8005f48 <UART_SetConfig+0x31c>)
 8005df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005dfc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e00:	d011      	beq.n	8005e26 <UART_SetConfig+0x1fa>
 8005e02:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e06:	d817      	bhi.n	8005e38 <UART_SetConfig+0x20c>
 8005e08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e0c:	d011      	beq.n	8005e32 <UART_SetConfig+0x206>
 8005e0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e12:	d811      	bhi.n	8005e38 <UART_SetConfig+0x20c>
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d003      	beq.n	8005e20 <UART_SetConfig+0x1f4>
 8005e18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e1c:	d006      	beq.n	8005e2c <UART_SetConfig+0x200>
 8005e1e:	e00b      	b.n	8005e38 <UART_SetConfig+0x20c>
 8005e20:	2300      	movs	r3, #0
 8005e22:	77fb      	strb	r3, [r7, #31]
 8005e24:	e00d      	b.n	8005e42 <UART_SetConfig+0x216>
 8005e26:	2302      	movs	r3, #2
 8005e28:	77fb      	strb	r3, [r7, #31]
 8005e2a:	e00a      	b.n	8005e42 <UART_SetConfig+0x216>
 8005e2c:	2304      	movs	r3, #4
 8005e2e:	77fb      	strb	r3, [r7, #31]
 8005e30:	e007      	b.n	8005e42 <UART_SetConfig+0x216>
 8005e32:	2308      	movs	r3, #8
 8005e34:	77fb      	strb	r3, [r7, #31]
 8005e36:	e004      	b.n	8005e42 <UART_SetConfig+0x216>
 8005e38:	2310      	movs	r3, #16
 8005e3a:	77fb      	strb	r3, [r7, #31]
 8005e3c:	e001      	b.n	8005e42 <UART_SetConfig+0x216>
 8005e3e:	2310      	movs	r3, #16
 8005e40:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e4a:	d15b      	bne.n	8005f04 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8005e4c:	7ffb      	ldrb	r3, [r7, #31]
 8005e4e:	2b08      	cmp	r3, #8
 8005e50:	d827      	bhi.n	8005ea2 <UART_SetConfig+0x276>
 8005e52:	a201      	add	r2, pc, #4	; (adr r2, 8005e58 <UART_SetConfig+0x22c>)
 8005e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e58:	08005e7d 	.word	0x08005e7d
 8005e5c:	08005e85 	.word	0x08005e85
 8005e60:	08005e8d 	.word	0x08005e8d
 8005e64:	08005ea3 	.word	0x08005ea3
 8005e68:	08005e93 	.word	0x08005e93
 8005e6c:	08005ea3 	.word	0x08005ea3
 8005e70:	08005ea3 	.word	0x08005ea3
 8005e74:	08005ea3 	.word	0x08005ea3
 8005e78:	08005e9b 	.word	0x08005e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e7c:	f7fd fd9e 	bl	80039bc <HAL_RCC_GetPCLK1Freq>
 8005e80:	61b8      	str	r0, [r7, #24]
        break;
 8005e82:	e013      	b.n	8005eac <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e84:	f7fd fdbc 	bl	8003a00 <HAL_RCC_GetPCLK2Freq>
 8005e88:	61b8      	str	r0, [r7, #24]
        break;
 8005e8a:	e00f      	b.n	8005eac <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e8c:	4b33      	ldr	r3, [pc, #204]	; (8005f5c <UART_SetConfig+0x330>)
 8005e8e:	61bb      	str	r3, [r7, #24]
        break;
 8005e90:	e00c      	b.n	8005eac <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e92:	f7fd fd1d 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 8005e96:	61b8      	str	r0, [r7, #24]
        break;
 8005e98:	e008      	b.n	8005eac <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e9e:	61bb      	str	r3, [r7, #24]
        break;
 8005ea0:	e004      	b.n	8005eac <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	77bb      	strb	r3, [r7, #30]
        break;
 8005eaa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f000 8082 	beq.w	8005fb8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	005a      	lsls	r2, r3, #1
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	085b      	lsrs	r3, r3, #1
 8005ebe:	441a      	add	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	2b0f      	cmp	r3, #15
 8005ece:	d916      	bls.n	8005efe <UART_SetConfig+0x2d2>
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ed6:	d212      	bcs.n	8005efe <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	f023 030f 	bic.w	r3, r3, #15
 8005ee0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	085b      	lsrs	r3, r3, #1
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	f003 0307 	and.w	r3, r3, #7
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	89fb      	ldrh	r3, [r7, #14]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	89fa      	ldrh	r2, [r7, #14]
 8005efa:	60da      	str	r2, [r3, #12]
 8005efc:	e05c      	b.n	8005fb8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	77bb      	strb	r3, [r7, #30]
 8005f02:	e059      	b.n	8005fb8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f04:	7ffb      	ldrb	r3, [r7, #31]
 8005f06:	2b08      	cmp	r3, #8
 8005f08:	d835      	bhi.n	8005f76 <UART_SetConfig+0x34a>
 8005f0a:	a201      	add	r2, pc, #4	; (adr r2, 8005f10 <UART_SetConfig+0x2e4>)
 8005f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f10:	08005f35 	.word	0x08005f35
 8005f14:	08005f3d 	.word	0x08005f3d
 8005f18:	08005f61 	.word	0x08005f61
 8005f1c:	08005f77 	.word	0x08005f77
 8005f20:	08005f67 	.word	0x08005f67
 8005f24:	08005f77 	.word	0x08005f77
 8005f28:	08005f77 	.word	0x08005f77
 8005f2c:	08005f77 	.word	0x08005f77
 8005f30:	08005f6f 	.word	0x08005f6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f34:	f7fd fd42 	bl	80039bc <HAL_RCC_GetPCLK1Freq>
 8005f38:	61b8      	str	r0, [r7, #24]
        break;
 8005f3a:	e021      	b.n	8005f80 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f3c:	f7fd fd60 	bl	8003a00 <HAL_RCC_GetPCLK2Freq>
 8005f40:	61b8      	str	r0, [r7, #24]
        break;
 8005f42:	e01d      	b.n	8005f80 <UART_SetConfig+0x354>
 8005f44:	40013800 	.word	0x40013800
 8005f48:	40021000 	.word	0x40021000
 8005f4c:	40004400 	.word	0x40004400
 8005f50:	40004800 	.word	0x40004800
 8005f54:	40004c00 	.word	0x40004c00
 8005f58:	40005000 	.word	0x40005000
 8005f5c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f60:	4b1b      	ldr	r3, [pc, #108]	; (8005fd0 <UART_SetConfig+0x3a4>)
 8005f62:	61bb      	str	r3, [r7, #24]
        break;
 8005f64:	e00c      	b.n	8005f80 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f66:	f7fd fcb3 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 8005f6a:	61b8      	str	r0, [r7, #24]
        break;
 8005f6c:	e008      	b.n	8005f80 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f72:	61bb      	str	r3, [r7, #24]
        break;
 8005f74:	e004      	b.n	8005f80 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	77bb      	strb	r3, [r7, #30]
        break;
 8005f7e:	bf00      	nop
    }

    if (pclk != 0U)
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d018      	beq.n	8005fb8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	085a      	lsrs	r2, r3, #1
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	441a      	add	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	2b0f      	cmp	r3, #15
 8005f9e:	d909      	bls.n	8005fb4 <UART_SetConfig+0x388>
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa6:	d205      	bcs.n	8005fb4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	60da      	str	r2, [r3, #12]
 8005fb2:	e001      	b.n	8005fb8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005fc4:	7fbb      	ldrb	r3, [r7, #30]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3720      	adds	r7, #32
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	007a1200 	.word	0x007a1200

08005fd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00a      	beq.n	8005ffe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00a      	beq.n	8006020 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00a      	beq.n	8006042 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	f003 0308 	and.w	r3, r3, #8
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00a      	beq.n	8006064 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	430a      	orrs	r2, r1
 8006062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	f003 0310 	and.w	r3, r3, #16
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00a      	beq.n	8006086 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	430a      	orrs	r2, r1
 8006084:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	f003 0320 	and.w	r3, r3, #32
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00a      	beq.n	80060a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d01a      	beq.n	80060ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060d2:	d10a      	bne.n	80060ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00a      	beq.n	800610c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	605a      	str	r2, [r3, #4]
  }
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b098      	sub	sp, #96	; 0x60
 800611c:	af02      	add	r7, sp, #8
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006128:	f7fb fcc8 	bl	8001abc <HAL_GetTick>
 800612c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0308 	and.w	r3, r3, #8
 8006138:	2b08      	cmp	r3, #8
 800613a:	d12e      	bne.n	800619a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800613c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006144:	2200      	movs	r2, #0
 8006146:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f88c 	bl	8006268 <UART_WaitOnFlagUntilTimeout>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d021      	beq.n	800619a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615e:	e853 3f00 	ldrex	r3, [r3]
 8006162:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800616a:	653b      	str	r3, [r7, #80]	; 0x50
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	461a      	mov	r2, r3
 8006172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006174:	647b      	str	r3, [r7, #68]	; 0x44
 8006176:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006178:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800617a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800617c:	e841 2300 	strex	r3, r2, [r1]
 8006180:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1e6      	bne.n	8006156 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2220      	movs	r2, #32
 800618c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e062      	b.n	8006260 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d149      	bne.n	800623c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061b0:	2200      	movs	r2, #0
 80061b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f856 	bl	8006268 <UART_WaitOnFlagUntilTimeout>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d03c      	beq.n	800623c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	e853 3f00 	ldrex	r3, [r3]
 80061ce:	623b      	str	r3, [r7, #32]
   return(result);
 80061d0:	6a3b      	ldr	r3, [r7, #32]
 80061d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	461a      	mov	r2, r3
 80061de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061e0:	633b      	str	r3, [r7, #48]	; 0x30
 80061e2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061e8:	e841 2300 	strex	r3, r2, [r1]
 80061ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1e6      	bne.n	80061c2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3308      	adds	r3, #8
 80061fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	e853 3f00 	ldrex	r3, [r3]
 8006202:	60fb      	str	r3, [r7, #12]
   return(result);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f023 0301 	bic.w	r3, r3, #1
 800620a:	64bb      	str	r3, [r7, #72]	; 0x48
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	3308      	adds	r3, #8
 8006212:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006214:	61fa      	str	r2, [r7, #28]
 8006216:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006218:	69b9      	ldr	r1, [r7, #24]
 800621a:	69fa      	ldr	r2, [r7, #28]
 800621c:	e841 2300 	strex	r3, r2, [r1]
 8006220:	617b      	str	r3, [r7, #20]
   return(result);
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1e5      	bne.n	80061f4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2220      	movs	r2, #32
 800622c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e011      	b.n	8006260 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2220      	movs	r2, #32
 8006240:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2220      	movs	r2, #32
 8006246:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3758      	adds	r7, #88	; 0x58
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	603b      	str	r3, [r7, #0]
 8006274:	4613      	mov	r3, r2
 8006276:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006278:	e049      	b.n	800630e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006280:	d045      	beq.n	800630e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006282:	f7fb fc1b 	bl	8001abc <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	69ba      	ldr	r2, [r7, #24]
 800628e:	429a      	cmp	r2, r3
 8006290:	d302      	bcc.n	8006298 <UART_WaitOnFlagUntilTimeout+0x30>
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e048      	b.n	800632e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0304 	and.w	r3, r3, #4
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d031      	beq.n	800630e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69db      	ldr	r3, [r3, #28]
 80062b0:	f003 0308 	and.w	r3, r3, #8
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d110      	bne.n	80062da <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2208      	movs	r2, #8
 80062be:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 f8ed 	bl	80064a0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2208      	movs	r2, #8
 80062ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e029      	b.n	800632e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	69db      	ldr	r3, [r3, #28]
 80062e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062e8:	d111      	bne.n	800630e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 f8d3 	bl	80064a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2220      	movs	r2, #32
 80062fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e00f      	b.n	800632e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69da      	ldr	r2, [r3, #28]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	4013      	ands	r3, r2
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	429a      	cmp	r2, r3
 800631c:	bf0c      	ite	eq
 800631e:	2301      	moveq	r3, #1
 8006320:	2300      	movne	r3, #0
 8006322:	b2db      	uxtb	r3, r3
 8006324:	461a      	mov	r2, r3
 8006326:	79fb      	ldrb	r3, [r7, #7]
 8006328:	429a      	cmp	r2, r3
 800632a:	d0a6      	beq.n	800627a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006338:	b480      	push	{r7}
 800633a:	b097      	sub	sp, #92	; 0x5c
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	4613      	mov	r3, r2
 8006344:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	88fa      	ldrh	r2, [r7, #6]
 8006350:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	88fa      	ldrh	r2, [r7, #6]
 8006358:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636a:	d10e      	bne.n	800638a <UART_Start_Receive_IT+0x52>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d105      	bne.n	8006380 <UART_Start_Receive_IT+0x48>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f240 12ff 	movw	r2, #511	; 0x1ff
 800637a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800637e:	e01a      	b.n	80063b6 <UART_Start_Receive_IT+0x7e>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	22ff      	movs	r2, #255	; 0xff
 8006384:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006388:	e015      	b.n	80063b6 <UART_Start_Receive_IT+0x7e>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10d      	bne.n	80063ae <UART_Start_Receive_IT+0x76>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d104      	bne.n	80063a4 <UART_Start_Receive_IT+0x6c>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	22ff      	movs	r2, #255	; 0xff
 800639e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063a2:	e008      	b.n	80063b6 <UART_Start_Receive_IT+0x7e>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	227f      	movs	r2, #127	; 0x7f
 80063a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063ac:	e003      	b.n	80063b6 <UART_Start_Receive_IT+0x7e>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2222      	movs	r2, #34	; 0x22
 80063c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3308      	adds	r3, #8
 80063cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d0:	e853 3f00 	ldrex	r3, [r3]
 80063d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d8:	f043 0301 	orr.w	r3, r3, #1
 80063dc:	657b      	str	r3, [r7, #84]	; 0x54
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3308      	adds	r3, #8
 80063e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80063e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80063e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063ee:	e841 2300 	strex	r3, r2, [r1]
 80063f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1e5      	bne.n	80063c6 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006402:	d107      	bne.n	8006414 <UART_Start_Receive_IT+0xdc>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d103      	bne.n	8006414 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4a22      	ldr	r2, [pc, #136]	; (8006498 <UART_Start_Receive_IT+0x160>)
 8006410:	669a      	str	r2, [r3, #104]	; 0x68
 8006412:	e002      	b.n	800641a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4a21      	ldr	r2, [pc, #132]	; (800649c <UART_Start_Receive_IT+0x164>)
 8006418:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d019      	beq.n	8006456 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	e853 3f00 	ldrex	r3, [r3]
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	461a      	mov	r2, r3
 800643e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006440:	637b      	str	r3, [r7, #52]	; 0x34
 8006442:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006444:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006448:	e841 2300 	strex	r3, r2, [r1]
 800644c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1e6      	bne.n	8006422 <UART_Start_Receive_IT+0xea>
 8006454:	e018      	b.n	8006488 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	e853 3f00 	ldrex	r3, [r3]
 8006462:	613b      	str	r3, [r7, #16]
   return(result);
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	f043 0320 	orr.w	r3, r3, #32
 800646a:	653b      	str	r3, [r7, #80]	; 0x50
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	461a      	mov	r2, r3
 8006472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006474:	623b      	str	r3, [r7, #32]
 8006476:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006478:	69f9      	ldr	r1, [r7, #28]
 800647a:	6a3a      	ldr	r2, [r7, #32]
 800647c:	e841 2300 	strex	r3, r2, [r1]
 8006480:	61bb      	str	r3, [r7, #24]
   return(result);
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1e6      	bne.n	8006456 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	375c      	adds	r7, #92	; 0x5c
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	08006909 	.word	0x08006909
 800649c:	08006761 	.word	0x08006761

080064a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b095      	sub	sp, #84	; 0x54
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b0:	e853 3f00 	ldrex	r3, [r3]
 80064b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	461a      	mov	r2, r3
 80064c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c6:	643b      	str	r3, [r7, #64]	; 0x40
 80064c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064ce:	e841 2300 	strex	r3, r2, [r1]
 80064d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1e6      	bne.n	80064a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	3308      	adds	r3, #8
 80064e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	e853 3f00 	ldrex	r3, [r3]
 80064e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	f023 0301 	bic.w	r3, r3, #1
 80064f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3308      	adds	r3, #8
 80064f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006502:	e841 2300 	strex	r3, r2, [r1]
 8006506:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1e5      	bne.n	80064da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006512:	2b01      	cmp	r3, #1
 8006514:	d118      	bne.n	8006548 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	e853 3f00 	ldrex	r3, [r3]
 8006522:	60bb      	str	r3, [r7, #8]
   return(result);
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f023 0310 	bic.w	r3, r3, #16
 800652a:	647b      	str	r3, [r7, #68]	; 0x44
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	461a      	mov	r2, r3
 8006532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006534:	61bb      	str	r3, [r7, #24]
 8006536:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006538:	6979      	ldr	r1, [r7, #20]
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	e841 2300 	strex	r3, r2, [r1]
 8006540:	613b      	str	r3, [r7, #16]
   return(result);
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1e6      	bne.n	8006516 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2220      	movs	r2, #32
 800654c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800655c:	bf00      	nop
 800655e:	3754      	adds	r7, #84	; 0x54
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006574:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f7ff fb3a 	bl	8005c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800658c:	bf00      	nop
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006594:	b480      	push	{r7}
 8006596:	b08f      	sub	sp, #60	; 0x3c
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065a0:	2b21      	cmp	r3, #33	; 0x21
 80065a2:	d14d      	bne.n	8006640 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d132      	bne.n	8006616 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	e853 3f00 	ldrex	r3, [r3]
 80065bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065c4:	637b      	str	r3, [r7, #52]	; 0x34
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	461a      	mov	r2, r3
 80065cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065d0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065d6:	e841 2300 	strex	r3, r2, [r1]
 80065da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1e6      	bne.n	80065b0 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	e853 3f00 	ldrex	r3, [r3]
 80065ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065f6:	633b      	str	r3, [r7, #48]	; 0x30
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	461a      	mov	r2, r3
 80065fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006600:	61bb      	str	r3, [r7, #24]
 8006602:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006604:	6979      	ldr	r1, [r7, #20]
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	e841 2300 	strex	r3, r2, [r1]
 800660c:	613b      	str	r3, [r7, #16]
   return(result);
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1e6      	bne.n	80065e2 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006614:	e014      	b.n	8006640 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800661a:	781a      	ldrb	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	b292      	uxth	r2, r2
 8006622:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006628:	1c5a      	adds	r2, r3, #1
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006634:	b29b      	uxth	r3, r3
 8006636:	3b01      	subs	r3, #1
 8006638:	b29a      	uxth	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006640:	bf00      	nop
 8006642:	373c      	adds	r7, #60	; 0x3c
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800664c:	b480      	push	{r7}
 800664e:	b091      	sub	sp, #68	; 0x44
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006658:	2b21      	cmp	r3, #33	; 0x21
 800665a:	d151      	bne.n	8006700 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006662:	b29b      	uxth	r3, r3
 8006664:	2b00      	cmp	r3, #0
 8006666:	d132      	bne.n	80066ce <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006670:	e853 3f00 	ldrex	r3, [r3]
 8006674:	623b      	str	r3, [r7, #32]
   return(result);
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800667c:	63bb      	str	r3, [r7, #56]	; 0x38
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	461a      	mov	r2, r3
 8006684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006686:	633b      	str	r3, [r7, #48]	; 0x30
 8006688:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800668c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800668e:	e841 2300 	strex	r3, r2, [r1]
 8006692:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e6      	bne.n	8006668 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	e853 3f00 	ldrex	r3, [r3]
 80066a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066ae:	637b      	str	r3, [r7, #52]	; 0x34
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	461a      	mov	r2, r3
 80066b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b8:	61fb      	str	r3, [r7, #28]
 80066ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066bc:	69b9      	ldr	r1, [r7, #24]
 80066be:	69fa      	ldr	r2, [r7, #28]
 80066c0:	e841 2300 	strex	r3, r2, [r1]
 80066c4:	617b      	str	r3, [r7, #20]
   return(result);
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1e6      	bne.n	800669a <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80066cc:	e018      	b.n	8006700 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80066d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d6:	881a      	ldrh	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066e0:	b292      	uxth	r2, r2
 80066e2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e8:	1c9a      	adds	r2, r3, #2
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006700:	bf00      	nop
 8006702:	3744      	adds	r7, #68	; 0x44
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b088      	sub	sp, #32
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	60bb      	str	r3, [r7, #8]
   return(result);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006728:	61fb      	str	r3, [r7, #28]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	461a      	mov	r2, r3
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	61bb      	str	r3, [r7, #24]
 8006734:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006736:	6979      	ldr	r1, [r7, #20]
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	e841 2300 	strex	r3, r2, [r1]
 800673e:	613b      	str	r3, [r7, #16]
   return(result);
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1e6      	bne.n	8006714 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2220      	movs	r2, #32
 800674a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff fa4a 	bl	8005bec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006758:	bf00      	nop
 800675a:	3720      	adds	r7, #32
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b09c      	sub	sp, #112	; 0x70
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800676e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006778:	2b22      	cmp	r3, #34	; 0x22
 800677a:	f040 80b9 	bne.w	80068f0 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006784:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006788:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800678c:	b2d9      	uxtb	r1, r3
 800678e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006792:	b2da      	uxtb	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006798:	400a      	ands	r2, r1
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a2:	1c5a      	adds	r2, r3, #1
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	3b01      	subs	r3, #1
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f040 809c 	bne.w	8006900 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d0:	e853 3f00 	ldrex	r3, [r3]
 80067d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80067e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067ee:	e841 2300 	strex	r3, r2, [r1]
 80067f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1e6      	bne.n	80067c8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3308      	adds	r3, #8
 8006800:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006804:	e853 3f00 	ldrex	r3, [r3]
 8006808:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800680a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680c:	f023 0301 	bic.w	r3, r3, #1
 8006810:	667b      	str	r3, [r7, #100]	; 0x64
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3308      	adds	r3, #8
 8006818:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800681a:	647a      	str	r2, [r7, #68]	; 0x44
 800681c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006820:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006822:	e841 2300 	strex	r3, r2, [r1]
 8006826:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1e5      	bne.n	80067fa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2220      	movs	r2, #32
 8006832:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d018      	beq.n	8006882 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006858:	e853 3f00 	ldrex	r3, [r3]
 800685c:	623b      	str	r3, [r7, #32]
   return(result);
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006864:	663b      	str	r3, [r7, #96]	; 0x60
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	461a      	mov	r2, r3
 800686c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800686e:	633b      	str	r3, [r7, #48]	; 0x30
 8006870:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800687c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1e6      	bne.n	8006850 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006886:	2b01      	cmp	r3, #1
 8006888:	d12e      	bne.n	80068e8 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	e853 3f00 	ldrex	r3, [r3]
 800689c:	60fb      	str	r3, [r7, #12]
   return(result);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f023 0310 	bic.w	r3, r3, #16
 80068a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	461a      	mov	r2, r3
 80068ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068ae:	61fb      	str	r3, [r7, #28]
 80068b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b2:	69b9      	ldr	r1, [r7, #24]
 80068b4:	69fa      	ldr	r2, [r7, #28]
 80068b6:	e841 2300 	strex	r3, r2, [r1]
 80068ba:	617b      	str	r3, [r7, #20]
   return(result);
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1e6      	bne.n	8006890 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	f003 0310 	and.w	r3, r3, #16
 80068cc:	2b10      	cmp	r3, #16
 80068ce:	d103      	bne.n	80068d8 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2210      	movs	r2, #16
 80068d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f7ff f997 	bl	8005c14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80068e6:	e00b      	b.n	8006900 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f7f9 fe03 	bl	80004f4 <HAL_UART_RxCpltCallback>
}
 80068ee:	e007      	b.n	8006900 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	699a      	ldr	r2, [r3, #24]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0208 	orr.w	r2, r2, #8
 80068fe:	619a      	str	r2, [r3, #24]
}
 8006900:	bf00      	nop
 8006902:	3770      	adds	r7, #112	; 0x70
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b09c      	sub	sp, #112	; 0x70
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006916:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006920:	2b22      	cmp	r3, #34	; 0x22
 8006922:	f040 80b9 	bne.w	8006a98 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800692c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006934:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006936:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800693a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800693e:	4013      	ands	r3, r2
 8006940:	b29a      	uxth	r2, r3
 8006942:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006944:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694a:	1c9a      	adds	r2, r3, #2
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006956:	b29b      	uxth	r3, r3
 8006958:	3b01      	subs	r3, #1
 800695a:	b29a      	uxth	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	f040 809c 	bne.w	8006aa8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006978:	e853 3f00 	ldrex	r3, [r3]
 800697c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800697e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006980:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006984:	667b      	str	r3, [r7, #100]	; 0x64
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	461a      	mov	r2, r3
 800698c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800698e:	657b      	str	r3, [r7, #84]	; 0x54
 8006990:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006992:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006994:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006996:	e841 2300 	strex	r3, r2, [r1]
 800699a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800699c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1e6      	bne.n	8006970 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	3308      	adds	r3, #8
 80069a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ac:	e853 3f00 	ldrex	r3, [r3]
 80069b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b4:	f023 0301 	bic.w	r3, r3, #1
 80069b8:	663b      	str	r3, [r7, #96]	; 0x60
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3308      	adds	r3, #8
 80069c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069c2:	643a      	str	r2, [r7, #64]	; 0x40
 80069c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069ca:	e841 2300 	strex	r3, r2, [r1]
 80069ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1e5      	bne.n	80069a2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2220      	movs	r2, #32
 80069da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d018      	beq.n	8006a2a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	461a      	mov	r2, r3
 8006a14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a18:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a1e:	e841 2300 	strex	r3, r2, [r1]
 8006a22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1e6      	bne.n	80069f8 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d12e      	bne.n	8006a90 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	e853 3f00 	ldrex	r3, [r3]
 8006a44:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f023 0310 	bic.w	r3, r3, #16
 8006a4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	461a      	mov	r2, r3
 8006a54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a56:	61bb      	str	r3, [r7, #24]
 8006a58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5a:	6979      	ldr	r1, [r7, #20]
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	e841 2300 	strex	r3, r2, [r1]
 8006a62:	613b      	str	r3, [r7, #16]
   return(result);
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1e6      	bne.n	8006a38 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	69db      	ldr	r3, [r3, #28]
 8006a70:	f003 0310 	and.w	r3, r3, #16
 8006a74:	2b10      	cmp	r3, #16
 8006a76:	d103      	bne.n	8006a80 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2210      	movs	r2, #16
 8006a7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a86:	4619      	mov	r1, r3
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7ff f8c3 	bl	8005c14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a8e:	e00b      	b.n	8006aa8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7f9 fd2f 	bl	80004f4 <HAL_UART_RxCpltCallback>
}
 8006a96:	e007      	b.n	8006aa8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	699a      	ldr	r2, [r3, #24]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f042 0208 	orr.w	r2, r2, #8
 8006aa6:	619a      	str	r2, [r3, #24]
}
 8006aa8:	bf00      	nop
 8006aaa:	3770      	adds	r7, #112	; 0x70
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006acc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006ad0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	43db      	mvns	r3, r3
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3714      	adds	r7, #20
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006afa:	b084      	sub	sp, #16
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	f107 0014 	add.w	r0, r7, #20
 8006b08:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	b004      	add	sp, #16
 8006b3a:	4770      	bx	lr

08006b3c <__libc_init_array>:
 8006b3c:	b570      	push	{r4, r5, r6, lr}
 8006b3e:	4d0d      	ldr	r5, [pc, #52]	; (8006b74 <__libc_init_array+0x38>)
 8006b40:	4c0d      	ldr	r4, [pc, #52]	; (8006b78 <__libc_init_array+0x3c>)
 8006b42:	1b64      	subs	r4, r4, r5
 8006b44:	10a4      	asrs	r4, r4, #2
 8006b46:	2600      	movs	r6, #0
 8006b48:	42a6      	cmp	r6, r4
 8006b4a:	d109      	bne.n	8006b60 <__libc_init_array+0x24>
 8006b4c:	4d0b      	ldr	r5, [pc, #44]	; (8006b7c <__libc_init_array+0x40>)
 8006b4e:	4c0c      	ldr	r4, [pc, #48]	; (8006b80 <__libc_init_array+0x44>)
 8006b50:	f000 f820 	bl	8006b94 <_init>
 8006b54:	1b64      	subs	r4, r4, r5
 8006b56:	10a4      	asrs	r4, r4, #2
 8006b58:	2600      	movs	r6, #0
 8006b5a:	42a6      	cmp	r6, r4
 8006b5c:	d105      	bne.n	8006b6a <__libc_init_array+0x2e>
 8006b5e:	bd70      	pop	{r4, r5, r6, pc}
 8006b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b64:	4798      	blx	r3
 8006b66:	3601      	adds	r6, #1
 8006b68:	e7ee      	b.n	8006b48 <__libc_init_array+0xc>
 8006b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b6e:	4798      	blx	r3
 8006b70:	3601      	adds	r6, #1
 8006b72:	e7f2      	b.n	8006b5a <__libc_init_array+0x1e>
 8006b74:	08006cd4 	.word	0x08006cd4
 8006b78:	08006cd4 	.word	0x08006cd4
 8006b7c:	08006cd4 	.word	0x08006cd4
 8006b80:	08006cd8 	.word	0x08006cd8

08006b84 <memset>:
 8006b84:	4402      	add	r2, r0
 8006b86:	4603      	mov	r3, r0
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d100      	bne.n	8006b8e <memset+0xa>
 8006b8c:	4770      	bx	lr
 8006b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b92:	e7f9      	b.n	8006b88 <memset+0x4>

08006b94 <_init>:
 8006b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b96:	bf00      	nop
 8006b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b9a:	bc08      	pop	{r3}
 8006b9c:	469e      	mov	lr, r3
 8006b9e:	4770      	bx	lr

08006ba0 <_fini>:
 8006ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba2:	bf00      	nop
 8006ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ba6:	bc08      	pop	{r3}
 8006ba8:	469e      	mov	lr, r3
 8006baa:	4770      	bx	lr
