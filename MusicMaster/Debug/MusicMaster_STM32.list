
MusicMaster_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009424  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003488  080095b4  080095b4  000195b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca3c  0800ca3c  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ca3c  0800ca3c  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ca3c  0800ca3c  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca3c  0800ca3c  0001ca3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca40  0800ca40  0001ca40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  0800ca44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c8  2**0
                  CONTENTS
 10 .bss          00000660  200000c8  200000c8  000200c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000728  20000728  000200c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d261  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003664  00000000  00000000  0003d359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001810  00000000  00000000  000409c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016f0  00000000  00000000  000421d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021872  00000000  00000000  000438c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e12b  00000000  00000000  00065132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c88db  00000000  00000000  0008325d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014bb38  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007190  00000000  00000000  0014bb88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c8 	.word	0x200000c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800959c 	.word	0x0800959c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	0800959c 	.word	0x0800959c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <hashString>:
	struct DictionaryNode **buckets;
	int size;
};

// Hash function for string keys
unsigned int hashString(const char *key, int size) {
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	unsigned int hash = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	60fb      	str	r3, [r7, #12]
	while (*key) {
 80002ae:	e007      	b.n	80002c0 <hashString+0x20>
		hash = (hash << 5) + *key++;
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	015a      	lsls	r2, r3, #5
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	1c59      	adds	r1, r3, #1
 80002b8:	6079      	str	r1, [r7, #4]
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	4413      	add	r3, r2
 80002be:	60fb      	str	r3, [r7, #12]
	while (*key) {
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d1f3      	bne.n	80002b0 <hashString+0x10>
	}
	return hash % size;
 80002c8:	683a      	ldr	r2, [r7, #0]
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80002d0:	fb01 f202 	mul.w	r2, r1, r2
 80002d4:	1a9b      	subs	r3, r3, r2
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr

080002e2 <initDictionary>:

// Initialize dictionary
Dictionary* initDictionary(int size) {
 80002e2:	b580      	push	{r7, lr}
 80002e4:	b084      	sub	sp, #16
 80002e6:	af00      	add	r7, sp, #0
 80002e8:	6078      	str	r0, [r7, #4]
	Dictionary *dict = malloc(sizeof(Dictionary));
 80002ea:	2008      	movs	r0, #8
 80002ec:	f008 f8bc 	bl	8008468 <malloc>
 80002f0:	4603      	mov	r3, r0
 80002f2:	60bb      	str	r3, [r7, #8]
	dict->buckets = malloc(size * sizeof(struct DictionaryNode*));
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	009b      	lsls	r3, r3, #2
 80002f8:	4618      	mov	r0, r3
 80002fa:	f008 f8b5 	bl	8008468 <malloc>
 80002fe:	4603      	mov	r3, r0
 8000300:	461a      	mov	r2, r3
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	601a      	str	r2, [r3, #0]
	dict->size = size;
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < size; i++) {
 800030c:	2300      	movs	r3, #0
 800030e:	60fb      	str	r3, [r7, #12]
 8000310:	e009      	b.n	8000326 <initDictionary+0x44>
		dict->buckets[i] = NULL;
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	681a      	ldr	r2, [r3, #0]
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	4413      	add	r3, r2
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < size; i++) {
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	3301      	adds	r3, #1
 8000324:	60fb      	str	r3, [r7, #12]
 8000326:	68fa      	ldr	r2, [r7, #12]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	429a      	cmp	r2, r3
 800032c:	dbf1      	blt.n	8000312 <initDictionary+0x30>
	}
	return dict;
 800032e:	68bb      	ldr	r3, [r7, #8]
}
 8000330:	4618      	mov	r0, r3
 8000332:	3710      	adds	r7, #16
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}

08000338 <insert>:

// Insert key-value pair into dictionary
void insert(Dictionary *dict, const char *stringKey, struct Tone *tones,
		int numTones) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
 8000344:	603b      	str	r3, [r7, #0]
	unsigned int index;
	struct DictionaryNode *newNode = malloc(sizeof(struct DictionaryNode));
 8000346:	2014      	movs	r0, #20
 8000348:	f008 f88e 	bl	8008468 <malloc>
 800034c:	4603      	mov	r3, r0
 800034e:	613b      	str	r3, [r7, #16]
	newNode->stringKey = strdup(stringKey);
 8000350:	68b8      	ldr	r0, [r7, #8]
 8000352:	f008 fa03 	bl	800875c <strdup>
 8000356:	4603      	mov	r3, r0
 8000358:	461a      	mov	r2, r3
 800035a:	693b      	ldr	r3, [r7, #16]
 800035c:	601a      	str	r2, [r3, #0]
	newNode->tones = malloc(numTones * sizeof(struct Tone));
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	00db      	lsls	r3, r3, #3
 8000362:	4618      	mov	r0, r3
 8000364:	f008 f880 	bl	8008468 <malloc>
 8000368:	4603      	mov	r3, r0
 800036a:	461a      	mov	r2, r3
 800036c:	693b      	ldr	r3, [r7, #16]
 800036e:	605a      	str	r2, [r3, #4]
	memcpy(newNode->tones, tones, numTones * sizeof(struct Tone));
 8000370:	693b      	ldr	r3, [r7, #16]
 8000372:	6858      	ldr	r0, [r3, #4]
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	00db      	lsls	r3, r3, #3
 8000378:	461a      	mov	r2, r3
 800037a:	6879      	ldr	r1, [r7, #4]
 800037c:	f008 f87c 	bl	8008478 <memcpy>
	newNode->numTones = numTones;
 8000380:	693b      	ldr	r3, [r7, #16]
 8000382:	683a      	ldr	r2, [r7, #0]
 8000384:	609a      	str	r2, [r3, #8]
	newNode->black_listed = 0;
 8000386:	693b      	ldr	r3, [r7, #16]
 8000388:	2200      	movs	r2, #0
 800038a:	60da      	str	r2, [r3, #12]

	if (stringKey != NULL) {
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d006      	beq.n	80003a0 <insert+0x68>
		index = hashString(stringKey, dict->size);
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	4619      	mov	r1, r3
 8000398:	68b8      	ldr	r0, [r7, #8]
 800039a:	f7ff ff81 	bl	80002a0 <hashString>
 800039e:	6178      	str	r0, [r7, #20]
	}

	newNode->next = dict->buckets[index];
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	4413      	add	r3, r2
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	611a      	str	r2, [r3, #16]
	dict->buckets[index] = newNode;
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	4413      	add	r3, r2
 80003ba:	693a      	ldr	r2, [r7, #16]
 80003bc:	601a      	str	r2, [r3, #0]
}
 80003be:	bf00      	nop
 80003c0:	3718      	adds	r7, #24
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}

080003c6 <lookup>:

// Lookup value by key
struct Tone* lookup(Dictionary *dict, const char *stringKey, int *numTones,
		struct DictionaryNode **node) {
 80003c6:	b580      	push	{r7, lr}
 80003c8:	b086      	sub	sp, #24
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	60f8      	str	r0, [r7, #12]
 80003ce:	60b9      	str	r1, [r7, #8]
 80003d0:	607a      	str	r2, [r7, #4]
 80003d2:	603b      	str	r3, [r7, #0]
	unsigned int index;
	struct DictionaryNode *current;

	if (stringKey != NULL) {
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d02b      	beq.n	8000432 <lookup+0x6c>
		index = hashString(stringKey, dict->size);
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	4619      	mov	r1, r3
 80003e0:	68b8      	ldr	r0, [r7, #8]
 80003e2:	f7ff ff5d 	bl	80002a0 <hashString>
 80003e6:	6138      	str	r0, [r7, #16]
		current = dict->buckets[index];
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	693b      	ldr	r3, [r7, #16]
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	4413      	add	r3, r2
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	617b      	str	r3, [r7, #20]
		while (current) {
 80003f6:	e019      	b.n	800042c <lookup+0x66>
			if (current->stringKey
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d012      	beq.n	8000426 <lookup+0x60>
					&& strcmp(current->stringKey, stringKey) == 0) {
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	68b9      	ldr	r1, [r7, #8]
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff fee2 	bl	80001d0 <strcmp>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d109      	bne.n	8000426 <lookup+0x60>
				*numTones = current->numTones;
 8000412:	697b      	ldr	r3, [r7, #20]
 8000414:	689a      	ldr	r2, [r3, #8]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	601a      	str	r2, [r3, #0]
				*node = current;
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	697a      	ldr	r2, [r7, #20]
 800041e:	601a      	str	r2, [r3, #0]
				return current->tones;
 8000420:	697b      	ldr	r3, [r7, #20]
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	e009      	b.n	800043a <lookup+0x74>
			}
			current = current->next;
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	691b      	ldr	r3, [r3, #16]
 800042a:	617b      	str	r3, [r7, #20]
		while (current) {
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d1e2      	bne.n	80003f8 <lookup+0x32>
		}
	}

	*numTones = 0;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
	return NULL;
 8000438:	2300      	movs	r3, #0
}
 800043a:	4618      	mov	r0, r3
 800043c:	3718      	adds	r7, #24
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}

08000442 <getDictSize>:

int getDictSize(Dictionary *dict) {
 8000442:	b480      	push	{r7}
 8000444:	b083      	sub	sp, #12
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
	return dict->size;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	685b      	ldr	r3, [r3, #4]
}
 800044e:	4618      	mov	r0, r3
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr

0800045a <setBlacklisted>:

// Function to set black_listed flag on
void setBlacklisted(struct DictionaryNode *node) {
 800045a:	b480      	push	{r7}
 800045c:	b083      	sub	sp, #12
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
    node->black_listed = 1;
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	2201      	movs	r2, #1
 8000466:	60da      	str	r2, [r3, #12]
}
 8000468:	bf00      	nop
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr

08000474 <unsetBlacklisted>:

// Function to set black_listed flag off
void unsetBlacklisted(struct DictionaryNode *node) {
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
    node->black_listed = 0;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	2200      	movs	r2, #0
 8000480:	60da      	str	r2, [r3, #12]
}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr

0800048e <isBlacklisted>:

// Function to check if a node is blacklisted
int isBlacklisted(struct DictionaryNode *node) {
 800048e:	b480      	push	{r7}
 8000490:	b083      	sub	sp, #12
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
    return node->black_listed;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	68db      	ldr	r3, [r3, #12]
}
 800049a:	4618      	mov	r0, r3
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
	...

080004a8 <initializePlaylistOrder>:
#define REST      0

struct Dictionary *playlist = NULL;
char **playlistOrder;

void initializePlaylistOrder() {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
    playlistOrder = (char **)malloc(10 * sizeof(char *));
 80004ac:	2028      	movs	r0, #40	; 0x28
 80004ae:	f007 ffdb 	bl	8008468 <malloc>
 80004b2:	4603      	mov	r3, r0
 80004b4:	461a      	mov	r2, r3
 80004b6:	4b02      	ldr	r3, [pc, #8]	; (80004c0 <initializePlaylistOrder+0x18>)
 80004b8:	601a      	str	r2, [r3, #0]
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	200000e8 	.word	0x200000e8

080004c4 <initTonesDictionary>:

void initTonesDictionary() {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	f5ad 5d48 	sub.w	sp, sp, #12800	; 0x3200
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
    playlist = initDictionary(5);
 80004ce:	2005      	movs	r0, #5
 80004d0:	f7ff ff07 	bl	80002e2 <initDictionary>
 80004d4:	4603      	mov	r3, r0
 80004d6:	4a4d      	ldr	r2, [pc, #308]	; (800060c <initTonesDictionary+0x148>)
 80004d8:	6013      	str	r3, [r2, #0]
    initializePlaylistOrder();
 80004da:	f7ff ffe5 	bl	80004a8 <initializePlaylistOrder>
    playlistOrder[0] = "hedwig_theme";
 80004de:	4b4c      	ldr	r3, [pc, #304]	; (8000610 <initTonesDictionary+0x14c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a4c      	ldr	r2, [pc, #304]	; (8000614 <initTonesDictionary+0x150>)
 80004e4:	601a      	str	r2, [r3, #0]
    playlistOrder[1] = "doom";
 80004e6:	4b4a      	ldr	r3, [pc, #296]	; (8000610 <initTonesDictionary+0x14c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	3304      	adds	r3, #4
 80004ec:	4a4a      	ldr	r2, [pc, #296]	; (8000618 <initTonesDictionary+0x154>)
 80004ee:	601a      	str	r2, [r3, #0]
    playlistOrder[2] = "fur_elise";
 80004f0:	4b47      	ldr	r3, [pc, #284]	; (8000610 <initTonesDictionary+0x14c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	3308      	adds	r3, #8
 80004f6:	4a49      	ldr	r2, [pc, #292]	; (800061c <initTonesDictionary+0x158>)
 80004f8:	601a      	str	r2, [r3, #0]
    playlistOrder[3] = "tetris";
 80004fa:	4b45      	ldr	r3, [pc, #276]	; (8000610 <initTonesDictionary+0x14c>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	330c      	adds	r3, #12
 8000500:	4a47      	ldr	r2, [pc, #284]	; (8000620 <initTonesDictionary+0x15c>)
 8000502:	601a      	str	r2, [r3, #0]
    playlistOrder[4] = "tokyo_drift";
 8000504:	4b42      	ldr	r3, [pc, #264]	; (8000610 <initTonesDictionary+0x14c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	3310      	adds	r3, #16
 800050a:	4a46      	ldr	r2, [pc, #280]	; (8000624 <initTonesDictionary+0x160>)
 800050c:	601a      	str	r2, [r3, #0]

    // Example tones
    struct Tone hedwig_theme[]={{REST,750},{NOTE_D4,374},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_G4,750},{NOTE_D5,374},{NOTE_C5,1124},{NOTE_A4,1124},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_F4,750},{NOTE_GS4,374},{NOTE_D4,2249},{NOTE_D4,374},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_G4,750},{NOTE_D5,374},{NOTE_F5,750},{NOTE_E5,374},{NOTE_DS5,750},{NOTE_B4,374},{NOTE_DS5,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_B4,374},{NOTE_G4,2249},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_DS5,750},{NOTE_D5,374},{NOTE_CS5,750},{NOTE_A4,374},{NOTE_AS4,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_D4,374},{NOTE_D5,1700},{REST,150},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_F5,750},{NOTE_E5,374},{NOTE_DS5,750},{NOTE_B4,374},{NOTE_DS5,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_AS4,374},{NOTE_G4,2249},{0,0}};
 800050e:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8000512:	f103 0310 	add.w	r3, r3, #16
 8000516:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800051a:	4a43      	ldr	r2, [pc, #268]	; (8000628 <initTonesDictionary+0x164>)
 800051c:	4618      	mov	r0, r3
 800051e:	4611      	mov	r1, r2
 8000520:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000524:	461a      	mov	r2, r3
 8000526:	f007 ffa7 	bl	8008478 <memcpy>
    struct Tone doom[]={{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_FS3,67},{NOTE_D3,67},{NOTE_B2,67},{NOTE_A3,67},{NOTE_FS3,67},{NOTE_B2,67},{NOTE_D3,67},{NOTE_FS3,67},{NOTE_A3,67},{NOTE_FS3,67},{NOTE_D3,67},{NOTE_B2,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B3,67},{NOTE_G3,67},{NOTE_E3,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_B3,67},{NOTE_G4,67},{NOTE_B4,67},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_E3,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,534},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_E3,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_C4,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_CS4,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_B3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_A3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_G3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_GS3,133},{NOTE_A3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_B3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_A3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_G3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_F3,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B3,67},{NOTE_G3,67},{NOTE_E3,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_B3,67},{NOTE_G4,67},{NOTE_B4,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{0,0}};
 800052a:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 800052e:	f103 0310 	add.w	r3, r3, #16
 8000532:	f6a3 7308 	subw	r3, r3, #3848	; 0xf08
 8000536:	4a3d      	ldr	r2, [pc, #244]	; (800062c <initTonesDictionary+0x168>)
 8000538:	4618      	mov	r0, r3
 800053a:	4611      	mov	r1, r2
 800053c:	f44f 6351 	mov.w	r3, #3344	; 0xd10
 8000540:	461a      	mov	r2, r3
 8000542:	f007 ff99 	bl	8008478 <memcpy>
    struct Tone fur_elise[] = {{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,750},{REST,250},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_C5,188},{NOTE_C5,188},{NOTE_C5,188},{NOTE_C5,750},{NOTE_F5,282},{NOTE_E5,94},{NOTE_E5,250},{NOTE_D5,250},{NOTE_AS5,282},{NOTE_A5,94},{NOTE_A5,188},{NOTE_G5,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_AS4,250},{NOTE_A4,250},{NOTE_A4,94},{NOTE_G4,94},{NOTE_A4,94},{NOTE_B4,94},{NOTE_C5,750},{NOTE_D5,188},{NOTE_DS5,188},{NOTE_E5,375},{NOTE_E5,188},{NOTE_F5,188},{NOTE_A4,188},{NOTE_C5,750},{NOTE_D5,282},{NOTE_B4,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_G4,94},{NOTE_G5,94},{NOTE_A4,94},{NOTE_G5,94},{NOTE_B4,94},{NOTE_G5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_E5,94},{NOTE_G5,94},{NOTE_C6,94},{NOTE_B5,94},{NOTE_A5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_D5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_G4,94},{NOTE_G5,94},{NOTE_A4,94},{NOTE_G5,94},{NOTE_B4,94},{NOTE_G5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_E5,94},{NOTE_G5,94},{NOTE_C6,94},{NOTE_B5,94},{NOTE_A5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_D5,94},{NOTE_E5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,94},{NOTE_B4,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,94},{NOTE_B4,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,375},{NOTE_B4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,375},{NOTE_B4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{REST,188},{REST,250},{NOTE_CS5,1125},{NOTE_D5,750},{NOTE_E5,188},{NOTE_F5,188},{NOTE_F5,750},{NOTE_F5,250},{NOTE_E5,1125},{NOTE_D5,750},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,750},{NOTE_A4,250},{NOTE_A4,250},{NOTE_C5,250},{NOTE_B4,250},{NOTE_A4,1125},{NOTE_CS5,1125},{NOTE_D5,750},{NOTE_E5,188},{NOTE_F5,188},{NOTE_F5,750},{NOTE_F5,250},{NOTE_F5,1125},{NOTE_DS5,750},{NOTE_D5,188},{NOTE_C5,188},{NOTE_AS4,750},{NOTE_A4,250},{NOTE_GS4,750},{NOTE_G4,250},{NOTE_A4,1125},{NOTE_B4,750},{REST,250},{NOTE_A3,141},{NOTE_C4,141},{NOTE_E4,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_D5,141},{NOTE_C5,141},{NOTE_B4,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_A5,141},{NOTE_C6,141},{NOTE_E6,141},{NOTE_D6,141},{NOTE_C6,141},{NOTE_B5,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_A5,141},{NOTE_C6,141},{NOTE_E6,141},{NOTE_D6,141},{NOTE_C6,141},{NOTE_B5,141},{NOTE_AS5,141},{NOTE_A5,141},{NOTE_GS5,141},{NOTE_G5,141},{NOTE_FS5,141},{NOTE_F5,141},{NOTE_E5,141},{NOTE_DS5,141},{NOTE_D5,141},{NOTE_CS5,141},{NOTE_C5,141},{NOTE_B4,141},{NOTE_AS4,141},{NOTE_A4,141},{NOTE_GS4,141},{NOTE_G4,141},{NOTE_FS4,141},{NOTE_F4,141},{NOTE_E4,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,375},{REST,375},{REST,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,750},{REST,250},{REST,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_E5,250},{NOTE_E5,250},{NOTE_E6,375},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,1125},{0,0}};
 8000546:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800054a:	f103 0310 	add.w	r3, r3, #16
 800054e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8000552:	4a37      	ldr	r2, [pc, #220]	; (8000630 <initTonesDictionary+0x16c>)
 8000554:	4618      	mov	r0, r3
 8000556:	4611      	mov	r1, r2
 8000558:	f44f 5397 	mov.w	r3, #4832	; 0x12e0
 800055c:	461a      	mov	r2, r3
 800055e:	f007 ff8b 	bl	8008478 <memcpy>
    struct Tone tetris[] = {{NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 834}, {NOTE_A4, 834}, {NOTE_GS4, 834}, {NOTE_B4, 417}, {REST, 208}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 417}, {NOTE_E5, 417}, {NOTE_A5, 834}, {NOTE_GS5, 834},{NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 834}, {NOTE_A4, 834}, {NOTE_GS4, 834}, {NOTE_B4, 417}, {REST, 208}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 417}, {NOTE_E5, 417}, {NOTE_A5, 834}, {NOTE_GS5, 834},{NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 834}, {NOTE_A4, 834}, {NOTE_GS4, 834}, {NOTE_B4, 417}, {REST, 208}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 417}, {NOTE_E5, 417}, {NOTE_A5, 834}, {NOTE_GS5, 834},{0,0}};
 8000562:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8000566:	f103 0310 	add.w	r3, r3, #16
 800056a:	f6a3 3338 	subw	r3, r3, #2872	; 0xb38
 800056e:	4a31      	ldr	r2, [pc, #196]	; (8000634 <initTonesDictionary+0x170>)
 8000570:	4618      	mov	r0, r3
 8000572:	4611      	mov	r1, r2
 8000574:	f44f 6315 	mov.w	r3, #2384	; 0x950
 8000578:	461a      	mov	r2, r3
 800057a:	f007 ff7d 	bl	8008478 <memcpy>
    struct Tone tokyo_drift[]={{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,500},{NOTE_B4,500},{NOTE_DS5,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{REST,0},{REST,0},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,500},{NOTE_B4,500},{NOTE_DS5,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{REST,0},{REST,0},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,500},{NOTE_B4,500},{NOTE_DS5,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{REST,0},{REST,0}};
 800057e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000582:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8000586:	4a2c      	ldr	r2, [pc, #176]	; (8000638 <initTonesDictionary+0x174>)
 8000588:	4618      	mov	r0, r3
 800058a:	4611      	mov	r1, r2
 800058c:	f44f 63db 	mov.w	r3, #1752	; 0x6d8
 8000590:	461a      	mov	r2, r3
 8000592:	f007 ff71 	bl	8008478 <memcpy>
    // Insert tones into dictionary
    insert(playlist, "hedwig_theme", hedwig_theme, sizeof(hedwig_theme) / sizeof(struct Tone));
 8000596:	4b1d      	ldr	r3, [pc, #116]	; (800060c <initTonesDictionary+0x148>)
 8000598:	6818      	ldr	r0, [r3, #0]
 800059a:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 800059e:	f102 0218 	add.w	r2, r2, #24
 80005a2:	233f      	movs	r3, #63	; 0x3f
 80005a4:	491b      	ldr	r1, [pc, #108]	; (8000614 <initTonesDictionary+0x150>)
 80005a6:	f7ff fec7 	bl	8000338 <insert>
    insert(playlist, "doom", doom, sizeof(doom) / sizeof(struct Tone));
 80005aa:	4b18      	ldr	r3, [pc, #96]	; (800060c <initTonesDictionary+0x148>)
 80005ac:	6818      	ldr	r0, [r3, #0]
 80005ae:	f507 520c 	add.w	r2, r7, #8960	; 0x2300
 80005b2:	f102 0208 	add.w	r2, r2, #8
 80005b6:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
 80005ba:	4917      	ldr	r1, [pc, #92]	; (8000618 <initTonesDictionary+0x154>)
 80005bc:	f7ff febc 	bl	8000338 <insert>
    insert(playlist, "fur_elise", fur_elise, sizeof(fur_elise) / sizeof(struct Tone));
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <initTonesDictionary+0x148>)
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80005c8:	f102 0210 	add.w	r2, r2, #16
 80005cc:	3a28      	subs	r2, #40	; 0x28
 80005ce:	f44f 7317 	mov.w	r3, #604	; 0x25c
 80005d2:	4912      	ldr	r1, [pc, #72]	; (800061c <initTonesDictionary+0x158>)
 80005d4:	f7ff feb0 	bl	8000338 <insert>
    insert(playlist, "tetris", tetris, sizeof(tetris) / sizeof(struct Tone));
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <initTonesDictionary+0x148>)
 80005da:	6818      	ldr	r0, [r3, #0]
 80005dc:	f507 62e2 	add.w	r2, r7, #1808	; 0x710
 80005e0:	3a38      	subs	r2, #56	; 0x38
 80005e2:	f44f 7395 	mov.w	r3, #298	; 0x12a
 80005e6:	490e      	ldr	r1, [pc, #56]	; (8000620 <initTonesDictionary+0x15c>)
 80005e8:	f7ff fea6 	bl	8000338 <insert>
    insert(playlist, "tokyo_drift", tokyo_drift, sizeof(tokyo_drift) / sizeof(struct Tone));
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <initTonesDictionary+0x148>)
 80005ee:	6818      	ldr	r0, [r3, #0]
 80005f0:	f107 0210 	add.w	r2, r7, #16
 80005f4:	3a10      	subs	r2, #16
 80005f6:	23db      	movs	r3, #219	; 0xdb
 80005f8:	490a      	ldr	r1, [pc, #40]	; (8000624 <initTonesDictionary+0x160>)
 80005fa:	f7ff fe9d 	bl	8000338 <insert>
}
 80005fe:	bf00      	nop
 8000600:	f507 5748 	add.w	r7, r7, #12800	; 0x3200
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200000e4 	.word	0x200000e4
 8000610:	200000e8 	.word	0x200000e8
 8000614:	080095b4 	.word	0x080095b4
 8000618:	080095c4 	.word	0x080095c4
 800061c:	080095cc 	.word	0x080095cc
 8000620:	080095d8 	.word	0x080095d8
 8000624:	080095e0 	.word	0x080095e0
 8000628:	080095ec 	.word	0x080095ec
 800062c:	080097e4 	.word	0x080097e4
 8000630:	0800a4f4 	.word	0x0800a4f4
 8000634:	0800b7d4 	.word	0x0800b7d4
 8000638:	0800c124 	.word	0x0800c124

0800063c <extractNumber>:
////}
//PWM END

//UART BEGIN

void extractNumber(const uint8_t *data) {
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
//		HAL_UART_Transmit_IT(&huart1, pass, 19);
//		buzzerEnterTime = HAL_GetTick();
//		if (alertStatus)
//			PWM_Start();
//	}
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <compareStrings>:

int compareStrings(const char *str1, const uint8_t *str2, int n) {
 8000650:	b480      	push	{r7}
 8000652:	b087      	sub	sp, #28
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < n; i++) {
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	e00e      	b.n	8000680 <compareStrings+0x30>
		if (str1[i] != str2[i]) {
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	4413      	add	r3, r2
 8000668:	781a      	ldrb	r2, [r3, #0]
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	68b9      	ldr	r1, [r7, #8]
 800066e:	440b      	add	r3, r1
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	429a      	cmp	r2, r3
 8000674:	d001      	beq.n	800067a <compareStrings+0x2a>
			return 0;
 8000676:	2300      	movs	r3, #0
 8000678:	e007      	b.n	800068a <compareStrings+0x3a>
	for (int i = 0; i < n; i++) {
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	3301      	adds	r3, #1
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	697a      	ldr	r2, [r7, #20]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	429a      	cmp	r2, r3
 8000686:	dbec      	blt.n	8000662 <compareStrings+0x12>
		}
	}
	return 1;
 8000688:	2301      	movs	r3, #1
}
 800068a:	4618      	mov	r0, r3
 800068c:	371c      	adds	r7, #28
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
	...

08000698 <HAL_UART_RxCpltCallback>:

uint8_t data[100];
uint8_t d;
uint8_t i;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000698:	b5b0      	push	{r4, r5, r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a6f      	ldr	r2, [pc, #444]	; (8000864 <HAL_UART_RxCpltCallback+0x1cc>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	f040 80d7 	bne.w	800085a <HAL_UART_RxCpltCallback+0x1c2>
		HAL_UART_Receive_IT(&huart1, &d, 1);
 80006ac:	2201      	movs	r2, #1
 80006ae:	496e      	ldr	r1, [pc, #440]	; (8000868 <HAL_UART_RxCpltCallback+0x1d0>)
 80006b0:	486e      	ldr	r0, [pc, #440]	; (800086c <HAL_UART_RxCpltCallback+0x1d4>)
 80006b2:	f006 fbdd 	bl	8006e70 <HAL_UART_Receive_IT>
		data[i++] = d;
 80006b6:	4b6e      	ldr	r3, [pc, #440]	; (8000870 <HAL_UART_RxCpltCallback+0x1d8>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	1c5a      	adds	r2, r3, #1
 80006bc:	b2d1      	uxtb	r1, r2
 80006be:	4a6c      	ldr	r2, [pc, #432]	; (8000870 <HAL_UART_RxCpltCallback+0x1d8>)
 80006c0:	7011      	strb	r1, [r2, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b68      	ldr	r3, [pc, #416]	; (8000868 <HAL_UART_RxCpltCallback+0x1d0>)
 80006c6:	7819      	ldrb	r1, [r3, #0]
 80006c8:	4b6a      	ldr	r3, [pc, #424]	; (8000874 <HAL_UART_RxCpltCallback+0x1dc>)
 80006ca:	5499      	strb	r1, [r3, r2]
		if (d == '\n') {
 80006cc:	4b66      	ldr	r3, [pc, #408]	; (8000868 <HAL_UART_RxCpltCallback+0x1d0>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b0a      	cmp	r3, #10
 80006d2:	f040 80c2 	bne.w	800085a <HAL_UART_RxCpltCallback+0x1c2>
			if ((i == 15 && compareStrings(setPass, data, 9) == 1)
 80006d6:	4b66      	ldr	r3, [pc, #408]	; (8000870 <HAL_UART_RxCpltCallback+0x1d8>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b0f      	cmp	r3, #15
 80006dc:	d11a      	bne.n	8000714 <HAL_UART_RxCpltCallback+0x7c>
 80006de:	2209      	movs	r2, #9
 80006e0:	4964      	ldr	r1, [pc, #400]	; (8000874 <HAL_UART_RxCpltCallback+0x1dc>)
 80006e2:	4865      	ldr	r0, [pc, #404]	; (8000878 <HAL_UART_RxCpltCallback+0x1e0>)
 80006e4:	f7ff ffb4 	bl	8000650 <compareStrings>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d112      	bne.n	8000714 <HAL_UART_RxCpltCallback+0x7c>
					&& isCorrect == -1) {
 80006ee:	4b63      	ldr	r3, [pc, #396]	; (800087c <HAL_UART_RxCpltCallback+0x1e4>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f6:	d10d      	bne.n	8000714 <HAL_UART_RxCpltCallback+0x7c>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2101      	movs	r1, #1
 80006fc:	4860      	ldr	r0, [pc, #384]	; (8000880 <HAL_UART_RxCpltCallback+0x1e8>)
 80006fe:	f003 fa07 	bl	8003b10 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2104      	movs	r1, #4
 8000706:	485e      	ldr	r0, [pc, #376]	; (8000880 <HAL_UART_RxCpltCallback+0x1e8>)
 8000708:	f003 fa02 	bl	8003b10 <HAL_GPIO_WritePin>
				extractNumber(data);
 800070c:	4859      	ldr	r0, [pc, #356]	; (8000874 <HAL_UART_RxCpltCallback+0x1dc>)
 800070e:	f7ff ff95 	bl	800063c <extractNumber>
 8000712:	e09f      	b.n	8000854 <HAL_UART_RxCpltCallback+0x1bc>
			} else if (i == 7) {
 8000714:	4b56      	ldr	r3, [pc, #344]	; (8000870 <HAL_UART_RxCpltCallback+0x1d8>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b07      	cmp	r3, #7
 800071a:	d111      	bne.n	8000740 <HAL_UART_RxCpltCallback+0xa8>
				if (compareStrings(logON, data, 6) == 1) {
 800071c:	2206      	movs	r2, #6
 800071e:	4955      	ldr	r1, [pc, #340]	; (8000874 <HAL_UART_RxCpltCallback+0x1dc>)
 8000720:	4858      	ldr	r0, [pc, #352]	; (8000884 <HAL_UART_RxCpltCallback+0x1ec>)
 8000722:	f7ff ff95 	bl	8000650 <compareStrings>
 8000726:	4603      	mov	r3, r0
 8000728:	2b01      	cmp	r3, #1
 800072a:	f040 8093 	bne.w	8000854 <HAL_UART_RxCpltCallback+0x1bc>
					logStatus = 1;
 800072e:	4b56      	ldr	r3, [pc, #344]	; (8000888 <HAL_UART_RxCpltCallback+0x1f0>)
 8000730:	2201      	movs	r2, #1
 8000732:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Log Turned ON\n",
 8000734:	2216      	movs	r2, #22
 8000736:	4955      	ldr	r1, [pc, #340]	; (800088c <HAL_UART_RxCpltCallback+0x1f4>)
 8000738:	484c      	ldr	r0, [pc, #304]	; (800086c <HAL_UART_RxCpltCallback+0x1d4>)
 800073a:	f006 fb3b 	bl	8006db4 <HAL_UART_Transmit_IT>
 800073e:	e089      	b.n	8000854 <HAL_UART_RxCpltCallback+0x1bc>
							22);
				}
			} else if (i == 8) {
 8000740:	4b4b      	ldr	r3, [pc, #300]	; (8000870 <HAL_UART_RxCpltCallback+0x1d8>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b08      	cmp	r3, #8
 8000746:	d110      	bne.n	800076a <HAL_UART_RxCpltCallback+0xd2>
				if (compareStrings(logOFF, data, 7) == 1) {
 8000748:	2207      	movs	r2, #7
 800074a:	494a      	ldr	r1, [pc, #296]	; (8000874 <HAL_UART_RxCpltCallback+0x1dc>)
 800074c:	4850      	ldr	r0, [pc, #320]	; (8000890 <HAL_UART_RxCpltCallback+0x1f8>)
 800074e:	f7ff ff7f 	bl	8000650 <compareStrings>
 8000752:	4603      	mov	r3, r0
 8000754:	2b01      	cmp	r3, #1
 8000756:	d17d      	bne.n	8000854 <HAL_UART_RxCpltCallback+0x1bc>
					logStatus = 0;
 8000758:	4b4b      	ldr	r3, [pc, #300]	; (8000888 <HAL_UART_RxCpltCallback+0x1f0>)
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Log Turned OFF\n",
 800075e:	2217      	movs	r2, #23
 8000760:	494c      	ldr	r1, [pc, #304]	; (8000894 <HAL_UART_RxCpltCallback+0x1fc>)
 8000762:	4842      	ldr	r0, [pc, #264]	; (800086c <HAL_UART_RxCpltCallback+0x1d4>)
 8000764:	f006 fb26 	bl	8006db4 <HAL_UART_Transmit_IT>
 8000768:	e074      	b.n	8000854 <HAL_UART_RxCpltCallback+0x1bc>
							23);
				}
			} else if (i == 9) {
 800076a:	4b41      	ldr	r3, [pc, #260]	; (8000870 <HAL_UART_RxCpltCallback+0x1d8>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b09      	cmp	r3, #9
 8000770:	d117      	bne.n	80007a2 <HAL_UART_RxCpltCallback+0x10a>
				if (compareStrings(alertON, data, 8) == 1) {
 8000772:	2208      	movs	r2, #8
 8000774:	493f      	ldr	r1, [pc, #252]	; (8000874 <HAL_UART_RxCpltCallback+0x1dc>)
 8000776:	4848      	ldr	r0, [pc, #288]	; (8000898 <HAL_UART_RxCpltCallback+0x200>)
 8000778:	f7ff ff6a 	bl	8000650 <compareStrings>
 800077c:	4603      	mov	r3, r0
 800077e:	2b01      	cmp	r3, #1
 8000780:	d168      	bne.n	8000854 <HAL_UART_RxCpltCallback+0x1bc>
					alertStatus = 1;
 8000782:	4b46      	ldr	r3, [pc, #280]	; (800089c <HAL_UART_RxCpltCallback+0x204>)
 8000784:	2201      	movs	r2, #1
 8000786:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Alerts Turned ON\n",
 8000788:	2219      	movs	r2, #25
 800078a:	4945      	ldr	r1, [pc, #276]	; (80008a0 <HAL_UART_RxCpltCallback+0x208>)
 800078c:	4837      	ldr	r0, [pc, #220]	; (800086c <HAL_UART_RxCpltCallback+0x1d4>)
 800078e:	f006 fb11 	bl	8006db4 <HAL_UART_Transmit_IT>
							25);
					buzzerEnterTime = HAL_GetTick();
 8000792:	f001 fbb7 	bl	8001f04 <HAL_GetTick>
 8000796:	4603      	mov	r3, r0
 8000798:	4a42      	ldr	r2, [pc, #264]	; (80008a4 <HAL_UART_RxCpltCallback+0x20c>)
 800079a:	6013      	str	r3, [r2, #0]
					PWM_Start();
 800079c:	f001 f8a6 	bl	80018ec <PWM_Start>
 80007a0:	e058      	b.n	8000854 <HAL_UART_RxCpltCallback+0x1bc>
				}
			} else if (i == 10) {
 80007a2:	4b33      	ldr	r3, [pc, #204]	; (8000870 <HAL_UART_RxCpltCallback+0x1d8>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b0a      	cmp	r3, #10
 80007a8:	d110      	bne.n	80007cc <HAL_UART_RxCpltCallback+0x134>
				if (compareStrings(alertOFF, data, 9) == 1) {
 80007aa:	2209      	movs	r2, #9
 80007ac:	4931      	ldr	r1, [pc, #196]	; (8000874 <HAL_UART_RxCpltCallback+0x1dc>)
 80007ae:	483e      	ldr	r0, [pc, #248]	; (80008a8 <HAL_UART_RxCpltCallback+0x210>)
 80007b0:	f7ff ff4e 	bl	8000650 <compareStrings>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d14c      	bne.n	8000854 <HAL_UART_RxCpltCallback+0x1bc>
					alertStatus = 0;
 80007ba:	4b38      	ldr	r3, [pc, #224]	; (800089c <HAL_UART_RxCpltCallback+0x204>)
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Alerts Turned OFF\n",
 80007c0:	221a      	movs	r2, #26
 80007c2:	493a      	ldr	r1, [pc, #232]	; (80008ac <HAL_UART_RxCpltCallback+0x214>)
 80007c4:	4829      	ldr	r0, [pc, #164]	; (800086c <HAL_UART_RxCpltCallback+0x1d4>)
 80007c6:	f006 faf5 	bl	8006db4 <HAL_UART_Transmit_IT>
 80007ca:	e043      	b.n	8000854 <HAL_UART_RxCpltCallback+0x1bc>
							26);
				}
			} else if (i == 14 && (data[11] - '0') < 6
 80007cc:	4b28      	ldr	r3, [pc, #160]	; (8000870 <HAL_UART_RxCpltCallback+0x1d8>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b0e      	cmp	r3, #14
 80007d2:	d12d      	bne.n	8000830 <HAL_UART_RxCpltCallback+0x198>
 80007d4:	4b27      	ldr	r3, [pc, #156]	; (8000874 <HAL_UART_RxCpltCallback+0x1dc>)
 80007d6:	7adb      	ldrb	r3, [r3, #11]
 80007d8:	2b35      	cmp	r3, #53	; 0x35
 80007da:	d829      	bhi.n	8000830 <HAL_UART_RxCpltCallback+0x198>
					&& (data[11] - '0') > -1) {
 80007dc:	4b25      	ldr	r3, [pc, #148]	; (8000874 <HAL_UART_RxCpltCallback+0x1dc>)
 80007de:	7adb      	ldrb	r3, [r3, #11]
 80007e0:	2b2f      	cmp	r3, #47	; 0x2f
 80007e2:	d925      	bls.n	8000830 <HAL_UART_RxCpltCallback+0x198>
				if (compareStrings(setVolume, data, 11) == 1
 80007e4:	220b      	movs	r2, #11
 80007e6:	4923      	ldr	r1, [pc, #140]	; (8000874 <HAL_UART_RxCpltCallback+0x1dc>)
 80007e8:	4831      	ldr	r0, [pc, #196]	; (80008b0 <HAL_UART_RxCpltCallback+0x218>)
 80007ea:	f7ff ff31 	bl	8000650 <compareStrings>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d12e      	bne.n	8000852 <HAL_UART_RxCpltCallback+0x1ba>
						&& data[12] == ')') {
 80007f4:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <HAL_UART_RxCpltCallback+0x1dc>)
 80007f6:	7b1b      	ldrb	r3, [r3, #12]
 80007f8:	2b29      	cmp	r3, #41	; 0x29
 80007fa:	d12a      	bne.n	8000852 <HAL_UART_RxCpltCallback+0x1ba>
					int v = data[11] - '0';
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <HAL_UART_RxCpltCallback+0x1dc>)
 80007fe:	7adb      	ldrb	r3, [r3, #11]
 8000800:	3b30      	subs	r3, #48	; 0x30
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
//					_volume = v * 10;
					char massage[24] = "Program Volume Set To  \n";
 8000804:	4b2b      	ldr	r3, [pc, #172]	; (80008b4 <HAL_UART_RxCpltCallback+0x21c>)
 8000806:	f107 040c 	add.w	r4, r7, #12
 800080a:	461d      	mov	r5, r3
 800080c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800080e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000810:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000814:	e884 0003 	stmia.w	r4, {r0, r1}
					massage[22] = data[11];
 8000818:	4b16      	ldr	r3, [pc, #88]	; (8000874 <HAL_UART_RxCpltCallback+0x1dc>)
 800081a:	7adb      	ldrb	r3, [r3, #11]
 800081c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					HAL_UART_Transmit_IT(&huart1, massage, 24);
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2218      	movs	r2, #24
 8000826:	4619      	mov	r1, r3
 8000828:	4810      	ldr	r0, [pc, #64]	; (800086c <HAL_UART_RxCpltCallback+0x1d4>)
 800082a:	f006 fac3 	bl	8006db4 <HAL_UART_Transmit_IT>
				if (compareStrings(setVolume, data, 11) == 1
 800082e:	e010      	b.n	8000852 <HAL_UART_RxCpltCallback+0x1ba>
				}
			} else {
				HAL_UART_Transmit_IT(&huart1, "INVALID INPUT\n", 14);
 8000830:	220e      	movs	r2, #14
 8000832:	4921      	ldr	r1, [pc, #132]	; (80008b8 <HAL_UART_RxCpltCallback+0x220>)
 8000834:	480d      	ldr	r0, [pc, #52]	; (800086c <HAL_UART_RxCpltCallback+0x1d4>)
 8000836:	f006 fabd 	bl	8006db4 <HAL_UART_Transmit_IT>
				buzzerEnterTime = HAL_GetTick();
 800083a:	f001 fb63 	bl	8001f04 <HAL_GetTick>
 800083e:	4603      	mov	r3, r0
 8000840:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <HAL_UART_RxCpltCallback+0x20c>)
 8000842:	6013      	str	r3, [r2, #0]
				if (alertStatus)
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <HAL_UART_RxCpltCallback+0x204>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d003      	beq.n	8000854 <HAL_UART_RxCpltCallback+0x1bc>
					PWM_Start();
 800084c:	f001 f84e 	bl	80018ec <PWM_Start>
 8000850:	e000      	b.n	8000854 <HAL_UART_RxCpltCallback+0x1bc>
				if (compareStrings(setVolume, data, 11) == 1
 8000852:	bf00      	nop
			}

			i = 0;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_UART_RxCpltCallback+0x1d8>)
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]
		}

	}
}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	; 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bdb0      	pop	{r4, r5, r7, pc}
 8000862:	bf00      	nop
 8000864:	40013800 	.word	0x40013800
 8000868:	200006f8 	.word	0x200006f8
 800086c:	2000028c 	.word	0x2000028c
 8000870:	200006f9 	.word	0x200006f9
 8000874:	20000694 	.word	0x20000694
 8000878:	20000014 	.word	0x20000014
 800087c:	20000008 	.word	0x20000008
 8000880:	48000800 	.word	0x48000800
 8000884:	20000020 	.word	0x20000020
 8000888:	20000000 	.word	0x20000000
 800088c:	0800c7fc 	.word	0x0800c7fc
 8000890:	20000028 	.word	0x20000028
 8000894:	0800c814 	.word	0x0800c814
 8000898:	20000030 	.word	0x20000030
 800089c:	20000004 	.word	0x20000004
 80008a0:	0800c82c 	.word	0x0800c82c
 80008a4:	2000063c 	.word	0x2000063c
 80008a8:	20000038 	.word	0x20000038
 80008ac:	0800c848 	.word	0x0800c848
 80008b0:	20000044 	.word	0x20000044
 80008b4:	0800c874 	.word	0x0800c874
 80008b8:	0800c864 	.word	0x0800c864

080008bc <HAL_ADC_ConvCpltCallback>:
		adc_value = (adc_value * 100) / max_adc_value;
		return adc_value;
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008cc:	d103      	bne.n	80008d6 <HAL_ADC_ConvCpltCallback+0x1a>
		uint32_t value;
		value = HAL_ADC_GetValue(hadc);
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f001 fe58 	bl	8002584 <HAL_ADC_GetValue>
 80008d4:	60f8      	str	r0, [r7, #12]
	}
}
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <display_number>:
//ADC End

void display_number(int led_flag, int _number) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOD,
 80008ea:	2201      	movs	r2, #1
 80008ec:	211e      	movs	r1, #30
 80008ee:	4813      	ldr	r0, [pc, #76]	; (800093c <display_number+0x5c>)
 80008f0:	f003 f90e 	bl	8003b10 <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOD, led[led_flag], DISPLAY_ON);
 80008f4:	4a12      	ldr	r2, [pc, #72]	; (8000940 <display_number+0x60>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008fc:	2200      	movs	r2, #0
 80008fe:	4619      	mov	r1, r3
 8000900:	480e      	ldr	r0, [pc, #56]	; (800093c <display_number+0x5c>)
 8000902:	f003 f905 	bl	8003b10 <HAL_GPIO_WritePin>
	if (_number != 0) {
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d009      	beq.n	8000920 <display_number+0x40>
		HAL_GPIO_WritePin(GPIOD, digits[_number].pattern, GPIO_PIN_SET);
 800090c:	4a0d      	ldr	r2, [pc, #52]	; (8000944 <display_number+0x64>)
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	00db      	lsls	r3, r3, #3
 8000912:	4413      	add	r3, r2
 8000914:	889b      	ldrh	r3, [r3, #4]
 8000916:	2201      	movs	r2, #1
 8000918:	4619      	mov	r1, r3
 800091a:	4808      	ldr	r0, [pc, #32]	; (800093c <display_number+0x5c>)
 800091c:	f003 f8f8 	bl	8003b10 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(GPIOD, digits[_number].anti_pattern, GPIO_PIN_RESET);
 8000920:	4a08      	ldr	r2, [pc, #32]	; (8000944 <display_number+0x64>)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	4413      	add	r3, r2
 8000928:	88db      	ldrh	r3, [r3, #6]
 800092a:	2200      	movs	r2, #0
 800092c:	4619      	mov	r1, r3
 800092e:	4803      	ldr	r0, [pc, #12]	; (800093c <display_number+0x5c>)
 8000930:	f003 f8ee 	bl	8003b10 <HAL_GPIO_WritePin>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	48000c00 	.word	0x48000c00
 8000940:	20000608 	.word	0x20000608
 8000944:	20000644 	.word	0x20000644

08000948 <increase>:

void increase(int _head) {
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	carrier[_head] += 1;
 8000950:	4a0c      	ldr	r2, [pc, #48]	; (8000984 <increase+0x3c>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	490a      	ldr	r1, [pc, #40]	; (8000984 <increase+0x3c>)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (carrier[_head] == 10) {
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <increase+0x3c>)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096a:	2b0a      	cmp	r3, #10
 800096c:	d104      	bne.n	8000978 <increase+0x30>
		carrier[_head] = 0;
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <increase+0x3c>)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2100      	movs	r1, #0
 8000974:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	20000610 	.word	0x20000610

08000988 <init_display>:

void init_display() {
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,
 800098c:	2201      	movs	r2, #1
 800098e:	211e      	movs	r1, #30
 8000990:	4802      	ldr	r0, [pc, #8]	; (800099c <init_display+0x14>)
 8000992:	f003 f8bd 	bl	8003b10 <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	48000c00 	.word	0x48000c00

080009a0 <generate_random_int>:

int generate_random_int() {
 80009a0:	b598      	push	{r3, r4, r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	random_number = rand() % getDictSize(playlist);
 80009a4:	f007 fe8c 	bl	80086c0 <rand>
 80009a8:	4604      	mov	r4, r0
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <generate_random_int+0x2c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fd47 	bl	8000442 <getDictSize>
 80009b4:	4603      	mov	r3, r0
 80009b6:	fb94 f2f3 	sdiv	r2, r4, r3
 80009ba:	fb02 f303 	mul.w	r3, r2, r3
 80009be:	1ae3      	subs	r3, r4, r3
 80009c0:	4a03      	ldr	r2, [pc, #12]	; (80009d0 <generate_random_int+0x30>)
 80009c2:	6013      	str	r3, [r2, #0]
}
 80009c4:	bf00      	nop
 80009c6:	4618      	mov	r0, r3
 80009c8:	bd98      	pop	{r3, r4, r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200000e4 	.word	0x200000e4
 80009d0:	20000620 	.word	0x20000620

080009d4 <next_shuffle>:

int next_shuffle() {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
	struct DictionaryNode *node;
	int toneCount = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
	srand(HAL_GetTick());
 80009de:	f001 fa91 	bl	8001f04 <HAL_GetTick>
 80009e2:	4603      	mov	r3, r0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f007 fe3d 	bl	8008664 <srand>
	int i = generate_random_int();
 80009ea:	f7ff ffd9 	bl	80009a0 <generate_random_int>
 80009ee:	60f8      	str	r0, [r7, #12]
	melody = lookup(playlist, playlistOrder[i], &toneCount, &node);
 80009f0:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <next_shuffle+0x90>)
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <next_shuffle+0x94>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	4413      	add	r3, r2
 80009fe:	6819      	ldr	r1, [r3, #0]
 8000a00:	f107 0308 	add.w	r3, r7, #8
 8000a04:	1d3a      	adds	r2, r7, #4
 8000a06:	f7ff fcde 	bl	80003c6 <lookup>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4a17      	ldr	r2, [pc, #92]	; (8000a6c <next_shuffle+0x98>)
 8000a0e:	6013      	str	r3, [r2, #0]

	while (isBlacklisted(node)) {
 8000a10:	e012      	b.n	8000a38 <next_shuffle+0x64>
		i = generate_random_int();
 8000a12:	f7ff ffc5 	bl	80009a0 <generate_random_int>
 8000a16:	60f8      	str	r0, [r7, #12]
		melody = lookup(playlist, playlistOrder[i], &toneCount, &node);
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <next_shuffle+0x90>)
 8000a1a:	6818      	ldr	r0, [r3, #0]
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <next_shuffle+0x94>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	4413      	add	r3, r2
 8000a26:	6819      	ldr	r1, [r3, #0]
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	1d3a      	adds	r2, r7, #4
 8000a2e:	f7ff fcca 	bl	80003c6 <lookup>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4a0d      	ldr	r2, [pc, #52]	; (8000a6c <next_shuffle+0x98>)
 8000a36:	6013      	str	r3, [r2, #0]
	while (isBlacklisted(node)) {
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fd27 	bl	800048e <isBlacklisted>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1e5      	bne.n	8000a12 <next_shuffle+0x3e>
	}
	setBlacklisted(node);
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fd06 	bl	800045a <setBlacklisted>
	playedCount++;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <next_shuffle+0x9c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	3301      	adds	r3, #1
 8000a54:	4a06      	ldr	r2, [pc, #24]	; (8000a70 <next_shuffle+0x9c>)
 8000a56:	6013      	str	r3, [r2, #0]
	return toneCount;
 8000a58:	687b      	ldr	r3, [r7, #4]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000e4 	.word	0x200000e4
 8000a68:	200000e8 	.word	0x200000e8
 8000a6c:	20000604 	.word	0x20000604
 8000a70:	20000600 	.word	0x20000600

08000a74 <next_music>:

int next_music() {
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
	int toneCount;
	struct DictionaryNode *node;
	if (programState == Resume) {
 8000a7a:	4b32      	ldr	r3, [pc, #200]	; (8000b44 <next_music+0xd0>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d15a      	bne.n	8000b38 <next_music+0xc4>
		if (playedCount >= getDictSize(playlist)) {
 8000a82:	4b31      	ldr	r3, [pc, #196]	; (8000b48 <next_music+0xd4>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fcdb 	bl	8000442 <getDictSize>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	4b2f      	ldr	r3, [pc, #188]	; (8000b4c <next_music+0xd8>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	dc25      	bgt.n	8000ae2 <next_music+0x6e>
			for (int i = 0; i < getDictSize(playlist); i++) {
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	e016      	b.n	8000aca <next_music+0x56>
				melody = lookup(playlist, playlistOrder[i], &toneCount, &node);
 8000a9c:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <next_music+0xd4>)
 8000a9e:	6818      	ldr	r0, [r3, #0]
 8000aa0:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <next_music+0xdc>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	4413      	add	r3, r2
 8000aaa:	6819      	ldr	r1, [r3, #0]
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	f107 0208 	add.w	r2, r7, #8
 8000ab2:	f7ff fc88 	bl	80003c6 <lookup>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	4a26      	ldr	r2, [pc, #152]	; (8000b54 <next_music+0xe0>)
 8000aba:	6013      	str	r3, [r2, #0]
				unsetBlacklisted(node);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fcd8 	bl	8000474 <unsetBlacklisted>
			for (int i = 0; i < getDictSize(playlist); i++) {
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <next_music+0xd4>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fcb7 	bl	8000442 <getDictSize>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	dbdf      	blt.n	8000a9c <next_music+0x28>
			}
			playedCount = 0;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <next_music+0xd8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
		}

		if (programMode == Liner) {
 8000ae2:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <next_music+0xe4>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d11b      	bne.n	8000b22 <next_music+0xae>
			melody = lookup(playlist, playlistOrder[playedCount++], &toneCount,
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <next_music+0xd4>)
 8000aec:	6818      	ldr	r0, [r3, #0]
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <next_music+0xdc>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <next_music+0xd8>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	1c59      	adds	r1, r3, #1
 8000af8:	4c14      	ldr	r4, [pc, #80]	; (8000b4c <next_music+0xd8>)
 8000afa:	6021      	str	r1, [r4, #0]
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	4413      	add	r3, r2
 8000b00:	6819      	ldr	r1, [r3, #0]
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	f107 0208 	add.w	r2, r7, #8
 8000b08:	f7ff fc5d 	bl	80003c6 <lookup>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4a11      	ldr	r2, [pc, #68]	; (8000b54 <next_music+0xe0>)
 8000b10:	6013      	str	r3, [r2, #0]
					&node);
			Change_Melody(melody, toneCount);
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <next_music+0xe0>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 ffaa 	bl	8001a74 <Change_Melody>
 8000b20:	e00a      	b.n	8000b38 <next_music+0xc4>
		} else {
			toneCount = next_shuffle();
 8000b22:	f7ff ff57 	bl	80009d4 <next_shuffle>
 8000b26:	4603      	mov	r3, r0
 8000b28:	60bb      	str	r3, [r7, #8]
			Change_Melody(melody, toneCount);
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <next_music+0xe0>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	4611      	mov	r1, r2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 ff9e 	bl	8001a74 <Change_Melody>
		}
	}
}
 8000b38:	bf00      	nop
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd90      	pop	{r4, r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000010 	.word	0x20000010
 8000b48:	200000e4 	.word	0x200000e4
 8000b4c:	20000600 	.word	0x20000600
 8000b50:	200000e8 	.word	0x200000e8
 8000b54:	20000604 	.word	0x20000604
 8000b58:	20000011 	.word	0x20000011

08000b5c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b096      	sub	sp, #88	; 0x58
 8000b60:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	struct digit _digits[10];
	_digits[0].number = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
	_digits[0].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
 8000b66:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000b6a:	817b      	strh	r3, [r7, #10]
			| GPIO_PIN_15;

	_digits[1].number = 1;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
	_digits[1].pattern = GPIO_PIN_12;
 8000b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b74:	823b      	strh	r3, [r7, #16]
	_digits[1].anti_pattern = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000b76:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b7a:	827b      	strh	r3, [r7, #18]

	_digits[2].number = 2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	617b      	str	r3, [r7, #20]
	_digits[2].pattern = GPIO_PIN_13;
 8000b80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b84:	833b      	strh	r3, [r7, #24]
	_digits[2].anti_pattern = GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15;
 8000b86:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000b8a:	837b      	strh	r3, [r7, #26]

	_digits[3].number = 3;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	61fb      	str	r3, [r7, #28]
	_digits[3].pattern = GPIO_PIN_12 | GPIO_PIN_13;
 8000b90:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b94:	843b      	strh	r3, [r7, #32]
	_digits[3].anti_pattern = GPIO_PIN_14 | GPIO_PIN_15;
 8000b96:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b9a:	847b      	strh	r3, [r7, #34]	; 0x22

	_digits[4].number = 4;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
	_digits[4].pattern = GPIO_PIN_14;
 8000ba0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ba4:	853b      	strh	r3, [r7, #40]	; 0x28
	_digits[4].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15;
 8000ba6:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000baa:	857b      	strh	r3, [r7, #42]	; 0x2a

	_digits[5].number = 5;
 8000bac:	2305      	movs	r3, #5
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
	_digits[5].pattern = GPIO_PIN_12 | GPIO_PIN_14;
 8000bb0:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000bb4:	863b      	strh	r3, [r7, #48]	; 0x30
	_digits[5].anti_pattern = GPIO_PIN_13 | GPIO_PIN_15;
 8000bb6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000bba:	867b      	strh	r3, [r7, #50]	; 0x32

	_digits[6].number = 6;
 8000bbc:	2306      	movs	r3, #6
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
	_digits[6].pattern = GPIO_PIN_13 | GPIO_PIN_14;
 8000bc0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000bc4:	873b      	strh	r3, [r7, #56]	; 0x38
	_digits[6].anti_pattern = GPIO_PIN_12 | GPIO_PIN_15;
 8000bc6:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000bca:	877b      	strh	r3, [r7, #58]	; 0x3a

	_digits[7].number = 7;
 8000bcc:	2307      	movs	r3, #7
 8000bce:	63fb      	str	r3, [r7, #60]	; 0x3c
	_digits[7].pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 8000bd0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000bd4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	_digits[7].anti_pattern = GPIO_PIN_15;
 8000bd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bdc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	_digits[8].number = 8;
 8000be0:	2308      	movs	r3, #8
 8000be2:	647b      	str	r3, [r7, #68]	; 0x44
	_digits[8].pattern = GPIO_PIN_15;
 8000be4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000be8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	_digits[8].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 8000bec:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000bf0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	_digits[9].number = 9;
 8000bf4:	2309      	movs	r3, #9
 8000bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
	_digits[9].pattern = GPIO_PIN_12 | GPIO_PIN_15;
 8000bf8:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000bfc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	_digits[9].anti_pattern = GPIO_PIN_13 | GPIO_PIN_14;
 8000c00:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c04:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	//initialize Global digits structure
	for (int i = 0; i < 10; i++) {
 8000c08:	2300      	movs	r3, #0
 8000c0a:	657b      	str	r3, [r7, #84]	; 0x54
 8000c0c:	e00f      	b.n	8000c2e <main+0xd2>
		digits[i] = _digits[i];
 8000c0e:	4924      	ldr	r1, [pc, #144]	; (8000ca0 <main+0x144>)
 8000c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c14:	00d2      	lsls	r2, r2, #3
 8000c16:	3258      	adds	r2, #88	; 0x58
 8000c18:	443a      	add	r2, r7
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	440b      	add	r3, r1
 8000c1e:	3a54      	subs	r2, #84	; 0x54
 8000c20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c24:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 0; i < 10; i++) {
 8000c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	657b      	str	r3, [r7, #84]	; 0x54
 8000c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c30:	2b09      	cmp	r3, #9
 8000c32:	ddec      	ble.n	8000c0e <main+0xb2>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c34:	f001 f90c 	bl	8001e50 <HAL_Init>

	/* USER CODE BEGIN Init */

	//Set 7-segment PINS
	led[0] = GPIO_PIN_1;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <main+0x148>)
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	801a      	strh	r2, [r3, #0]
	led[1] = GPIO_PIN_2;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <main+0x148>)
 8000c40:	2204      	movs	r2, #4
 8000c42:	805a      	strh	r2, [r3, #2]
	led[2] = GPIO_PIN_3;
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <main+0x148>)
 8000c46:	2208      	movs	r2, #8
 8000c48:	809a      	strh	r2, [r3, #4]
	led[3] = GPIO_PIN_4;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <main+0x148>)
 8000c4c:	2210      	movs	r2, #16
 8000c4e:	80da      	strh	r2, [r3, #6]

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c50:	f000 f834 	bl	8000cbc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c54:	f000 faa4 	bl	80011a0 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000c58:	f000 f908 	bl	8000e6c <MX_I2C1_Init>
	MX_SPI1_Init();
 8000c5c:	f000 f946 	bl	8000eec <MX_SPI1_Init>
	MX_USB_PCD_Init();
 8000c60:	f000 fa7c 	bl	800115c <MX_USB_PCD_Init>
	MX_TIM1_Init();
 8000c64:	f000 f980 	bl	8000f68 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000c68:	f000 f9d2 	bl	8001010 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8000c6c:	f000 fa46 	bl	80010fc <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8000c70:	f000 f88c 	bl	8000d8c <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8000c74:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <main+0x14c>)
 8000c76:	f004 fe99 	bl	80059ac <HAL_TIM_Base_Start_IT>
	HAL_UART_Transmit_IT(&huart1,
 8000c7a:	222c      	movs	r2, #44	; 0x2c
 8000c7c:	490b      	ldr	r1, [pc, #44]	; (8000cac <main+0x150>)
 8000c7e:	480c      	ldr	r0, [pc, #48]	; (8000cb0 <main+0x154>)
 8000c80:	f006 f898 	bl	8006db4 <HAL_UART_Transmit_IT>
			"=============\nProgram Running\n=============\n", 44);
	HAL_UART_Receive_IT(&huart1, &d, 1);
 8000c84:	2201      	movs	r2, #1
 8000c86:	490b      	ldr	r1, [pc, #44]	; (8000cb4 <main+0x158>)
 8000c88:	4809      	ldr	r0, [pc, #36]	; (8000cb0 <main+0x154>)
 8000c8a:	f006 f8f1 	bl	8006e70 <HAL_UART_Receive_IT>
	initTonesDictionary();
 8000c8e:	f7ff fc19 	bl	80004c4 <initTonesDictionary>
	PWM_Start();
 8000c92:	f000 fe2b 	bl	80018ec <PWM_Start>

	HAL_ADC_Start_IT(&hadc1);
 8000c96:	4808      	ldr	r0, [pc, #32]	; (8000cb8 <main+0x15c>)
 8000c98:	f001 fb34 	bl	8002304 <HAL_ADC_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000c9c:	e7fe      	b.n	8000c9c <main+0x140>
 8000c9e:	bf00      	nop
 8000ca0:	20000644 	.word	0x20000644
 8000ca4:	20000608 	.word	0x20000608
 8000ca8:	200001f4 	.word	0x200001f4
 8000cac:	0800c88c 	.word	0x0800c88c
 8000cb0:	2000028c 	.word	0x2000028c
 8000cb4:	200006f8 	.word	0x200006f8
 8000cb8:	200000ec 	.word	0x200000ec

08000cbc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b09e      	sub	sp, #120	; 0x78
 8000cc0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000cc2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000cc6:	2228      	movs	r2, #40	; 0x28
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f007 fbe2 	bl	8008494 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000cd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	223c      	movs	r2, #60	; 0x3c
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f007 fbd4 	bl	8008494 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000cec:	2303      	movs	r3, #3
 8000cee:	653b      	str	r3, [r7, #80]	; 0x50
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cf0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cf4:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cfe:	2310      	movs	r3, #16
 8000d00:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d02:	2302      	movs	r3, #2
 8000d04:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d0a:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000d0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d10:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d12:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d16:	4618      	mov	r0, r3
 8000d18:	f003 f922 	bl	8003f60 <HAL_RCC_OscConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0x6a>
		Error_Handler();
 8000d22:	f000 fbef 	bl	8001504 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d26:	230f      	movs	r3, #15
 8000d28:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d36:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000d3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d40:	2101      	movs	r1, #1
 8000d42:	4618      	mov	r0, r3
 8000d44:	f004 f94a 	bl	8004fdc <HAL_RCC_ClockConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0x96>
		Error_Handler();
 8000d4e:	f000 fbd9 	bl	8001504 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <SystemClock_Config+0xcc>)
 8000d54:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_TIM1
			| RCC_PERIPHCLK_ADC12;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000d64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d68:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000d6e:	463b      	mov	r3, r7
 8000d70:	4618      	mov	r0, r3
 8000d72:	f004 fb69 	bl	8005448 <HAL_RCCEx_PeriphCLKConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0xc4>
		Error_Handler();
 8000d7c:	f000 fbc2 	bl	8001504 <Error_Handler>
	}
}
 8000d80:	bf00      	nop
 8000d82:	3778      	adds	r7, #120	; 0x78
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	000210a1 	.word	0x000210a1

08000d8c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
 8000dac:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000dae:	4b2e      	ldr	r3, [pc, #184]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000db0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000db4:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000db6:	4b2c      	ldr	r3, [pc, #176]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dbc:	4b2a      	ldr	r3, [pc, #168]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dc2:	4b29      	ldr	r3, [pc, #164]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000dc8:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	765a      	strb	r2, [r3, #25]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dce:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dd6:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ddc:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de2:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000de8:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dee:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000df8:	2204      	movs	r2, #4
 8000dfa:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	761a      	strb	r2, [r3, #24]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000e08:	4817      	ldr	r0, [pc, #92]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000e0a:	f001 f89b 	bl	8001f44 <HAL_ADC_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_ADC1_Init+0x8c>
		Error_Handler();
 8000e14:	f000 fb76 	bl	8001504 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	4811      	ldr	r0, [pc, #68]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000e24:	f002 f9b6 	bl	8003194 <HAL_ADCEx_MultiModeConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_ADC1_Init+0xa6>
		Error_Handler();
 8000e2e:	f000 fb69 	bl	8001504 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8000e32:	2305      	movs	r3, #5
 8000e34:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e36:	2301      	movs	r3, #1
 8000e38:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000e3e:	2306      	movs	r3, #6
 8000e40:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4806      	ldr	r0, [pc, #24]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000e50:	f001 feb4 	bl	8002bbc <HAL_ADC_ConfigChannel>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_ADC1_Init+0xd2>
		Error_Handler();
 8000e5a:	f000 fb53 	bl	8001504 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	3728      	adds	r7, #40	; 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200000ec 	.word	0x200000ec

08000e6c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000e70:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000e72:	4a1c      	ldr	r2, [pc, #112]	; (8000ee4 <MX_I2C1_Init+0x78>)
 8000e74:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 8000e76:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000e78:	4a1b      	ldr	r2, [pc, #108]	; (8000ee8 <MX_I2C1_Init+0x7c>)
 8000e7a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000e7c:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e82:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000ea6:	480e      	ldr	r0, [pc, #56]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000ea8:	f002 fe62 	bl	8003b70 <HAL_I2C_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000eb2:	f000 fb27 	bl	8001504 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4809      	ldr	r0, [pc, #36]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000eba:	f002 fee8 	bl	8003c8e <HAL_I2CEx_ConfigAnalogFilter>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000ec4:	f000 fb1e 	bl	8001504 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000ecc:	f002 ff2a 	bl	8003d24 <HAL_I2CEx_ConfigDigitalFilter>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000ed6:	f000 fb15 	bl	8001504 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	2000013c 	.word	0x2000013c
 8000ee4:	40005400 	.word	0x40005400
 8000ee8:	2000090e 	.word	0x2000090e

08000eec <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <MX_SPI1_Init+0x74>)
 8000ef2:	4a1c      	ldr	r2, [pc, #112]	; (8000f64 <MX_SPI1_Init+0x78>)
 8000ef4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <MX_SPI1_Init+0x74>)
 8000ef8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000efc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <MX_SPI1_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <MX_SPI1_Init+0x74>)
 8000f06:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f0a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <MX_SPI1_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <MX_SPI1_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <MX_SPI1_Init+0x74>)
 8000f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f1e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <MX_SPI1_Init+0x74>)
 8000f22:	2208      	movs	r2, #8
 8000f24:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <MX_SPI1_Init+0x74>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <MX_SPI1_Init+0x74>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <MX_SPI1_Init+0x74>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <MX_SPI1_Init+0x74>)
 8000f3a:	2207      	movs	r2, #7
 8000f3c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f3e:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <MX_SPI1_Init+0x74>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <MX_SPI1_Init+0x74>)
 8000f46:	2208      	movs	r2, #8
 8000f48:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_SPI1_Init+0x74>)
 8000f4c:	f004 fc2c 	bl	80057a8 <HAL_SPI_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_SPI1_Init+0x6e>
		Error_Handler();
 8000f56:	f000 fad5 	bl	8001504 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000190 	.word	0x20000190
 8000f64:	40013000 	.word	0x40013000

08000f68 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000f6e:	f107 0310 	add.w	r3, r7, #16
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000f86:	4b20      	ldr	r3, [pc, #128]	; (8001008 <MX_TIM1_Init+0xa0>)
 8000f88:	4a20      	ldr	r2, [pc, #128]	; (800100c <MX_TIM1_Init+0xa4>)
 8000f8a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 4800 - 1;
 8000f8c:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <MX_TIM1_Init+0xa0>)
 8000f8e:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000f92:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f94:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <MX_TIM1_Init+0xa0>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 5 - 1;
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <MX_TIM1_Init+0xa0>)
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa0:	4b19      	ldr	r3, [pc, #100]	; (8001008 <MX_TIM1_Init+0xa0>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <MX_TIM1_Init+0xa0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <MX_TIM1_Init+0xa0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000fb2:	4815      	ldr	r0, [pc, #84]	; (8001008 <MX_TIM1_Init+0xa0>)
 8000fb4:	f004 fca3 	bl	80058fe <HAL_TIM_Base_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM1_Init+0x5a>
		Error_Handler();
 8000fbe:	f000 faa1 	bl	8001504 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	4619      	mov	r1, r3
 8000fce:	480e      	ldr	r0, [pc, #56]	; (8001008 <MX_TIM1_Init+0xa0>)
 8000fd0:	f005 f8ec 	bl	80061ac <HAL_TIM_ConfigClockSource>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM1_Init+0x76>
		Error_Handler();
 8000fda:	f000 fa93 	bl	8001504 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	4619      	mov	r1, r3
 8000fee:	4806      	ldr	r0, [pc, #24]	; (8001008 <MX_TIM1_Init+0xa0>)
 8000ff0:	f005 fdf4 	bl	8006bdc <HAL_TIMEx_MasterConfigSynchronization>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8000ffa:	f000 fa83 	bl	8001504 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	3720      	adds	r7, #32
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200001f4 	.word	0x200001f4
 800100c:	40012c00 	.word	0x40012c00

08001010 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b08e      	sub	sp, #56	; 0x38
 8001014:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001016:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001030:	463b      	mov	r3, r7
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]
 800103e:	615a      	str	r2, [r3, #20]
 8001040:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001042:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <MX_TIM2_Init+0xe8>)
 8001044:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001048:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800104a:	4b2b      	ldr	r3, [pc, #172]	; (80010f8 <MX_TIM2_Init+0xe8>)
 800104c:	2200      	movs	r2, #0
 800104e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001050:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <MX_TIM2_Init+0xe8>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001056:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <MX_TIM2_Init+0xe8>)
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105e:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <MX_TIM2_Init+0xe8>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001064:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <MX_TIM2_Init+0xe8>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800106a:	4823      	ldr	r0, [pc, #140]	; (80010f8 <MX_TIM2_Init+0xe8>)
 800106c:	f004 fc47 	bl	80058fe <HAL_TIM_Base_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM2_Init+0x6a>
		Error_Handler();
 8001076:	f000 fa45 	bl	8001504 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800107a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001080:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001084:	4619      	mov	r1, r3
 8001086:	481c      	ldr	r0, [pc, #112]	; (80010f8 <MX_TIM2_Init+0xe8>)
 8001088:	f005 f890 	bl	80061ac <HAL_TIM_ConfigClockSource>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM2_Init+0x86>
		Error_Handler();
 8001092:	f000 fa37 	bl	8001504 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001096:	4818      	ldr	r0, [pc, #96]	; (80010f8 <MX_TIM2_Init+0xe8>)
 8001098:	f004 fcf2 	bl	8005a80 <HAL_TIM_PWM_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM2_Init+0x96>
		Error_Handler();
 80010a2:	f000 fa2f 	bl	8001504 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4619      	mov	r1, r3
 80010b4:	4810      	ldr	r0, [pc, #64]	; (80010f8 <MX_TIM2_Init+0xe8>)
 80010b6:	f005 fd91 	bl	8006bdc <HAL_TIMEx_MasterConfigSynchronization>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 80010c0:	f000 fa20 	bl	8001504 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c4:	2360      	movs	r3, #96	; 0x60
 80010c6:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80010d4:	463b      	mov	r3, r7
 80010d6:	2200      	movs	r2, #0
 80010d8:	4619      	mov	r1, r3
 80010da:	4807      	ldr	r0, [pc, #28]	; (80010f8 <MX_TIM2_Init+0xe8>)
 80010dc:	f004 ff52 	bl	8005f84 <HAL_TIM_PWM_ConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 80010e6:	f000 fa0d 	bl	8001504 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <MX_TIM2_Init+0xe8>)
 80010ec:	f000 fb38 	bl	8001760 <HAL_TIM_MspPostInit>

}
 80010f0:	bf00      	nop
 80010f2:	3738      	adds	r7, #56	; 0x38
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000240 	.word	0x20000240

080010fc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_USART1_UART_Init+0x58>)
 8001102:	4a15      	ldr	r2, [pc, #84]	; (8001158 <MX_USART1_UART_Init+0x5c>)
 8001104:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001106:	4b13      	ldr	r3, [pc, #76]	; (8001154 <MX_USART1_UART_Init+0x58>)
 8001108:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800110c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_USART1_UART_Init+0x58>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_USART1_UART_Init+0x58>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <MX_USART1_UART_Init+0x58>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <MX_USART1_UART_Init+0x58>)
 8001122:	220c      	movs	r2, #12
 8001124:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <MX_USART1_UART_Init+0x58>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <MX_USART1_UART_Init+0x58>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <MX_USART1_UART_Init+0x58>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MX_USART1_UART_Init+0x58>)
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_USART1_UART_Init+0x58>)
 8001140:	f005 fdea 	bl	8006d18 <HAL_UART_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_USART1_UART_Init+0x52>
		Error_Handler();
 800114a:	f000 f9db 	bl	8001504 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	2000028c 	.word	0x2000028c
 8001158:	40013800 	.word	0x40013800

0800115c <MX_USB_PCD_Init>:
/**
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void) {
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 8001160:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <MX_USB_PCD_Init+0x3c>)
 8001162:	4a0e      	ldr	r2, [pc, #56]	; (800119c <MX_USB_PCD_Init+0x40>)
 8001164:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_USB_PCD_Init+0x3c>)
 8001168:	2208      	movs	r2, #8
 800116a:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <MX_USB_PCD_Init+0x3c>)
 800116e:	2202      	movs	r2, #2
 8001170:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_USB_PCD_Init+0x3c>)
 8001174:	2202      	movs	r2, #2
 8001176:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <MX_USB_PCD_Init+0x3c>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_USB_PCD_Init+0x3c>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK) {
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <MX_USB_PCD_Init+0x3c>)
 8001186:	f002 fe19 	bl	8003dbc <HAL_PCD_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_USB_PCD_Init+0x38>
		Error_Handler();
 8001190:	f000 f9b8 	bl	8001504 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000314 	.word	0x20000314
 800119c:	40005c00 	.word	0x40005c00

080011a0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08c      	sub	sp, #48	; 0x30
 80011a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80011b6:	4b5e      	ldr	r3, [pc, #376]	; (8001330 <MX_GPIO_Init+0x190>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	4a5d      	ldr	r2, [pc, #372]	; (8001330 <MX_GPIO_Init+0x190>)
 80011bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011c0:	6153      	str	r3, [r2, #20]
 80011c2:	4b5b      	ldr	r3, [pc, #364]	; (8001330 <MX_GPIO_Init+0x190>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ca:	61bb      	str	r3, [r7, #24]
 80011cc:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	4b58      	ldr	r3, [pc, #352]	; (8001330 <MX_GPIO_Init+0x190>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	4a57      	ldr	r2, [pc, #348]	; (8001330 <MX_GPIO_Init+0x190>)
 80011d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011d8:	6153      	str	r3, [r2, #20]
 80011da:	4b55      	ldr	r3, [pc, #340]	; (8001330 <MX_GPIO_Init+0x190>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80011e6:	4b52      	ldr	r3, [pc, #328]	; (8001330 <MX_GPIO_Init+0x190>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	4a51      	ldr	r2, [pc, #324]	; (8001330 <MX_GPIO_Init+0x190>)
 80011ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011f0:	6153      	str	r3, [r2, #20]
 80011f2:	4b4f      	ldr	r3, [pc, #316]	; (8001330 <MX_GPIO_Init+0x190>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	4b4c      	ldr	r3, [pc, #304]	; (8001330 <MX_GPIO_Init+0x190>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a4b      	ldr	r2, [pc, #300]	; (8001330 <MX_GPIO_Init+0x190>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6153      	str	r3, [r2, #20]
 800120a:	4b49      	ldr	r3, [pc, #292]	; (8001330 <MX_GPIO_Init+0x190>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001216:	4b46      	ldr	r3, [pc, #280]	; (8001330 <MX_GPIO_Init+0x190>)
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	4a45      	ldr	r2, [pc, #276]	; (8001330 <MX_GPIO_Init+0x190>)
 800121c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001220:	6153      	str	r3, [r2, #20]
 8001222:	4b43      	ldr	r3, [pc, #268]	; (8001330 <MX_GPIO_Init+0x190>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	4b40      	ldr	r3, [pc, #256]	; (8001330 <MX_GPIO_Init+0x190>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	4a3f      	ldr	r2, [pc, #252]	; (8001330 <MX_GPIO_Init+0x190>)
 8001234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001238:	6153      	str	r3, [r2, #20]
 800123a:	4b3d      	ldr	r3, [pc, #244]	; (8001330 <MX_GPIO_Init+0x190>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	2108      	movs	r1, #8
 800124a:	483a      	ldr	r0, [pc, #232]	; (8001334 <MX_GPIO_Init+0x194>)
 800124c:	f002 fc60 	bl	8003b10 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8001250:	2200      	movs	r2, #0
 8001252:	f24f 011e 	movw	r1, #61470	; 0xf01e
 8001256:	4838      	ldr	r0, [pc, #224]	; (8001338 <MX_GPIO_Init+0x198>)
 8001258:	f002 fc5a 	bl	8003b10 <HAL_GPIO_WritePin>
			GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_1
					| GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800125c:	2308      	movs	r3, #8
 800125e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001260:	2301      	movs	r3, #1
 8001262:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	4619      	mov	r1, r3
 8001272:	4830      	ldr	r0, [pc, #192]	; (8001334 <MX_GPIO_Init+0x194>)
 8001274:	f002 fad2 	bl	800381c <HAL_GPIO_Init>

	/*Configure GPIO pins : MEMS_INT3_Pin MEMS_INT4_Pin */
	GPIO_InitStruct.Pin = MEMS_INT3_Pin | MEMS_INT4_Pin;
 8001278:	2330      	movs	r3, #48	; 0x30
 800127a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800127c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001280:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	4619      	mov	r1, r3
 800128c:	4829      	ldr	r0, [pc, #164]	; (8001334 <MX_GPIO_Init+0x194>)
 800128e:	f002 fac5 	bl	800381c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA0 PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2;
 8001292:	2305      	movs	r3, #5
 8001294:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001296:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800129a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4619      	mov	r1, r3
 80012a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012aa:	f002 fab7 	bl	800381c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_3;
 80012ae:	230a      	movs	r3, #10
 80012b0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012b2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80012b6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012b8:	2302      	movs	r3, #2
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	4619      	mov	r1, r3
 80012c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c6:	f002 faa9 	bl	800381c <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15
	 PD1 PD2 PD3 PD4 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15
 80012ca:	f24f 031e 	movw	r3, #61470	; 0xf01e
 80012ce:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	4619      	mov	r1, r3
 80012e2:	4815      	ldr	r0, [pc, #84]	; (8001338 <MX_GPIO_Init+0x198>)
 80012e4:	f002 fa9a 	bl	800381c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2100      	movs	r1, #0
 80012ec:	2006      	movs	r0, #6
 80012ee:	f002 f9e8 	bl	80036c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80012f2:	2006      	movs	r0, #6
 80012f4:	f002 fa01 	bl	80036fa <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2100      	movs	r1, #0
 80012fc:	2007      	movs	r0, #7
 80012fe:	f002 f9e0 	bl	80036c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001302:	2007      	movs	r0, #7
 8001304:	f002 f9f9 	bl	80036fa <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	2100      	movs	r1, #0
 800130c:	2008      	movs	r0, #8
 800130e:	f002 f9d8 	bl	80036c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8001312:	2008      	movs	r0, #8
 8001314:	f002 f9f1 	bl	80036fa <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001318:	2200      	movs	r2, #0
 800131a:	2100      	movs	r1, #0
 800131c:	2009      	movs	r0, #9
 800131e:	f002 f9d0 	bl	80036c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001322:	2009      	movs	r0, #9
 8001324:	f002 f9e9 	bl	80036fa <HAL_NVIC_EnableIRQ>

}
 8001328:	bf00      	nop
 800132a:	3730      	adds	r7, #48	; 0x30
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40021000 	.word	0x40021000
 8001334:	48001000 	.word	0x48001000
 8001338:	48000c00 	.word	0x48000c00

0800133c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 8001346:	f000 fddd 	bl	8001f04 <HAL_GetTick>
 800134a:	4603      	mov	r3, r0
 800134c:	4a2b      	ldr	r2, [pc, #172]	; (80013fc <HAL_GPIO_EXTI_Callback+0xc0>)
 800134e:	6013      	str	r3, [r2, #0]
	if ((GPIO_Pin == GPIO_PIN_1) && LED != 4) {
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d117      	bne.n	8001386 <HAL_GPIO_EXTI_Callback+0x4a>
 8001356:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b04      	cmp	r3, #4
 800135c:	d013      	beq.n	8001386 <HAL_GPIO_EXTI_Callback+0x4a>

		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 800135e:	4b27      	ldr	r3, [pc, #156]	; (80013fc <HAL_GPIO_EXTI_Callback+0xc0>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4b28      	ldr	r3, [pc, #160]	; (8001404 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800136c:	d942      	bls.n	80013f4 <HAL_GPIO_EXTI_Callback+0xb8>
//			counterInside++;
			increase(LED);
 800136e:	4b24      	ldr	r3, [pc, #144]	; (8001400 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fae8 	bl	8000948 <increase>
			next_music();
 8001378:	f7ff fb7c 	bl	8000a74 <next_music>
			previousMillis = currentMillis;
 800137c:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <HAL_GPIO_EXTI_Callback+0xc0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a20      	ldr	r2, [pc, #128]	; (8001404 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001382:	6013      	str	r3, [r2, #0]
		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 8001384:	e036      	b.n	80013f4 <HAL_GPIO_EXTI_Callback+0xb8>
		}
	} else if ((GPIO_Pin == GPIO_PIN_3)) {
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	2b08      	cmp	r3, #8
 800138a:	d11f      	bne.n	80013cc <HAL_GPIO_EXTI_Callback+0x90>

		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_GPIO_EXTI_Callback+0xc0>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800139a:	d92b      	bls.n	80013f4 <HAL_GPIO_EXTI_Callback+0xb8>
			if (programState == Paused || programState == IDLE)
 800139c:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <HAL_GPIO_EXTI_Callback+0xcc>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_EXTI_Callback+0x70>
 80013a4:	4b18      	ldr	r3, [pc, #96]	; (8001408 <HAL_GPIO_EXTI_Callback+0xcc>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d103      	bne.n	80013b4 <HAL_GPIO_EXTI_Callback+0x78>
				programState = Resume;
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HAL_GPIO_EXTI_Callback+0xcc>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	701a      	strb	r2, [r3, #0]
 80013b2:	e006      	b.n	80013c2 <HAL_GPIO_EXTI_Callback+0x86>
			else if (programState == Resume)
 80013b4:	4b14      	ldr	r3, [pc, #80]	; (8001408 <HAL_GPIO_EXTI_Callback+0xcc>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d102      	bne.n	80013c2 <HAL_GPIO_EXTI_Callback+0x86>
				programState = Paused;
 80013bc:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_GPIO_EXTI_Callback+0xcc>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
			previousMillis = currentMillis;
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <HAL_GPIO_EXTI_Callback+0xc0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a0f      	ldr	r2, [pc, #60]	; (8001404 <HAL_GPIO_EXTI_Callback+0xc8>)
 80013c8:	6013      	str	r3, [r2, #0]
		blink = 0;
		isCorrect = -1;
		prevEnterTime = HAL_GetTick();
//		PWM_Stop();
	}
}
 80013ca:	e013      	b.n	80013f4 <HAL_GPIO_EXTI_Callback+0xb8>
	} else if (GPIO_Pin == GPIO_PIN_0 && isCorrect == 0) {
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d110      	bne.n	80013f4 <HAL_GPIO_EXTI_Callback+0xb8>
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <HAL_GPIO_EXTI_Callback+0xd0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10c      	bne.n	80013f4 <HAL_GPIO_EXTI_Callback+0xb8>
		blink = 0;
 80013da:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <HAL_GPIO_EXTI_Callback+0xd4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
		isCorrect = -1;
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_GPIO_EXTI_Callback+0xd0>)
 80013e2:	f04f 32ff 	mov.w	r2, #4294967295
 80013e6:	601a      	str	r2, [r3, #0]
		prevEnterTime = HAL_GetTick();
 80013e8:	f000 fd8c 	bl	8001f04 <HAL_GetTick>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4a09      	ldr	r2, [pc, #36]	; (8001414 <HAL_GPIO_EXTI_Callback+0xd8>)
 80013f0:	6013      	str	r3, [r2, #0]
}
 80013f2:	e7ff      	b.n	80013f4 <HAL_GPIO_EXTI_Callback+0xb8>
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000628 	.word	0x20000628
 8001400:	20000640 	.word	0x20000640
 8001404:	20000624 	.word	0x20000624
 8001408:	20000010 	.word	0x20000010
 800140c:	20000008 	.word	0x20000008
 8001410:	2000000c 	.word	0x2000000c
 8001414:	20000638 	.word	0x20000638

08001418 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a31      	ldr	r2, [pc, #196]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d15c      	bne.n	80014e4 <HAL_TIM_PeriodElapsedCallback+0xcc>
		if (index == LED && HAL_GetTick() - prevTime < 400) {
 800142a:	4b31      	ldr	r3, [pc, #196]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b31      	ldr	r3, [pc, #196]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d119      	bne.n	800146a <HAL_TIM_PeriodElapsedCallback+0x52>
 8001436:	f000 fd65 	bl	8001f04 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	4b2e      	ldr	r3, [pc, #184]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001446:	d210      	bcs.n	800146a <HAL_TIM_PeriodElapsedCallback+0x52>
			display_number(index, carrier[index]);
 8001448:	4b29      	ldr	r3, [pc, #164]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	492a      	ldr	r1, [pc, #168]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001452:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001456:	4619      	mov	r1, r3
 8001458:	4610      	mov	r0, r2
 800145a:	f7ff fa41 	bl	80008e0 <display_number>
			coolDownTimer = HAL_GetTick();
 800145e:	f000 fd51 	bl	8001f04 <HAL_GetTick>
 8001462:	4603      	mov	r3, r0
 8001464:	4a26      	ldr	r2, [pc, #152]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	e02d      	b.n	80014c6 <HAL_TIM_PeriodElapsedCallback+0xae>
		} else if (index == LED && HAL_GetTick() - prevTime > 900) {
 800146a:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4b21      	ldr	r3, [pc, #132]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	d116      	bne.n	80014a4 <HAL_TIM_PeriodElapsedCallback+0x8c>
 8001476:	f000 fd45 	bl	8001f04 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001486:	d90d      	bls.n	80014a4 <HAL_TIM_PeriodElapsedCallback+0x8c>
			//coolDown
			if (HAL_GetTick() - coolDownTimer > 100) {
 8001488:	f000 fd3c 	bl	8001f04 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b64      	cmp	r3, #100	; 0x64
 8001496:	d916      	bls.n	80014c6 <HAL_TIM_PeriodElapsedCallback+0xae>
				prevTime = HAL_GetTick();
 8001498:	f000 fd34 	bl	8001f04 <HAL_GetTick>
 800149c:	4603      	mov	r3, r0
 800149e:	4a16      	ldr	r2, [pc, #88]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80014a0:	6013      	str	r3, [r2, #0]
			if (HAL_GetTick() - coolDownTimer > 100) {
 80014a2:	e010      	b.n	80014c6 <HAL_TIM_PeriodElapsedCallback+0xae>
			}
		} else if (index != LED) {
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d00a      	beq.n	80014c6 <HAL_TIM_PeriodElapsedCallback+0xae>
			display_number(index, carrier[index]);
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4910      	ldr	r1, [pc, #64]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80014ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014be:	4619      	mov	r1, r3
 80014c0:	4610      	mov	r0, r2
 80014c2:	f7ff fa0d 	bl	80008e0 <display_number>
		}
		if (index == 4) {
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d105      	bne.n	80014da <HAL_TIM_PeriodElapsedCallback+0xc2>
			index = 0;
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
			init_display();
 80014d4:	f7ff fa58 	bl	8000988 <init_display>
		} else {
			++index;
		}

	}
}
 80014d8:	e004      	b.n	80014e4 <HAL_TIM_PeriodElapsedCallback+0xcc>
			++index;
 80014da:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	4a03      	ldr	r2, [pc, #12]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40012c00 	.word	0x40012c00
 80014f0:	20000634 	.word	0x20000634
 80014f4:	20000640 	.word	0x20000640
 80014f8:	2000062c 	.word	0x2000062c
 80014fc:	20000610 	.word	0x20000610
 8001500:	20000630 	.word	0x20000630

08001504 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001508:	b672      	cpsid	i
}
 800150a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800150c:	e7fe      	b.n	800150c <Error_Handler+0x8>
	...

08001510 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_MspInit+0x44>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <HAL_MspInit+0x44>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6193      	str	r3, [r2, #24]
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_MspInit+0x44>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_MspInit+0x44>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a08      	ldr	r2, [pc, #32]	; (8001554 <HAL_MspInit+0x44>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001538:	61d3      	str	r3, [r2, #28]
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_MspInit+0x44>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001546:	2007      	movs	r0, #7
 8001548:	f002 f8b0 	bl	80036ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40021000 	.word	0x40021000

08001558 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001578:	d12b      	bne.n	80015d2 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <HAL_ADC_MspInit+0x84>)
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	4a17      	ldr	r2, [pc, #92]	; (80015dc <HAL_ADC_MspInit+0x84>)
 8001580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001584:	6153      	str	r3, [r2, #20]
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <HAL_ADC_MspInit+0x84>)
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001592:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_ADC_MspInit+0x84>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	4a11      	ldr	r2, [pc, #68]	; (80015dc <HAL_ADC_MspInit+0x84>)
 8001598:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800159c:	6153      	str	r3, [r2, #20]
 800159e:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <HAL_ADC_MspInit+0x84>)
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015aa:	2310      	movs	r3, #16
 80015ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ae:	2303      	movs	r3, #3
 80015b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4619      	mov	r1, r3
 80015bc:	4808      	ldr	r0, [pc, #32]	; (80015e0 <HAL_ADC_MspInit+0x88>)
 80015be:	f002 f92d 	bl	800381c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	2012      	movs	r0, #18
 80015c8:	f002 f87b 	bl	80036c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80015cc:	2012      	movs	r0, #18
 80015ce:	f002 f894 	bl	80036fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015d2:	bf00      	nop
 80015d4:	3728      	adds	r7, #40	; 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000
 80015e0:	48001400 	.word	0x48001400

080015e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a17      	ldr	r2, [pc, #92]	; (8001660 <HAL_I2C_MspInit+0x7c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d127      	bne.n	8001656 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <HAL_I2C_MspInit+0x80>)
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	4a16      	ldr	r2, [pc, #88]	; (8001664 <HAL_I2C_MspInit+0x80>)
 800160c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001610:	6153      	str	r3, [r2, #20]
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <HAL_I2C_MspInit+0x80>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800161e:	23c0      	movs	r3, #192	; 0xc0
 8001620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001622:	2312      	movs	r3, #18
 8001624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001626:	2301      	movs	r3, #1
 8001628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800162a:	2303      	movs	r3, #3
 800162c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800162e:	2304      	movs	r3, #4
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	480b      	ldr	r0, [pc, #44]	; (8001668 <HAL_I2C_MspInit+0x84>)
 800163a:	f002 f8ef 	bl	800381c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_I2C_MspInit+0x80>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	4a08      	ldr	r2, [pc, #32]	; (8001664 <HAL_I2C_MspInit+0x80>)
 8001644:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001648:	61d3      	str	r3, [r2, #28]
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_I2C_MspInit+0x80>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001656:	bf00      	nop
 8001658:	3728      	adds	r7, #40	; 0x28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40005400 	.word	0x40005400
 8001664:	40021000 	.word	0x40021000
 8001668:	48000400 	.word	0x48000400

0800166c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a17      	ldr	r2, [pc, #92]	; (80016e8 <HAL_SPI_MspInit+0x7c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d128      	bne.n	80016e0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <HAL_SPI_MspInit+0x80>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	4a16      	ldr	r2, [pc, #88]	; (80016ec <HAL_SPI_MspInit+0x80>)
 8001694:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001698:	6193      	str	r3, [r2, #24]
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <HAL_SPI_MspInit+0x80>)
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <HAL_SPI_MspInit+0x80>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	4a10      	ldr	r2, [pc, #64]	; (80016ec <HAL_SPI_MspInit+0x80>)
 80016ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b0:	6153      	str	r3, [r2, #20]
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <HAL_SPI_MspInit+0x80>)
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80016be:	23e0      	movs	r3, #224	; 0xe0
 80016c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016ce:	2305      	movs	r3, #5
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016dc:	f002 f89e 	bl	800381c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016e0:	bf00      	nop
 80016e2:	3728      	adds	r7, #40	; 0x28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40013000 	.word	0x40013000
 80016ec:	40021000 	.word	0x40021000

080016f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a16      	ldr	r2, [pc, #88]	; (8001758 <HAL_TIM_Base_MspInit+0x68>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d114      	bne.n	800172c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001702:	4b16      	ldr	r3, [pc, #88]	; (800175c <HAL_TIM_Base_MspInit+0x6c>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	4a15      	ldr	r2, [pc, #84]	; (800175c <HAL_TIM_Base_MspInit+0x6c>)
 8001708:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800170c:	6193      	str	r3, [r2, #24]
 800170e:	4b13      	ldr	r3, [pc, #76]	; (800175c <HAL_TIM_Base_MspInit+0x6c>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	2019      	movs	r0, #25
 8001720:	f001 ffcf 	bl	80036c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001724:	2019      	movs	r0, #25
 8001726:	f001 ffe8 	bl	80036fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800172a:	e010      	b.n	800174e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001734:	d10b      	bne.n	800174e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_TIM_Base_MspInit+0x6c>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	4a08      	ldr	r2, [pc, #32]	; (800175c <HAL_TIM_Base_MspInit+0x6c>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	61d3      	str	r3, [r2, #28]
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_TIM_Base_MspInit+0x6c>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
}
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40012c00 	.word	0x40012c00
 800175c:	40021000 	.word	0x40021000

08001760 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001780:	d11d      	bne.n	80017be <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <HAL_TIM_MspPostInit+0x68>)
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	4a10      	ldr	r2, [pc, #64]	; (80017c8 <HAL_TIM_MspPostInit+0x68>)
 8001788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178c:	6153      	str	r3, [r2, #20]
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <HAL_TIM_MspPostInit+0x68>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800179a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800179e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017ac:	2301      	movs	r3, #1
 80017ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	4619      	mov	r1, r3
 80017b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ba:	f002 f82f 	bl	800381c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80017be:	bf00      	nop
 80017c0:	3720      	adds	r7, #32
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000

080017cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	; 0x28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a1b      	ldr	r2, [pc, #108]	; (8001858 <HAL_UART_MspInit+0x8c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d12f      	bne.n	800184e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_UART_MspInit+0x90>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	4a1a      	ldr	r2, [pc, #104]	; (800185c <HAL_UART_MspInit+0x90>)
 80017f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f8:	6193      	str	r3, [r2, #24]
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <HAL_UART_MspInit+0x90>)
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_UART_MspInit+0x90>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	4a14      	ldr	r2, [pc, #80]	; (800185c <HAL_UART_MspInit+0x90>)
 800180c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001810:	6153      	str	r3, [r2, #20]
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_UART_MspInit+0x90>)
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800181e:	2330      	movs	r3, #48	; 0x30
 8001820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800182a:	2303      	movs	r3, #3
 800182c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800182e:	2307      	movs	r3, #7
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	4809      	ldr	r0, [pc, #36]	; (8001860 <HAL_UART_MspInit+0x94>)
 800183a:	f001 ffef 	bl	800381c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800183e:	2200      	movs	r2, #0
 8001840:	2100      	movs	r1, #0
 8001842:	2025      	movs	r0, #37	; 0x25
 8001844:	f001 ff3d 	bl	80036c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001848:	2025      	movs	r0, #37	; 0x25
 800184a:	f001 ff56 	bl	80036fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800184e:	bf00      	nop
 8001850:	3728      	adds	r7, #40	; 0x28
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40013800 	.word	0x40013800
 800185c:	40021000 	.word	0x40021000
 8001860:	48000800 	.word	0x48000800

08001864 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a18      	ldr	r2, [pc, #96]	; (80018e4 <HAL_PCD_MspInit+0x80>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d129      	bne.n	80018da <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001886:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <HAL_PCD_MspInit+0x84>)
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <HAL_PCD_MspInit+0x84>)
 800188c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001890:	6153      	str	r3, [r2, #20]
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <HAL_PCD_MspInit+0x84>)
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800189e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ac:	2303      	movs	r3, #3
 80018ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80018b0:	230e      	movs	r3, #14
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	4619      	mov	r1, r3
 80018ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018be:	f001 ffad 	bl	800381c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_PCD_MspInit+0x84>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	4a08      	ldr	r2, [pc, #32]	; (80018e8 <HAL_PCD_MspInit+0x84>)
 80018c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018cc:	61d3      	str	r3, [r2, #28]
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_PCD_MspInit+0x84>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80018da:	bf00      	nop
 80018dc:	3728      	adds	r7, #40	; 0x28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40005c00 	.word	0x40005c00
 80018e8:	40021000 	.word	0x40021000

080018ec <PWM_Start>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PWM_Start() {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <PWM_Start+0x18>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a04      	ldr	r2, [pc, #16]	; (8001908 <PWM_Start+0x1c>)
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	4611      	mov	r1, r2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f004 f922 	bl	8005b44 <HAL_TIM_PWM_Start>
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000050 	.word	0x20000050
 8001908:	200006fc 	.word	0x200006fc

0800190c <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	460a      	mov	r2, r1
 8001916:	80fb      	strh	r3, [r7, #6]
 8001918:	4613      	mov	r3, r2
 800191a:	80bb      	strh	r3, [r7, #4]
	if (pwm_freq == 0 || pwm_freq > 20000) {
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d004      	beq.n	800192c <PWM_Change_Tone+0x20>
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001928:	4293      	cmp	r3, r2
 800192a:	d937      	bls.n	800199c <PWM_Change_Tone+0x90>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 800192c:	4b4e      	ldr	r3, [pc, #312]	; (8001a68 <PWM_Change_Tone+0x15c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d105      	bne.n	8001940 <PWM_Change_Tone+0x34>
 8001934:	4b4d      	ldr	r3, [pc, #308]	; (8001a6c <PWM_Change_Tone+0x160>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2200      	movs	r2, #0
 800193c:	635a      	str	r2, [r3, #52]	; 0x34
 800193e:	e08e      	b.n	8001a5e <PWM_Change_Tone+0x152>
 8001940:	4b49      	ldr	r3, [pc, #292]	; (8001a68 <PWM_Change_Tone+0x15c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b04      	cmp	r3, #4
 8001946:	d105      	bne.n	8001954 <PWM_Change_Tone+0x48>
 8001948:	4b48      	ldr	r3, [pc, #288]	; (8001a6c <PWM_Change_Tone+0x160>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	2300      	movs	r3, #0
 8001950:	6393      	str	r3, [r2, #56]	; 0x38
 8001952:	e084      	b.n	8001a5e <PWM_Change_Tone+0x152>
 8001954:	4b44      	ldr	r3, [pc, #272]	; (8001a68 <PWM_Change_Tone+0x15c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b08      	cmp	r3, #8
 800195a:	d105      	bne.n	8001968 <PWM_Change_Tone+0x5c>
 800195c:	4b43      	ldr	r3, [pc, #268]	; (8001a6c <PWM_Change_Tone+0x160>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	2300      	movs	r3, #0
 8001964:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001966:	e07a      	b.n	8001a5e <PWM_Change_Tone+0x152>
 8001968:	4b3f      	ldr	r3, [pc, #252]	; (8001a68 <PWM_Change_Tone+0x15c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b0c      	cmp	r3, #12
 800196e:	d105      	bne.n	800197c <PWM_Change_Tone+0x70>
 8001970:	4b3e      	ldr	r3, [pc, #248]	; (8001a6c <PWM_Change_Tone+0x160>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	2300      	movs	r3, #0
 8001978:	6413      	str	r3, [r2, #64]	; 0x40
 800197a:	e070      	b.n	8001a5e <PWM_Change_Tone+0x152>
 800197c:	4b3a      	ldr	r3, [pc, #232]	; (8001a68 <PWM_Change_Tone+0x15c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b10      	cmp	r3, #16
 8001982:	d105      	bne.n	8001990 <PWM_Change_Tone+0x84>
 8001984:	4b39      	ldr	r3, [pc, #228]	; (8001a6c <PWM_Change_Tone+0x160>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	2300      	movs	r3, #0
 800198c:	6593      	str	r3, [r2, #88]	; 0x58
 800198e:	e066      	b.n	8001a5e <PWM_Change_Tone+0x152>
 8001990:	4b36      	ldr	r3, [pc, #216]	; (8001a6c <PWM_Change_Tone+0x160>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	2300      	movs	r3, #0
 8001998:	65d3      	str	r3, [r2, #92]	; 0x5c
 800199a:	e060      	b.n	8001a5e <PWM_Change_Tone+0x152>
	} else {
		const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 800199c:	f003 fc9a 	bl	80052d4 <HAL_RCC_GetSysClockFreq>
 80019a0:	61f8      	str	r0, [r7, #28]
		const uint16_t prescaler = 1;
 80019a2:	2301      	movs	r3, #1
 80019a4:	837b      	strh	r3, [r7, #26]
		const uint32_t timer_clock = internal_clock_freq / prescaler;
 80019a6:	8b7b      	ldrh	r3, [r7, #26]
 80019a8:	69fa      	ldr	r2, [r7, #28]
 80019aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ae:	617b      	str	r3, [r7, #20]
		const uint32_t period_cycles = timer_clock / pwm_freq;
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b8:	613b      	str	r3, [r7, #16]
		const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 80019ba:	88bb      	ldrh	r3, [r7, #4]
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	fb02 f303 	mul.w	r3, r2, r3
 80019c2:	4a2b      	ldr	r2, [pc, #172]	; (8001a70 <PWM_Change_Tone+0x164>)
 80019c4:	fba2 2303 	umull	r2, r3, r2, r3
 80019c8:	09db      	lsrs	r3, r3, #7
 80019ca:	60fb      	str	r3, [r7, #12]

		pwm_timer->Instance->PSC = prescaler - 1;
 80019cc:	8b7b      	ldrh	r3, [r7, #26]
 80019ce:	1e5a      	subs	r2, r3, #1
 80019d0:	4b26      	ldr	r3, [pc, #152]	; (8001a6c <PWM_Change_Tone+0x160>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
		pwm_timer->Instance->ARR = period_cycles - 1;
 80019d8:	4b24      	ldr	r3, [pc, #144]	; (8001a6c <PWM_Change_Tone+0x160>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	3a01      	subs	r2, #1
 80019e2:	62da      	str	r2, [r3, #44]	; 0x2c
		pwm_timer->Instance->EGR = TIM_EGR_UG;
 80019e4:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <PWM_Change_Tone+0x160>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2201      	movs	r2, #1
 80019ec:	615a      	str	r2, [r3, #20]
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80019ee:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <PWM_Change_Tone+0x15c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d105      	bne.n	8001a02 <PWM_Change_Tone+0xf6>
 80019f6:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <PWM_Change_Tone+0x160>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8001a00:	e02d      	b.n	8001a5e <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001a02:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <PWM_Change_Tone+0x15c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d105      	bne.n	8001a16 <PWM_Change_Tone+0x10a>
 8001a0a:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <PWM_Change_Tone+0x160>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001a14:	e023      	b.n	8001a5e <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <PWM_Change_Tone+0x15c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d105      	bne.n	8001a2a <PWM_Change_Tone+0x11e>
 8001a1e:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <PWM_Change_Tone+0x160>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001a28:	e019      	b.n	8001a5e <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <PWM_Change_Tone+0x15c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b0c      	cmp	r3, #12
 8001a30:	d105      	bne.n	8001a3e <PWM_Change_Tone+0x132>
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <PWM_Change_Tone+0x160>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001a3c:	e00f      	b.n	8001a5e <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <PWM_Change_Tone+0x15c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b10      	cmp	r3, #16
 8001a44:	d105      	bne.n	8001a52 <PWM_Change_Tone+0x146>
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <PWM_Change_Tone+0x160>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001a50:	e005      	b.n	8001a5e <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <PWM_Change_Tone+0x160>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001a5c:	e7ff      	b.n	8001a5e <PWM_Change_Tone+0x152>
 8001a5e:	bf00      	nop
 8001a60:	3720      	adds	r7, #32
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200006fc 	.word	0x200006fc
 8001a6c:	20000050 	.word	0x20000050
 8001a70:	10624dd3 	.word	0x10624dd3

08001a74 <Change_Melody>:

void Change_Melody(const struct Tone *melody, uint16_t tone_count) {
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
	melody_ptr = melody;
 8001a80:	4a07      	ldr	r2, [pc, #28]	; (8001aa0 <Change_Melody+0x2c>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6013      	str	r3, [r2, #0]
	melody_tone_count = tone_count;
 8001a86:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <Change_Melody+0x30>)
 8001a88:	887b      	ldrh	r3, [r7, #2]
 8001a8a:	8013      	strh	r3, [r2, #0]
	current_tone_number = 0;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <Change_Melody+0x34>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	801a      	strh	r2, [r3, #0]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000700 	.word	0x20000700
 8001aa4:	20000704 	.word	0x20000704
 8001aa8:	20000706 	.word	0x20000706

08001aac <Update_Melody>:

void Update_Melody() {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
	if (programState != Paused && programState != IDLE) {
 8001ab2:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <Update_Melody+0x9c>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d041      	beq.n	8001b3e <Update_Melody+0x92>
 8001aba:	4b23      	ldr	r3, [pc, #140]	; (8001b48 <Update_Melody+0x9c>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d03d      	beq.n	8001b3e <Update_Melody+0x92>
		if ((HAL_GetTick() > current_tone_end)
 8001ac2:	f000 fa1f 	bl	8001f04 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <Update_Melody+0xa0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d92c      	bls.n	8001b2a <Update_Melody+0x7e>
				&& (current_tone_number < melody_tone_count)) {
 8001ad0:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <Update_Melody+0xa4>)
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <Update_Melody+0xa8>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d224      	bcs.n	8001b2a <Update_Melody+0x7e>
			const struct Tone active_tone = *(melody_ptr + current_tone_number);
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <Update_Melody+0xac>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <Update_Melody+0xa4>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	441a      	add	r2, r3
 8001aee:	463b      	mov	r3, r7
 8001af0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001af4:	e883 0003 	stmia.w	r3, {r0, r1}
			PWM_Change_Tone(active_tone.frequency, volume);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	4a17      	ldr	r2, [pc, #92]	; (8001b5c <Update_Melody+0xb0>)
 8001afe:	8812      	ldrh	r2, [r2, #0]
 8001b00:	b292      	uxth	r2, r2
 8001b02:	4611      	mov	r1, r2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff01 	bl	800190c <PWM_Change_Tone>
			current_tone_end = HAL_GetTick() + active_tone.duration;
 8001b0a:	f000 f9fb 	bl	8001f04 <HAL_GetTick>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	4413      	add	r3, r2
 8001b14:	4a0d      	ldr	r2, [pc, #52]	; (8001b4c <Update_Melody+0xa0>)
 8001b16:	6013      	str	r3, [r2, #0]
			current_tone_number++;
 8001b18:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <Update_Melody+0xa4>)
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	3301      	adds	r3, #1
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <Update_Melody+0xa4>)
 8001b24:	801a      	strh	r2, [r3, #0]
				&& (current_tone_number < melody_tone_count)) {
 8001b26:	bf00      	nop
		}else if(current_tone_number >= melody_tone_count)
		{
			next_music();
		}
	}
}
 8001b28:	e009      	b.n	8001b3e <Update_Melody+0x92>
		}else if(current_tone_number >= melody_tone_count)
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <Update_Melody+0xa4>)
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <Update_Melody+0xa8>)
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d301      	bcc.n	8001b3e <Update_Melody+0x92>
			next_music();
 8001b3a:	f7fe ff9b 	bl	8000a74 <next_music>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000010 	.word	0x20000010
 8001b4c:	20000708 	.word	0x20000708
 8001b50:	20000706 	.word	0x20000706
 8001b54:	20000704 	.word	0x20000704
 8001b58:	20000700 	.word	0x20000700
 8001b5c:	20000054 	.word	0x20000054

08001b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001b64:	e7fe      	b.n	8001b64 <NMI_Handler+0x4>

08001b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b6a:	e7fe      	b.n	8001b6a <HardFault_Handler+0x4>

08001b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <MemManage_Handler+0x4>

08001b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <BusFault_Handler+0x4>

08001b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <UsageFault_Handler+0x4>

08001b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bac:	f000 f996 	bl	8001edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	Update_Melody();
 8001bb0:	f7ff ff7c 	bl	8001aac <Update_Melody>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	f001 ffbf 	bl	8003b40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	if (HAL_GetTick() > last_button_press + 200) {
 8001bc2:	f000 f99f 	bl	8001f04 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <EXTI0_IRQHandler+0x28>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	33c8      	adds	r3, #200	; 0xc8
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d904      	bls.n	8001bdc <EXTI0_IRQHandler+0x24>
		last_button_press = HAL_GetTick();
 8001bd2:	f000 f997 	bl	8001f04 <HAL_GetTick>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4a01      	ldr	r2, [pc, #4]	; (8001be0 <EXTI0_IRQHandler+0x28>)
 8001bda:	6013      	str	r3, [r2, #0]

	}
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	2000070c 	.word	0x2000070c

08001be4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001be8:	2002      	movs	r0, #2
 8001bea:	f001 ffa9 	bl	8003b40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001bf6:	2004      	movs	r0, #4
 8001bf8:	f001 ffa2 	bl	8003b40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001c04:	2008      	movs	r0, #8
 8001c06:	f001 ff9b 	bl	8003b40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <ADC1_2_IRQHandler+0x10>)
 8001c16:	f000 fcc3 	bl	80025a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200000ec 	.word	0x200000ec

08001c24 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001c2a:	f004 f88b 	bl	8005d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200001f4 	.word	0x200001f4

08001c38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <USART1_IRQHandler+0x10>)
 8001c3e:	f005 f95b 	bl	8006ef8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	2000028c 	.word	0x2000028c

08001c4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return 1;
 8001c50:	2301      	movs	r3, #1
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <_kill>:

int _kill(int pid, int sig)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c66:	f006 fbd5 	bl	8008414 <__errno>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2216      	movs	r2, #22
 8001c6e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <_exit>:

void _exit (int status)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c84:	f04f 31ff 	mov.w	r1, #4294967295
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ffe7 	bl	8001c5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c8e:	e7fe      	b.n	8001c8e <_exit+0x12>

08001c90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	e00a      	b.n	8001cb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ca2:	f3af 8000 	nop.w
 8001ca6:	4601      	mov	r1, r0
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	60ba      	str	r2, [r7, #8]
 8001cae:	b2ca      	uxtb	r2, r1
 8001cb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	dbf0      	blt.n	8001ca2 <_read+0x12>
  }

  return len;
 8001cc0:	687b      	ldr	r3, [r7, #4]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b086      	sub	sp, #24
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	60f8      	str	r0, [r7, #12]
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	e009      	b.n	8001cf0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	60ba      	str	r2, [r7, #8]
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	3301      	adds	r3, #1
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	dbf1      	blt.n	8001cdc <_write+0x12>
  }
  return len;
 8001cf8:	687b      	ldr	r3, [r7, #4]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <_close>:

int _close(int file)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d2a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <_isatty>:

int _isatty(int file)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d42:	2301      	movs	r3, #1
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d74:	4a14      	ldr	r2, [pc, #80]	; (8001dc8 <_sbrk+0x5c>)
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <_sbrk+0x60>)
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <_sbrk+0x64>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d102      	bne.n	8001d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <_sbrk+0x64>)
 8001d8a:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <_sbrk+0x68>)
 8001d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <_sbrk+0x64>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d207      	bcs.n	8001dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d9c:	f006 fb3a 	bl	8008414 <__errno>
 8001da0:	4603      	mov	r3, r0
 8001da2:	220c      	movs	r2, #12
 8001da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001da6:	f04f 33ff 	mov.w	r3, #4294967295
 8001daa:	e009      	b.n	8001dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <_sbrk+0x64>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001db2:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <_sbrk+0x64>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	4a05      	ldr	r2, [pc, #20]	; (8001dd0 <_sbrk+0x64>)
 8001dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	2000a000 	.word	0x2000a000
 8001dcc:	00000400 	.word	0x00000400
 8001dd0:	20000710 	.word	0x20000710
 8001dd4:	20000728 	.word	0x20000728

08001dd8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <SystemInit+0x20>)
 8001dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de2:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <SystemInit+0x20>)
 8001de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e34 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e00:	f7ff ffea 	bl	8001dd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e04:	480c      	ldr	r0, [pc, #48]	; (8001e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e06:	490d      	ldr	r1, [pc, #52]	; (8001e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e08:	4a0d      	ldr	r2, [pc, #52]	; (8001e40 <LoopForever+0xe>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e0c:	e002      	b.n	8001e14 <LoopCopyDataInit>

08001e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e12:	3304      	adds	r3, #4

08001e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e18:	d3f9      	bcc.n	8001e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e1c:	4c0a      	ldr	r4, [pc, #40]	; (8001e48 <LoopForever+0x16>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e20:	e001      	b.n	8001e26 <LoopFillZerobss>

08001e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e24:	3204      	adds	r2, #4

08001e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e28:	d3fb      	bcc.n	8001e22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e2a:	f006 faf9 	bl	8008420 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e2e:	f7fe fe95 	bl	8000b5c <main>

08001e32 <LoopForever>:

LoopForever:
    b LoopForever
 8001e32:	e7fe      	b.n	8001e32 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e34:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e3c:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8001e40:	0800ca44 	.word	0x0800ca44
  ldr r2, =_sbss
 8001e44:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8001e48:	20000728 	.word	0x20000728

08001e4c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e4c:	e7fe      	b.n	8001e4c <ADC3_IRQHandler>
	...

08001e50 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e54:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <HAL_Init+0x28>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a07      	ldr	r2, [pc, #28]	; (8001e78 <HAL_Init+0x28>)
 8001e5a:	f043 0310 	orr.w	r3, r3, #16
 8001e5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e60:	2003      	movs	r0, #3
 8001e62:	f001 fc23 	bl	80036ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e66:	2000      	movs	r0, #0
 8001e68:	f000 f808 	bl	8001e7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e6c:	f7ff fb50 	bl	8001510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40022000 	.word	0x40022000

08001e7c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e84:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_InitTick+0x54>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_InitTick+0x58>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f001 fc3b 	bl	8003716 <HAL_SYSTICK_Config>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e00e      	b.n	8001ec8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b0f      	cmp	r3, #15
 8001eae:	d80a      	bhi.n	8001ec6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb8:	f001 fc03 	bl	80036c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ebc:	4a06      	ldr	r2, [pc, #24]	; (8001ed8 <HAL_InitTick+0x5c>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	e000      	b.n	8001ec8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000058 	.word	0x20000058
 8001ed4:	20000060 	.word	0x20000060
 8001ed8:	2000005c 	.word	0x2000005c

08001edc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_IncTick+0x20>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_IncTick+0x24>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4413      	add	r3, r2
 8001eec:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <HAL_IncTick+0x24>)
 8001eee:	6013      	str	r3, [r2, #0]
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000060 	.word	0x20000060
 8001f00:	20000714 	.word	0x20000714

08001f04 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return uwTick;  
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <HAL_GetTick+0x14>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	20000714 	.word	0x20000714

08001f1c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b09a      	sub	sp, #104	; 0x68
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e1c9      	b.n	80022f8 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d176      	bne.n	8002064 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d152      	bne.n	8002024 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff fadd 	bl	8001558 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d13b      	bne.n	8002024 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f001 fa47 	bl	8003440 <ADC_Disable>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d12f      	bne.n	8002024 <HAL_ADC_Init+0xe0>
 8001fc4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d12b      	bne.n	8002024 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fd4:	f023 0302 	bic.w	r3, r3, #2
 8001fd8:	f043 0202 	orr.w	r2, r3, #2
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fee:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ffe:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002000:	4b86      	ldr	r3, [pc, #536]	; (800221c <HAL_ADC_Init+0x2d8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a86      	ldr	r2, [pc, #536]	; (8002220 <HAL_ADC_Init+0x2dc>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	0c9a      	lsrs	r2, r3, #18
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002016:	e002      	b.n	800201e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	3b01      	subs	r3, #1
 800201c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f9      	bne.n	8002018 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d007      	beq.n	8002042 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800203c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002040:	d110      	bne.n	8002064 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f023 0312 	bic.w	r3, r3, #18
 800204a:	f043 0210 	orr.w	r2, r3, #16
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	f043 0201 	orr.w	r2, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	f003 0310 	and.w	r3, r3, #16
 800206c:	2b00      	cmp	r3, #0
 800206e:	f040 8136 	bne.w	80022de <HAL_ADC_Init+0x39a>
 8002072:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002076:	2b00      	cmp	r3, #0
 8002078:	f040 8131 	bne.w	80022de <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002086:	2b00      	cmp	r3, #0
 8002088:	f040 8129 	bne.w	80022de <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002094:	f043 0202 	orr.w	r2, r3, #2
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020a4:	d004      	beq.n	80020b0 <HAL_ADC_Init+0x16c>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a5e      	ldr	r2, [pc, #376]	; (8002224 <HAL_ADC_Init+0x2e0>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d101      	bne.n	80020b4 <HAL_ADC_Init+0x170>
 80020b0:	4b5d      	ldr	r3, [pc, #372]	; (8002228 <HAL_ADC_Init+0x2e4>)
 80020b2:	e000      	b.n	80020b6 <HAL_ADC_Init+0x172>
 80020b4:	4b5d      	ldr	r3, [pc, #372]	; (800222c <HAL_ADC_Init+0x2e8>)
 80020b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020c0:	d102      	bne.n	80020c8 <HAL_ADC_Init+0x184>
 80020c2:	4b58      	ldr	r3, [pc, #352]	; (8002224 <HAL_ADC_Init+0x2e0>)
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	e01a      	b.n	80020fe <HAL_ADC_Init+0x1ba>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a55      	ldr	r2, [pc, #340]	; (8002224 <HAL_ADC_Init+0x2e0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d103      	bne.n	80020da <HAL_ADC_Init+0x196>
 80020d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	e011      	b.n	80020fe <HAL_ADC_Init+0x1ba>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a54      	ldr	r2, [pc, #336]	; (8002230 <HAL_ADC_Init+0x2ec>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d102      	bne.n	80020ea <HAL_ADC_Init+0x1a6>
 80020e4:	4b53      	ldr	r3, [pc, #332]	; (8002234 <HAL_ADC_Init+0x2f0>)
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	e009      	b.n	80020fe <HAL_ADC_Init+0x1ba>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a51      	ldr	r2, [pc, #324]	; (8002234 <HAL_ADC_Init+0x2f0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d102      	bne.n	80020fa <HAL_ADC_Init+0x1b6>
 80020f4:	4b4e      	ldr	r3, [pc, #312]	; (8002230 <HAL_ADC_Init+0x2ec>)
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	e001      	b.n	80020fe <HAL_ADC_Init+0x1ba>
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 0303 	and.w	r3, r3, #3
 8002108:	2b01      	cmp	r3, #1
 800210a:	d108      	bne.n	800211e <HAL_ADC_Init+0x1da>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_ADC_Init+0x1da>
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <HAL_ADC_Init+0x1dc>
 800211e:	2300      	movs	r3, #0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d11c      	bne.n	800215e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002124:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002126:	2b00      	cmp	r3, #0
 8002128:	d010      	beq.n	800214c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	2b01      	cmp	r3, #1
 8002134:	d107      	bne.n	8002146 <HAL_ADC_Init+0x202>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_ADC_Init+0x202>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <HAL_ADC_Init+0x204>
 8002146:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002148:	2b00      	cmp	r3, #0
 800214a:	d108      	bne.n	800215e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800214c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	431a      	orrs	r2, r3
 800215a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800215c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	7e5b      	ldrb	r3, [r3, #25]
 8002162:	035b      	lsls	r3, r3, #13
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002168:	2a01      	cmp	r2, #1
 800216a:	d002      	beq.n	8002172 <HAL_ADC_Init+0x22e>
 800216c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002170:	e000      	b.n	8002174 <HAL_ADC_Init+0x230>
 8002172:	2200      	movs	r2, #0
 8002174:	431a      	orrs	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	4313      	orrs	r3, r2
 8002182:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002184:	4313      	orrs	r3, r2
 8002186:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d11b      	bne.n	80021ca <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	7e5b      	ldrb	r3, [r3, #25]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d109      	bne.n	80021ae <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	3b01      	subs	r3, #1
 80021a0:	045a      	lsls	r2, r3, #17
 80021a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021aa:	663b      	str	r3, [r7, #96]	; 0x60
 80021ac:	e00d      	b.n	80021ca <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80021b6:	f043 0220 	orr.w	r2, r3, #32
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	f043 0201 	orr.w	r2, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d03a      	beq.n	8002248 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a16      	ldr	r2, [pc, #88]	; (8002230 <HAL_ADC_Init+0x2ec>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d004      	beq.n	80021e6 <HAL_ADC_Init+0x2a2>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a14      	ldr	r2, [pc, #80]	; (8002234 <HAL_ADC_Init+0x2f0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d128      	bne.n	8002238 <HAL_ADC_Init+0x2f4>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80021ee:	d012      	beq.n	8002216 <HAL_ADC_Init+0x2d2>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021f8:	d00a      	beq.n	8002210 <HAL_ADC_Init+0x2cc>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002202:	d002      	beq.n	800220a <HAL_ADC_Init+0x2c6>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	e018      	b.n	800223c <HAL_ADC_Init+0x2f8>
 800220a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800220e:	e015      	b.n	800223c <HAL_ADC_Init+0x2f8>
 8002210:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002214:	e012      	b.n	800223c <HAL_ADC_Init+0x2f8>
 8002216:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800221a:	e00f      	b.n	800223c <HAL_ADC_Init+0x2f8>
 800221c:	20000058 	.word	0x20000058
 8002220:	431bde83 	.word	0x431bde83
 8002224:	50000100 	.word	0x50000100
 8002228:	50000300 	.word	0x50000300
 800222c:	50000700 	.word	0x50000700
 8002230:	50000400 	.word	0x50000400
 8002234:	50000500 	.word	0x50000500
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002240:	4313      	orrs	r3, r2
 8002242:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002244:	4313      	orrs	r3, r2
 8002246:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	2b00      	cmp	r3, #0
 8002254:	d114      	bne.n	8002280 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002264:	f023 0302 	bic.w	r3, r3, #2
 8002268:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7e1b      	ldrb	r3, [r3, #24]
 800226e:	039a      	lsls	r2, r3, #14
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4313      	orrs	r3, r2
 800227a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800227c:	4313      	orrs	r3, r2
 800227e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	4b1e      	ldr	r3, [pc, #120]	; (8002300 <HAL_ADC_Init+0x3bc>)
 8002288:	4013      	ands	r3, r2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002290:	430b      	orrs	r3, r1
 8002292:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d10c      	bne.n	80022b6 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f023 010f 	bic.w	r1, r3, #15
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	1e5a      	subs	r2, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	631a      	str	r2, [r3, #48]	; 0x30
 80022b4:	e007      	b.n	80022c6 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 020f 	bic.w	r2, r2, #15
 80022c4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	f023 0303 	bic.w	r3, r3, #3
 80022d4:	f043 0201 	orr.w	r2, r3, #1
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	641a      	str	r2, [r3, #64]	; 0x40
 80022dc:	e00a      	b.n	80022f4 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f023 0312 	bic.w	r3, r3, #18
 80022e6:	f043 0210 	orr.w	r2, r3, #16
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80022ee:	2301      	movs	r3, #1
 80022f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80022f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3768      	adds	r7, #104	; 0x68
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	fff0c007 	.word	0xfff0c007

08002304 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800230c:	2300      	movs	r3, #0
 800230e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	2b00      	cmp	r3, #0
 800231c:	f040 8123 	bne.w	8002566 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_ADC_Start_IT+0x2a>
 800232a:	2302      	movs	r3, #2
 800232c:	e11e      	b.n	800256c <HAL_ADC_Start_IT+0x268>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f001 f81e 	bl	8003378 <ADC_Enable>
 800233c:	4603      	mov	r3, r0
 800233e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	2b00      	cmp	r3, #0
 8002344:	f040 810a 	bne.w	800255c <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002350:	f023 0301 	bic.w	r3, r3, #1
 8002354:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002364:	d004      	beq.n	8002370 <HAL_ADC_Start_IT+0x6c>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a82      	ldr	r2, [pc, #520]	; (8002574 <HAL_ADC_Start_IT+0x270>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d106      	bne.n	800237e <HAL_ADC_Start_IT+0x7a>
 8002370:	4b81      	ldr	r3, [pc, #516]	; (8002578 <HAL_ADC_Start_IT+0x274>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 031f 	and.w	r3, r3, #31
 8002378:	2b00      	cmp	r3, #0
 800237a:	d010      	beq.n	800239e <HAL_ADC_Start_IT+0x9a>
 800237c:	e005      	b.n	800238a <HAL_ADC_Start_IT+0x86>
 800237e:	4b7f      	ldr	r3, [pc, #508]	; (800257c <HAL_ADC_Start_IT+0x278>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 031f 	and.w	r3, r3, #31
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <HAL_ADC_Start_IT+0x9a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002392:	d004      	beq.n	800239e <HAL_ADC_Start_IT+0x9a>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a79      	ldr	r2, [pc, #484]	; (8002580 <HAL_ADC_Start_IT+0x27c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d115      	bne.n	80023ca <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d036      	beq.n	8002426 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80023c8:	e02d      	b.n	8002426 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023de:	d004      	beq.n	80023ea <HAL_ADC_Start_IT+0xe6>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a63      	ldr	r2, [pc, #396]	; (8002574 <HAL_ADC_Start_IT+0x270>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d10a      	bne.n	8002400 <HAL_ADC_Start_IT+0xfc>
 80023ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bf14      	ite	ne
 80023f8:	2301      	movne	r3, #1
 80023fa:	2300      	moveq	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	e008      	b.n	8002412 <HAL_ADC_Start_IT+0x10e>
 8002400:	4b5f      	ldr	r3, [pc, #380]	; (8002580 <HAL_ADC_Start_IT+0x27c>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	bf14      	ite	ne
 800240c:	2301      	movne	r3, #1
 800240e:	2300      	moveq	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d007      	beq.n	8002426 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800241e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800242e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002432:	d106      	bne.n	8002442 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002438:	f023 0206 	bic.w	r2, r3, #6
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	645a      	str	r2, [r3, #68]	; 0x44
 8002440:	e002      	b.n	8002448 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	221c      	movs	r2, #28
 8002456:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	2b08      	cmp	r3, #8
 800245e:	d110      	bne.n	8002482 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0204 	bic.w	r2, r2, #4
 800246e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0208 	orr.w	r2, r2, #8
 800247e:	605a      	str	r2, [r3, #4]
          break;
 8002480:	e008      	b.n	8002494 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 020c 	orr.w	r2, r2, #12
 8002490:	605a      	str	r2, [r3, #4]
          break;
 8002492:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002498:	2b01      	cmp	r3, #1
 800249a:	d107      	bne.n	80024ac <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0210 	bic.w	r2, r2, #16
 80024aa:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024b4:	d004      	beq.n	80024c0 <HAL_ADC_Start_IT+0x1bc>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a2e      	ldr	r2, [pc, #184]	; (8002574 <HAL_ADC_Start_IT+0x270>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d106      	bne.n	80024ce <HAL_ADC_Start_IT+0x1ca>
 80024c0:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <HAL_ADC_Start_IT+0x274>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d03e      	beq.n	800254a <HAL_ADC_Start_IT+0x246>
 80024cc:	e005      	b.n	80024da <HAL_ADC_Start_IT+0x1d6>
 80024ce:	4b2b      	ldr	r3, [pc, #172]	; (800257c <HAL_ADC_Start_IT+0x278>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d037      	beq.n	800254a <HAL_ADC_Start_IT+0x246>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024e2:	d004      	beq.n	80024ee <HAL_ADC_Start_IT+0x1ea>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a22      	ldr	r2, [pc, #136]	; (8002574 <HAL_ADC_Start_IT+0x270>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d106      	bne.n	80024fc <HAL_ADC_Start_IT+0x1f8>
 80024ee:	4b22      	ldr	r3, [pc, #136]	; (8002578 <HAL_ADC_Start_IT+0x274>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 031f 	and.w	r3, r3, #31
 80024f6:	2b05      	cmp	r3, #5
 80024f8:	d027      	beq.n	800254a <HAL_ADC_Start_IT+0x246>
 80024fa:	e005      	b.n	8002508 <HAL_ADC_Start_IT+0x204>
 80024fc:	4b1f      	ldr	r3, [pc, #124]	; (800257c <HAL_ADC_Start_IT+0x278>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 031f 	and.w	r3, r3, #31
 8002504:	2b05      	cmp	r3, #5
 8002506:	d020      	beq.n	800254a <HAL_ADC_Start_IT+0x246>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002510:	d004      	beq.n	800251c <HAL_ADC_Start_IT+0x218>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a17      	ldr	r2, [pc, #92]	; (8002574 <HAL_ADC_Start_IT+0x270>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d106      	bne.n	800252a <HAL_ADC_Start_IT+0x226>
 800251c:	4b16      	ldr	r3, [pc, #88]	; (8002578 <HAL_ADC_Start_IT+0x274>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 031f 	and.w	r3, r3, #31
 8002524:	2b09      	cmp	r3, #9
 8002526:	d010      	beq.n	800254a <HAL_ADC_Start_IT+0x246>
 8002528:	e005      	b.n	8002536 <HAL_ADC_Start_IT+0x232>
 800252a:	4b14      	ldr	r3, [pc, #80]	; (800257c <HAL_ADC_Start_IT+0x278>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 031f 	and.w	r3, r3, #31
 8002532:	2b09      	cmp	r3, #9
 8002534:	d009      	beq.n	800254a <HAL_ADC_Start_IT+0x246>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800253e:	d004      	beq.n	800254a <HAL_ADC_Start_IT+0x246>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a0e      	ldr	r2, [pc, #56]	; (8002580 <HAL_ADC_Start_IT+0x27c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d10f      	bne.n	800256a <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 0204 	orr.w	r2, r2, #4
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	e006      	b.n	800256a <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002564:	e001      	b.n	800256a <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002566:	2302      	movs	r3, #2
 8002568:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800256a:	7bfb      	ldrb	r3, [r7, #15]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	50000100 	.word	0x50000100
 8002578:	50000300 	.word	0x50000300
 800257c:	50000700 	.word	0x50000700
 8002580:	50000400 	.word	0x50000400

08002584 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
	...

080025a0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b088      	sub	sp, #32
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80025a8:	2300      	movs	r3, #0
 80025aa:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	f003 0304 	and.w	r3, r3, #4
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d004      	beq.n	80025d8 <HAL_ADC_IRQHandler+0x38>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10b      	bne.n	80025f0 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 80bc 	beq.w	800275c <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 80b6 	beq.w	800275c <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	f003 0310 	and.w	r3, r3, #16
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d105      	bne.n	8002608 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002610:	d004      	beq.n	800261c <HAL_ADC_IRQHandler+0x7c>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a90      	ldr	r2, [pc, #576]	; (8002858 <HAL_ADC_IRQHandler+0x2b8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d106      	bne.n	800262a <HAL_ADC_IRQHandler+0x8a>
 800261c:	4b8f      	ldr	r3, [pc, #572]	; (800285c <HAL_ADC_IRQHandler+0x2bc>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 031f 	and.w	r3, r3, #31
 8002624:	2b00      	cmp	r3, #0
 8002626:	d03e      	beq.n	80026a6 <HAL_ADC_IRQHandler+0x106>
 8002628:	e005      	b.n	8002636 <HAL_ADC_IRQHandler+0x96>
 800262a:	4b8d      	ldr	r3, [pc, #564]	; (8002860 <HAL_ADC_IRQHandler+0x2c0>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 031f 	and.w	r3, r3, #31
 8002632:	2b00      	cmp	r3, #0
 8002634:	d037      	beq.n	80026a6 <HAL_ADC_IRQHandler+0x106>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800263e:	d004      	beq.n	800264a <HAL_ADC_IRQHandler+0xaa>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a84      	ldr	r2, [pc, #528]	; (8002858 <HAL_ADC_IRQHandler+0x2b8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d106      	bne.n	8002658 <HAL_ADC_IRQHandler+0xb8>
 800264a:	4b84      	ldr	r3, [pc, #528]	; (800285c <HAL_ADC_IRQHandler+0x2bc>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 031f 	and.w	r3, r3, #31
 8002652:	2b05      	cmp	r3, #5
 8002654:	d027      	beq.n	80026a6 <HAL_ADC_IRQHandler+0x106>
 8002656:	e005      	b.n	8002664 <HAL_ADC_IRQHandler+0xc4>
 8002658:	4b81      	ldr	r3, [pc, #516]	; (8002860 <HAL_ADC_IRQHandler+0x2c0>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	2b05      	cmp	r3, #5
 8002662:	d020      	beq.n	80026a6 <HAL_ADC_IRQHandler+0x106>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800266c:	d004      	beq.n	8002678 <HAL_ADC_IRQHandler+0xd8>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a79      	ldr	r2, [pc, #484]	; (8002858 <HAL_ADC_IRQHandler+0x2b8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d106      	bne.n	8002686 <HAL_ADC_IRQHandler+0xe6>
 8002678:	4b78      	ldr	r3, [pc, #480]	; (800285c <HAL_ADC_IRQHandler+0x2bc>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	2b09      	cmp	r3, #9
 8002682:	d010      	beq.n	80026a6 <HAL_ADC_IRQHandler+0x106>
 8002684:	e005      	b.n	8002692 <HAL_ADC_IRQHandler+0xf2>
 8002686:	4b76      	ldr	r3, [pc, #472]	; (8002860 <HAL_ADC_IRQHandler+0x2c0>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	2b09      	cmp	r3, #9
 8002690:	d009      	beq.n	80026a6 <HAL_ADC_IRQHandler+0x106>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800269a:	d004      	beq.n	80026a6 <HAL_ADC_IRQHandler+0x106>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a70      	ldr	r2, [pc, #448]	; (8002864 <HAL_ADC_IRQHandler+0x2c4>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d104      	bne.n	80026b0 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	61bb      	str	r3, [r7, #24]
 80026ae:	e00f      	b.n	80026d0 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026b8:	d004      	beq.n	80026c4 <HAL_ADC_IRQHandler+0x124>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a66      	ldr	r2, [pc, #408]	; (8002858 <HAL_ADC_IRQHandler+0x2b8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d102      	bne.n	80026ca <HAL_ADC_IRQHandler+0x12a>
 80026c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026c8:	e000      	b.n	80026cc <HAL_ADC_IRQHandler+0x12c>
 80026ca:	4b66      	ldr	r3, [pc, #408]	; (8002864 <HAL_ADC_IRQHandler+0x2c4>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d137      	bne.n	800274e <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d132      	bne.n	800274e <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d02d      	beq.n	800274e <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d11a      	bne.n	8002736 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 020c 	bic.w	r2, r2, #12
 800270e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d112      	bne.n	800274e <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	f043 0201 	orr.w	r2, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	641a      	str	r2, [r3, #64]	; 0x40
 8002734:	e00b      	b.n	800274e <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f043 0210 	orr.w	r2, r3, #16
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	f043 0201 	orr.w	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7fe f8b4 	bl	80008bc <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	220c      	movs	r2, #12
 800275a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	f003 0320 	and.w	r3, r3, #32
 8002762:	2b00      	cmp	r3, #0
 8002764:	d004      	beq.n	8002770 <HAL_ADC_IRQHandler+0x1d0>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10b      	bne.n	8002788 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 8138 	beq.w	80029ec <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 8132 	beq.w	80029ec <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800279c:	d004      	beq.n	80027a8 <HAL_ADC_IRQHandler+0x208>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a2d      	ldr	r2, [pc, #180]	; (8002858 <HAL_ADC_IRQHandler+0x2b8>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d106      	bne.n	80027b6 <HAL_ADC_IRQHandler+0x216>
 80027a8:	4b2c      	ldr	r3, [pc, #176]	; (800285c <HAL_ADC_IRQHandler+0x2bc>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d03e      	beq.n	8002832 <HAL_ADC_IRQHandler+0x292>
 80027b4:	e005      	b.n	80027c2 <HAL_ADC_IRQHandler+0x222>
 80027b6:	4b2a      	ldr	r3, [pc, #168]	; (8002860 <HAL_ADC_IRQHandler+0x2c0>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 031f 	and.w	r3, r3, #31
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d037      	beq.n	8002832 <HAL_ADC_IRQHandler+0x292>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027ca:	d004      	beq.n	80027d6 <HAL_ADC_IRQHandler+0x236>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a21      	ldr	r2, [pc, #132]	; (8002858 <HAL_ADC_IRQHandler+0x2b8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d106      	bne.n	80027e4 <HAL_ADC_IRQHandler+0x244>
 80027d6:	4b21      	ldr	r3, [pc, #132]	; (800285c <HAL_ADC_IRQHandler+0x2bc>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 031f 	and.w	r3, r3, #31
 80027de:	2b05      	cmp	r3, #5
 80027e0:	d027      	beq.n	8002832 <HAL_ADC_IRQHandler+0x292>
 80027e2:	e005      	b.n	80027f0 <HAL_ADC_IRQHandler+0x250>
 80027e4:	4b1e      	ldr	r3, [pc, #120]	; (8002860 <HAL_ADC_IRQHandler+0x2c0>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	2b05      	cmp	r3, #5
 80027ee:	d020      	beq.n	8002832 <HAL_ADC_IRQHandler+0x292>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027f8:	d004      	beq.n	8002804 <HAL_ADC_IRQHandler+0x264>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a16      	ldr	r2, [pc, #88]	; (8002858 <HAL_ADC_IRQHandler+0x2b8>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d106      	bne.n	8002812 <HAL_ADC_IRQHandler+0x272>
 8002804:	4b15      	ldr	r3, [pc, #84]	; (800285c <HAL_ADC_IRQHandler+0x2bc>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 031f 	and.w	r3, r3, #31
 800280c:	2b09      	cmp	r3, #9
 800280e:	d010      	beq.n	8002832 <HAL_ADC_IRQHandler+0x292>
 8002810:	e005      	b.n	800281e <HAL_ADC_IRQHandler+0x27e>
 8002812:	4b13      	ldr	r3, [pc, #76]	; (8002860 <HAL_ADC_IRQHandler+0x2c0>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 031f 	and.w	r3, r3, #31
 800281a:	2b09      	cmp	r3, #9
 800281c:	d009      	beq.n	8002832 <HAL_ADC_IRQHandler+0x292>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002826:	d004      	beq.n	8002832 <HAL_ADC_IRQHandler+0x292>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0d      	ldr	r2, [pc, #52]	; (8002864 <HAL_ADC_IRQHandler+0x2c4>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d104      	bne.n	800283c <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	e018      	b.n	800286e <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002844:	d004      	beq.n	8002850 <HAL_ADC_IRQHandler+0x2b0>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a03      	ldr	r2, [pc, #12]	; (8002858 <HAL_ADC_IRQHandler+0x2b8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d10b      	bne.n	8002868 <HAL_ADC_IRQHandler+0x2c8>
 8002850:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002854:	e009      	b.n	800286a <HAL_ADC_IRQHandler+0x2ca>
 8002856:	bf00      	nop
 8002858:	50000100 	.word	0x50000100
 800285c:	50000300 	.word	0x50000300
 8002860:	50000700 	.word	0x50000700
 8002864:	50000400 	.word	0x50000400
 8002868:	4b92      	ldr	r3, [pc, #584]	; (8002ab4 <HAL_ADC_IRQHandler+0x514>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002874:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002878:	2b00      	cmp	r3, #0
 800287a:	f040 80b0 	bne.w	80029de <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00d      	beq.n	80028a4 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002892:	2b00      	cmp	r3, #0
 8002894:	f040 80a3 	bne.w	80029de <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f040 809d 	bne.w	80029de <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 8097 	beq.w	80029de <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028b8:	d004      	beq.n	80028c4 <HAL_ADC_IRQHandler+0x324>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a7e      	ldr	r2, [pc, #504]	; (8002ab8 <HAL_ADC_IRQHandler+0x518>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d106      	bne.n	80028d2 <HAL_ADC_IRQHandler+0x332>
 80028c4:	4b7d      	ldr	r3, [pc, #500]	; (8002abc <HAL_ADC_IRQHandler+0x51c>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d03e      	beq.n	800294e <HAL_ADC_IRQHandler+0x3ae>
 80028d0:	e005      	b.n	80028de <HAL_ADC_IRQHandler+0x33e>
 80028d2:	4b7b      	ldr	r3, [pc, #492]	; (8002ac0 <HAL_ADC_IRQHandler+0x520>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 031f 	and.w	r3, r3, #31
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d037      	beq.n	800294e <HAL_ADC_IRQHandler+0x3ae>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028e6:	d004      	beq.n	80028f2 <HAL_ADC_IRQHandler+0x352>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a72      	ldr	r2, [pc, #456]	; (8002ab8 <HAL_ADC_IRQHandler+0x518>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d106      	bne.n	8002900 <HAL_ADC_IRQHandler+0x360>
 80028f2:	4b72      	ldr	r3, [pc, #456]	; (8002abc <HAL_ADC_IRQHandler+0x51c>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 031f 	and.w	r3, r3, #31
 80028fa:	2b06      	cmp	r3, #6
 80028fc:	d027      	beq.n	800294e <HAL_ADC_IRQHandler+0x3ae>
 80028fe:	e005      	b.n	800290c <HAL_ADC_IRQHandler+0x36c>
 8002900:	4b6f      	ldr	r3, [pc, #444]	; (8002ac0 <HAL_ADC_IRQHandler+0x520>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 031f 	and.w	r3, r3, #31
 8002908:	2b06      	cmp	r3, #6
 800290a:	d020      	beq.n	800294e <HAL_ADC_IRQHandler+0x3ae>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002914:	d004      	beq.n	8002920 <HAL_ADC_IRQHandler+0x380>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a67      	ldr	r2, [pc, #412]	; (8002ab8 <HAL_ADC_IRQHandler+0x518>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d106      	bne.n	800292e <HAL_ADC_IRQHandler+0x38e>
 8002920:	4b66      	ldr	r3, [pc, #408]	; (8002abc <HAL_ADC_IRQHandler+0x51c>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 031f 	and.w	r3, r3, #31
 8002928:	2b07      	cmp	r3, #7
 800292a:	d010      	beq.n	800294e <HAL_ADC_IRQHandler+0x3ae>
 800292c:	e005      	b.n	800293a <HAL_ADC_IRQHandler+0x39a>
 800292e:	4b64      	ldr	r3, [pc, #400]	; (8002ac0 <HAL_ADC_IRQHandler+0x520>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 031f 	and.w	r3, r3, #31
 8002936:	2b07      	cmp	r3, #7
 8002938:	d009      	beq.n	800294e <HAL_ADC_IRQHandler+0x3ae>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002942:	d004      	beq.n	800294e <HAL_ADC_IRQHandler+0x3ae>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a5a      	ldr	r2, [pc, #360]	; (8002ab4 <HAL_ADC_IRQHandler+0x514>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d104      	bne.n	8002958 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	e00f      	b.n	8002978 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002960:	d004      	beq.n	800296c <HAL_ADC_IRQHandler+0x3cc>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a54      	ldr	r2, [pc, #336]	; (8002ab8 <HAL_ADC_IRQHandler+0x518>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d102      	bne.n	8002972 <HAL_ADC_IRQHandler+0x3d2>
 800296c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002970:	e000      	b.n	8002974 <HAL_ADC_IRQHandler+0x3d4>
 8002972:	4b50      	ldr	r3, [pc, #320]	; (8002ab4 <HAL_ADC_IRQHandler+0x514>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d12d      	bne.n	80029de <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	2b00      	cmp	r3, #0
 800298e:	d11a      	bne.n	80029c6 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800299e:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d112      	bne.n	80029de <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f043 0201 	orr.w	r2, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	641a      	str	r2, [r3, #64]	; 0x40
 80029c4:	e00b      	b.n	80029de <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f043 0210 	orr.w	r2, r3, #16
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	f043 0201 	orr.w	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f8c4 	bl	8002b6c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2260      	movs	r2, #96	; 0x60
 80029ea:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d011      	beq.n	8002a1a <HAL_ADC_IRQHandler+0x47a>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00c      	beq.n	8002a1a <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff fa85 	bl	8001f1c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2280      	movs	r2, #128	; 0x80
 8002a18:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d012      	beq.n	8002a4a <HAL_ADC_IRQHandler+0x4aa>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00d      	beq.n	8002a4a <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f8aa 	bl	8002b94 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a48:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d012      	beq.n	8002a7a <HAL_ADC_IRQHandler+0x4da>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00d      	beq.n	8002a7a <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f89c 	bl	8002ba8 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a78:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d04f      	beq.n	8002b24 <HAL_ADC_IRQHandler+0x584>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d04a      	beq.n	8002b24 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d102      	bne.n	8002a9c <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8002a96:	2301      	movs	r3, #1
 8002a98:	61fb      	str	r3, [r7, #28]
 8002a9a:	e02d      	b.n	8002af8 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aa4:	d004      	beq.n	8002ab0 <HAL_ADC_IRQHandler+0x510>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a03      	ldr	r2, [pc, #12]	; (8002ab8 <HAL_ADC_IRQHandler+0x518>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d109      	bne.n	8002ac4 <HAL_ADC_IRQHandler+0x524>
 8002ab0:	4b02      	ldr	r3, [pc, #8]	; (8002abc <HAL_ADC_IRQHandler+0x51c>)
 8002ab2:	e008      	b.n	8002ac6 <HAL_ADC_IRQHandler+0x526>
 8002ab4:	50000400 	.word	0x50000400
 8002ab8:	50000100 	.word	0x50000100
 8002abc:	50000300 	.word	0x50000300
 8002ac0:	50000700 	.word	0x50000700
 8002ac4:	4b28      	ldr	r3, [pc, #160]	; (8002b68 <HAL_ADC_IRQHandler+0x5c8>)
 8002ac6:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d109      	bne.n	8002ae8 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d10a      	bne.n	8002af8 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	61fb      	str	r3, [r7, #28]
 8002ae6:	e007      	b.n	8002af8 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002af4:	2301      	movs	r3, #1
 8002af6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d10e      	bne.n	8002b1c <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0e:	f043 0202 	orr.w	r2, r3, #2
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7ff fa0a 	bl	8001f30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2210      	movs	r2, #16
 8002b22:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d018      	beq.n	8002b60 <HAL_ADC_IRQHandler+0x5c0>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d013      	beq.n	8002b60 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b48:	f043 0208 	orr.w	r2, r3, #8
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b58:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f810 	bl	8002b80 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002b60:	bf00      	nop
 8002b62:	3720      	adds	r7, #32
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	50000700 	.word	0x50000700

08002b6c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b09b      	sub	sp, #108	; 0x6c
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x22>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e2ca      	b.n	8003174 <HAL_ADC_ConfigChannel+0x5b8>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f040 82ae 	bne.w	8003152 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d81c      	bhi.n	8002c38 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	4413      	add	r3, r2
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	461a      	mov	r2, r3
 8002c12:	231f      	movs	r3, #31
 8002c14:	4093      	lsls	r3, r2
 8002c16:	43db      	mvns	r3, r3
 8002c18:	4019      	ands	r1, r3
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	4413      	add	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	631a      	str	r2, [r3, #48]	; 0x30
 8002c36:	e063      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b09      	cmp	r3, #9
 8002c3e:	d81e      	bhi.n	8002c7e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	4413      	add	r3, r2
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	3b1e      	subs	r3, #30
 8002c54:	221f      	movs	r2, #31
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	4019      	ands	r1, r3
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	4413      	add	r3, r2
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	3b1e      	subs	r3, #30
 8002c70:	fa00 f203 	lsl.w	r2, r0, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	635a      	str	r2, [r3, #52]	; 0x34
 8002c7c:	e040      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b0e      	cmp	r3, #14
 8002c84:	d81e      	bhi.n	8002cc4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	4413      	add	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	3b3c      	subs	r3, #60	; 0x3c
 8002c9a:	221f      	movs	r2, #31
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	4019      	ands	r1, r3
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	4413      	add	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	3b3c      	subs	r3, #60	; 0x3c
 8002cb6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	639a      	str	r2, [r3, #56]	; 0x38
 8002cc2:	e01d      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4413      	add	r3, r2
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	3b5a      	subs	r3, #90	; 0x5a
 8002cd8:	221f      	movs	r2, #31
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	4019      	ands	r1, r3
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	4413      	add	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	3b5a      	subs	r3, #90	; 0x5a
 8002cf4:	fa00 f203 	lsl.w	r2, r0, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f040 80e5 	bne.w	8002eda <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b09      	cmp	r3, #9
 8002d16:	d91c      	bls.n	8002d52 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6999      	ldr	r1, [r3, #24]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	4613      	mov	r3, r2
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	4413      	add	r3, r2
 8002d28:	3b1e      	subs	r3, #30
 8002d2a:	2207      	movs	r2, #7
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	4019      	ands	r1, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	6898      	ldr	r0, [r3, #8]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	3b1e      	subs	r3, #30
 8002d44:	fa00 f203 	lsl.w	r2, r0, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	619a      	str	r2, [r3, #24]
 8002d50:	e019      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6959      	ldr	r1, [r3, #20]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	4413      	add	r3, r2
 8002d62:	2207      	movs	r2, #7
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	4019      	ands	r1, r3
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	6898      	ldr	r0, [r3, #8]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4613      	mov	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4413      	add	r3, r2
 8002d7a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	695a      	ldr	r2, [r3, #20]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	08db      	lsrs	r3, r3, #3
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d84f      	bhi.n	8002e48 <HAL_ADC_ConfigChannel+0x28c>
 8002da8:	a201      	add	r2, pc, #4	; (adr r2, 8002db0 <HAL_ADC_ConfigChannel+0x1f4>)
 8002daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dae:	bf00      	nop
 8002db0:	08002dc1 	.word	0x08002dc1
 8002db4:	08002de3 	.word	0x08002de3
 8002db8:	08002e05 	.word	0x08002e05
 8002dbc:	08002e27 	.word	0x08002e27
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dc6:	4b9a      	ldr	r3, [pc, #616]	; (8003030 <HAL_ADC_ConfigChannel+0x474>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	0691      	lsls	r1, r2, #26
 8002dd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002dde:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002de0:	e07e      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002de8:	4b91      	ldr	r3, [pc, #580]	; (8003030 <HAL_ADC_ConfigChannel+0x474>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	0691      	lsls	r1, r2, #26
 8002df2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002df4:	430a      	orrs	r2, r1
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e00:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e02:	e06d      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e0a:	4b89      	ldr	r3, [pc, #548]	; (8003030 <HAL_ADC_ConfigChannel+0x474>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	0691      	lsls	r1, r2, #26
 8002e14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e16:	430a      	orrs	r2, r1
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e22:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e24:	e05c      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e2c:	4b80      	ldr	r3, [pc, #512]	; (8003030 <HAL_ADC_ConfigChannel+0x474>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	0691      	lsls	r1, r2, #26
 8002e36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e44:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e46:	e04b      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	069b      	lsls	r3, r3, #26
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d107      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e6a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	069b      	lsls	r3, r3, #26
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d107      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e8e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	069b      	lsls	r3, r3, #26
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d107      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002eb2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	069b      	lsls	r3, r3, #26
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d10a      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ed6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002ed8:	e001      	b.n	8002ede <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002eda:	bf00      	nop
 8002edc:	e000      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002ede:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d108      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x344>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x344>
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x346>
 8002f00:	2300      	movs	r3, #0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f040 8130 	bne.w	8003168 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d00f      	beq.n	8002f30 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43da      	mvns	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	400a      	ands	r2, r1
 8002f2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002f2e:	e049      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b09      	cmp	r3, #9
 8002f50:	d91c      	bls.n	8002f8c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6999      	ldr	r1, [r3, #24]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	4413      	add	r3, r2
 8002f62:	3b1b      	subs	r3, #27
 8002f64:	2207      	movs	r2, #7
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	4019      	ands	r1, r3
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6898      	ldr	r0, [r3, #8]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	4613      	mov	r3, r2
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3b1b      	subs	r3, #27
 8002f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	619a      	str	r2, [r3, #24]
 8002f8a:	e01b      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6959      	ldr	r1, [r3, #20]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	4613      	mov	r3, r2
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	4413      	add	r3, r2
 8002f9e:	2207      	movs	r2, #7
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	4019      	ands	r1, r3
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6898      	ldr	r0, [r3, #8]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	4413      	add	r3, r2
 8002fb8:	fa00 f203 	lsl.w	r2, r0, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fcc:	d004      	beq.n	8002fd8 <HAL_ADC_ConfigChannel+0x41c>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a18      	ldr	r2, [pc, #96]	; (8003034 <HAL_ADC_ConfigChannel+0x478>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d101      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x420>
 8002fd8:	4b17      	ldr	r3, [pc, #92]	; (8003038 <HAL_ADC_ConfigChannel+0x47c>)
 8002fda:	e000      	b.n	8002fde <HAL_ADC_ConfigChannel+0x422>
 8002fdc:	4b17      	ldr	r3, [pc, #92]	; (800303c <HAL_ADC_ConfigChannel+0x480>)
 8002fde:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b10      	cmp	r3, #16
 8002fe6:	d105      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002fe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d015      	beq.n	8003020 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002ff8:	2b11      	cmp	r3, #17
 8002ffa:	d105      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002ffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00b      	beq.n	8003020 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800300c:	2b12      	cmp	r3, #18
 800300e:	f040 80ab 	bne.w	8003168 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800301a:	2b00      	cmp	r3, #0
 800301c:	f040 80a4 	bne.w	8003168 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003028:	d10a      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x484>
 800302a:	4b02      	ldr	r3, [pc, #8]	; (8003034 <HAL_ADC_ConfigChannel+0x478>)
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	e022      	b.n	8003076 <HAL_ADC_ConfigChannel+0x4ba>
 8003030:	83fff000 	.word	0x83fff000
 8003034:	50000100 	.word	0x50000100
 8003038:	50000300 	.word	0x50000300
 800303c:	50000700 	.word	0x50000700
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a4e      	ldr	r2, [pc, #312]	; (8003180 <HAL_ADC_ConfigChannel+0x5c4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d103      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x496>
 800304a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	e011      	b.n	8003076 <HAL_ADC_ConfigChannel+0x4ba>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a4b      	ldr	r2, [pc, #300]	; (8003184 <HAL_ADC_ConfigChannel+0x5c8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d102      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x4a6>
 800305c:	4b4a      	ldr	r3, [pc, #296]	; (8003188 <HAL_ADC_ConfigChannel+0x5cc>)
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	e009      	b.n	8003076 <HAL_ADC_ConfigChannel+0x4ba>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a48      	ldr	r2, [pc, #288]	; (8003188 <HAL_ADC_ConfigChannel+0x5cc>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d102      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x4b6>
 800306c:	4b45      	ldr	r3, [pc, #276]	; (8003184 <HAL_ADC_ConfigChannel+0x5c8>)
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	e001      	b.n	8003076 <HAL_ADC_ConfigChannel+0x4ba>
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	2b01      	cmp	r3, #1
 8003082:	d108      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x4da>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x4da>
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <HAL_ADC_ConfigChannel+0x4dc>
 8003096:	2300      	movs	r3, #0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d150      	bne.n	800313e <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800309c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d010      	beq.n	80030c4 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d107      	bne.n	80030be <HAL_ADC_ConfigChannel+0x502>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_ADC_ConfigChannel+0x502>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x504>
 80030be:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d13c      	bne.n	800313e <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b10      	cmp	r3, #16
 80030ca:	d11d      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x54c>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030d4:	d118      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80030d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030e0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030e2:	4b2a      	ldr	r3, [pc, #168]	; (800318c <HAL_ADC_ConfigChannel+0x5d0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a2a      	ldr	r2, [pc, #168]	; (8003190 <HAL_ADC_ConfigChannel+0x5d4>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	0c9a      	lsrs	r2, r3, #18
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030f8:	e002      	b.n	8003100 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f9      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003106:	e02e      	b.n	8003166 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b11      	cmp	r3, #17
 800310e:	d10b      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x56c>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003118:	d106      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800311a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003124:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003126:	e01e      	b.n	8003166 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b12      	cmp	r3, #18
 800312e:	d11a      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800313a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800313c:	e013      	b.n	8003166 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f043 0220 	orr.w	r2, r3, #32
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003150:	e00a      	b.n	8003168 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f043 0220 	orr.w	r2, r3, #32
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003164:	e000      	b.n	8003168 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003166:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003170:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003174:	4618      	mov	r0, r3
 8003176:	376c      	adds	r7, #108	; 0x6c
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	50000100 	.word	0x50000100
 8003184:	50000400 	.word	0x50000400
 8003188:	50000500 	.word	0x50000500
 800318c:	20000058 	.word	0x20000058
 8003190:	431bde83 	.word	0x431bde83

08003194 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003194:	b480      	push	{r7}
 8003196:	b099      	sub	sp, #100	; 0x64
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031ac:	d102      	bne.n	80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80031ae:	4b6d      	ldr	r3, [pc, #436]	; (8003364 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	e01a      	b.n	80031ea <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a6a      	ldr	r2, [pc, #424]	; (8003364 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d103      	bne.n	80031c6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80031be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031c2:	60bb      	str	r3, [r7, #8]
 80031c4:	e011      	b.n	80031ea <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a67      	ldr	r2, [pc, #412]	; (8003368 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d102      	bne.n	80031d6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80031d0:	4b66      	ldr	r3, [pc, #408]	; (800336c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80031d2:	60bb      	str	r3, [r7, #8]
 80031d4:	e009      	b.n	80031ea <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a64      	ldr	r2, [pc, #400]	; (800336c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d102      	bne.n	80031e6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80031e0:	4b61      	ldr	r3, [pc, #388]	; (8003368 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80031e2:	60bb      	str	r3, [r7, #8]
 80031e4:	e001      	b.n	80031ea <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80031e6:	2300      	movs	r3, #0
 80031e8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0b0      	b.n	8003356 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80031fe:	2302      	movs	r3, #2
 8003200:	e0a9      	b.n	8003356 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	f040 808d 	bne.w	8003334 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	2b00      	cmp	r3, #0
 8003224:	f040 8086 	bne.w	8003334 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003230:	d004      	beq.n	800323c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a4b      	ldr	r2, [pc, #300]	; (8003364 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d101      	bne.n	8003240 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800323c:	4b4c      	ldr	r3, [pc, #304]	; (8003370 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800323e:	e000      	b.n	8003242 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003240:	4b4c      	ldr	r3, [pc, #304]	; (8003374 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003242:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d040      	beq.n	80032ce <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800324c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	6859      	ldr	r1, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800325e:	035b      	lsls	r3, r3, #13
 8003260:	430b      	orrs	r3, r1
 8003262:	431a      	orrs	r2, r3
 8003264:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003266:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	2b01      	cmp	r3, #1
 8003274:	d108      	bne.n	8003288 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003288:	2300      	movs	r3, #0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d15c      	bne.n	8003348 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	2b01      	cmp	r3, #1
 8003298:	d107      	bne.n	80032aa <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80032aa:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d14b      	bne.n	8003348 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80032b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032b8:	f023 030f 	bic.w	r3, r3, #15
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	6811      	ldr	r1, [r2, #0]
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	6892      	ldr	r2, [r2, #8]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	431a      	orrs	r2, r3
 80032c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032ca:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80032cc:	e03c      	b.n	8003348 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80032ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032d8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 0303 	and.w	r3, r3, #3
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d108      	bne.n	80032fa <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80032fa:	2300      	movs	r3, #0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d123      	bne.n	8003348 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d107      	bne.n	800331c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800331c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800331e:	2b00      	cmp	r3, #0
 8003320:	d112      	bne.n	8003348 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800332a:	f023 030f 	bic.w	r3, r3, #15
 800332e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003330:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003332:	e009      	b.n	8003348 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	f043 0220 	orr.w	r2, r3, #32
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003346:	e000      	b.n	800334a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003348:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003352:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003356:	4618      	mov	r0, r3
 8003358:	3764      	adds	r7, #100	; 0x64
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	50000100 	.word	0x50000100
 8003368:	50000400 	.word	0x50000400
 800336c:	50000500 	.word	0x50000500
 8003370:	50000300 	.word	0x50000300
 8003374:	50000700 	.word	0x50000700

08003378 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b01      	cmp	r3, #1
 8003390:	d108      	bne.n	80033a4 <ADC_Enable+0x2c>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <ADC_Enable+0x2c>
 80033a0:	2301      	movs	r3, #1
 80033a2:	e000      	b.n	80033a6 <ADC_Enable+0x2e>
 80033a4:	2300      	movs	r3, #0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d143      	bne.n	8003432 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	4b22      	ldr	r3, [pc, #136]	; (800343c <ADC_Enable+0xc4>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00d      	beq.n	80033d4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	f043 0210 	orr.w	r2, r3, #16
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c8:	f043 0201 	orr.w	r2, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e02f      	b.n	8003434 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80033e4:	f7fe fd8e 	bl	8001f04 <HAL_GetTick>
 80033e8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80033ea:	e01b      	b.n	8003424 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033ec:	f7fe fd8a 	bl	8001f04 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d914      	bls.n	8003424 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b01      	cmp	r3, #1
 8003406:	d00d      	beq.n	8003424 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	f043 0210 	orr.w	r2, r3, #16
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003418:	f043 0201 	orr.w	r2, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e007      	b.n	8003434 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b01      	cmp	r3, #1
 8003430:	d1dc      	bne.n	80033ec <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	8000003f 	.word	0x8000003f

08003440 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d108      	bne.n	800346c <ADC_Disable+0x2c>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <ADC_Disable+0x2c>
 8003468:	2301      	movs	r3, #1
 800346a:	e000      	b.n	800346e <ADC_Disable+0x2e>
 800346c:	2300      	movs	r3, #0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d047      	beq.n	8003502 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 030d 	and.w	r3, r3, #13
 800347c:	2b01      	cmp	r3, #1
 800347e:	d10f      	bne.n	80034a0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0202 	orr.w	r2, r2, #2
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2203      	movs	r2, #3
 8003496:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003498:	f7fe fd34 	bl	8001f04 <HAL_GetTick>
 800349c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800349e:	e029      	b.n	80034f4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	f043 0210 	orr.w	r2, r3, #16
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b0:	f043 0201 	orr.w	r2, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e023      	b.n	8003504 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034bc:	f7fe fd22 	bl	8001f04 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d914      	bls.n	80034f4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d10d      	bne.n	80034f4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034dc:	f043 0210 	orr.w	r2, r3, #16
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e8:	f043 0201 	orr.w	r2, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e007      	b.n	8003504 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d0dc      	beq.n	80034bc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800351c:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <__NVIC_SetPriorityGrouping+0x44>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003528:	4013      	ands	r3, r2
 800352a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800353c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800353e:	4a04      	ldr	r2, [pc, #16]	; (8003550 <__NVIC_SetPriorityGrouping+0x44>)
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	60d3      	str	r3, [r2, #12]
}
 8003544:	bf00      	nop
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003558:	4b04      	ldr	r3, [pc, #16]	; (800356c <__NVIC_GetPriorityGrouping+0x18>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	0a1b      	lsrs	r3, r3, #8
 800355e:	f003 0307 	and.w	r3, r3, #7
}
 8003562:	4618      	mov	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800357a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357e:	2b00      	cmp	r3, #0
 8003580:	db0b      	blt.n	800359a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	f003 021f 	and.w	r2, r3, #31
 8003588:	4907      	ldr	r1, [pc, #28]	; (80035a8 <__NVIC_EnableIRQ+0x38>)
 800358a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	2001      	movs	r0, #1
 8003592:	fa00 f202 	lsl.w	r2, r0, r2
 8003596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	e000e100 	.word	0xe000e100

080035ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	6039      	str	r1, [r7, #0]
 80035b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	db0a      	blt.n	80035d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	490c      	ldr	r1, [pc, #48]	; (80035f8 <__NVIC_SetPriority+0x4c>)
 80035c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ca:	0112      	lsls	r2, r2, #4
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	440b      	add	r3, r1
 80035d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035d4:	e00a      	b.n	80035ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	4908      	ldr	r1, [pc, #32]	; (80035fc <__NVIC_SetPriority+0x50>)
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	3b04      	subs	r3, #4
 80035e4:	0112      	lsls	r2, r2, #4
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	440b      	add	r3, r1
 80035ea:	761a      	strb	r2, [r3, #24]
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	e000e100 	.word	0xe000e100
 80035fc:	e000ed00 	.word	0xe000ed00

08003600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003600:	b480      	push	{r7}
 8003602:	b089      	sub	sp, #36	; 0x24
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f1c3 0307 	rsb	r3, r3, #7
 800361a:	2b04      	cmp	r3, #4
 800361c:	bf28      	it	cs
 800361e:	2304      	movcs	r3, #4
 8003620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3304      	adds	r3, #4
 8003626:	2b06      	cmp	r3, #6
 8003628:	d902      	bls.n	8003630 <NVIC_EncodePriority+0x30>
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	3b03      	subs	r3, #3
 800362e:	e000      	b.n	8003632 <NVIC_EncodePriority+0x32>
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003634:	f04f 32ff 	mov.w	r2, #4294967295
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43da      	mvns	r2, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	401a      	ands	r2, r3
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003648:	f04f 31ff 	mov.w	r1, #4294967295
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	fa01 f303 	lsl.w	r3, r1, r3
 8003652:	43d9      	mvns	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003658:	4313      	orrs	r3, r2
         );
}
 800365a:	4618      	mov	r0, r3
 800365c:	3724      	adds	r7, #36	; 0x24
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
	...

08003668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3b01      	subs	r3, #1
 8003674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003678:	d301      	bcc.n	800367e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800367a:	2301      	movs	r3, #1
 800367c:	e00f      	b.n	800369e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800367e:	4a0a      	ldr	r2, [pc, #40]	; (80036a8 <SysTick_Config+0x40>)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3b01      	subs	r3, #1
 8003684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003686:	210f      	movs	r1, #15
 8003688:	f04f 30ff 	mov.w	r0, #4294967295
 800368c:	f7ff ff8e 	bl	80035ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003690:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <SysTick_Config+0x40>)
 8003692:	2200      	movs	r2, #0
 8003694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003696:	4b04      	ldr	r3, [pc, #16]	; (80036a8 <SysTick_Config+0x40>)
 8003698:	2207      	movs	r2, #7
 800369a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	e000e010 	.word	0xe000e010

080036ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff ff29 	bl	800350c <__NVIC_SetPriorityGrouping>
}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b086      	sub	sp, #24
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	4603      	mov	r3, r0
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
 80036ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036d4:	f7ff ff3e 	bl	8003554 <__NVIC_GetPriorityGrouping>
 80036d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	68b9      	ldr	r1, [r7, #8]
 80036de:	6978      	ldr	r0, [r7, #20]
 80036e0:	f7ff ff8e 	bl	8003600 <NVIC_EncodePriority>
 80036e4:	4602      	mov	r2, r0
 80036e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ea:	4611      	mov	r1, r2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff ff5d 	bl	80035ac <__NVIC_SetPriority>
}
 80036f2:	bf00      	nop
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	4603      	mov	r3, r0
 8003702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff ff31 	bl	8003570 <__NVIC_EnableIRQ>
}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff ffa2 	bl	8003668 <SysTick_Config>
 8003724:	4603      	mov	r3, r0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800373c:	2b02      	cmp	r3, #2
 800373e:	d008      	beq.n	8003752 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2204      	movs	r2, #4
 8003744:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e020      	b.n	8003794 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 020e 	bic.w	r2, r2, #14
 8003760:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0201 	bic.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377a:	2101      	movs	r1, #1
 800377c:	fa01 f202 	lsl.w	r2, r1, r2
 8003780:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d005      	beq.n	80037c2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2204      	movs	r2, #4
 80037ba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
 80037c0:	e027      	b.n	8003812 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 020e 	bic.w	r2, r2, #14
 80037d0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0201 	bic.w	r2, r2, #1
 80037e0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ea:	2101      	movs	r1, #1
 80037ec:	fa01 f202 	lsl.w	r2, r1, r2
 80037f0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	4798      	blx	r3
    } 
  }
  return status;
 8003812:	7bfb      	ldrb	r3, [r7, #15]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800382a:	e154      	b.n	8003ad6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	2101      	movs	r1, #1
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	fa01 f303 	lsl.w	r3, r1, r3
 8003838:	4013      	ands	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 8146 	beq.w	8003ad0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	2b01      	cmp	r3, #1
 800384e:	d005      	beq.n	800385c <HAL_GPIO_Init+0x40>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f003 0303 	and.w	r3, r3, #3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d130      	bne.n	80038be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	2203      	movs	r2, #3
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4013      	ands	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4313      	orrs	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003892:	2201      	movs	r2, #1
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43db      	mvns	r3, r3
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4013      	ands	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	091b      	lsrs	r3, r3, #4
 80038a8:	f003 0201 	and.w	r2, r3, #1
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d017      	beq.n	80038fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	2203      	movs	r2, #3
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43db      	mvns	r3, r3
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4013      	ands	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d123      	bne.n	800394e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	08da      	lsrs	r2, r3, #3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3208      	adds	r2, #8
 800390e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003912:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	220f      	movs	r2, #15
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43db      	mvns	r3, r3
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4013      	ands	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	691a      	ldr	r2, [r3, #16]
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	4313      	orrs	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	08da      	lsrs	r2, r3, #3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3208      	adds	r2, #8
 8003948:	6939      	ldr	r1, [r7, #16]
 800394a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	2203      	movs	r2, #3
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43db      	mvns	r3, r3
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4013      	ands	r3, r2
 8003964:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f003 0203 	and.w	r2, r3, #3
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 80a0 	beq.w	8003ad0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003990:	4b58      	ldr	r3, [pc, #352]	; (8003af4 <HAL_GPIO_Init+0x2d8>)
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	4a57      	ldr	r2, [pc, #348]	; (8003af4 <HAL_GPIO_Init+0x2d8>)
 8003996:	f043 0301 	orr.w	r3, r3, #1
 800399a:	6193      	str	r3, [r2, #24]
 800399c:	4b55      	ldr	r3, [pc, #340]	; (8003af4 <HAL_GPIO_Init+0x2d8>)
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039a8:	4a53      	ldr	r2, [pc, #332]	; (8003af8 <HAL_GPIO_Init+0x2dc>)
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	089b      	lsrs	r3, r3, #2
 80039ae:	3302      	adds	r3, #2
 80039b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	220f      	movs	r2, #15
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4013      	ands	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039d2:	d019      	beq.n	8003a08 <HAL_GPIO_Init+0x1ec>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a49      	ldr	r2, [pc, #292]	; (8003afc <HAL_GPIO_Init+0x2e0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d013      	beq.n	8003a04 <HAL_GPIO_Init+0x1e8>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a48      	ldr	r2, [pc, #288]	; (8003b00 <HAL_GPIO_Init+0x2e4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d00d      	beq.n	8003a00 <HAL_GPIO_Init+0x1e4>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a47      	ldr	r2, [pc, #284]	; (8003b04 <HAL_GPIO_Init+0x2e8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d007      	beq.n	80039fc <HAL_GPIO_Init+0x1e0>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a46      	ldr	r2, [pc, #280]	; (8003b08 <HAL_GPIO_Init+0x2ec>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d101      	bne.n	80039f8 <HAL_GPIO_Init+0x1dc>
 80039f4:	2304      	movs	r3, #4
 80039f6:	e008      	b.n	8003a0a <HAL_GPIO_Init+0x1ee>
 80039f8:	2305      	movs	r3, #5
 80039fa:	e006      	b.n	8003a0a <HAL_GPIO_Init+0x1ee>
 80039fc:	2303      	movs	r3, #3
 80039fe:	e004      	b.n	8003a0a <HAL_GPIO_Init+0x1ee>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e002      	b.n	8003a0a <HAL_GPIO_Init+0x1ee>
 8003a04:	2301      	movs	r3, #1
 8003a06:	e000      	b.n	8003a0a <HAL_GPIO_Init+0x1ee>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	f002 0203 	and.w	r2, r2, #3
 8003a10:	0092      	lsls	r2, r2, #2
 8003a12:	4093      	lsls	r3, r2
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a1a:	4937      	ldr	r1, [pc, #220]	; (8003af8 <HAL_GPIO_Init+0x2dc>)
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	089b      	lsrs	r3, r3, #2
 8003a20:	3302      	adds	r3, #2
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a28:	4b38      	ldr	r3, [pc, #224]	; (8003b0c <HAL_GPIO_Init+0x2f0>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	43db      	mvns	r3, r3
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4013      	ands	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a4c:	4a2f      	ldr	r2, [pc, #188]	; (8003b0c <HAL_GPIO_Init+0x2f0>)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a52:	4b2e      	ldr	r3, [pc, #184]	; (8003b0c <HAL_GPIO_Init+0x2f0>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a76:	4a25      	ldr	r2, [pc, #148]	; (8003b0c <HAL_GPIO_Init+0x2f0>)
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a7c:	4b23      	ldr	r3, [pc, #140]	; (8003b0c <HAL_GPIO_Init+0x2f0>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	43db      	mvns	r3, r3
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003aa0:	4a1a      	ldr	r2, [pc, #104]	; (8003b0c <HAL_GPIO_Init+0x2f0>)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003aa6:	4b19      	ldr	r3, [pc, #100]	; (8003b0c <HAL_GPIO_Init+0x2f0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003aca:	4a10      	ldr	r2, [pc, #64]	; (8003b0c <HAL_GPIO_Init+0x2f0>)
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f47f aea3 	bne.w	800382c <HAL_GPIO_Init+0x10>
  }
}
 8003ae6:	bf00      	nop
 8003ae8:	bf00      	nop
 8003aea:	371c      	adds	r7, #28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	40021000 	.word	0x40021000
 8003af8:	40010000 	.word	0x40010000
 8003afc:	48000400 	.word	0x48000400
 8003b00:	48000800 	.word	0x48000800
 8003b04:	48000c00 	.word	0x48000c00
 8003b08:	48001000 	.word	0x48001000
 8003b0c:	40010400 	.word	0x40010400

08003b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	807b      	strh	r3, [r7, #2]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b20:	787b      	ldrb	r3, [r7, #1]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b26:	887a      	ldrh	r2, [r7, #2]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b2c:	e002      	b.n	8003b34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b2e:	887a      	ldrh	r2, [r7, #2]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b4a:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b4c:	695a      	ldr	r2, [r3, #20]
 8003b4e:	88fb      	ldrh	r3, [r7, #6]
 8003b50:	4013      	ands	r3, r2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d006      	beq.n	8003b64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b56:	4a05      	ldr	r2, [pc, #20]	; (8003b6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b58:	88fb      	ldrh	r3, [r7, #6]
 8003b5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b5c:	88fb      	ldrh	r3, [r7, #6]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fd fbec 	bl	800133c <HAL_GPIO_EXTI_Callback>
  }
}
 8003b64:	bf00      	nop
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40010400 	.word	0x40010400

08003b70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e081      	b.n	8003c86 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d106      	bne.n	8003b9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7fd fd24 	bl	80015e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2224      	movs	r2, #36	; 0x24
 8003ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0201 	bic.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d107      	bne.n	8003bea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003be6:	609a      	str	r2, [r3, #8]
 8003be8:	e006      	b.n	8003bf8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003bf6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d104      	bne.n	8003c0a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691a      	ldr	r2, [r3, #16]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69d9      	ldr	r1, [r3, #28]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1a      	ldr	r2, [r3, #32]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d138      	bne.n	8003d16 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e032      	b.n	8003d18 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2224      	movs	r2, #36	; 0x24
 8003cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0201 	bic.w	r2, r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ce0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6819      	ldr	r1, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0201 	orr.w	r2, r2, #1
 8003d00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	e000      	b.n	8003d18 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d16:	2302      	movs	r3, #2
  }
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d139      	bne.n	8003dae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e033      	b.n	8003db0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2224      	movs	r2, #36	; 0x24
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0201 	bic.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d76:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	021b      	lsls	r3, r3, #8
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f042 0201 	orr.w	r2, r2, #1
 8003d98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	e000      	b.n	8003db0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003dae:	2302      	movs	r3, #2
  }
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dbe:	b08b      	sub	sp, #44	; 0x2c
 8003dc0:	af06      	add	r7, sp, #24
 8003dc2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e0c4      	b.n	8003f58 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d106      	bne.n	8003de8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fd fd3e 	bl	8001864 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2203      	movs	r2, #3
 8003dec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f004 fad1 	bl	800839c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	73fb      	strb	r3, [r7, #15]
 8003dfe:	e040      	b.n	8003e82 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	440b      	add	r3, r1
 8003e10:	3301      	adds	r3, #1
 8003e12:	2201      	movs	r2, #1
 8003e14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	1c5a      	adds	r2, r3, #1
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	440b      	add	r3, r1
 8003e26:	7bfa      	ldrb	r2, [r7, #15]
 8003e28:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	4613      	mov	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	440b      	add	r3, r1
 8003e3a:	3303      	adds	r3, #3
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e40:	7bfa      	ldrb	r2, [r7, #15]
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	440b      	add	r3, r1
 8003e4e:	3338      	adds	r3, #56	; 0x38
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e54:	7bfa      	ldrb	r2, [r7, #15]
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4413      	add	r3, r2
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	440b      	add	r3, r1
 8003e62:	333c      	adds	r3, #60	; 0x3c
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e68:	7bfa      	ldrb	r2, [r7, #15]
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	440b      	add	r3, r1
 8003e76:	3340      	adds	r3, #64	; 0x40
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	73fb      	strb	r3, [r7, #15]
 8003e82:	7bfa      	ldrb	r2, [r7, #15]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d3b9      	bcc.n	8003e00 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	73fb      	strb	r3, [r7, #15]
 8003e90:	e044      	b.n	8003f1c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e92:	7bfa      	ldrb	r2, [r7, #15]
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	440b      	add	r3, r1
 8003ea0:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ea8:	7bfa      	ldrb	r2, [r7, #15]
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	440b      	add	r3, r1
 8003eb6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003eba:	7bfa      	ldrb	r2, [r7, #15]
 8003ebc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ebe:	7bfa      	ldrb	r2, [r7, #15]
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	440b      	add	r3, r1
 8003ecc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ed4:	7bfa      	ldrb	r2, [r7, #15]
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	440b      	add	r3, r1
 8003ee2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003eea:	7bfa      	ldrb	r2, [r7, #15]
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	440b      	add	r3, r1
 8003ef8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f00:	7bfa      	ldrb	r2, [r7, #15]
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	4613      	mov	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	440b      	add	r3, r1
 8003f0e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	73fb      	strb	r3, [r7, #15]
 8003f1c:	7bfa      	ldrb	r2, [r7, #15]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d3b5      	bcc.n	8003e92 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	603b      	str	r3, [r7, #0]
 8003f2c:	687e      	ldr	r6, [r7, #4]
 8003f2e:	466d      	mov	r5, sp
 8003f30:	f106 0410 	add.w	r4, r6, #16
 8003f34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	602b      	str	r3, [r5, #0]
 8003f3c:	1d33      	adds	r3, r6, #4
 8003f3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f40:	6838      	ldr	r0, [r7, #0]
 8003f42:	f004 fa46 	bl	80083d2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f70:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d102      	bne.n	8003f86 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	f001 b823 	b.w	8004fcc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 817d 	beq.w	8004296 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003f9c:	4bbc      	ldr	r3, [pc, #752]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 030c 	and.w	r3, r3, #12
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d00c      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fa8:	4bb9      	ldr	r3, [pc, #740]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 030c 	and.w	r3, r3, #12
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d15c      	bne.n	800406e <HAL_RCC_OscConfig+0x10e>
 8003fb4:	4bb6      	ldr	r3, [pc, #728]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc0:	d155      	bne.n	800406e <HAL_RCC_OscConfig+0x10e>
 8003fc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fc6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003fce:	fa93 f3a3 	rbit	r3, r3
 8003fd2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fd6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fda:	fab3 f383 	clz	r3, r3
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	f043 0301 	orr.w	r3, r3, #1
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d102      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x94>
 8003fee:	4ba8      	ldr	r3, [pc, #672]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	e015      	b.n	8004020 <HAL_RCC_OscConfig+0xc0>
 8003ff4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ff8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004000:	fa93 f3a3 	rbit	r3, r3
 8004004:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004008:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800400c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004010:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004014:	fa93 f3a3 	rbit	r3, r3
 8004018:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800401c:	4b9c      	ldr	r3, [pc, #624]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004024:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004028:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800402c:	fa92 f2a2 	rbit	r2, r2
 8004030:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004034:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004038:	fab2 f282 	clz	r2, r2
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	f042 0220 	orr.w	r2, r2, #32
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	f002 021f 	and.w	r2, r2, #31
 8004048:	2101      	movs	r1, #1
 800404a:	fa01 f202 	lsl.w	r2, r1, r2
 800404e:	4013      	ands	r3, r2
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 811f 	beq.w	8004294 <HAL_RCC_OscConfig+0x334>
 8004056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	f040 8116 	bne.w	8004294 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	f000 bfaf 	b.w	8004fcc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800406e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004072:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800407e:	d106      	bne.n	800408e <HAL_RCC_OscConfig+0x12e>
 8004080:	4b83      	ldr	r3, [pc, #524]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a82      	ldr	r2, [pc, #520]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 8004086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800408a:	6013      	str	r3, [r2, #0]
 800408c:	e036      	b.n	80040fc <HAL_RCC_OscConfig+0x19c>
 800408e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004092:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10c      	bne.n	80040b8 <HAL_RCC_OscConfig+0x158>
 800409e:	4b7c      	ldr	r3, [pc, #496]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a7b      	ldr	r2, [pc, #492]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 80040a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	4b79      	ldr	r3, [pc, #484]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a78      	ldr	r2, [pc, #480]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 80040b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	e021      	b.n	80040fc <HAL_RCC_OscConfig+0x19c>
 80040b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040c8:	d10c      	bne.n	80040e4 <HAL_RCC_OscConfig+0x184>
 80040ca:	4b71      	ldr	r3, [pc, #452]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a70      	ldr	r2, [pc, #448]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 80040d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	4b6e      	ldr	r3, [pc, #440]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a6d      	ldr	r2, [pc, #436]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 80040dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	e00b      	b.n	80040fc <HAL_RCC_OscConfig+0x19c>
 80040e4:	4b6a      	ldr	r3, [pc, #424]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a69      	ldr	r2, [pc, #420]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 80040ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	4b67      	ldr	r3, [pc, #412]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a66      	ldr	r2, [pc, #408]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 80040f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040fa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80040fc:	4b64      	ldr	r3, [pc, #400]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004100:	f023 020f 	bic.w	r2, r3, #15
 8004104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004108:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	495f      	ldr	r1, [pc, #380]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 8004112:	4313      	orrs	r3, r2
 8004114:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800411a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d059      	beq.n	80041da <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004126:	f7fd feed 	bl	8001f04 <HAL_GetTick>
 800412a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412e:	e00a      	b.n	8004146 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004130:	f7fd fee8 	bl	8001f04 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b64      	cmp	r3, #100	; 0x64
 800413e:	d902      	bls.n	8004146 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	f000 bf43 	b.w	8004fcc <HAL_RCC_OscConfig+0x106c>
 8004146:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800414a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004152:	fa93 f3a3 	rbit	r3, r3
 8004156:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800415a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415e:	fab3 f383 	clz	r3, r3
 8004162:	b2db      	uxtb	r3, r3
 8004164:	095b      	lsrs	r3, r3, #5
 8004166:	b2db      	uxtb	r3, r3
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b01      	cmp	r3, #1
 8004170:	d102      	bne.n	8004178 <HAL_RCC_OscConfig+0x218>
 8004172:	4b47      	ldr	r3, [pc, #284]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	e015      	b.n	80041a4 <HAL_RCC_OscConfig+0x244>
 8004178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800417c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004180:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004184:	fa93 f3a3 	rbit	r3, r3
 8004188:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800418c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004190:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004194:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004198:	fa93 f3a3 	rbit	r3, r3
 800419c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80041a0:	4b3b      	ldr	r3, [pc, #236]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041a8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80041ac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80041b0:	fa92 f2a2 	rbit	r2, r2
 80041b4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80041b8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80041bc:	fab2 f282 	clz	r2, r2
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	f042 0220 	orr.w	r2, r2, #32
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	f002 021f 	and.w	r2, r2, #31
 80041cc:	2101      	movs	r1, #1
 80041ce:	fa01 f202 	lsl.w	r2, r1, r2
 80041d2:	4013      	ands	r3, r2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0ab      	beq.n	8004130 <HAL_RCC_OscConfig+0x1d0>
 80041d8:	e05d      	b.n	8004296 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041da:	f7fd fe93 	bl	8001f04 <HAL_GetTick>
 80041de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041e2:	e00a      	b.n	80041fa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041e4:	f7fd fe8e 	bl	8001f04 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b64      	cmp	r3, #100	; 0x64
 80041f2:	d902      	bls.n	80041fa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	f000 bee9 	b.w	8004fcc <HAL_RCC_OscConfig+0x106c>
 80041fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041fe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004202:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004206:	fa93 f3a3 	rbit	r3, r3
 800420a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800420e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004212:	fab3 f383 	clz	r3, r3
 8004216:	b2db      	uxtb	r3, r3
 8004218:	095b      	lsrs	r3, r3, #5
 800421a:	b2db      	uxtb	r3, r3
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b01      	cmp	r3, #1
 8004224:	d102      	bne.n	800422c <HAL_RCC_OscConfig+0x2cc>
 8004226:	4b1a      	ldr	r3, [pc, #104]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	e015      	b.n	8004258 <HAL_RCC_OscConfig+0x2f8>
 800422c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004230:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004234:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004238:	fa93 f3a3 	rbit	r3, r3
 800423c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004240:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004244:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004248:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800424c:	fa93 f3a3 	rbit	r3, r3
 8004250:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004254:	4b0e      	ldr	r3, [pc, #56]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800425c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004260:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004264:	fa92 f2a2 	rbit	r2, r2
 8004268:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800426c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004270:	fab2 f282 	clz	r2, r2
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	f042 0220 	orr.w	r2, r2, #32
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	f002 021f 	and.w	r2, r2, #31
 8004280:	2101      	movs	r1, #1
 8004282:	fa01 f202 	lsl.w	r2, r1, r2
 8004286:	4013      	ands	r3, r2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1ab      	bne.n	80041e4 <HAL_RCC_OscConfig+0x284>
 800428c:	e003      	b.n	8004296 <HAL_RCC_OscConfig+0x336>
 800428e:	bf00      	nop
 8004290:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800429a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 817d 	beq.w	80045a6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80042ac:	4ba6      	ldr	r3, [pc, #664]	; (8004548 <HAL_RCC_OscConfig+0x5e8>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 030c 	and.w	r3, r3, #12
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00b      	beq.n	80042d0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80042b8:	4ba3      	ldr	r3, [pc, #652]	; (8004548 <HAL_RCC_OscConfig+0x5e8>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 030c 	and.w	r3, r3, #12
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d172      	bne.n	80043aa <HAL_RCC_OscConfig+0x44a>
 80042c4:	4ba0      	ldr	r3, [pc, #640]	; (8004548 <HAL_RCC_OscConfig+0x5e8>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d16c      	bne.n	80043aa <HAL_RCC_OscConfig+0x44a>
 80042d0:	2302      	movs	r3, #2
 80042d2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80042da:	fa93 f3a3 	rbit	r3, r3
 80042de:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80042e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042e6:	fab3 f383 	clz	r3, r3
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	f043 0301 	orr.w	r3, r3, #1
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d102      	bne.n	8004300 <HAL_RCC_OscConfig+0x3a0>
 80042fa:	4b93      	ldr	r3, [pc, #588]	; (8004548 <HAL_RCC_OscConfig+0x5e8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	e013      	b.n	8004328 <HAL_RCC_OscConfig+0x3c8>
 8004300:	2302      	movs	r3, #2
 8004302:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004306:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800430a:	fa93 f3a3 	rbit	r3, r3
 800430e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004312:	2302      	movs	r3, #2
 8004314:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004318:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800431c:	fa93 f3a3 	rbit	r3, r3
 8004320:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004324:	4b88      	ldr	r3, [pc, #544]	; (8004548 <HAL_RCC_OscConfig+0x5e8>)
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	2202      	movs	r2, #2
 800432a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800432e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004332:	fa92 f2a2 	rbit	r2, r2
 8004336:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800433a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800433e:	fab2 f282 	clz	r2, r2
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	f042 0220 	orr.w	r2, r2, #32
 8004348:	b2d2      	uxtb	r2, r2
 800434a:	f002 021f 	and.w	r2, r2, #31
 800434e:	2101      	movs	r1, #1
 8004350:	fa01 f202 	lsl.w	r2, r1, r2
 8004354:	4013      	ands	r3, r2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <HAL_RCC_OscConfig+0x410>
 800435a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800435e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d002      	beq.n	8004370 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	f000 be2e 	b.w	8004fcc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004370:	4b75      	ldr	r3, [pc, #468]	; (8004548 <HAL_RCC_OscConfig+0x5e8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800437c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	21f8      	movs	r1, #248	; 0xf8
 8004386:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800438e:	fa91 f1a1 	rbit	r1, r1
 8004392:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004396:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800439a:	fab1 f181 	clz	r1, r1
 800439e:	b2c9      	uxtb	r1, r1
 80043a0:	408b      	lsls	r3, r1
 80043a2:	4969      	ldr	r1, [pc, #420]	; (8004548 <HAL_RCC_OscConfig+0x5e8>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043a8:	e0fd      	b.n	80045a6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 8088 	beq.w	80044cc <HAL_RCC_OscConfig+0x56c>
 80043bc:	2301      	movs	r3, #1
 80043be:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80043c6:	fa93 f3a3 	rbit	r3, r3
 80043ca:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80043ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043d2:	fab3 f383 	clz	r3, r3
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80043dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	461a      	mov	r2, r3
 80043e4:	2301      	movs	r3, #1
 80043e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e8:	f7fd fd8c 	bl	8001f04 <HAL_GetTick>
 80043ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f0:	e00a      	b.n	8004408 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043f2:	f7fd fd87 	bl	8001f04 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d902      	bls.n	8004408 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	f000 bde2 	b.w	8004fcc <HAL_RCC_OscConfig+0x106c>
 8004408:	2302      	movs	r3, #2
 800440a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004412:	fa93 f3a3 	rbit	r3, r3
 8004416:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800441a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800441e:	fab3 f383 	clz	r3, r3
 8004422:	b2db      	uxtb	r3, r3
 8004424:	095b      	lsrs	r3, r3, #5
 8004426:	b2db      	uxtb	r3, r3
 8004428:	f043 0301 	orr.w	r3, r3, #1
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b01      	cmp	r3, #1
 8004430:	d102      	bne.n	8004438 <HAL_RCC_OscConfig+0x4d8>
 8004432:	4b45      	ldr	r3, [pc, #276]	; (8004548 <HAL_RCC_OscConfig+0x5e8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	e013      	b.n	8004460 <HAL_RCC_OscConfig+0x500>
 8004438:	2302      	movs	r3, #2
 800443a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004442:	fa93 f3a3 	rbit	r3, r3
 8004446:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800444a:	2302      	movs	r3, #2
 800444c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004450:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004454:	fa93 f3a3 	rbit	r3, r3
 8004458:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800445c:	4b3a      	ldr	r3, [pc, #232]	; (8004548 <HAL_RCC_OscConfig+0x5e8>)
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	2202      	movs	r2, #2
 8004462:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004466:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800446a:	fa92 f2a2 	rbit	r2, r2
 800446e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004472:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004476:	fab2 f282 	clz	r2, r2
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	f042 0220 	orr.w	r2, r2, #32
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	f002 021f 	and.w	r2, r2, #31
 8004486:	2101      	movs	r1, #1
 8004488:	fa01 f202 	lsl.w	r2, r1, r2
 800448c:	4013      	ands	r3, r2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0af      	beq.n	80043f2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004492:	4b2d      	ldr	r3, [pc, #180]	; (8004548 <HAL_RCC_OscConfig+0x5e8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800449a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800449e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	21f8      	movs	r1, #248	; 0xf8
 80044a8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ac:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80044b0:	fa91 f1a1 	rbit	r1, r1
 80044b4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80044b8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80044bc:	fab1 f181 	clz	r1, r1
 80044c0:	b2c9      	uxtb	r1, r1
 80044c2:	408b      	lsls	r3, r1
 80044c4:	4920      	ldr	r1, [pc, #128]	; (8004548 <HAL_RCC_OscConfig+0x5e8>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	600b      	str	r3, [r1, #0]
 80044ca:	e06c      	b.n	80045a6 <HAL_RCC_OscConfig+0x646>
 80044cc:	2301      	movs	r3, #1
 80044ce:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80044d6:	fa93 f3a3 	rbit	r3, r3
 80044da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80044de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044e2:	fab3 f383 	clz	r3, r3
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	461a      	mov	r2, r3
 80044f4:	2300      	movs	r3, #0
 80044f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f8:	f7fd fd04 	bl	8001f04 <HAL_GetTick>
 80044fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004500:	e00a      	b.n	8004518 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004502:	f7fd fcff 	bl	8001f04 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d902      	bls.n	8004518 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	f000 bd5a 	b.w	8004fcc <HAL_RCC_OscConfig+0x106c>
 8004518:	2302      	movs	r3, #2
 800451a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004522:	fa93 f3a3 	rbit	r3, r3
 8004526:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800452a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800452e:	fab3 f383 	clz	r3, r3
 8004532:	b2db      	uxtb	r3, r3
 8004534:	095b      	lsrs	r3, r3, #5
 8004536:	b2db      	uxtb	r3, r3
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b01      	cmp	r3, #1
 8004540:	d104      	bne.n	800454c <HAL_RCC_OscConfig+0x5ec>
 8004542:	4b01      	ldr	r3, [pc, #4]	; (8004548 <HAL_RCC_OscConfig+0x5e8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	e015      	b.n	8004574 <HAL_RCC_OscConfig+0x614>
 8004548:	40021000 	.word	0x40021000
 800454c:	2302      	movs	r3, #2
 800454e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004552:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004556:	fa93 f3a3 	rbit	r3, r3
 800455a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800455e:	2302      	movs	r3, #2
 8004560:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004564:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004568:	fa93 f3a3 	rbit	r3, r3
 800456c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004570:	4bc8      	ldr	r3, [pc, #800]	; (8004894 <HAL_RCC_OscConfig+0x934>)
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	2202      	movs	r2, #2
 8004576:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800457a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800457e:	fa92 f2a2 	rbit	r2, r2
 8004582:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004586:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800458a:	fab2 f282 	clz	r2, r2
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	f042 0220 	orr.w	r2, r2, #32
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	f002 021f 	and.w	r2, r2, #31
 800459a:	2101      	movs	r1, #1
 800459c:	fa01 f202 	lsl.w	r2, r1, r2
 80045a0:	4013      	ands	r3, r2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1ad      	bne.n	8004502 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 8110 	beq.w	80047dc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d079      	beq.n	80046c0 <HAL_RCC_OscConfig+0x760>
 80045cc:	2301      	movs	r3, #1
 80045ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80045d6:	fa93 f3a3 	rbit	r3, r3
 80045da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80045de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045e2:	fab3 f383 	clz	r3, r3
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	461a      	mov	r2, r3
 80045ea:	4bab      	ldr	r3, [pc, #684]	; (8004898 <HAL_RCC_OscConfig+0x938>)
 80045ec:	4413      	add	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	461a      	mov	r2, r3
 80045f2:	2301      	movs	r3, #1
 80045f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f6:	f7fd fc85 	bl	8001f04 <HAL_GetTick>
 80045fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045fe:	e00a      	b.n	8004616 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004600:	f7fd fc80 	bl	8001f04 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d902      	bls.n	8004616 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	f000 bcdb 	b.w	8004fcc <HAL_RCC_OscConfig+0x106c>
 8004616:	2302      	movs	r3, #2
 8004618:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004620:	fa93 f3a3 	rbit	r3, r3
 8004624:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800462c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004630:	2202      	movs	r2, #2
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004638:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	fa93 f2a3 	rbit	r2, r3
 8004642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004646:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004654:	2202      	movs	r2, #2
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800465c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	fa93 f2a3 	rbit	r2, r3
 8004666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800466a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800466e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004670:	4b88      	ldr	r3, [pc, #544]	; (8004894 <HAL_RCC_OscConfig+0x934>)
 8004672:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004678:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800467c:	2102      	movs	r1, #2
 800467e:	6019      	str	r1, [r3, #0]
 8004680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004684:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	fa93 f1a3 	rbit	r1, r3
 800468e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004692:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004696:	6019      	str	r1, [r3, #0]
  return result;
 8004698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800469c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	fab3 f383 	clz	r3, r3
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	f003 031f 	and.w	r3, r3, #31
 80046b2:	2101      	movs	r1, #1
 80046b4:	fa01 f303 	lsl.w	r3, r1, r3
 80046b8:	4013      	ands	r3, r2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0a0      	beq.n	8004600 <HAL_RCC_OscConfig+0x6a0>
 80046be:	e08d      	b.n	80047dc <HAL_RCC_OscConfig+0x87c>
 80046c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80046c8:	2201      	movs	r2, #1
 80046ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	fa93 f2a3 	rbit	r2, r3
 80046da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046de:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80046e2:	601a      	str	r2, [r3, #0]
  return result;
 80046e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80046ec:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ee:	fab3 f383 	clz	r3, r3
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	461a      	mov	r2, r3
 80046f6:	4b68      	ldr	r3, [pc, #416]	; (8004898 <HAL_RCC_OscConfig+0x938>)
 80046f8:	4413      	add	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	461a      	mov	r2, r3
 80046fe:	2300      	movs	r3, #0
 8004700:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004702:	f7fd fbff 	bl	8001f04 <HAL_GetTick>
 8004706:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800470a:	e00a      	b.n	8004722 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800470c:	f7fd fbfa 	bl	8001f04 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d902      	bls.n	8004722 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	f000 bc55 	b.w	8004fcc <HAL_RCC_OscConfig+0x106c>
 8004722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004726:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800472a:	2202      	movs	r2, #2
 800472c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004732:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	fa93 f2a3 	rbit	r2, r3
 800473c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004740:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800474a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800474e:	2202      	movs	r2, #2
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004756:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	fa93 f2a3 	rbit	r2, r3
 8004760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004764:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800476e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004772:	2202      	movs	r2, #2
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800477a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	fa93 f2a3 	rbit	r2, r3
 8004784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004788:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800478c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800478e:	4b41      	ldr	r3, [pc, #260]	; (8004894 <HAL_RCC_OscConfig+0x934>)
 8004790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004796:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800479a:	2102      	movs	r1, #2
 800479c:	6019      	str	r1, [r3, #0]
 800479e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047a2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	fa93 f1a3 	rbit	r1, r3
 80047ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80047b4:	6019      	str	r1, [r3, #0]
  return result;
 80047b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	fab3 f383 	clz	r3, r3
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	f003 031f 	and.w	r3, r3, #31
 80047d0:	2101      	movs	r1, #1
 80047d2:	fa01 f303 	lsl.w	r3, r1, r3
 80047d6:	4013      	ands	r3, r2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d197      	bne.n	800470c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 81a1 	beq.w	8004b34 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047f2:	2300      	movs	r3, #0
 80047f4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047f8:	4b26      	ldr	r3, [pc, #152]	; (8004894 <HAL_RCC_OscConfig+0x934>)
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d116      	bne.n	8004832 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004804:	4b23      	ldr	r3, [pc, #140]	; (8004894 <HAL_RCC_OscConfig+0x934>)
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	4a22      	ldr	r2, [pc, #136]	; (8004894 <HAL_RCC_OscConfig+0x934>)
 800480a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800480e:	61d3      	str	r3, [r2, #28]
 8004810:	4b20      	ldr	r3, [pc, #128]	; (8004894 <HAL_RCC_OscConfig+0x934>)
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800481c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004826:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800482a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800482c:	2301      	movs	r3, #1
 800482e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004832:	4b1a      	ldr	r3, [pc, #104]	; (800489c <HAL_RCC_OscConfig+0x93c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483a:	2b00      	cmp	r3, #0
 800483c:	d11a      	bne.n	8004874 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800483e:	4b17      	ldr	r3, [pc, #92]	; (800489c <HAL_RCC_OscConfig+0x93c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a16      	ldr	r2, [pc, #88]	; (800489c <HAL_RCC_OscConfig+0x93c>)
 8004844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004848:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800484a:	f7fd fb5b 	bl	8001f04 <HAL_GetTick>
 800484e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004852:	e009      	b.n	8004868 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004854:	f7fd fb56 	bl	8001f04 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b64      	cmp	r3, #100	; 0x64
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e3b1      	b.n	8004fcc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004868:	4b0c      	ldr	r3, [pc, #48]	; (800489c <HAL_RCC_OscConfig+0x93c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0ef      	beq.n	8004854 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004878:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d10d      	bne.n	80048a0 <HAL_RCC_OscConfig+0x940>
 8004884:	4b03      	ldr	r3, [pc, #12]	; (8004894 <HAL_RCC_OscConfig+0x934>)
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	4a02      	ldr	r2, [pc, #8]	; (8004894 <HAL_RCC_OscConfig+0x934>)
 800488a:	f043 0301 	orr.w	r3, r3, #1
 800488e:	6213      	str	r3, [r2, #32]
 8004890:	e03c      	b.n	800490c <HAL_RCC_OscConfig+0x9ac>
 8004892:	bf00      	nop
 8004894:	40021000 	.word	0x40021000
 8004898:	10908120 	.word	0x10908120
 800489c:	40007000 	.word	0x40007000
 80048a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10c      	bne.n	80048ca <HAL_RCC_OscConfig+0x96a>
 80048b0:	4bc1      	ldr	r3, [pc, #772]	; (8004bb8 <HAL_RCC_OscConfig+0xc58>)
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	4ac0      	ldr	r2, [pc, #768]	; (8004bb8 <HAL_RCC_OscConfig+0xc58>)
 80048b6:	f023 0301 	bic.w	r3, r3, #1
 80048ba:	6213      	str	r3, [r2, #32]
 80048bc:	4bbe      	ldr	r3, [pc, #760]	; (8004bb8 <HAL_RCC_OscConfig+0xc58>)
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	4abd      	ldr	r2, [pc, #756]	; (8004bb8 <HAL_RCC_OscConfig+0xc58>)
 80048c2:	f023 0304 	bic.w	r3, r3, #4
 80048c6:	6213      	str	r3, [r2, #32]
 80048c8:	e020      	b.n	800490c <HAL_RCC_OscConfig+0x9ac>
 80048ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	2b05      	cmp	r3, #5
 80048d8:	d10c      	bne.n	80048f4 <HAL_RCC_OscConfig+0x994>
 80048da:	4bb7      	ldr	r3, [pc, #732]	; (8004bb8 <HAL_RCC_OscConfig+0xc58>)
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	4ab6      	ldr	r2, [pc, #728]	; (8004bb8 <HAL_RCC_OscConfig+0xc58>)
 80048e0:	f043 0304 	orr.w	r3, r3, #4
 80048e4:	6213      	str	r3, [r2, #32]
 80048e6:	4bb4      	ldr	r3, [pc, #720]	; (8004bb8 <HAL_RCC_OscConfig+0xc58>)
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	4ab3      	ldr	r2, [pc, #716]	; (8004bb8 <HAL_RCC_OscConfig+0xc58>)
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	6213      	str	r3, [r2, #32]
 80048f2:	e00b      	b.n	800490c <HAL_RCC_OscConfig+0x9ac>
 80048f4:	4bb0      	ldr	r3, [pc, #704]	; (8004bb8 <HAL_RCC_OscConfig+0xc58>)
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	4aaf      	ldr	r2, [pc, #700]	; (8004bb8 <HAL_RCC_OscConfig+0xc58>)
 80048fa:	f023 0301 	bic.w	r3, r3, #1
 80048fe:	6213      	str	r3, [r2, #32]
 8004900:	4bad      	ldr	r3, [pc, #692]	; (8004bb8 <HAL_RCC_OscConfig+0xc58>)
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	4aac      	ldr	r2, [pc, #688]	; (8004bb8 <HAL_RCC_OscConfig+0xc58>)
 8004906:	f023 0304 	bic.w	r3, r3, #4
 800490a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800490c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004910:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8081 	beq.w	8004a20 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800491e:	f7fd faf1 	bl	8001f04 <HAL_GetTick>
 8004922:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004926:	e00b      	b.n	8004940 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004928:	f7fd faec 	bl	8001f04 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	f241 3288 	movw	r2, #5000	; 0x1388
 8004938:	4293      	cmp	r3, r2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e345      	b.n	8004fcc <HAL_RCC_OscConfig+0x106c>
 8004940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004944:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004948:	2202      	movs	r2, #2
 800494a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004950:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	fa93 f2a3 	rbit	r2, r3
 800495a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800495e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004968:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800496c:	2202      	movs	r2, #2
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004974:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	fa93 f2a3 	rbit	r2, r3
 800497e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004982:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004986:	601a      	str	r2, [r3, #0]
  return result;
 8004988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800498c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004990:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004992:	fab3 f383 	clz	r3, r3
 8004996:	b2db      	uxtb	r3, r3
 8004998:	095b      	lsrs	r3, r3, #5
 800499a:	b2db      	uxtb	r3, r3
 800499c:	f043 0302 	orr.w	r3, r3, #2
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d102      	bne.n	80049ac <HAL_RCC_OscConfig+0xa4c>
 80049a6:	4b84      	ldr	r3, [pc, #528]	; (8004bb8 <HAL_RCC_OscConfig+0xc58>)
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	e013      	b.n	80049d4 <HAL_RCC_OscConfig+0xa74>
 80049ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049b0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80049b4:	2202      	movs	r2, #2
 80049b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049bc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	fa93 f2a3 	rbit	r2, r3
 80049c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ca:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	4b79      	ldr	r3, [pc, #484]	; (8004bb8 <HAL_RCC_OscConfig+0xc58>)
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049d8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80049dc:	2102      	movs	r1, #2
 80049de:	6011      	str	r1, [r2, #0]
 80049e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049e4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80049e8:	6812      	ldr	r2, [r2, #0]
 80049ea:	fa92 f1a2 	rbit	r1, r2
 80049ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049f2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80049f6:	6011      	str	r1, [r2, #0]
  return result;
 80049f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049fc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004a00:	6812      	ldr	r2, [r2, #0]
 8004a02:	fab2 f282 	clz	r2, r2
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a0c:	b2d2      	uxtb	r2, r2
 8004a0e:	f002 021f 	and.w	r2, r2, #31
 8004a12:	2101      	movs	r1, #1
 8004a14:	fa01 f202 	lsl.w	r2, r1, r2
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d084      	beq.n	8004928 <HAL_RCC_OscConfig+0x9c8>
 8004a1e:	e07f      	b.n	8004b20 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a20:	f7fd fa70 	bl	8001f04 <HAL_GetTick>
 8004a24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a28:	e00b      	b.n	8004a42 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a2a:	f7fd fa6b 	bl	8001f04 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e2c4      	b.n	8004fcc <HAL_RCC_OscConfig+0x106c>
 8004a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a46:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a52:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	fa93 f2a3 	rbit	r2, r3
 8004a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a60:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a6a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004a6e:	2202      	movs	r2, #2
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a76:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	fa93 f2a3 	rbit	r2, r3
 8004a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a84:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004a88:	601a      	str	r2, [r3, #0]
  return result;
 8004a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a8e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004a92:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a94:	fab3 f383 	clz	r3, r3
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	f043 0302 	orr.w	r3, r3, #2
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d102      	bne.n	8004aae <HAL_RCC_OscConfig+0xb4e>
 8004aa8:	4b43      	ldr	r3, [pc, #268]	; (8004bb8 <HAL_RCC_OscConfig+0xc58>)
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	e013      	b.n	8004ad6 <HAL_RCC_OscConfig+0xb76>
 8004aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ab2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004abe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	fa93 f2a3 	rbit	r2, r3
 8004ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004acc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	4b39      	ldr	r3, [pc, #228]	; (8004bb8 <HAL_RCC_OscConfig+0xc58>)
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ada:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004ade:	2102      	movs	r1, #2
 8004ae0:	6011      	str	r1, [r2, #0]
 8004ae2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ae6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004aea:	6812      	ldr	r2, [r2, #0]
 8004aec:	fa92 f1a2 	rbit	r1, r2
 8004af0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004af4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004af8:	6011      	str	r1, [r2, #0]
  return result;
 8004afa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004afe:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	fab2 f282 	clz	r2, r2
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	f002 021f 	and.w	r2, r2, #31
 8004b14:	2101      	movs	r1, #1
 8004b16:	fa01 f202 	lsl.w	r2, r1, r2
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d184      	bne.n	8004a2a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b20:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d105      	bne.n	8004b34 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b28:	4b23      	ldr	r3, [pc, #140]	; (8004bb8 <HAL_RCC_OscConfig+0xc58>)
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	4a22      	ldr	r2, [pc, #136]	; (8004bb8 <HAL_RCC_OscConfig+0xc58>)
 8004b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b32:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 8242 	beq.w	8004fca <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b46:	4b1c      	ldr	r3, [pc, #112]	; (8004bb8 <HAL_RCC_OscConfig+0xc58>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f003 030c 	and.w	r3, r3, #12
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	f000 8213 	beq.w	8004f7a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	f040 8162 	bne.w	8004e2a <HAL_RCC_OscConfig+0xeca>
 8004b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b6a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004b6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b78:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	fa93 f2a3 	rbit	r2, r3
 8004b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b86:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004b8a:	601a      	str	r2, [r3, #0]
  return result;
 8004b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b90:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004b94:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b96:	fab3 f383 	clz	r3, r3
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ba0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	2300      	movs	r3, #0
 8004baa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bac:	f7fd f9aa 	bl	8001f04 <HAL_GetTick>
 8004bb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bb4:	e00c      	b.n	8004bd0 <HAL_RCC_OscConfig+0xc70>
 8004bb6:	bf00      	nop
 8004bb8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bbc:	f7fd f9a2 	bl	8001f04 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e1fd      	b.n	8004fcc <HAL_RCC_OscConfig+0x106c>
 8004bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bd4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004bd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	fa93 f2a3 	rbit	r2, r3
 8004bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bf0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004bf4:	601a      	str	r2, [r3, #0]
  return result;
 8004bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bfa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004bfe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c00:	fab3 f383 	clz	r3, r3
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	095b      	lsrs	r3, r3, #5
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	f043 0301 	orr.w	r3, r3, #1
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d102      	bne.n	8004c1a <HAL_RCC_OscConfig+0xcba>
 8004c14:	4bb0      	ldr	r3, [pc, #704]	; (8004ed8 <HAL_RCC_OscConfig+0xf78>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	e027      	b.n	8004c6a <HAL_RCC_OscConfig+0xd0a>
 8004c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c1e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004c22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c2c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	fa93 f2a3 	rbit	r2, r3
 8004c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c3a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c44:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004c48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c52:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	fa93 f2a3 	rbit	r2, r3
 8004c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c60:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	4b9c      	ldr	r3, [pc, #624]	; (8004ed8 <HAL_RCC_OscConfig+0xf78>)
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c6e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004c72:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004c76:	6011      	str	r1, [r2, #0]
 8004c78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c7c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004c80:	6812      	ldr	r2, [r2, #0]
 8004c82:	fa92 f1a2 	rbit	r1, r2
 8004c86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c8a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004c8e:	6011      	str	r1, [r2, #0]
  return result;
 8004c90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c94:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004c98:	6812      	ldr	r2, [r2, #0]
 8004c9a:	fab2 f282 	clz	r2, r2
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	f042 0220 	orr.w	r2, r2, #32
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	f002 021f 	and.w	r2, r2, #31
 8004caa:	2101      	movs	r1, #1
 8004cac:	fa01 f202 	lsl.w	r2, r1, r2
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d182      	bne.n	8004bbc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cb6:	4b88      	ldr	r3, [pc, #544]	; (8004ed8 <HAL_RCC_OscConfig+0xf78>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	430b      	orrs	r3, r1
 8004cd8:	497f      	ldr	r1, [pc, #508]	; (8004ed8 <HAL_RCC_OscConfig+0xf78>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	604b      	str	r3, [r1, #4]
 8004cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ce2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004ce6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cf0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	fa93 f2a3 	rbit	r2, r3
 8004cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cfe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004d02:	601a      	str	r2, [r3, #0]
  return result;
 8004d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d08:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004d0c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d0e:	fab3 f383 	clz	r3, r3
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	461a      	mov	r2, r3
 8004d20:	2301      	movs	r3, #1
 8004d22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d24:	f7fd f8ee 	bl	8001f04 <HAL_GetTick>
 8004d28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d2c:	e009      	b.n	8004d42 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d2e:	f7fd f8e9 	bl	8001f04 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e144      	b.n	8004fcc <HAL_RCC_OscConfig+0x106c>
 8004d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d46:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004d4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d54:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	fa93 f2a3 	rbit	r2, r3
 8004d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d62:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004d66:	601a      	str	r2, [r3, #0]
  return result;
 8004d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d6c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004d70:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d72:	fab3 f383 	clz	r3, r3
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	095b      	lsrs	r3, r3, #5
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	f043 0301 	orr.w	r3, r3, #1
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d102      	bne.n	8004d8c <HAL_RCC_OscConfig+0xe2c>
 8004d86:	4b54      	ldr	r3, [pc, #336]	; (8004ed8 <HAL_RCC_OscConfig+0xf78>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	e027      	b.n	8004ddc <HAL_RCC_OscConfig+0xe7c>
 8004d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d90:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004d94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d9e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	fa93 f2a3 	rbit	r2, r3
 8004da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004db6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004dba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dc4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	fa93 f2a3 	rbit	r2, r3
 8004dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	4b3f      	ldr	r3, [pc, #252]	; (8004ed8 <HAL_RCC_OscConfig+0xf78>)
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004de0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004de4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004de8:	6011      	str	r1, [r2, #0]
 8004dea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004dee:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004df2:	6812      	ldr	r2, [r2, #0]
 8004df4:	fa92 f1a2 	rbit	r1, r2
 8004df8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004dfc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004e00:	6011      	str	r1, [r2, #0]
  return result;
 8004e02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e06:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004e0a:	6812      	ldr	r2, [r2, #0]
 8004e0c:	fab2 f282 	clz	r2, r2
 8004e10:	b2d2      	uxtb	r2, r2
 8004e12:	f042 0220 	orr.w	r2, r2, #32
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	f002 021f 	and.w	r2, r2, #31
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8004e22:	4013      	ands	r3, r2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d082      	beq.n	8004d2e <HAL_RCC_OscConfig+0xdce>
 8004e28:	e0cf      	b.n	8004fca <HAL_RCC_OscConfig+0x106a>
 8004e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e2e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004e32:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e3c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	fa93 f2a3 	rbit	r2, r3
 8004e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e4a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004e4e:	601a      	str	r2, [r3, #0]
  return result;
 8004e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e54:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004e58:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e5a:	fab3 f383 	clz	r3, r3
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e70:	f7fd f848 	bl	8001f04 <HAL_GetTick>
 8004e74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e78:	e009      	b.n	8004e8e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e7a:	f7fd f843 	bl	8001f04 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e09e      	b.n	8004fcc <HAL_RCC_OscConfig+0x106c>
 8004e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e92:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004e96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ea0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	fa93 f2a3 	rbit	r2, r3
 8004eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eae:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004eb2:	601a      	str	r2, [r3, #0]
  return result;
 8004eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eb8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004ebc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ebe:	fab3 f383 	clz	r3, r3
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	095b      	lsrs	r3, r3, #5
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	f043 0301 	orr.w	r3, r3, #1
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d104      	bne.n	8004edc <HAL_RCC_OscConfig+0xf7c>
 8004ed2:	4b01      	ldr	r3, [pc, #4]	; (8004ed8 <HAL_RCC_OscConfig+0xf78>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	e029      	b.n	8004f2c <HAL_RCC_OscConfig+0xfcc>
 8004ed8:	40021000 	.word	0x40021000
 8004edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004ee4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	fa93 f2a3 	rbit	r2, r3
 8004ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004efc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f06:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004f0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f14:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	fa93 f2a3 	rbit	r2, r3
 8004f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f22:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	4b2b      	ldr	r3, [pc, #172]	; (8004fd8 <HAL_RCC_OscConfig+0x1078>)
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f30:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004f34:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f38:	6011      	str	r1, [r2, #0]
 8004f3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f3e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004f42:	6812      	ldr	r2, [r2, #0]
 8004f44:	fa92 f1a2 	rbit	r1, r2
 8004f48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f4c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004f50:	6011      	str	r1, [r2, #0]
  return result;
 8004f52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f56:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004f5a:	6812      	ldr	r2, [r2, #0]
 8004f5c:	fab2 f282 	clz	r2, r2
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	f042 0220 	orr.w	r2, r2, #32
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	f002 021f 	and.w	r2, r2, #31
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f72:	4013      	ands	r3, r2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d180      	bne.n	8004e7a <HAL_RCC_OscConfig+0xf1a>
 8004f78:	e027      	b.n	8004fca <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d101      	bne.n	8004f8e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e01e      	b.n	8004fcc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f8e:	4b12      	ldr	r3, [pc, #72]	; (8004fd8 <HAL_RCC_OscConfig+0x1078>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004f96:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004f9a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d10b      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004fae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004fb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d001      	beq.n	8004fca <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e000      	b.n	8004fcc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	40021000 	.word	0x40021000

08004fdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b09e      	sub	sp, #120	; 0x78
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e162      	b.n	80052ba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ff4:	4b90      	ldr	r3, [pc, #576]	; (8005238 <HAL_RCC_ClockConfig+0x25c>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d910      	bls.n	8005024 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005002:	4b8d      	ldr	r3, [pc, #564]	; (8005238 <HAL_RCC_ClockConfig+0x25c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f023 0207 	bic.w	r2, r3, #7
 800500a:	498b      	ldr	r1, [pc, #556]	; (8005238 <HAL_RCC_ClockConfig+0x25c>)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	4313      	orrs	r3, r2
 8005010:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005012:	4b89      	ldr	r3, [pc, #548]	; (8005238 <HAL_RCC_ClockConfig+0x25c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	429a      	cmp	r2, r3
 800501e:	d001      	beq.n	8005024 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e14a      	b.n	80052ba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d008      	beq.n	8005042 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005030:	4b82      	ldr	r3, [pc, #520]	; (800523c <HAL_RCC_ClockConfig+0x260>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	497f      	ldr	r1, [pc, #508]	; (800523c <HAL_RCC_ClockConfig+0x260>)
 800503e:	4313      	orrs	r3, r2
 8005040:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 80dc 	beq.w	8005208 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d13c      	bne.n	80050d2 <HAL_RCC_ClockConfig+0xf6>
 8005058:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800505c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005060:	fa93 f3a3 	rbit	r3, r3
 8005064:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005068:	fab3 f383 	clz	r3, r3
 800506c:	b2db      	uxtb	r3, r3
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	b2db      	uxtb	r3, r3
 8005072:	f043 0301 	orr.w	r3, r3, #1
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b01      	cmp	r3, #1
 800507a:	d102      	bne.n	8005082 <HAL_RCC_ClockConfig+0xa6>
 800507c:	4b6f      	ldr	r3, [pc, #444]	; (800523c <HAL_RCC_ClockConfig+0x260>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	e00f      	b.n	80050a2 <HAL_RCC_ClockConfig+0xc6>
 8005082:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005086:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005088:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800508a:	fa93 f3a3 	rbit	r3, r3
 800508e:	667b      	str	r3, [r7, #100]	; 0x64
 8005090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005094:	663b      	str	r3, [r7, #96]	; 0x60
 8005096:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005098:	fa93 f3a3 	rbit	r3, r3
 800509c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800509e:	4b67      	ldr	r3, [pc, #412]	; (800523c <HAL_RCC_ClockConfig+0x260>)
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050a6:	65ba      	str	r2, [r7, #88]	; 0x58
 80050a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050aa:	fa92 f2a2 	rbit	r2, r2
 80050ae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80050b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050b2:	fab2 f282 	clz	r2, r2
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	f042 0220 	orr.w	r2, r2, #32
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	f002 021f 	and.w	r2, r2, #31
 80050c2:	2101      	movs	r1, #1
 80050c4:	fa01 f202 	lsl.w	r2, r1, r2
 80050c8:	4013      	ands	r3, r2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d17b      	bne.n	80051c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e0f3      	b.n	80052ba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d13c      	bne.n	8005154 <HAL_RCC_ClockConfig+0x178>
 80050da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050e2:	fa93 f3a3 	rbit	r3, r3
 80050e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80050e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ea:	fab3 f383 	clz	r3, r3
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	095b      	lsrs	r3, r3, #5
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	f043 0301 	orr.w	r3, r3, #1
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d102      	bne.n	8005104 <HAL_RCC_ClockConfig+0x128>
 80050fe:	4b4f      	ldr	r3, [pc, #316]	; (800523c <HAL_RCC_ClockConfig+0x260>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	e00f      	b.n	8005124 <HAL_RCC_ClockConfig+0x148>
 8005104:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005108:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800510c:	fa93 f3a3 	rbit	r3, r3
 8005110:	647b      	str	r3, [r7, #68]	; 0x44
 8005112:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005116:	643b      	str	r3, [r7, #64]	; 0x40
 8005118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800511a:	fa93 f3a3 	rbit	r3, r3
 800511e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005120:	4b46      	ldr	r3, [pc, #280]	; (800523c <HAL_RCC_ClockConfig+0x260>)
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005128:	63ba      	str	r2, [r7, #56]	; 0x38
 800512a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800512c:	fa92 f2a2 	rbit	r2, r2
 8005130:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005134:	fab2 f282 	clz	r2, r2
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	f042 0220 	orr.w	r2, r2, #32
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	f002 021f 	and.w	r2, r2, #31
 8005144:	2101      	movs	r1, #1
 8005146:	fa01 f202 	lsl.w	r2, r1, r2
 800514a:	4013      	ands	r3, r2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d13a      	bne.n	80051c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e0b2      	b.n	80052ba <HAL_RCC_ClockConfig+0x2de>
 8005154:	2302      	movs	r3, #2
 8005156:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515a:	fa93 f3a3 	rbit	r3, r3
 800515e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005162:	fab3 f383 	clz	r3, r3
 8005166:	b2db      	uxtb	r3, r3
 8005168:	095b      	lsrs	r3, r3, #5
 800516a:	b2db      	uxtb	r3, r3
 800516c:	f043 0301 	orr.w	r3, r3, #1
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b01      	cmp	r3, #1
 8005174:	d102      	bne.n	800517c <HAL_RCC_ClockConfig+0x1a0>
 8005176:	4b31      	ldr	r3, [pc, #196]	; (800523c <HAL_RCC_ClockConfig+0x260>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	e00d      	b.n	8005198 <HAL_RCC_ClockConfig+0x1bc>
 800517c:	2302      	movs	r3, #2
 800517e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005182:	fa93 f3a3 	rbit	r3, r3
 8005186:	627b      	str	r3, [r7, #36]	; 0x24
 8005188:	2302      	movs	r3, #2
 800518a:	623b      	str	r3, [r7, #32]
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	fa93 f3a3 	rbit	r3, r3
 8005192:	61fb      	str	r3, [r7, #28]
 8005194:	4b29      	ldr	r3, [pc, #164]	; (800523c <HAL_RCC_ClockConfig+0x260>)
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	2202      	movs	r2, #2
 800519a:	61ba      	str	r2, [r7, #24]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	fa92 f2a2 	rbit	r2, r2
 80051a2:	617a      	str	r2, [r7, #20]
  return result;
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	fab2 f282 	clz	r2, r2
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	f042 0220 	orr.w	r2, r2, #32
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	f002 021f 	and.w	r2, r2, #31
 80051b6:	2101      	movs	r1, #1
 80051b8:	fa01 f202 	lsl.w	r2, r1, r2
 80051bc:	4013      	ands	r3, r2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e079      	b.n	80052ba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051c6:	4b1d      	ldr	r3, [pc, #116]	; (800523c <HAL_RCC_ClockConfig+0x260>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f023 0203 	bic.w	r2, r3, #3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	491a      	ldr	r1, [pc, #104]	; (800523c <HAL_RCC_ClockConfig+0x260>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051d8:	f7fc fe94 	bl	8001f04 <HAL_GetTick>
 80051dc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051de:	e00a      	b.n	80051f6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051e0:	f7fc fe90 	bl	8001f04 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e061      	b.n	80052ba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051f6:	4b11      	ldr	r3, [pc, #68]	; (800523c <HAL_RCC_ClockConfig+0x260>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f003 020c 	and.w	r2, r3, #12
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	429a      	cmp	r2, r3
 8005206:	d1eb      	bne.n	80051e0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005208:	4b0b      	ldr	r3, [pc, #44]	; (8005238 <HAL_RCC_ClockConfig+0x25c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	429a      	cmp	r2, r3
 8005214:	d214      	bcs.n	8005240 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005216:	4b08      	ldr	r3, [pc, #32]	; (8005238 <HAL_RCC_ClockConfig+0x25c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f023 0207 	bic.w	r2, r3, #7
 800521e:	4906      	ldr	r1, [pc, #24]	; (8005238 <HAL_RCC_ClockConfig+0x25c>)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	4313      	orrs	r3, r2
 8005224:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005226:	4b04      	ldr	r3, [pc, #16]	; (8005238 <HAL_RCC_ClockConfig+0x25c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0307 	and.w	r3, r3, #7
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d005      	beq.n	8005240 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e040      	b.n	80052ba <HAL_RCC_ClockConfig+0x2de>
 8005238:	40022000 	.word	0x40022000
 800523c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b00      	cmp	r3, #0
 800524a:	d008      	beq.n	800525e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800524c:	4b1d      	ldr	r3, [pc, #116]	; (80052c4 <HAL_RCC_ClockConfig+0x2e8>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	491a      	ldr	r1, [pc, #104]	; (80052c4 <HAL_RCC_ClockConfig+0x2e8>)
 800525a:	4313      	orrs	r3, r2
 800525c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0308 	and.w	r3, r3, #8
 8005266:	2b00      	cmp	r3, #0
 8005268:	d009      	beq.n	800527e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800526a:	4b16      	ldr	r3, [pc, #88]	; (80052c4 <HAL_RCC_ClockConfig+0x2e8>)
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	4912      	ldr	r1, [pc, #72]	; (80052c4 <HAL_RCC_ClockConfig+0x2e8>)
 800527a:	4313      	orrs	r3, r2
 800527c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800527e:	f000 f829 	bl	80052d4 <HAL_RCC_GetSysClockFreq>
 8005282:	4601      	mov	r1, r0
 8005284:	4b0f      	ldr	r3, [pc, #60]	; (80052c4 <HAL_RCC_ClockConfig+0x2e8>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800528c:	22f0      	movs	r2, #240	; 0xf0
 800528e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	fa92 f2a2 	rbit	r2, r2
 8005296:	60fa      	str	r2, [r7, #12]
  return result;
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	fab2 f282 	clz	r2, r2
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	40d3      	lsrs	r3, r2
 80052a2:	4a09      	ldr	r2, [pc, #36]	; (80052c8 <HAL_RCC_ClockConfig+0x2ec>)
 80052a4:	5cd3      	ldrb	r3, [r2, r3]
 80052a6:	fa21 f303 	lsr.w	r3, r1, r3
 80052aa:	4a08      	ldr	r2, [pc, #32]	; (80052cc <HAL_RCC_ClockConfig+0x2f0>)
 80052ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80052ae:	4b08      	ldr	r3, [pc, #32]	; (80052d0 <HAL_RCC_ClockConfig+0x2f4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fc fde2 	bl	8001e7c <HAL_InitTick>
  
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3778      	adds	r7, #120	; 0x78
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40021000 	.word	0x40021000
 80052c8:	0800c8bc 	.word	0x0800c8bc
 80052cc:	20000058 	.word	0x20000058
 80052d0:	2000005c 	.word	0x2000005c

080052d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b08b      	sub	sp, #44	; 0x2c
 80052d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	61fb      	str	r3, [r7, #28]
 80052de:	2300      	movs	r3, #0
 80052e0:	61bb      	str	r3, [r7, #24]
 80052e2:	2300      	movs	r3, #0
 80052e4:	627b      	str	r3, [r7, #36]	; 0x24
 80052e6:	2300      	movs	r3, #0
 80052e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80052ee:	4b29      	ldr	r3, [pc, #164]	; (8005394 <HAL_RCC_GetSysClockFreq+0xc0>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	f003 030c 	and.w	r3, r3, #12
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d002      	beq.n	8005304 <HAL_RCC_GetSysClockFreq+0x30>
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d003      	beq.n	800530a <HAL_RCC_GetSysClockFreq+0x36>
 8005302:	e03c      	b.n	800537e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005304:	4b24      	ldr	r3, [pc, #144]	; (8005398 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005306:	623b      	str	r3, [r7, #32]
      break;
 8005308:	e03c      	b.n	8005384 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005310:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005314:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	fa92 f2a2 	rbit	r2, r2
 800531c:	607a      	str	r2, [r7, #4]
  return result;
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	fab2 f282 	clz	r2, r2
 8005324:	b2d2      	uxtb	r2, r2
 8005326:	40d3      	lsrs	r3, r2
 8005328:	4a1c      	ldr	r2, [pc, #112]	; (800539c <HAL_RCC_GetSysClockFreq+0xc8>)
 800532a:	5cd3      	ldrb	r3, [r2, r3]
 800532c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800532e:	4b19      	ldr	r3, [pc, #100]	; (8005394 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005332:	f003 030f 	and.w	r3, r3, #15
 8005336:	220f      	movs	r2, #15
 8005338:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	fa92 f2a2 	rbit	r2, r2
 8005340:	60fa      	str	r2, [r7, #12]
  return result;
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	fab2 f282 	clz	r2, r2
 8005348:	b2d2      	uxtb	r2, r2
 800534a:	40d3      	lsrs	r3, r2
 800534c:	4a14      	ldr	r2, [pc, #80]	; (80053a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800534e:	5cd3      	ldrb	r3, [r2, r3]
 8005350:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d008      	beq.n	800536e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800535c:	4a0e      	ldr	r2, [pc, #56]	; (8005398 <HAL_RCC_GetSysClockFreq+0xc4>)
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	fbb2 f2f3 	udiv	r2, r2, r3
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	fb02 f303 	mul.w	r3, r2, r3
 800536a:	627b      	str	r3, [r7, #36]	; 0x24
 800536c:	e004      	b.n	8005378 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	4a0c      	ldr	r2, [pc, #48]	; (80053a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005372:	fb02 f303 	mul.w	r3, r2, r3
 8005376:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	623b      	str	r3, [r7, #32]
      break;
 800537c:	e002      	b.n	8005384 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800537e:	4b06      	ldr	r3, [pc, #24]	; (8005398 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005380:	623b      	str	r3, [r7, #32]
      break;
 8005382:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005384:	6a3b      	ldr	r3, [r7, #32]
}
 8005386:	4618      	mov	r0, r3
 8005388:	372c      	adds	r7, #44	; 0x2c
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40021000 	.word	0x40021000
 8005398:	007a1200 	.word	0x007a1200
 800539c:	0800c8d4 	.word	0x0800c8d4
 80053a0:	0800c8e4 	.word	0x0800c8e4
 80053a4:	003d0900 	.word	0x003d0900

080053a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053ac:	4b03      	ldr	r3, [pc, #12]	; (80053bc <HAL_RCC_GetHCLKFreq+0x14>)
 80053ae:	681b      	ldr	r3, [r3, #0]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	20000058 	.word	0x20000058

080053c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80053c6:	f7ff ffef 	bl	80053a8 <HAL_RCC_GetHCLKFreq>
 80053ca:	4601      	mov	r1, r0
 80053cc:	4b0b      	ldr	r3, [pc, #44]	; (80053fc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053d4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80053d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	fa92 f2a2 	rbit	r2, r2
 80053e0:	603a      	str	r2, [r7, #0]
  return result;
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	fab2 f282 	clz	r2, r2
 80053e8:	b2d2      	uxtb	r2, r2
 80053ea:	40d3      	lsrs	r3, r2
 80053ec:	4a04      	ldr	r2, [pc, #16]	; (8005400 <HAL_RCC_GetPCLK1Freq+0x40>)
 80053ee:	5cd3      	ldrb	r3, [r2, r3]
 80053f0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80053f4:	4618      	mov	r0, r3
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	40021000 	.word	0x40021000
 8005400:	0800c8cc 	.word	0x0800c8cc

08005404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800540a:	f7ff ffcd 	bl	80053a8 <HAL_RCC_GetHCLKFreq>
 800540e:	4601      	mov	r1, r0
 8005410:	4b0b      	ldr	r3, [pc, #44]	; (8005440 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005418:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800541c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	fa92 f2a2 	rbit	r2, r2
 8005424:	603a      	str	r2, [r7, #0]
  return result;
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	fab2 f282 	clz	r2, r2
 800542c:	b2d2      	uxtb	r2, r2
 800542e:	40d3      	lsrs	r3, r2
 8005430:	4a04      	ldr	r2, [pc, #16]	; (8005444 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005432:	5cd3      	ldrb	r3, [r2, r3]
 8005434:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005438:	4618      	mov	r0, r3
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40021000 	.word	0x40021000
 8005444:	0800c8cc 	.word	0x0800c8cc

08005448 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b092      	sub	sp, #72	; 0x48
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005458:	2300      	movs	r3, #0
 800545a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 80d4 	beq.w	8005614 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800546c:	4b4e      	ldr	r3, [pc, #312]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10e      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005478:	4b4b      	ldr	r3, [pc, #300]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	4a4a      	ldr	r2, [pc, #296]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800547e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005482:	61d3      	str	r3, [r2, #28]
 8005484:	4b48      	ldr	r3, [pc, #288]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800548c:	60bb      	str	r3, [r7, #8]
 800548e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005490:	2301      	movs	r3, #1
 8005492:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005496:	4b45      	ldr	r3, [pc, #276]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d118      	bne.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054a2:	4b42      	ldr	r3, [pc, #264]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a41      	ldr	r2, [pc, #260]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054ae:	f7fc fd29 	bl	8001f04 <HAL_GetTick>
 80054b2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b4:	e008      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054b6:	f7fc fd25 	bl	8001f04 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	2b64      	cmp	r3, #100	; 0x64
 80054c2:	d901      	bls.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e169      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c8:	4b38      	ldr	r3, [pc, #224]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0f0      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054d4:	4b34      	ldr	r3, [pc, #208]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 8084 	beq.w	80055ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d07c      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054f4:	4b2c      	ldr	r3, [pc, #176]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005502:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005506:	fa93 f3a3 	rbit	r3, r3
 800550a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800550c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800550e:	fab3 f383 	clz	r3, r3
 8005512:	b2db      	uxtb	r3, r3
 8005514:	461a      	mov	r2, r3
 8005516:	4b26      	ldr	r3, [pc, #152]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005518:	4413      	add	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	461a      	mov	r2, r3
 800551e:	2301      	movs	r3, #1
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005526:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	fa93 f3a3 	rbit	r3, r3
 800552e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005532:	fab3 f383 	clz	r3, r3
 8005536:	b2db      	uxtb	r3, r3
 8005538:	461a      	mov	r2, r3
 800553a:	4b1d      	ldr	r3, [pc, #116]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800553c:	4413      	add	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	461a      	mov	r2, r3
 8005542:	2300      	movs	r3, #0
 8005544:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005546:	4a18      	ldr	r2, [pc, #96]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800554a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800554c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d04b      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005556:	f7fc fcd5 	bl	8001f04 <HAL_GetTick>
 800555a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800555c:	e00a      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800555e:	f7fc fcd1 	bl	8001f04 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	f241 3288 	movw	r2, #5000	; 0x1388
 800556c:	4293      	cmp	r3, r2
 800556e:	d901      	bls.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e113      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005574:	2302      	movs	r3, #2
 8005576:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557a:	fa93 f3a3 	rbit	r3, r3
 800557e:	627b      	str	r3, [r7, #36]	; 0x24
 8005580:	2302      	movs	r3, #2
 8005582:	623b      	str	r3, [r7, #32]
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	fa93 f3a3 	rbit	r3, r3
 800558a:	61fb      	str	r3, [r7, #28]
  return result;
 800558c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800558e:	fab3 f383 	clz	r3, r3
 8005592:	b2db      	uxtb	r3, r3
 8005594:	095b      	lsrs	r3, r3, #5
 8005596:	b2db      	uxtb	r3, r3
 8005598:	f043 0302 	orr.w	r3, r3, #2
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d108      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80055a2:	4b01      	ldr	r3, [pc, #4]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	e00d      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80055a8:	40021000 	.word	0x40021000
 80055ac:	40007000 	.word	0x40007000
 80055b0:	10908100 	.word	0x10908100
 80055b4:	2302      	movs	r3, #2
 80055b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	fa93 f3a3 	rbit	r3, r3
 80055be:	617b      	str	r3, [r7, #20]
 80055c0:	4b78      	ldr	r3, [pc, #480]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	2202      	movs	r2, #2
 80055c6:	613a      	str	r2, [r7, #16]
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	fa92 f2a2 	rbit	r2, r2
 80055ce:	60fa      	str	r2, [r7, #12]
  return result;
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	fab2 f282 	clz	r2, r2
 80055d6:	b2d2      	uxtb	r2, r2
 80055d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055dc:	b2d2      	uxtb	r2, r2
 80055de:	f002 021f 	and.w	r2, r2, #31
 80055e2:	2101      	movs	r1, #1
 80055e4:	fa01 f202 	lsl.w	r2, r1, r2
 80055e8:	4013      	ands	r3, r2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0b7      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80055ee:	4b6d      	ldr	r3, [pc, #436]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	496a      	ldr	r1, [pc, #424]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005600:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005604:	2b01      	cmp	r3, #1
 8005606:	d105      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005608:	4b66      	ldr	r3, [pc, #408]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	4a65      	ldr	r2, [pc, #404]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800560e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005612:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	d008      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005620:	4b60      	ldr	r3, [pc, #384]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005624:	f023 0203 	bic.w	r2, r3, #3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	495d      	ldr	r1, [pc, #372]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800562e:	4313      	orrs	r3, r2
 8005630:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d008      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800563e:	4b59      	ldr	r3, [pc, #356]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005642:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	4956      	ldr	r1, [pc, #344]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800564c:	4313      	orrs	r3, r2
 800564e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b00      	cmp	r3, #0
 800565a:	d008      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800565c:	4b51      	ldr	r3, [pc, #324]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800565e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005660:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	494e      	ldr	r1, [pc, #312]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800566a:	4313      	orrs	r3, r2
 800566c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0320 	and.w	r3, r3, #32
 8005676:	2b00      	cmp	r3, #0
 8005678:	d008      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800567a:	4b4a      	ldr	r3, [pc, #296]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800567c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567e:	f023 0210 	bic.w	r2, r3, #16
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	4947      	ldr	r1, [pc, #284]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005688:	4313      	orrs	r3, r2
 800568a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d008      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005698:	4b42      	ldr	r3, [pc, #264]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	493f      	ldr	r1, [pc, #252]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d008      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056b6:	4b3b      	ldr	r3, [pc, #236]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ba:	f023 0220 	bic.w	r2, r3, #32
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	4938      	ldr	r1, [pc, #224]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0308 	and.w	r3, r3, #8
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d008      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056d4:	4b33      	ldr	r3, [pc, #204]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	4930      	ldr	r1, [pc, #192]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0310 	and.w	r3, r3, #16
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d008      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056f2:	4b2c      	ldr	r3, [pc, #176]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	4929      	ldr	r1, [pc, #164]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005700:	4313      	orrs	r3, r2
 8005702:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800570c:	2b00      	cmp	r3, #0
 800570e:	d008      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005710:	4b24      	ldr	r3, [pc, #144]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571c:	4921      	ldr	r1, [pc, #132]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800571e:	4313      	orrs	r3, r2
 8005720:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572a:	2b00      	cmp	r3, #0
 800572c:	d008      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800572e:	4b1d      	ldr	r3, [pc, #116]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005732:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	491a      	ldr	r1, [pc, #104]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800573c:	4313      	orrs	r3, r2
 800573e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005748:	2b00      	cmp	r3, #0
 800574a:	d008      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800574c:	4b15      	ldr	r3, [pc, #84]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005750:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005758:	4912      	ldr	r1, [pc, #72]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800575a:	4313      	orrs	r3, r2
 800575c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d008      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800576a:	4b0e      	ldr	r3, [pc, #56]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800576c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005776:	490b      	ldr	r1, [pc, #44]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005778:	4313      	orrs	r3, r2
 800577a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d008      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005788:	4b06      	ldr	r3, [pc, #24]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800578a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005794:	4903      	ldr	r1, [pc, #12]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005796:	4313      	orrs	r3, r2
 8005798:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3748      	adds	r7, #72	; 0x48
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	40021000 	.word	0x40021000

080057a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e09d      	b.n	80058f6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d108      	bne.n	80057d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ca:	d009      	beq.n	80057e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	61da      	str	r2, [r3, #28]
 80057d2:	e005      	b.n	80057e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d106      	bne.n	8005800 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7fb ff36 	bl	800166c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005816:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005820:	d902      	bls.n	8005828 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005822:	2300      	movs	r3, #0
 8005824:	60fb      	str	r3, [r7, #12]
 8005826:	e002      	b.n	800582e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800582c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005836:	d007      	beq.n	8005848 <HAL_SPI_Init+0xa0>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005840:	d002      	beq.n	8005848 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005858:	431a      	orrs	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	431a      	orrs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	431a      	orrs	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005880:	431a      	orrs	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800588a:	ea42 0103 	orr.w	r1, r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005892:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	0c1b      	lsrs	r3, r3, #16
 80058a4:	f003 0204 	and.w	r2, r3, #4
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	431a      	orrs	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	431a      	orrs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80058c4:	ea42 0103 	orr.w	r1, r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69da      	ldr	r2, [r3, #28]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b082      	sub	sp, #8
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e049      	b.n	80059a4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d106      	bne.n	800592a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7fb fee3 	bl	80016f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2202      	movs	r2, #2
 800592e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	3304      	adds	r3, #4
 800593a:	4619      	mov	r1, r3
 800593c:	4610      	mov	r0, r2
 800593e:	f000 fd27 	bl	8006390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d001      	beq.n	80059c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e04a      	b.n	8005a5a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68da      	ldr	r2, [r3, #12]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0201 	orr.w	r2, r2, #1
 80059da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a21      	ldr	r2, [pc, #132]	; (8005a68 <HAL_TIM_Base_Start_IT+0xbc>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d018      	beq.n	8005a18 <HAL_TIM_Base_Start_IT+0x6c>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ee:	d013      	beq.n	8005a18 <HAL_TIM_Base_Start_IT+0x6c>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a1d      	ldr	r2, [pc, #116]	; (8005a6c <HAL_TIM_Base_Start_IT+0xc0>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d00e      	beq.n	8005a18 <HAL_TIM_Base_Start_IT+0x6c>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a1c      	ldr	r2, [pc, #112]	; (8005a70 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d009      	beq.n	8005a18 <HAL_TIM_Base_Start_IT+0x6c>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a1a      	ldr	r2, [pc, #104]	; (8005a74 <HAL_TIM_Base_Start_IT+0xc8>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d004      	beq.n	8005a18 <HAL_TIM_Base_Start_IT+0x6c>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a19      	ldr	r2, [pc, #100]	; (8005a78 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d115      	bne.n	8005a44 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	4b17      	ldr	r3, [pc, #92]	; (8005a7c <HAL_TIM_Base_Start_IT+0xd0>)
 8005a20:	4013      	ands	r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2b06      	cmp	r3, #6
 8005a28:	d015      	beq.n	8005a56 <HAL_TIM_Base_Start_IT+0xaa>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a30:	d011      	beq.n	8005a56 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f042 0201 	orr.w	r2, r2, #1
 8005a40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a42:	e008      	b.n	8005a56 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0201 	orr.w	r2, r2, #1
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	e000      	b.n	8005a58 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	40012c00 	.word	0x40012c00
 8005a6c:	40000400 	.word	0x40000400
 8005a70:	40000800 	.word	0x40000800
 8005a74:	40013400 	.word	0x40013400
 8005a78:	40014000 	.word	0x40014000
 8005a7c:	00010007 	.word	0x00010007

08005a80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e049      	b.n	8005b26 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d106      	bne.n	8005aac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f841 	bl	8005b2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	3304      	adds	r3, #4
 8005abc:	4619      	mov	r1, r3
 8005abe:	4610      	mov	r0, r2
 8005ac0:	f000 fc66 	bl	8006390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b36:	bf00      	nop
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
	...

08005b44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d109      	bne.n	8005b68 <HAL_TIM_PWM_Start+0x24>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	bf14      	ite	ne
 8005b60:	2301      	movne	r3, #1
 8005b62:	2300      	moveq	r3, #0
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	e03c      	b.n	8005be2 <HAL_TIM_PWM_Start+0x9e>
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2b04      	cmp	r3, #4
 8005b6c:	d109      	bne.n	8005b82 <HAL_TIM_PWM_Start+0x3e>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	bf14      	ite	ne
 8005b7a:	2301      	movne	r3, #1
 8005b7c:	2300      	moveq	r3, #0
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	e02f      	b.n	8005be2 <HAL_TIM_PWM_Start+0x9e>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b08      	cmp	r3, #8
 8005b86:	d109      	bne.n	8005b9c <HAL_TIM_PWM_Start+0x58>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	bf14      	ite	ne
 8005b94:	2301      	movne	r3, #1
 8005b96:	2300      	moveq	r3, #0
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	e022      	b.n	8005be2 <HAL_TIM_PWM_Start+0x9e>
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2b0c      	cmp	r3, #12
 8005ba0:	d109      	bne.n	8005bb6 <HAL_TIM_PWM_Start+0x72>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	bf14      	ite	ne
 8005bae:	2301      	movne	r3, #1
 8005bb0:	2300      	moveq	r3, #0
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	e015      	b.n	8005be2 <HAL_TIM_PWM_Start+0x9e>
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b10      	cmp	r3, #16
 8005bba:	d109      	bne.n	8005bd0 <HAL_TIM_PWM_Start+0x8c>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	bf14      	ite	ne
 8005bc8:	2301      	movne	r3, #1
 8005bca:	2300      	moveq	r3, #0
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	e008      	b.n	8005be2 <HAL_TIM_PWM_Start+0x9e>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	bf14      	ite	ne
 8005bdc:	2301      	movne	r3, #1
 8005bde:	2300      	moveq	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e097      	b.n	8005d1a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d104      	bne.n	8005bfa <HAL_TIM_PWM_Start+0xb6>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bf8:	e023      	b.n	8005c42 <HAL_TIM_PWM_Start+0xfe>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d104      	bne.n	8005c0a <HAL_TIM_PWM_Start+0xc6>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c08:	e01b      	b.n	8005c42 <HAL_TIM_PWM_Start+0xfe>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d104      	bne.n	8005c1a <HAL_TIM_PWM_Start+0xd6>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c18:	e013      	b.n	8005c42 <HAL_TIM_PWM_Start+0xfe>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b0c      	cmp	r3, #12
 8005c1e:	d104      	bne.n	8005c2a <HAL_TIM_PWM_Start+0xe6>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c28:	e00b      	b.n	8005c42 <HAL_TIM_PWM_Start+0xfe>
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b10      	cmp	r3, #16
 8005c2e:	d104      	bne.n	8005c3a <HAL_TIM_PWM_Start+0xf6>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c38:	e003      	b.n	8005c42 <HAL_TIM_PWM_Start+0xfe>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2202      	movs	r2, #2
 8005c3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2201      	movs	r2, #1
 8005c48:	6839      	ldr	r1, [r7, #0]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 ffa0 	bl	8006b90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a33      	ldr	r2, [pc, #204]	; (8005d24 <HAL_TIM_PWM_Start+0x1e0>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d013      	beq.n	8005c82 <HAL_TIM_PWM_Start+0x13e>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a32      	ldr	r2, [pc, #200]	; (8005d28 <HAL_TIM_PWM_Start+0x1e4>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d00e      	beq.n	8005c82 <HAL_TIM_PWM_Start+0x13e>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a30      	ldr	r2, [pc, #192]	; (8005d2c <HAL_TIM_PWM_Start+0x1e8>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d009      	beq.n	8005c82 <HAL_TIM_PWM_Start+0x13e>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a2f      	ldr	r2, [pc, #188]	; (8005d30 <HAL_TIM_PWM_Start+0x1ec>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d004      	beq.n	8005c82 <HAL_TIM_PWM_Start+0x13e>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a2d      	ldr	r2, [pc, #180]	; (8005d34 <HAL_TIM_PWM_Start+0x1f0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d101      	bne.n	8005c86 <HAL_TIM_PWM_Start+0x142>
 8005c82:	2301      	movs	r3, #1
 8005c84:	e000      	b.n	8005c88 <HAL_TIM_PWM_Start+0x144>
 8005c86:	2300      	movs	r3, #0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d007      	beq.n	8005c9c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c9a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a20      	ldr	r2, [pc, #128]	; (8005d24 <HAL_TIM_PWM_Start+0x1e0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d018      	beq.n	8005cd8 <HAL_TIM_PWM_Start+0x194>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cae:	d013      	beq.n	8005cd8 <HAL_TIM_PWM_Start+0x194>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a20      	ldr	r2, [pc, #128]	; (8005d38 <HAL_TIM_PWM_Start+0x1f4>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00e      	beq.n	8005cd8 <HAL_TIM_PWM_Start+0x194>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a1f      	ldr	r2, [pc, #124]	; (8005d3c <HAL_TIM_PWM_Start+0x1f8>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d009      	beq.n	8005cd8 <HAL_TIM_PWM_Start+0x194>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a17      	ldr	r2, [pc, #92]	; (8005d28 <HAL_TIM_PWM_Start+0x1e4>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d004      	beq.n	8005cd8 <HAL_TIM_PWM_Start+0x194>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a16      	ldr	r2, [pc, #88]	; (8005d2c <HAL_TIM_PWM_Start+0x1e8>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d115      	bne.n	8005d04 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	4b18      	ldr	r3, [pc, #96]	; (8005d40 <HAL_TIM_PWM_Start+0x1fc>)
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b06      	cmp	r3, #6
 8005ce8:	d015      	beq.n	8005d16 <HAL_TIM_PWM_Start+0x1d2>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf0:	d011      	beq.n	8005d16 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f042 0201 	orr.w	r2, r2, #1
 8005d00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d02:	e008      	b.n	8005d16 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0201 	orr.w	r2, r2, #1
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	e000      	b.n	8005d18 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	40012c00 	.word	0x40012c00
 8005d28:	40013400 	.word	0x40013400
 8005d2c:	40014000 	.word	0x40014000
 8005d30:	40014400 	.word	0x40014400
 8005d34:	40014800 	.word	0x40014800
 8005d38:	40000400 	.word	0x40000400
 8005d3c:	40000800 	.word	0x40000800
 8005d40:	00010007 	.word	0x00010007

08005d44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d122      	bne.n	8005da0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d11b      	bne.n	8005da0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f06f 0202 	mvn.w	r2, #2
 8005d70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	f003 0303 	and.w	r3, r3, #3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fae3 	bl	8006352 <HAL_TIM_IC_CaptureCallback>
 8005d8c:	e005      	b.n	8005d9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fad5 	bl	800633e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 fae6 	bl	8006366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	f003 0304 	and.w	r3, r3, #4
 8005daa:	2b04      	cmp	r3, #4
 8005dac:	d122      	bne.n	8005df4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b04      	cmp	r3, #4
 8005dba:	d11b      	bne.n	8005df4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f06f 0204 	mvn.w	r2, #4
 8005dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2202      	movs	r2, #2
 8005dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fab9 	bl	8006352 <HAL_TIM_IC_CaptureCallback>
 8005de0:	e005      	b.n	8005dee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 faab 	bl	800633e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fabc 	bl	8006366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b08      	cmp	r3, #8
 8005e00:	d122      	bne.n	8005e48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f003 0308 	and.w	r3, r3, #8
 8005e0c:	2b08      	cmp	r3, #8
 8005e0e:	d11b      	bne.n	8005e48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f06f 0208 	mvn.w	r2, #8
 8005e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2204      	movs	r2, #4
 8005e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fa8f 	bl	8006352 <HAL_TIM_IC_CaptureCallback>
 8005e34:	e005      	b.n	8005e42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fa81 	bl	800633e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 fa92 	bl	8006366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f003 0310 	and.w	r3, r3, #16
 8005e52:	2b10      	cmp	r3, #16
 8005e54:	d122      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f003 0310 	and.w	r3, r3, #16
 8005e60:	2b10      	cmp	r3, #16
 8005e62:	d11b      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f06f 0210 	mvn.w	r2, #16
 8005e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2208      	movs	r2, #8
 8005e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fa65 	bl	8006352 <HAL_TIM_IC_CaptureCallback>
 8005e88:	e005      	b.n	8005e96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fa57 	bl	800633e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fa68 	bl	8006366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d10e      	bne.n	8005ec8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d107      	bne.n	8005ec8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f06f 0201 	mvn.w	r2, #1
 8005ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7fb faa8 	bl	8001418 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed2:	2b80      	cmp	r3, #128	; 0x80
 8005ed4:	d10e      	bne.n	8005ef4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee0:	2b80      	cmp	r3, #128	; 0x80
 8005ee2:	d107      	bne.n	8005ef4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 fefe 	bl	8006cf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f02:	d10e      	bne.n	8005f22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0e:	2b80      	cmp	r3, #128	; 0x80
 8005f10:	d107      	bne.n	8005f22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fef1 	bl	8006d04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2c:	2b40      	cmp	r3, #64	; 0x40
 8005f2e:	d10e      	bne.n	8005f4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3a:	2b40      	cmp	r3, #64	; 0x40
 8005f3c:	d107      	bne.n	8005f4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fa16 	bl	800637a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	f003 0320 	and.w	r3, r3, #32
 8005f58:	2b20      	cmp	r3, #32
 8005f5a:	d10e      	bne.n	8005f7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f003 0320 	and.w	r3, r3, #32
 8005f66:	2b20      	cmp	r3, #32
 8005f68:	d107      	bne.n	8005f7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f06f 0220 	mvn.w	r2, #32
 8005f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 feb1 	bl	8006cdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f7a:	bf00      	nop
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d101      	bne.n	8005fa2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	e0ff      	b.n	80061a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b14      	cmp	r3, #20
 8005fae:	f200 80f0 	bhi.w	8006192 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005fb2:	a201      	add	r2, pc, #4	; (adr r2, 8005fb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb8:	0800600d 	.word	0x0800600d
 8005fbc:	08006193 	.word	0x08006193
 8005fc0:	08006193 	.word	0x08006193
 8005fc4:	08006193 	.word	0x08006193
 8005fc8:	0800604d 	.word	0x0800604d
 8005fcc:	08006193 	.word	0x08006193
 8005fd0:	08006193 	.word	0x08006193
 8005fd4:	08006193 	.word	0x08006193
 8005fd8:	0800608f 	.word	0x0800608f
 8005fdc:	08006193 	.word	0x08006193
 8005fe0:	08006193 	.word	0x08006193
 8005fe4:	08006193 	.word	0x08006193
 8005fe8:	080060cf 	.word	0x080060cf
 8005fec:	08006193 	.word	0x08006193
 8005ff0:	08006193 	.word	0x08006193
 8005ff4:	08006193 	.word	0x08006193
 8005ff8:	08006111 	.word	0x08006111
 8005ffc:	08006193 	.word	0x08006193
 8006000:	08006193 	.word	0x08006193
 8006004:	08006193 	.word	0x08006193
 8006008:	08006151 	.word	0x08006151
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68b9      	ldr	r1, [r7, #8]
 8006012:	4618      	mov	r0, r3
 8006014:	f000 fa4c 	bl	80064b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699a      	ldr	r2, [r3, #24]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0208 	orr.w	r2, r2, #8
 8006026:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	699a      	ldr	r2, [r3, #24]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 0204 	bic.w	r2, r2, #4
 8006036:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6999      	ldr	r1, [r3, #24]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	691a      	ldr	r2, [r3, #16]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	619a      	str	r2, [r3, #24]
      break;
 800604a:	e0a5      	b.n	8006198 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68b9      	ldr	r1, [r7, #8]
 8006052:	4618      	mov	r0, r3
 8006054:	f000 fabc 	bl	80065d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	699a      	ldr	r2, [r3, #24]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	699a      	ldr	r2, [r3, #24]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6999      	ldr	r1, [r3, #24]
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	021a      	lsls	r2, r3, #8
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	619a      	str	r2, [r3, #24]
      break;
 800608c:	e084      	b.n	8006198 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68b9      	ldr	r1, [r7, #8]
 8006094:	4618      	mov	r0, r3
 8006096:	f000 fb25 	bl	80066e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	69da      	ldr	r2, [r3, #28]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f042 0208 	orr.w	r2, r2, #8
 80060a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	69da      	ldr	r2, [r3, #28]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0204 	bic.w	r2, r2, #4
 80060b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	69d9      	ldr	r1, [r3, #28]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	691a      	ldr	r2, [r3, #16]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	61da      	str	r2, [r3, #28]
      break;
 80060cc:	e064      	b.n	8006198 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68b9      	ldr	r1, [r7, #8]
 80060d4:	4618      	mov	r0, r3
 80060d6:	f000 fb8d 	bl	80067f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	69da      	ldr	r2, [r3, #28]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	69da      	ldr	r2, [r3, #28]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	69d9      	ldr	r1, [r3, #28]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	021a      	lsls	r2, r3, #8
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	430a      	orrs	r2, r1
 800610c:	61da      	str	r2, [r3, #28]
      break;
 800610e:	e043      	b.n	8006198 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68b9      	ldr	r1, [r7, #8]
 8006116:	4618      	mov	r0, r3
 8006118:	f000 fbd6 	bl	80068c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f042 0208 	orr.w	r2, r2, #8
 800612a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0204 	bic.w	r2, r2, #4
 800613a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	691a      	ldr	r2, [r3, #16]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800614e:	e023      	b.n	8006198 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68b9      	ldr	r1, [r7, #8]
 8006156:	4618      	mov	r0, r3
 8006158:	f000 fc1a 	bl	8006990 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800616a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800617a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	021a      	lsls	r2, r3, #8
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006190:	e002      	b.n	8006198 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	75fb      	strb	r3, [r7, #23]
      break;
 8006196:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop

080061ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061b6:	2300      	movs	r3, #0
 80061b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d101      	bne.n	80061c8 <HAL_TIM_ConfigClockSource+0x1c>
 80061c4:	2302      	movs	r3, #2
 80061c6:	e0b6      	b.n	8006336 <HAL_TIM_ConfigClockSource+0x18a>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006204:	d03e      	beq.n	8006284 <HAL_TIM_ConfigClockSource+0xd8>
 8006206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800620a:	f200 8087 	bhi.w	800631c <HAL_TIM_ConfigClockSource+0x170>
 800620e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006212:	f000 8086 	beq.w	8006322 <HAL_TIM_ConfigClockSource+0x176>
 8006216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800621a:	d87f      	bhi.n	800631c <HAL_TIM_ConfigClockSource+0x170>
 800621c:	2b70      	cmp	r3, #112	; 0x70
 800621e:	d01a      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0xaa>
 8006220:	2b70      	cmp	r3, #112	; 0x70
 8006222:	d87b      	bhi.n	800631c <HAL_TIM_ConfigClockSource+0x170>
 8006224:	2b60      	cmp	r3, #96	; 0x60
 8006226:	d050      	beq.n	80062ca <HAL_TIM_ConfigClockSource+0x11e>
 8006228:	2b60      	cmp	r3, #96	; 0x60
 800622a:	d877      	bhi.n	800631c <HAL_TIM_ConfigClockSource+0x170>
 800622c:	2b50      	cmp	r3, #80	; 0x50
 800622e:	d03c      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0xfe>
 8006230:	2b50      	cmp	r3, #80	; 0x50
 8006232:	d873      	bhi.n	800631c <HAL_TIM_ConfigClockSource+0x170>
 8006234:	2b40      	cmp	r3, #64	; 0x40
 8006236:	d058      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0x13e>
 8006238:	2b40      	cmp	r3, #64	; 0x40
 800623a:	d86f      	bhi.n	800631c <HAL_TIM_ConfigClockSource+0x170>
 800623c:	2b30      	cmp	r3, #48	; 0x30
 800623e:	d064      	beq.n	800630a <HAL_TIM_ConfigClockSource+0x15e>
 8006240:	2b30      	cmp	r3, #48	; 0x30
 8006242:	d86b      	bhi.n	800631c <HAL_TIM_ConfigClockSource+0x170>
 8006244:	2b20      	cmp	r3, #32
 8006246:	d060      	beq.n	800630a <HAL_TIM_ConfigClockSource+0x15e>
 8006248:	2b20      	cmp	r3, #32
 800624a:	d867      	bhi.n	800631c <HAL_TIM_ConfigClockSource+0x170>
 800624c:	2b00      	cmp	r3, #0
 800624e:	d05c      	beq.n	800630a <HAL_TIM_ConfigClockSource+0x15e>
 8006250:	2b10      	cmp	r3, #16
 8006252:	d05a      	beq.n	800630a <HAL_TIM_ConfigClockSource+0x15e>
 8006254:	e062      	b.n	800631c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6818      	ldr	r0, [r3, #0]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	6899      	ldr	r1, [r3, #8]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f000 fc73 	bl	8006b50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006278:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	609a      	str	r2, [r3, #8]
      break;
 8006282:	e04f      	b.n	8006324 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6818      	ldr	r0, [r3, #0]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	6899      	ldr	r1, [r3, #8]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f000 fc5c 	bl	8006b50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689a      	ldr	r2, [r3, #8]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062a6:	609a      	str	r2, [r3, #8]
      break;
 80062a8:	e03c      	b.n	8006324 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6818      	ldr	r0, [r3, #0]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	6859      	ldr	r1, [r3, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	461a      	mov	r2, r3
 80062b8:	f000 fbd0 	bl	8006a5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2150      	movs	r1, #80	; 0x50
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 fc29 	bl	8006b1a <TIM_ITRx_SetConfig>
      break;
 80062c8:	e02c      	b.n	8006324 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6818      	ldr	r0, [r3, #0]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	6859      	ldr	r1, [r3, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	461a      	mov	r2, r3
 80062d8:	f000 fbef 	bl	8006aba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2160      	movs	r1, #96	; 0x60
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 fc19 	bl	8006b1a <TIM_ITRx_SetConfig>
      break;
 80062e8:	e01c      	b.n	8006324 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6818      	ldr	r0, [r3, #0]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	6859      	ldr	r1, [r3, #4]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	461a      	mov	r2, r3
 80062f8:	f000 fbb0 	bl	8006a5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2140      	movs	r1, #64	; 0x40
 8006302:	4618      	mov	r0, r3
 8006304:	f000 fc09 	bl	8006b1a <TIM_ITRx_SetConfig>
      break;
 8006308:	e00c      	b.n	8006324 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4619      	mov	r1, r3
 8006314:	4610      	mov	r0, r2
 8006316:	f000 fc00 	bl	8006b1a <TIM_ITRx_SetConfig>
      break;
 800631a:	e003      	b.n	8006324 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	73fb      	strb	r3, [r7, #15]
      break;
 8006320:	e000      	b.n	8006324 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006322:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006334:	7bfb      	ldrb	r3, [r7, #15]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800633e:	b480      	push	{r7}
 8006340:	b083      	sub	sp, #12
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006346:	bf00      	nop
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006352:	b480      	push	{r7}
 8006354:	b083      	sub	sp, #12
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800636e:	bf00      	nop
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800637a:	b480      	push	{r7}
 800637c:	b083      	sub	sp, #12
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006382:	bf00      	nop
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
	...

08006390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a3c      	ldr	r2, [pc, #240]	; (8006494 <TIM_Base_SetConfig+0x104>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d00f      	beq.n	80063c8 <TIM_Base_SetConfig+0x38>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ae:	d00b      	beq.n	80063c8 <TIM_Base_SetConfig+0x38>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a39      	ldr	r2, [pc, #228]	; (8006498 <TIM_Base_SetConfig+0x108>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d007      	beq.n	80063c8 <TIM_Base_SetConfig+0x38>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a38      	ldr	r2, [pc, #224]	; (800649c <TIM_Base_SetConfig+0x10c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d003      	beq.n	80063c8 <TIM_Base_SetConfig+0x38>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a37      	ldr	r2, [pc, #220]	; (80064a0 <TIM_Base_SetConfig+0x110>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d108      	bne.n	80063da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a2d      	ldr	r2, [pc, #180]	; (8006494 <TIM_Base_SetConfig+0x104>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d01b      	beq.n	800641a <TIM_Base_SetConfig+0x8a>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e8:	d017      	beq.n	800641a <TIM_Base_SetConfig+0x8a>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a2a      	ldr	r2, [pc, #168]	; (8006498 <TIM_Base_SetConfig+0x108>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d013      	beq.n	800641a <TIM_Base_SetConfig+0x8a>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a29      	ldr	r2, [pc, #164]	; (800649c <TIM_Base_SetConfig+0x10c>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d00f      	beq.n	800641a <TIM_Base_SetConfig+0x8a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a28      	ldr	r2, [pc, #160]	; (80064a0 <TIM_Base_SetConfig+0x110>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d00b      	beq.n	800641a <TIM_Base_SetConfig+0x8a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a27      	ldr	r2, [pc, #156]	; (80064a4 <TIM_Base_SetConfig+0x114>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d007      	beq.n	800641a <TIM_Base_SetConfig+0x8a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a26      	ldr	r2, [pc, #152]	; (80064a8 <TIM_Base_SetConfig+0x118>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d003      	beq.n	800641a <TIM_Base_SetConfig+0x8a>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a25      	ldr	r2, [pc, #148]	; (80064ac <TIM_Base_SetConfig+0x11c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d108      	bne.n	800642c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	4313      	orrs	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	4313      	orrs	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	689a      	ldr	r2, [r3, #8]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a10      	ldr	r2, [pc, #64]	; (8006494 <TIM_Base_SetConfig+0x104>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d00f      	beq.n	8006478 <TIM_Base_SetConfig+0xe8>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a11      	ldr	r2, [pc, #68]	; (80064a0 <TIM_Base_SetConfig+0x110>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d00b      	beq.n	8006478 <TIM_Base_SetConfig+0xe8>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a10      	ldr	r2, [pc, #64]	; (80064a4 <TIM_Base_SetConfig+0x114>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d007      	beq.n	8006478 <TIM_Base_SetConfig+0xe8>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a0f      	ldr	r2, [pc, #60]	; (80064a8 <TIM_Base_SetConfig+0x118>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d003      	beq.n	8006478 <TIM_Base_SetConfig+0xe8>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a0e      	ldr	r2, [pc, #56]	; (80064ac <TIM_Base_SetConfig+0x11c>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d103      	bne.n	8006480 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	691a      	ldr	r2, [r3, #16]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	615a      	str	r2, [r3, #20]
}
 8006486:	bf00      	nop
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	40012c00 	.word	0x40012c00
 8006498:	40000400 	.word	0x40000400
 800649c:	40000800 	.word	0x40000800
 80064a0:	40013400 	.word	0x40013400
 80064a4:	40014000 	.word	0x40014000
 80064a8:	40014400 	.word	0x40014400
 80064ac:	40014800 	.word	0x40014800

080064b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	f023 0201 	bic.w	r2, r3, #1
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 0303 	bic.w	r3, r3, #3
 80064ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f023 0302 	bic.w	r3, r3, #2
 80064fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	4313      	orrs	r3, r2
 8006506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a2c      	ldr	r2, [pc, #176]	; (80065bc <TIM_OC1_SetConfig+0x10c>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d00f      	beq.n	8006530 <TIM_OC1_SetConfig+0x80>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a2b      	ldr	r2, [pc, #172]	; (80065c0 <TIM_OC1_SetConfig+0x110>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00b      	beq.n	8006530 <TIM_OC1_SetConfig+0x80>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a2a      	ldr	r2, [pc, #168]	; (80065c4 <TIM_OC1_SetConfig+0x114>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d007      	beq.n	8006530 <TIM_OC1_SetConfig+0x80>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a29      	ldr	r2, [pc, #164]	; (80065c8 <TIM_OC1_SetConfig+0x118>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d003      	beq.n	8006530 <TIM_OC1_SetConfig+0x80>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a28      	ldr	r2, [pc, #160]	; (80065cc <TIM_OC1_SetConfig+0x11c>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d10c      	bne.n	800654a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f023 0308 	bic.w	r3, r3, #8
 8006536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	4313      	orrs	r3, r2
 8006540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f023 0304 	bic.w	r3, r3, #4
 8006548:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a1b      	ldr	r2, [pc, #108]	; (80065bc <TIM_OC1_SetConfig+0x10c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00f      	beq.n	8006572 <TIM_OC1_SetConfig+0xc2>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a1a      	ldr	r2, [pc, #104]	; (80065c0 <TIM_OC1_SetConfig+0x110>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00b      	beq.n	8006572 <TIM_OC1_SetConfig+0xc2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a19      	ldr	r2, [pc, #100]	; (80065c4 <TIM_OC1_SetConfig+0x114>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d007      	beq.n	8006572 <TIM_OC1_SetConfig+0xc2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a18      	ldr	r2, [pc, #96]	; (80065c8 <TIM_OC1_SetConfig+0x118>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d003      	beq.n	8006572 <TIM_OC1_SetConfig+0xc2>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a17      	ldr	r2, [pc, #92]	; (80065cc <TIM_OC1_SetConfig+0x11c>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d111      	bne.n	8006596 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	4313      	orrs	r3, r2
 800658a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	4313      	orrs	r3, r2
 8006594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	621a      	str	r2, [r3, #32]
}
 80065b0:	bf00      	nop
 80065b2:	371c      	adds	r7, #28
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	40012c00 	.word	0x40012c00
 80065c0:	40013400 	.word	0x40013400
 80065c4:	40014000 	.word	0x40014000
 80065c8:	40014400 	.word	0x40014400
 80065cc:	40014800 	.word	0x40014800

080065d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	f023 0210 	bic.w	r2, r3, #16
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800660a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	021b      	lsls	r3, r3, #8
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	4313      	orrs	r3, r2
 8006616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f023 0320 	bic.w	r3, r3, #32
 800661e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	011b      	lsls	r3, r3, #4
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	4313      	orrs	r3, r2
 800662a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a28      	ldr	r2, [pc, #160]	; (80066d0 <TIM_OC2_SetConfig+0x100>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d003      	beq.n	800663c <TIM_OC2_SetConfig+0x6c>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a27      	ldr	r2, [pc, #156]	; (80066d4 <TIM_OC2_SetConfig+0x104>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d10d      	bne.n	8006658 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	011b      	lsls	r3, r3, #4
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	4313      	orrs	r3, r2
 800664e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006656:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a1d      	ldr	r2, [pc, #116]	; (80066d0 <TIM_OC2_SetConfig+0x100>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d00f      	beq.n	8006680 <TIM_OC2_SetConfig+0xb0>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a1c      	ldr	r2, [pc, #112]	; (80066d4 <TIM_OC2_SetConfig+0x104>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d00b      	beq.n	8006680 <TIM_OC2_SetConfig+0xb0>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a1b      	ldr	r2, [pc, #108]	; (80066d8 <TIM_OC2_SetConfig+0x108>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d007      	beq.n	8006680 <TIM_OC2_SetConfig+0xb0>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a1a      	ldr	r2, [pc, #104]	; (80066dc <TIM_OC2_SetConfig+0x10c>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d003      	beq.n	8006680 <TIM_OC2_SetConfig+0xb0>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a19      	ldr	r2, [pc, #100]	; (80066e0 <TIM_OC2_SetConfig+0x110>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d113      	bne.n	80066a8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006686:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800668e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	4313      	orrs	r3, r2
 800669a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	621a      	str	r2, [r3, #32]
}
 80066c2:	bf00      	nop
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	40012c00 	.word	0x40012c00
 80066d4:	40013400 	.word	0x40013400
 80066d8:	40014000 	.word	0x40014000
 80066dc:	40014400 	.word	0x40014400
 80066e0:	40014800 	.word	0x40014800

080066e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f023 0303 	bic.w	r3, r3, #3
 800671e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	4313      	orrs	r3, r2
 8006728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	021b      	lsls	r3, r3, #8
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	4313      	orrs	r3, r2
 800673c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a27      	ldr	r2, [pc, #156]	; (80067e0 <TIM_OC3_SetConfig+0xfc>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d003      	beq.n	800674e <TIM_OC3_SetConfig+0x6a>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a26      	ldr	r2, [pc, #152]	; (80067e4 <TIM_OC3_SetConfig+0x100>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d10d      	bne.n	800676a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006754:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	021b      	lsls	r3, r3, #8
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	4313      	orrs	r3, r2
 8006760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006768:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a1c      	ldr	r2, [pc, #112]	; (80067e0 <TIM_OC3_SetConfig+0xfc>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00f      	beq.n	8006792 <TIM_OC3_SetConfig+0xae>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a1b      	ldr	r2, [pc, #108]	; (80067e4 <TIM_OC3_SetConfig+0x100>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00b      	beq.n	8006792 <TIM_OC3_SetConfig+0xae>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a1a      	ldr	r2, [pc, #104]	; (80067e8 <TIM_OC3_SetConfig+0x104>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d007      	beq.n	8006792 <TIM_OC3_SetConfig+0xae>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a19      	ldr	r2, [pc, #100]	; (80067ec <TIM_OC3_SetConfig+0x108>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d003      	beq.n	8006792 <TIM_OC3_SetConfig+0xae>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a18      	ldr	r2, [pc, #96]	; (80067f0 <TIM_OC3_SetConfig+0x10c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d113      	bne.n	80067ba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	011b      	lsls	r3, r3, #4
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	011b      	lsls	r3, r3, #4
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	685a      	ldr	r2, [r3, #4]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	697a      	ldr	r2, [r7, #20]
 80067d2:	621a      	str	r2, [r3, #32]
}
 80067d4:	bf00      	nop
 80067d6:	371c      	adds	r7, #28
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr
 80067e0:	40012c00 	.word	0x40012c00
 80067e4:	40013400 	.word	0x40013400
 80067e8:	40014000 	.word	0x40014000
 80067ec:	40014400 	.word	0x40014400
 80067f0:	40014800 	.word	0x40014800

080067f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	69db      	ldr	r3, [r3, #28]
 800681a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800682e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	021b      	lsls	r3, r3, #8
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	4313      	orrs	r3, r2
 800683a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006842:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	031b      	lsls	r3, r3, #12
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	4313      	orrs	r3, r2
 800684e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a18      	ldr	r2, [pc, #96]	; (80068b4 <TIM_OC4_SetConfig+0xc0>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d00f      	beq.n	8006878 <TIM_OC4_SetConfig+0x84>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a17      	ldr	r2, [pc, #92]	; (80068b8 <TIM_OC4_SetConfig+0xc4>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d00b      	beq.n	8006878 <TIM_OC4_SetConfig+0x84>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a16      	ldr	r2, [pc, #88]	; (80068bc <TIM_OC4_SetConfig+0xc8>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d007      	beq.n	8006878 <TIM_OC4_SetConfig+0x84>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a15      	ldr	r2, [pc, #84]	; (80068c0 <TIM_OC4_SetConfig+0xcc>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d003      	beq.n	8006878 <TIM_OC4_SetConfig+0x84>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a14      	ldr	r2, [pc, #80]	; (80068c4 <TIM_OC4_SetConfig+0xd0>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d109      	bne.n	800688c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800687e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	019b      	lsls	r3, r3, #6
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	4313      	orrs	r3, r2
 800688a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	621a      	str	r2, [r3, #32]
}
 80068a6:	bf00      	nop
 80068a8:	371c      	adds	r7, #28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	40012c00 	.word	0x40012c00
 80068b8:	40013400 	.word	0x40013400
 80068bc:	40014000 	.word	0x40014000
 80068c0:	40014400 	.word	0x40014400
 80068c4:	40014800 	.word	0x40014800

080068c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800690c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	041b      	lsls	r3, r3, #16
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	4313      	orrs	r3, r2
 8006918:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a17      	ldr	r2, [pc, #92]	; (800697c <TIM_OC5_SetConfig+0xb4>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d00f      	beq.n	8006942 <TIM_OC5_SetConfig+0x7a>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a16      	ldr	r2, [pc, #88]	; (8006980 <TIM_OC5_SetConfig+0xb8>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d00b      	beq.n	8006942 <TIM_OC5_SetConfig+0x7a>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a15      	ldr	r2, [pc, #84]	; (8006984 <TIM_OC5_SetConfig+0xbc>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d007      	beq.n	8006942 <TIM_OC5_SetConfig+0x7a>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a14      	ldr	r2, [pc, #80]	; (8006988 <TIM_OC5_SetConfig+0xc0>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d003      	beq.n	8006942 <TIM_OC5_SetConfig+0x7a>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a13      	ldr	r2, [pc, #76]	; (800698c <TIM_OC5_SetConfig+0xc4>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d109      	bne.n	8006956 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006948:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	021b      	lsls	r3, r3, #8
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	4313      	orrs	r3, r2
 8006954:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	621a      	str	r2, [r3, #32]
}
 8006970:	bf00      	nop
 8006972:	371c      	adds	r7, #28
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	40012c00 	.word	0x40012c00
 8006980:	40013400 	.word	0x40013400
 8006984:	40014000 	.word	0x40014000
 8006988:	40014400 	.word	0x40014400
 800698c:	40014800 	.word	0x40014800

08006990 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006990:	b480      	push	{r7}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	021b      	lsls	r3, r3, #8
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	051b      	lsls	r3, r3, #20
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a18      	ldr	r2, [pc, #96]	; (8006a48 <TIM_OC6_SetConfig+0xb8>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d00f      	beq.n	8006a0c <TIM_OC6_SetConfig+0x7c>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a17      	ldr	r2, [pc, #92]	; (8006a4c <TIM_OC6_SetConfig+0xbc>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d00b      	beq.n	8006a0c <TIM_OC6_SetConfig+0x7c>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a16      	ldr	r2, [pc, #88]	; (8006a50 <TIM_OC6_SetConfig+0xc0>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d007      	beq.n	8006a0c <TIM_OC6_SetConfig+0x7c>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a15      	ldr	r2, [pc, #84]	; (8006a54 <TIM_OC6_SetConfig+0xc4>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d003      	beq.n	8006a0c <TIM_OC6_SetConfig+0x7c>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a14      	ldr	r2, [pc, #80]	; (8006a58 <TIM_OC6_SetConfig+0xc8>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d109      	bne.n	8006a20 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	029b      	lsls	r3, r3, #10
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	621a      	str	r2, [r3, #32]
}
 8006a3a:	bf00      	nop
 8006a3c:	371c      	adds	r7, #28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	40012c00 	.word	0x40012c00
 8006a4c:	40013400 	.word	0x40013400
 8006a50:	40014000 	.word	0x40014000
 8006a54:	40014400 	.word	0x40014400
 8006a58:	40014800 	.word	0x40014800

08006a5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b087      	sub	sp, #28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	f023 0201 	bic.w	r2, r3, #1
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	011b      	lsls	r3, r3, #4
 8006a8c:	693a      	ldr	r2, [r7, #16]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f023 030a 	bic.w	r3, r3, #10
 8006a98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	621a      	str	r2, [r3, #32]
}
 8006aae:	bf00      	nop
 8006ab0:	371c      	adds	r7, #28
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b087      	sub	sp, #28
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	60f8      	str	r0, [r7, #12]
 8006ac2:	60b9      	str	r1, [r7, #8]
 8006ac4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	f023 0210 	bic.w	r2, r3, #16
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ae4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	031b      	lsls	r3, r3, #12
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006af6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	011b      	lsls	r3, r3, #4
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	621a      	str	r2, [r3, #32]
}
 8006b0e:	bf00      	nop
 8006b10:	371c      	adds	r7, #28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b085      	sub	sp, #20
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	f043 0307 	orr.w	r3, r3, #7
 8006b3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	609a      	str	r2, [r3, #8]
}
 8006b44:	bf00      	nop
 8006b46:	3714      	adds	r7, #20
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b087      	sub	sp, #28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
 8006b5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	021a      	lsls	r2, r3, #8
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	431a      	orrs	r2, r3
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	609a      	str	r2, [r3, #8]
}
 8006b84:	bf00      	nop
 8006b86:	371c      	adds	r7, #28
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	f003 031f 	and.w	r3, r3, #31
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6a1a      	ldr	r2, [r3, #32]
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	43db      	mvns	r3, r3
 8006bb2:	401a      	ands	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a1a      	ldr	r2, [r3, #32]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	f003 031f 	and.w	r3, r3, #31
 8006bc2:	6879      	ldr	r1, [r7, #4]
 8006bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8006bc8:	431a      	orrs	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	621a      	str	r2, [r3, #32]
}
 8006bce:	bf00      	nop
 8006bd0:	371c      	adds	r7, #28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
	...

08006bdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d101      	bne.n	8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	e063      	b.n	8006cbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a2b      	ldr	r2, [pc, #172]	; (8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d004      	beq.n	8006c28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a2a      	ldr	r2, [pc, #168]	; (8006ccc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d108      	bne.n	8006c3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a1b      	ldr	r2, [pc, #108]	; (8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d018      	beq.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c66:	d013      	beq.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a18      	ldr	r2, [pc, #96]	; (8006cd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00e      	beq.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a17      	ldr	r2, [pc, #92]	; (8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d009      	beq.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a12      	ldr	r2, [pc, #72]	; (8006ccc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d004      	beq.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a13      	ldr	r2, [pc, #76]	; (8006cd8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d10c      	bne.n	8006caa <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	40012c00 	.word	0x40012c00
 8006ccc:	40013400 	.word	0x40013400
 8006cd0:	40000400 	.word	0x40000400
 8006cd4:	40000800 	.word	0x40000800
 8006cd8:	40014000 	.word	0x40014000

08006cdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e040      	b.n	8006dac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d106      	bne.n	8006d40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7fa fd46 	bl	80017cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2224      	movs	r2, #36	; 0x24
 8006d44:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f022 0201 	bic.w	r2, r2, #1
 8006d54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fbd4 	bl	8007504 <UART_SetConfig>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d101      	bne.n	8006d66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e022      	b.n	8006dac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d002      	beq.n	8006d74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 fd9c 	bl	80078ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	685a      	ldr	r2, [r3, #4]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689a      	ldr	r2, [r3, #8]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f042 0201 	orr.w	r2, r2, #1
 8006da2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fe23 	bl	80079f0 <UART_CheckIdleState>
 8006daa:	4603      	mov	r3, r0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b08b      	sub	sp, #44	; 0x2c
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dc6:	2b20      	cmp	r3, #32
 8006dc8:	d147      	bne.n	8006e5a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <HAL_UART_Transmit_IT+0x22>
 8006dd0:	88fb      	ldrh	r3, [r7, #6]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e040      	b.n	8006e5c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	88fa      	ldrh	r2, [r7, #6]
 8006de4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	88fa      	ldrh	r2, [r7, #6]
 8006dec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2221      	movs	r2, #33	; 0x21
 8006e02:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e0c:	d107      	bne.n	8006e1e <HAL_UART_Transmit_IT+0x6a>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d103      	bne.n	8006e1e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	4a13      	ldr	r2, [pc, #76]	; (8006e68 <HAL_UART_Transmit_IT+0xb4>)
 8006e1a:	66da      	str	r2, [r3, #108]	; 0x6c
 8006e1c:	e002      	b.n	8006e24 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	4a12      	ldr	r2, [pc, #72]	; (8006e6c <HAL_UART_Transmit_IT+0xb8>)
 8006e22:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	e853 3f00 	ldrex	r3, [r3]
 8006e30:	613b      	str	r3, [r7, #16]
   return(result);
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e38:	627b      	str	r3, [r7, #36]	; 0x24
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	623b      	str	r3, [r7, #32]
 8006e44:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	69f9      	ldr	r1, [r7, #28]
 8006e48:	6a3a      	ldr	r2, [r7, #32]
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e6      	bne.n	8006e24 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8006e56:	2300      	movs	r3, #0
 8006e58:	e000      	b.n	8006e5c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006e5a:	2302      	movs	r3, #2
  }
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	372c      	adds	r7, #44	; 0x2c
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	08007f25 	.word	0x08007f25
 8006e6c:	08007e6d 	.word	0x08007e6d

08006e70 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b08a      	sub	sp, #40	; 0x28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e84:	2b20      	cmp	r3, #32
 8006e86:	d132      	bne.n	8006eee <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d002      	beq.n	8006e94 <HAL_UART_Receive_IT+0x24>
 8006e8e:	88fb      	ldrh	r3, [r7, #6]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e02b      	b.n	8006ef0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d018      	beq.n	8006ede <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	e853 3f00 	ldrex	r3, [r3]
 8006eb8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	623b      	str	r3, [r7, #32]
 8006ecc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ece:	69f9      	ldr	r1, [r7, #28]
 8006ed0:	6a3a      	ldr	r2, [r7, #32]
 8006ed2:	e841 2300 	strex	r3, r2, [r1]
 8006ed6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1e6      	bne.n	8006eac <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ede:	88fb      	ldrh	r3, [r7, #6]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	68b9      	ldr	r1, [r7, #8]
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f000 fe93 	bl	8007c10 <UART_Start_Receive_IT>
 8006eea:	4603      	mov	r3, r0
 8006eec:	e000      	b.n	8006ef0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006eee:	2302      	movs	r3, #2
  }
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3728      	adds	r7, #40	; 0x28
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b0ba      	sub	sp, #232	; 0xe8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006f22:	f640 030f 	movw	r3, #2063	; 0x80f
 8006f26:	4013      	ands	r3, r2
 8006f28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006f2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d115      	bne.n	8006f60 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f38:	f003 0320 	and.w	r3, r3, #32
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00f      	beq.n	8006f60 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f44:	f003 0320 	and.w	r3, r3, #32
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d009      	beq.n	8006f60 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 82ab 	beq.w	80074ac <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	4798      	blx	r3
      }
      return;
 8006f5e:	e2a5      	b.n	80074ac <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006f60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 8117 	beq.w	8007198 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d106      	bne.n	8006f84 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006f76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006f7a:	4b85      	ldr	r3, [pc, #532]	; (8007190 <HAL_UART_IRQHandler+0x298>)
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f000 810a 	beq.w	8007198 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d011      	beq.n	8006fb4 <HAL_UART_IRQHandler+0xbc>
 8006f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00b      	beq.n	8006fb4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006faa:	f043 0201 	orr.w	r2, r3, #1
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fb8:	f003 0302 	and.w	r3, r3, #2
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d011      	beq.n	8006fe4 <HAL_UART_IRQHandler+0xec>
 8006fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00b      	beq.n	8006fe4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2202      	movs	r2, #2
 8006fd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fda:	f043 0204 	orr.w	r2, r3, #4
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fe8:	f003 0304 	and.w	r3, r3, #4
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d011      	beq.n	8007014 <HAL_UART_IRQHandler+0x11c>
 8006ff0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ff4:	f003 0301 	and.w	r3, r3, #1
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00b      	beq.n	8007014 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2204      	movs	r2, #4
 8007002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800700a:	f043 0202 	orr.w	r2, r3, #2
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007018:	f003 0308 	and.w	r3, r3, #8
 800701c:	2b00      	cmp	r3, #0
 800701e:	d017      	beq.n	8007050 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007024:	f003 0320 	and.w	r3, r3, #32
 8007028:	2b00      	cmp	r3, #0
 800702a:	d105      	bne.n	8007038 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800702c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007030:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00b      	beq.n	8007050 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2208      	movs	r2, #8
 800703e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007046:	f043 0208 	orr.w	r2, r3, #8
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007058:	2b00      	cmp	r3, #0
 800705a:	d012      	beq.n	8007082 <HAL_UART_IRQHandler+0x18a>
 800705c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007060:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00c      	beq.n	8007082 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007070:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007078:	f043 0220 	orr.w	r2, r3, #32
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 8211 	beq.w	80074b0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800708e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007092:	f003 0320 	and.w	r3, r3, #32
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00d      	beq.n	80070b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800709a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800709e:	f003 0320 	and.w	r3, r3, #32
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d007      	beq.n	80070b6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ca:	2b40      	cmp	r3, #64	; 0x40
 80070cc:	d005      	beq.n	80070da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80070ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d04f      	beq.n	800717a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fe4c 	bl	8007d78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ea:	2b40      	cmp	r3, #64	; 0x40
 80070ec:	d141      	bne.n	8007172 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	3308      	adds	r3, #8
 80070f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070fc:	e853 3f00 	ldrex	r3, [r3]
 8007100:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007104:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800710c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3308      	adds	r3, #8
 8007116:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800711a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800711e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007122:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007126:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800712a:	e841 2300 	strex	r3, r2, [r1]
 800712e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1d9      	bne.n	80070ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800713e:	2b00      	cmp	r3, #0
 8007140:	d013      	beq.n	800716a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007146:	4a13      	ldr	r2, [pc, #76]	; (8007194 <HAL_UART_IRQHandler+0x29c>)
 8007148:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800714e:	4618      	mov	r0, r3
 8007150:	f7fc fb26 	bl	80037a0 <HAL_DMA_Abort_IT>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d017      	beq.n	800718a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800715e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007164:	4610      	mov	r0, r2
 8007166:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007168:	e00f      	b.n	800718a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f9b4 	bl	80074d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007170:	e00b      	b.n	800718a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f9b0 	bl	80074d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007178:	e007      	b.n	800718a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f9ac 	bl	80074d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007188:	e192      	b.n	80074b0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800718a:	bf00      	nop
    return;
 800718c:	e190      	b.n	80074b0 <HAL_UART_IRQHandler+0x5b8>
 800718e:	bf00      	nop
 8007190:	04000120 	.word	0x04000120
 8007194:	08007e41 	.word	0x08007e41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800719c:	2b01      	cmp	r3, #1
 800719e:	f040 814b 	bne.w	8007438 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80071a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a6:	f003 0310 	and.w	r3, r3, #16
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f000 8144 	beq.w	8007438 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80071b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071b4:	f003 0310 	and.w	r3, r3, #16
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f000 813d 	beq.w	8007438 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2210      	movs	r2, #16
 80071c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d0:	2b40      	cmp	r3, #64	; 0x40
 80071d2:	f040 80b5 	bne.w	8007340 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80071e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f000 8164 	beq.w	80074b4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80071f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80071f6:	429a      	cmp	r2, r3
 80071f8:	f080 815c 	bcs.w	80074b4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007202:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	2b20      	cmp	r3, #32
 800720e:	f000 8086 	beq.w	800731e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800721e:	e853 3f00 	ldrex	r3, [r3]
 8007222:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007226:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800722a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800722e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	461a      	mov	r2, r3
 8007238:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800723c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007240:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007244:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007248:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800724c:	e841 2300 	strex	r3, r2, [r1]
 8007250:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007254:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1da      	bne.n	8007212 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3308      	adds	r3, #8
 8007262:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007266:	e853 3f00 	ldrex	r3, [r3]
 800726a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800726c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800726e:	f023 0301 	bic.w	r3, r3, #1
 8007272:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	3308      	adds	r3, #8
 800727c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007280:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007284:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007286:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007288:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800728c:	e841 2300 	strex	r3, r2, [r1]
 8007290:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1e1      	bne.n	800725c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	3308      	adds	r3, #8
 800729e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072a2:	e853 3f00 	ldrex	r3, [r3]
 80072a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80072a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	3308      	adds	r3, #8
 80072b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80072bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80072be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80072c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80072c4:	e841 2300 	strex	r3, r2, [r1]
 80072c8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80072ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1e3      	bne.n	8007298 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2220      	movs	r2, #32
 80072d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072e6:	e853 3f00 	ldrex	r3, [r3]
 80072ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80072ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072ee:	f023 0310 	bic.w	r3, r3, #16
 80072f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	461a      	mov	r2, r3
 80072fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007300:	65bb      	str	r3, [r7, #88]	; 0x58
 8007302:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007304:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007306:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007308:	e841 2300 	strex	r3, r2, [r1]
 800730c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800730e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e4      	bne.n	80072de <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007318:	4618      	mov	r0, r3
 800731a:	f7fc fa08 	bl	800372e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2202      	movs	r2, #2
 8007322:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007330:	b29b      	uxth	r3, r3
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	b29b      	uxth	r3, r3
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f8d7 	bl	80074ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800733e:	e0b9      	b.n	80074b4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800734c:	b29b      	uxth	r3, r3
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800735a:	b29b      	uxth	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 80ab 	beq.w	80074b8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007362:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007366:	2b00      	cmp	r3, #0
 8007368:	f000 80a6 	beq.w	80074b8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007374:	e853 3f00 	ldrex	r3, [r3]
 8007378:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800737a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800737c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007380:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	461a      	mov	r2, r3
 800738a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800738e:	647b      	str	r3, [r7, #68]	; 0x44
 8007390:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007392:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007394:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007396:	e841 2300 	strex	r3, r2, [r1]
 800739a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800739c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1e4      	bne.n	800736c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	3308      	adds	r3, #8
 80073a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	e853 3f00 	ldrex	r3, [r3]
 80073b0:	623b      	str	r3, [r7, #32]
   return(result);
 80073b2:	6a3b      	ldr	r3, [r7, #32]
 80073b4:	f023 0301 	bic.w	r3, r3, #1
 80073b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3308      	adds	r3, #8
 80073c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80073c6:	633a      	str	r2, [r7, #48]	; 0x30
 80073c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ce:	e841 2300 	strex	r3, r2, [r1]
 80073d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1e3      	bne.n	80073a2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2220      	movs	r2, #32
 80073de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	e853 3f00 	ldrex	r3, [r3]
 80073fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f023 0310 	bic.w	r3, r3, #16
 8007402:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	461a      	mov	r2, r3
 800740c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007410:	61fb      	str	r3, [r7, #28]
 8007412:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007414:	69b9      	ldr	r1, [r7, #24]
 8007416:	69fa      	ldr	r2, [r7, #28]
 8007418:	e841 2300 	strex	r3, r2, [r1]
 800741c:	617b      	str	r3, [r7, #20]
   return(result);
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1e4      	bne.n	80073ee <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2202      	movs	r2, #2
 8007428:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800742a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f85b 	bl	80074ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007436:	e03f      	b.n	80074b8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800743c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00e      	beq.n	8007462 <HAL_UART_IRQHandler+0x56a>
 8007444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007448:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d008      	beq.n	8007462 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007458:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 ff94 	bl	8008388 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007460:	e02d      	b.n	80074be <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00e      	beq.n	800748c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800746e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007476:	2b00      	cmp	r3, #0
 8007478:	d008      	beq.n	800748c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800747e:	2b00      	cmp	r3, #0
 8007480:	d01c      	beq.n	80074bc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	4798      	blx	r3
    }
    return;
 800748a:	e017      	b.n	80074bc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800748c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007494:	2b00      	cmp	r3, #0
 8007496:	d012      	beq.n	80074be <HAL_UART_IRQHandler+0x5c6>
 8007498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800749c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00c      	beq.n	80074be <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fd9d 	bl	8007fe4 <UART_EndTransmit_IT>
    return;
 80074aa:	e008      	b.n	80074be <HAL_UART_IRQHandler+0x5c6>
      return;
 80074ac:	bf00      	nop
 80074ae:	e006      	b.n	80074be <HAL_UART_IRQHandler+0x5c6>
    return;
 80074b0:	bf00      	nop
 80074b2:	e004      	b.n	80074be <HAL_UART_IRQHandler+0x5c6>
      return;
 80074b4:	bf00      	nop
 80074b6:	e002      	b.n	80074be <HAL_UART_IRQHandler+0x5c6>
      return;
 80074b8:	bf00      	nop
 80074ba:	e000      	b.n	80074be <HAL_UART_IRQHandler+0x5c6>
    return;
 80074bc:	bf00      	nop
  }

}
 80074be:	37e8      	adds	r7, #232	; 0xe8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80074cc:	bf00      	nop
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	460b      	mov	r3, r1
 80074f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b088      	sub	sp, #32
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800750c:	2300      	movs	r3, #0
 800750e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689a      	ldr	r2, [r3, #8]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	431a      	orrs	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	431a      	orrs	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	4313      	orrs	r3, r2
 8007526:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007532:	f023 030c 	bic.w	r3, r3, #12
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	6812      	ldr	r2, [r2, #0]
 800753a:	6979      	ldr	r1, [r7, #20]
 800753c:	430b      	orrs	r3, r1
 800753e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68da      	ldr	r2, [r3, #12]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	430a      	orrs	r2, r1
 8007554:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a1b      	ldr	r3, [r3, #32]
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	4313      	orrs	r3, r2
 8007564:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	430a      	orrs	r2, r1
 8007578:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4aa7      	ldr	r2, [pc, #668]	; (800781c <UART_SetConfig+0x318>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d120      	bne.n	80075c6 <UART_SetConfig+0xc2>
 8007584:	4ba6      	ldr	r3, [pc, #664]	; (8007820 <UART_SetConfig+0x31c>)
 8007586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007588:	f003 0303 	and.w	r3, r3, #3
 800758c:	2b03      	cmp	r3, #3
 800758e:	d817      	bhi.n	80075c0 <UART_SetConfig+0xbc>
 8007590:	a201      	add	r2, pc, #4	; (adr r2, 8007598 <UART_SetConfig+0x94>)
 8007592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007596:	bf00      	nop
 8007598:	080075a9 	.word	0x080075a9
 800759c:	080075b5 	.word	0x080075b5
 80075a0:	080075bb 	.word	0x080075bb
 80075a4:	080075af 	.word	0x080075af
 80075a8:	2301      	movs	r3, #1
 80075aa:	77fb      	strb	r3, [r7, #31]
 80075ac:	e0b5      	b.n	800771a <UART_SetConfig+0x216>
 80075ae:	2302      	movs	r3, #2
 80075b0:	77fb      	strb	r3, [r7, #31]
 80075b2:	e0b2      	b.n	800771a <UART_SetConfig+0x216>
 80075b4:	2304      	movs	r3, #4
 80075b6:	77fb      	strb	r3, [r7, #31]
 80075b8:	e0af      	b.n	800771a <UART_SetConfig+0x216>
 80075ba:	2308      	movs	r3, #8
 80075bc:	77fb      	strb	r3, [r7, #31]
 80075be:	e0ac      	b.n	800771a <UART_SetConfig+0x216>
 80075c0:	2310      	movs	r3, #16
 80075c2:	77fb      	strb	r3, [r7, #31]
 80075c4:	e0a9      	b.n	800771a <UART_SetConfig+0x216>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a96      	ldr	r2, [pc, #600]	; (8007824 <UART_SetConfig+0x320>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d124      	bne.n	800761a <UART_SetConfig+0x116>
 80075d0:	4b93      	ldr	r3, [pc, #588]	; (8007820 <UART_SetConfig+0x31c>)
 80075d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80075d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80075dc:	d011      	beq.n	8007602 <UART_SetConfig+0xfe>
 80075de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80075e2:	d817      	bhi.n	8007614 <UART_SetConfig+0x110>
 80075e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075e8:	d011      	beq.n	800760e <UART_SetConfig+0x10a>
 80075ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075ee:	d811      	bhi.n	8007614 <UART_SetConfig+0x110>
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d003      	beq.n	80075fc <UART_SetConfig+0xf8>
 80075f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075f8:	d006      	beq.n	8007608 <UART_SetConfig+0x104>
 80075fa:	e00b      	b.n	8007614 <UART_SetConfig+0x110>
 80075fc:	2300      	movs	r3, #0
 80075fe:	77fb      	strb	r3, [r7, #31]
 8007600:	e08b      	b.n	800771a <UART_SetConfig+0x216>
 8007602:	2302      	movs	r3, #2
 8007604:	77fb      	strb	r3, [r7, #31]
 8007606:	e088      	b.n	800771a <UART_SetConfig+0x216>
 8007608:	2304      	movs	r3, #4
 800760a:	77fb      	strb	r3, [r7, #31]
 800760c:	e085      	b.n	800771a <UART_SetConfig+0x216>
 800760e:	2308      	movs	r3, #8
 8007610:	77fb      	strb	r3, [r7, #31]
 8007612:	e082      	b.n	800771a <UART_SetConfig+0x216>
 8007614:	2310      	movs	r3, #16
 8007616:	77fb      	strb	r3, [r7, #31]
 8007618:	e07f      	b.n	800771a <UART_SetConfig+0x216>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a82      	ldr	r2, [pc, #520]	; (8007828 <UART_SetConfig+0x324>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d124      	bne.n	800766e <UART_SetConfig+0x16a>
 8007624:	4b7e      	ldr	r3, [pc, #504]	; (8007820 <UART_SetConfig+0x31c>)
 8007626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007628:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800762c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007630:	d011      	beq.n	8007656 <UART_SetConfig+0x152>
 8007632:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007636:	d817      	bhi.n	8007668 <UART_SetConfig+0x164>
 8007638:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800763c:	d011      	beq.n	8007662 <UART_SetConfig+0x15e>
 800763e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007642:	d811      	bhi.n	8007668 <UART_SetConfig+0x164>
 8007644:	2b00      	cmp	r3, #0
 8007646:	d003      	beq.n	8007650 <UART_SetConfig+0x14c>
 8007648:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800764c:	d006      	beq.n	800765c <UART_SetConfig+0x158>
 800764e:	e00b      	b.n	8007668 <UART_SetConfig+0x164>
 8007650:	2300      	movs	r3, #0
 8007652:	77fb      	strb	r3, [r7, #31]
 8007654:	e061      	b.n	800771a <UART_SetConfig+0x216>
 8007656:	2302      	movs	r3, #2
 8007658:	77fb      	strb	r3, [r7, #31]
 800765a:	e05e      	b.n	800771a <UART_SetConfig+0x216>
 800765c:	2304      	movs	r3, #4
 800765e:	77fb      	strb	r3, [r7, #31]
 8007660:	e05b      	b.n	800771a <UART_SetConfig+0x216>
 8007662:	2308      	movs	r3, #8
 8007664:	77fb      	strb	r3, [r7, #31]
 8007666:	e058      	b.n	800771a <UART_SetConfig+0x216>
 8007668:	2310      	movs	r3, #16
 800766a:	77fb      	strb	r3, [r7, #31]
 800766c:	e055      	b.n	800771a <UART_SetConfig+0x216>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a6e      	ldr	r2, [pc, #440]	; (800782c <UART_SetConfig+0x328>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d124      	bne.n	80076c2 <UART_SetConfig+0x1be>
 8007678:	4b69      	ldr	r3, [pc, #420]	; (8007820 <UART_SetConfig+0x31c>)
 800767a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007680:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007684:	d011      	beq.n	80076aa <UART_SetConfig+0x1a6>
 8007686:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800768a:	d817      	bhi.n	80076bc <UART_SetConfig+0x1b8>
 800768c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007690:	d011      	beq.n	80076b6 <UART_SetConfig+0x1b2>
 8007692:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007696:	d811      	bhi.n	80076bc <UART_SetConfig+0x1b8>
 8007698:	2b00      	cmp	r3, #0
 800769a:	d003      	beq.n	80076a4 <UART_SetConfig+0x1a0>
 800769c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076a0:	d006      	beq.n	80076b0 <UART_SetConfig+0x1ac>
 80076a2:	e00b      	b.n	80076bc <UART_SetConfig+0x1b8>
 80076a4:	2300      	movs	r3, #0
 80076a6:	77fb      	strb	r3, [r7, #31]
 80076a8:	e037      	b.n	800771a <UART_SetConfig+0x216>
 80076aa:	2302      	movs	r3, #2
 80076ac:	77fb      	strb	r3, [r7, #31]
 80076ae:	e034      	b.n	800771a <UART_SetConfig+0x216>
 80076b0:	2304      	movs	r3, #4
 80076b2:	77fb      	strb	r3, [r7, #31]
 80076b4:	e031      	b.n	800771a <UART_SetConfig+0x216>
 80076b6:	2308      	movs	r3, #8
 80076b8:	77fb      	strb	r3, [r7, #31]
 80076ba:	e02e      	b.n	800771a <UART_SetConfig+0x216>
 80076bc:	2310      	movs	r3, #16
 80076be:	77fb      	strb	r3, [r7, #31]
 80076c0:	e02b      	b.n	800771a <UART_SetConfig+0x216>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a5a      	ldr	r2, [pc, #360]	; (8007830 <UART_SetConfig+0x32c>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d124      	bne.n	8007716 <UART_SetConfig+0x212>
 80076cc:	4b54      	ldr	r3, [pc, #336]	; (8007820 <UART_SetConfig+0x31c>)
 80076ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80076d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80076d8:	d011      	beq.n	80076fe <UART_SetConfig+0x1fa>
 80076da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80076de:	d817      	bhi.n	8007710 <UART_SetConfig+0x20c>
 80076e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076e4:	d011      	beq.n	800770a <UART_SetConfig+0x206>
 80076e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076ea:	d811      	bhi.n	8007710 <UART_SetConfig+0x20c>
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d003      	beq.n	80076f8 <UART_SetConfig+0x1f4>
 80076f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076f4:	d006      	beq.n	8007704 <UART_SetConfig+0x200>
 80076f6:	e00b      	b.n	8007710 <UART_SetConfig+0x20c>
 80076f8:	2300      	movs	r3, #0
 80076fa:	77fb      	strb	r3, [r7, #31]
 80076fc:	e00d      	b.n	800771a <UART_SetConfig+0x216>
 80076fe:	2302      	movs	r3, #2
 8007700:	77fb      	strb	r3, [r7, #31]
 8007702:	e00a      	b.n	800771a <UART_SetConfig+0x216>
 8007704:	2304      	movs	r3, #4
 8007706:	77fb      	strb	r3, [r7, #31]
 8007708:	e007      	b.n	800771a <UART_SetConfig+0x216>
 800770a:	2308      	movs	r3, #8
 800770c:	77fb      	strb	r3, [r7, #31]
 800770e:	e004      	b.n	800771a <UART_SetConfig+0x216>
 8007710:	2310      	movs	r3, #16
 8007712:	77fb      	strb	r3, [r7, #31]
 8007714:	e001      	b.n	800771a <UART_SetConfig+0x216>
 8007716:	2310      	movs	r3, #16
 8007718:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	69db      	ldr	r3, [r3, #28]
 800771e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007722:	d15b      	bne.n	80077dc <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8007724:	7ffb      	ldrb	r3, [r7, #31]
 8007726:	2b08      	cmp	r3, #8
 8007728:	d827      	bhi.n	800777a <UART_SetConfig+0x276>
 800772a:	a201      	add	r2, pc, #4	; (adr r2, 8007730 <UART_SetConfig+0x22c>)
 800772c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007730:	08007755 	.word	0x08007755
 8007734:	0800775d 	.word	0x0800775d
 8007738:	08007765 	.word	0x08007765
 800773c:	0800777b 	.word	0x0800777b
 8007740:	0800776b 	.word	0x0800776b
 8007744:	0800777b 	.word	0x0800777b
 8007748:	0800777b 	.word	0x0800777b
 800774c:	0800777b 	.word	0x0800777b
 8007750:	08007773 	.word	0x08007773
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007754:	f7fd fe34 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 8007758:	61b8      	str	r0, [r7, #24]
        break;
 800775a:	e013      	b.n	8007784 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800775c:	f7fd fe52 	bl	8005404 <HAL_RCC_GetPCLK2Freq>
 8007760:	61b8      	str	r0, [r7, #24]
        break;
 8007762:	e00f      	b.n	8007784 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007764:	4b33      	ldr	r3, [pc, #204]	; (8007834 <UART_SetConfig+0x330>)
 8007766:	61bb      	str	r3, [r7, #24]
        break;
 8007768:	e00c      	b.n	8007784 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800776a:	f7fd fdb3 	bl	80052d4 <HAL_RCC_GetSysClockFreq>
 800776e:	61b8      	str	r0, [r7, #24]
        break;
 8007770:	e008      	b.n	8007784 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007776:	61bb      	str	r3, [r7, #24]
        break;
 8007778:	e004      	b.n	8007784 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800777a:	2300      	movs	r3, #0
 800777c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	77bb      	strb	r3, [r7, #30]
        break;
 8007782:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	2b00      	cmp	r3, #0
 8007788:	f000 8082 	beq.w	8007890 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	005a      	lsls	r2, r3, #1
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	085b      	lsrs	r3, r3, #1
 8007796:	441a      	add	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	2b0f      	cmp	r3, #15
 80077a6:	d916      	bls.n	80077d6 <UART_SetConfig+0x2d2>
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077ae:	d212      	bcs.n	80077d6 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	f023 030f 	bic.w	r3, r3, #15
 80077b8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	085b      	lsrs	r3, r3, #1
 80077be:	b29b      	uxth	r3, r3
 80077c0:	f003 0307 	and.w	r3, r3, #7
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	89fb      	ldrh	r3, [r7, #14]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	89fa      	ldrh	r2, [r7, #14]
 80077d2:	60da      	str	r2, [r3, #12]
 80077d4:	e05c      	b.n	8007890 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	77bb      	strb	r3, [r7, #30]
 80077da:	e059      	b.n	8007890 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077dc:	7ffb      	ldrb	r3, [r7, #31]
 80077de:	2b08      	cmp	r3, #8
 80077e0:	d835      	bhi.n	800784e <UART_SetConfig+0x34a>
 80077e2:	a201      	add	r2, pc, #4	; (adr r2, 80077e8 <UART_SetConfig+0x2e4>)
 80077e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e8:	0800780d 	.word	0x0800780d
 80077ec:	08007815 	.word	0x08007815
 80077f0:	08007839 	.word	0x08007839
 80077f4:	0800784f 	.word	0x0800784f
 80077f8:	0800783f 	.word	0x0800783f
 80077fc:	0800784f 	.word	0x0800784f
 8007800:	0800784f 	.word	0x0800784f
 8007804:	0800784f 	.word	0x0800784f
 8007808:	08007847 	.word	0x08007847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800780c:	f7fd fdd8 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 8007810:	61b8      	str	r0, [r7, #24]
        break;
 8007812:	e021      	b.n	8007858 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007814:	f7fd fdf6 	bl	8005404 <HAL_RCC_GetPCLK2Freq>
 8007818:	61b8      	str	r0, [r7, #24]
        break;
 800781a:	e01d      	b.n	8007858 <UART_SetConfig+0x354>
 800781c:	40013800 	.word	0x40013800
 8007820:	40021000 	.word	0x40021000
 8007824:	40004400 	.word	0x40004400
 8007828:	40004800 	.word	0x40004800
 800782c:	40004c00 	.word	0x40004c00
 8007830:	40005000 	.word	0x40005000
 8007834:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007838:	4b1b      	ldr	r3, [pc, #108]	; (80078a8 <UART_SetConfig+0x3a4>)
 800783a:	61bb      	str	r3, [r7, #24]
        break;
 800783c:	e00c      	b.n	8007858 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800783e:	f7fd fd49 	bl	80052d4 <HAL_RCC_GetSysClockFreq>
 8007842:	61b8      	str	r0, [r7, #24]
        break;
 8007844:	e008      	b.n	8007858 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800784a:	61bb      	str	r3, [r7, #24]
        break;
 800784c:	e004      	b.n	8007858 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800784e:	2300      	movs	r3, #0
 8007850:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	77bb      	strb	r3, [r7, #30]
        break;
 8007856:	bf00      	nop
    }

    if (pclk != 0U)
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d018      	beq.n	8007890 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	085a      	lsrs	r2, r3, #1
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	441a      	add	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007870:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	2b0f      	cmp	r3, #15
 8007876:	d909      	bls.n	800788c <UART_SetConfig+0x388>
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800787e:	d205      	bcs.n	800788c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	b29a      	uxth	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	60da      	str	r2, [r3, #12]
 800788a:	e001      	b.n	8007890 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800789c:	7fbb      	ldrb	r3, [r7, #30]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3720      	adds	r7, #32
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	007a1200 	.word	0x007a1200

080078ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b8:	f003 0301 	and.w	r3, r3, #1
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00a      	beq.n	80078d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	430a      	orrs	r2, r1
 80078d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078da:	f003 0302 	and.w	r3, r3, #2
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00a      	beq.n	80078f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	430a      	orrs	r2, r1
 80078f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fc:	f003 0304 	and.w	r3, r3, #4
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00a      	beq.n	800791a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	430a      	orrs	r2, r1
 8007918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	f003 0308 	and.w	r3, r3, #8
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00a      	beq.n	800793c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007940:	f003 0310 	and.w	r3, r3, #16
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00a      	beq.n	800795e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	430a      	orrs	r2, r1
 800795c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007962:	f003 0320 	and.w	r3, r3, #32
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00a      	beq.n	8007980 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	430a      	orrs	r2, r1
 800797e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007988:	2b00      	cmp	r3, #0
 800798a:	d01a      	beq.n	80079c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	430a      	orrs	r2, r1
 80079a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079aa:	d10a      	bne.n	80079c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	430a      	orrs	r2, r1
 80079c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00a      	beq.n	80079e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	430a      	orrs	r2, r1
 80079e2:	605a      	str	r2, [r3, #4]
  }
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b098      	sub	sp, #96	; 0x60
 80079f4:	af02      	add	r7, sp, #8
 80079f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a00:	f7fa fa80 	bl	8001f04 <HAL_GetTick>
 8007a04:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0308 	and.w	r3, r3, #8
 8007a10:	2b08      	cmp	r3, #8
 8007a12:	d12e      	bne.n	8007a72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f88c 	bl	8007b40 <UART_WaitOnFlagUntilTimeout>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d021      	beq.n	8007a72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a36:	e853 3f00 	ldrex	r3, [r3]
 8007a3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a42:	653b      	str	r3, [r7, #80]	; 0x50
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a4c:	647b      	str	r3, [r7, #68]	; 0x44
 8007a4e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a54:	e841 2300 	strex	r3, r2, [r1]
 8007a58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e6      	bne.n	8007a2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2220      	movs	r2, #32
 8007a64:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e062      	b.n	8007b38 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0304 	and.w	r3, r3, #4
 8007a7c:	2b04      	cmp	r3, #4
 8007a7e:	d149      	bne.n	8007b14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f856 	bl	8007b40 <UART_WaitOnFlagUntilTimeout>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d03c      	beq.n	8007b14 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa2:	e853 3f00 	ldrex	r3, [r3]
 8007aa6:	623b      	str	r3, [r7, #32]
   return(result);
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ab8:	633b      	str	r3, [r7, #48]	; 0x30
 8007aba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ac0:	e841 2300 	strex	r3, r2, [r1]
 8007ac4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1e6      	bne.n	8007a9a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3308      	adds	r3, #8
 8007ad2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	e853 3f00 	ldrex	r3, [r3]
 8007ada:	60fb      	str	r3, [r7, #12]
   return(result);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0301 	bic.w	r3, r3, #1
 8007ae2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3308      	adds	r3, #8
 8007aea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aec:	61fa      	str	r2, [r7, #28]
 8007aee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af0:	69b9      	ldr	r1, [r7, #24]
 8007af2:	69fa      	ldr	r2, [r7, #28]
 8007af4:	e841 2300 	strex	r3, r2, [r1]
 8007af8:	617b      	str	r3, [r7, #20]
   return(result);
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1e5      	bne.n	8007acc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2220      	movs	r2, #32
 8007b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e011      	b.n	8007b38 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2220      	movs	r2, #32
 8007b18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3758      	adds	r7, #88	; 0x58
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	603b      	str	r3, [r7, #0]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b50:	e049      	b.n	8007be6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b58:	d045      	beq.n	8007be6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b5a:	f7fa f9d3 	bl	8001f04 <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d302      	bcc.n	8007b70 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e048      	b.n	8007c06 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 0304 	and.w	r3, r3, #4
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d031      	beq.n	8007be6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	f003 0308 	and.w	r3, r3, #8
 8007b8c:	2b08      	cmp	r3, #8
 8007b8e:	d110      	bne.n	8007bb2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2208      	movs	r2, #8
 8007b96:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 f8ed 	bl	8007d78 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2208      	movs	r2, #8
 8007ba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e029      	b.n	8007c06 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bc0:	d111      	bne.n	8007be6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f000 f8d3 	bl	8007d78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2220      	movs	r2, #32
 8007bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e00f      	b.n	8007c06 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	69da      	ldr	r2, [r3, #28]
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	4013      	ands	r3, r2
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	bf0c      	ite	eq
 8007bf6:	2301      	moveq	r3, #1
 8007bf8:	2300      	movne	r3, #0
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	79fb      	ldrb	r3, [r7, #7]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d0a6      	beq.n	8007b52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
	...

08007c10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b097      	sub	sp, #92	; 0x5c
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	88fa      	ldrh	r2, [r7, #6]
 8007c28:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	88fa      	ldrh	r2, [r7, #6]
 8007c30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c42:	d10e      	bne.n	8007c62 <UART_Start_Receive_IT+0x52>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d105      	bne.n	8007c58 <UART_Start_Receive_IT+0x48>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007c52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c56:	e01a      	b.n	8007c8e <UART_Start_Receive_IT+0x7e>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	22ff      	movs	r2, #255	; 0xff
 8007c5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c60:	e015      	b.n	8007c8e <UART_Start_Receive_IT+0x7e>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10d      	bne.n	8007c86 <UART_Start_Receive_IT+0x76>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d104      	bne.n	8007c7c <UART_Start_Receive_IT+0x6c>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	22ff      	movs	r2, #255	; 0xff
 8007c76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c7a:	e008      	b.n	8007c8e <UART_Start_Receive_IT+0x7e>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	227f      	movs	r2, #127	; 0x7f
 8007c80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c84:	e003      	b.n	8007c8e <UART_Start_Receive_IT+0x7e>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2222      	movs	r2, #34	; 0x22
 8007c9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	3308      	adds	r3, #8
 8007ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ca8:	e853 3f00 	ldrex	r3, [r3]
 8007cac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb0:	f043 0301 	orr.w	r3, r3, #1
 8007cb4:	657b      	str	r3, [r7, #84]	; 0x54
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3308      	adds	r3, #8
 8007cbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007cbe:	64ba      	str	r2, [r7, #72]	; 0x48
 8007cc0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007cc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cc6:	e841 2300 	strex	r3, r2, [r1]
 8007cca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1e5      	bne.n	8007c9e <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cda:	d107      	bne.n	8007cec <UART_Start_Receive_IT+0xdc>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d103      	bne.n	8007cec <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4a22      	ldr	r2, [pc, #136]	; (8007d70 <UART_Start_Receive_IT+0x160>)
 8007ce8:	669a      	str	r2, [r3, #104]	; 0x68
 8007cea:	e002      	b.n	8007cf2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4a21      	ldr	r2, [pc, #132]	; (8007d74 <UART_Start_Receive_IT+0x164>)
 8007cf0:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d019      	beq.n	8007d2e <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d02:	e853 3f00 	ldrex	r3, [r3]
 8007d06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	461a      	mov	r2, r3
 8007d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d18:	637b      	str	r3, [r7, #52]	; 0x34
 8007d1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d20:	e841 2300 	strex	r3, r2, [r1]
 8007d24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1e6      	bne.n	8007cfa <UART_Start_Receive_IT+0xea>
 8007d2c:	e018      	b.n	8007d60 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	e853 3f00 	ldrex	r3, [r3]
 8007d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	f043 0320 	orr.w	r3, r3, #32
 8007d42:	653b      	str	r3, [r7, #80]	; 0x50
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	461a      	mov	r2, r3
 8007d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d4c:	623b      	str	r3, [r7, #32]
 8007d4e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d50:	69f9      	ldr	r1, [r7, #28]
 8007d52:	6a3a      	ldr	r2, [r7, #32]
 8007d54:	e841 2300 	strex	r3, r2, [r1]
 8007d58:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1e6      	bne.n	8007d2e <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	375c      	adds	r7, #92	; 0x5c
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	080081e1 	.word	0x080081e1
 8007d74:	08008039 	.word	0x08008039

08007d78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b095      	sub	sp, #84	; 0x54
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d88:	e853 3f00 	ldrex	r3, [r3]
 8007d8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d9e:	643b      	str	r3, [r7, #64]	; 0x40
 8007da0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007da4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007da6:	e841 2300 	strex	r3, r2, [r1]
 8007daa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1e6      	bne.n	8007d80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3308      	adds	r3, #8
 8007db8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dba:	6a3b      	ldr	r3, [r7, #32]
 8007dbc:	e853 3f00 	ldrex	r3, [r3]
 8007dc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	f023 0301 	bic.w	r3, r3, #1
 8007dc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	3308      	adds	r3, #8
 8007dd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dda:	e841 2300 	strex	r3, r2, [r1]
 8007dde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1e5      	bne.n	8007db2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d118      	bne.n	8007e20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	e853 3f00 	ldrex	r3, [r3]
 8007dfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	f023 0310 	bic.w	r3, r3, #16
 8007e02:	647b      	str	r3, [r7, #68]	; 0x44
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e0c:	61bb      	str	r3, [r7, #24]
 8007e0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e10:	6979      	ldr	r1, [r7, #20]
 8007e12:	69ba      	ldr	r2, [r7, #24]
 8007e14:	e841 2300 	strex	r3, r2, [r1]
 8007e18:	613b      	str	r3, [r7, #16]
   return(result);
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1e6      	bne.n	8007dee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2220      	movs	r2, #32
 8007e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007e34:	bf00      	nop
 8007e36:	3754      	adds	r7, #84	; 0x54
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f7ff fb3a 	bl	80074d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e64:	bf00      	nop
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b08f      	sub	sp, #60	; 0x3c
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e78:	2b21      	cmp	r3, #33	; 0x21
 8007e7a:	d14d      	bne.n	8007f18 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d132      	bne.n	8007eee <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8e:	6a3b      	ldr	r3, [r7, #32]
 8007e90:	e853 3f00 	ldrex	r3, [r3]
 8007e94:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ea8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eae:	e841 2300 	strex	r3, r2, [r1]
 8007eb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1e6      	bne.n	8007e88 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	e853 3f00 	ldrex	r3, [r3]
 8007ec6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ece:	633b      	str	r3, [r7, #48]	; 0x30
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed8:	61bb      	str	r3, [r7, #24]
 8007eda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007edc:	6979      	ldr	r1, [r7, #20]
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	e841 2300 	strex	r3, r2, [r1]
 8007ee4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1e6      	bne.n	8007eba <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007eec:	e014      	b.n	8007f18 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ef2:	781a      	ldrb	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	b292      	uxth	r2, r2
 8007efa:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f00:	1c5a      	adds	r2, r3, #1
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007f18:	bf00      	nop
 8007f1a:	373c      	adds	r7, #60	; 0x3c
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b091      	sub	sp, #68	; 0x44
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f30:	2b21      	cmp	r3, #33	; 0x21
 8007f32:	d151      	bne.n	8007fd8 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d132      	bne.n	8007fa6 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	e853 3f00 	ldrex	r3, [r3]
 8007f4c:	623b      	str	r3, [r7, #32]
   return(result);
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f54:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5e:	633b      	str	r3, [r7, #48]	; 0x30
 8007f60:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f66:	e841 2300 	strex	r3, r2, [r1]
 8007f6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1e6      	bne.n	8007f40 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	e853 3f00 	ldrex	r3, [r3]
 8007f7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f86:	637b      	str	r3, [r7, #52]	; 0x34
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f90:	61fb      	str	r3, [r7, #28]
 8007f92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f94:	69b9      	ldr	r1, [r7, #24]
 8007f96:	69fa      	ldr	r2, [r7, #28]
 8007f98:	e841 2300 	strex	r3, r2, [r1]
 8007f9c:	617b      	str	r3, [r7, #20]
   return(result);
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1e6      	bne.n	8007f72 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007fa4:	e018      	b.n	8007fd8 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007faa:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fae:	881a      	ldrh	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fb8:	b292      	uxth	r2, r2
 8007fba:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fc0:	1c9a      	adds	r2, r3, #2
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007fd8:	bf00      	nop
 8007fda:	3744      	adds	r7, #68	; 0x44
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b088      	sub	sp, #32
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	e853 3f00 	ldrex	r3, [r3]
 8007ff8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008000:	61fb      	str	r3, [r7, #28]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	461a      	mov	r2, r3
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	61bb      	str	r3, [r7, #24]
 800800c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800e:	6979      	ldr	r1, [r7, #20]
 8008010:	69ba      	ldr	r2, [r7, #24]
 8008012:	e841 2300 	strex	r3, r2, [r1]
 8008016:	613b      	str	r3, [r7, #16]
   return(result);
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1e6      	bne.n	8007fec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2220      	movs	r2, #32
 8008022:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7ff fa4a 	bl	80074c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008030:	bf00      	nop
 8008032:	3720      	adds	r7, #32
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b09c      	sub	sp, #112	; 0x70
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008046:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008050:	2b22      	cmp	r3, #34	; 0x22
 8008052:	f040 80b9 	bne.w	80081c8 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800805c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008060:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008064:	b2d9      	uxtb	r1, r3
 8008066:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800806a:	b2da      	uxtb	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008070:	400a      	ands	r2, r1
 8008072:	b2d2      	uxtb	r2, r2
 8008074:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800807a:	1c5a      	adds	r2, r3, #1
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008086:	b29b      	uxth	r3, r3
 8008088:	3b01      	subs	r3, #1
 800808a:	b29a      	uxth	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008098:	b29b      	uxth	r3, r3
 800809a:	2b00      	cmp	r3, #0
 800809c:	f040 809c 	bne.w	80081d8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080a8:	e853 3f00 	ldrex	r3, [r3]
 80080ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80080ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	461a      	mov	r2, r3
 80080bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80080be:	65bb      	str	r3, [r7, #88]	; 0x58
 80080c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80080c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80080c6:	e841 2300 	strex	r3, r2, [r1]
 80080ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80080cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1e6      	bne.n	80080a0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	3308      	adds	r3, #8
 80080d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080dc:	e853 3f00 	ldrex	r3, [r3]
 80080e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e4:	f023 0301 	bic.w	r3, r3, #1
 80080e8:	667b      	str	r3, [r7, #100]	; 0x64
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	3308      	adds	r3, #8
 80080f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80080f2:	647a      	str	r2, [r7, #68]	; 0x44
 80080f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080fa:	e841 2300 	strex	r3, r2, [r1]
 80080fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1e5      	bne.n	80080d2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2220      	movs	r2, #32
 800810a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008124:	2b00      	cmp	r3, #0
 8008126:	d018      	beq.n	800815a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008130:	e853 3f00 	ldrex	r3, [r3]
 8008134:	623b      	str	r3, [r7, #32]
   return(result);
 8008136:	6a3b      	ldr	r3, [r7, #32]
 8008138:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800813c:	663b      	str	r3, [r7, #96]	; 0x60
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	461a      	mov	r2, r3
 8008144:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008146:	633b      	str	r3, [r7, #48]	; 0x30
 8008148:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800814c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800814e:	e841 2300 	strex	r3, r2, [r1]
 8008152:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1e6      	bne.n	8008128 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800815e:	2b01      	cmp	r3, #1
 8008160:	d12e      	bne.n	80081c0 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	e853 3f00 	ldrex	r3, [r3]
 8008174:	60fb      	str	r3, [r7, #12]
   return(result);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f023 0310 	bic.w	r3, r3, #16
 800817c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	461a      	mov	r2, r3
 8008184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008186:	61fb      	str	r3, [r7, #28]
 8008188:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818a:	69b9      	ldr	r1, [r7, #24]
 800818c:	69fa      	ldr	r2, [r7, #28]
 800818e:	e841 2300 	strex	r3, r2, [r1]
 8008192:	617b      	str	r3, [r7, #20]
   return(result);
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1e6      	bne.n	8008168 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	69db      	ldr	r3, [r3, #28]
 80081a0:	f003 0310 	and.w	r3, r3, #16
 80081a4:	2b10      	cmp	r3, #16
 80081a6:	d103      	bne.n	80081b0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2210      	movs	r2, #16
 80081ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7ff f997 	bl	80074ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081be:	e00b      	b.n	80081d8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f7f8 fa69 	bl	8000698 <HAL_UART_RxCpltCallback>
}
 80081c6:	e007      	b.n	80081d8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	699a      	ldr	r2, [r3, #24]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f042 0208 	orr.w	r2, r2, #8
 80081d6:	619a      	str	r2, [r3, #24]
}
 80081d8:	bf00      	nop
 80081da:	3770      	adds	r7, #112	; 0x70
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b09c      	sub	sp, #112	; 0x70
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80081ee:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081f8:	2b22      	cmp	r3, #34	; 0x22
 80081fa:	f040 80b9 	bne.w	8008370 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008204:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800820c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800820e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008212:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008216:	4013      	ands	r3, r2
 8008218:	b29a      	uxth	r2, r3
 800821a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800821c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008222:	1c9a      	adds	r2, r3, #2
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800822e:	b29b      	uxth	r3, r3
 8008230:	3b01      	subs	r3, #1
 8008232:	b29a      	uxth	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008240:	b29b      	uxth	r3, r3
 8008242:	2b00      	cmp	r3, #0
 8008244:	f040 809c 	bne.w	8008380 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008250:	e853 3f00 	ldrex	r3, [r3]
 8008254:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008258:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800825c:	667b      	str	r3, [r7, #100]	; 0x64
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	461a      	mov	r2, r3
 8008264:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008266:	657b      	str	r3, [r7, #84]	; 0x54
 8008268:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800826c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800826e:	e841 2300 	strex	r3, r2, [r1]
 8008272:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1e6      	bne.n	8008248 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	3308      	adds	r3, #8
 8008280:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008284:	e853 3f00 	ldrex	r3, [r3]
 8008288:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828c:	f023 0301 	bic.w	r3, r3, #1
 8008290:	663b      	str	r3, [r7, #96]	; 0x60
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3308      	adds	r3, #8
 8008298:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800829a:	643a      	str	r2, [r7, #64]	; 0x40
 800829c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082a2:	e841 2300 	strex	r3, r2, [r1]
 80082a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1e5      	bne.n	800827a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2220      	movs	r2, #32
 80082b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d018      	beq.n	8008302 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d6:	6a3b      	ldr	r3, [r7, #32]
 80082d8:	e853 3f00 	ldrex	r3, [r3]
 80082dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80082e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	461a      	mov	r2, r3
 80082ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082f0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082f6:	e841 2300 	strex	r3, r2, [r1]
 80082fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1e6      	bne.n	80082d0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008306:	2b01      	cmp	r3, #1
 8008308:	d12e      	bne.n	8008368 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	e853 3f00 	ldrex	r3, [r3]
 800831c:	60bb      	str	r3, [r7, #8]
   return(result);
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	f023 0310 	bic.w	r3, r3, #16
 8008324:	65bb      	str	r3, [r7, #88]	; 0x58
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	461a      	mov	r2, r3
 800832c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800832e:	61bb      	str	r3, [r7, #24]
 8008330:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008332:	6979      	ldr	r1, [r7, #20]
 8008334:	69ba      	ldr	r2, [r7, #24]
 8008336:	e841 2300 	strex	r3, r2, [r1]
 800833a:	613b      	str	r3, [r7, #16]
   return(result);
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1e6      	bne.n	8008310 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	69db      	ldr	r3, [r3, #28]
 8008348:	f003 0310 	and.w	r3, r3, #16
 800834c:	2b10      	cmp	r3, #16
 800834e:	d103      	bne.n	8008358 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2210      	movs	r2, #16
 8008356:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7ff f8c3 	bl	80074ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008366:	e00b      	b.n	8008380 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f7f8 f995 	bl	8000698 <HAL_UART_RxCpltCallback>
}
 800836e:	e007      	b.n	8008380 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	699a      	ldr	r2, [r3, #24]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f042 0208 	orr.w	r2, r2, #8
 800837e:	619a      	str	r2, [r3, #24]
}
 8008380:	bf00      	nop
 8008382:	3770      	adds	r7, #112	; 0x70
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80083a4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80083a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	43db      	mvns	r3, r3
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	4013      	ands	r3, r2
 80083bc:	b29a      	uxth	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80083d2:	b084      	sub	sp, #16
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	f107 0014 	add.w	r0, r7, #20
 80083e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	370c      	adds	r7, #12
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	b004      	add	sp, #16
 8008412:	4770      	bx	lr

08008414 <__errno>:
 8008414:	4b01      	ldr	r3, [pc, #4]	; (800841c <__errno+0x8>)
 8008416:	6818      	ldr	r0, [r3, #0]
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	20000064 	.word	0x20000064

08008420 <__libc_init_array>:
 8008420:	b570      	push	{r4, r5, r6, lr}
 8008422:	4d0d      	ldr	r5, [pc, #52]	; (8008458 <__libc_init_array+0x38>)
 8008424:	4c0d      	ldr	r4, [pc, #52]	; (800845c <__libc_init_array+0x3c>)
 8008426:	1b64      	subs	r4, r4, r5
 8008428:	10a4      	asrs	r4, r4, #2
 800842a:	2600      	movs	r6, #0
 800842c:	42a6      	cmp	r6, r4
 800842e:	d109      	bne.n	8008444 <__libc_init_array+0x24>
 8008430:	4d0b      	ldr	r5, [pc, #44]	; (8008460 <__libc_init_array+0x40>)
 8008432:	4c0c      	ldr	r4, [pc, #48]	; (8008464 <__libc_init_array+0x44>)
 8008434:	f001 f8b2 	bl	800959c <_init>
 8008438:	1b64      	subs	r4, r4, r5
 800843a:	10a4      	asrs	r4, r4, #2
 800843c:	2600      	movs	r6, #0
 800843e:	42a6      	cmp	r6, r4
 8008440:	d105      	bne.n	800844e <__libc_init_array+0x2e>
 8008442:	bd70      	pop	{r4, r5, r6, pc}
 8008444:	f855 3b04 	ldr.w	r3, [r5], #4
 8008448:	4798      	blx	r3
 800844a:	3601      	adds	r6, #1
 800844c:	e7ee      	b.n	800842c <__libc_init_array+0xc>
 800844e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008452:	4798      	blx	r3
 8008454:	3601      	adds	r6, #1
 8008456:	e7f2      	b.n	800843e <__libc_init_array+0x1e>
 8008458:	0800ca3c 	.word	0x0800ca3c
 800845c:	0800ca3c 	.word	0x0800ca3c
 8008460:	0800ca3c 	.word	0x0800ca3c
 8008464:	0800ca40 	.word	0x0800ca40

08008468 <malloc>:
 8008468:	4b02      	ldr	r3, [pc, #8]	; (8008474 <malloc+0xc>)
 800846a:	4601      	mov	r1, r0
 800846c:	6818      	ldr	r0, [r3, #0]
 800846e:	f000 b885 	b.w	800857c <_malloc_r>
 8008472:	bf00      	nop
 8008474:	20000064 	.word	0x20000064

08008478 <memcpy>:
 8008478:	440a      	add	r2, r1
 800847a:	4291      	cmp	r1, r2
 800847c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008480:	d100      	bne.n	8008484 <memcpy+0xc>
 8008482:	4770      	bx	lr
 8008484:	b510      	push	{r4, lr}
 8008486:	f811 4b01 	ldrb.w	r4, [r1], #1
 800848a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800848e:	4291      	cmp	r1, r2
 8008490:	d1f9      	bne.n	8008486 <memcpy+0xe>
 8008492:	bd10      	pop	{r4, pc}

08008494 <memset>:
 8008494:	4402      	add	r2, r0
 8008496:	4603      	mov	r3, r0
 8008498:	4293      	cmp	r3, r2
 800849a:	d100      	bne.n	800849e <memset+0xa>
 800849c:	4770      	bx	lr
 800849e:	f803 1b01 	strb.w	r1, [r3], #1
 80084a2:	e7f9      	b.n	8008498 <memset+0x4>

080084a4 <_free_r>:
 80084a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084a6:	2900      	cmp	r1, #0
 80084a8:	d044      	beq.n	8008534 <_free_r+0x90>
 80084aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084ae:	9001      	str	r0, [sp, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f1a1 0404 	sub.w	r4, r1, #4
 80084b6:	bfb8      	it	lt
 80084b8:	18e4      	addlt	r4, r4, r3
 80084ba:	f000 f99d 	bl	80087f8 <__malloc_lock>
 80084be:	4a1e      	ldr	r2, [pc, #120]	; (8008538 <_free_r+0x94>)
 80084c0:	9801      	ldr	r0, [sp, #4]
 80084c2:	6813      	ldr	r3, [r2, #0]
 80084c4:	b933      	cbnz	r3, 80084d4 <_free_r+0x30>
 80084c6:	6063      	str	r3, [r4, #4]
 80084c8:	6014      	str	r4, [r2, #0]
 80084ca:	b003      	add	sp, #12
 80084cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084d0:	f000 b998 	b.w	8008804 <__malloc_unlock>
 80084d4:	42a3      	cmp	r3, r4
 80084d6:	d908      	bls.n	80084ea <_free_r+0x46>
 80084d8:	6825      	ldr	r5, [r4, #0]
 80084da:	1961      	adds	r1, r4, r5
 80084dc:	428b      	cmp	r3, r1
 80084de:	bf01      	itttt	eq
 80084e0:	6819      	ldreq	r1, [r3, #0]
 80084e2:	685b      	ldreq	r3, [r3, #4]
 80084e4:	1949      	addeq	r1, r1, r5
 80084e6:	6021      	streq	r1, [r4, #0]
 80084e8:	e7ed      	b.n	80084c6 <_free_r+0x22>
 80084ea:	461a      	mov	r2, r3
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	b10b      	cbz	r3, 80084f4 <_free_r+0x50>
 80084f0:	42a3      	cmp	r3, r4
 80084f2:	d9fa      	bls.n	80084ea <_free_r+0x46>
 80084f4:	6811      	ldr	r1, [r2, #0]
 80084f6:	1855      	adds	r5, r2, r1
 80084f8:	42a5      	cmp	r5, r4
 80084fa:	d10b      	bne.n	8008514 <_free_r+0x70>
 80084fc:	6824      	ldr	r4, [r4, #0]
 80084fe:	4421      	add	r1, r4
 8008500:	1854      	adds	r4, r2, r1
 8008502:	42a3      	cmp	r3, r4
 8008504:	6011      	str	r1, [r2, #0]
 8008506:	d1e0      	bne.n	80084ca <_free_r+0x26>
 8008508:	681c      	ldr	r4, [r3, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	6053      	str	r3, [r2, #4]
 800850e:	4421      	add	r1, r4
 8008510:	6011      	str	r1, [r2, #0]
 8008512:	e7da      	b.n	80084ca <_free_r+0x26>
 8008514:	d902      	bls.n	800851c <_free_r+0x78>
 8008516:	230c      	movs	r3, #12
 8008518:	6003      	str	r3, [r0, #0]
 800851a:	e7d6      	b.n	80084ca <_free_r+0x26>
 800851c:	6825      	ldr	r5, [r4, #0]
 800851e:	1961      	adds	r1, r4, r5
 8008520:	428b      	cmp	r3, r1
 8008522:	bf04      	itt	eq
 8008524:	6819      	ldreq	r1, [r3, #0]
 8008526:	685b      	ldreq	r3, [r3, #4]
 8008528:	6063      	str	r3, [r4, #4]
 800852a:	bf04      	itt	eq
 800852c:	1949      	addeq	r1, r1, r5
 800852e:	6021      	streq	r1, [r4, #0]
 8008530:	6054      	str	r4, [r2, #4]
 8008532:	e7ca      	b.n	80084ca <_free_r+0x26>
 8008534:	b003      	add	sp, #12
 8008536:	bd30      	pop	{r4, r5, pc}
 8008538:	20000718 	.word	0x20000718

0800853c <sbrk_aligned>:
 800853c:	b570      	push	{r4, r5, r6, lr}
 800853e:	4e0e      	ldr	r6, [pc, #56]	; (8008578 <sbrk_aligned+0x3c>)
 8008540:	460c      	mov	r4, r1
 8008542:	6831      	ldr	r1, [r6, #0]
 8008544:	4605      	mov	r5, r0
 8008546:	b911      	cbnz	r1, 800854e <sbrk_aligned+0x12>
 8008548:	f000 f8f8 	bl	800873c <_sbrk_r>
 800854c:	6030      	str	r0, [r6, #0]
 800854e:	4621      	mov	r1, r4
 8008550:	4628      	mov	r0, r5
 8008552:	f000 f8f3 	bl	800873c <_sbrk_r>
 8008556:	1c43      	adds	r3, r0, #1
 8008558:	d00a      	beq.n	8008570 <sbrk_aligned+0x34>
 800855a:	1cc4      	adds	r4, r0, #3
 800855c:	f024 0403 	bic.w	r4, r4, #3
 8008560:	42a0      	cmp	r0, r4
 8008562:	d007      	beq.n	8008574 <sbrk_aligned+0x38>
 8008564:	1a21      	subs	r1, r4, r0
 8008566:	4628      	mov	r0, r5
 8008568:	f000 f8e8 	bl	800873c <_sbrk_r>
 800856c:	3001      	adds	r0, #1
 800856e:	d101      	bne.n	8008574 <sbrk_aligned+0x38>
 8008570:	f04f 34ff 	mov.w	r4, #4294967295
 8008574:	4620      	mov	r0, r4
 8008576:	bd70      	pop	{r4, r5, r6, pc}
 8008578:	2000071c 	.word	0x2000071c

0800857c <_malloc_r>:
 800857c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008580:	1ccd      	adds	r5, r1, #3
 8008582:	f025 0503 	bic.w	r5, r5, #3
 8008586:	3508      	adds	r5, #8
 8008588:	2d0c      	cmp	r5, #12
 800858a:	bf38      	it	cc
 800858c:	250c      	movcc	r5, #12
 800858e:	2d00      	cmp	r5, #0
 8008590:	4607      	mov	r7, r0
 8008592:	db01      	blt.n	8008598 <_malloc_r+0x1c>
 8008594:	42a9      	cmp	r1, r5
 8008596:	d905      	bls.n	80085a4 <_malloc_r+0x28>
 8008598:	230c      	movs	r3, #12
 800859a:	603b      	str	r3, [r7, #0]
 800859c:	2600      	movs	r6, #0
 800859e:	4630      	mov	r0, r6
 80085a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085a4:	4e2e      	ldr	r6, [pc, #184]	; (8008660 <_malloc_r+0xe4>)
 80085a6:	f000 f927 	bl	80087f8 <__malloc_lock>
 80085aa:	6833      	ldr	r3, [r6, #0]
 80085ac:	461c      	mov	r4, r3
 80085ae:	bb34      	cbnz	r4, 80085fe <_malloc_r+0x82>
 80085b0:	4629      	mov	r1, r5
 80085b2:	4638      	mov	r0, r7
 80085b4:	f7ff ffc2 	bl	800853c <sbrk_aligned>
 80085b8:	1c43      	adds	r3, r0, #1
 80085ba:	4604      	mov	r4, r0
 80085bc:	d14d      	bne.n	800865a <_malloc_r+0xde>
 80085be:	6834      	ldr	r4, [r6, #0]
 80085c0:	4626      	mov	r6, r4
 80085c2:	2e00      	cmp	r6, #0
 80085c4:	d140      	bne.n	8008648 <_malloc_r+0xcc>
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	4631      	mov	r1, r6
 80085ca:	4638      	mov	r0, r7
 80085cc:	eb04 0803 	add.w	r8, r4, r3
 80085d0:	f000 f8b4 	bl	800873c <_sbrk_r>
 80085d4:	4580      	cmp	r8, r0
 80085d6:	d13a      	bne.n	800864e <_malloc_r+0xd2>
 80085d8:	6821      	ldr	r1, [r4, #0]
 80085da:	3503      	adds	r5, #3
 80085dc:	1a6d      	subs	r5, r5, r1
 80085de:	f025 0503 	bic.w	r5, r5, #3
 80085e2:	3508      	adds	r5, #8
 80085e4:	2d0c      	cmp	r5, #12
 80085e6:	bf38      	it	cc
 80085e8:	250c      	movcc	r5, #12
 80085ea:	4629      	mov	r1, r5
 80085ec:	4638      	mov	r0, r7
 80085ee:	f7ff ffa5 	bl	800853c <sbrk_aligned>
 80085f2:	3001      	adds	r0, #1
 80085f4:	d02b      	beq.n	800864e <_malloc_r+0xd2>
 80085f6:	6823      	ldr	r3, [r4, #0]
 80085f8:	442b      	add	r3, r5
 80085fa:	6023      	str	r3, [r4, #0]
 80085fc:	e00e      	b.n	800861c <_malloc_r+0xa0>
 80085fe:	6822      	ldr	r2, [r4, #0]
 8008600:	1b52      	subs	r2, r2, r5
 8008602:	d41e      	bmi.n	8008642 <_malloc_r+0xc6>
 8008604:	2a0b      	cmp	r2, #11
 8008606:	d916      	bls.n	8008636 <_malloc_r+0xba>
 8008608:	1961      	adds	r1, r4, r5
 800860a:	42a3      	cmp	r3, r4
 800860c:	6025      	str	r5, [r4, #0]
 800860e:	bf18      	it	ne
 8008610:	6059      	strne	r1, [r3, #4]
 8008612:	6863      	ldr	r3, [r4, #4]
 8008614:	bf08      	it	eq
 8008616:	6031      	streq	r1, [r6, #0]
 8008618:	5162      	str	r2, [r4, r5]
 800861a:	604b      	str	r3, [r1, #4]
 800861c:	4638      	mov	r0, r7
 800861e:	f104 060b 	add.w	r6, r4, #11
 8008622:	f000 f8ef 	bl	8008804 <__malloc_unlock>
 8008626:	f026 0607 	bic.w	r6, r6, #7
 800862a:	1d23      	adds	r3, r4, #4
 800862c:	1af2      	subs	r2, r6, r3
 800862e:	d0b6      	beq.n	800859e <_malloc_r+0x22>
 8008630:	1b9b      	subs	r3, r3, r6
 8008632:	50a3      	str	r3, [r4, r2]
 8008634:	e7b3      	b.n	800859e <_malloc_r+0x22>
 8008636:	6862      	ldr	r2, [r4, #4]
 8008638:	42a3      	cmp	r3, r4
 800863a:	bf0c      	ite	eq
 800863c:	6032      	streq	r2, [r6, #0]
 800863e:	605a      	strne	r2, [r3, #4]
 8008640:	e7ec      	b.n	800861c <_malloc_r+0xa0>
 8008642:	4623      	mov	r3, r4
 8008644:	6864      	ldr	r4, [r4, #4]
 8008646:	e7b2      	b.n	80085ae <_malloc_r+0x32>
 8008648:	4634      	mov	r4, r6
 800864a:	6876      	ldr	r6, [r6, #4]
 800864c:	e7b9      	b.n	80085c2 <_malloc_r+0x46>
 800864e:	230c      	movs	r3, #12
 8008650:	603b      	str	r3, [r7, #0]
 8008652:	4638      	mov	r0, r7
 8008654:	f000 f8d6 	bl	8008804 <__malloc_unlock>
 8008658:	e7a1      	b.n	800859e <_malloc_r+0x22>
 800865a:	6025      	str	r5, [r4, #0]
 800865c:	e7de      	b.n	800861c <_malloc_r+0xa0>
 800865e:	bf00      	nop
 8008660:	20000718 	.word	0x20000718

08008664 <srand>:
 8008664:	b538      	push	{r3, r4, r5, lr}
 8008666:	4b10      	ldr	r3, [pc, #64]	; (80086a8 <srand+0x44>)
 8008668:	681d      	ldr	r5, [r3, #0]
 800866a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800866c:	4604      	mov	r4, r0
 800866e:	b9b3      	cbnz	r3, 800869e <srand+0x3a>
 8008670:	2018      	movs	r0, #24
 8008672:	f7ff fef9 	bl	8008468 <malloc>
 8008676:	4602      	mov	r2, r0
 8008678:	63a8      	str	r0, [r5, #56]	; 0x38
 800867a:	b920      	cbnz	r0, 8008686 <srand+0x22>
 800867c:	4b0b      	ldr	r3, [pc, #44]	; (80086ac <srand+0x48>)
 800867e:	480c      	ldr	r0, [pc, #48]	; (80086b0 <srand+0x4c>)
 8008680:	2142      	movs	r1, #66	; 0x42
 8008682:	f000 f889 	bl	8008798 <__assert_func>
 8008686:	490b      	ldr	r1, [pc, #44]	; (80086b4 <srand+0x50>)
 8008688:	4b0b      	ldr	r3, [pc, #44]	; (80086b8 <srand+0x54>)
 800868a:	e9c0 1300 	strd	r1, r3, [r0]
 800868e:	4b0b      	ldr	r3, [pc, #44]	; (80086bc <srand+0x58>)
 8008690:	6083      	str	r3, [r0, #8]
 8008692:	230b      	movs	r3, #11
 8008694:	8183      	strh	r3, [r0, #12]
 8008696:	2100      	movs	r1, #0
 8008698:	2001      	movs	r0, #1
 800869a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800869e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80086a0:	2200      	movs	r2, #0
 80086a2:	611c      	str	r4, [r3, #16]
 80086a4:	615a      	str	r2, [r3, #20]
 80086a6:	bd38      	pop	{r3, r4, r5, pc}
 80086a8:	20000064 	.word	0x20000064
 80086ac:	0800c8f8 	.word	0x0800c8f8
 80086b0:	0800c90f 	.word	0x0800c90f
 80086b4:	abcd330e 	.word	0xabcd330e
 80086b8:	e66d1234 	.word	0xe66d1234
 80086bc:	0005deec 	.word	0x0005deec

080086c0 <rand>:
 80086c0:	4b16      	ldr	r3, [pc, #88]	; (800871c <rand+0x5c>)
 80086c2:	b510      	push	{r4, lr}
 80086c4:	681c      	ldr	r4, [r3, #0]
 80086c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80086c8:	b9b3      	cbnz	r3, 80086f8 <rand+0x38>
 80086ca:	2018      	movs	r0, #24
 80086cc:	f7ff fecc 	bl	8008468 <malloc>
 80086d0:	63a0      	str	r0, [r4, #56]	; 0x38
 80086d2:	b928      	cbnz	r0, 80086e0 <rand+0x20>
 80086d4:	4602      	mov	r2, r0
 80086d6:	4b12      	ldr	r3, [pc, #72]	; (8008720 <rand+0x60>)
 80086d8:	4812      	ldr	r0, [pc, #72]	; (8008724 <rand+0x64>)
 80086da:	214e      	movs	r1, #78	; 0x4e
 80086dc:	f000 f85c 	bl	8008798 <__assert_func>
 80086e0:	4a11      	ldr	r2, [pc, #68]	; (8008728 <rand+0x68>)
 80086e2:	4b12      	ldr	r3, [pc, #72]	; (800872c <rand+0x6c>)
 80086e4:	e9c0 2300 	strd	r2, r3, [r0]
 80086e8:	4b11      	ldr	r3, [pc, #68]	; (8008730 <rand+0x70>)
 80086ea:	6083      	str	r3, [r0, #8]
 80086ec:	230b      	movs	r3, #11
 80086ee:	8183      	strh	r3, [r0, #12]
 80086f0:	2201      	movs	r2, #1
 80086f2:	2300      	movs	r3, #0
 80086f4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80086f8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80086fa:	4a0e      	ldr	r2, [pc, #56]	; (8008734 <rand+0x74>)
 80086fc:	6920      	ldr	r0, [r4, #16]
 80086fe:	6963      	ldr	r3, [r4, #20]
 8008700:	490d      	ldr	r1, [pc, #52]	; (8008738 <rand+0x78>)
 8008702:	4342      	muls	r2, r0
 8008704:	fb01 2203 	mla	r2, r1, r3, r2
 8008708:	fba0 0101 	umull	r0, r1, r0, r1
 800870c:	1c43      	adds	r3, r0, #1
 800870e:	eb42 0001 	adc.w	r0, r2, r1
 8008712:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8008716:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800871a:	bd10      	pop	{r4, pc}
 800871c:	20000064 	.word	0x20000064
 8008720:	0800c8f8 	.word	0x0800c8f8
 8008724:	0800c90f 	.word	0x0800c90f
 8008728:	abcd330e 	.word	0xabcd330e
 800872c:	e66d1234 	.word	0xe66d1234
 8008730:	0005deec 	.word	0x0005deec
 8008734:	5851f42d 	.word	0x5851f42d
 8008738:	4c957f2d 	.word	0x4c957f2d

0800873c <_sbrk_r>:
 800873c:	b538      	push	{r3, r4, r5, lr}
 800873e:	4d06      	ldr	r5, [pc, #24]	; (8008758 <_sbrk_r+0x1c>)
 8008740:	2300      	movs	r3, #0
 8008742:	4604      	mov	r4, r0
 8008744:	4608      	mov	r0, r1
 8008746:	602b      	str	r3, [r5, #0]
 8008748:	f7f9 fb10 	bl	8001d6c <_sbrk>
 800874c:	1c43      	adds	r3, r0, #1
 800874e:	d102      	bne.n	8008756 <_sbrk_r+0x1a>
 8008750:	682b      	ldr	r3, [r5, #0]
 8008752:	b103      	cbz	r3, 8008756 <_sbrk_r+0x1a>
 8008754:	6023      	str	r3, [r4, #0]
 8008756:	bd38      	pop	{r3, r4, r5, pc}
 8008758:	20000720 	.word	0x20000720

0800875c <strdup>:
 800875c:	4b02      	ldr	r3, [pc, #8]	; (8008768 <strdup+0xc>)
 800875e:	4601      	mov	r1, r0
 8008760:	6818      	ldr	r0, [r3, #0]
 8008762:	f000 b803 	b.w	800876c <_strdup_r>
 8008766:	bf00      	nop
 8008768:	20000064 	.word	0x20000064

0800876c <_strdup_r>:
 800876c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800876e:	4604      	mov	r4, r0
 8008770:	4608      	mov	r0, r1
 8008772:	460d      	mov	r5, r1
 8008774:	f7f7 fd36 	bl	80001e4 <strlen>
 8008778:	1c42      	adds	r2, r0, #1
 800877a:	4611      	mov	r1, r2
 800877c:	4620      	mov	r0, r4
 800877e:	9201      	str	r2, [sp, #4]
 8008780:	f7ff fefc 	bl	800857c <_malloc_r>
 8008784:	4604      	mov	r4, r0
 8008786:	b118      	cbz	r0, 8008790 <_strdup_r+0x24>
 8008788:	9a01      	ldr	r2, [sp, #4]
 800878a:	4629      	mov	r1, r5
 800878c:	f7ff fe74 	bl	8008478 <memcpy>
 8008790:	4620      	mov	r0, r4
 8008792:	b003      	add	sp, #12
 8008794:	bd30      	pop	{r4, r5, pc}
	...

08008798 <__assert_func>:
 8008798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800879a:	4614      	mov	r4, r2
 800879c:	461a      	mov	r2, r3
 800879e:	4b09      	ldr	r3, [pc, #36]	; (80087c4 <__assert_func+0x2c>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4605      	mov	r5, r0
 80087a4:	68d8      	ldr	r0, [r3, #12]
 80087a6:	b14c      	cbz	r4, 80087bc <__assert_func+0x24>
 80087a8:	4b07      	ldr	r3, [pc, #28]	; (80087c8 <__assert_func+0x30>)
 80087aa:	9100      	str	r1, [sp, #0]
 80087ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087b0:	4906      	ldr	r1, [pc, #24]	; (80087cc <__assert_func+0x34>)
 80087b2:	462b      	mov	r3, r5
 80087b4:	f000 f80e 	bl	80087d4 <fiprintf>
 80087b8:	f000 fbd8 	bl	8008f6c <abort>
 80087bc:	4b04      	ldr	r3, [pc, #16]	; (80087d0 <__assert_func+0x38>)
 80087be:	461c      	mov	r4, r3
 80087c0:	e7f3      	b.n	80087aa <__assert_func+0x12>
 80087c2:	bf00      	nop
 80087c4:	20000064 	.word	0x20000064
 80087c8:	0800c96a 	.word	0x0800c96a
 80087cc:	0800c977 	.word	0x0800c977
 80087d0:	0800c9a5 	.word	0x0800c9a5

080087d4 <fiprintf>:
 80087d4:	b40e      	push	{r1, r2, r3}
 80087d6:	b503      	push	{r0, r1, lr}
 80087d8:	4601      	mov	r1, r0
 80087da:	ab03      	add	r3, sp, #12
 80087dc:	4805      	ldr	r0, [pc, #20]	; (80087f4 <fiprintf+0x20>)
 80087de:	f853 2b04 	ldr.w	r2, [r3], #4
 80087e2:	6800      	ldr	r0, [r0, #0]
 80087e4:	9301      	str	r3, [sp, #4]
 80087e6:	f000 f83d 	bl	8008864 <_vfiprintf_r>
 80087ea:	b002      	add	sp, #8
 80087ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80087f0:	b003      	add	sp, #12
 80087f2:	4770      	bx	lr
 80087f4:	20000064 	.word	0x20000064

080087f8 <__malloc_lock>:
 80087f8:	4801      	ldr	r0, [pc, #4]	; (8008800 <__malloc_lock+0x8>)
 80087fa:	f000 bd77 	b.w	80092ec <__retarget_lock_acquire_recursive>
 80087fe:	bf00      	nop
 8008800:	20000724 	.word	0x20000724

08008804 <__malloc_unlock>:
 8008804:	4801      	ldr	r0, [pc, #4]	; (800880c <__malloc_unlock+0x8>)
 8008806:	f000 bd72 	b.w	80092ee <__retarget_lock_release_recursive>
 800880a:	bf00      	nop
 800880c:	20000724 	.word	0x20000724

08008810 <__sfputc_r>:
 8008810:	6893      	ldr	r3, [r2, #8]
 8008812:	3b01      	subs	r3, #1
 8008814:	2b00      	cmp	r3, #0
 8008816:	b410      	push	{r4}
 8008818:	6093      	str	r3, [r2, #8]
 800881a:	da08      	bge.n	800882e <__sfputc_r+0x1e>
 800881c:	6994      	ldr	r4, [r2, #24]
 800881e:	42a3      	cmp	r3, r4
 8008820:	db01      	blt.n	8008826 <__sfputc_r+0x16>
 8008822:	290a      	cmp	r1, #10
 8008824:	d103      	bne.n	800882e <__sfputc_r+0x1e>
 8008826:	f85d 4b04 	ldr.w	r4, [sp], #4
 800882a:	f000 badf 	b.w	8008dec <__swbuf_r>
 800882e:	6813      	ldr	r3, [r2, #0]
 8008830:	1c58      	adds	r0, r3, #1
 8008832:	6010      	str	r0, [r2, #0]
 8008834:	7019      	strb	r1, [r3, #0]
 8008836:	4608      	mov	r0, r1
 8008838:	f85d 4b04 	ldr.w	r4, [sp], #4
 800883c:	4770      	bx	lr

0800883e <__sfputs_r>:
 800883e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008840:	4606      	mov	r6, r0
 8008842:	460f      	mov	r7, r1
 8008844:	4614      	mov	r4, r2
 8008846:	18d5      	adds	r5, r2, r3
 8008848:	42ac      	cmp	r4, r5
 800884a:	d101      	bne.n	8008850 <__sfputs_r+0x12>
 800884c:	2000      	movs	r0, #0
 800884e:	e007      	b.n	8008860 <__sfputs_r+0x22>
 8008850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008854:	463a      	mov	r2, r7
 8008856:	4630      	mov	r0, r6
 8008858:	f7ff ffda 	bl	8008810 <__sfputc_r>
 800885c:	1c43      	adds	r3, r0, #1
 800885e:	d1f3      	bne.n	8008848 <__sfputs_r+0xa>
 8008860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008864 <_vfiprintf_r>:
 8008864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008868:	460d      	mov	r5, r1
 800886a:	b09d      	sub	sp, #116	; 0x74
 800886c:	4614      	mov	r4, r2
 800886e:	4698      	mov	r8, r3
 8008870:	4606      	mov	r6, r0
 8008872:	b118      	cbz	r0, 800887c <_vfiprintf_r+0x18>
 8008874:	6983      	ldr	r3, [r0, #24]
 8008876:	b90b      	cbnz	r3, 800887c <_vfiprintf_r+0x18>
 8008878:	f000 fc9a 	bl	80091b0 <__sinit>
 800887c:	4b89      	ldr	r3, [pc, #548]	; (8008aa4 <_vfiprintf_r+0x240>)
 800887e:	429d      	cmp	r5, r3
 8008880:	d11b      	bne.n	80088ba <_vfiprintf_r+0x56>
 8008882:	6875      	ldr	r5, [r6, #4]
 8008884:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008886:	07d9      	lsls	r1, r3, #31
 8008888:	d405      	bmi.n	8008896 <_vfiprintf_r+0x32>
 800888a:	89ab      	ldrh	r3, [r5, #12]
 800888c:	059a      	lsls	r2, r3, #22
 800888e:	d402      	bmi.n	8008896 <_vfiprintf_r+0x32>
 8008890:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008892:	f000 fd2b 	bl	80092ec <__retarget_lock_acquire_recursive>
 8008896:	89ab      	ldrh	r3, [r5, #12]
 8008898:	071b      	lsls	r3, r3, #28
 800889a:	d501      	bpl.n	80088a0 <_vfiprintf_r+0x3c>
 800889c:	692b      	ldr	r3, [r5, #16]
 800889e:	b9eb      	cbnz	r3, 80088dc <_vfiprintf_r+0x78>
 80088a0:	4629      	mov	r1, r5
 80088a2:	4630      	mov	r0, r6
 80088a4:	f000 faf4 	bl	8008e90 <__swsetup_r>
 80088a8:	b1c0      	cbz	r0, 80088dc <_vfiprintf_r+0x78>
 80088aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088ac:	07dc      	lsls	r4, r3, #31
 80088ae:	d50e      	bpl.n	80088ce <_vfiprintf_r+0x6a>
 80088b0:	f04f 30ff 	mov.w	r0, #4294967295
 80088b4:	b01d      	add	sp, #116	; 0x74
 80088b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ba:	4b7b      	ldr	r3, [pc, #492]	; (8008aa8 <_vfiprintf_r+0x244>)
 80088bc:	429d      	cmp	r5, r3
 80088be:	d101      	bne.n	80088c4 <_vfiprintf_r+0x60>
 80088c0:	68b5      	ldr	r5, [r6, #8]
 80088c2:	e7df      	b.n	8008884 <_vfiprintf_r+0x20>
 80088c4:	4b79      	ldr	r3, [pc, #484]	; (8008aac <_vfiprintf_r+0x248>)
 80088c6:	429d      	cmp	r5, r3
 80088c8:	bf08      	it	eq
 80088ca:	68f5      	ldreq	r5, [r6, #12]
 80088cc:	e7da      	b.n	8008884 <_vfiprintf_r+0x20>
 80088ce:	89ab      	ldrh	r3, [r5, #12]
 80088d0:	0598      	lsls	r0, r3, #22
 80088d2:	d4ed      	bmi.n	80088b0 <_vfiprintf_r+0x4c>
 80088d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088d6:	f000 fd0a 	bl	80092ee <__retarget_lock_release_recursive>
 80088da:	e7e9      	b.n	80088b0 <_vfiprintf_r+0x4c>
 80088dc:	2300      	movs	r3, #0
 80088de:	9309      	str	r3, [sp, #36]	; 0x24
 80088e0:	2320      	movs	r3, #32
 80088e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80088ea:	2330      	movs	r3, #48	; 0x30
 80088ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008ab0 <_vfiprintf_r+0x24c>
 80088f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088f4:	f04f 0901 	mov.w	r9, #1
 80088f8:	4623      	mov	r3, r4
 80088fa:	469a      	mov	sl, r3
 80088fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008900:	b10a      	cbz	r2, 8008906 <_vfiprintf_r+0xa2>
 8008902:	2a25      	cmp	r2, #37	; 0x25
 8008904:	d1f9      	bne.n	80088fa <_vfiprintf_r+0x96>
 8008906:	ebba 0b04 	subs.w	fp, sl, r4
 800890a:	d00b      	beq.n	8008924 <_vfiprintf_r+0xc0>
 800890c:	465b      	mov	r3, fp
 800890e:	4622      	mov	r2, r4
 8008910:	4629      	mov	r1, r5
 8008912:	4630      	mov	r0, r6
 8008914:	f7ff ff93 	bl	800883e <__sfputs_r>
 8008918:	3001      	adds	r0, #1
 800891a:	f000 80aa 	beq.w	8008a72 <_vfiprintf_r+0x20e>
 800891e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008920:	445a      	add	r2, fp
 8008922:	9209      	str	r2, [sp, #36]	; 0x24
 8008924:	f89a 3000 	ldrb.w	r3, [sl]
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 80a2 	beq.w	8008a72 <_vfiprintf_r+0x20e>
 800892e:	2300      	movs	r3, #0
 8008930:	f04f 32ff 	mov.w	r2, #4294967295
 8008934:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008938:	f10a 0a01 	add.w	sl, sl, #1
 800893c:	9304      	str	r3, [sp, #16]
 800893e:	9307      	str	r3, [sp, #28]
 8008940:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008944:	931a      	str	r3, [sp, #104]	; 0x68
 8008946:	4654      	mov	r4, sl
 8008948:	2205      	movs	r2, #5
 800894a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800894e:	4858      	ldr	r0, [pc, #352]	; (8008ab0 <_vfiprintf_r+0x24c>)
 8008950:	f7f7 fc56 	bl	8000200 <memchr>
 8008954:	9a04      	ldr	r2, [sp, #16]
 8008956:	b9d8      	cbnz	r0, 8008990 <_vfiprintf_r+0x12c>
 8008958:	06d1      	lsls	r1, r2, #27
 800895a:	bf44      	itt	mi
 800895c:	2320      	movmi	r3, #32
 800895e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008962:	0713      	lsls	r3, r2, #28
 8008964:	bf44      	itt	mi
 8008966:	232b      	movmi	r3, #43	; 0x2b
 8008968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800896c:	f89a 3000 	ldrb.w	r3, [sl]
 8008970:	2b2a      	cmp	r3, #42	; 0x2a
 8008972:	d015      	beq.n	80089a0 <_vfiprintf_r+0x13c>
 8008974:	9a07      	ldr	r2, [sp, #28]
 8008976:	4654      	mov	r4, sl
 8008978:	2000      	movs	r0, #0
 800897a:	f04f 0c0a 	mov.w	ip, #10
 800897e:	4621      	mov	r1, r4
 8008980:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008984:	3b30      	subs	r3, #48	; 0x30
 8008986:	2b09      	cmp	r3, #9
 8008988:	d94e      	bls.n	8008a28 <_vfiprintf_r+0x1c4>
 800898a:	b1b0      	cbz	r0, 80089ba <_vfiprintf_r+0x156>
 800898c:	9207      	str	r2, [sp, #28]
 800898e:	e014      	b.n	80089ba <_vfiprintf_r+0x156>
 8008990:	eba0 0308 	sub.w	r3, r0, r8
 8008994:	fa09 f303 	lsl.w	r3, r9, r3
 8008998:	4313      	orrs	r3, r2
 800899a:	9304      	str	r3, [sp, #16]
 800899c:	46a2      	mov	sl, r4
 800899e:	e7d2      	b.n	8008946 <_vfiprintf_r+0xe2>
 80089a0:	9b03      	ldr	r3, [sp, #12]
 80089a2:	1d19      	adds	r1, r3, #4
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	9103      	str	r1, [sp, #12]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	bfbb      	ittet	lt
 80089ac:	425b      	neglt	r3, r3
 80089ae:	f042 0202 	orrlt.w	r2, r2, #2
 80089b2:	9307      	strge	r3, [sp, #28]
 80089b4:	9307      	strlt	r3, [sp, #28]
 80089b6:	bfb8      	it	lt
 80089b8:	9204      	strlt	r2, [sp, #16]
 80089ba:	7823      	ldrb	r3, [r4, #0]
 80089bc:	2b2e      	cmp	r3, #46	; 0x2e
 80089be:	d10c      	bne.n	80089da <_vfiprintf_r+0x176>
 80089c0:	7863      	ldrb	r3, [r4, #1]
 80089c2:	2b2a      	cmp	r3, #42	; 0x2a
 80089c4:	d135      	bne.n	8008a32 <_vfiprintf_r+0x1ce>
 80089c6:	9b03      	ldr	r3, [sp, #12]
 80089c8:	1d1a      	adds	r2, r3, #4
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	9203      	str	r2, [sp, #12]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	bfb8      	it	lt
 80089d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80089d6:	3402      	adds	r4, #2
 80089d8:	9305      	str	r3, [sp, #20]
 80089da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008ac0 <_vfiprintf_r+0x25c>
 80089de:	7821      	ldrb	r1, [r4, #0]
 80089e0:	2203      	movs	r2, #3
 80089e2:	4650      	mov	r0, sl
 80089e4:	f7f7 fc0c 	bl	8000200 <memchr>
 80089e8:	b140      	cbz	r0, 80089fc <_vfiprintf_r+0x198>
 80089ea:	2340      	movs	r3, #64	; 0x40
 80089ec:	eba0 000a 	sub.w	r0, r0, sl
 80089f0:	fa03 f000 	lsl.w	r0, r3, r0
 80089f4:	9b04      	ldr	r3, [sp, #16]
 80089f6:	4303      	orrs	r3, r0
 80089f8:	3401      	adds	r4, #1
 80089fa:	9304      	str	r3, [sp, #16]
 80089fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a00:	482c      	ldr	r0, [pc, #176]	; (8008ab4 <_vfiprintf_r+0x250>)
 8008a02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a06:	2206      	movs	r2, #6
 8008a08:	f7f7 fbfa 	bl	8000200 <memchr>
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	d03f      	beq.n	8008a90 <_vfiprintf_r+0x22c>
 8008a10:	4b29      	ldr	r3, [pc, #164]	; (8008ab8 <_vfiprintf_r+0x254>)
 8008a12:	bb1b      	cbnz	r3, 8008a5c <_vfiprintf_r+0x1f8>
 8008a14:	9b03      	ldr	r3, [sp, #12]
 8008a16:	3307      	adds	r3, #7
 8008a18:	f023 0307 	bic.w	r3, r3, #7
 8008a1c:	3308      	adds	r3, #8
 8008a1e:	9303      	str	r3, [sp, #12]
 8008a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a22:	443b      	add	r3, r7
 8008a24:	9309      	str	r3, [sp, #36]	; 0x24
 8008a26:	e767      	b.n	80088f8 <_vfiprintf_r+0x94>
 8008a28:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a2c:	460c      	mov	r4, r1
 8008a2e:	2001      	movs	r0, #1
 8008a30:	e7a5      	b.n	800897e <_vfiprintf_r+0x11a>
 8008a32:	2300      	movs	r3, #0
 8008a34:	3401      	adds	r4, #1
 8008a36:	9305      	str	r3, [sp, #20]
 8008a38:	4619      	mov	r1, r3
 8008a3a:	f04f 0c0a 	mov.w	ip, #10
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a44:	3a30      	subs	r2, #48	; 0x30
 8008a46:	2a09      	cmp	r2, #9
 8008a48:	d903      	bls.n	8008a52 <_vfiprintf_r+0x1ee>
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d0c5      	beq.n	80089da <_vfiprintf_r+0x176>
 8008a4e:	9105      	str	r1, [sp, #20]
 8008a50:	e7c3      	b.n	80089da <_vfiprintf_r+0x176>
 8008a52:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a56:	4604      	mov	r4, r0
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e7f0      	b.n	8008a3e <_vfiprintf_r+0x1da>
 8008a5c:	ab03      	add	r3, sp, #12
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	462a      	mov	r2, r5
 8008a62:	4b16      	ldr	r3, [pc, #88]	; (8008abc <_vfiprintf_r+0x258>)
 8008a64:	a904      	add	r1, sp, #16
 8008a66:	4630      	mov	r0, r6
 8008a68:	f3af 8000 	nop.w
 8008a6c:	4607      	mov	r7, r0
 8008a6e:	1c78      	adds	r0, r7, #1
 8008a70:	d1d6      	bne.n	8008a20 <_vfiprintf_r+0x1bc>
 8008a72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a74:	07d9      	lsls	r1, r3, #31
 8008a76:	d405      	bmi.n	8008a84 <_vfiprintf_r+0x220>
 8008a78:	89ab      	ldrh	r3, [r5, #12]
 8008a7a:	059a      	lsls	r2, r3, #22
 8008a7c:	d402      	bmi.n	8008a84 <_vfiprintf_r+0x220>
 8008a7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a80:	f000 fc35 	bl	80092ee <__retarget_lock_release_recursive>
 8008a84:	89ab      	ldrh	r3, [r5, #12]
 8008a86:	065b      	lsls	r3, r3, #25
 8008a88:	f53f af12 	bmi.w	80088b0 <_vfiprintf_r+0x4c>
 8008a8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a8e:	e711      	b.n	80088b4 <_vfiprintf_r+0x50>
 8008a90:	ab03      	add	r3, sp, #12
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	462a      	mov	r2, r5
 8008a96:	4b09      	ldr	r3, [pc, #36]	; (8008abc <_vfiprintf_r+0x258>)
 8008a98:	a904      	add	r1, sp, #16
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	f000 f880 	bl	8008ba0 <_printf_i>
 8008aa0:	e7e4      	b.n	8008a6c <_vfiprintf_r+0x208>
 8008aa2:	bf00      	nop
 8008aa4:	0800c9fc 	.word	0x0800c9fc
 8008aa8:	0800ca1c 	.word	0x0800ca1c
 8008aac:	0800c9dc 	.word	0x0800c9dc
 8008ab0:	0800c9a6 	.word	0x0800c9a6
 8008ab4:	0800c9b0 	.word	0x0800c9b0
 8008ab8:	00000000 	.word	0x00000000
 8008abc:	0800883f 	.word	0x0800883f
 8008ac0:	0800c9ac 	.word	0x0800c9ac

08008ac4 <_printf_common>:
 8008ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac8:	4616      	mov	r6, r2
 8008aca:	4699      	mov	r9, r3
 8008acc:	688a      	ldr	r2, [r1, #8]
 8008ace:	690b      	ldr	r3, [r1, #16]
 8008ad0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	bfb8      	it	lt
 8008ad8:	4613      	movlt	r3, r2
 8008ada:	6033      	str	r3, [r6, #0]
 8008adc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ae0:	4607      	mov	r7, r0
 8008ae2:	460c      	mov	r4, r1
 8008ae4:	b10a      	cbz	r2, 8008aea <_printf_common+0x26>
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	6033      	str	r3, [r6, #0]
 8008aea:	6823      	ldr	r3, [r4, #0]
 8008aec:	0699      	lsls	r1, r3, #26
 8008aee:	bf42      	ittt	mi
 8008af0:	6833      	ldrmi	r3, [r6, #0]
 8008af2:	3302      	addmi	r3, #2
 8008af4:	6033      	strmi	r3, [r6, #0]
 8008af6:	6825      	ldr	r5, [r4, #0]
 8008af8:	f015 0506 	ands.w	r5, r5, #6
 8008afc:	d106      	bne.n	8008b0c <_printf_common+0x48>
 8008afe:	f104 0a19 	add.w	sl, r4, #25
 8008b02:	68e3      	ldr	r3, [r4, #12]
 8008b04:	6832      	ldr	r2, [r6, #0]
 8008b06:	1a9b      	subs	r3, r3, r2
 8008b08:	42ab      	cmp	r3, r5
 8008b0a:	dc26      	bgt.n	8008b5a <_printf_common+0x96>
 8008b0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b10:	1e13      	subs	r3, r2, #0
 8008b12:	6822      	ldr	r2, [r4, #0]
 8008b14:	bf18      	it	ne
 8008b16:	2301      	movne	r3, #1
 8008b18:	0692      	lsls	r2, r2, #26
 8008b1a:	d42b      	bmi.n	8008b74 <_printf_common+0xb0>
 8008b1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b20:	4649      	mov	r1, r9
 8008b22:	4638      	mov	r0, r7
 8008b24:	47c0      	blx	r8
 8008b26:	3001      	adds	r0, #1
 8008b28:	d01e      	beq.n	8008b68 <_printf_common+0xa4>
 8008b2a:	6823      	ldr	r3, [r4, #0]
 8008b2c:	68e5      	ldr	r5, [r4, #12]
 8008b2e:	6832      	ldr	r2, [r6, #0]
 8008b30:	f003 0306 	and.w	r3, r3, #6
 8008b34:	2b04      	cmp	r3, #4
 8008b36:	bf08      	it	eq
 8008b38:	1aad      	subeq	r5, r5, r2
 8008b3a:	68a3      	ldr	r3, [r4, #8]
 8008b3c:	6922      	ldr	r2, [r4, #16]
 8008b3e:	bf0c      	ite	eq
 8008b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b44:	2500      	movne	r5, #0
 8008b46:	4293      	cmp	r3, r2
 8008b48:	bfc4      	itt	gt
 8008b4a:	1a9b      	subgt	r3, r3, r2
 8008b4c:	18ed      	addgt	r5, r5, r3
 8008b4e:	2600      	movs	r6, #0
 8008b50:	341a      	adds	r4, #26
 8008b52:	42b5      	cmp	r5, r6
 8008b54:	d11a      	bne.n	8008b8c <_printf_common+0xc8>
 8008b56:	2000      	movs	r0, #0
 8008b58:	e008      	b.n	8008b6c <_printf_common+0xa8>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	4652      	mov	r2, sl
 8008b5e:	4649      	mov	r1, r9
 8008b60:	4638      	mov	r0, r7
 8008b62:	47c0      	blx	r8
 8008b64:	3001      	adds	r0, #1
 8008b66:	d103      	bne.n	8008b70 <_printf_common+0xac>
 8008b68:	f04f 30ff 	mov.w	r0, #4294967295
 8008b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b70:	3501      	adds	r5, #1
 8008b72:	e7c6      	b.n	8008b02 <_printf_common+0x3e>
 8008b74:	18e1      	adds	r1, r4, r3
 8008b76:	1c5a      	adds	r2, r3, #1
 8008b78:	2030      	movs	r0, #48	; 0x30
 8008b7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b7e:	4422      	add	r2, r4
 8008b80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b88:	3302      	adds	r3, #2
 8008b8a:	e7c7      	b.n	8008b1c <_printf_common+0x58>
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	4622      	mov	r2, r4
 8008b90:	4649      	mov	r1, r9
 8008b92:	4638      	mov	r0, r7
 8008b94:	47c0      	blx	r8
 8008b96:	3001      	adds	r0, #1
 8008b98:	d0e6      	beq.n	8008b68 <_printf_common+0xa4>
 8008b9a:	3601      	adds	r6, #1
 8008b9c:	e7d9      	b.n	8008b52 <_printf_common+0x8e>
	...

08008ba0 <_printf_i>:
 8008ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba4:	7e0f      	ldrb	r7, [r1, #24]
 8008ba6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ba8:	2f78      	cmp	r7, #120	; 0x78
 8008baa:	4691      	mov	r9, r2
 8008bac:	4680      	mov	r8, r0
 8008bae:	460c      	mov	r4, r1
 8008bb0:	469a      	mov	sl, r3
 8008bb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008bb6:	d807      	bhi.n	8008bc8 <_printf_i+0x28>
 8008bb8:	2f62      	cmp	r7, #98	; 0x62
 8008bba:	d80a      	bhi.n	8008bd2 <_printf_i+0x32>
 8008bbc:	2f00      	cmp	r7, #0
 8008bbe:	f000 80d8 	beq.w	8008d72 <_printf_i+0x1d2>
 8008bc2:	2f58      	cmp	r7, #88	; 0x58
 8008bc4:	f000 80a3 	beq.w	8008d0e <_printf_i+0x16e>
 8008bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bd0:	e03a      	b.n	8008c48 <_printf_i+0xa8>
 8008bd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bd6:	2b15      	cmp	r3, #21
 8008bd8:	d8f6      	bhi.n	8008bc8 <_printf_i+0x28>
 8008bda:	a101      	add	r1, pc, #4	; (adr r1, 8008be0 <_printf_i+0x40>)
 8008bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008be0:	08008c39 	.word	0x08008c39
 8008be4:	08008c4d 	.word	0x08008c4d
 8008be8:	08008bc9 	.word	0x08008bc9
 8008bec:	08008bc9 	.word	0x08008bc9
 8008bf0:	08008bc9 	.word	0x08008bc9
 8008bf4:	08008bc9 	.word	0x08008bc9
 8008bf8:	08008c4d 	.word	0x08008c4d
 8008bfc:	08008bc9 	.word	0x08008bc9
 8008c00:	08008bc9 	.word	0x08008bc9
 8008c04:	08008bc9 	.word	0x08008bc9
 8008c08:	08008bc9 	.word	0x08008bc9
 8008c0c:	08008d59 	.word	0x08008d59
 8008c10:	08008c7d 	.word	0x08008c7d
 8008c14:	08008d3b 	.word	0x08008d3b
 8008c18:	08008bc9 	.word	0x08008bc9
 8008c1c:	08008bc9 	.word	0x08008bc9
 8008c20:	08008d7b 	.word	0x08008d7b
 8008c24:	08008bc9 	.word	0x08008bc9
 8008c28:	08008c7d 	.word	0x08008c7d
 8008c2c:	08008bc9 	.word	0x08008bc9
 8008c30:	08008bc9 	.word	0x08008bc9
 8008c34:	08008d43 	.word	0x08008d43
 8008c38:	682b      	ldr	r3, [r5, #0]
 8008c3a:	1d1a      	adds	r2, r3, #4
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	602a      	str	r2, [r5, #0]
 8008c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e0a3      	b.n	8008d94 <_printf_i+0x1f4>
 8008c4c:	6820      	ldr	r0, [r4, #0]
 8008c4e:	6829      	ldr	r1, [r5, #0]
 8008c50:	0606      	lsls	r6, r0, #24
 8008c52:	f101 0304 	add.w	r3, r1, #4
 8008c56:	d50a      	bpl.n	8008c6e <_printf_i+0xce>
 8008c58:	680e      	ldr	r6, [r1, #0]
 8008c5a:	602b      	str	r3, [r5, #0]
 8008c5c:	2e00      	cmp	r6, #0
 8008c5e:	da03      	bge.n	8008c68 <_printf_i+0xc8>
 8008c60:	232d      	movs	r3, #45	; 0x2d
 8008c62:	4276      	negs	r6, r6
 8008c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c68:	485e      	ldr	r0, [pc, #376]	; (8008de4 <_printf_i+0x244>)
 8008c6a:	230a      	movs	r3, #10
 8008c6c:	e019      	b.n	8008ca2 <_printf_i+0x102>
 8008c6e:	680e      	ldr	r6, [r1, #0]
 8008c70:	602b      	str	r3, [r5, #0]
 8008c72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c76:	bf18      	it	ne
 8008c78:	b236      	sxthne	r6, r6
 8008c7a:	e7ef      	b.n	8008c5c <_printf_i+0xbc>
 8008c7c:	682b      	ldr	r3, [r5, #0]
 8008c7e:	6820      	ldr	r0, [r4, #0]
 8008c80:	1d19      	adds	r1, r3, #4
 8008c82:	6029      	str	r1, [r5, #0]
 8008c84:	0601      	lsls	r1, r0, #24
 8008c86:	d501      	bpl.n	8008c8c <_printf_i+0xec>
 8008c88:	681e      	ldr	r6, [r3, #0]
 8008c8a:	e002      	b.n	8008c92 <_printf_i+0xf2>
 8008c8c:	0646      	lsls	r6, r0, #25
 8008c8e:	d5fb      	bpl.n	8008c88 <_printf_i+0xe8>
 8008c90:	881e      	ldrh	r6, [r3, #0]
 8008c92:	4854      	ldr	r0, [pc, #336]	; (8008de4 <_printf_i+0x244>)
 8008c94:	2f6f      	cmp	r7, #111	; 0x6f
 8008c96:	bf0c      	ite	eq
 8008c98:	2308      	moveq	r3, #8
 8008c9a:	230a      	movne	r3, #10
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ca2:	6865      	ldr	r5, [r4, #4]
 8008ca4:	60a5      	str	r5, [r4, #8]
 8008ca6:	2d00      	cmp	r5, #0
 8008ca8:	bfa2      	ittt	ge
 8008caa:	6821      	ldrge	r1, [r4, #0]
 8008cac:	f021 0104 	bicge.w	r1, r1, #4
 8008cb0:	6021      	strge	r1, [r4, #0]
 8008cb2:	b90e      	cbnz	r6, 8008cb8 <_printf_i+0x118>
 8008cb4:	2d00      	cmp	r5, #0
 8008cb6:	d04d      	beq.n	8008d54 <_printf_i+0x1b4>
 8008cb8:	4615      	mov	r5, r2
 8008cba:	fbb6 f1f3 	udiv	r1, r6, r3
 8008cbe:	fb03 6711 	mls	r7, r3, r1, r6
 8008cc2:	5dc7      	ldrb	r7, [r0, r7]
 8008cc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008cc8:	4637      	mov	r7, r6
 8008cca:	42bb      	cmp	r3, r7
 8008ccc:	460e      	mov	r6, r1
 8008cce:	d9f4      	bls.n	8008cba <_printf_i+0x11a>
 8008cd0:	2b08      	cmp	r3, #8
 8008cd2:	d10b      	bne.n	8008cec <_printf_i+0x14c>
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	07de      	lsls	r6, r3, #31
 8008cd8:	d508      	bpl.n	8008cec <_printf_i+0x14c>
 8008cda:	6923      	ldr	r3, [r4, #16]
 8008cdc:	6861      	ldr	r1, [r4, #4]
 8008cde:	4299      	cmp	r1, r3
 8008ce0:	bfde      	ittt	le
 8008ce2:	2330      	movle	r3, #48	; 0x30
 8008ce4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ce8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008cec:	1b52      	subs	r2, r2, r5
 8008cee:	6122      	str	r2, [r4, #16]
 8008cf0:	f8cd a000 	str.w	sl, [sp]
 8008cf4:	464b      	mov	r3, r9
 8008cf6:	aa03      	add	r2, sp, #12
 8008cf8:	4621      	mov	r1, r4
 8008cfa:	4640      	mov	r0, r8
 8008cfc:	f7ff fee2 	bl	8008ac4 <_printf_common>
 8008d00:	3001      	adds	r0, #1
 8008d02:	d14c      	bne.n	8008d9e <_printf_i+0x1fe>
 8008d04:	f04f 30ff 	mov.w	r0, #4294967295
 8008d08:	b004      	add	sp, #16
 8008d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d0e:	4835      	ldr	r0, [pc, #212]	; (8008de4 <_printf_i+0x244>)
 8008d10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d14:	6829      	ldr	r1, [r5, #0]
 8008d16:	6823      	ldr	r3, [r4, #0]
 8008d18:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d1c:	6029      	str	r1, [r5, #0]
 8008d1e:	061d      	lsls	r5, r3, #24
 8008d20:	d514      	bpl.n	8008d4c <_printf_i+0x1ac>
 8008d22:	07df      	lsls	r7, r3, #31
 8008d24:	bf44      	itt	mi
 8008d26:	f043 0320 	orrmi.w	r3, r3, #32
 8008d2a:	6023      	strmi	r3, [r4, #0]
 8008d2c:	b91e      	cbnz	r6, 8008d36 <_printf_i+0x196>
 8008d2e:	6823      	ldr	r3, [r4, #0]
 8008d30:	f023 0320 	bic.w	r3, r3, #32
 8008d34:	6023      	str	r3, [r4, #0]
 8008d36:	2310      	movs	r3, #16
 8008d38:	e7b0      	b.n	8008c9c <_printf_i+0xfc>
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	f043 0320 	orr.w	r3, r3, #32
 8008d40:	6023      	str	r3, [r4, #0]
 8008d42:	2378      	movs	r3, #120	; 0x78
 8008d44:	4828      	ldr	r0, [pc, #160]	; (8008de8 <_printf_i+0x248>)
 8008d46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d4a:	e7e3      	b.n	8008d14 <_printf_i+0x174>
 8008d4c:	0659      	lsls	r1, r3, #25
 8008d4e:	bf48      	it	mi
 8008d50:	b2b6      	uxthmi	r6, r6
 8008d52:	e7e6      	b.n	8008d22 <_printf_i+0x182>
 8008d54:	4615      	mov	r5, r2
 8008d56:	e7bb      	b.n	8008cd0 <_printf_i+0x130>
 8008d58:	682b      	ldr	r3, [r5, #0]
 8008d5a:	6826      	ldr	r6, [r4, #0]
 8008d5c:	6961      	ldr	r1, [r4, #20]
 8008d5e:	1d18      	adds	r0, r3, #4
 8008d60:	6028      	str	r0, [r5, #0]
 8008d62:	0635      	lsls	r5, r6, #24
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	d501      	bpl.n	8008d6c <_printf_i+0x1cc>
 8008d68:	6019      	str	r1, [r3, #0]
 8008d6a:	e002      	b.n	8008d72 <_printf_i+0x1d2>
 8008d6c:	0670      	lsls	r0, r6, #25
 8008d6e:	d5fb      	bpl.n	8008d68 <_printf_i+0x1c8>
 8008d70:	8019      	strh	r1, [r3, #0]
 8008d72:	2300      	movs	r3, #0
 8008d74:	6123      	str	r3, [r4, #16]
 8008d76:	4615      	mov	r5, r2
 8008d78:	e7ba      	b.n	8008cf0 <_printf_i+0x150>
 8008d7a:	682b      	ldr	r3, [r5, #0]
 8008d7c:	1d1a      	adds	r2, r3, #4
 8008d7e:	602a      	str	r2, [r5, #0]
 8008d80:	681d      	ldr	r5, [r3, #0]
 8008d82:	6862      	ldr	r2, [r4, #4]
 8008d84:	2100      	movs	r1, #0
 8008d86:	4628      	mov	r0, r5
 8008d88:	f7f7 fa3a 	bl	8000200 <memchr>
 8008d8c:	b108      	cbz	r0, 8008d92 <_printf_i+0x1f2>
 8008d8e:	1b40      	subs	r0, r0, r5
 8008d90:	6060      	str	r0, [r4, #4]
 8008d92:	6863      	ldr	r3, [r4, #4]
 8008d94:	6123      	str	r3, [r4, #16]
 8008d96:	2300      	movs	r3, #0
 8008d98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d9c:	e7a8      	b.n	8008cf0 <_printf_i+0x150>
 8008d9e:	6923      	ldr	r3, [r4, #16]
 8008da0:	462a      	mov	r2, r5
 8008da2:	4649      	mov	r1, r9
 8008da4:	4640      	mov	r0, r8
 8008da6:	47d0      	blx	sl
 8008da8:	3001      	adds	r0, #1
 8008daa:	d0ab      	beq.n	8008d04 <_printf_i+0x164>
 8008dac:	6823      	ldr	r3, [r4, #0]
 8008dae:	079b      	lsls	r3, r3, #30
 8008db0:	d413      	bmi.n	8008dda <_printf_i+0x23a>
 8008db2:	68e0      	ldr	r0, [r4, #12]
 8008db4:	9b03      	ldr	r3, [sp, #12]
 8008db6:	4298      	cmp	r0, r3
 8008db8:	bfb8      	it	lt
 8008dba:	4618      	movlt	r0, r3
 8008dbc:	e7a4      	b.n	8008d08 <_printf_i+0x168>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	4632      	mov	r2, r6
 8008dc2:	4649      	mov	r1, r9
 8008dc4:	4640      	mov	r0, r8
 8008dc6:	47d0      	blx	sl
 8008dc8:	3001      	adds	r0, #1
 8008dca:	d09b      	beq.n	8008d04 <_printf_i+0x164>
 8008dcc:	3501      	adds	r5, #1
 8008dce:	68e3      	ldr	r3, [r4, #12]
 8008dd0:	9903      	ldr	r1, [sp, #12]
 8008dd2:	1a5b      	subs	r3, r3, r1
 8008dd4:	42ab      	cmp	r3, r5
 8008dd6:	dcf2      	bgt.n	8008dbe <_printf_i+0x21e>
 8008dd8:	e7eb      	b.n	8008db2 <_printf_i+0x212>
 8008dda:	2500      	movs	r5, #0
 8008ddc:	f104 0619 	add.w	r6, r4, #25
 8008de0:	e7f5      	b.n	8008dce <_printf_i+0x22e>
 8008de2:	bf00      	nop
 8008de4:	0800c9b7 	.word	0x0800c9b7
 8008de8:	0800c9c8 	.word	0x0800c9c8

08008dec <__swbuf_r>:
 8008dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dee:	460e      	mov	r6, r1
 8008df0:	4614      	mov	r4, r2
 8008df2:	4605      	mov	r5, r0
 8008df4:	b118      	cbz	r0, 8008dfe <__swbuf_r+0x12>
 8008df6:	6983      	ldr	r3, [r0, #24]
 8008df8:	b90b      	cbnz	r3, 8008dfe <__swbuf_r+0x12>
 8008dfa:	f000 f9d9 	bl	80091b0 <__sinit>
 8008dfe:	4b21      	ldr	r3, [pc, #132]	; (8008e84 <__swbuf_r+0x98>)
 8008e00:	429c      	cmp	r4, r3
 8008e02:	d12b      	bne.n	8008e5c <__swbuf_r+0x70>
 8008e04:	686c      	ldr	r4, [r5, #4]
 8008e06:	69a3      	ldr	r3, [r4, #24]
 8008e08:	60a3      	str	r3, [r4, #8]
 8008e0a:	89a3      	ldrh	r3, [r4, #12]
 8008e0c:	071a      	lsls	r2, r3, #28
 8008e0e:	d52f      	bpl.n	8008e70 <__swbuf_r+0x84>
 8008e10:	6923      	ldr	r3, [r4, #16]
 8008e12:	b36b      	cbz	r3, 8008e70 <__swbuf_r+0x84>
 8008e14:	6923      	ldr	r3, [r4, #16]
 8008e16:	6820      	ldr	r0, [r4, #0]
 8008e18:	1ac0      	subs	r0, r0, r3
 8008e1a:	6963      	ldr	r3, [r4, #20]
 8008e1c:	b2f6      	uxtb	r6, r6
 8008e1e:	4283      	cmp	r3, r0
 8008e20:	4637      	mov	r7, r6
 8008e22:	dc04      	bgt.n	8008e2e <__swbuf_r+0x42>
 8008e24:	4621      	mov	r1, r4
 8008e26:	4628      	mov	r0, r5
 8008e28:	f000 f92e 	bl	8009088 <_fflush_r>
 8008e2c:	bb30      	cbnz	r0, 8008e7c <__swbuf_r+0x90>
 8008e2e:	68a3      	ldr	r3, [r4, #8]
 8008e30:	3b01      	subs	r3, #1
 8008e32:	60a3      	str	r3, [r4, #8]
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	1c5a      	adds	r2, r3, #1
 8008e38:	6022      	str	r2, [r4, #0]
 8008e3a:	701e      	strb	r6, [r3, #0]
 8008e3c:	6963      	ldr	r3, [r4, #20]
 8008e3e:	3001      	adds	r0, #1
 8008e40:	4283      	cmp	r3, r0
 8008e42:	d004      	beq.n	8008e4e <__swbuf_r+0x62>
 8008e44:	89a3      	ldrh	r3, [r4, #12]
 8008e46:	07db      	lsls	r3, r3, #31
 8008e48:	d506      	bpl.n	8008e58 <__swbuf_r+0x6c>
 8008e4a:	2e0a      	cmp	r6, #10
 8008e4c:	d104      	bne.n	8008e58 <__swbuf_r+0x6c>
 8008e4e:	4621      	mov	r1, r4
 8008e50:	4628      	mov	r0, r5
 8008e52:	f000 f919 	bl	8009088 <_fflush_r>
 8008e56:	b988      	cbnz	r0, 8008e7c <__swbuf_r+0x90>
 8008e58:	4638      	mov	r0, r7
 8008e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e5c:	4b0a      	ldr	r3, [pc, #40]	; (8008e88 <__swbuf_r+0x9c>)
 8008e5e:	429c      	cmp	r4, r3
 8008e60:	d101      	bne.n	8008e66 <__swbuf_r+0x7a>
 8008e62:	68ac      	ldr	r4, [r5, #8]
 8008e64:	e7cf      	b.n	8008e06 <__swbuf_r+0x1a>
 8008e66:	4b09      	ldr	r3, [pc, #36]	; (8008e8c <__swbuf_r+0xa0>)
 8008e68:	429c      	cmp	r4, r3
 8008e6a:	bf08      	it	eq
 8008e6c:	68ec      	ldreq	r4, [r5, #12]
 8008e6e:	e7ca      	b.n	8008e06 <__swbuf_r+0x1a>
 8008e70:	4621      	mov	r1, r4
 8008e72:	4628      	mov	r0, r5
 8008e74:	f000 f80c 	bl	8008e90 <__swsetup_r>
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d0cb      	beq.n	8008e14 <__swbuf_r+0x28>
 8008e7c:	f04f 37ff 	mov.w	r7, #4294967295
 8008e80:	e7ea      	b.n	8008e58 <__swbuf_r+0x6c>
 8008e82:	bf00      	nop
 8008e84:	0800c9fc 	.word	0x0800c9fc
 8008e88:	0800ca1c 	.word	0x0800ca1c
 8008e8c:	0800c9dc 	.word	0x0800c9dc

08008e90 <__swsetup_r>:
 8008e90:	4b32      	ldr	r3, [pc, #200]	; (8008f5c <__swsetup_r+0xcc>)
 8008e92:	b570      	push	{r4, r5, r6, lr}
 8008e94:	681d      	ldr	r5, [r3, #0]
 8008e96:	4606      	mov	r6, r0
 8008e98:	460c      	mov	r4, r1
 8008e9a:	b125      	cbz	r5, 8008ea6 <__swsetup_r+0x16>
 8008e9c:	69ab      	ldr	r3, [r5, #24]
 8008e9e:	b913      	cbnz	r3, 8008ea6 <__swsetup_r+0x16>
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	f000 f985 	bl	80091b0 <__sinit>
 8008ea6:	4b2e      	ldr	r3, [pc, #184]	; (8008f60 <__swsetup_r+0xd0>)
 8008ea8:	429c      	cmp	r4, r3
 8008eaa:	d10f      	bne.n	8008ecc <__swsetup_r+0x3c>
 8008eac:	686c      	ldr	r4, [r5, #4]
 8008eae:	89a3      	ldrh	r3, [r4, #12]
 8008eb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008eb4:	0719      	lsls	r1, r3, #28
 8008eb6:	d42c      	bmi.n	8008f12 <__swsetup_r+0x82>
 8008eb8:	06dd      	lsls	r5, r3, #27
 8008eba:	d411      	bmi.n	8008ee0 <__swsetup_r+0x50>
 8008ebc:	2309      	movs	r3, #9
 8008ebe:	6033      	str	r3, [r6, #0]
 8008ec0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ec4:	81a3      	strh	r3, [r4, #12]
 8008ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eca:	e03e      	b.n	8008f4a <__swsetup_r+0xba>
 8008ecc:	4b25      	ldr	r3, [pc, #148]	; (8008f64 <__swsetup_r+0xd4>)
 8008ece:	429c      	cmp	r4, r3
 8008ed0:	d101      	bne.n	8008ed6 <__swsetup_r+0x46>
 8008ed2:	68ac      	ldr	r4, [r5, #8]
 8008ed4:	e7eb      	b.n	8008eae <__swsetup_r+0x1e>
 8008ed6:	4b24      	ldr	r3, [pc, #144]	; (8008f68 <__swsetup_r+0xd8>)
 8008ed8:	429c      	cmp	r4, r3
 8008eda:	bf08      	it	eq
 8008edc:	68ec      	ldreq	r4, [r5, #12]
 8008ede:	e7e6      	b.n	8008eae <__swsetup_r+0x1e>
 8008ee0:	0758      	lsls	r0, r3, #29
 8008ee2:	d512      	bpl.n	8008f0a <__swsetup_r+0x7a>
 8008ee4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ee6:	b141      	cbz	r1, 8008efa <__swsetup_r+0x6a>
 8008ee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008eec:	4299      	cmp	r1, r3
 8008eee:	d002      	beq.n	8008ef6 <__swsetup_r+0x66>
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	f7ff fad7 	bl	80084a4 <_free_r>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	6363      	str	r3, [r4, #52]	; 0x34
 8008efa:	89a3      	ldrh	r3, [r4, #12]
 8008efc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f00:	81a3      	strh	r3, [r4, #12]
 8008f02:	2300      	movs	r3, #0
 8008f04:	6063      	str	r3, [r4, #4]
 8008f06:	6923      	ldr	r3, [r4, #16]
 8008f08:	6023      	str	r3, [r4, #0]
 8008f0a:	89a3      	ldrh	r3, [r4, #12]
 8008f0c:	f043 0308 	orr.w	r3, r3, #8
 8008f10:	81a3      	strh	r3, [r4, #12]
 8008f12:	6923      	ldr	r3, [r4, #16]
 8008f14:	b94b      	cbnz	r3, 8008f2a <__swsetup_r+0x9a>
 8008f16:	89a3      	ldrh	r3, [r4, #12]
 8008f18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f20:	d003      	beq.n	8008f2a <__swsetup_r+0x9a>
 8008f22:	4621      	mov	r1, r4
 8008f24:	4630      	mov	r0, r6
 8008f26:	f000 fa09 	bl	800933c <__smakebuf_r>
 8008f2a:	89a0      	ldrh	r0, [r4, #12]
 8008f2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f30:	f010 0301 	ands.w	r3, r0, #1
 8008f34:	d00a      	beq.n	8008f4c <__swsetup_r+0xbc>
 8008f36:	2300      	movs	r3, #0
 8008f38:	60a3      	str	r3, [r4, #8]
 8008f3a:	6963      	ldr	r3, [r4, #20]
 8008f3c:	425b      	negs	r3, r3
 8008f3e:	61a3      	str	r3, [r4, #24]
 8008f40:	6923      	ldr	r3, [r4, #16]
 8008f42:	b943      	cbnz	r3, 8008f56 <__swsetup_r+0xc6>
 8008f44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f48:	d1ba      	bne.n	8008ec0 <__swsetup_r+0x30>
 8008f4a:	bd70      	pop	{r4, r5, r6, pc}
 8008f4c:	0781      	lsls	r1, r0, #30
 8008f4e:	bf58      	it	pl
 8008f50:	6963      	ldrpl	r3, [r4, #20]
 8008f52:	60a3      	str	r3, [r4, #8]
 8008f54:	e7f4      	b.n	8008f40 <__swsetup_r+0xb0>
 8008f56:	2000      	movs	r0, #0
 8008f58:	e7f7      	b.n	8008f4a <__swsetup_r+0xba>
 8008f5a:	bf00      	nop
 8008f5c:	20000064 	.word	0x20000064
 8008f60:	0800c9fc 	.word	0x0800c9fc
 8008f64:	0800ca1c 	.word	0x0800ca1c
 8008f68:	0800c9dc 	.word	0x0800c9dc

08008f6c <abort>:
 8008f6c:	b508      	push	{r3, lr}
 8008f6e:	2006      	movs	r0, #6
 8008f70:	f000 fa4c 	bl	800940c <raise>
 8008f74:	2001      	movs	r0, #1
 8008f76:	f7f8 fe81 	bl	8001c7c <_exit>
	...

08008f7c <__sflush_r>:
 8008f7c:	898a      	ldrh	r2, [r1, #12]
 8008f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f82:	4605      	mov	r5, r0
 8008f84:	0710      	lsls	r0, r2, #28
 8008f86:	460c      	mov	r4, r1
 8008f88:	d458      	bmi.n	800903c <__sflush_r+0xc0>
 8008f8a:	684b      	ldr	r3, [r1, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	dc05      	bgt.n	8008f9c <__sflush_r+0x20>
 8008f90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	dc02      	bgt.n	8008f9c <__sflush_r+0x20>
 8008f96:	2000      	movs	r0, #0
 8008f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f9e:	2e00      	cmp	r6, #0
 8008fa0:	d0f9      	beq.n	8008f96 <__sflush_r+0x1a>
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fa8:	682f      	ldr	r7, [r5, #0]
 8008faa:	602b      	str	r3, [r5, #0]
 8008fac:	d032      	beq.n	8009014 <__sflush_r+0x98>
 8008fae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008fb0:	89a3      	ldrh	r3, [r4, #12]
 8008fb2:	075a      	lsls	r2, r3, #29
 8008fb4:	d505      	bpl.n	8008fc2 <__sflush_r+0x46>
 8008fb6:	6863      	ldr	r3, [r4, #4]
 8008fb8:	1ac0      	subs	r0, r0, r3
 8008fba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fbc:	b10b      	cbz	r3, 8008fc2 <__sflush_r+0x46>
 8008fbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fc0:	1ac0      	subs	r0, r0, r3
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fc8:	6a21      	ldr	r1, [r4, #32]
 8008fca:	4628      	mov	r0, r5
 8008fcc:	47b0      	blx	r6
 8008fce:	1c43      	adds	r3, r0, #1
 8008fd0:	89a3      	ldrh	r3, [r4, #12]
 8008fd2:	d106      	bne.n	8008fe2 <__sflush_r+0x66>
 8008fd4:	6829      	ldr	r1, [r5, #0]
 8008fd6:	291d      	cmp	r1, #29
 8008fd8:	d82c      	bhi.n	8009034 <__sflush_r+0xb8>
 8008fda:	4a2a      	ldr	r2, [pc, #168]	; (8009084 <__sflush_r+0x108>)
 8008fdc:	40ca      	lsrs	r2, r1
 8008fde:	07d6      	lsls	r6, r2, #31
 8008fe0:	d528      	bpl.n	8009034 <__sflush_r+0xb8>
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	6062      	str	r2, [r4, #4]
 8008fe6:	04d9      	lsls	r1, r3, #19
 8008fe8:	6922      	ldr	r2, [r4, #16]
 8008fea:	6022      	str	r2, [r4, #0]
 8008fec:	d504      	bpl.n	8008ff8 <__sflush_r+0x7c>
 8008fee:	1c42      	adds	r2, r0, #1
 8008ff0:	d101      	bne.n	8008ff6 <__sflush_r+0x7a>
 8008ff2:	682b      	ldr	r3, [r5, #0]
 8008ff4:	b903      	cbnz	r3, 8008ff8 <__sflush_r+0x7c>
 8008ff6:	6560      	str	r0, [r4, #84]	; 0x54
 8008ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ffa:	602f      	str	r7, [r5, #0]
 8008ffc:	2900      	cmp	r1, #0
 8008ffe:	d0ca      	beq.n	8008f96 <__sflush_r+0x1a>
 8009000:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009004:	4299      	cmp	r1, r3
 8009006:	d002      	beq.n	800900e <__sflush_r+0x92>
 8009008:	4628      	mov	r0, r5
 800900a:	f7ff fa4b 	bl	80084a4 <_free_r>
 800900e:	2000      	movs	r0, #0
 8009010:	6360      	str	r0, [r4, #52]	; 0x34
 8009012:	e7c1      	b.n	8008f98 <__sflush_r+0x1c>
 8009014:	6a21      	ldr	r1, [r4, #32]
 8009016:	2301      	movs	r3, #1
 8009018:	4628      	mov	r0, r5
 800901a:	47b0      	blx	r6
 800901c:	1c41      	adds	r1, r0, #1
 800901e:	d1c7      	bne.n	8008fb0 <__sflush_r+0x34>
 8009020:	682b      	ldr	r3, [r5, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d0c4      	beq.n	8008fb0 <__sflush_r+0x34>
 8009026:	2b1d      	cmp	r3, #29
 8009028:	d001      	beq.n	800902e <__sflush_r+0xb2>
 800902a:	2b16      	cmp	r3, #22
 800902c:	d101      	bne.n	8009032 <__sflush_r+0xb6>
 800902e:	602f      	str	r7, [r5, #0]
 8009030:	e7b1      	b.n	8008f96 <__sflush_r+0x1a>
 8009032:	89a3      	ldrh	r3, [r4, #12]
 8009034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009038:	81a3      	strh	r3, [r4, #12]
 800903a:	e7ad      	b.n	8008f98 <__sflush_r+0x1c>
 800903c:	690f      	ldr	r7, [r1, #16]
 800903e:	2f00      	cmp	r7, #0
 8009040:	d0a9      	beq.n	8008f96 <__sflush_r+0x1a>
 8009042:	0793      	lsls	r3, r2, #30
 8009044:	680e      	ldr	r6, [r1, #0]
 8009046:	bf08      	it	eq
 8009048:	694b      	ldreq	r3, [r1, #20]
 800904a:	600f      	str	r7, [r1, #0]
 800904c:	bf18      	it	ne
 800904e:	2300      	movne	r3, #0
 8009050:	eba6 0807 	sub.w	r8, r6, r7
 8009054:	608b      	str	r3, [r1, #8]
 8009056:	f1b8 0f00 	cmp.w	r8, #0
 800905a:	dd9c      	ble.n	8008f96 <__sflush_r+0x1a>
 800905c:	6a21      	ldr	r1, [r4, #32]
 800905e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009060:	4643      	mov	r3, r8
 8009062:	463a      	mov	r2, r7
 8009064:	4628      	mov	r0, r5
 8009066:	47b0      	blx	r6
 8009068:	2800      	cmp	r0, #0
 800906a:	dc06      	bgt.n	800907a <__sflush_r+0xfe>
 800906c:	89a3      	ldrh	r3, [r4, #12]
 800906e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009072:	81a3      	strh	r3, [r4, #12]
 8009074:	f04f 30ff 	mov.w	r0, #4294967295
 8009078:	e78e      	b.n	8008f98 <__sflush_r+0x1c>
 800907a:	4407      	add	r7, r0
 800907c:	eba8 0800 	sub.w	r8, r8, r0
 8009080:	e7e9      	b.n	8009056 <__sflush_r+0xda>
 8009082:	bf00      	nop
 8009084:	20400001 	.word	0x20400001

08009088 <_fflush_r>:
 8009088:	b538      	push	{r3, r4, r5, lr}
 800908a:	690b      	ldr	r3, [r1, #16]
 800908c:	4605      	mov	r5, r0
 800908e:	460c      	mov	r4, r1
 8009090:	b913      	cbnz	r3, 8009098 <_fflush_r+0x10>
 8009092:	2500      	movs	r5, #0
 8009094:	4628      	mov	r0, r5
 8009096:	bd38      	pop	{r3, r4, r5, pc}
 8009098:	b118      	cbz	r0, 80090a2 <_fflush_r+0x1a>
 800909a:	6983      	ldr	r3, [r0, #24]
 800909c:	b90b      	cbnz	r3, 80090a2 <_fflush_r+0x1a>
 800909e:	f000 f887 	bl	80091b0 <__sinit>
 80090a2:	4b14      	ldr	r3, [pc, #80]	; (80090f4 <_fflush_r+0x6c>)
 80090a4:	429c      	cmp	r4, r3
 80090a6:	d11b      	bne.n	80090e0 <_fflush_r+0x58>
 80090a8:	686c      	ldr	r4, [r5, #4]
 80090aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d0ef      	beq.n	8009092 <_fflush_r+0xa>
 80090b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090b4:	07d0      	lsls	r0, r2, #31
 80090b6:	d404      	bmi.n	80090c2 <_fflush_r+0x3a>
 80090b8:	0599      	lsls	r1, r3, #22
 80090ba:	d402      	bmi.n	80090c2 <_fflush_r+0x3a>
 80090bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090be:	f000 f915 	bl	80092ec <__retarget_lock_acquire_recursive>
 80090c2:	4628      	mov	r0, r5
 80090c4:	4621      	mov	r1, r4
 80090c6:	f7ff ff59 	bl	8008f7c <__sflush_r>
 80090ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090cc:	07da      	lsls	r2, r3, #31
 80090ce:	4605      	mov	r5, r0
 80090d0:	d4e0      	bmi.n	8009094 <_fflush_r+0xc>
 80090d2:	89a3      	ldrh	r3, [r4, #12]
 80090d4:	059b      	lsls	r3, r3, #22
 80090d6:	d4dd      	bmi.n	8009094 <_fflush_r+0xc>
 80090d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090da:	f000 f908 	bl	80092ee <__retarget_lock_release_recursive>
 80090de:	e7d9      	b.n	8009094 <_fflush_r+0xc>
 80090e0:	4b05      	ldr	r3, [pc, #20]	; (80090f8 <_fflush_r+0x70>)
 80090e2:	429c      	cmp	r4, r3
 80090e4:	d101      	bne.n	80090ea <_fflush_r+0x62>
 80090e6:	68ac      	ldr	r4, [r5, #8]
 80090e8:	e7df      	b.n	80090aa <_fflush_r+0x22>
 80090ea:	4b04      	ldr	r3, [pc, #16]	; (80090fc <_fflush_r+0x74>)
 80090ec:	429c      	cmp	r4, r3
 80090ee:	bf08      	it	eq
 80090f0:	68ec      	ldreq	r4, [r5, #12]
 80090f2:	e7da      	b.n	80090aa <_fflush_r+0x22>
 80090f4:	0800c9fc 	.word	0x0800c9fc
 80090f8:	0800ca1c 	.word	0x0800ca1c
 80090fc:	0800c9dc 	.word	0x0800c9dc

08009100 <std>:
 8009100:	2300      	movs	r3, #0
 8009102:	b510      	push	{r4, lr}
 8009104:	4604      	mov	r4, r0
 8009106:	e9c0 3300 	strd	r3, r3, [r0]
 800910a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800910e:	6083      	str	r3, [r0, #8]
 8009110:	8181      	strh	r1, [r0, #12]
 8009112:	6643      	str	r3, [r0, #100]	; 0x64
 8009114:	81c2      	strh	r2, [r0, #14]
 8009116:	6183      	str	r3, [r0, #24]
 8009118:	4619      	mov	r1, r3
 800911a:	2208      	movs	r2, #8
 800911c:	305c      	adds	r0, #92	; 0x5c
 800911e:	f7ff f9b9 	bl	8008494 <memset>
 8009122:	4b05      	ldr	r3, [pc, #20]	; (8009138 <std+0x38>)
 8009124:	6263      	str	r3, [r4, #36]	; 0x24
 8009126:	4b05      	ldr	r3, [pc, #20]	; (800913c <std+0x3c>)
 8009128:	62a3      	str	r3, [r4, #40]	; 0x28
 800912a:	4b05      	ldr	r3, [pc, #20]	; (8009140 <std+0x40>)
 800912c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800912e:	4b05      	ldr	r3, [pc, #20]	; (8009144 <std+0x44>)
 8009130:	6224      	str	r4, [r4, #32]
 8009132:	6323      	str	r3, [r4, #48]	; 0x30
 8009134:	bd10      	pop	{r4, pc}
 8009136:	bf00      	nop
 8009138:	08009445 	.word	0x08009445
 800913c:	08009467 	.word	0x08009467
 8009140:	0800949f 	.word	0x0800949f
 8009144:	080094c3 	.word	0x080094c3

08009148 <_cleanup_r>:
 8009148:	4901      	ldr	r1, [pc, #4]	; (8009150 <_cleanup_r+0x8>)
 800914a:	f000 b8af 	b.w	80092ac <_fwalk_reent>
 800914e:	bf00      	nop
 8009150:	08009089 	.word	0x08009089

08009154 <__sfmoreglue>:
 8009154:	b570      	push	{r4, r5, r6, lr}
 8009156:	2268      	movs	r2, #104	; 0x68
 8009158:	1e4d      	subs	r5, r1, #1
 800915a:	4355      	muls	r5, r2
 800915c:	460e      	mov	r6, r1
 800915e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009162:	f7ff fa0b 	bl	800857c <_malloc_r>
 8009166:	4604      	mov	r4, r0
 8009168:	b140      	cbz	r0, 800917c <__sfmoreglue+0x28>
 800916a:	2100      	movs	r1, #0
 800916c:	e9c0 1600 	strd	r1, r6, [r0]
 8009170:	300c      	adds	r0, #12
 8009172:	60a0      	str	r0, [r4, #8]
 8009174:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009178:	f7ff f98c 	bl	8008494 <memset>
 800917c:	4620      	mov	r0, r4
 800917e:	bd70      	pop	{r4, r5, r6, pc}

08009180 <__sfp_lock_acquire>:
 8009180:	4801      	ldr	r0, [pc, #4]	; (8009188 <__sfp_lock_acquire+0x8>)
 8009182:	f000 b8b3 	b.w	80092ec <__retarget_lock_acquire_recursive>
 8009186:	bf00      	nop
 8009188:	20000725 	.word	0x20000725

0800918c <__sfp_lock_release>:
 800918c:	4801      	ldr	r0, [pc, #4]	; (8009194 <__sfp_lock_release+0x8>)
 800918e:	f000 b8ae 	b.w	80092ee <__retarget_lock_release_recursive>
 8009192:	bf00      	nop
 8009194:	20000725 	.word	0x20000725

08009198 <__sinit_lock_acquire>:
 8009198:	4801      	ldr	r0, [pc, #4]	; (80091a0 <__sinit_lock_acquire+0x8>)
 800919a:	f000 b8a7 	b.w	80092ec <__retarget_lock_acquire_recursive>
 800919e:	bf00      	nop
 80091a0:	20000726 	.word	0x20000726

080091a4 <__sinit_lock_release>:
 80091a4:	4801      	ldr	r0, [pc, #4]	; (80091ac <__sinit_lock_release+0x8>)
 80091a6:	f000 b8a2 	b.w	80092ee <__retarget_lock_release_recursive>
 80091aa:	bf00      	nop
 80091ac:	20000726 	.word	0x20000726

080091b0 <__sinit>:
 80091b0:	b510      	push	{r4, lr}
 80091b2:	4604      	mov	r4, r0
 80091b4:	f7ff fff0 	bl	8009198 <__sinit_lock_acquire>
 80091b8:	69a3      	ldr	r3, [r4, #24]
 80091ba:	b11b      	cbz	r3, 80091c4 <__sinit+0x14>
 80091bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091c0:	f7ff bff0 	b.w	80091a4 <__sinit_lock_release>
 80091c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80091c8:	6523      	str	r3, [r4, #80]	; 0x50
 80091ca:	4b13      	ldr	r3, [pc, #76]	; (8009218 <__sinit+0x68>)
 80091cc:	4a13      	ldr	r2, [pc, #76]	; (800921c <__sinit+0x6c>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80091d2:	42a3      	cmp	r3, r4
 80091d4:	bf04      	itt	eq
 80091d6:	2301      	moveq	r3, #1
 80091d8:	61a3      	streq	r3, [r4, #24]
 80091da:	4620      	mov	r0, r4
 80091dc:	f000 f820 	bl	8009220 <__sfp>
 80091e0:	6060      	str	r0, [r4, #4]
 80091e2:	4620      	mov	r0, r4
 80091e4:	f000 f81c 	bl	8009220 <__sfp>
 80091e8:	60a0      	str	r0, [r4, #8]
 80091ea:	4620      	mov	r0, r4
 80091ec:	f000 f818 	bl	8009220 <__sfp>
 80091f0:	2200      	movs	r2, #0
 80091f2:	60e0      	str	r0, [r4, #12]
 80091f4:	2104      	movs	r1, #4
 80091f6:	6860      	ldr	r0, [r4, #4]
 80091f8:	f7ff ff82 	bl	8009100 <std>
 80091fc:	68a0      	ldr	r0, [r4, #8]
 80091fe:	2201      	movs	r2, #1
 8009200:	2109      	movs	r1, #9
 8009202:	f7ff ff7d 	bl	8009100 <std>
 8009206:	68e0      	ldr	r0, [r4, #12]
 8009208:	2202      	movs	r2, #2
 800920a:	2112      	movs	r1, #18
 800920c:	f7ff ff78 	bl	8009100 <std>
 8009210:	2301      	movs	r3, #1
 8009212:	61a3      	str	r3, [r4, #24]
 8009214:	e7d2      	b.n	80091bc <__sinit+0xc>
 8009216:	bf00      	nop
 8009218:	0800c8f4 	.word	0x0800c8f4
 800921c:	08009149 	.word	0x08009149

08009220 <__sfp>:
 8009220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009222:	4607      	mov	r7, r0
 8009224:	f7ff ffac 	bl	8009180 <__sfp_lock_acquire>
 8009228:	4b1e      	ldr	r3, [pc, #120]	; (80092a4 <__sfp+0x84>)
 800922a:	681e      	ldr	r6, [r3, #0]
 800922c:	69b3      	ldr	r3, [r6, #24]
 800922e:	b913      	cbnz	r3, 8009236 <__sfp+0x16>
 8009230:	4630      	mov	r0, r6
 8009232:	f7ff ffbd 	bl	80091b0 <__sinit>
 8009236:	3648      	adds	r6, #72	; 0x48
 8009238:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800923c:	3b01      	subs	r3, #1
 800923e:	d503      	bpl.n	8009248 <__sfp+0x28>
 8009240:	6833      	ldr	r3, [r6, #0]
 8009242:	b30b      	cbz	r3, 8009288 <__sfp+0x68>
 8009244:	6836      	ldr	r6, [r6, #0]
 8009246:	e7f7      	b.n	8009238 <__sfp+0x18>
 8009248:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800924c:	b9d5      	cbnz	r5, 8009284 <__sfp+0x64>
 800924e:	4b16      	ldr	r3, [pc, #88]	; (80092a8 <__sfp+0x88>)
 8009250:	60e3      	str	r3, [r4, #12]
 8009252:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009256:	6665      	str	r5, [r4, #100]	; 0x64
 8009258:	f000 f847 	bl	80092ea <__retarget_lock_init_recursive>
 800925c:	f7ff ff96 	bl	800918c <__sfp_lock_release>
 8009260:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009264:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009268:	6025      	str	r5, [r4, #0]
 800926a:	61a5      	str	r5, [r4, #24]
 800926c:	2208      	movs	r2, #8
 800926e:	4629      	mov	r1, r5
 8009270:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009274:	f7ff f90e 	bl	8008494 <memset>
 8009278:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800927c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009280:	4620      	mov	r0, r4
 8009282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009284:	3468      	adds	r4, #104	; 0x68
 8009286:	e7d9      	b.n	800923c <__sfp+0x1c>
 8009288:	2104      	movs	r1, #4
 800928a:	4638      	mov	r0, r7
 800928c:	f7ff ff62 	bl	8009154 <__sfmoreglue>
 8009290:	4604      	mov	r4, r0
 8009292:	6030      	str	r0, [r6, #0]
 8009294:	2800      	cmp	r0, #0
 8009296:	d1d5      	bne.n	8009244 <__sfp+0x24>
 8009298:	f7ff ff78 	bl	800918c <__sfp_lock_release>
 800929c:	230c      	movs	r3, #12
 800929e:	603b      	str	r3, [r7, #0]
 80092a0:	e7ee      	b.n	8009280 <__sfp+0x60>
 80092a2:	bf00      	nop
 80092a4:	0800c8f4 	.word	0x0800c8f4
 80092a8:	ffff0001 	.word	0xffff0001

080092ac <_fwalk_reent>:
 80092ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092b0:	4606      	mov	r6, r0
 80092b2:	4688      	mov	r8, r1
 80092b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092b8:	2700      	movs	r7, #0
 80092ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092be:	f1b9 0901 	subs.w	r9, r9, #1
 80092c2:	d505      	bpl.n	80092d0 <_fwalk_reent+0x24>
 80092c4:	6824      	ldr	r4, [r4, #0]
 80092c6:	2c00      	cmp	r4, #0
 80092c8:	d1f7      	bne.n	80092ba <_fwalk_reent+0xe>
 80092ca:	4638      	mov	r0, r7
 80092cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092d0:	89ab      	ldrh	r3, [r5, #12]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d907      	bls.n	80092e6 <_fwalk_reent+0x3a>
 80092d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092da:	3301      	adds	r3, #1
 80092dc:	d003      	beq.n	80092e6 <_fwalk_reent+0x3a>
 80092de:	4629      	mov	r1, r5
 80092e0:	4630      	mov	r0, r6
 80092e2:	47c0      	blx	r8
 80092e4:	4307      	orrs	r7, r0
 80092e6:	3568      	adds	r5, #104	; 0x68
 80092e8:	e7e9      	b.n	80092be <_fwalk_reent+0x12>

080092ea <__retarget_lock_init_recursive>:
 80092ea:	4770      	bx	lr

080092ec <__retarget_lock_acquire_recursive>:
 80092ec:	4770      	bx	lr

080092ee <__retarget_lock_release_recursive>:
 80092ee:	4770      	bx	lr

080092f0 <__swhatbuf_r>:
 80092f0:	b570      	push	{r4, r5, r6, lr}
 80092f2:	460e      	mov	r6, r1
 80092f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092f8:	2900      	cmp	r1, #0
 80092fa:	b096      	sub	sp, #88	; 0x58
 80092fc:	4614      	mov	r4, r2
 80092fe:	461d      	mov	r5, r3
 8009300:	da08      	bge.n	8009314 <__swhatbuf_r+0x24>
 8009302:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009306:	2200      	movs	r2, #0
 8009308:	602a      	str	r2, [r5, #0]
 800930a:	061a      	lsls	r2, r3, #24
 800930c:	d410      	bmi.n	8009330 <__swhatbuf_r+0x40>
 800930e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009312:	e00e      	b.n	8009332 <__swhatbuf_r+0x42>
 8009314:	466a      	mov	r2, sp
 8009316:	f000 f8fb 	bl	8009510 <_fstat_r>
 800931a:	2800      	cmp	r0, #0
 800931c:	dbf1      	blt.n	8009302 <__swhatbuf_r+0x12>
 800931e:	9a01      	ldr	r2, [sp, #4]
 8009320:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009324:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009328:	425a      	negs	r2, r3
 800932a:	415a      	adcs	r2, r3
 800932c:	602a      	str	r2, [r5, #0]
 800932e:	e7ee      	b.n	800930e <__swhatbuf_r+0x1e>
 8009330:	2340      	movs	r3, #64	; 0x40
 8009332:	2000      	movs	r0, #0
 8009334:	6023      	str	r3, [r4, #0]
 8009336:	b016      	add	sp, #88	; 0x58
 8009338:	bd70      	pop	{r4, r5, r6, pc}
	...

0800933c <__smakebuf_r>:
 800933c:	898b      	ldrh	r3, [r1, #12]
 800933e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009340:	079d      	lsls	r5, r3, #30
 8009342:	4606      	mov	r6, r0
 8009344:	460c      	mov	r4, r1
 8009346:	d507      	bpl.n	8009358 <__smakebuf_r+0x1c>
 8009348:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800934c:	6023      	str	r3, [r4, #0]
 800934e:	6123      	str	r3, [r4, #16]
 8009350:	2301      	movs	r3, #1
 8009352:	6163      	str	r3, [r4, #20]
 8009354:	b002      	add	sp, #8
 8009356:	bd70      	pop	{r4, r5, r6, pc}
 8009358:	ab01      	add	r3, sp, #4
 800935a:	466a      	mov	r2, sp
 800935c:	f7ff ffc8 	bl	80092f0 <__swhatbuf_r>
 8009360:	9900      	ldr	r1, [sp, #0]
 8009362:	4605      	mov	r5, r0
 8009364:	4630      	mov	r0, r6
 8009366:	f7ff f909 	bl	800857c <_malloc_r>
 800936a:	b948      	cbnz	r0, 8009380 <__smakebuf_r+0x44>
 800936c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009370:	059a      	lsls	r2, r3, #22
 8009372:	d4ef      	bmi.n	8009354 <__smakebuf_r+0x18>
 8009374:	f023 0303 	bic.w	r3, r3, #3
 8009378:	f043 0302 	orr.w	r3, r3, #2
 800937c:	81a3      	strh	r3, [r4, #12]
 800937e:	e7e3      	b.n	8009348 <__smakebuf_r+0xc>
 8009380:	4b0d      	ldr	r3, [pc, #52]	; (80093b8 <__smakebuf_r+0x7c>)
 8009382:	62b3      	str	r3, [r6, #40]	; 0x28
 8009384:	89a3      	ldrh	r3, [r4, #12]
 8009386:	6020      	str	r0, [r4, #0]
 8009388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800938c:	81a3      	strh	r3, [r4, #12]
 800938e:	9b00      	ldr	r3, [sp, #0]
 8009390:	6163      	str	r3, [r4, #20]
 8009392:	9b01      	ldr	r3, [sp, #4]
 8009394:	6120      	str	r0, [r4, #16]
 8009396:	b15b      	cbz	r3, 80093b0 <__smakebuf_r+0x74>
 8009398:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800939c:	4630      	mov	r0, r6
 800939e:	f000 f8c9 	bl	8009534 <_isatty_r>
 80093a2:	b128      	cbz	r0, 80093b0 <__smakebuf_r+0x74>
 80093a4:	89a3      	ldrh	r3, [r4, #12]
 80093a6:	f023 0303 	bic.w	r3, r3, #3
 80093aa:	f043 0301 	orr.w	r3, r3, #1
 80093ae:	81a3      	strh	r3, [r4, #12]
 80093b0:	89a0      	ldrh	r0, [r4, #12]
 80093b2:	4305      	orrs	r5, r0
 80093b4:	81a5      	strh	r5, [r4, #12]
 80093b6:	e7cd      	b.n	8009354 <__smakebuf_r+0x18>
 80093b8:	08009149 	.word	0x08009149

080093bc <_raise_r>:
 80093bc:	291f      	cmp	r1, #31
 80093be:	b538      	push	{r3, r4, r5, lr}
 80093c0:	4604      	mov	r4, r0
 80093c2:	460d      	mov	r5, r1
 80093c4:	d904      	bls.n	80093d0 <_raise_r+0x14>
 80093c6:	2316      	movs	r3, #22
 80093c8:	6003      	str	r3, [r0, #0]
 80093ca:	f04f 30ff 	mov.w	r0, #4294967295
 80093ce:	bd38      	pop	{r3, r4, r5, pc}
 80093d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80093d2:	b112      	cbz	r2, 80093da <_raise_r+0x1e>
 80093d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093d8:	b94b      	cbnz	r3, 80093ee <_raise_r+0x32>
 80093da:	4620      	mov	r0, r4
 80093dc:	f000 f830 	bl	8009440 <_getpid_r>
 80093e0:	462a      	mov	r2, r5
 80093e2:	4601      	mov	r1, r0
 80093e4:	4620      	mov	r0, r4
 80093e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093ea:	f000 b817 	b.w	800941c <_kill_r>
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d00a      	beq.n	8009408 <_raise_r+0x4c>
 80093f2:	1c59      	adds	r1, r3, #1
 80093f4:	d103      	bne.n	80093fe <_raise_r+0x42>
 80093f6:	2316      	movs	r3, #22
 80093f8:	6003      	str	r3, [r0, #0]
 80093fa:	2001      	movs	r0, #1
 80093fc:	e7e7      	b.n	80093ce <_raise_r+0x12>
 80093fe:	2400      	movs	r4, #0
 8009400:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009404:	4628      	mov	r0, r5
 8009406:	4798      	blx	r3
 8009408:	2000      	movs	r0, #0
 800940a:	e7e0      	b.n	80093ce <_raise_r+0x12>

0800940c <raise>:
 800940c:	4b02      	ldr	r3, [pc, #8]	; (8009418 <raise+0xc>)
 800940e:	4601      	mov	r1, r0
 8009410:	6818      	ldr	r0, [r3, #0]
 8009412:	f7ff bfd3 	b.w	80093bc <_raise_r>
 8009416:	bf00      	nop
 8009418:	20000064 	.word	0x20000064

0800941c <_kill_r>:
 800941c:	b538      	push	{r3, r4, r5, lr}
 800941e:	4d07      	ldr	r5, [pc, #28]	; (800943c <_kill_r+0x20>)
 8009420:	2300      	movs	r3, #0
 8009422:	4604      	mov	r4, r0
 8009424:	4608      	mov	r0, r1
 8009426:	4611      	mov	r1, r2
 8009428:	602b      	str	r3, [r5, #0]
 800942a:	f7f8 fc17 	bl	8001c5c <_kill>
 800942e:	1c43      	adds	r3, r0, #1
 8009430:	d102      	bne.n	8009438 <_kill_r+0x1c>
 8009432:	682b      	ldr	r3, [r5, #0]
 8009434:	b103      	cbz	r3, 8009438 <_kill_r+0x1c>
 8009436:	6023      	str	r3, [r4, #0]
 8009438:	bd38      	pop	{r3, r4, r5, pc}
 800943a:	bf00      	nop
 800943c:	20000720 	.word	0x20000720

08009440 <_getpid_r>:
 8009440:	f7f8 bc04 	b.w	8001c4c <_getpid>

08009444 <__sread>:
 8009444:	b510      	push	{r4, lr}
 8009446:	460c      	mov	r4, r1
 8009448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800944c:	f000 f894 	bl	8009578 <_read_r>
 8009450:	2800      	cmp	r0, #0
 8009452:	bfab      	itete	ge
 8009454:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009456:	89a3      	ldrhlt	r3, [r4, #12]
 8009458:	181b      	addge	r3, r3, r0
 800945a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800945e:	bfac      	ite	ge
 8009460:	6563      	strge	r3, [r4, #84]	; 0x54
 8009462:	81a3      	strhlt	r3, [r4, #12]
 8009464:	bd10      	pop	{r4, pc}

08009466 <__swrite>:
 8009466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800946a:	461f      	mov	r7, r3
 800946c:	898b      	ldrh	r3, [r1, #12]
 800946e:	05db      	lsls	r3, r3, #23
 8009470:	4605      	mov	r5, r0
 8009472:	460c      	mov	r4, r1
 8009474:	4616      	mov	r6, r2
 8009476:	d505      	bpl.n	8009484 <__swrite+0x1e>
 8009478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800947c:	2302      	movs	r3, #2
 800947e:	2200      	movs	r2, #0
 8009480:	f000 f868 	bl	8009554 <_lseek_r>
 8009484:	89a3      	ldrh	r3, [r4, #12]
 8009486:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800948a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800948e:	81a3      	strh	r3, [r4, #12]
 8009490:	4632      	mov	r2, r6
 8009492:	463b      	mov	r3, r7
 8009494:	4628      	mov	r0, r5
 8009496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800949a:	f000 b817 	b.w	80094cc <_write_r>

0800949e <__sseek>:
 800949e:	b510      	push	{r4, lr}
 80094a0:	460c      	mov	r4, r1
 80094a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094a6:	f000 f855 	bl	8009554 <_lseek_r>
 80094aa:	1c43      	adds	r3, r0, #1
 80094ac:	89a3      	ldrh	r3, [r4, #12]
 80094ae:	bf15      	itete	ne
 80094b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80094b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094ba:	81a3      	strheq	r3, [r4, #12]
 80094bc:	bf18      	it	ne
 80094be:	81a3      	strhne	r3, [r4, #12]
 80094c0:	bd10      	pop	{r4, pc}

080094c2 <__sclose>:
 80094c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c6:	f000 b813 	b.w	80094f0 <_close_r>
	...

080094cc <_write_r>:
 80094cc:	b538      	push	{r3, r4, r5, lr}
 80094ce:	4d07      	ldr	r5, [pc, #28]	; (80094ec <_write_r+0x20>)
 80094d0:	4604      	mov	r4, r0
 80094d2:	4608      	mov	r0, r1
 80094d4:	4611      	mov	r1, r2
 80094d6:	2200      	movs	r2, #0
 80094d8:	602a      	str	r2, [r5, #0]
 80094da:	461a      	mov	r2, r3
 80094dc:	f7f8 fbf5 	bl	8001cca <_write>
 80094e0:	1c43      	adds	r3, r0, #1
 80094e2:	d102      	bne.n	80094ea <_write_r+0x1e>
 80094e4:	682b      	ldr	r3, [r5, #0]
 80094e6:	b103      	cbz	r3, 80094ea <_write_r+0x1e>
 80094e8:	6023      	str	r3, [r4, #0]
 80094ea:	bd38      	pop	{r3, r4, r5, pc}
 80094ec:	20000720 	.word	0x20000720

080094f0 <_close_r>:
 80094f0:	b538      	push	{r3, r4, r5, lr}
 80094f2:	4d06      	ldr	r5, [pc, #24]	; (800950c <_close_r+0x1c>)
 80094f4:	2300      	movs	r3, #0
 80094f6:	4604      	mov	r4, r0
 80094f8:	4608      	mov	r0, r1
 80094fa:	602b      	str	r3, [r5, #0]
 80094fc:	f7f8 fc01 	bl	8001d02 <_close>
 8009500:	1c43      	adds	r3, r0, #1
 8009502:	d102      	bne.n	800950a <_close_r+0x1a>
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	b103      	cbz	r3, 800950a <_close_r+0x1a>
 8009508:	6023      	str	r3, [r4, #0]
 800950a:	bd38      	pop	{r3, r4, r5, pc}
 800950c:	20000720 	.word	0x20000720

08009510 <_fstat_r>:
 8009510:	b538      	push	{r3, r4, r5, lr}
 8009512:	4d07      	ldr	r5, [pc, #28]	; (8009530 <_fstat_r+0x20>)
 8009514:	2300      	movs	r3, #0
 8009516:	4604      	mov	r4, r0
 8009518:	4608      	mov	r0, r1
 800951a:	4611      	mov	r1, r2
 800951c:	602b      	str	r3, [r5, #0]
 800951e:	f7f8 fbfc 	bl	8001d1a <_fstat>
 8009522:	1c43      	adds	r3, r0, #1
 8009524:	d102      	bne.n	800952c <_fstat_r+0x1c>
 8009526:	682b      	ldr	r3, [r5, #0]
 8009528:	b103      	cbz	r3, 800952c <_fstat_r+0x1c>
 800952a:	6023      	str	r3, [r4, #0]
 800952c:	bd38      	pop	{r3, r4, r5, pc}
 800952e:	bf00      	nop
 8009530:	20000720 	.word	0x20000720

08009534 <_isatty_r>:
 8009534:	b538      	push	{r3, r4, r5, lr}
 8009536:	4d06      	ldr	r5, [pc, #24]	; (8009550 <_isatty_r+0x1c>)
 8009538:	2300      	movs	r3, #0
 800953a:	4604      	mov	r4, r0
 800953c:	4608      	mov	r0, r1
 800953e:	602b      	str	r3, [r5, #0]
 8009540:	f7f8 fbfb 	bl	8001d3a <_isatty>
 8009544:	1c43      	adds	r3, r0, #1
 8009546:	d102      	bne.n	800954e <_isatty_r+0x1a>
 8009548:	682b      	ldr	r3, [r5, #0]
 800954a:	b103      	cbz	r3, 800954e <_isatty_r+0x1a>
 800954c:	6023      	str	r3, [r4, #0]
 800954e:	bd38      	pop	{r3, r4, r5, pc}
 8009550:	20000720 	.word	0x20000720

08009554 <_lseek_r>:
 8009554:	b538      	push	{r3, r4, r5, lr}
 8009556:	4d07      	ldr	r5, [pc, #28]	; (8009574 <_lseek_r+0x20>)
 8009558:	4604      	mov	r4, r0
 800955a:	4608      	mov	r0, r1
 800955c:	4611      	mov	r1, r2
 800955e:	2200      	movs	r2, #0
 8009560:	602a      	str	r2, [r5, #0]
 8009562:	461a      	mov	r2, r3
 8009564:	f7f8 fbf4 	bl	8001d50 <_lseek>
 8009568:	1c43      	adds	r3, r0, #1
 800956a:	d102      	bne.n	8009572 <_lseek_r+0x1e>
 800956c:	682b      	ldr	r3, [r5, #0]
 800956e:	b103      	cbz	r3, 8009572 <_lseek_r+0x1e>
 8009570:	6023      	str	r3, [r4, #0]
 8009572:	bd38      	pop	{r3, r4, r5, pc}
 8009574:	20000720 	.word	0x20000720

08009578 <_read_r>:
 8009578:	b538      	push	{r3, r4, r5, lr}
 800957a:	4d07      	ldr	r5, [pc, #28]	; (8009598 <_read_r+0x20>)
 800957c:	4604      	mov	r4, r0
 800957e:	4608      	mov	r0, r1
 8009580:	4611      	mov	r1, r2
 8009582:	2200      	movs	r2, #0
 8009584:	602a      	str	r2, [r5, #0]
 8009586:	461a      	mov	r2, r3
 8009588:	f7f8 fb82 	bl	8001c90 <_read>
 800958c:	1c43      	adds	r3, r0, #1
 800958e:	d102      	bne.n	8009596 <_read_r+0x1e>
 8009590:	682b      	ldr	r3, [r5, #0]
 8009592:	b103      	cbz	r3, 8009596 <_read_r+0x1e>
 8009594:	6023      	str	r3, [r4, #0]
 8009596:	bd38      	pop	{r3, r4, r5, pc}
 8009598:	20000720 	.word	0x20000720

0800959c <_init>:
 800959c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959e:	bf00      	nop
 80095a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095a2:	bc08      	pop	{r3}
 80095a4:	469e      	mov	lr, r3
 80095a6:	4770      	bx	lr

080095a8 <_fini>:
 80095a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095aa:	bf00      	nop
 80095ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ae:	bc08      	pop	{r3}
 80095b0:	469e      	mov	lr, r3
 80095b2:	4770      	bx	lr
