
MusicMaster_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002548  08008538  08008538  00018538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa80  0800aa80  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa80  0800aa80  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa80  0800aa80  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa80  0800aa80  0001aa80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa84  0800aa84  0001aa84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800aa88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          0000065c  20000100  20000100  00020100  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000075c  2000075c  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c9c3  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033e0  00000000  00000000  0003caf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001730  00000000  00000000  0003fed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001650  00000000  00000000  00041608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020db2  00000000  00000000  00042c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d718  00000000  00000000  00063a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c762f  00000000  00000000  00081122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00148751  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000663c  00000000  00000000  001487a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000100 	.word	0x20000100
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008520 	.word	0x08008520

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000104 	.word	0x20000104
 80001c4:	08008520 	.word	0x08008520

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <hashString>:
    struct DictionaryNode **buckets;
    int size;
};

// Hash function for string keys
unsigned int hashString(const char *key, int size) {
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	6039      	str	r1, [r7, #0]
    unsigned int hash = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	60fb      	str	r3, [r7, #12]
    while (*key) {
 80001fa:	e007      	b.n	800020c <hashString+0x20>
        hash = (hash << 5) + *key++;
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	015a      	lsls	r2, r3, #5
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	1c59      	adds	r1, r3, #1
 8000204:	6079      	str	r1, [r7, #4]
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	4413      	add	r3, r2
 800020a:	60fb      	str	r3, [r7, #12]
    while (*key) {
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d1f3      	bne.n	80001fc <hashString+0x10>
    }
    return hash % size;
 8000214:	683a      	ldr	r2, [r7, #0]
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	fbb3 f1f2 	udiv	r1, r3, r2
 800021c:	fb01 f202 	mul.w	r2, r1, r2
 8000220:	1a9b      	subs	r3, r3, r2
}
 8000222:	4618      	mov	r0, r3
 8000224:	3714      	adds	r7, #20
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr

0800022e <hashNumeric>:

// Hash function for numeric keys
unsigned int hashNumeric(int key, int size) {
 800022e:	b480      	push	{r7}
 8000230:	b083      	sub	sp, #12
 8000232:	af00      	add	r7, sp, #0
 8000234:	6078      	str	r0, [r7, #4]
 8000236:	6039      	str	r1, [r7, #0]
    return key % size;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	683a      	ldr	r2, [r7, #0]
 800023c:	fb93 f2f2 	sdiv	r2, r3, r2
 8000240:	6839      	ldr	r1, [r7, #0]
 8000242:	fb01 f202 	mul.w	r2, r1, r2
 8000246:	1a9b      	subs	r3, r3, r2
}
 8000248:	4618      	mov	r0, r3
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr

08000254 <initDictionary>:

// Initialize dictionary
Dictionary *initDictionary(int size) {
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
    Dictionary *dict = malloc(sizeof(Dictionary));
 800025c:	2008      	movs	r0, #8
 800025e:	f008 f871 	bl	8008344 <malloc>
 8000262:	4603      	mov	r3, r0
 8000264:	60bb      	str	r3, [r7, #8]
    dict->buckets = malloc(size * sizeof(struct DictionaryNode *));
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	009b      	lsls	r3, r3, #2
 800026a:	4618      	mov	r0, r3
 800026c:	f008 f86a 	bl	8008344 <malloc>
 8000270:	4603      	mov	r3, r0
 8000272:	461a      	mov	r2, r3
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	601a      	str	r2, [r3, #0]
    dict->size = size;
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < size; i++) {
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
 8000282:	e009      	b.n	8000298 <initDictionary+0x44>
        dict->buckets[i] = NULL;
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	681a      	ldr	r2, [r3, #0]
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	009b      	lsls	r3, r3, #2
 800028c:	4413      	add	r3, r2
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	3301      	adds	r3, #1
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	68fa      	ldr	r2, [r7, #12]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	429a      	cmp	r2, r3
 800029e:	dbf1      	blt.n	8000284 <initDictionary+0x30>
    }
    return dict;
 80002a0:	68bb      	ldr	r3, [r7, #8]
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	3710      	adds	r7, #16
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}

080002aa <insert>:

// Insert key-value pair into dictionary
void insert(Dictionary *dict, const char *stringKey, int numericKey, struct Tone *tones, int numTones) {
 80002aa:	b580      	push	{r7, lr}
 80002ac:	b086      	sub	sp, #24
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	60f8      	str	r0, [r7, #12]
 80002b2:	60b9      	str	r1, [r7, #8]
 80002b4:	607a      	str	r2, [r7, #4]
 80002b6:	603b      	str	r3, [r7, #0]
    unsigned int index;
    struct DictionaryNode *newNode = malloc(sizeof(struct DictionaryNode));
 80002b8:	2014      	movs	r0, #20
 80002ba:	f008 f843 	bl	8008344 <malloc>
 80002be:	4603      	mov	r3, r0
 80002c0:	613b      	str	r3, [r7, #16]
    newNode->stringKey = strdup(stringKey);
 80002c2:	68b8      	ldr	r0, [r7, #8]
 80002c4:	f008 f900 	bl	80084c8 <strdup>
 80002c8:	4603      	mov	r3, r0
 80002ca:	461a      	mov	r2, r3
 80002cc:	693b      	ldr	r3, [r7, #16]
 80002ce:	601a      	str	r2, [r3, #0]
    newNode->numericKey = numericKey;
 80002d0:	693b      	ldr	r3, [r7, #16]
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	605a      	str	r2, [r3, #4]
    newNode->tones = malloc(numTones * sizeof(struct Tone));
 80002d6:	6a3b      	ldr	r3, [r7, #32]
 80002d8:	00db      	lsls	r3, r3, #3
 80002da:	4618      	mov	r0, r3
 80002dc:	f008 f832 	bl	8008344 <malloc>
 80002e0:	4603      	mov	r3, r0
 80002e2:	461a      	mov	r2, r3
 80002e4:	693b      	ldr	r3, [r7, #16]
 80002e6:	609a      	str	r2, [r3, #8]
    memcpy(newNode->tones, tones, numTones * sizeof(struct Tone));
 80002e8:	693b      	ldr	r3, [r7, #16]
 80002ea:	6898      	ldr	r0, [r3, #8]
 80002ec:	6a3b      	ldr	r3, [r7, #32]
 80002ee:	00db      	lsls	r3, r3, #3
 80002f0:	461a      	mov	r2, r3
 80002f2:	6839      	ldr	r1, [r7, #0]
 80002f4:	f008 f82e 	bl	8008354 <memcpy>
    newNode->numTones = numTones;
 80002f8:	693b      	ldr	r3, [r7, #16]
 80002fa:	6a3a      	ldr	r2, [r7, #32]
 80002fc:	60da      	str	r2, [r3, #12]

    if (stringKey != NULL) {
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d007      	beq.n	8000314 <insert+0x6a>
        index = hashString(stringKey, dict->size);
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	4619      	mov	r1, r3
 800030a:	68b8      	ldr	r0, [r7, #8]
 800030c:	f7ff ff6e 	bl	80001ec <hashString>
 8000310:	6178      	str	r0, [r7, #20]
 8000312:	e006      	b.n	8000322 <insert+0x78>
    } else {
        index = hashNumeric(numericKey, dict->size);
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	4619      	mov	r1, r3
 800031a:	6878      	ldr	r0, [r7, #4]
 800031c:	f7ff ff87 	bl	800022e <hashNumeric>
 8000320:	6178      	str	r0, [r7, #20]
    }

    newNode->next = dict->buckets[index];
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	697b      	ldr	r3, [r7, #20]
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	4413      	add	r3, r2
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	693b      	ldr	r3, [r7, #16]
 8000330:	611a      	str	r2, [r3, #16]
    dict->buckets[index] = newNode;
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	009b      	lsls	r3, r3, #2
 800033a:	4413      	add	r3, r2
 800033c:	693a      	ldr	r2, [r7, #16]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	bf00      	nop
 8000342:	3718      	adds	r7, #24
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <lookup>:

// Lookup value by key
struct Tone *lookup(Dictionary *dict, const char *stringKey, int numericKey, int *numTones) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af00      	add	r7, sp, #0
 800034e:	60f8      	str	r0, [r7, #12]
 8000350:	60b9      	str	r1, [r7, #8]
 8000352:	607a      	str	r2, [r7, #4]
 8000354:	603b      	str	r3, [r7, #0]
    unsigned int index;
    struct DictionaryNode *current;

    if (stringKey != NULL) {
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d029      	beq.n	80003b0 <lookup+0x68>
        index = hashString(stringKey, dict->size);
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	4619      	mov	r1, r3
 8000362:	68b8      	ldr	r0, [r7, #8]
 8000364:	f7ff ff42 	bl	80001ec <hashString>
 8000368:	6138      	str	r0, [r7, #16]
        current = dict->buckets[index];
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	4413      	add	r3, r2
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	617b      	str	r3, [r7, #20]
        while (current) {
 8000378:	e016      	b.n	80003a8 <lookup+0x60>
            if (current->stringKey && strcmp(current->stringKey, stringKey) == 0) {
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d00f      	beq.n	80003a2 <lookup+0x5a>
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	68b9      	ldr	r1, [r7, #8]
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff ff1d 	bl	80001c8 <strcmp>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d106      	bne.n	80003a2 <lookup+0x5a>
                *numTones = current->numTones;
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	68da      	ldr	r2, [r3, #12]
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	601a      	str	r2, [r3, #0]
                return current->tones;
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	689b      	ldr	r3, [r3, #8]
 80003a0:	e02b      	b.n	80003fa <lookup+0xb2>
            }
            current = current->next;
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	691b      	ldr	r3, [r3, #16]
 80003a6:	617b      	str	r3, [r7, #20]
        while (current) {
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d1e5      	bne.n	800037a <lookup+0x32>
 80003ae:	e020      	b.n	80003f2 <lookup+0xaa>
        }
    } else {
        index = hashNumeric(numericKey, dict->size);
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	685b      	ldr	r3, [r3, #4]
 80003b4:	4619      	mov	r1, r3
 80003b6:	6878      	ldr	r0, [r7, #4]
 80003b8:	f7ff ff39 	bl	800022e <hashNumeric>
 80003bc:	6138      	str	r0, [r7, #16]
        current = dict->buckets[index];
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	693b      	ldr	r3, [r7, #16]
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	4413      	add	r3, r2
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	617b      	str	r3, [r7, #20]
        while (current) {
 80003cc:	e00e      	b.n	80003ec <lookup+0xa4>
            if (current->numericKey == numericKey) {
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	687a      	ldr	r2, [r7, #4]
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d106      	bne.n	80003e6 <lookup+0x9e>
                *numTones = current->numTones;
 80003d8:	697b      	ldr	r3, [r7, #20]
 80003da:	68da      	ldr	r2, [r3, #12]
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	601a      	str	r2, [r3, #0]
                return current->tones;
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	e009      	b.n	80003fa <lookup+0xb2>
            }
            current = current->next;
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	691b      	ldr	r3, [r3, #16]
 80003ea:	617b      	str	r3, [r7, #20]
        while (current) {
 80003ec:	697b      	ldr	r3, [r7, #20]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d1ed      	bne.n	80003ce <lookup+0x86>
        }
    }

    *numTones = 0;
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
    return NULL;
 80003f8:	2300      	movs	r3, #0
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	3718      	adds	r7, #24
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
	...

08000404 <extractNumber>:
////}
//PWM END

//UART BEGIN

void extractNumber(const uint8_t *data) {
 8000404:	b5b0      	push	{r4, r5, r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
	isCorrect = -1;
 800040c:	4b3a      	ldr	r3, [pc, #232]	; (80004f8 <extractNumber+0xf4>)
 800040e:	f04f 32ff 	mov.w	r2, #4294967295
 8000412:	601a      	str	r2, [r3, #0]
	// Extract the first four characters and convert them to integers
	char pass[19] = "PASS_CHANGED(XXXX)\n";
 8000414:	4b39      	ldr	r3, [pc, #228]	; (80004fc <extractNumber+0xf8>)
 8000416:	f107 0408 	add.w	r4, r7, #8
 800041a:	461d      	mov	r5, r3
 800041c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800041e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000420:	682b      	ldr	r3, [r5, #0]
 8000422:	461a      	mov	r2, r3
 8000424:	8022      	strh	r2, [r4, #0]
 8000426:	3402      	adds	r4, #2
 8000428:	0c1b      	lsrs	r3, r3, #16
 800042a:	7023      	strb	r3, [r4, #0]
	pass[13] = data[9];
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	3309      	adds	r3, #9
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	757b      	strb	r3, [r7, #21]
	pass[14] = data[10];
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	330a      	adds	r3, #10
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	75bb      	strb	r3, [r7, #22]
	pass[15] = data[11];
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	330b      	adds	r3, #11
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	75fb      	strb	r3, [r7, #23]
	pass[16] = data[12];
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	330c      	adds	r3, #12
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	763b      	strb	r3, [r7, #24]

	for (int i = 9; i < 13; i++) {
 800044c:	2309      	movs	r3, #9
 800044e:	61fb      	str	r3, [r7, #28]
 8000450:	e034      	b.n	80004bc <extractNumber+0xb8>
		if (data[i] <= '9' && data[i] >= '0') {
 8000452:	69fb      	ldr	r3, [r7, #28]
 8000454:	687a      	ldr	r2, [r7, #4]
 8000456:	4413      	add	r3, r2
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b39      	cmp	r3, #57	; 0x39
 800045c:	d814      	bhi.n	8000488 <extractNumber+0x84>
 800045e:	69fb      	ldr	r3, [r7, #28]
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	4413      	add	r3, r2
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b2f      	cmp	r3, #47	; 0x2f
 8000468:	d90e      	bls.n	8000488 <extractNumber+0x84>
			password[i - 9] = data[i] - '0';
 800046a:	69fb      	ldr	r3, [r7, #28]
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	4413      	add	r3, r2
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	461a      	mov	r2, r3
 8000474:	69fb      	ldr	r3, [r7, #28]
 8000476:	3b09      	subs	r3, #9
 8000478:	3a30      	subs	r2, #48	; 0x30
 800047a:	4921      	ldr	r1, [pc, #132]	; (8000500 <extractNumber+0xfc>)
 800047c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 9; i < 13; i++) {
 8000480:	69fb      	ldr	r3, [r7, #28]
 8000482:	3301      	adds	r3, #1
 8000484:	61fb      	str	r3, [r7, #28]
 8000486:	e019      	b.n	80004bc <extractNumber+0xb8>
		} else {
			if (logStatus) {
 8000488:	4b1e      	ldr	r3, [pc, #120]	; (8000504 <extractNumber+0x100>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d004      	beq.n	800049a <extractNumber+0x96>
				HAL_UART_Transmit_IT(&huart1, "ERROR(INCORRECT FORMAT)\n", 24);
 8000490:	2218      	movs	r2, #24
 8000492:	491d      	ldr	r1, [pc, #116]	; (8000508 <extractNumber+0x104>)
 8000494:	481d      	ldr	r0, [pc, #116]	; (800050c <extractNumber+0x108>)
 8000496:	f006 fbfb 	bl	8006c90 <HAL_UART_Transmit_IT>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 800049a:	2200      	movs	r2, #0
 800049c:	2101      	movs	r1, #1
 800049e:	481c      	ldr	r0, [pc, #112]	; (8000510 <extractNumber+0x10c>)
 80004a0:	f003 faa4 	bl	80039ec <HAL_GPIO_WritePin>
			buzzerEnterTime = HAL_GetTick();
 80004a4:	f001 fc9c 	bl	8001de0 <HAL_GetTick>
 80004a8:	4603      	mov	r3, r0
 80004aa:	4a1a      	ldr	r2, [pc, #104]	; (8000514 <extractNumber+0x110>)
 80004ac:	6013      	str	r3, [r2, #0]
			if (alertStatus)
 80004ae:	4b1a      	ldr	r3, [pc, #104]	; (8000518 <extractNumber+0x114>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d01c      	beq.n	80004f0 <extractNumber+0xec>
				PWM_Start();
 80004b6:	f001 fa23 	bl	8001900 <PWM_Start>
 80004ba:	e01a      	b.n	80004f2 <extractNumber+0xee>
	for (int i = 9; i < 13; i++) {
 80004bc:	69fb      	ldr	r3, [r7, #28]
 80004be:	2b0c      	cmp	r3, #12
 80004c0:	ddc7      	ble.n	8000452 <extractNumber+0x4e>
			return;
		}
	}
	if (logStatus) {
 80004c2:	4b10      	ldr	r3, [pc, #64]	; (8000504 <extractNumber+0x100>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d013      	beq.n	80004f2 <extractNumber+0xee>
		HAL_UART_Transmit_IT(&huart1, pass, 19);
 80004ca:	f107 0308 	add.w	r3, r7, #8
 80004ce:	2213      	movs	r2, #19
 80004d0:	4619      	mov	r1, r3
 80004d2:	480e      	ldr	r0, [pc, #56]	; (800050c <extractNumber+0x108>)
 80004d4:	f006 fbdc 	bl	8006c90 <HAL_UART_Transmit_IT>
		buzzerEnterTime = HAL_GetTick();
 80004d8:	f001 fc82 	bl	8001de0 <HAL_GetTick>
 80004dc:	4603      	mov	r3, r0
 80004de:	4a0d      	ldr	r2, [pc, #52]	; (8000514 <extractNumber+0x110>)
 80004e0:	6013      	str	r3, [r2, #0]
		if (alertStatus)
 80004e2:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <extractNumber+0x114>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d003      	beq.n	80004f2 <extractNumber+0xee>
			PWM_Start();
 80004ea:	f001 fa09 	bl	8001900 <PWM_Start>
 80004ee:	e000      	b.n	80004f2 <extractNumber+0xee>
			return;
 80004f0:	bf00      	nop
	}
}
 80004f2:	3720      	adds	r7, #32
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bdb0      	pop	{r4, r5, r7, pc}
 80004f8:	20000040 	.word	0x20000040
 80004fc:	08008554 	.word	0x08008554
 8000500:	20000000 	.word	0x20000000
 8000504:	20000038 	.word	0x20000038
 8000508:	08008538 	.word	0x08008538
 800050c:	200002bc 	.word	0x200002bc
 8000510:	48000800 	.word	0x48000800
 8000514:	20000670 	.word	0x20000670
 8000518:	2000003c 	.word	0x2000003c

0800051c <compareStrings>:

int compareStrings(const char *str1, const uint8_t *str2, int n) {
 800051c:	b480      	push	{r7}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < n; i++) {
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]
 800052c:	e00e      	b.n	800054c <compareStrings+0x30>
		if (str1[i] != str2[i]) {
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	4413      	add	r3, r2
 8000534:	781a      	ldrb	r2, [r3, #0]
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	68b9      	ldr	r1, [r7, #8]
 800053a:	440b      	add	r3, r1
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	429a      	cmp	r2, r3
 8000540:	d001      	beq.n	8000546 <compareStrings+0x2a>
			return 0;
 8000542:	2300      	movs	r3, #0
 8000544:	e007      	b.n	8000556 <compareStrings+0x3a>
	for (int i = 0; i < n; i++) {
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	3301      	adds	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	697a      	ldr	r2, [r7, #20]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	429a      	cmp	r2, r3
 8000552:	dbec      	blt.n	800052e <compareStrings+0x12>
		}
	}
	return 1;
 8000554:	2301      	movs	r3, #1
}
 8000556:	4618      	mov	r0, r3
 8000558:	371c      	adds	r7, #28
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
	...

08000564 <HAL_UART_RxCpltCallback>:

uint8_t data[100];
uint8_t d;
uint8_t i;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000564:	b5b0      	push	{r4, r5, r7, lr}
 8000566:	b08a      	sub	sp, #40	; 0x28
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a6f      	ldr	r2, [pc, #444]	; (8000730 <HAL_UART_RxCpltCallback+0x1cc>)
 8000572:	4293      	cmp	r3, r2
 8000574:	f040 80d7 	bne.w	8000726 <HAL_UART_RxCpltCallback+0x1c2>
		HAL_UART_Receive_IT(&huart1, &d, 1);
 8000578:	2201      	movs	r2, #1
 800057a:	496e      	ldr	r1, [pc, #440]	; (8000734 <HAL_UART_RxCpltCallback+0x1d0>)
 800057c:	486e      	ldr	r0, [pc, #440]	; (8000738 <HAL_UART_RxCpltCallback+0x1d4>)
 800057e:	f006 fbe5 	bl	8006d4c <HAL_UART_Receive_IT>
		data[i++] = d;
 8000582:	4b6e      	ldr	r3, [pc, #440]	; (800073c <HAL_UART_RxCpltCallback+0x1d8>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	1c5a      	adds	r2, r3, #1
 8000588:	b2d1      	uxtb	r1, r2
 800058a:	4a6c      	ldr	r2, [pc, #432]	; (800073c <HAL_UART_RxCpltCallback+0x1d8>)
 800058c:	7011      	strb	r1, [r2, #0]
 800058e:	461a      	mov	r2, r3
 8000590:	4b68      	ldr	r3, [pc, #416]	; (8000734 <HAL_UART_RxCpltCallback+0x1d0>)
 8000592:	7819      	ldrb	r1, [r3, #0]
 8000594:	4b6a      	ldr	r3, [pc, #424]	; (8000740 <HAL_UART_RxCpltCallback+0x1dc>)
 8000596:	5499      	strb	r1, [r3, r2]
		if (d == '\n') {
 8000598:	4b66      	ldr	r3, [pc, #408]	; (8000734 <HAL_UART_RxCpltCallback+0x1d0>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b0a      	cmp	r3, #10
 800059e:	f040 80c2 	bne.w	8000726 <HAL_UART_RxCpltCallback+0x1c2>
			if ((i == 15 && compareStrings(setPass, data, 9) == 1)
 80005a2:	4b66      	ldr	r3, [pc, #408]	; (800073c <HAL_UART_RxCpltCallback+0x1d8>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b0f      	cmp	r3, #15
 80005a8:	d11a      	bne.n	80005e0 <HAL_UART_RxCpltCallback+0x7c>
 80005aa:	2209      	movs	r2, #9
 80005ac:	4964      	ldr	r1, [pc, #400]	; (8000740 <HAL_UART_RxCpltCallback+0x1dc>)
 80005ae:	4865      	ldr	r0, [pc, #404]	; (8000744 <HAL_UART_RxCpltCallback+0x1e0>)
 80005b0:	f7ff ffb4 	bl	800051c <compareStrings>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d112      	bne.n	80005e0 <HAL_UART_RxCpltCallback+0x7c>
					&& isCorrect == -1) {
 80005ba:	4b63      	ldr	r3, [pc, #396]	; (8000748 <HAL_UART_RxCpltCallback+0x1e4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c2:	d10d      	bne.n	80005e0 <HAL_UART_RxCpltCallback+0x7c>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 80005c4:	2201      	movs	r2, #1
 80005c6:	2101      	movs	r1, #1
 80005c8:	4860      	ldr	r0, [pc, #384]	; (800074c <HAL_UART_RxCpltCallback+0x1e8>)
 80005ca:	f003 fa0f 	bl	80039ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2104      	movs	r1, #4
 80005d2:	485e      	ldr	r0, [pc, #376]	; (800074c <HAL_UART_RxCpltCallback+0x1e8>)
 80005d4:	f003 fa0a 	bl	80039ec <HAL_GPIO_WritePin>
				extractNumber(data);
 80005d8:	4859      	ldr	r0, [pc, #356]	; (8000740 <HAL_UART_RxCpltCallback+0x1dc>)
 80005da:	f7ff ff13 	bl	8000404 <extractNumber>
 80005de:	e09f      	b.n	8000720 <HAL_UART_RxCpltCallback+0x1bc>
			} else if (i == 7) {
 80005e0:	4b56      	ldr	r3, [pc, #344]	; (800073c <HAL_UART_RxCpltCallback+0x1d8>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b07      	cmp	r3, #7
 80005e6:	d111      	bne.n	800060c <HAL_UART_RxCpltCallback+0xa8>
				if (compareStrings(logON, data, 6) == 1) {
 80005e8:	2206      	movs	r2, #6
 80005ea:	4955      	ldr	r1, [pc, #340]	; (8000740 <HAL_UART_RxCpltCallback+0x1dc>)
 80005ec:	4858      	ldr	r0, [pc, #352]	; (8000750 <HAL_UART_RxCpltCallback+0x1ec>)
 80005ee:	f7ff ff95 	bl	800051c <compareStrings>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	f040 8093 	bne.w	8000720 <HAL_UART_RxCpltCallback+0x1bc>
					logStatus = 1;
 80005fa:	4b56      	ldr	r3, [pc, #344]	; (8000754 <HAL_UART_RxCpltCallback+0x1f0>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Log Turned ON\n",
 8000600:	2216      	movs	r2, #22
 8000602:	4955      	ldr	r1, [pc, #340]	; (8000758 <HAL_UART_RxCpltCallback+0x1f4>)
 8000604:	484c      	ldr	r0, [pc, #304]	; (8000738 <HAL_UART_RxCpltCallback+0x1d4>)
 8000606:	f006 fb43 	bl	8006c90 <HAL_UART_Transmit_IT>
 800060a:	e089      	b.n	8000720 <HAL_UART_RxCpltCallback+0x1bc>
							22);
				}
			} else if (i == 8) {
 800060c:	4b4b      	ldr	r3, [pc, #300]	; (800073c <HAL_UART_RxCpltCallback+0x1d8>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b08      	cmp	r3, #8
 8000612:	d110      	bne.n	8000636 <HAL_UART_RxCpltCallback+0xd2>
				if (compareStrings(logOFF, data, 7) == 1) {
 8000614:	2207      	movs	r2, #7
 8000616:	494a      	ldr	r1, [pc, #296]	; (8000740 <HAL_UART_RxCpltCallback+0x1dc>)
 8000618:	4850      	ldr	r0, [pc, #320]	; (800075c <HAL_UART_RxCpltCallback+0x1f8>)
 800061a:	f7ff ff7f 	bl	800051c <compareStrings>
 800061e:	4603      	mov	r3, r0
 8000620:	2b01      	cmp	r3, #1
 8000622:	d17d      	bne.n	8000720 <HAL_UART_RxCpltCallback+0x1bc>
					logStatus = 0;
 8000624:	4b4b      	ldr	r3, [pc, #300]	; (8000754 <HAL_UART_RxCpltCallback+0x1f0>)
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Log Turned OFF\n",
 800062a:	2217      	movs	r2, #23
 800062c:	494c      	ldr	r1, [pc, #304]	; (8000760 <HAL_UART_RxCpltCallback+0x1fc>)
 800062e:	4842      	ldr	r0, [pc, #264]	; (8000738 <HAL_UART_RxCpltCallback+0x1d4>)
 8000630:	f006 fb2e 	bl	8006c90 <HAL_UART_Transmit_IT>
 8000634:	e074      	b.n	8000720 <HAL_UART_RxCpltCallback+0x1bc>
							23);
				}
			} else if (i == 9) {
 8000636:	4b41      	ldr	r3, [pc, #260]	; (800073c <HAL_UART_RxCpltCallback+0x1d8>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b09      	cmp	r3, #9
 800063c:	d117      	bne.n	800066e <HAL_UART_RxCpltCallback+0x10a>
				if (compareStrings(alertON, data, 8) == 1) {
 800063e:	2208      	movs	r2, #8
 8000640:	493f      	ldr	r1, [pc, #252]	; (8000740 <HAL_UART_RxCpltCallback+0x1dc>)
 8000642:	4848      	ldr	r0, [pc, #288]	; (8000764 <HAL_UART_RxCpltCallback+0x200>)
 8000644:	f7ff ff6a 	bl	800051c <compareStrings>
 8000648:	4603      	mov	r3, r0
 800064a:	2b01      	cmp	r3, #1
 800064c:	d168      	bne.n	8000720 <HAL_UART_RxCpltCallback+0x1bc>
					alertStatus = 1;
 800064e:	4b46      	ldr	r3, [pc, #280]	; (8000768 <HAL_UART_RxCpltCallback+0x204>)
 8000650:	2201      	movs	r2, #1
 8000652:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Alerts Turned ON\n",
 8000654:	2219      	movs	r2, #25
 8000656:	4945      	ldr	r1, [pc, #276]	; (800076c <HAL_UART_RxCpltCallback+0x208>)
 8000658:	4837      	ldr	r0, [pc, #220]	; (8000738 <HAL_UART_RxCpltCallback+0x1d4>)
 800065a:	f006 fb19 	bl	8006c90 <HAL_UART_Transmit_IT>
							25);
					buzzerEnterTime = HAL_GetTick();
 800065e:	f001 fbbf 	bl	8001de0 <HAL_GetTick>
 8000662:	4603      	mov	r3, r0
 8000664:	4a42      	ldr	r2, [pc, #264]	; (8000770 <HAL_UART_RxCpltCallback+0x20c>)
 8000666:	6013      	str	r3, [r2, #0]
					PWM_Start();
 8000668:	f001 f94a 	bl	8001900 <PWM_Start>
 800066c:	e058      	b.n	8000720 <HAL_UART_RxCpltCallback+0x1bc>
				}
			} else if (i == 10) {
 800066e:	4b33      	ldr	r3, [pc, #204]	; (800073c <HAL_UART_RxCpltCallback+0x1d8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b0a      	cmp	r3, #10
 8000674:	d110      	bne.n	8000698 <HAL_UART_RxCpltCallback+0x134>
				if (compareStrings(alertOFF, data, 9) == 1) {
 8000676:	2209      	movs	r2, #9
 8000678:	4931      	ldr	r1, [pc, #196]	; (8000740 <HAL_UART_RxCpltCallback+0x1dc>)
 800067a:	483e      	ldr	r0, [pc, #248]	; (8000774 <HAL_UART_RxCpltCallback+0x210>)
 800067c:	f7ff ff4e 	bl	800051c <compareStrings>
 8000680:	4603      	mov	r3, r0
 8000682:	2b01      	cmp	r3, #1
 8000684:	d14c      	bne.n	8000720 <HAL_UART_RxCpltCallback+0x1bc>
					alertStatus = 0;
 8000686:	4b38      	ldr	r3, [pc, #224]	; (8000768 <HAL_UART_RxCpltCallback+0x204>)
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Alerts Turned OFF\n",
 800068c:	221a      	movs	r2, #26
 800068e:	493a      	ldr	r1, [pc, #232]	; (8000778 <HAL_UART_RxCpltCallback+0x214>)
 8000690:	4829      	ldr	r0, [pc, #164]	; (8000738 <HAL_UART_RxCpltCallback+0x1d4>)
 8000692:	f006 fafd 	bl	8006c90 <HAL_UART_Transmit_IT>
 8000696:	e043      	b.n	8000720 <HAL_UART_RxCpltCallback+0x1bc>
							26);
				}
			} else if (i == 14 && (data[11] - '0') < 6
 8000698:	4b28      	ldr	r3, [pc, #160]	; (800073c <HAL_UART_RxCpltCallback+0x1d8>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b0e      	cmp	r3, #14
 800069e:	d12d      	bne.n	80006fc <HAL_UART_RxCpltCallback+0x198>
 80006a0:	4b27      	ldr	r3, [pc, #156]	; (8000740 <HAL_UART_RxCpltCallback+0x1dc>)
 80006a2:	7adb      	ldrb	r3, [r3, #11]
 80006a4:	2b35      	cmp	r3, #53	; 0x35
 80006a6:	d829      	bhi.n	80006fc <HAL_UART_RxCpltCallback+0x198>
					&& (data[11] - '0') > -1) {
 80006a8:	4b25      	ldr	r3, [pc, #148]	; (8000740 <HAL_UART_RxCpltCallback+0x1dc>)
 80006aa:	7adb      	ldrb	r3, [r3, #11]
 80006ac:	2b2f      	cmp	r3, #47	; 0x2f
 80006ae:	d925      	bls.n	80006fc <HAL_UART_RxCpltCallback+0x198>
				if (compareStrings(setVolume, data, 11) == 1
 80006b0:	220b      	movs	r2, #11
 80006b2:	4923      	ldr	r1, [pc, #140]	; (8000740 <HAL_UART_RxCpltCallback+0x1dc>)
 80006b4:	4831      	ldr	r0, [pc, #196]	; (800077c <HAL_UART_RxCpltCallback+0x218>)
 80006b6:	f7ff ff31 	bl	800051c <compareStrings>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d12e      	bne.n	800071e <HAL_UART_RxCpltCallback+0x1ba>
						&& data[12] == ')') {
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <HAL_UART_RxCpltCallback+0x1dc>)
 80006c2:	7b1b      	ldrb	r3, [r3, #12]
 80006c4:	2b29      	cmp	r3, #41	; 0x29
 80006c6:	d12a      	bne.n	800071e <HAL_UART_RxCpltCallback+0x1ba>
					int v = data[11] - '0';
 80006c8:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <HAL_UART_RxCpltCallback+0x1dc>)
 80006ca:	7adb      	ldrb	r3, [r3, #11]
 80006cc:	3b30      	subs	r3, #48	; 0x30
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
//					_volume = v * 10;
					char massage[24] = "Program Volume Set To  \n";
 80006d0:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <HAL_UART_RxCpltCallback+0x21c>)
 80006d2:	f107 040c 	add.w	r4, r7, #12
 80006d6:	461d      	mov	r5, r3
 80006d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006e0:	e884 0003 	stmia.w	r4, {r0, r1}
					massage[22] = data[11];
 80006e4:	4b16      	ldr	r3, [pc, #88]	; (8000740 <HAL_UART_RxCpltCallback+0x1dc>)
 80006e6:	7adb      	ldrb	r3, [r3, #11]
 80006e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					HAL_UART_Transmit_IT(&huart1, massage, 24);
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2218      	movs	r2, #24
 80006f2:	4619      	mov	r1, r3
 80006f4:	4810      	ldr	r0, [pc, #64]	; (8000738 <HAL_UART_RxCpltCallback+0x1d4>)
 80006f6:	f006 facb 	bl	8006c90 <HAL_UART_Transmit_IT>
				if (compareStrings(setVolume, data, 11) == 1
 80006fa:	e010      	b.n	800071e <HAL_UART_RxCpltCallback+0x1ba>
				}
			} else {
				HAL_UART_Transmit_IT(&huart1, "INVALID INPUT\n", 14);
 80006fc:	220e      	movs	r2, #14
 80006fe:	4921      	ldr	r1, [pc, #132]	; (8000784 <HAL_UART_RxCpltCallback+0x220>)
 8000700:	480d      	ldr	r0, [pc, #52]	; (8000738 <HAL_UART_RxCpltCallback+0x1d4>)
 8000702:	f006 fac5 	bl	8006c90 <HAL_UART_Transmit_IT>
				buzzerEnterTime = HAL_GetTick();
 8000706:	f001 fb6b 	bl	8001de0 <HAL_GetTick>
 800070a:	4603      	mov	r3, r0
 800070c:	4a18      	ldr	r2, [pc, #96]	; (8000770 <HAL_UART_RxCpltCallback+0x20c>)
 800070e:	6013      	str	r3, [r2, #0]
				if (alertStatus)
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <HAL_UART_RxCpltCallback+0x204>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d003      	beq.n	8000720 <HAL_UART_RxCpltCallback+0x1bc>
					PWM_Start();
 8000718:	f001 f8f2 	bl	8001900 <PWM_Start>
 800071c:	e000      	b.n	8000720 <HAL_UART_RxCpltCallback+0x1bc>
				if (compareStrings(setVolume, data, 11) == 1
 800071e:	bf00      	nop
			}

			i = 0;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_UART_RxCpltCallback+0x1d8>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8000726:	bf00      	nop
 8000728:	3728      	adds	r7, #40	; 0x28
 800072a:	46bd      	mov	sp, r7
 800072c:	bdb0      	pop	{r4, r5, r7, pc}
 800072e:	bf00      	nop
 8000730:	40013800 	.word	0x40013800
 8000734:	2000072c 	.word	0x2000072c
 8000738:	200002bc 	.word	0x200002bc
 800073c:	2000072d 	.word	0x2000072d
 8000740:	200006c8 	.word	0x200006c8
 8000744:	2000004c 	.word	0x2000004c
 8000748:	20000040 	.word	0x20000040
 800074c:	48000800 	.word	0x48000800
 8000750:	20000058 	.word	0x20000058
 8000754:	20000038 	.word	0x20000038
 8000758:	08008568 	.word	0x08008568
 800075c:	20000060 	.word	0x20000060
 8000760:	08008580 	.word	0x08008580
 8000764:	20000068 	.word	0x20000068
 8000768:	2000003c 	.word	0x2000003c
 800076c:	08008598 	.word	0x08008598
 8000770:	20000670 	.word	0x20000670
 8000774:	20000070 	.word	0x20000070
 8000778:	080085b4 	.word	0x080085b4
 800077c:	2000007c 	.word	0x2000007c
 8000780:	080085e0 	.word	0x080085e0
 8000784:	080085d0 	.word	0x080085d0

08000788 <HAL_ADC_ConvCpltCallback>:
        return adc_value;
    }
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000798:	d103      	bne.n	80007a2 <HAL_ADC_ConvCpltCallback+0x1a>
	{
		uint32_t value;
		value = HAL_ADC_GetValue(hadc);
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f001 fe60 	bl	8002460 <HAL_ADC_GetValue>
 80007a0:	60f8      	str	r0, [r7, #12]
	}
}
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <display_number>:
//ADC End

void display_number(int led_flag, int _number) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOD,
 80007b6:	2201      	movs	r2, #1
 80007b8:	211e      	movs	r1, #30
 80007ba:	4813      	ldr	r0, [pc, #76]	; (8000808 <display_number+0x5c>)
 80007bc:	f003 f916 	bl	80039ec <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOD, led[led_flag], DISPLAY_ON);
 80007c0:	4a12      	ldr	r2, [pc, #72]	; (800080c <display_number+0x60>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007c8:	2200      	movs	r2, #0
 80007ca:	4619      	mov	r1, r3
 80007cc:	480e      	ldr	r0, [pc, #56]	; (8000808 <display_number+0x5c>)
 80007ce:	f003 f90d 	bl	80039ec <HAL_GPIO_WritePin>
	if (_number != 0) {
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d009      	beq.n	80007ec <display_number+0x40>
		HAL_GPIO_WritePin(GPIOD, digits[_number].pattern, GPIO_PIN_SET);
 80007d8:	4a0d      	ldr	r2, [pc, #52]	; (8000810 <display_number+0x64>)
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	4413      	add	r3, r2
 80007e0:	889b      	ldrh	r3, [r3, #4]
 80007e2:	2201      	movs	r2, #1
 80007e4:	4619      	mov	r1, r3
 80007e6:	4808      	ldr	r0, [pc, #32]	; (8000808 <display_number+0x5c>)
 80007e8:	f003 f900 	bl	80039ec <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(GPIOD, digits[_number].anti_pattern, GPIO_PIN_RESET);
 80007ec:	4a08      	ldr	r2, [pc, #32]	; (8000810 <display_number+0x64>)
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	00db      	lsls	r3, r3, #3
 80007f2:	4413      	add	r3, r2
 80007f4:	88db      	ldrh	r3, [r3, #6]
 80007f6:	2200      	movs	r2, #0
 80007f8:	4619      	mov	r1, r3
 80007fa:	4803      	ldr	r0, [pc, #12]	; (8000808 <display_number+0x5c>)
 80007fc:	f003 f8f6 	bl	80039ec <HAL_GPIO_WritePin>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	48000c00 	.word	0x48000c00
 800080c:	20000638 	.word	0x20000638
 8000810:	20000678 	.word	0x20000678

08000814 <increase>:

void increase(int _head) {
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	carrier[_head] += 1;
 800081c:	4a0c      	ldr	r2, [pc, #48]	; (8000850 <increase+0x3c>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000824:	1c5a      	adds	r2, r3, #1
 8000826:	490a      	ldr	r1, [pc, #40]	; (8000850 <increase+0x3c>)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (carrier[_head] == 10) {
 800082e:	4a08      	ldr	r2, [pc, #32]	; (8000850 <increase+0x3c>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000836:	2b0a      	cmp	r3, #10
 8000838:	d104      	bne.n	8000844 <increase+0x30>
		carrier[_head] = 0;
 800083a:	4a05      	ldr	r2, [pc, #20]	; (8000850 <increase+0x3c>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2100      	movs	r1, #0
 8000840:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	20000640 	.word	0x20000640

08000854 <init_display>:

void init_display() {
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,
 8000858:	2201      	movs	r2, #1
 800085a:	211e      	movs	r1, #30
 800085c:	4802      	ldr	r0, [pc, #8]	; (8000868 <init_display+0x14>)
 800085e:	f003 f8c5 	bl	80039ec <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	48000c00 	.word	0x48000c00

0800086c <initTonesDictionary>:

void initTonesDictionary() {
 800086c:	b580      	push	{r7, lr}
 800086e:	f5ad 5d0f 	sub.w	sp, sp, #9152	; 0x23c0
 8000872:	b08c      	sub	sp, #48	; 0x30
 8000874:	af02      	add	r7, sp, #8
    playlist = initDictionary(10);
 8000876:	200a      	movs	r0, #10
 8000878:	f7ff fcec 	bl	8000254 <initDictionary>
 800087c:	4603      	mov	r3, r0
 800087e:	4a38      	ldr	r2, [pc, #224]	; (8000960 <initTonesDictionary+0xf4>)
 8000880:	6013      	str	r3, [r2, #0]

    // Example tones
    struct Tone super_mario_bros[]={{2637,306},{0,153},{2637,153},{0,153},{2093,153},{2637,153},{0,153},{3136,153},{0,459},{1586,153},{0,459},{2093,153},{0,306},{1586,153},{0,306},{1319,153},{0,306},{1760,153},{0,153},{1976,153},{0,153},{1865,153},{1760,153},{0,153},{1586,204},{2637,204},{3136,204},{3520,153},{0,153},{2794,153},{3136,153},{0,153},{2637,153},{0,153},{2093,153},{2349,153},{1976,153},{0,306},{2093,153},{0,306},{1586,153},{0,306},{1319,153},{0,306},{1760,153},{0,153},{1976,153},{0,153},{1865,153},{1760,153},{0,153},{1586,204},{2637,204},{3136,204},{3520,153},{0,153},{2794,153},{3136,153},{0,153},{2637,153},{0,153},{2093,153},{2349,153},{1976,153},{0,0}};
 8000882:	f507 530f 	add.w	r3, r7, #9152	; 0x23c0
 8000886:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800088a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800088e:	4a35      	ldr	r2, [pc, #212]	; (8000964 <initTonesDictionary+0xf8>)
 8000890:	4618      	mov	r0, r3
 8000892:	4611      	mov	r1, r2
 8000894:	f44f 7302 	mov.w	r3, #520	; 0x208
 8000898:	461a      	mov	r2, r3
 800089a:	f007 fd5b 	bl	8008354 <memcpy>
    struct Tone hedwig_theme[]={{REST,750},{NOTE_D4,374},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_G4,750},{NOTE_D5,374},{NOTE_C5,1124},{NOTE_A4,1124},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_F4,750},{NOTE_GS4,374},{NOTE_D4,2249},{NOTE_D4,374},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_G4,750},{NOTE_D5,374},{NOTE_F5,750},{NOTE_E5,374},{NOTE_DS5,750},{NOTE_B4,374},{NOTE_DS5,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_B4,374},{NOTE_G4,2249},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_DS5,750},{NOTE_D5,374},{NOTE_CS5,750},{NOTE_A4,374},{NOTE_AS4,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_D4,374},{NOTE_D5,1700},{REST,150},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_F5,750},{NOTE_E5,374},{NOTE_DS5,750},{NOTE_B4,374},{NOTE_DS5,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_AS4,374},{NOTE_G4,2249},{0,0}};
 800089e:	f507 530f 	add.w	r3, r7, #9152	; 0x23c0
 80008a2:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80008a6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80008aa:	4a2f      	ldr	r2, [pc, #188]	; (8000968 <initTonesDictionary+0xfc>)
 80008ac:	4618      	mov	r0, r3
 80008ae:	4611      	mov	r1, r2
 80008b0:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80008b4:	461a      	mov	r2, r3
 80008b6:	f007 fd4d 	bl	8008354 <memcpy>
    struct Tone doom[]={{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_FS3,67},{NOTE_D3,67},{NOTE_B2,67},{NOTE_A3,67},{NOTE_FS3,67},{NOTE_B2,67},{NOTE_D3,67},{NOTE_FS3,67},{NOTE_A3,67},{NOTE_FS3,67},{NOTE_D3,67},{NOTE_B2,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B3,67},{NOTE_G3,67},{NOTE_E3,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_B3,67},{NOTE_G4,67},{NOTE_B4,67},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_E3,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,534},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_E3,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_C4,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_CS4,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_B3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_A3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_G3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_GS3,133},{NOTE_A3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_B3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_A3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_G3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_F3,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B3,67},{NOTE_G3,67},{NOTE_E3,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_B3,67},{NOTE_G4,67},{NOTE_B4,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{0,0}};
 80008ba:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80008be:	f103 0308 	add.w	r3, r3, #8
 80008c2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80008c6:	4a29      	ldr	r2, [pc, #164]	; (800096c <initTonesDictionary+0x100>)
 80008c8:	4618      	mov	r0, r3
 80008ca:	4611      	mov	r1, r2
 80008cc:	f44f 6351 	mov.w	r3, #3344	; 0xd10
 80008d0:	461a      	mov	r2, r3
 80008d2:	f007 fd3f 	bl	8008354 <memcpy>
    struct Tone fur_elise[] = {{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,750},{REST,250},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_C5,188},{NOTE_C5,188},{NOTE_C5,188},{NOTE_C5,750},{NOTE_F5,282},{NOTE_E5,94},{NOTE_E5,250},{NOTE_D5,250},{NOTE_AS5,282},{NOTE_A5,94},{NOTE_A5,188},{NOTE_G5,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_AS4,250},{NOTE_A4,250},{NOTE_A4,94},{NOTE_G4,94},{NOTE_A4,94},{NOTE_B4,94},{NOTE_C5,750},{NOTE_D5,188},{NOTE_DS5,188},{NOTE_E5,375},{NOTE_E5,188},{NOTE_F5,188},{NOTE_A4,188},{NOTE_C5,750},{NOTE_D5,282},{NOTE_B4,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_G4,94},{NOTE_G5,94},{NOTE_A4,94},{NOTE_G5,94},{NOTE_B4,94},{NOTE_G5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_E5,94},{NOTE_G5,94},{NOTE_C6,94},{NOTE_B5,94},{NOTE_A5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_D5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_G4,94},{NOTE_G5,94},{NOTE_A4,94},{NOTE_G5,94},{NOTE_B4,94},{NOTE_G5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_E5,94},{NOTE_G5,94},{NOTE_C6,94},{NOTE_B5,94},{NOTE_A5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_D5,94},{NOTE_E5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,94},{NOTE_B4,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,94},{NOTE_B4,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,375},{NOTE_B4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,375},{NOTE_B4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{REST,188},{REST,250},{NOTE_CS5,1125},{NOTE_D5,750},{NOTE_E5,188},{NOTE_F5,188},{NOTE_F5,750},{NOTE_F5,250},{NOTE_E5,1125},{NOTE_D5,750},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,750},{NOTE_A4,250},{NOTE_A4,250},{NOTE_C5,250},{NOTE_B4,250},{NOTE_A4,1125},{NOTE_CS5,1125},{NOTE_D5,750},{NOTE_E5,188},{NOTE_F5,188},{NOTE_F5,750},{NOTE_F5,250},{NOTE_F5,1125},{NOTE_DS5,750},{NOTE_D5,188},{NOTE_C5,188},{NOTE_AS4,750},{NOTE_A4,250},{NOTE_GS4,750},{NOTE_G4,250},{NOTE_A4,1125},{NOTE_B4,750},{REST,250},{NOTE_A3,141},{NOTE_C4,141},{NOTE_E4,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_D5,141},{NOTE_C5,141},{NOTE_B4,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_A5,141},{NOTE_C6,141},{NOTE_E6,141},{NOTE_D6,141},{NOTE_C6,141},{NOTE_B5,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_A5,141},{NOTE_C6,141},{NOTE_E6,141},{NOTE_D6,141},{NOTE_C6,141},{NOTE_B5,141},{NOTE_AS5,141},{NOTE_A5,141},{NOTE_GS5,141},{NOTE_G5,141},{NOTE_FS5,141},{NOTE_F5,141},{NOTE_E5,141},{NOTE_DS5,141},{NOTE_D5,141},{NOTE_CS5,141},{NOTE_C5,141},{NOTE_B4,141},{NOTE_AS4,141},{NOTE_A4,141},{NOTE_GS4,141},{NOTE_G4,141},{NOTE_FS4,141},{NOTE_F4,141},{NOTE_E4,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,375},{REST,375},{REST,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,750},{REST,250},{REST,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_E5,250},{NOTE_E5,250},{NOTE_E6,375},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,1125}};
 80008d6:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80008da:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80008de:	4a24      	ldr	r2, [pc, #144]	; (8000970 <initTonesDictionary+0x104>)
 80008e0:	4618      	mov	r0, r3
 80008e2:	4611      	mov	r1, r2
 80008e4:	f241 23d8 	movw	r3, #4824	; 0x12d8
 80008e8:	461a      	mov	r2, r3
 80008ea:	f007 fd33 	bl	8008354 <memcpy>
    // Insert tones into dictionary
    insert(playlist, "super_mario_bros", 0, super_mario_bros, sizeof(super_mario_bros) / sizeof(struct Tone));
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <initTonesDictionary+0xf4>)
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80008f6:	f103 0320 	add.w	r3, r3, #32
 80008fa:	2241      	movs	r2, #65	; 0x41
 80008fc:	9200      	str	r2, [sp, #0]
 80008fe:	2200      	movs	r2, #0
 8000900:	491c      	ldr	r1, [pc, #112]	; (8000974 <initTonesDictionary+0x108>)
 8000902:	f7ff fcd2 	bl	80002aa <insert>
    insert(playlist, "hedwig_theme", 1, hedwig_theme, sizeof(hedwig_theme) / sizeof(struct Tone));
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <initTonesDictionary+0xf4>)
 8000908:	6818      	ldr	r0, [r3, #0]
 800090a:	f507 53ff 	add.w	r3, r7, #8160	; 0x1fe0
 800090e:	f103 0308 	add.w	r3, r3, #8
 8000912:	223f      	movs	r2, #63	; 0x3f
 8000914:	9200      	str	r2, [sp, #0]
 8000916:	2201      	movs	r2, #1
 8000918:	4917      	ldr	r1, [pc, #92]	; (8000978 <initTonesDictionary+0x10c>)
 800091a:	f7ff fcc6 	bl	80002aa <insert>
    insert(playlist, "doom", 2, doom, sizeof(doom) / sizeof(struct Tone));
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <initTonesDictionary+0xf4>)
 8000920:	6818      	ldr	r0, [r3, #0]
 8000922:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8000926:	f103 0308 	add.w	r3, r3, #8
 800092a:	3b10      	subs	r3, #16
 800092c:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 8000930:	9200      	str	r2, [sp, #0]
 8000932:	2202      	movs	r2, #2
 8000934:	4911      	ldr	r1, [pc, #68]	; (800097c <initTonesDictionary+0x110>)
 8000936:	f7ff fcb8 	bl	80002aa <insert>
    insert(playlist, "fur_elise", 3, fur_elise, sizeof(fur_elise) / sizeof(struct Tone));
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <initTonesDictionary+0xf4>)
 800093c:	6818      	ldr	r0, [r3, #0]
 800093e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000942:	3b28      	subs	r3, #40	; 0x28
 8000944:	f240 225b 	movw	r2, #603	; 0x25b
 8000948:	9200      	str	r2, [sp, #0]
 800094a:	2203      	movs	r2, #3
 800094c:	490c      	ldr	r1, [pc, #48]	; (8000980 <initTonesDictionary+0x114>)
 800094e:	f7ff fcac 	bl	80002aa <insert>




}
 8000952:	bf00      	nop
 8000954:	f507 570f 	add.w	r7, r7, #9152	; 0x23c0
 8000958:	3728      	adds	r7, #40	; 0x28
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000630 	.word	0x20000630
 8000964:	08008630 	.word	0x08008630
 8000968:	08008838 	.word	0x08008838
 800096c:	08008a30 	.word	0x08008a30
 8000970:	08009740 	.word	0x08009740
 8000974:	080085f8 	.word	0x080085f8
 8000978:	0800860c 	.word	0x0800860c
 800097c:	0800861c 	.word	0x0800861c
 8000980:	08008624 	.word	0x08008624

08000984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b096      	sub	sp, #88	; 0x58
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	struct digit _digits[10];
	_digits[0].number = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
	_digits[0].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
 800098e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000992:	817b      	strh	r3, [r7, #10]
			| GPIO_PIN_15;

	_digits[1].number = 1;
 8000994:	2301      	movs	r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
	_digits[1].pattern = GPIO_PIN_12;
 8000998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099c:	823b      	strh	r3, [r7, #16]
	_digits[1].anti_pattern = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800099e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80009a2:	827b      	strh	r3, [r7, #18]

	_digits[2].number = 2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	617b      	str	r3, [r7, #20]
	_digits[2].pattern = GPIO_PIN_13;
 80009a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ac:	833b      	strh	r3, [r7, #24]
	_digits[2].anti_pattern = GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15;
 80009ae:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80009b2:	837b      	strh	r3, [r7, #26]

	_digits[3].number = 3;
 80009b4:	2303      	movs	r3, #3
 80009b6:	61fb      	str	r3, [r7, #28]
	_digits[3].pattern = GPIO_PIN_12 | GPIO_PIN_13;
 80009b8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80009bc:	843b      	strh	r3, [r7, #32]
	_digits[3].anti_pattern = GPIO_PIN_14 | GPIO_PIN_15;
 80009be:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80009c2:	847b      	strh	r3, [r7, #34]	; 0x22

	_digits[4].number = 4;
 80009c4:	2304      	movs	r3, #4
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
	_digits[4].pattern = GPIO_PIN_14;
 80009c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009cc:	853b      	strh	r3, [r7, #40]	; 0x28
	_digits[4].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15;
 80009ce:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80009d2:	857b      	strh	r3, [r7, #42]	; 0x2a

	_digits[5].number = 5;
 80009d4:	2305      	movs	r3, #5
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	_digits[5].pattern = GPIO_PIN_12 | GPIO_PIN_14;
 80009d8:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80009dc:	863b      	strh	r3, [r7, #48]	; 0x30
	_digits[5].anti_pattern = GPIO_PIN_13 | GPIO_PIN_15;
 80009de:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80009e2:	867b      	strh	r3, [r7, #50]	; 0x32

	_digits[6].number = 6;
 80009e4:	2306      	movs	r3, #6
 80009e6:	637b      	str	r3, [r7, #52]	; 0x34
	_digits[6].pattern = GPIO_PIN_13 | GPIO_PIN_14;
 80009e8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80009ec:	873b      	strh	r3, [r7, #56]	; 0x38
	_digits[6].anti_pattern = GPIO_PIN_12 | GPIO_PIN_15;
 80009ee:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80009f2:	877b      	strh	r3, [r7, #58]	; 0x3a

	_digits[7].number = 7;
 80009f4:	2307      	movs	r3, #7
 80009f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	_digits[7].pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 80009f8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80009fc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	_digits[7].anti_pattern = GPIO_PIN_15;
 8000a00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a04:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	_digits[8].number = 8;
 8000a08:	2308      	movs	r3, #8
 8000a0a:	647b      	str	r3, [r7, #68]	; 0x44
	_digits[8].pattern = GPIO_PIN_15;
 8000a0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a10:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	_digits[8].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 8000a14:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000a18:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	_digits[9].number = 9;
 8000a1c:	2309      	movs	r3, #9
 8000a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
	_digits[9].pattern = GPIO_PIN_12 | GPIO_PIN_15;
 8000a20:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000a24:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	_digits[9].anti_pattern = GPIO_PIN_13 | GPIO_PIN_14;
 8000a28:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000a2c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	//initialize Global digits structure
	for (int i = 0; i < 10; i++) {
 8000a30:	2300      	movs	r3, #0
 8000a32:	657b      	str	r3, [r7, #84]	; 0x54
 8000a34:	e00f      	b.n	8000a56 <main+0xd2>
		digits[i] = _digits[i];
 8000a36:	492c      	ldr	r1, [pc, #176]	; (8000ae8 <main+0x164>)
 8000a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a3c:	00d2      	lsls	r2, r2, #3
 8000a3e:	3258      	adds	r2, #88	; 0x58
 8000a40:	443a      	add	r2, r7
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	440b      	add	r3, r1
 8000a46:	3a54      	subs	r2, #84	; 0x54
 8000a48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a4c:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 0; i < 10; i++) {
 8000a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a52:	3301      	adds	r3, #1
 8000a54:	657b      	str	r3, [r7, #84]	; 0x54
 8000a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a58:	2b09      	cmp	r3, #9
 8000a5a:	ddec      	ble.n	8000a36 <main+0xb2>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5c:	f001 f966 	bl	8001d2c <HAL_Init>

  /* USER CODE BEGIN Init */

	//Set 7-segment PINS
	led[0] = GPIO_PIN_1;
 8000a60:	4b22      	ldr	r3, [pc, #136]	; (8000aec <main+0x168>)
 8000a62:	2202      	movs	r2, #2
 8000a64:	801a      	strh	r2, [r3, #0]
	led[1] = GPIO_PIN_2;
 8000a66:	4b21      	ldr	r3, [pc, #132]	; (8000aec <main+0x168>)
 8000a68:	2204      	movs	r2, #4
 8000a6a:	805a      	strh	r2, [r3, #2]
	led[2] = GPIO_PIN_3;
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <main+0x168>)
 8000a6e:	2208      	movs	r2, #8
 8000a70:	809a      	strh	r2, [r3, #4]
	led[3] = GPIO_PIN_4;
 8000a72:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <main+0x168>)
 8000a74:	2210      	movs	r2, #16
 8000a76:	80da      	strh	r2, [r3, #6]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a78:	f000 f84a 	bl	8000b10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7c:	f000 faba 	bl	8000ff4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a80:	f000 f91e 	bl	8000cc0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a84:	f000 f95c 	bl	8000d40 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000a88:	f000 fa92 	bl	8000fb0 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000a8c:	f000 f996 	bl	8000dbc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a90:	f000 f9e8 	bl	8000e64 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000a94:	f000 fa5c 	bl	8000f50 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000a98:	f000 f8a2 	bl	8000be0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8000a9c:	4814      	ldr	r0, [pc, #80]	; (8000af0 <main+0x16c>)
 8000a9e:	f004 fef3 	bl	8005888 <HAL_TIM_Base_Start_IT>
	HAL_UART_Transmit_IT(&huart1,
 8000aa2:	222c      	movs	r2, #44	; 0x2c
 8000aa4:	4913      	ldr	r1, [pc, #76]	; (8000af4 <main+0x170>)
 8000aa6:	4814      	ldr	r0, [pc, #80]	; (8000af8 <main+0x174>)
 8000aa8:	f006 f8f2 	bl	8006c90 <HAL_UART_Transmit_IT>
			"=============\nProgram Running\n=============\n", 44);
	HAL_UART_Receive_IT(&huart1, &d, 1);
 8000aac:	2201      	movs	r2, #1
 8000aae:	4913      	ldr	r1, [pc, #76]	; (8000afc <main+0x178>)
 8000ab0:	4811      	ldr	r0, [pc, #68]	; (8000af8 <main+0x174>)
 8000ab2:	f006 f94b 	bl	8006d4c <HAL_UART_Receive_IT>
	initTonesDictionary();
 8000ab6:	f7ff fed9 	bl	800086c <initTonesDictionary>
	PWM_Start();
 8000aba:	f000 ff21 	bl	8001900 <PWM_Start>
	 int toneCount;
	 melody = lookup(playlist, "hedwig_theme", NULL, &toneCount);;
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <main+0x17c>)
 8000ac0:	6818      	ldr	r0, [r3, #0]
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	490f      	ldr	r1, [pc, #60]	; (8000b04 <main+0x180>)
 8000ac8:	f7ff fc3e 	bl	8000348 <lookup>
 8000acc:	4603      	mov	r3, r0
 8000ace:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <main+0x184>)
 8000ad0:	6013      	str	r3, [r2, #0]
	 Change_Melody(melody, toneCount);
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <main+0x184>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	683a      	ldr	r2, [r7, #0]
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 ffd4 	bl	8001a88 <Change_Melody>

	 HAL_ADC_Start_IT(&hadc1);
 8000ae0:	480a      	ldr	r0, [pc, #40]	; (8000b0c <main+0x188>)
 8000ae2:	f001 fb7d 	bl	80021e0 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000ae6:	e7fe      	b.n	8000ae6 <main+0x162>
 8000ae8:	20000678 	.word	0x20000678
 8000aec:	20000638 	.word	0x20000638
 8000af0:	20000224 	.word	0x20000224
 8000af4:	0800aa18 	.word	0x0800aa18
 8000af8:	200002bc 	.word	0x200002bc
 8000afc:	2000072c 	.word	0x2000072c
 8000b00:	20000630 	.word	0x20000630
 8000b04:	0800860c 	.word	0x0800860c
 8000b08:	20000634 	.word	0x20000634
 8000b0c:	2000011c 	.word	0x2000011c

08000b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b09e      	sub	sp, #120	; 0x78
 8000b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b1a:	2228      	movs	r2, #40	; 0x28
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f007 fc26 	bl	8008370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b24:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b34:	463b      	mov	r3, r7
 8000b36:	223c      	movs	r2, #60	; 0x3c
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f007 fc18 	bl	8008370 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000b40:	2303      	movs	r3, #3
 8000b42:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b44:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b48:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b52:	2310      	movs	r3, #16
 8000b54:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b56:	2302      	movs	r3, #2
 8000b58:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b5e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000b60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b64:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f003 f966 	bl	8003e3c <HAL_RCC_OscConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000b76:	f000 fccf 	bl	8001518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b90:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b94:	2101      	movs	r1, #1
 8000b96:	4618      	mov	r0, r3
 8000b98:	f004 f98e 	bl	8004eb8 <HAL_RCC_ClockConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ba2:	f000 fcb9 	bl	8001518 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <SystemClock_Config+0xcc>)
 8000ba8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000bb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bbc:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f004 fbad 	bl	8005324 <HAL_RCCEx_PeriphCLKConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bd0:	f000 fca2 	bl	8001518 <Error_Handler>
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	3778      	adds	r7, #120	; 0x78
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	000210a1 	.word	0x000210a1

08000be0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
 8000c00:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c02:	4b2e      	ldr	r3, [pc, #184]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c08:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c0a:	4b2c      	ldr	r3, [pc, #176]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c10:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c16:	4b29      	ldr	r3, [pc, #164]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c1c:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c22:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c2a:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c30:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c36:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c42:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c50:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c56:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c5c:	4817      	ldr	r0, [pc, #92]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c5e:	f001 f8df 	bl	8001e20 <HAL_ADC_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000c68:	f000 fc56 	bl	8001518 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	4811      	ldr	r0, [pc, #68]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c78:	f002 f9fa 	bl	8003070 <HAL_ADCEx_MultiModeConfigChannel>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000c82:	f000 fc49 	bl	8001518 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c86:	2305      	movs	r3, #5
 8000c88:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000c92:	2306      	movs	r3, #6
 8000c94:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4806      	ldr	r0, [pc, #24]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000ca4:	f001 fef8 	bl	8002a98 <HAL_ADC_ConfigChannel>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000cae:	f000 fc33 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	3728      	adds	r7, #40	; 0x28
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	2000011c 	.word	0x2000011c

08000cc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cc6:	4a1c      	ldr	r2, [pc, #112]	; (8000d38 <MX_I2C1_Init+0x78>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000ccc:	4a1b      	ldr	r2, [pc, #108]	; (8000d3c <MX_I2C1_Init+0x7c>)
 8000cce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cd0:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cdc:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cfa:	480e      	ldr	r0, [pc, #56]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cfc:	f002 fea6 	bl	8003a4c <HAL_I2C_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d06:	f000 fc07 	bl	8001518 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4809      	ldr	r0, [pc, #36]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000d0e:	f002 ff2c 	bl	8003b6a <HAL_I2CEx_ConfigAnalogFilter>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d18:	f000 fbfe 	bl	8001518 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000d20:	f002 ff6e 	bl	8003c00 <HAL_I2CEx_ConfigDigitalFilter>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d2a:	f000 fbf5 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2000016c 	.word	0x2000016c
 8000d38:	40005400 	.word	0x40005400
 8000d3c:	2000090e 	.word	0x2000090e

08000d40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d46:	4a1c      	ldr	r2, [pc, #112]	; (8000db8 <MX_SPI1_Init+0x78>)
 8000d48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d5a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d5e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d66:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d72:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d76:	2208      	movs	r2, #8
 8000d78:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d8e:	2207      	movs	r2, #7
 8000d90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d9a:	2208      	movs	r2, #8
 8000d9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000da0:	f004 fc70 	bl	8005684 <HAL_SPI_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000daa:	f000 fbb5 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200001c0 	.word	0x200001c0
 8000db8:	40013000 	.word	0x40013000

08000dbc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dda:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <MX_TIM1_Init+0xa0>)
 8000ddc:	4a20      	ldr	r2, [pc, #128]	; (8000e60 <MX_TIM1_Init+0xa4>)
 8000dde:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4800-1;
 8000de0:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <MX_TIM1_Init+0xa0>)
 8000de2:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000de6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de8:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <MX_TIM1_Init+0xa0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5-1;
 8000dee:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <MX_TIM1_Init+0xa0>)
 8000df0:	2204      	movs	r2, #4
 8000df2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df4:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <MX_TIM1_Init+0xa0>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <MX_TIM1_Init+0xa0>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e00:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <MX_TIM1_Init+0xa0>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e06:	4815      	ldr	r0, [pc, #84]	; (8000e5c <MX_TIM1_Init+0xa0>)
 8000e08:	f004 fce7 	bl	80057da <HAL_TIM_Base_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000e12:	f000 fb81 	bl	8001518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	4619      	mov	r1, r3
 8000e22:	480e      	ldr	r0, [pc, #56]	; (8000e5c <MX_TIM1_Init+0xa0>)
 8000e24:	f005 f930 	bl	8006088 <HAL_TIM_ConfigClockSource>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000e2e:	f000 fb73 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	4619      	mov	r1, r3
 8000e42:	4806      	ldr	r0, [pc, #24]	; (8000e5c <MX_TIM1_Init+0xa0>)
 8000e44:	f005 fe38 	bl	8006ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e4e:	f000 fb63 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	3720      	adds	r7, #32
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000224 	.word	0x20000224
 8000e60:	40012c00 	.word	0x40012c00

08000e64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08e      	sub	sp, #56	; 0x38
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e84:	463b      	mov	r3, r7
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]
 8000e92:	615a      	str	r2, [r3, #20]
 8000e94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e96:	4b2d      	ldr	r3, [pc, #180]	; (8000f4c <MX_TIM2_Init+0xe8>)
 8000e98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e9e:	4b2b      	ldr	r3, [pc, #172]	; (8000f4c <MX_TIM2_Init+0xe8>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea4:	4b29      	ldr	r3, [pc, #164]	; (8000f4c <MX_TIM2_Init+0xe8>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000eaa:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <MX_TIM2_Init+0xe8>)
 8000eac:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb2:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <MX_TIM2_Init+0xe8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb8:	4b24      	ldr	r3, [pc, #144]	; (8000f4c <MX_TIM2_Init+0xe8>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ebe:	4823      	ldr	r0, [pc, #140]	; (8000f4c <MX_TIM2_Init+0xe8>)
 8000ec0:	f004 fc8b 	bl	80057da <HAL_TIM_Base_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000eca:	f000 fb25 	bl	8001518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ed4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ed8:	4619      	mov	r1, r3
 8000eda:	481c      	ldr	r0, [pc, #112]	; (8000f4c <MX_TIM2_Init+0xe8>)
 8000edc:	f005 f8d4 	bl	8006088 <HAL_TIM_ConfigClockSource>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000ee6:	f000 fb17 	bl	8001518 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000eea:	4818      	ldr	r0, [pc, #96]	; (8000f4c <MX_TIM2_Init+0xe8>)
 8000eec:	f004 fd36 	bl	800595c <HAL_TIM_PWM_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000ef6:	f000 fb0f 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	4619      	mov	r1, r3
 8000f08:	4810      	ldr	r0, [pc, #64]	; (8000f4c <MX_TIM2_Init+0xe8>)
 8000f0a:	f005 fdd5 	bl	8006ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f14:	f000 fb00 	bl	8001518 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f18:	2360      	movs	r3, #96	; 0x60
 8000f1a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f28:	463b      	mov	r3, r7
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4807      	ldr	r0, [pc, #28]	; (8000f4c <MX_TIM2_Init+0xe8>)
 8000f30:	f004 ff96 	bl	8005e60 <HAL_TIM_PWM_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000f3a:	f000 faed 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f3e:	4803      	ldr	r0, [pc, #12]	; (8000f4c <MX_TIM2_Init+0xe8>)
 8000f40:	f000 fc18 	bl	8001774 <HAL_TIM_MspPostInit>

}
 8000f44:	bf00      	nop
 8000f46:	3738      	adds	r7, #56	; 0x38
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000270 	.word	0x20000270

08000f50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f56:	4a15      	ldr	r2, [pc, #84]	; (8000fac <MX_USART1_UART_Init+0x5c>)
 8000f58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f76:	220c      	movs	r2, #12
 8000f78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f94:	f005 fe2e 	bl	8006bf4 <HAL_UART_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f9e:	f000 fabb 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200002bc 	.word	0x200002bc
 8000fac:	40013800 	.word	0x40013800

08000fb0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <MX_USB_PCD_Init+0x3c>)
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <MX_USB_PCD_Init+0x40>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_USB_PCD_Init+0x3c>)
 8000fbc:	2208      	movs	r2, #8
 8000fbe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <MX_USB_PCD_Init+0x3c>)
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_USB_PCD_Init+0x3c>)
 8000fc8:	2202      	movs	r2, #2
 8000fca:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <MX_USB_PCD_Init+0x3c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_USB_PCD_Init+0x3c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <MX_USB_PCD_Init+0x3c>)
 8000fda:	f002 fe5d 	bl	8003c98 <HAL_PCD_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000fe4:	f000 fa98 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000344 	.word	0x20000344
 8000ff0:	40005c00 	.word	0x40005c00

08000ff4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08c      	sub	sp, #48	; 0x30
 8000ff8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800100a:	4b5e      	ldr	r3, [pc, #376]	; (8001184 <MX_GPIO_Init+0x190>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	4a5d      	ldr	r2, [pc, #372]	; (8001184 <MX_GPIO_Init+0x190>)
 8001010:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001014:	6153      	str	r3, [r2, #20]
 8001016:	4b5b      	ldr	r3, [pc, #364]	; (8001184 <MX_GPIO_Init+0x190>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101e:	61bb      	str	r3, [r7, #24]
 8001020:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001022:	4b58      	ldr	r3, [pc, #352]	; (8001184 <MX_GPIO_Init+0x190>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	4a57      	ldr	r2, [pc, #348]	; (8001184 <MX_GPIO_Init+0x190>)
 8001028:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800102c:	6153      	str	r3, [r2, #20]
 800102e:	4b55      	ldr	r3, [pc, #340]	; (8001184 <MX_GPIO_Init+0x190>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800103a:	4b52      	ldr	r3, [pc, #328]	; (8001184 <MX_GPIO_Init+0x190>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	4a51      	ldr	r2, [pc, #324]	; (8001184 <MX_GPIO_Init+0x190>)
 8001040:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001044:	6153      	str	r3, [r2, #20]
 8001046:	4b4f      	ldr	r3, [pc, #316]	; (8001184 <MX_GPIO_Init+0x190>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	4b4c      	ldr	r3, [pc, #304]	; (8001184 <MX_GPIO_Init+0x190>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	4a4b      	ldr	r2, [pc, #300]	; (8001184 <MX_GPIO_Init+0x190>)
 8001058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105c:	6153      	str	r3, [r2, #20]
 800105e:	4b49      	ldr	r3, [pc, #292]	; (8001184 <MX_GPIO_Init+0x190>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800106a:	4b46      	ldr	r3, [pc, #280]	; (8001184 <MX_GPIO_Init+0x190>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	4a45      	ldr	r2, [pc, #276]	; (8001184 <MX_GPIO_Init+0x190>)
 8001070:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001074:	6153      	str	r3, [r2, #20]
 8001076:	4b43      	ldr	r3, [pc, #268]	; (8001184 <MX_GPIO_Init+0x190>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	4b40      	ldr	r3, [pc, #256]	; (8001184 <MX_GPIO_Init+0x190>)
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	4a3f      	ldr	r2, [pc, #252]	; (8001184 <MX_GPIO_Init+0x190>)
 8001088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800108c:	6153      	str	r3, [r2, #20]
 800108e:	4b3d      	ldr	r3, [pc, #244]	; (8001184 <MX_GPIO_Init+0x190>)
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2108      	movs	r1, #8
 800109e:	483a      	ldr	r0, [pc, #232]	; (8001188 <MX_GPIO_Init+0x194>)
 80010a0:	f002 fca4 	bl	80039ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80010a4:	2200      	movs	r2, #0
 80010a6:	f24f 011e 	movw	r1, #61470	; 0xf01e
 80010aa:	4838      	ldr	r0, [pc, #224]	; (800118c <MX_GPIO_Init+0x198>)
 80010ac:	f002 fc9e 	bl	80039ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80010b0:	2308      	movs	r3, #8
 80010b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	2301      	movs	r3, #1
 80010b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	4619      	mov	r1, r3
 80010c6:	4830      	ldr	r0, [pc, #192]	; (8001188 <MX_GPIO_Init+0x194>)
 80010c8:	f002 fb16 	bl	80036f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT3_Pin MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT3_Pin|MEMS_INT4_Pin;
 80010cc:	2330      	movs	r3, #48	; 0x30
 80010ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010d0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80010d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	4619      	mov	r1, r3
 80010e0:	4829      	ldr	r0, [pc, #164]	; (8001188 <MX_GPIO_Init+0x194>)
 80010e2:	f002 fb09 	bl	80036f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80010e6:	2305      	movs	r3, #5
 80010e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010ea:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80010ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4619      	mov	r1, r3
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fe:	f002 fafb 	bl	80036f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001102:	230a      	movs	r3, #10
 8001104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001106:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800110a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800110c:	2302      	movs	r3, #2
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111a:	f002 faed 	bl	80036f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD1 PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800111e:	f24f 031e 	movw	r3, #61470	; 0xf01e
 8001122:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	4619      	mov	r1, r3
 8001136:	4815      	ldr	r0, [pc, #84]	; (800118c <MX_GPIO_Init+0x198>)
 8001138:	f002 fade 	bl	80036f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	2006      	movs	r0, #6
 8001142:	f002 fa2c 	bl	800359e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001146:	2006      	movs	r0, #6
 8001148:	f002 fa45 	bl	80035d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	2100      	movs	r1, #0
 8001150:	2007      	movs	r0, #7
 8001152:	f002 fa24 	bl	800359e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001156:	2007      	movs	r0, #7
 8001158:	f002 fa3d 	bl	80035d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	2008      	movs	r0, #8
 8001162:	f002 fa1c 	bl	800359e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8001166:	2008      	movs	r0, #8
 8001168:	f002 fa35 	bl	80035d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2100      	movs	r1, #0
 8001170:	2009      	movs	r0, #9
 8001172:	f002 fa14 	bl	800359e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001176:	2009      	movs	r0, #9
 8001178:	f002 fa2d 	bl	80035d6 <HAL_NVIC_EnableIRQ>

}
 800117c:	bf00      	nop
 800117e:	3730      	adds	r7, #48	; 0x30
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40021000 	.word	0x40021000
 8001188:	48001000 	.word	0x48001000
 800118c:	48000c00 	.word	0x48000c00

08001190 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 800119a:	f000 fe21 	bl	8001de0 <HAL_GetTick>
 800119e:	4603      	mov	r3, r0
 80011a0:	4a91      	ldr	r2, [pc, #580]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x258>)
 80011a2:	6013      	str	r3, [r2, #0]
	if ((GPIO_Pin == GPIO_PIN_1) && LED != 4) {
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d116      	bne.n	80011d8 <HAL_GPIO_EXTI_Callback+0x48>
 80011aa:	4b90      	ldr	r3, [pc, #576]	; (80013ec <HAL_GPIO_EXTI_Callback+0x25c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	d012      	beq.n	80011d8 <HAL_GPIO_EXTI_Callback+0x48>

		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 80011b2:	4b8d      	ldr	r3, [pc, #564]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x258>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4b8e      	ldr	r3, [pc, #568]	; (80013f0 <HAL_GPIO_EXTI_Callback+0x260>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80011c0:	f240 810e 	bls.w	80013e0 <HAL_GPIO_EXTI_Callback+0x250>
//			counterInside++;
			increase(LED);
 80011c4:	4b89      	ldr	r3, [pc, #548]	; (80013ec <HAL_GPIO_EXTI_Callback+0x25c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fb23 	bl	8000814 <increase>
			previousMillis = currentMillis;
 80011ce:	4b86      	ldr	r3, [pc, #536]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x258>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a87      	ldr	r2, [pc, #540]	; (80013f0 <HAL_GPIO_EXTI_Callback+0x260>)
 80011d4:	6013      	str	r3, [r2, #0]
		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 80011d6:	e103      	b.n	80013e0 <HAL_GPIO_EXTI_Callback+0x250>
		}
	} else if ((GPIO_Pin == GPIO_PIN_3)) {
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	2b08      	cmp	r3, #8
 80011dc:	f040 80eb 	bne.w	80013b6 <HAL_GPIO_EXTI_Callback+0x226>

		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 80011e0:	4b81      	ldr	r3, [pc, #516]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x258>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b82      	ldr	r3, [pc, #520]	; (80013f0 <HAL_GPIO_EXTI_Callback+0x260>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80011ee:	f240 80f7 	bls.w	80013e0 <HAL_GPIO_EXTI_Callback+0x250>
			if (nextTurn < 6)
 80011f2:	4b80      	ldr	r3, [pc, #512]	; (80013f4 <HAL_GPIO_EXTI_Callback+0x264>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b05      	cmp	r3, #5
 80011f8:	dc04      	bgt.n	8001204 <HAL_GPIO_EXTI_Callback+0x74>
				nextTurn++;
 80011fa:	4b7e      	ldr	r3, [pc, #504]	; (80013f4 <HAL_GPIO_EXTI_Callback+0x264>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	4a7c      	ldr	r2, [pc, #496]	; (80013f4 <HAL_GPIO_EXTI_Callback+0x264>)
 8001202:	6013      	str	r3, [r2, #0]
			if ((isCorrect == -1) && nextTurn == 6) {
 8001204:	4b7c      	ldr	r3, [pc, #496]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x268>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800120c:	d126      	bne.n	800125c <HAL_GPIO_EXTI_Callback+0xcc>
 800120e:	4b79      	ldr	r3, [pc, #484]	; (80013f4 <HAL_GPIO_EXTI_Callback+0x264>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b06      	cmp	r3, #6
 8001214:	d122      	bne.n	800125c <HAL_GPIO_EXTI_Callback+0xcc>
				for (int i = 0; i < 4; i++) {
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	e007      	b.n	800122c <HAL_GPIO_EXTI_Callback+0x9c>
					carrier[i] = 0;
 800121c:	4a77      	ldr	r2, [pc, #476]	; (80013fc <HAL_GPIO_EXTI_Callback+0x26c>)
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	2100      	movs	r1, #0
 8001222:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int i = 0; i < 4; i++) {
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	3301      	adds	r3, #1
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	2b03      	cmp	r3, #3
 8001230:	ddf4      	ble.n	800121c <HAL_GPIO_EXTI_Callback+0x8c>
				    //password[i] = 0;
				}
				//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2102      	movs	r1, #2
 8001236:	4872      	ldr	r0, [pc, #456]	; (8001400 <HAL_GPIO_EXTI_Callback+0x270>)
 8001238:	f002 fbd8 	bl	80039ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	2104      	movs	r1, #4
 8001240:	486f      	ldr	r0, [pc, #444]	; (8001400 <HAL_GPIO_EXTI_Callback+0x270>)
 8001242:	f002 fbd3 	bl	80039ec <HAL_GPIO_WritePin>
				LED = -1;
 8001246:	4b69      	ldr	r3, [pc, #420]	; (80013ec <HAL_GPIO_EXTI_Callback+0x25c>)
 8001248:	f04f 32ff 	mov.w	r2, #4294967295
 800124c:	601a      	str	r2, [r3, #0]
				nextTurn = 0;
 800124e:	4b69      	ldr	r3, [pc, #420]	; (80013f4 <HAL_GPIO_EXTI_Callback+0x264>)
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
				blink = 1;
 8001254:	4b6b      	ldr	r3, [pc, #428]	; (8001404 <HAL_GPIO_EXTI_Callback+0x274>)
 8001256:	2201      	movs	r2, #1
 8001258:	601a      	str	r2, [r3, #0]
				return;
 800125a:	e0c1      	b.n	80013e0 <HAL_GPIO_EXTI_Callback+0x250>
			} else if ((isCorrect != 0 && isCorrect != 1)) {
 800125c:	4b66      	ldr	r3, [pc, #408]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x268>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 80a3 	beq.w	80013ac <HAL_GPIO_EXTI_Callback+0x21c>
 8001266:	4b64      	ldr	r3, [pc, #400]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x268>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b01      	cmp	r3, #1
 800126c:	f000 809e 	beq.w	80013ac <HAL_GPIO_EXTI_Callback+0x21c>

				LED += 1;
 8001270:	4b5e      	ldr	r3, [pc, #376]	; (80013ec <HAL_GPIO_EXTI_Callback+0x25c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	4a5d      	ldr	r2, [pc, #372]	; (80013ec <HAL_GPIO_EXTI_Callback+0x25c>)
 8001278:	6013      	str	r3, [r2, #0]
				if (LED == 4) {
 800127a:	4b5c      	ldr	r3, [pc, #368]	; (80013ec <HAL_GPIO_EXTI_Callback+0x25c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b04      	cmp	r3, #4
 8001280:	f040 8094 	bne.w	80013ac <HAL_GPIO_EXTI_Callback+0x21c>
					int bool = 1;
 8001284:	2301      	movs	r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
					for (int i = 0; i < 4; i++) {
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	e04c      	b.n	8001328 <HAL_GPIO_EXTI_Callback+0x198>
						if (password[i] != carrier[i]) {
 800128e:	4a5e      	ldr	r2, [pc, #376]	; (8001408 <HAL_GPIO_EXTI_Callback+0x278>)
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001296:	4959      	ldr	r1, [pc, #356]	; (80013fc <HAL_GPIO_EXTI_Callback+0x26c>)
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d03f      	beq.n	8001322 <HAL_GPIO_EXTI_Callback+0x192>
							bool = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
							logFailed[4] = carrier[0] + '0';
 80012a6:	4b55      	ldr	r3, [pc, #340]	; (80013fc <HAL_GPIO_EXTI_Callback+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	3330      	adds	r3, #48	; 0x30
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	4b56      	ldr	r3, [pc, #344]	; (800140c <HAL_GPIO_EXTI_Callback+0x27c>)
 80012b2:	711a      	strb	r2, [r3, #4]
							logFailed[5] = carrier[1] + '0';
 80012b4:	4b51      	ldr	r3, [pc, #324]	; (80013fc <HAL_GPIO_EXTI_Callback+0x26c>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	3330      	adds	r3, #48	; 0x30
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4b53      	ldr	r3, [pc, #332]	; (800140c <HAL_GPIO_EXTI_Callback+0x27c>)
 80012c0:	715a      	strb	r2, [r3, #5]
							logFailed[6] = carrier[2] + '0';
 80012c2:	4b4e      	ldr	r3, [pc, #312]	; (80013fc <HAL_GPIO_EXTI_Callback+0x26c>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	3330      	adds	r3, #48	; 0x30
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	4b4f      	ldr	r3, [pc, #316]	; (800140c <HAL_GPIO_EXTI_Callback+0x27c>)
 80012ce:	719a      	strb	r2, [r3, #6]
							logFailed[7] = carrier[3] + '0';
 80012d0:	4b4a      	ldr	r3, [pc, #296]	; (80013fc <HAL_GPIO_EXTI_Callback+0x26c>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	3330      	adds	r3, #48	; 0x30
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b4c      	ldr	r3, [pc, #304]	; (800140c <HAL_GPIO_EXTI_Callback+0x27c>)
 80012dc:	71da      	strb	r2, [r3, #7]
							isCorrect = 0;
 80012de:	4b46      	ldr	r3, [pc, #280]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x268>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
							if (logStatus)
 80012e4:	4b4a      	ldr	r3, [pc, #296]	; (8001410 <HAL_GPIO_EXTI_Callback+0x280>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d004      	beq.n	80012f6 <HAL_GPIO_EXTI_Callback+0x166>
								HAL_UART_Transmit_IT(&huart1, logFailed, 18);
 80012ec:	2212      	movs	r2, #18
 80012ee:	4947      	ldr	r1, [pc, #284]	; (800140c <HAL_GPIO_EXTI_Callback+0x27c>)
 80012f0:	4848      	ldr	r0, [pc, #288]	; (8001414 <HAL_GPIO_EXTI_Callback+0x284>)
 80012f2:	f005 fccd 	bl	8006c90 <HAL_UART_Transmit_IT>
							prevEnterTime = HAL_GetTick();
 80012f6:	f000 fd73 	bl	8001de0 <HAL_GetTick>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4a46      	ldr	r2, [pc, #280]	; (8001418 <HAL_GPIO_EXTI_Callback+0x288>)
 80012fe:	6013      	str	r3, [r2, #0]
							wrongPassCounter++;
 8001300:	4b46      	ldr	r3, [pc, #280]	; (800141c <HAL_GPIO_EXTI_Callback+0x28c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	3301      	adds	r3, #1
 8001306:	4a45      	ldr	r2, [pc, #276]	; (800141c <HAL_GPIO_EXTI_Callback+0x28c>)
 8001308:	6013      	str	r3, [r2, #0]
							buzzerEnterTime = HAL_GetTick();
 800130a:	f000 fd69 	bl	8001de0 <HAL_GetTick>
 800130e:	4603      	mov	r3, r0
 8001310:	4a43      	ldr	r2, [pc, #268]	; (8001420 <HAL_GPIO_EXTI_Callback+0x290>)
 8001312:	6013      	str	r3, [r2, #0]
							if (alertStatus)
 8001314:	4b43      	ldr	r3, [pc, #268]	; (8001424 <HAL_GPIO_EXTI_Callback+0x294>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d060      	beq.n	80013de <HAL_GPIO_EXTI_Callback+0x24e>
								PWM_Start();
 800131c:	f000 faf0 	bl	8001900 <PWM_Start>
							return;
 8001320:	e05d      	b.n	80013de <HAL_GPIO_EXTI_Callback+0x24e>
					for (int i = 0; i < 4; i++) {
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	3301      	adds	r3, #1
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	2b03      	cmp	r3, #3
 800132c:	ddaf      	ble.n	800128e <HAL_GPIO_EXTI_Callback+0xfe>
						}
					}
					if (bool) {
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d03b      	beq.n	80013ac <HAL_GPIO_EXTI_Callback+0x21c>
						logCorrect[4] = carrier[0] + '0';
 8001334:	4b31      	ldr	r3, [pc, #196]	; (80013fc <HAL_GPIO_EXTI_Callback+0x26c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	3330      	adds	r3, #48	; 0x30
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4b3a      	ldr	r3, [pc, #232]	; (8001428 <HAL_GPIO_EXTI_Callback+0x298>)
 8001340:	711a      	strb	r2, [r3, #4]
						logCorrect[5] = carrier[1] + '0';
 8001342:	4b2e      	ldr	r3, [pc, #184]	; (80013fc <HAL_GPIO_EXTI_Callback+0x26c>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	3330      	adds	r3, #48	; 0x30
 800134a:	b2da      	uxtb	r2, r3
 800134c:	4b36      	ldr	r3, [pc, #216]	; (8001428 <HAL_GPIO_EXTI_Callback+0x298>)
 800134e:	715a      	strb	r2, [r3, #5]
						logCorrect[6] = carrier[2] + '0';
 8001350:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <HAL_GPIO_EXTI_Callback+0x26c>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	3330      	adds	r3, #48	; 0x30
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4b33      	ldr	r3, [pc, #204]	; (8001428 <HAL_GPIO_EXTI_Callback+0x298>)
 800135c:	719a      	strb	r2, [r3, #6]
						logCorrect[7] = carrier[3] + '0';
 800135e:	4b27      	ldr	r3, [pc, #156]	; (80013fc <HAL_GPIO_EXTI_Callback+0x26c>)
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	3330      	adds	r3, #48	; 0x30
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <HAL_GPIO_EXTI_Callback+0x298>)
 800136a:	71da      	strb	r2, [r3, #7]
						isCorrect = 1;
 800136c:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x268>)
 800136e:	2201      	movs	r2, #1
 8001370:	601a      	str	r2, [r3, #0]
						if (logStatus)
 8001372:	4b27      	ldr	r3, [pc, #156]	; (8001410 <HAL_GPIO_EXTI_Callback+0x280>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d004      	beq.n	8001384 <HAL_GPIO_EXTI_Callback+0x1f4>
							HAL_UART_Transmit_IT(&huart1, logCorrect, 19);
 800137a:	2213      	movs	r2, #19
 800137c:	492a      	ldr	r1, [pc, #168]	; (8001428 <HAL_GPIO_EXTI_Callback+0x298>)
 800137e:	4825      	ldr	r0, [pc, #148]	; (8001414 <HAL_GPIO_EXTI_Callback+0x284>)
 8001380:	f005 fc86 	bl	8006c90 <HAL_UART_Transmit_IT>
						prevEnterTime = HAL_GetTick();
 8001384:	f000 fd2c 	bl	8001de0 <HAL_GetTick>
 8001388:	4603      	mov	r3, r0
 800138a:	4a23      	ldr	r2, [pc, #140]	; (8001418 <HAL_GPIO_EXTI_Callback+0x288>)
 800138c:	6013      	str	r3, [r2, #0]
						buzzerEnterTime = HAL_GetTick();
 800138e:	f000 fd27 	bl	8001de0 <HAL_GetTick>
 8001392:	4603      	mov	r3, r0
 8001394:	4a22      	ldr	r2, [pc, #136]	; (8001420 <HAL_GPIO_EXTI_Callback+0x290>)
 8001396:	6013      	str	r3, [r2, #0]
						if (alertStatus)
 8001398:	4b22      	ldr	r3, [pc, #136]	; (8001424 <HAL_GPIO_EXTI_Callback+0x294>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_GPIO_EXTI_Callback+0x214>
							PWM_Start();
 80013a0:	f000 faae 	bl	8001900 <PWM_Start>
						wrongPassCounter = 0;
 80013a4:	4b1d      	ldr	r3, [pc, #116]	; (800141c <HAL_GPIO_EXTI_Callback+0x28c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
						return;
 80013aa:	e019      	b.n	80013e0 <HAL_GPIO_EXTI_Callback+0x250>
					}
				}
			}
			previousMillis = currentMillis;
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x258>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0f      	ldr	r2, [pc, #60]	; (80013f0 <HAL_GPIO_EXTI_Callback+0x260>)
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	e014      	b.n	80013e0 <HAL_GPIO_EXTI_Callback+0x250>
		}

	} else if (GPIO_Pin == GPIO_PIN_0 && isCorrect == 0) {
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d111      	bne.n	80013e0 <HAL_GPIO_EXTI_Callback+0x250>
 80013bc:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x268>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10d      	bne.n	80013e0 <HAL_GPIO_EXTI_Callback+0x250>
		blink = 0;
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <HAL_GPIO_EXTI_Callback+0x274>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
		isCorrect = -1;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x268>)
 80013cc:	f04f 32ff 	mov.w	r2, #4294967295
 80013d0:	601a      	str	r2, [r3, #0]
		prevEnterTime = HAL_GetTick();
 80013d2:	f000 fd05 	bl	8001de0 <HAL_GetTick>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <HAL_GPIO_EXTI_Callback+0x288>)
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	e000      	b.n	80013e0 <HAL_GPIO_EXTI_Callback+0x250>
							return;
 80013de:	bf00      	nop
//		PWM_Stop();
	}
}
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000658 	.word	0x20000658
 80013ec:	20000674 	.word	0x20000674
 80013f0:	20000654 	.word	0x20000654
 80013f4:	20000664 	.word	0x20000664
 80013f8:	20000040 	.word	0x20000040
 80013fc:	20000640 	.word	0x20000640
 8001400:	48000800 	.word	0x48000800
 8001404:	20000044 	.word	0x20000044
 8001408:	20000000 	.word	0x20000000
 800140c:	20000024 	.word	0x20000024
 8001410:	20000038 	.word	0x20000038
 8001414:	200002bc 	.word	0x200002bc
 8001418:	2000066c 	.word	0x2000066c
 800141c:	20000650 	.word	0x20000650
 8001420:	20000670 	.word	0x20000670
 8001424:	2000003c 	.word	0x2000003c
 8001428:	20000010 	.word	0x20000010

0800142c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a31      	ldr	r2, [pc, #196]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d15c      	bne.n	80014f8 <HAL_TIM_PeriodElapsedCallback+0xcc>
		if (index == LED && HAL_GetTick() - prevTime < 400) {
 800143e:	4b31      	ldr	r3, [pc, #196]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	4b31      	ldr	r3, [pc, #196]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	429a      	cmp	r2, r3
 8001448:	d119      	bne.n	800147e <HAL_TIM_PeriodElapsedCallback+0x52>
 800144a:	f000 fcc9 	bl	8001de0 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	4b2e      	ldr	r3, [pc, #184]	; (800150c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800145a:	d210      	bcs.n	800147e <HAL_TIM_PeriodElapsedCallback+0x52>
			display_number(index, carrier[index]);
 800145c:	4b29      	ldr	r3, [pc, #164]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b28      	ldr	r3, [pc, #160]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	492a      	ldr	r1, [pc, #168]	; (8001510 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001466:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800146a:	4619      	mov	r1, r3
 800146c:	4610      	mov	r0, r2
 800146e:	f7ff f99d 	bl	80007ac <display_number>
			coolDownTimer = HAL_GetTick();
 8001472:	f000 fcb5 	bl	8001de0 <HAL_GetTick>
 8001476:	4603      	mov	r3, r0
 8001478:	4a26      	ldr	r2, [pc, #152]	; (8001514 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	e02d      	b.n	80014da <HAL_TIM_PeriodElapsedCallback+0xae>
		} else if (index == LED && HAL_GetTick() - prevTime > 900) {
 800147e:	4b21      	ldr	r3, [pc, #132]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4b21      	ldr	r3, [pc, #132]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	d116      	bne.n	80014b8 <HAL_TIM_PeriodElapsedCallback+0x8c>
 800148a:	f000 fca9 	bl	8001de0 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800149a:	d90d      	bls.n	80014b8 <HAL_TIM_PeriodElapsedCallback+0x8c>
			//coolDown
			if (HAL_GetTick() - coolDownTimer > 100) {
 800149c:	f000 fca0 	bl	8001de0 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b64      	cmp	r3, #100	; 0x64
 80014aa:	d916      	bls.n	80014da <HAL_TIM_PeriodElapsedCallback+0xae>
				prevTime = HAL_GetTick();
 80014ac:	f000 fc98 	bl	8001de0 <HAL_GetTick>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4a16      	ldr	r2, [pc, #88]	; (800150c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80014b4:	6013      	str	r3, [r2, #0]
			if (HAL_GetTick() - coolDownTimer > 100) {
 80014b6:	e010      	b.n	80014da <HAL_TIM_PeriodElapsedCallback+0xae>
			}
		} else if (index != LED) {
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d00a      	beq.n	80014da <HAL_TIM_PeriodElapsedCallback+0xae>
			display_number(index, carrier[index]);
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4910      	ldr	r1, [pc, #64]	; (8001510 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80014ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014d2:	4619      	mov	r1, r3
 80014d4:	4610      	mov	r0, r2
 80014d6:	f7ff f969 	bl	80007ac <display_number>
		}
		if (index == 4) {
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b04      	cmp	r3, #4
 80014e0:	d105      	bne.n	80014ee <HAL_TIM_PeriodElapsedCallback+0xc2>
			index = 0;
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
			init_display();
 80014e8:	f7ff f9b4 	bl	8000854 <init_display>
		} else {
			++index;
		}
	}
}
 80014ec:	e004      	b.n	80014f8 <HAL_TIM_PeriodElapsedCallback+0xcc>
			++index;
 80014ee:	4b05      	ldr	r3, [pc, #20]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	3301      	adds	r3, #1
 80014f4:	4a03      	ldr	r2, [pc, #12]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80014f6:	6013      	str	r3, [r2, #0]
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40012c00 	.word	0x40012c00
 8001504:	20000668 	.word	0x20000668
 8001508:	20000674 	.word	0x20000674
 800150c:	2000065c 	.word	0x2000065c
 8001510:	20000640 	.word	0x20000640
 8001514:	20000660 	.word	0x20000660

08001518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800151c:	b672      	cpsid	i
}
 800151e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001520:	e7fe      	b.n	8001520 <Error_Handler+0x8>
	...

08001524 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <HAL_MspInit+0x44>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <HAL_MspInit+0x44>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6193      	str	r3, [r2, #24]
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <HAL_MspInit+0x44>)
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_MspInit+0x44>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	4a08      	ldr	r2, [pc, #32]	; (8001568 <HAL_MspInit+0x44>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	61d3      	str	r3, [r2, #28]
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_MspInit+0x44>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800155a:	2007      	movs	r0, #7
 800155c:	f002 f814 	bl	8003588 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40021000 	.word	0x40021000

0800156c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800158c:	d12b      	bne.n	80015e6 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <HAL_ADC_MspInit+0x84>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	4a17      	ldr	r2, [pc, #92]	; (80015f0 <HAL_ADC_MspInit+0x84>)
 8001594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001598:	6153      	str	r3, [r2, #20]
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_ADC_MspInit+0x84>)
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_ADC_MspInit+0x84>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	4a11      	ldr	r2, [pc, #68]	; (80015f0 <HAL_ADC_MspInit+0x84>)
 80015ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015b0:	6153      	str	r3, [r2, #20]
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <HAL_ADC_MspInit+0x84>)
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015be:	2310      	movs	r3, #16
 80015c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c2:	2303      	movs	r3, #3
 80015c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4619      	mov	r1, r3
 80015d0:	4808      	ldr	r0, [pc, #32]	; (80015f4 <HAL_ADC_MspInit+0x88>)
 80015d2:	f002 f891 	bl	80036f8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	2012      	movs	r0, #18
 80015dc:	f001 ffdf 	bl	800359e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80015e0:	2012      	movs	r0, #18
 80015e2:	f001 fff8 	bl	80035d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015e6:	bf00      	nop
 80015e8:	3728      	adds	r7, #40	; 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000
 80015f4:	48001400 	.word	0x48001400

080015f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a17      	ldr	r2, [pc, #92]	; (8001674 <HAL_I2C_MspInit+0x7c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d127      	bne.n	800166a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <HAL_I2C_MspInit+0x80>)
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	4a16      	ldr	r2, [pc, #88]	; (8001678 <HAL_I2C_MspInit+0x80>)
 8001620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001624:	6153      	str	r3, [r2, #20]
 8001626:	4b14      	ldr	r3, [pc, #80]	; (8001678 <HAL_I2C_MspInit+0x80>)
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001632:	23c0      	movs	r3, #192	; 0xc0
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001636:	2312      	movs	r3, #18
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800163a:	2301      	movs	r3, #1
 800163c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001642:	2304      	movs	r3, #4
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	480b      	ldr	r0, [pc, #44]	; (800167c <HAL_I2C_MspInit+0x84>)
 800164e:	f002 f853 	bl	80036f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_I2C_MspInit+0x80>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	4a08      	ldr	r2, [pc, #32]	; (8001678 <HAL_I2C_MspInit+0x80>)
 8001658:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800165c:	61d3      	str	r3, [r2, #28]
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_I2C_MspInit+0x80>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800166a:	bf00      	nop
 800166c:	3728      	adds	r7, #40	; 0x28
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40005400 	.word	0x40005400
 8001678:	40021000 	.word	0x40021000
 800167c:	48000400 	.word	0x48000400

08001680 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a17      	ldr	r2, [pc, #92]	; (80016fc <HAL_SPI_MspInit+0x7c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d128      	bne.n	80016f4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <HAL_SPI_MspInit+0x80>)
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	4a16      	ldr	r2, [pc, #88]	; (8001700 <HAL_SPI_MspInit+0x80>)
 80016a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016ac:	6193      	str	r3, [r2, #24]
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <HAL_SPI_MspInit+0x80>)
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HAL_SPI_MspInit+0x80>)
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	4a10      	ldr	r2, [pc, #64]	; (8001700 <HAL_SPI_MspInit+0x80>)
 80016c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c4:	6153      	str	r3, [r2, #20]
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <HAL_SPI_MspInit+0x80>)
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80016d2:	23e0      	movs	r3, #224	; 0xe0
 80016d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016de:	2303      	movs	r3, #3
 80016e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016e2:	2305      	movs	r3, #5
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f0:	f002 f802 	bl	80036f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016f4:	bf00      	nop
 80016f6:	3728      	adds	r7, #40	; 0x28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40013000 	.word	0x40013000
 8001700:	40021000 	.word	0x40021000

08001704 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a16      	ldr	r2, [pc, #88]	; (800176c <HAL_TIM_Base_MspInit+0x68>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d114      	bne.n	8001740 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001716:	4b16      	ldr	r3, [pc, #88]	; (8001770 <HAL_TIM_Base_MspInit+0x6c>)
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	4a15      	ldr	r2, [pc, #84]	; (8001770 <HAL_TIM_Base_MspInit+0x6c>)
 800171c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001720:	6193      	str	r3, [r2, #24]
 8001722:	4b13      	ldr	r3, [pc, #76]	; (8001770 <HAL_TIM_Base_MspInit+0x6c>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	2019      	movs	r0, #25
 8001734:	f001 ff33 	bl	800359e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001738:	2019      	movs	r0, #25
 800173a:	f001 ff4c 	bl	80035d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800173e:	e010      	b.n	8001762 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001748:	d10b      	bne.n	8001762 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_TIM_Base_MspInit+0x6c>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	4a08      	ldr	r2, [pc, #32]	; (8001770 <HAL_TIM_Base_MspInit+0x6c>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	61d3      	str	r3, [r2, #28]
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_TIM_Base_MspInit+0x6c>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
}
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40012c00 	.word	0x40012c00
 8001770:	40021000 	.word	0x40021000

08001774 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001794:	d11d      	bne.n	80017d2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <HAL_TIM_MspPostInit+0x68>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	4a10      	ldr	r2, [pc, #64]	; (80017dc <HAL_TIM_MspPostInit+0x68>)
 800179c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a0:	6153      	str	r3, [r2, #20]
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_TIM_MspPostInit+0x68>)
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017c0:	2301      	movs	r3, #1
 80017c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	4619      	mov	r1, r3
 80017ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ce:	f001 ff93 	bl	80036f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80017d2:	bf00      	nop
 80017d4:	3720      	adds	r7, #32
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000

080017e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a1b      	ldr	r2, [pc, #108]	; (800186c <HAL_UART_MspInit+0x8c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d12f      	bne.n	8001862 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001802:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <HAL_UART_MspInit+0x90>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	4a1a      	ldr	r2, [pc, #104]	; (8001870 <HAL_UART_MspInit+0x90>)
 8001808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800180c:	6193      	str	r3, [r2, #24]
 800180e:	4b18      	ldr	r3, [pc, #96]	; (8001870 <HAL_UART_MspInit+0x90>)
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <HAL_UART_MspInit+0x90>)
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	4a14      	ldr	r2, [pc, #80]	; (8001870 <HAL_UART_MspInit+0x90>)
 8001820:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001824:	6153      	str	r3, [r2, #20]
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_UART_MspInit+0x90>)
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001832:	2330      	movs	r3, #48	; 0x30
 8001834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001842:	2307      	movs	r3, #7
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	4809      	ldr	r0, [pc, #36]	; (8001874 <HAL_UART_MspInit+0x94>)
 800184e:	f001 ff53 	bl	80036f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	2025      	movs	r0, #37	; 0x25
 8001858:	f001 fea1 	bl	800359e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800185c:	2025      	movs	r0, #37	; 0x25
 800185e:	f001 feba 	bl	80035d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001862:	bf00      	nop
 8001864:	3728      	adds	r7, #40	; 0x28
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40013800 	.word	0x40013800
 8001870:	40021000 	.word	0x40021000
 8001874:	48000800 	.word	0x48000800

08001878 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a18      	ldr	r2, [pc, #96]	; (80018f8 <HAL_PCD_MspInit+0x80>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d129      	bne.n	80018ee <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	4b18      	ldr	r3, [pc, #96]	; (80018fc <HAL_PCD_MspInit+0x84>)
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	4a17      	ldr	r2, [pc, #92]	; (80018fc <HAL_PCD_MspInit+0x84>)
 80018a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a4:	6153      	str	r3, [r2, #20]
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <HAL_PCD_MspInit+0x84>)
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80018b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c0:	2303      	movs	r3, #3
 80018c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80018c4:	230e      	movs	r3, #14
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d2:	f001 ff11 	bl	80036f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_PCD_MspInit+0x84>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	4a08      	ldr	r2, [pc, #32]	; (80018fc <HAL_PCD_MspInit+0x84>)
 80018dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018e0:	61d3      	str	r3, [r2, #28]
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_PCD_MspInit+0x84>)
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80018ee:	bf00      	nop
 80018f0:	3728      	adds	r7, #40	; 0x28
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40005c00 	.word	0x40005c00
 80018fc:	40021000 	.word	0x40021000

08001900 <PWM_Start>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PWM_Start() {
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <PWM_Start+0x18>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a04      	ldr	r2, [pc, #16]	; (800191c <PWM_Start+0x1c>)
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	4611      	mov	r1, r2
 800190e:	4618      	mov	r0, r3
 8001910:	f004 f886 	bl	8005a20 <HAL_TIM_PWM_Start>
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000088 	.word	0x20000088
 800191c:	20000730 	.word	0x20000730

08001920 <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	460a      	mov	r2, r1
 800192a:	80fb      	strh	r3, [r7, #6]
 800192c:	4613      	mov	r3, r2
 800192e:	80bb      	strh	r3, [r7, #4]
	if (pwm_freq == 0 || pwm_freq > 20000) {
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d004      	beq.n	8001940 <PWM_Change_Tone+0x20>
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	f644 6220 	movw	r2, #20000	; 0x4e20
 800193c:	4293      	cmp	r3, r2
 800193e:	d937      	bls.n	80019b0 <PWM_Change_Tone+0x90>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 8001940:	4b4e      	ldr	r3, [pc, #312]	; (8001a7c <PWM_Change_Tone+0x15c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d105      	bne.n	8001954 <PWM_Change_Tone+0x34>
 8001948:	4b4d      	ldr	r3, [pc, #308]	; (8001a80 <PWM_Change_Tone+0x160>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2200      	movs	r2, #0
 8001950:	635a      	str	r2, [r3, #52]	; 0x34
 8001952:	e08e      	b.n	8001a72 <PWM_Change_Tone+0x152>
 8001954:	4b49      	ldr	r3, [pc, #292]	; (8001a7c <PWM_Change_Tone+0x15c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b04      	cmp	r3, #4
 800195a:	d105      	bne.n	8001968 <PWM_Change_Tone+0x48>
 800195c:	4b48      	ldr	r3, [pc, #288]	; (8001a80 <PWM_Change_Tone+0x160>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	2300      	movs	r3, #0
 8001964:	6393      	str	r3, [r2, #56]	; 0x38
 8001966:	e084      	b.n	8001a72 <PWM_Change_Tone+0x152>
 8001968:	4b44      	ldr	r3, [pc, #272]	; (8001a7c <PWM_Change_Tone+0x15c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b08      	cmp	r3, #8
 800196e:	d105      	bne.n	800197c <PWM_Change_Tone+0x5c>
 8001970:	4b43      	ldr	r3, [pc, #268]	; (8001a80 <PWM_Change_Tone+0x160>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	2300      	movs	r3, #0
 8001978:	63d3      	str	r3, [r2, #60]	; 0x3c
 800197a:	e07a      	b.n	8001a72 <PWM_Change_Tone+0x152>
 800197c:	4b3f      	ldr	r3, [pc, #252]	; (8001a7c <PWM_Change_Tone+0x15c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b0c      	cmp	r3, #12
 8001982:	d105      	bne.n	8001990 <PWM_Change_Tone+0x70>
 8001984:	4b3e      	ldr	r3, [pc, #248]	; (8001a80 <PWM_Change_Tone+0x160>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	2300      	movs	r3, #0
 800198c:	6413      	str	r3, [r2, #64]	; 0x40
 800198e:	e070      	b.n	8001a72 <PWM_Change_Tone+0x152>
 8001990:	4b3a      	ldr	r3, [pc, #232]	; (8001a7c <PWM_Change_Tone+0x15c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b10      	cmp	r3, #16
 8001996:	d105      	bne.n	80019a4 <PWM_Change_Tone+0x84>
 8001998:	4b39      	ldr	r3, [pc, #228]	; (8001a80 <PWM_Change_Tone+0x160>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	2300      	movs	r3, #0
 80019a0:	6593      	str	r3, [r2, #88]	; 0x58
 80019a2:	e066      	b.n	8001a72 <PWM_Change_Tone+0x152>
 80019a4:	4b36      	ldr	r3, [pc, #216]	; (8001a80 <PWM_Change_Tone+0x160>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	2300      	movs	r3, #0
 80019ac:	65d3      	str	r3, [r2, #92]	; 0x5c
 80019ae:	e060      	b.n	8001a72 <PWM_Change_Tone+0x152>
	} else {
		const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 80019b0:	f003 fbfe 	bl	80051b0 <HAL_RCC_GetSysClockFreq>
 80019b4:	61f8      	str	r0, [r7, #28]
		const uint16_t prescaler = 1;
 80019b6:	2301      	movs	r3, #1
 80019b8:	837b      	strh	r3, [r7, #26]
		const uint32_t timer_clock = internal_clock_freq / prescaler;
 80019ba:	8b7b      	ldrh	r3, [r7, #26]
 80019bc:	69fa      	ldr	r2, [r7, #28]
 80019be:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c2:	617b      	str	r3, [r7, #20]
		const uint32_t period_cycles = timer_clock / pwm_freq;
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019cc:	613b      	str	r3, [r7, #16]
		const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 80019ce:	88bb      	ldrh	r3, [r7, #4]
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
 80019d6:	4a2b      	ldr	r2, [pc, #172]	; (8001a84 <PWM_Change_Tone+0x164>)
 80019d8:	fba2 2303 	umull	r2, r3, r2, r3
 80019dc:	09db      	lsrs	r3, r3, #7
 80019de:	60fb      	str	r3, [r7, #12]

		pwm_timer->Instance->PSC = prescaler - 1;
 80019e0:	8b7b      	ldrh	r3, [r7, #26]
 80019e2:	1e5a      	subs	r2, r3, #1
 80019e4:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <PWM_Change_Tone+0x160>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	629a      	str	r2, [r3, #40]	; 0x28
		pwm_timer->Instance->ARR = period_cycles - 1;
 80019ec:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <PWM_Change_Tone+0x160>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	3a01      	subs	r2, #1
 80019f6:	62da      	str	r2, [r3, #44]	; 0x2c
		pwm_timer->Instance->EGR = TIM_EGR_UG;
 80019f8:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <PWM_Change_Tone+0x160>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2201      	movs	r2, #1
 8001a00:	615a      	str	r2, [r3, #20]
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <PWM_Change_Tone+0x15c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d105      	bne.n	8001a16 <PWM_Change_Tone+0xf6>
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <PWM_Change_Tone+0x160>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8001a14:	e02d      	b.n	8001a72 <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001a16:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <PWM_Change_Tone+0x15c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	d105      	bne.n	8001a2a <PWM_Change_Tone+0x10a>
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <PWM_Change_Tone+0x160>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001a28:	e023      	b.n	8001a72 <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001a2a:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <PWM_Change_Tone+0x15c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d105      	bne.n	8001a3e <PWM_Change_Tone+0x11e>
 8001a32:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <PWM_Change_Tone+0x160>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001a3c:	e019      	b.n	8001a72 <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <PWM_Change_Tone+0x15c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b0c      	cmp	r3, #12
 8001a44:	d105      	bne.n	8001a52 <PWM_Change_Tone+0x132>
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <PWM_Change_Tone+0x160>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001a50:	e00f      	b.n	8001a72 <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <PWM_Change_Tone+0x15c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b10      	cmp	r3, #16
 8001a58:	d105      	bne.n	8001a66 <PWM_Change_Tone+0x146>
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <PWM_Change_Tone+0x160>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001a64:	e005      	b.n	8001a72 <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <PWM_Change_Tone+0x160>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001a70:	e7ff      	b.n	8001a72 <PWM_Change_Tone+0x152>
 8001a72:	bf00      	nop
 8001a74:	3720      	adds	r7, #32
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000730 	.word	0x20000730
 8001a80:	20000088 	.word	0x20000088
 8001a84:	10624dd3 	.word	0x10624dd3

08001a88 <Change_Melody>:

void Change_Melody(const struct Tone *melody, uint16_t tone_count) {
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
	melody_ptr = melody;
 8001a94:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <Change_Melody+0x2c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6013      	str	r3, [r2, #0]
	melody_tone_count = tone_count;
 8001a9a:	4a07      	ldr	r2, [pc, #28]	; (8001ab8 <Change_Melody+0x30>)
 8001a9c:	887b      	ldrh	r3, [r7, #2]
 8001a9e:	8013      	strh	r3, [r2, #0]
	current_tone_number = 0;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <Change_Melody+0x34>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	801a      	strh	r2, [r3, #0]
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000734 	.word	0x20000734
 8001ab8:	20000738 	.word	0x20000738
 8001abc:	2000073a 	.word	0x2000073a

08001ac0 <Update_Melody>:

void Update_Melody() {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
	if (programState != Paused && programState != IDLE) {
 8001ac6:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <Update_Melody+0x84>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d035      	beq.n	8001b3a <Update_Melody+0x7a>
 8001ace:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <Update_Melody+0x84>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d031      	beq.n	8001b3a <Update_Melody+0x7a>
		if ((HAL_GetTick() > current_tone_end)
 8001ad6:	f000 f983 	bl	8001de0 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <Update_Melody+0x88>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d92a      	bls.n	8001b3a <Update_Melody+0x7a>
				&& (current_tone_number < melody_tone_count)) {
 8001ae4:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <Update_Melody+0x8c>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <Update_Melody+0x90>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d222      	bcs.n	8001b3a <Update_Melody+0x7a>
			const struct Tone active_tone = *(melody_ptr + current_tone_number);
 8001af4:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <Update_Melody+0x94>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <Update_Melody+0x8c>)
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	441a      	add	r2, r3
 8001b02:	463b      	mov	r3, r7
 8001b04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b08:	e883 0003 	stmia.w	r3, {r0, r1}
			PWM_Change_Tone(active_tone.frequency, volume);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	4a11      	ldr	r2, [pc, #68]	; (8001b58 <Update_Melody+0x98>)
 8001b12:	8812      	ldrh	r2, [r2, #0]
 8001b14:	b292      	uxth	r2, r2
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff01 	bl	8001920 <PWM_Change_Tone>
			current_tone_end = HAL_GetTick() + active_tone.duration;
 8001b1e:	f000 f95f 	bl	8001de0 <HAL_GetTick>
 8001b22:	4603      	mov	r3, r0
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <Update_Melody+0x88>)
 8001b2a:	6013      	str	r3, [r2, #0]
			current_tone_number++;
 8001b2c:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <Update_Melody+0x8c>)
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	3301      	adds	r3, #1
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <Update_Melody+0x8c>)
 8001b38:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000048 	.word	0x20000048
 8001b48:	2000073c 	.word	0x2000073c
 8001b4c:	2000073a 	.word	0x2000073a
 8001b50:	20000738 	.word	0x20000738
 8001b54:	20000734 	.word	0x20000734
 8001b58:	2000008c 	.word	0x2000008c

08001b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001b60:	e7fe      	b.n	8001b60 <NMI_Handler+0x4>

08001b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b66:	e7fe      	b.n	8001b66 <HardFault_Handler+0x4>

08001b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <MemManage_Handler+0x4>

08001b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <BusFault_Handler+0x4>

08001b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <UsageFault_Handler+0x4>

08001b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba8:	f000 f906 	bl	8001db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	Update_Melody();
 8001bac:	f7ff ff88 	bl	8001ac0 <Update_Melody>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f001 ff2f 	bl	8003a1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	if (HAL_GetTick() > last_button_press + 200) {
 8001bbe:	f000 f90f 	bl	8001de0 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <EXTI0_IRQHandler+0x28>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	33c8      	adds	r3, #200	; 0xc8
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d904      	bls.n	8001bd8 <EXTI0_IRQHandler+0x24>
		last_button_press = HAL_GetTick();
 8001bce:	f000 f907 	bl	8001de0 <HAL_GetTick>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4a01      	ldr	r2, [pc, #4]	; (8001bdc <EXTI0_IRQHandler+0x28>)
 8001bd6:	6013      	str	r3, [r2, #0]

	}
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000740 	.word	0x20000740

08001be0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001be4:	2002      	movs	r0, #2
 8001be6:	f001 ff19 	bl	8003a1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}

08001bee <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001bf2:	2004      	movs	r0, #4
 8001bf4:	f001 ff12 	bl	8003a1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001c00:	2008      	movs	r0, #8
 8001c02:	f001 ff0b 	bl	8003a1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <ADC1_2_IRQHandler+0x10>)
 8001c12:	f000 fc33 	bl	800247c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2000011c 	.word	0x2000011c

08001c20 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c24:	4802      	ldr	r0, [pc, #8]	; (8001c30 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001c26:	f003 fffb 	bl	8005c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000224 	.word	0x20000224

08001c34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <USART1_IRQHandler+0x10>)
 8001c3a:	f005 f8cb 	bl	8006dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200002bc 	.word	0x200002bc

08001c48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c50:	4a14      	ldr	r2, [pc, #80]	; (8001ca4 <_sbrk+0x5c>)
 8001c52:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <_sbrk+0x60>)
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c5c:	4b13      	ldr	r3, [pc, #76]	; (8001cac <_sbrk+0x64>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d102      	bne.n	8001c6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <_sbrk+0x64>)
 8001c66:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <_sbrk+0x68>)
 8001c68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c6a:	4b10      	ldr	r3, [pc, #64]	; (8001cac <_sbrk+0x64>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d207      	bcs.n	8001c88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c78:	f006 fb3a 	bl	80082f0 <__errno>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	220c      	movs	r2, #12
 8001c80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c82:	f04f 33ff 	mov.w	r3, #4294967295
 8001c86:	e009      	b.n	8001c9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <_sbrk+0x64>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c8e:	4b07      	ldr	r3, [pc, #28]	; (8001cac <_sbrk+0x64>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4413      	add	r3, r2
 8001c96:	4a05      	ldr	r2, [pc, #20]	; (8001cac <_sbrk+0x64>)
 8001c98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	2000a000 	.word	0x2000a000
 8001ca8:	00000400 	.word	0x00000400
 8001cac:	20000744 	.word	0x20000744
 8001cb0:	20000760 	.word	0x20000760

08001cb4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <SystemInit+0x20>)
 8001cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cbe:	4a05      	ldr	r2, [pc, #20]	; (8001cd4 <SystemInit+0x20>)
 8001cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d10 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cdc:	f7ff ffea 	bl	8001cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ce0:	480c      	ldr	r0, [pc, #48]	; (8001d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ce2:	490d      	ldr	r1, [pc, #52]	; (8001d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ce4:	4a0d      	ldr	r2, [pc, #52]	; (8001d1c <LoopForever+0xe>)
  movs r3, #0
 8001ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce8:	e002      	b.n	8001cf0 <LoopCopyDataInit>

08001cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cee:	3304      	adds	r3, #4

08001cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf4:	d3f9      	bcc.n	8001cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cf8:	4c0a      	ldr	r4, [pc, #40]	; (8001d24 <LoopForever+0x16>)
  movs r3, #0
 8001cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cfc:	e001      	b.n	8001d02 <LoopFillZerobss>

08001cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d00:	3204      	adds	r2, #4

08001d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d04:	d3fb      	bcc.n	8001cfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d06:	f006 faf9 	bl	80082fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d0a:	f7fe fe3b 	bl	8000984 <main>

08001d0e <LoopForever>:

LoopForever:
    b LoopForever
 8001d0e:	e7fe      	b.n	8001d0e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d10:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d18:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001d1c:	0800aa88 	.word	0x0800aa88
  ldr r2, =_sbss
 8001d20:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001d24:	2000075c 	.word	0x2000075c

08001d28 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d28:	e7fe      	b.n	8001d28 <ADC3_IRQHandler>
	...

08001d2c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <HAL_Init+0x28>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a07      	ldr	r2, [pc, #28]	; (8001d54 <HAL_Init+0x28>)
 8001d36:	f043 0310 	orr.w	r3, r3, #16
 8001d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d3c:	2003      	movs	r0, #3
 8001d3e:	f001 fc23 	bl	8003588 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d42:	2000      	movs	r0, #0
 8001d44:	f000 f808 	bl	8001d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d48:	f7ff fbec 	bl	8001524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40022000 	.word	0x40022000

08001d58 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_InitTick+0x54>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_InitTick+0x58>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d76:	4618      	mov	r0, r3
 8001d78:	f001 fc3b 	bl	80035f2 <HAL_SYSTICK_Config>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00e      	b.n	8001da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b0f      	cmp	r3, #15
 8001d8a:	d80a      	bhi.n	8001da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295
 8001d94:	f001 fc03 	bl	800359e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d98:	4a06      	ldr	r2, [pc, #24]	; (8001db4 <HAL_InitTick+0x5c>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e000      	b.n	8001da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000090 	.word	0x20000090
 8001db0:	20000098 	.word	0x20000098
 8001db4:	20000094 	.word	0x20000094

08001db8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_IncTick+0x20>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_IncTick+0x24>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <HAL_IncTick+0x24>)
 8001dca:	6013      	str	r3, [r2, #0]
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20000098 	.word	0x20000098
 8001ddc:	20000748 	.word	0x20000748

08001de0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return uwTick;  
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_GetTick+0x14>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20000748 	.word	0x20000748

08001df8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b09a      	sub	sp, #104	; 0x68
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e1c9      	b.n	80021d4 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d176      	bne.n	8001f40 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d152      	bne.n	8001f00 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff fb79 	bl	800156c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d13b      	bne.n	8001f00 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f001 fa47 	bl	800331c <ADC_Disable>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d12f      	bne.n	8001f00 <HAL_ADC_Init+0xe0>
 8001ea0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d12b      	bne.n	8001f00 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001eb0:	f023 0302 	bic.w	r3, r3, #2
 8001eb4:	f043 0202 	orr.w	r2, r3, #2
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001eca:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001eda:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001edc:	4b86      	ldr	r3, [pc, #536]	; (80020f8 <HAL_ADC_Init+0x2d8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a86      	ldr	r2, [pc, #536]	; (80020fc <HAL_ADC_Init+0x2dc>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	0c9a      	lsrs	r2, r3, #18
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ef2:	e002      	b.n	8001efa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f9      	bne.n	8001ef4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f1c:	d110      	bne.n	8001f40 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f023 0312 	bic.w	r3, r3, #18
 8001f26:	f043 0210 	orr.w	r2, r3, #16
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	f043 0201 	orr.w	r2, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	f003 0310 	and.w	r3, r3, #16
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f040 8136 	bne.w	80021ba <HAL_ADC_Init+0x39a>
 8001f4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f040 8131 	bne.w	80021ba <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f040 8129 	bne.w	80021ba <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f70:	f043 0202 	orr.w	r2, r3, #2
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f80:	d004      	beq.n	8001f8c <HAL_ADC_Init+0x16c>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a5e      	ldr	r2, [pc, #376]	; (8002100 <HAL_ADC_Init+0x2e0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d101      	bne.n	8001f90 <HAL_ADC_Init+0x170>
 8001f8c:	4b5d      	ldr	r3, [pc, #372]	; (8002104 <HAL_ADC_Init+0x2e4>)
 8001f8e:	e000      	b.n	8001f92 <HAL_ADC_Init+0x172>
 8001f90:	4b5d      	ldr	r3, [pc, #372]	; (8002108 <HAL_ADC_Init+0x2e8>)
 8001f92:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f9c:	d102      	bne.n	8001fa4 <HAL_ADC_Init+0x184>
 8001f9e:	4b58      	ldr	r3, [pc, #352]	; (8002100 <HAL_ADC_Init+0x2e0>)
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	e01a      	b.n	8001fda <HAL_ADC_Init+0x1ba>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a55      	ldr	r2, [pc, #340]	; (8002100 <HAL_ADC_Init+0x2e0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d103      	bne.n	8001fb6 <HAL_ADC_Init+0x196>
 8001fae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	e011      	b.n	8001fda <HAL_ADC_Init+0x1ba>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a54      	ldr	r2, [pc, #336]	; (800210c <HAL_ADC_Init+0x2ec>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d102      	bne.n	8001fc6 <HAL_ADC_Init+0x1a6>
 8001fc0:	4b53      	ldr	r3, [pc, #332]	; (8002110 <HAL_ADC_Init+0x2f0>)
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	e009      	b.n	8001fda <HAL_ADC_Init+0x1ba>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a51      	ldr	r2, [pc, #324]	; (8002110 <HAL_ADC_Init+0x2f0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d102      	bne.n	8001fd6 <HAL_ADC_Init+0x1b6>
 8001fd0:	4b4e      	ldr	r3, [pc, #312]	; (800210c <HAL_ADC_Init+0x2ec>)
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	e001      	b.n	8001fda <HAL_ADC_Init+0x1ba>
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d108      	bne.n	8001ffa <HAL_ADC_Init+0x1da>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_ADC_Init+0x1da>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <HAL_ADC_Init+0x1dc>
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d11c      	bne.n	800203a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002000:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002002:	2b00      	cmp	r3, #0
 8002004:	d010      	beq.n	8002028 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	2b01      	cmp	r3, #1
 8002010:	d107      	bne.n	8002022 <HAL_ADC_Init+0x202>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b01      	cmp	r3, #1
 800201c:	d101      	bne.n	8002022 <HAL_ADC_Init+0x202>
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <HAL_ADC_Init+0x204>
 8002022:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002024:	2b00      	cmp	r3, #0
 8002026:	d108      	bne.n	800203a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002028:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	431a      	orrs	r2, r3
 8002036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002038:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	7e5b      	ldrb	r3, [r3, #25]
 800203e:	035b      	lsls	r3, r3, #13
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002044:	2a01      	cmp	r2, #1
 8002046:	d002      	beq.n	800204e <HAL_ADC_Init+0x22e>
 8002048:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800204c:	e000      	b.n	8002050 <HAL_ADC_Init+0x230>
 800204e:	2200      	movs	r2, #0
 8002050:	431a      	orrs	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	4313      	orrs	r3, r2
 800205e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002060:	4313      	orrs	r3, r2
 8002062:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3020 	ldrb.w	r3, [r3, #32]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d11b      	bne.n	80020a6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	7e5b      	ldrb	r3, [r3, #25]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d109      	bne.n	800208a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	3b01      	subs	r3, #1
 800207c:	045a      	lsls	r2, r3, #17
 800207e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002080:	4313      	orrs	r3, r2
 8002082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002086:	663b      	str	r3, [r7, #96]	; 0x60
 8002088:	e00d      	b.n	80020a6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002092:	f043 0220 	orr.w	r2, r3, #32
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	f043 0201 	orr.w	r2, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d03a      	beq.n	8002124 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a16      	ldr	r2, [pc, #88]	; (800210c <HAL_ADC_Init+0x2ec>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d004      	beq.n	80020c2 <HAL_ADC_Init+0x2a2>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a14      	ldr	r2, [pc, #80]	; (8002110 <HAL_ADC_Init+0x2f0>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d128      	bne.n	8002114 <HAL_ADC_Init+0x2f4>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80020ca:	d012      	beq.n	80020f2 <HAL_ADC_Init+0x2d2>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020d4:	d00a      	beq.n	80020ec <HAL_ADC_Init+0x2cc>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020da:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80020de:	d002      	beq.n	80020e6 <HAL_ADC_Init+0x2c6>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	e018      	b.n	8002118 <HAL_ADC_Init+0x2f8>
 80020e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ea:	e015      	b.n	8002118 <HAL_ADC_Init+0x2f8>
 80020ec:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80020f0:	e012      	b.n	8002118 <HAL_ADC_Init+0x2f8>
 80020f2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80020f6:	e00f      	b.n	8002118 <HAL_ADC_Init+0x2f8>
 80020f8:	20000090 	.word	0x20000090
 80020fc:	431bde83 	.word	0x431bde83
 8002100:	50000100 	.word	0x50000100
 8002104:	50000300 	.word	0x50000300
 8002108:	50000700 	.word	0x50000700
 800210c:	50000400 	.word	0x50000400
 8002110:	50000500 	.word	0x50000500
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800211c:	4313      	orrs	r3, r2
 800211e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002120:	4313      	orrs	r3, r2
 8002122:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	2b00      	cmp	r3, #0
 8002130:	d114      	bne.n	800215c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002140:	f023 0302 	bic.w	r3, r3, #2
 8002144:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7e1b      	ldrb	r3, [r3, #24]
 800214a:	039a      	lsls	r2, r3, #14
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4313      	orrs	r3, r2
 8002156:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002158:	4313      	orrs	r3, r2
 800215a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <HAL_ADC_Init+0x3bc>)
 8002164:	4013      	ands	r3, r2
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800216c:	430b      	orrs	r3, r1
 800216e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d10c      	bne.n	8002192 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f023 010f 	bic.w	r1, r3, #15
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	1e5a      	subs	r2, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	631a      	str	r2, [r3, #48]	; 0x30
 8002190:	e007      	b.n	80021a2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 020f 	bic.w	r2, r2, #15
 80021a0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	f023 0303 	bic.w	r3, r3, #3
 80021b0:	f043 0201 	orr.w	r2, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	641a      	str	r2, [r3, #64]	; 0x40
 80021b8:	e00a      	b.n	80021d0 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f023 0312 	bic.w	r3, r3, #18
 80021c2:	f043 0210 	orr.w	r2, r3, #16
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80021ca:	2301      	movs	r3, #1
 80021cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80021d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3768      	adds	r7, #104	; 0x68
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	fff0c007 	.word	0xfff0c007

080021e0 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f040 8123 	bne.w	8002442 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_ADC_Start_IT+0x2a>
 8002206:	2302      	movs	r3, #2
 8002208:	e11e      	b.n	8002448 <HAL_ADC_Start_IT+0x268>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f001 f81e 	bl	8003254 <ADC_Enable>
 8002218:	4603      	mov	r3, r0
 800221a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f040 810a 	bne.w	8002438 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800222c:	f023 0301 	bic.w	r3, r3, #1
 8002230:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002240:	d004      	beq.n	800224c <HAL_ADC_Start_IT+0x6c>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a82      	ldr	r2, [pc, #520]	; (8002450 <HAL_ADC_Start_IT+0x270>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d106      	bne.n	800225a <HAL_ADC_Start_IT+0x7a>
 800224c:	4b81      	ldr	r3, [pc, #516]	; (8002454 <HAL_ADC_Start_IT+0x274>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	2b00      	cmp	r3, #0
 8002256:	d010      	beq.n	800227a <HAL_ADC_Start_IT+0x9a>
 8002258:	e005      	b.n	8002266 <HAL_ADC_Start_IT+0x86>
 800225a:	4b7f      	ldr	r3, [pc, #508]	; (8002458 <HAL_ADC_Start_IT+0x278>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 031f 	and.w	r3, r3, #31
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <HAL_ADC_Start_IT+0x9a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800226e:	d004      	beq.n	800227a <HAL_ADC_Start_IT+0x9a>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a79      	ldr	r2, [pc, #484]	; (800245c <HAL_ADC_Start_IT+0x27c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d115      	bne.n	80022a6 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d036      	beq.n	8002302 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800229c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80022a4:	e02d      	b.n	8002302 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022ba:	d004      	beq.n	80022c6 <HAL_ADC_Start_IT+0xe6>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a63      	ldr	r2, [pc, #396]	; (8002450 <HAL_ADC_Start_IT+0x270>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d10a      	bne.n	80022dc <HAL_ADC_Start_IT+0xfc>
 80022c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bf14      	ite	ne
 80022d4:	2301      	movne	r3, #1
 80022d6:	2300      	moveq	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	e008      	b.n	80022ee <HAL_ADC_Start_IT+0x10e>
 80022dc:	4b5f      	ldr	r3, [pc, #380]	; (800245c <HAL_ADC_Start_IT+0x27c>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bf14      	ite	ne
 80022e8:	2301      	movne	r3, #1
 80022ea:	2300      	moveq	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d007      	beq.n	8002302 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800230a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800230e:	d106      	bne.n	800231e <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	f023 0206 	bic.w	r2, r3, #6
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	645a      	str	r2, [r3, #68]	; 0x44
 800231c:	e002      	b.n	8002324 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	221c      	movs	r2, #28
 8002332:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	2b08      	cmp	r3, #8
 800233a:	d110      	bne.n	800235e <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0204 	bic.w	r2, r2, #4
 800234a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0208 	orr.w	r2, r2, #8
 800235a:	605a      	str	r2, [r3, #4]
          break;
 800235c:	e008      	b.n	8002370 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f042 020c 	orr.w	r2, r2, #12
 800236c:	605a      	str	r2, [r3, #4]
          break;
 800236e:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002374:	2b01      	cmp	r3, #1
 8002376:	d107      	bne.n	8002388 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0210 	bic.w	r2, r2, #16
 8002386:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002390:	d004      	beq.n	800239c <HAL_ADC_Start_IT+0x1bc>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a2e      	ldr	r2, [pc, #184]	; (8002450 <HAL_ADC_Start_IT+0x270>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d106      	bne.n	80023aa <HAL_ADC_Start_IT+0x1ca>
 800239c:	4b2d      	ldr	r3, [pc, #180]	; (8002454 <HAL_ADC_Start_IT+0x274>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d03e      	beq.n	8002426 <HAL_ADC_Start_IT+0x246>
 80023a8:	e005      	b.n	80023b6 <HAL_ADC_Start_IT+0x1d6>
 80023aa:	4b2b      	ldr	r3, [pc, #172]	; (8002458 <HAL_ADC_Start_IT+0x278>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 031f 	and.w	r3, r3, #31
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d037      	beq.n	8002426 <HAL_ADC_Start_IT+0x246>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023be:	d004      	beq.n	80023ca <HAL_ADC_Start_IT+0x1ea>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a22      	ldr	r2, [pc, #136]	; (8002450 <HAL_ADC_Start_IT+0x270>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d106      	bne.n	80023d8 <HAL_ADC_Start_IT+0x1f8>
 80023ca:	4b22      	ldr	r3, [pc, #136]	; (8002454 <HAL_ADC_Start_IT+0x274>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 031f 	and.w	r3, r3, #31
 80023d2:	2b05      	cmp	r3, #5
 80023d4:	d027      	beq.n	8002426 <HAL_ADC_Start_IT+0x246>
 80023d6:	e005      	b.n	80023e4 <HAL_ADC_Start_IT+0x204>
 80023d8:	4b1f      	ldr	r3, [pc, #124]	; (8002458 <HAL_ADC_Start_IT+0x278>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	2b05      	cmp	r3, #5
 80023e2:	d020      	beq.n	8002426 <HAL_ADC_Start_IT+0x246>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023ec:	d004      	beq.n	80023f8 <HAL_ADC_Start_IT+0x218>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a17      	ldr	r2, [pc, #92]	; (8002450 <HAL_ADC_Start_IT+0x270>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d106      	bne.n	8002406 <HAL_ADC_Start_IT+0x226>
 80023f8:	4b16      	ldr	r3, [pc, #88]	; (8002454 <HAL_ADC_Start_IT+0x274>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 031f 	and.w	r3, r3, #31
 8002400:	2b09      	cmp	r3, #9
 8002402:	d010      	beq.n	8002426 <HAL_ADC_Start_IT+0x246>
 8002404:	e005      	b.n	8002412 <HAL_ADC_Start_IT+0x232>
 8002406:	4b14      	ldr	r3, [pc, #80]	; (8002458 <HAL_ADC_Start_IT+0x278>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	2b09      	cmp	r3, #9
 8002410:	d009      	beq.n	8002426 <HAL_ADC_Start_IT+0x246>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800241a:	d004      	beq.n	8002426 <HAL_ADC_Start_IT+0x246>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a0e      	ldr	r2, [pc, #56]	; (800245c <HAL_ADC_Start_IT+0x27c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d10f      	bne.n	8002446 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f042 0204 	orr.w	r2, r2, #4
 8002434:	609a      	str	r2, [r3, #8]
 8002436:	e006      	b.n	8002446 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002440:	e001      	b.n	8002446 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002442:	2302      	movs	r3, #2
 8002444:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002446:	7bfb      	ldrb	r3, [r7, #15]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	50000100 	.word	0x50000100
 8002454:	50000300 	.word	0x50000300
 8002458:	50000700 	.word	0x50000700
 800245c:	50000400 	.word	0x50000400

08002460 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
	...

0800247c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002484:	2300      	movs	r3, #0
 8002486:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002488:	2300      	movs	r3, #0
 800248a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d004      	beq.n	80024b4 <HAL_ADC_IRQHandler+0x38>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10b      	bne.n	80024cc <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 80bc 	beq.w	8002638 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 80b6 	beq.w	8002638 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d105      	bne.n	80024e4 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024ec:	d004      	beq.n	80024f8 <HAL_ADC_IRQHandler+0x7c>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a90      	ldr	r2, [pc, #576]	; (8002734 <HAL_ADC_IRQHandler+0x2b8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d106      	bne.n	8002506 <HAL_ADC_IRQHandler+0x8a>
 80024f8:	4b8f      	ldr	r3, [pc, #572]	; (8002738 <HAL_ADC_IRQHandler+0x2bc>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 031f 	and.w	r3, r3, #31
 8002500:	2b00      	cmp	r3, #0
 8002502:	d03e      	beq.n	8002582 <HAL_ADC_IRQHandler+0x106>
 8002504:	e005      	b.n	8002512 <HAL_ADC_IRQHandler+0x96>
 8002506:	4b8d      	ldr	r3, [pc, #564]	; (800273c <HAL_ADC_IRQHandler+0x2c0>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 031f 	and.w	r3, r3, #31
 800250e:	2b00      	cmp	r3, #0
 8002510:	d037      	beq.n	8002582 <HAL_ADC_IRQHandler+0x106>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800251a:	d004      	beq.n	8002526 <HAL_ADC_IRQHandler+0xaa>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a84      	ldr	r2, [pc, #528]	; (8002734 <HAL_ADC_IRQHandler+0x2b8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d106      	bne.n	8002534 <HAL_ADC_IRQHandler+0xb8>
 8002526:	4b84      	ldr	r3, [pc, #528]	; (8002738 <HAL_ADC_IRQHandler+0x2bc>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 031f 	and.w	r3, r3, #31
 800252e:	2b05      	cmp	r3, #5
 8002530:	d027      	beq.n	8002582 <HAL_ADC_IRQHandler+0x106>
 8002532:	e005      	b.n	8002540 <HAL_ADC_IRQHandler+0xc4>
 8002534:	4b81      	ldr	r3, [pc, #516]	; (800273c <HAL_ADC_IRQHandler+0x2c0>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 031f 	and.w	r3, r3, #31
 800253c:	2b05      	cmp	r3, #5
 800253e:	d020      	beq.n	8002582 <HAL_ADC_IRQHandler+0x106>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002548:	d004      	beq.n	8002554 <HAL_ADC_IRQHandler+0xd8>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a79      	ldr	r2, [pc, #484]	; (8002734 <HAL_ADC_IRQHandler+0x2b8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d106      	bne.n	8002562 <HAL_ADC_IRQHandler+0xe6>
 8002554:	4b78      	ldr	r3, [pc, #480]	; (8002738 <HAL_ADC_IRQHandler+0x2bc>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 031f 	and.w	r3, r3, #31
 800255c:	2b09      	cmp	r3, #9
 800255e:	d010      	beq.n	8002582 <HAL_ADC_IRQHandler+0x106>
 8002560:	e005      	b.n	800256e <HAL_ADC_IRQHandler+0xf2>
 8002562:	4b76      	ldr	r3, [pc, #472]	; (800273c <HAL_ADC_IRQHandler+0x2c0>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 031f 	and.w	r3, r3, #31
 800256a:	2b09      	cmp	r3, #9
 800256c:	d009      	beq.n	8002582 <HAL_ADC_IRQHandler+0x106>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002576:	d004      	beq.n	8002582 <HAL_ADC_IRQHandler+0x106>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a70      	ldr	r2, [pc, #448]	; (8002740 <HAL_ADC_IRQHandler+0x2c4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d104      	bne.n	800258c <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	e00f      	b.n	80025ac <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002594:	d004      	beq.n	80025a0 <HAL_ADC_IRQHandler+0x124>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a66      	ldr	r2, [pc, #408]	; (8002734 <HAL_ADC_IRQHandler+0x2b8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d102      	bne.n	80025a6 <HAL_ADC_IRQHandler+0x12a>
 80025a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025a4:	e000      	b.n	80025a8 <HAL_ADC_IRQHandler+0x12c>
 80025a6:	4b66      	ldr	r3, [pc, #408]	; (8002740 <HAL_ADC_IRQHandler+0x2c4>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d137      	bne.n	800262a <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d132      	bne.n	800262a <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d02d      	beq.n	800262a <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d11a      	bne.n	8002612 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 020c 	bic.w	r2, r2, #12
 80025ea:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d112      	bne.n	800262a <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	f043 0201 	orr.w	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	641a      	str	r2, [r3, #64]	; 0x40
 8002610:	e00b      	b.n	800262a <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f043 0210 	orr.w	r2, r3, #16
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	f043 0201 	orr.w	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7fe f8ac 	bl	8000788 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	220c      	movs	r2, #12
 8002636:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	f003 0320 	and.w	r3, r3, #32
 800263e:	2b00      	cmp	r3, #0
 8002640:	d004      	beq.n	800264c <HAL_ADC_IRQHandler+0x1d0>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f003 0320 	and.w	r3, r3, #32
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10b      	bne.n	8002664 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8138 	beq.w	80028c8 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 8132 	beq.w	80028c8 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002678:	d004      	beq.n	8002684 <HAL_ADC_IRQHandler+0x208>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a2d      	ldr	r2, [pc, #180]	; (8002734 <HAL_ADC_IRQHandler+0x2b8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d106      	bne.n	8002692 <HAL_ADC_IRQHandler+0x216>
 8002684:	4b2c      	ldr	r3, [pc, #176]	; (8002738 <HAL_ADC_IRQHandler+0x2bc>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	2b00      	cmp	r3, #0
 800268e:	d03e      	beq.n	800270e <HAL_ADC_IRQHandler+0x292>
 8002690:	e005      	b.n	800269e <HAL_ADC_IRQHandler+0x222>
 8002692:	4b2a      	ldr	r3, [pc, #168]	; (800273c <HAL_ADC_IRQHandler+0x2c0>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 031f 	and.w	r3, r3, #31
 800269a:	2b00      	cmp	r3, #0
 800269c:	d037      	beq.n	800270e <HAL_ADC_IRQHandler+0x292>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026a6:	d004      	beq.n	80026b2 <HAL_ADC_IRQHandler+0x236>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a21      	ldr	r2, [pc, #132]	; (8002734 <HAL_ADC_IRQHandler+0x2b8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d106      	bne.n	80026c0 <HAL_ADC_IRQHandler+0x244>
 80026b2:	4b21      	ldr	r3, [pc, #132]	; (8002738 <HAL_ADC_IRQHandler+0x2bc>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	2b05      	cmp	r3, #5
 80026bc:	d027      	beq.n	800270e <HAL_ADC_IRQHandler+0x292>
 80026be:	e005      	b.n	80026cc <HAL_ADC_IRQHandler+0x250>
 80026c0:	4b1e      	ldr	r3, [pc, #120]	; (800273c <HAL_ADC_IRQHandler+0x2c0>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	2b05      	cmp	r3, #5
 80026ca:	d020      	beq.n	800270e <HAL_ADC_IRQHandler+0x292>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026d4:	d004      	beq.n	80026e0 <HAL_ADC_IRQHandler+0x264>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a16      	ldr	r2, [pc, #88]	; (8002734 <HAL_ADC_IRQHandler+0x2b8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d106      	bne.n	80026ee <HAL_ADC_IRQHandler+0x272>
 80026e0:	4b15      	ldr	r3, [pc, #84]	; (8002738 <HAL_ADC_IRQHandler+0x2bc>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	2b09      	cmp	r3, #9
 80026ea:	d010      	beq.n	800270e <HAL_ADC_IRQHandler+0x292>
 80026ec:	e005      	b.n	80026fa <HAL_ADC_IRQHandler+0x27e>
 80026ee:	4b13      	ldr	r3, [pc, #76]	; (800273c <HAL_ADC_IRQHandler+0x2c0>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 031f 	and.w	r3, r3, #31
 80026f6:	2b09      	cmp	r3, #9
 80026f8:	d009      	beq.n	800270e <HAL_ADC_IRQHandler+0x292>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002702:	d004      	beq.n	800270e <HAL_ADC_IRQHandler+0x292>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a0d      	ldr	r2, [pc, #52]	; (8002740 <HAL_ADC_IRQHandler+0x2c4>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d104      	bne.n	8002718 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	e018      	b.n	800274a <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002720:	d004      	beq.n	800272c <HAL_ADC_IRQHandler+0x2b0>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a03      	ldr	r2, [pc, #12]	; (8002734 <HAL_ADC_IRQHandler+0x2b8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d10b      	bne.n	8002744 <HAL_ADC_IRQHandler+0x2c8>
 800272c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002730:	e009      	b.n	8002746 <HAL_ADC_IRQHandler+0x2ca>
 8002732:	bf00      	nop
 8002734:	50000100 	.word	0x50000100
 8002738:	50000300 	.word	0x50000300
 800273c:	50000700 	.word	0x50000700
 8002740:	50000400 	.word	0x50000400
 8002744:	4b92      	ldr	r3, [pc, #584]	; (8002990 <HAL_ADC_IRQHandler+0x514>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002750:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002754:	2b00      	cmp	r3, #0
 8002756:	f040 80b0 	bne.w	80028ba <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00d      	beq.n	8002780 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800276e:	2b00      	cmp	r3, #0
 8002770:	f040 80a3 	bne.w	80028ba <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800277a:	2b00      	cmp	r3, #0
 800277c:	f040 809d 	bne.w	80028ba <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 8097 	beq.w	80028ba <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002794:	d004      	beq.n	80027a0 <HAL_ADC_IRQHandler+0x324>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a7e      	ldr	r2, [pc, #504]	; (8002994 <HAL_ADC_IRQHandler+0x518>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d106      	bne.n	80027ae <HAL_ADC_IRQHandler+0x332>
 80027a0:	4b7d      	ldr	r3, [pc, #500]	; (8002998 <HAL_ADC_IRQHandler+0x51c>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 031f 	and.w	r3, r3, #31
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d03e      	beq.n	800282a <HAL_ADC_IRQHandler+0x3ae>
 80027ac:	e005      	b.n	80027ba <HAL_ADC_IRQHandler+0x33e>
 80027ae:	4b7b      	ldr	r3, [pc, #492]	; (800299c <HAL_ADC_IRQHandler+0x520>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 031f 	and.w	r3, r3, #31
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d037      	beq.n	800282a <HAL_ADC_IRQHandler+0x3ae>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027c2:	d004      	beq.n	80027ce <HAL_ADC_IRQHandler+0x352>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a72      	ldr	r2, [pc, #456]	; (8002994 <HAL_ADC_IRQHandler+0x518>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d106      	bne.n	80027dc <HAL_ADC_IRQHandler+0x360>
 80027ce:	4b72      	ldr	r3, [pc, #456]	; (8002998 <HAL_ADC_IRQHandler+0x51c>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	2b06      	cmp	r3, #6
 80027d8:	d027      	beq.n	800282a <HAL_ADC_IRQHandler+0x3ae>
 80027da:	e005      	b.n	80027e8 <HAL_ADC_IRQHandler+0x36c>
 80027dc:	4b6f      	ldr	r3, [pc, #444]	; (800299c <HAL_ADC_IRQHandler+0x520>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	2b06      	cmp	r3, #6
 80027e6:	d020      	beq.n	800282a <HAL_ADC_IRQHandler+0x3ae>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027f0:	d004      	beq.n	80027fc <HAL_ADC_IRQHandler+0x380>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a67      	ldr	r2, [pc, #412]	; (8002994 <HAL_ADC_IRQHandler+0x518>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d106      	bne.n	800280a <HAL_ADC_IRQHandler+0x38e>
 80027fc:	4b66      	ldr	r3, [pc, #408]	; (8002998 <HAL_ADC_IRQHandler+0x51c>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	2b07      	cmp	r3, #7
 8002806:	d010      	beq.n	800282a <HAL_ADC_IRQHandler+0x3ae>
 8002808:	e005      	b.n	8002816 <HAL_ADC_IRQHandler+0x39a>
 800280a:	4b64      	ldr	r3, [pc, #400]	; (800299c <HAL_ADC_IRQHandler+0x520>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	2b07      	cmp	r3, #7
 8002814:	d009      	beq.n	800282a <HAL_ADC_IRQHandler+0x3ae>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800281e:	d004      	beq.n	800282a <HAL_ADC_IRQHandler+0x3ae>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a5a      	ldr	r2, [pc, #360]	; (8002990 <HAL_ADC_IRQHandler+0x514>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d104      	bne.n	8002834 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	e00f      	b.n	8002854 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800283c:	d004      	beq.n	8002848 <HAL_ADC_IRQHandler+0x3cc>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a54      	ldr	r2, [pc, #336]	; (8002994 <HAL_ADC_IRQHandler+0x518>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d102      	bne.n	800284e <HAL_ADC_IRQHandler+0x3d2>
 8002848:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800284c:	e000      	b.n	8002850 <HAL_ADC_IRQHandler+0x3d4>
 800284e:	4b50      	ldr	r3, [pc, #320]	; (8002990 <HAL_ADC_IRQHandler+0x514>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d12d      	bne.n	80028ba <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d11a      	bne.n	80028a2 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800287a:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002890:	2b00      	cmp	r3, #0
 8002892:	d112      	bne.n	80028ba <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	f043 0201 	orr.w	r2, r3, #1
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	641a      	str	r2, [r3, #64]	; 0x40
 80028a0:	e00b      	b.n	80028ba <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f043 0210 	orr.w	r2, r3, #16
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	f043 0201 	orr.w	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f8c4 	bl	8002a48 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2260      	movs	r2, #96	; 0x60
 80028c6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d011      	beq.n	80028f6 <HAL_ADC_IRQHandler+0x47a>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00c      	beq.n	80028f6 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff fa85 	bl	8001df8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2280      	movs	r2, #128	; 0x80
 80028f4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d012      	beq.n	8002926 <HAL_ADC_IRQHandler+0x4aa>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00d      	beq.n	8002926 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f8aa 	bl	8002a70 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002924:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800292c:	2b00      	cmp	r3, #0
 800292e:	d012      	beq.n	8002956 <HAL_ADC_IRQHandler+0x4da>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00d      	beq.n	8002956 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f89c 	bl	8002a84 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002954:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b00      	cmp	r3, #0
 800295e:	d04f      	beq.n	8002a00 <HAL_ADC_IRQHandler+0x584>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	2b00      	cmp	r3, #0
 8002968:	d04a      	beq.n	8002a00 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296e:	2b01      	cmp	r3, #1
 8002970:	d102      	bne.n	8002978 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8002972:	2301      	movs	r3, #1
 8002974:	61fb      	str	r3, [r7, #28]
 8002976:	e02d      	b.n	80029d4 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002980:	d004      	beq.n	800298c <HAL_ADC_IRQHandler+0x510>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a03      	ldr	r2, [pc, #12]	; (8002994 <HAL_ADC_IRQHandler+0x518>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d109      	bne.n	80029a0 <HAL_ADC_IRQHandler+0x524>
 800298c:	4b02      	ldr	r3, [pc, #8]	; (8002998 <HAL_ADC_IRQHandler+0x51c>)
 800298e:	e008      	b.n	80029a2 <HAL_ADC_IRQHandler+0x526>
 8002990:	50000400 	.word	0x50000400
 8002994:	50000100 	.word	0x50000100
 8002998:	50000300 	.word	0x50000300
 800299c:	50000700 	.word	0x50000700
 80029a0:	4b28      	ldr	r3, [pc, #160]	; (8002a44 <HAL_ADC_IRQHandler+0x5c8>)
 80029a2:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d109      	bne.n	80029c4 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d10a      	bne.n	80029d4 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80029be:	2301      	movs	r3, #1
 80029c0:	61fb      	str	r3, [r7, #28]
 80029c2:	e007      	b.n	80029d4 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80029d0:	2301      	movs	r3, #1
 80029d2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d10e      	bne.n	80029f8 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	f043 0202 	orr.w	r2, r3, #2
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff fa0a 	bl	8001e0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2210      	movs	r2, #16
 80029fe:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d018      	beq.n	8002a3c <HAL_ADC_IRQHandler+0x5c0>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d013      	beq.n	8002a3c <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a24:	f043 0208 	orr.w	r2, r3, #8
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a34:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f810 	bl	8002a5c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002a3c:	bf00      	nop
 8002a3e:	3720      	adds	r7, #32
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	50000700 	.word	0x50000700

08002a48 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b09b      	sub	sp, #108	; 0x6c
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d101      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x22>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e2ca      	b.n	8003050 <HAL_ADC_ConfigChannel+0x5b8>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f040 82ae 	bne.w	800302e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d81c      	bhi.n	8002b14 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4413      	add	r3, r2
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	461a      	mov	r2, r3
 8002aee:	231f      	movs	r3, #31
 8002af0:	4093      	lsls	r3, r2
 8002af2:	43db      	mvns	r3, r3
 8002af4:	4019      	ands	r1, r3
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	4413      	add	r3, r2
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	fa00 f203 	lsl.w	r2, r0, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	631a      	str	r2, [r3, #48]	; 0x30
 8002b12:	e063      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b09      	cmp	r3, #9
 8002b1a:	d81e      	bhi.n	8002b5a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	4413      	add	r3, r2
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	3b1e      	subs	r3, #30
 8002b30:	221f      	movs	r2, #31
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	4019      	ands	r1, r3
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	4413      	add	r3, r2
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	3b1e      	subs	r3, #30
 8002b4c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	635a      	str	r2, [r3, #52]	; 0x34
 8002b58:	e040      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b0e      	cmp	r3, #14
 8002b60:	d81e      	bhi.n	8002ba0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	4413      	add	r3, r2
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	3b3c      	subs	r3, #60	; 0x3c
 8002b76:	221f      	movs	r2, #31
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	4019      	ands	r1, r3
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	4413      	add	r3, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	3b3c      	subs	r3, #60	; 0x3c
 8002b92:	fa00 f203 	lsl.w	r2, r0, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	639a      	str	r2, [r3, #56]	; 0x38
 8002b9e:	e01d      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	4413      	add	r3, r2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	3b5a      	subs	r3, #90	; 0x5a
 8002bb4:	221f      	movs	r2, #31
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	4019      	ands	r1, r3
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	4413      	add	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	3b5a      	subs	r3, #90	; 0x5a
 8002bd0:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f040 80e5 	bne.w	8002db6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b09      	cmp	r3, #9
 8002bf2:	d91c      	bls.n	8002c2e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6999      	ldr	r1, [r3, #24]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	4413      	add	r3, r2
 8002c04:	3b1e      	subs	r3, #30
 8002c06:	2207      	movs	r2, #7
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	4019      	ands	r1, r3
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	6898      	ldr	r0, [r3, #8]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3b1e      	subs	r3, #30
 8002c20:	fa00 f203 	lsl.w	r2, r0, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	619a      	str	r2, [r3, #24]
 8002c2c:	e019      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6959      	ldr	r1, [r3, #20]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	4413      	add	r3, r2
 8002c3e:	2207      	movs	r2, #7
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	4019      	ands	r1, r3
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	6898      	ldr	r0, [r3, #8]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	4613      	mov	r3, r2
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	4413      	add	r3, r2
 8002c56:	fa00 f203 	lsl.w	r2, r0, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	695a      	ldr	r2, [r3, #20]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	08db      	lsrs	r3, r3, #3
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	d84f      	bhi.n	8002d24 <HAL_ADC_ConfigChannel+0x28c>
 8002c84:	a201      	add	r2, pc, #4	; (adr r2, 8002c8c <HAL_ADC_ConfigChannel+0x1f4>)
 8002c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8a:	bf00      	nop
 8002c8c:	08002c9d 	.word	0x08002c9d
 8002c90:	08002cbf 	.word	0x08002cbf
 8002c94:	08002ce1 	.word	0x08002ce1
 8002c98:	08002d03 	.word	0x08002d03
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ca2:	4b9a      	ldr	r3, [pc, #616]	; (8002f0c <HAL_ADC_ConfigChannel+0x474>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	0691      	lsls	r1, r2, #26
 8002cac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002cba:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002cbc:	e07e      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002cc4:	4b91      	ldr	r3, [pc, #580]	; (8002f0c <HAL_ADC_ConfigChannel+0x474>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	6812      	ldr	r2, [r2, #0]
 8002ccc:	0691      	lsls	r1, r2, #26
 8002cce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002cdc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002cde:	e06d      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ce6:	4b89      	ldr	r3, [pc, #548]	; (8002f0c <HAL_ADC_ConfigChannel+0x474>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	0691      	lsls	r1, r2, #26
 8002cf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002cfe:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d00:	e05c      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d08:	4b80      	ldr	r3, [pc, #512]	; (8002f0c <HAL_ADC_ConfigChannel+0x474>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	0691      	lsls	r1, r2, #26
 8002d12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d14:	430a      	orrs	r2, r1
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d20:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d22:	e04b      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	069b      	lsls	r3, r3, #26
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d107      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d46:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	069b      	lsls	r3, r3, #26
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d107      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d6a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	069b      	lsls	r3, r3, #26
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d107      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d8e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	069b      	lsls	r3, r3, #26
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d10a      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002db2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002db4:	e001      	b.n	8002dba <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002db6:	bf00      	nop
 8002db8:	e000      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x324>
      break;
 8002dba:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d108      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x344>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x344>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <HAL_ADC_ConfigChannel+0x346>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f040 8130 	bne.w	8003044 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d00f      	beq.n	8002e0c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43da      	mvns	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	400a      	ands	r2, r1
 8002e06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002e0a:	e049      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	409a      	lsls	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b09      	cmp	r3, #9
 8002e2c:	d91c      	bls.n	8002e68 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6999      	ldr	r1, [r3, #24]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3b1b      	subs	r3, #27
 8002e40:	2207      	movs	r2, #7
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43db      	mvns	r3, r3
 8002e48:	4019      	ands	r1, r3
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	6898      	ldr	r0, [r3, #8]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	4613      	mov	r3, r2
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	4413      	add	r3, r2
 8002e58:	3b1b      	subs	r3, #27
 8002e5a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	619a      	str	r2, [r3, #24]
 8002e66:	e01b      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6959      	ldr	r1, [r3, #20]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	4613      	mov	r3, r2
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	4413      	add	r3, r2
 8002e7a:	2207      	movs	r2, #7
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	4019      	ands	r1, r3
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	6898      	ldr	r0, [r3, #8]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	4613      	mov	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4413      	add	r3, r2
 8002e94:	fa00 f203 	lsl.w	r2, r0, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ea8:	d004      	beq.n	8002eb4 <HAL_ADC_ConfigChannel+0x41c>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a18      	ldr	r2, [pc, #96]	; (8002f10 <HAL_ADC_ConfigChannel+0x478>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d101      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x420>
 8002eb4:	4b17      	ldr	r3, [pc, #92]	; (8002f14 <HAL_ADC_ConfigChannel+0x47c>)
 8002eb6:	e000      	b.n	8002eba <HAL_ADC_ConfigChannel+0x422>
 8002eb8:	4b17      	ldr	r3, [pc, #92]	; (8002f18 <HAL_ADC_ConfigChannel+0x480>)
 8002eba:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b10      	cmp	r3, #16
 8002ec2:	d105      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d015      	beq.n	8002efc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002ed4:	2b11      	cmp	r3, #17
 8002ed6:	d105      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002ed8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00b      	beq.n	8002efc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002ee8:	2b12      	cmp	r3, #18
 8002eea:	f040 80ab 	bne.w	8003044 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f040 80a4 	bne.w	8003044 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f04:	d10a      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x484>
 8002f06:	4b02      	ldr	r3, [pc, #8]	; (8002f10 <HAL_ADC_ConfigChannel+0x478>)
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	e022      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x4ba>
 8002f0c:	83fff000 	.word	0x83fff000
 8002f10:	50000100 	.word	0x50000100
 8002f14:	50000300 	.word	0x50000300
 8002f18:	50000700 	.word	0x50000700
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a4e      	ldr	r2, [pc, #312]	; (800305c <HAL_ADC_ConfigChannel+0x5c4>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d103      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x496>
 8002f26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	e011      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x4ba>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a4b      	ldr	r2, [pc, #300]	; (8003060 <HAL_ADC_ConfigChannel+0x5c8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d102      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x4a6>
 8002f38:	4b4a      	ldr	r3, [pc, #296]	; (8003064 <HAL_ADC_ConfigChannel+0x5cc>)
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	e009      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x4ba>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a48      	ldr	r2, [pc, #288]	; (8003064 <HAL_ADC_ConfigChannel+0x5cc>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d102      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x4b6>
 8002f48:	4b45      	ldr	r3, [pc, #276]	; (8003060 <HAL_ADC_ConfigChannel+0x5c8>)
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	e001      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x4ba>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d108      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x4da>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x4da>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x4dc>
 8002f72:	2300      	movs	r3, #0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d150      	bne.n	800301a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f78:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d010      	beq.n	8002fa0 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d107      	bne.n	8002f9a <HAL_ADC_ConfigChannel+0x502>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_ADC_ConfigChannel+0x502>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x504>
 8002f9a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d13c      	bne.n	800301a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b10      	cmp	r3, #16
 8002fa6:	d11d      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x54c>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fb0:	d118      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002fb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fbc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fbe:	4b2a      	ldr	r3, [pc, #168]	; (8003068 <HAL_ADC_ConfigChannel+0x5d0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a2a      	ldr	r2, [pc, #168]	; (800306c <HAL_ADC_ConfigChannel+0x5d4>)
 8002fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc8:	0c9a      	lsrs	r2, r3, #18
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002fd4:	e002      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f9      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002fe2:	e02e      	b.n	8003042 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b11      	cmp	r3, #17
 8002fea:	d10b      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x56c>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ff4:	d106      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002ffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003000:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003002:	e01e      	b.n	8003042 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b12      	cmp	r3, #18
 800300a:	d11a      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800300c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003016:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003018:	e013      	b.n	8003042 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f043 0220 	orr.w	r2, r3, #32
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800302c:	e00a      	b.n	8003044 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f043 0220 	orr.w	r2, r3, #32
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003040:	e000      	b.n	8003044 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003042:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800304c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003050:	4618      	mov	r0, r3
 8003052:	376c      	adds	r7, #108	; 0x6c
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	50000100 	.word	0x50000100
 8003060:	50000400 	.word	0x50000400
 8003064:	50000500 	.word	0x50000500
 8003068:	20000090 	.word	0x20000090
 800306c:	431bde83 	.word	0x431bde83

08003070 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003070:	b480      	push	{r7}
 8003072:	b099      	sub	sp, #100	; 0x64
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003088:	d102      	bne.n	8003090 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800308a:	4b6d      	ldr	r3, [pc, #436]	; (8003240 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	e01a      	b.n	80030c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a6a      	ldr	r2, [pc, #424]	; (8003240 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d103      	bne.n	80030a2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800309a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	e011      	b.n	80030c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a67      	ldr	r2, [pc, #412]	; (8003244 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d102      	bne.n	80030b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80030ac:	4b66      	ldr	r3, [pc, #408]	; (8003248 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80030ae:	60bb      	str	r3, [r7, #8]
 80030b0:	e009      	b.n	80030c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a64      	ldr	r2, [pc, #400]	; (8003248 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d102      	bne.n	80030c2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80030bc:	4b61      	ldr	r3, [pc, #388]	; (8003244 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	e001      	b.n	80030c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80030c2:	2300      	movs	r3, #0
 80030c4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0b0      	b.n	8003232 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80030da:	2302      	movs	r3, #2
 80030dc:	e0a9      	b.n	8003232 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f040 808d 	bne.w	8003210 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f040 8086 	bne.w	8003210 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800310c:	d004      	beq.n	8003118 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a4b      	ldr	r2, [pc, #300]	; (8003240 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d101      	bne.n	800311c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003118:	4b4c      	ldr	r3, [pc, #304]	; (800324c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800311a:	e000      	b.n	800311e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800311c:	4b4c      	ldr	r3, [pc, #304]	; (8003250 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800311e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d040      	beq.n	80031aa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003128:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	6859      	ldr	r1, [r3, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800313a:	035b      	lsls	r3, r3, #13
 800313c:	430b      	orrs	r3, r1
 800313e:	431a      	orrs	r2, r3
 8003140:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003142:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	2b01      	cmp	r3, #1
 8003150:	d108      	bne.n	8003164 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003164:	2300      	movs	r3, #0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d15c      	bne.n	8003224 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	2b01      	cmp	r3, #1
 8003174:	d107      	bne.n	8003186 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003186:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003188:	2b00      	cmp	r3, #0
 800318a:	d14b      	bne.n	8003224 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800318c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003194:	f023 030f 	bic.w	r3, r3, #15
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	6811      	ldr	r1, [r2, #0]
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	6892      	ldr	r2, [r2, #8]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	431a      	orrs	r2, r3
 80031a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031a6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80031a8:	e03c      	b.n	8003224 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80031aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031b4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d108      	bne.n	80031d6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80031d6:	2300      	movs	r3, #0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d123      	bne.n	8003224 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d107      	bne.n	80031f8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80031f8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d112      	bne.n	8003224 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80031fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003206:	f023 030f 	bic.w	r3, r3, #15
 800320a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800320c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800320e:	e009      	b.n	8003224 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	f043 0220 	orr.w	r2, r3, #32
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003222:	e000      	b.n	8003226 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003224:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800322e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003232:	4618      	mov	r0, r3
 8003234:	3764      	adds	r7, #100	; 0x64
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	50000100 	.word	0x50000100
 8003244:	50000400 	.word	0x50000400
 8003248:	50000500 	.word	0x50000500
 800324c:	50000300 	.word	0x50000300
 8003250:	50000700 	.word	0x50000700

08003254 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	2b01      	cmp	r3, #1
 800326c:	d108      	bne.n	8003280 <ADC_Enable+0x2c>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <ADC_Enable+0x2c>
 800327c:	2301      	movs	r3, #1
 800327e:	e000      	b.n	8003282 <ADC_Enable+0x2e>
 8003280:	2300      	movs	r3, #0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d143      	bne.n	800330e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	4b22      	ldr	r3, [pc, #136]	; (8003318 <ADC_Enable+0xc4>)
 800328e:	4013      	ands	r3, r2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00d      	beq.n	80032b0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	f043 0210 	orr.w	r2, r3, #16
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a4:	f043 0201 	orr.w	r2, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e02f      	b.n	8003310 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80032c0:	f7fe fd8e 	bl	8001de0 <HAL_GetTick>
 80032c4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80032c6:	e01b      	b.n	8003300 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032c8:	f7fe fd8a 	bl	8001de0 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d914      	bls.n	8003300 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d00d      	beq.n	8003300 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	f043 0210 	orr.w	r2, r3, #16
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f4:	f043 0201 	orr.w	r2, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e007      	b.n	8003310 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b01      	cmp	r3, #1
 800330c:	d1dc      	bne.n	80032c8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	8000003f 	.word	0x8000003f

0800331c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	2b01      	cmp	r3, #1
 8003334:	d108      	bne.n	8003348 <ADC_Disable+0x2c>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <ADC_Disable+0x2c>
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <ADC_Disable+0x2e>
 8003348:	2300      	movs	r3, #0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d047      	beq.n	80033de <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 030d 	and.w	r3, r3, #13
 8003358:	2b01      	cmp	r3, #1
 800335a:	d10f      	bne.n	800337c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0202 	orr.w	r2, r2, #2
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2203      	movs	r2, #3
 8003372:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003374:	f7fe fd34 	bl	8001de0 <HAL_GetTick>
 8003378:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800337a:	e029      	b.n	80033d0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	f043 0210 	orr.w	r2, r3, #16
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338c:	f043 0201 	orr.w	r2, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e023      	b.n	80033e0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003398:	f7fe fd22 	bl	8001de0 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d914      	bls.n	80033d0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d10d      	bne.n	80033d0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	f043 0210 	orr.w	r2, r3, #16
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c4:	f043 0201 	orr.w	r2, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e007      	b.n	80033e0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d0dc      	beq.n	8003398 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033f8:	4b0c      	ldr	r3, [pc, #48]	; (800342c <__NVIC_SetPriorityGrouping+0x44>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003404:	4013      	ands	r3, r2
 8003406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003410:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800341a:	4a04      	ldr	r2, [pc, #16]	; (800342c <__NVIC_SetPriorityGrouping+0x44>)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	60d3      	str	r3, [r2, #12]
}
 8003420:	bf00      	nop
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003434:	4b04      	ldr	r3, [pc, #16]	; (8003448 <__NVIC_GetPriorityGrouping+0x18>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	0a1b      	lsrs	r3, r3, #8
 800343a:	f003 0307 	and.w	r3, r3, #7
}
 800343e:	4618      	mov	r0, r3
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	e000ed00 	.word	0xe000ed00

0800344c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345a:	2b00      	cmp	r3, #0
 800345c:	db0b      	blt.n	8003476 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	f003 021f 	and.w	r2, r3, #31
 8003464:	4907      	ldr	r1, [pc, #28]	; (8003484 <__NVIC_EnableIRQ+0x38>)
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	2001      	movs	r0, #1
 800346e:	fa00 f202 	lsl.w	r2, r0, r2
 8003472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	e000e100 	.word	0xe000e100

08003488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	6039      	str	r1, [r7, #0]
 8003492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003498:	2b00      	cmp	r3, #0
 800349a:	db0a      	blt.n	80034b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	490c      	ldr	r1, [pc, #48]	; (80034d4 <__NVIC_SetPriority+0x4c>)
 80034a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a6:	0112      	lsls	r2, r2, #4
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	440b      	add	r3, r1
 80034ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034b0:	e00a      	b.n	80034c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	4908      	ldr	r1, [pc, #32]	; (80034d8 <__NVIC_SetPriority+0x50>)
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	3b04      	subs	r3, #4
 80034c0:	0112      	lsls	r2, r2, #4
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	440b      	add	r3, r1
 80034c6:	761a      	strb	r2, [r3, #24]
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	e000e100 	.word	0xe000e100
 80034d8:	e000ed00 	.word	0xe000ed00

080034dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034dc:	b480      	push	{r7}
 80034de:	b089      	sub	sp, #36	; 0x24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f1c3 0307 	rsb	r3, r3, #7
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	bf28      	it	cs
 80034fa:	2304      	movcs	r3, #4
 80034fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	3304      	adds	r3, #4
 8003502:	2b06      	cmp	r3, #6
 8003504:	d902      	bls.n	800350c <NVIC_EncodePriority+0x30>
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	3b03      	subs	r3, #3
 800350a:	e000      	b.n	800350e <NVIC_EncodePriority+0x32>
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003510:	f04f 32ff 	mov.w	r2, #4294967295
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43da      	mvns	r2, r3
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	401a      	ands	r2, r3
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003524:	f04f 31ff 	mov.w	r1, #4294967295
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	fa01 f303 	lsl.w	r3, r1, r3
 800352e:	43d9      	mvns	r1, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003534:	4313      	orrs	r3, r2
         );
}
 8003536:	4618      	mov	r0, r3
 8003538:	3724      	adds	r7, #36	; 0x24
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
	...

08003544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3b01      	subs	r3, #1
 8003550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003554:	d301      	bcc.n	800355a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003556:	2301      	movs	r3, #1
 8003558:	e00f      	b.n	800357a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800355a:	4a0a      	ldr	r2, [pc, #40]	; (8003584 <SysTick_Config+0x40>)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3b01      	subs	r3, #1
 8003560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003562:	210f      	movs	r1, #15
 8003564:	f04f 30ff 	mov.w	r0, #4294967295
 8003568:	f7ff ff8e 	bl	8003488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800356c:	4b05      	ldr	r3, [pc, #20]	; (8003584 <SysTick_Config+0x40>)
 800356e:	2200      	movs	r2, #0
 8003570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003572:	4b04      	ldr	r3, [pc, #16]	; (8003584 <SysTick_Config+0x40>)
 8003574:	2207      	movs	r2, #7
 8003576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	e000e010 	.word	0xe000e010

08003588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7ff ff29 	bl	80033e8 <__NVIC_SetPriorityGrouping>
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b086      	sub	sp, #24
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	4603      	mov	r3, r0
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	607a      	str	r2, [r7, #4]
 80035aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035b0:	f7ff ff3e 	bl	8003430 <__NVIC_GetPriorityGrouping>
 80035b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	68b9      	ldr	r1, [r7, #8]
 80035ba:	6978      	ldr	r0, [r7, #20]
 80035bc:	f7ff ff8e 	bl	80034dc <NVIC_EncodePriority>
 80035c0:	4602      	mov	r2, r0
 80035c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035c6:	4611      	mov	r1, r2
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff ff5d 	bl	8003488 <__NVIC_SetPriority>
}
 80035ce:	bf00      	nop
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	4603      	mov	r3, r0
 80035de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff ff31 	bl	800344c <__NVIC_EnableIRQ>
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b082      	sub	sp, #8
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff ffa2 	bl	8003544 <SysTick_Config>
 8003600:	4603      	mov	r3, r0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003618:	2b02      	cmp	r3, #2
 800361a:	d008      	beq.n	800362e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2204      	movs	r2, #4
 8003620:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e020      	b.n	8003670 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 020e 	bic.w	r2, r2, #14
 800363c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0201 	bic.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003656:	2101      	movs	r1, #1
 8003658:	fa01 f202 	lsl.w	r2, r1, r2
 800365c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003684:	2300      	movs	r3, #0
 8003686:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800368e:	2b02      	cmp	r3, #2
 8003690:	d005      	beq.n	800369e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2204      	movs	r2, #4
 8003696:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	73fb      	strb	r3, [r7, #15]
 800369c:	e027      	b.n	80036ee <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 020e 	bic.w	r2, r2, #14
 80036ac:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0201 	bic.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c6:	2101      	movs	r1, #1
 80036c8:	fa01 f202 	lsl.w	r2, r1, r2
 80036cc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	4798      	blx	r3
    } 
  }
  return status;
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003706:	e154      	b.n	80039b2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	2101      	movs	r1, #1
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	fa01 f303 	lsl.w	r3, r1, r3
 8003714:	4013      	ands	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 8146 	beq.w	80039ac <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	2b01      	cmp	r3, #1
 800372a:	d005      	beq.n	8003738 <HAL_GPIO_Init+0x40>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d130      	bne.n	800379a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	2203      	movs	r2, #3
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	43db      	mvns	r3, r3
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4013      	ands	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800376e:	2201      	movs	r2, #1
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43db      	mvns	r3, r3
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4013      	ands	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	091b      	lsrs	r3, r3, #4
 8003784:	f003 0201 	and.w	r2, r3, #1
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d017      	beq.n	80037d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	2203      	movs	r2, #3
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	43db      	mvns	r3, r3
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4013      	ands	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d123      	bne.n	800382a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	08da      	lsrs	r2, r3, #3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3208      	adds	r2, #8
 80037ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	220f      	movs	r2, #15
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	43db      	mvns	r3, r3
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4013      	ands	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	691a      	ldr	r2, [r3, #16]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	08da      	lsrs	r2, r3, #3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3208      	adds	r2, #8
 8003824:	6939      	ldr	r1, [r7, #16]
 8003826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	2203      	movs	r2, #3
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43db      	mvns	r3, r3
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4013      	ands	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 0203 	and.w	r2, r3, #3
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 80a0 	beq.w	80039ac <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800386c:	4b58      	ldr	r3, [pc, #352]	; (80039d0 <HAL_GPIO_Init+0x2d8>)
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	4a57      	ldr	r2, [pc, #348]	; (80039d0 <HAL_GPIO_Init+0x2d8>)
 8003872:	f043 0301 	orr.w	r3, r3, #1
 8003876:	6193      	str	r3, [r2, #24]
 8003878:	4b55      	ldr	r3, [pc, #340]	; (80039d0 <HAL_GPIO_Init+0x2d8>)
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	60bb      	str	r3, [r7, #8]
 8003882:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003884:	4a53      	ldr	r2, [pc, #332]	; (80039d4 <HAL_GPIO_Init+0x2dc>)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	089b      	lsrs	r3, r3, #2
 800388a:	3302      	adds	r3, #2
 800388c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003890:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f003 0303 	and.w	r3, r3, #3
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	220f      	movs	r2, #15
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	43db      	mvns	r3, r3
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4013      	ands	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038ae:	d019      	beq.n	80038e4 <HAL_GPIO_Init+0x1ec>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a49      	ldr	r2, [pc, #292]	; (80039d8 <HAL_GPIO_Init+0x2e0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d013      	beq.n	80038e0 <HAL_GPIO_Init+0x1e8>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a48      	ldr	r2, [pc, #288]	; (80039dc <HAL_GPIO_Init+0x2e4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d00d      	beq.n	80038dc <HAL_GPIO_Init+0x1e4>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a47      	ldr	r2, [pc, #284]	; (80039e0 <HAL_GPIO_Init+0x2e8>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d007      	beq.n	80038d8 <HAL_GPIO_Init+0x1e0>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a46      	ldr	r2, [pc, #280]	; (80039e4 <HAL_GPIO_Init+0x2ec>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d101      	bne.n	80038d4 <HAL_GPIO_Init+0x1dc>
 80038d0:	2304      	movs	r3, #4
 80038d2:	e008      	b.n	80038e6 <HAL_GPIO_Init+0x1ee>
 80038d4:	2305      	movs	r3, #5
 80038d6:	e006      	b.n	80038e6 <HAL_GPIO_Init+0x1ee>
 80038d8:	2303      	movs	r3, #3
 80038da:	e004      	b.n	80038e6 <HAL_GPIO_Init+0x1ee>
 80038dc:	2302      	movs	r3, #2
 80038de:	e002      	b.n	80038e6 <HAL_GPIO_Init+0x1ee>
 80038e0:	2301      	movs	r3, #1
 80038e2:	e000      	b.n	80038e6 <HAL_GPIO_Init+0x1ee>
 80038e4:	2300      	movs	r3, #0
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	f002 0203 	and.w	r2, r2, #3
 80038ec:	0092      	lsls	r2, r2, #2
 80038ee:	4093      	lsls	r3, r2
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038f6:	4937      	ldr	r1, [pc, #220]	; (80039d4 <HAL_GPIO_Init+0x2dc>)
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	089b      	lsrs	r3, r3, #2
 80038fc:	3302      	adds	r3, #2
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003904:	4b38      	ldr	r3, [pc, #224]	; (80039e8 <HAL_GPIO_Init+0x2f0>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	43db      	mvns	r3, r3
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4013      	ands	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4313      	orrs	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003928:	4a2f      	ldr	r2, [pc, #188]	; (80039e8 <HAL_GPIO_Init+0x2f0>)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800392e:	4b2e      	ldr	r3, [pc, #184]	; (80039e8 <HAL_GPIO_Init+0x2f0>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	43db      	mvns	r3, r3
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4013      	ands	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003952:	4a25      	ldr	r2, [pc, #148]	; (80039e8 <HAL_GPIO_Init+0x2f0>)
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003958:	4b23      	ldr	r3, [pc, #140]	; (80039e8 <HAL_GPIO_Init+0x2f0>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	43db      	mvns	r3, r3
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4013      	ands	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800397c:	4a1a      	ldr	r2, [pc, #104]	; (80039e8 <HAL_GPIO_Init+0x2f0>)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003982:	4b19      	ldr	r3, [pc, #100]	; (80039e8 <HAL_GPIO_Init+0x2f0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	43db      	mvns	r3, r3
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4013      	ands	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80039a6:	4a10      	ldr	r2, [pc, #64]	; (80039e8 <HAL_GPIO_Init+0x2f0>)
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	3301      	adds	r3, #1
 80039b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	fa22 f303 	lsr.w	r3, r2, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f47f aea3 	bne.w	8003708 <HAL_GPIO_Init+0x10>
  }
}
 80039c2:	bf00      	nop
 80039c4:	bf00      	nop
 80039c6:	371c      	adds	r7, #28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	40021000 	.word	0x40021000
 80039d4:	40010000 	.word	0x40010000
 80039d8:	48000400 	.word	0x48000400
 80039dc:	48000800 	.word	0x48000800
 80039e0:	48000c00 	.word	0x48000c00
 80039e4:	48001000 	.word	0x48001000
 80039e8:	40010400 	.word	0x40010400

080039ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	807b      	strh	r3, [r7, #2]
 80039f8:	4613      	mov	r3, r2
 80039fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039fc:	787b      	ldrb	r3, [r7, #1]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a02:	887a      	ldrh	r2, [r7, #2]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a08:	e002      	b.n	8003a10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a0a:	887a      	ldrh	r2, [r7, #2]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	4603      	mov	r3, r0
 8003a24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a26:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a28:	695a      	ldr	r2, [r3, #20]
 8003a2a:	88fb      	ldrh	r3, [r7, #6]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d006      	beq.n	8003a40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a32:	4a05      	ldr	r2, [pc, #20]	; (8003a48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a38:	88fb      	ldrh	r3, [r7, #6]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fd fba8 	bl	8001190 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40010400 	.word	0x40010400

08003a4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e081      	b.n	8003b62 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fd fdc0 	bl	80015f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2224      	movs	r2, #36	; 0x24
 8003a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0201 	bic.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003aac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d107      	bne.n	8003ac6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ac2:	609a      	str	r2, [r3, #8]
 8003ac4:	e006      	b.n	8003ad4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003ad2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d104      	bne.n	8003ae6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ae4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6812      	ldr	r2, [r2, #0]
 8003af0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003af4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003af8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69d9      	ldr	r1, [r3, #28]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1a      	ldr	r2, [r3, #32]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d138      	bne.n	8003bf2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	e032      	b.n	8003bf4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2224      	movs	r2, #36	; 0x24
 8003b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0201 	bic.w	r2, r2, #1
 8003bac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bbc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6819      	ldr	r1, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f042 0201 	orr.w	r2, r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	e000      	b.n	8003bf4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bf2:	2302      	movs	r3, #2
  }
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b20      	cmp	r3, #32
 8003c14:	d139      	bne.n	8003c8a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e033      	b.n	8003c8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2224      	movs	r2, #36	; 0x24
 8003c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0201 	bic.w	r2, r2, #1
 8003c42:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c52:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	021b      	lsls	r3, r3, #8
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f042 0201 	orr.w	r2, r2, #1
 8003c74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	e000      	b.n	8003c8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c8a:	2302      	movs	r3, #2
  }
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c9a:	b08b      	sub	sp, #44	; 0x2c
 8003c9c:	af06      	add	r7, sp, #24
 8003c9e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e0c4      	b.n	8003e34 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7fd fdda 	bl	8001878 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2203      	movs	r2, #3
 8003cc8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f004 fad1 	bl	8008278 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	73fb      	strb	r3, [r7, #15]
 8003cda:	e040      	b.n	8003d5e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	440b      	add	r3, r1
 8003cec:	3301      	adds	r3, #1
 8003cee:	2201      	movs	r2, #1
 8003cf0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
 8003cf4:	6879      	ldr	r1, [r7, #4]
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	440b      	add	r3, r1
 8003d02:	7bfa      	ldrb	r2, [r7, #15]
 8003d04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	440b      	add	r3, r1
 8003d16:	3303      	adds	r3, #3
 8003d18:	2200      	movs	r2, #0
 8003d1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d1c:	7bfa      	ldrb	r2, [r7, #15]
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	440b      	add	r3, r1
 8003d2a:	3338      	adds	r3, #56	; 0x38
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d30:	7bfa      	ldrb	r2, [r7, #15]
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	4613      	mov	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	440b      	add	r3, r1
 8003d3e:	333c      	adds	r3, #60	; 0x3c
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d44:	7bfa      	ldrb	r2, [r7, #15]
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	440b      	add	r3, r1
 8003d52:	3340      	adds	r3, #64	; 0x40
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	73fb      	strb	r3, [r7, #15]
 8003d5e:	7bfa      	ldrb	r2, [r7, #15]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d3b9      	bcc.n	8003cdc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d68:	2300      	movs	r3, #0
 8003d6a:	73fb      	strb	r3, [r7, #15]
 8003d6c:	e044      	b.n	8003df8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d6e:	7bfa      	ldrb	r2, [r7, #15]
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	4613      	mov	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	440b      	add	r3, r1
 8003d7c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003d80:	2200      	movs	r2, #0
 8003d82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d84:	7bfa      	ldrb	r2, [r7, #15]
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	440b      	add	r3, r1
 8003d92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d96:	7bfa      	ldrb	r2, [r7, #15]
 8003d98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d9a:	7bfa      	ldrb	r2, [r7, #15]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	440b      	add	r3, r1
 8003da8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003dac:	2200      	movs	r2, #0
 8003dae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003db0:	7bfa      	ldrb	r2, [r7, #15]
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	4613      	mov	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	440b      	add	r3, r1
 8003dbe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003dc6:	7bfa      	ldrb	r2, [r7, #15]
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	440b      	add	r3, r1
 8003dd4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ddc:	7bfa      	ldrb	r2, [r7, #15]
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	440b      	add	r3, r1
 8003dea:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
 8003df4:	3301      	adds	r3, #1
 8003df6:	73fb      	strb	r3, [r7, #15]
 8003df8:	7bfa      	ldrb	r2, [r7, #15]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d3b5      	bcc.n	8003d6e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	687e      	ldr	r6, [r7, #4]
 8003e0a:	466d      	mov	r5, sp
 8003e0c:	f106 0410 	add.w	r4, r6, #16
 8003e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	602b      	str	r3, [r5, #0]
 8003e18:	1d33      	adds	r3, r6, #4
 8003e1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e1c:	6838      	ldr	r0, [r7, #0]
 8003e1e:	f004 fa46 	bl	80082ae <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e4c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d102      	bne.n	8003e62 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	f001 b823 	b.w	8004ea8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 817d 	beq.w	8004172 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003e78:	4bbc      	ldr	r3, [pc, #752]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 030c 	and.w	r3, r3, #12
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	d00c      	beq.n	8003e9e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e84:	4bb9      	ldr	r3, [pc, #740]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 030c 	and.w	r3, r3, #12
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d15c      	bne.n	8003f4a <HAL_RCC_OscConfig+0x10e>
 8003e90:	4bb6      	ldr	r3, [pc, #728]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e9c:	d155      	bne.n	8003f4a <HAL_RCC_OscConfig+0x10e>
 8003e9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ea2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003eaa:	fa93 f3a3 	rbit	r3, r3
 8003eae:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003eb2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb6:	fab3 f383 	clz	r3, r3
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	095b      	lsrs	r3, r3, #5
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	f043 0301 	orr.w	r3, r3, #1
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d102      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x94>
 8003eca:	4ba8      	ldr	r3, [pc, #672]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	e015      	b.n	8003efc <HAL_RCC_OscConfig+0xc0>
 8003ed0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ed4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003edc:	fa93 f3a3 	rbit	r3, r3
 8003ee0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ee8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003eec:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003ef0:	fa93 f3a3 	rbit	r3, r3
 8003ef4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003ef8:	4b9c      	ldr	r3, [pc, #624]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f00:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003f04:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003f08:	fa92 f2a2 	rbit	r2, r2
 8003f0c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003f10:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003f14:	fab2 f282 	clz	r2, r2
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	f042 0220 	orr.w	r2, r2, #32
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	f002 021f 	and.w	r2, r2, #31
 8003f24:	2101      	movs	r1, #1
 8003f26:	fa01 f202 	lsl.w	r2, r1, r2
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 811f 	beq.w	8004170 <HAL_RCC_OscConfig+0x334>
 8003f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f040 8116 	bne.w	8004170 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	f000 bfaf 	b.w	8004ea8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f5a:	d106      	bne.n	8003f6a <HAL_RCC_OscConfig+0x12e>
 8003f5c:	4b83      	ldr	r3, [pc, #524]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a82      	ldr	r2, [pc, #520]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f66:	6013      	str	r3, [r2, #0]
 8003f68:	e036      	b.n	8003fd8 <HAL_RCC_OscConfig+0x19c>
 8003f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCC_OscConfig+0x158>
 8003f7a:	4b7c      	ldr	r3, [pc, #496]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a7b      	ldr	r2, [pc, #492]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	4b79      	ldr	r3, [pc, #484]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a78      	ldr	r2, [pc, #480]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	e021      	b.n	8003fd8 <HAL_RCC_OscConfig+0x19c>
 8003f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fa4:	d10c      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x184>
 8003fa6:	4b71      	ldr	r3, [pc, #452]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a70      	ldr	r2, [pc, #448]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	4b6e      	ldr	r3, [pc, #440]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a6d      	ldr	r2, [pc, #436]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	e00b      	b.n	8003fd8 <HAL_RCC_OscConfig+0x19c>
 8003fc0:	4b6a      	ldr	r3, [pc, #424]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a69      	ldr	r2, [pc, #420]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fca:	6013      	str	r3, [r2, #0]
 8003fcc:	4b67      	ldr	r3, [pc, #412]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a66      	ldr	r2, [pc, #408]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fd6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003fd8:	4b64      	ldr	r3, [pc, #400]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	f023 020f 	bic.w	r2, r3, #15
 8003fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	495f      	ldr	r1, [pc, #380]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d059      	beq.n	80040b6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004002:	f7fd feed 	bl	8001de0 <HAL_GetTick>
 8004006:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400a:	e00a      	b.n	8004022 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800400c:	f7fd fee8 	bl	8001de0 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b64      	cmp	r3, #100	; 0x64
 800401a:	d902      	bls.n	8004022 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	f000 bf43 	b.w	8004ea8 <HAL_RCC_OscConfig+0x106c>
 8004022:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004026:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800402e:	fa93 f3a3 	rbit	r3, r3
 8004032:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004036:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403a:	fab3 f383 	clz	r3, r3
 800403e:	b2db      	uxtb	r3, r3
 8004040:	095b      	lsrs	r3, r3, #5
 8004042:	b2db      	uxtb	r3, r3
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b01      	cmp	r3, #1
 800404c:	d102      	bne.n	8004054 <HAL_RCC_OscConfig+0x218>
 800404e:	4b47      	ldr	r3, [pc, #284]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	e015      	b.n	8004080 <HAL_RCC_OscConfig+0x244>
 8004054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004058:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004060:	fa93 f3a3 	rbit	r3, r3
 8004064:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004068:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800406c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004070:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004074:	fa93 f3a3 	rbit	r3, r3
 8004078:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800407c:	4b3b      	ldr	r3, [pc, #236]	; (800416c <HAL_RCC_OscConfig+0x330>)
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004084:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004088:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800408c:	fa92 f2a2 	rbit	r2, r2
 8004090:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004094:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004098:	fab2 f282 	clz	r2, r2
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	f042 0220 	orr.w	r2, r2, #32
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	f002 021f 	and.w	r2, r2, #31
 80040a8:	2101      	movs	r1, #1
 80040aa:	fa01 f202 	lsl.w	r2, r1, r2
 80040ae:	4013      	ands	r3, r2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0ab      	beq.n	800400c <HAL_RCC_OscConfig+0x1d0>
 80040b4:	e05d      	b.n	8004172 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b6:	f7fd fe93 	bl	8001de0 <HAL_GetTick>
 80040ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040be:	e00a      	b.n	80040d6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040c0:	f7fd fe8e 	bl	8001de0 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b64      	cmp	r3, #100	; 0x64
 80040ce:	d902      	bls.n	80040d6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	f000 bee9 	b.w	8004ea8 <HAL_RCC_OscConfig+0x106c>
 80040d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040da:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040de:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80040e2:	fa93 f3a3 	rbit	r3, r3
 80040e6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80040ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ee:	fab3 f383 	clz	r3, r3
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	095b      	lsrs	r3, r3, #5
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	f043 0301 	orr.w	r3, r3, #1
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d102      	bne.n	8004108 <HAL_RCC_OscConfig+0x2cc>
 8004102:	4b1a      	ldr	r3, [pc, #104]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	e015      	b.n	8004134 <HAL_RCC_OscConfig+0x2f8>
 8004108:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800410c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004110:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004114:	fa93 f3a3 	rbit	r3, r3
 8004118:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800411c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004120:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004124:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004128:	fa93 f3a3 	rbit	r3, r3
 800412c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004130:	4b0e      	ldr	r3, [pc, #56]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004138:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800413c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004140:	fa92 f2a2 	rbit	r2, r2
 8004144:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004148:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800414c:	fab2 f282 	clz	r2, r2
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	f042 0220 	orr.w	r2, r2, #32
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	f002 021f 	and.w	r2, r2, #31
 800415c:	2101      	movs	r1, #1
 800415e:	fa01 f202 	lsl.w	r2, r1, r2
 8004162:	4013      	ands	r3, r2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1ab      	bne.n	80040c0 <HAL_RCC_OscConfig+0x284>
 8004168:	e003      	b.n	8004172 <HAL_RCC_OscConfig+0x336>
 800416a:	bf00      	nop
 800416c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004176:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 817d 	beq.w	8004482 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004188:	4ba6      	ldr	r3, [pc, #664]	; (8004424 <HAL_RCC_OscConfig+0x5e8>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f003 030c 	and.w	r3, r3, #12
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00b      	beq.n	80041ac <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004194:	4ba3      	ldr	r3, [pc, #652]	; (8004424 <HAL_RCC_OscConfig+0x5e8>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f003 030c 	and.w	r3, r3, #12
 800419c:	2b08      	cmp	r3, #8
 800419e:	d172      	bne.n	8004286 <HAL_RCC_OscConfig+0x44a>
 80041a0:	4ba0      	ldr	r3, [pc, #640]	; (8004424 <HAL_RCC_OscConfig+0x5e8>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d16c      	bne.n	8004286 <HAL_RCC_OscConfig+0x44a>
 80041ac:	2302      	movs	r3, #2
 80041ae:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80041b6:	fa93 f3a3 	rbit	r3, r3
 80041ba:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80041be:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041c2:	fab3 f383 	clz	r3, r3
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	095b      	lsrs	r3, r3, #5
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d102      	bne.n	80041dc <HAL_RCC_OscConfig+0x3a0>
 80041d6:	4b93      	ldr	r3, [pc, #588]	; (8004424 <HAL_RCC_OscConfig+0x5e8>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	e013      	b.n	8004204 <HAL_RCC_OscConfig+0x3c8>
 80041dc:	2302      	movs	r3, #2
 80041de:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80041e6:	fa93 f3a3 	rbit	r3, r3
 80041ea:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80041ee:	2302      	movs	r3, #2
 80041f0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80041f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80041f8:	fa93 f3a3 	rbit	r3, r3
 80041fc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004200:	4b88      	ldr	r3, [pc, #544]	; (8004424 <HAL_RCC_OscConfig+0x5e8>)
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	2202      	movs	r2, #2
 8004206:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800420a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800420e:	fa92 f2a2 	rbit	r2, r2
 8004212:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004216:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800421a:	fab2 f282 	clz	r2, r2
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	f042 0220 	orr.w	r2, r2, #32
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	f002 021f 	and.w	r2, r2, #31
 800422a:	2101      	movs	r1, #1
 800422c:	fa01 f202 	lsl.w	r2, r1, r2
 8004230:	4013      	ands	r3, r2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <HAL_RCC_OscConfig+0x410>
 8004236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800423a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d002      	beq.n	800424c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	f000 be2e 	b.w	8004ea8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800424c:	4b75      	ldr	r3, [pc, #468]	; (8004424 <HAL_RCC_OscConfig+0x5e8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004258:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	21f8      	movs	r1, #248	; 0xf8
 8004262:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004266:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800426a:	fa91 f1a1 	rbit	r1, r1
 800426e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004272:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004276:	fab1 f181 	clz	r1, r1
 800427a:	b2c9      	uxtb	r1, r1
 800427c:	408b      	lsls	r3, r1
 800427e:	4969      	ldr	r1, [pc, #420]	; (8004424 <HAL_RCC_OscConfig+0x5e8>)
 8004280:	4313      	orrs	r3, r2
 8004282:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004284:	e0fd      	b.n	8004482 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800428a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 8088 	beq.w	80043a8 <HAL_RCC_OscConfig+0x56c>
 8004298:	2301      	movs	r3, #1
 800429a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80042a2:	fa93 f3a3 	rbit	r3, r3
 80042a6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80042aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042ae:	fab3 f383 	clz	r3, r3
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80042b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	461a      	mov	r2, r3
 80042c0:	2301      	movs	r3, #1
 80042c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c4:	f7fd fd8c 	bl	8001de0 <HAL_GetTick>
 80042c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042cc:	e00a      	b.n	80042e4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ce:	f7fd fd87 	bl	8001de0 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d902      	bls.n	80042e4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	f000 bde2 	b.w	8004ea8 <HAL_RCC_OscConfig+0x106c>
 80042e4:	2302      	movs	r3, #2
 80042e6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80042ee:	fa93 f3a3 	rbit	r3, r3
 80042f2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80042f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fa:	fab3 f383 	clz	r3, r3
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	095b      	lsrs	r3, r3, #5
 8004302:	b2db      	uxtb	r3, r3
 8004304:	f043 0301 	orr.w	r3, r3, #1
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b01      	cmp	r3, #1
 800430c:	d102      	bne.n	8004314 <HAL_RCC_OscConfig+0x4d8>
 800430e:	4b45      	ldr	r3, [pc, #276]	; (8004424 <HAL_RCC_OscConfig+0x5e8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	e013      	b.n	800433c <HAL_RCC_OscConfig+0x500>
 8004314:	2302      	movs	r3, #2
 8004316:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800431e:	fa93 f3a3 	rbit	r3, r3
 8004322:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004326:	2302      	movs	r3, #2
 8004328:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800432c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004330:	fa93 f3a3 	rbit	r3, r3
 8004334:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004338:	4b3a      	ldr	r3, [pc, #232]	; (8004424 <HAL_RCC_OscConfig+0x5e8>)
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	2202      	movs	r2, #2
 800433e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004342:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004346:	fa92 f2a2 	rbit	r2, r2
 800434a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800434e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004352:	fab2 f282 	clz	r2, r2
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	f042 0220 	orr.w	r2, r2, #32
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	f002 021f 	and.w	r2, r2, #31
 8004362:	2101      	movs	r1, #1
 8004364:	fa01 f202 	lsl.w	r2, r1, r2
 8004368:	4013      	ands	r3, r2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0af      	beq.n	80042ce <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436e:	4b2d      	ldr	r3, [pc, #180]	; (8004424 <HAL_RCC_OscConfig+0x5e8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800437a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	21f8      	movs	r1, #248	; 0xf8
 8004384:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004388:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800438c:	fa91 f1a1 	rbit	r1, r1
 8004390:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004394:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004398:	fab1 f181 	clz	r1, r1
 800439c:	b2c9      	uxtb	r1, r1
 800439e:	408b      	lsls	r3, r1
 80043a0:	4920      	ldr	r1, [pc, #128]	; (8004424 <HAL_RCC_OscConfig+0x5e8>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	600b      	str	r3, [r1, #0]
 80043a6:	e06c      	b.n	8004482 <HAL_RCC_OscConfig+0x646>
 80043a8:	2301      	movs	r3, #1
 80043aa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80043b2:	fa93 f3a3 	rbit	r3, r3
 80043b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80043ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043be:	fab3 f383 	clz	r3, r3
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80043c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	461a      	mov	r2, r3
 80043d0:	2300      	movs	r3, #0
 80043d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d4:	f7fd fd04 	bl	8001de0 <HAL_GetTick>
 80043d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043dc:	e00a      	b.n	80043f4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043de:	f7fd fcff 	bl	8001de0 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d902      	bls.n	80043f4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	f000 bd5a 	b.w	8004ea8 <HAL_RCC_OscConfig+0x106c>
 80043f4:	2302      	movs	r3, #2
 80043f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80043fe:	fa93 f3a3 	rbit	r3, r3
 8004402:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440a:	fab3 f383 	clz	r3, r3
 800440e:	b2db      	uxtb	r3, r3
 8004410:	095b      	lsrs	r3, r3, #5
 8004412:	b2db      	uxtb	r3, r3
 8004414:	f043 0301 	orr.w	r3, r3, #1
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b01      	cmp	r3, #1
 800441c:	d104      	bne.n	8004428 <HAL_RCC_OscConfig+0x5ec>
 800441e:	4b01      	ldr	r3, [pc, #4]	; (8004424 <HAL_RCC_OscConfig+0x5e8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	e015      	b.n	8004450 <HAL_RCC_OscConfig+0x614>
 8004424:	40021000 	.word	0x40021000
 8004428:	2302      	movs	r3, #2
 800442a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004432:	fa93 f3a3 	rbit	r3, r3
 8004436:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800443a:	2302      	movs	r3, #2
 800443c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004440:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004444:	fa93 f3a3 	rbit	r3, r3
 8004448:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800444c:	4bc8      	ldr	r3, [pc, #800]	; (8004770 <HAL_RCC_OscConfig+0x934>)
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	2202      	movs	r2, #2
 8004452:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004456:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800445a:	fa92 f2a2 	rbit	r2, r2
 800445e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004462:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004466:	fab2 f282 	clz	r2, r2
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	f042 0220 	orr.w	r2, r2, #32
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	f002 021f 	and.w	r2, r2, #31
 8004476:	2101      	movs	r1, #1
 8004478:	fa01 f202 	lsl.w	r2, r1, r2
 800447c:	4013      	ands	r3, r2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1ad      	bne.n	80043de <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004486:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0308 	and.w	r3, r3, #8
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 8110 	beq.w	80046b8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800449c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d079      	beq.n	800459c <HAL_RCC_OscConfig+0x760>
 80044a8:	2301      	movs	r3, #1
 80044aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80044b2:	fa93 f3a3 	rbit	r3, r3
 80044b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80044ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044be:	fab3 f383 	clz	r3, r3
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	461a      	mov	r2, r3
 80044c6:	4bab      	ldr	r3, [pc, #684]	; (8004774 <HAL_RCC_OscConfig+0x938>)
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	461a      	mov	r2, r3
 80044ce:	2301      	movs	r3, #1
 80044d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d2:	f7fd fc85 	bl	8001de0 <HAL_GetTick>
 80044d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044da:	e00a      	b.n	80044f2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044dc:	f7fd fc80 	bl	8001de0 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d902      	bls.n	80044f2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	f000 bcdb 	b.w	8004ea8 <HAL_RCC_OscConfig+0x106c>
 80044f2:	2302      	movs	r3, #2
 80044f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80044fc:	fa93 f3a3 	rbit	r3, r3
 8004500:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004508:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800450c:	2202      	movs	r2, #2
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004514:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	fa93 f2a3 	rbit	r2, r3
 800451e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004522:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800452c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004530:	2202      	movs	r2, #2
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	fa93 f2a3 	rbit	r2, r3
 8004542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004546:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800454a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800454c:	4b88      	ldr	r3, [pc, #544]	; (8004770 <HAL_RCC_OscConfig+0x934>)
 800454e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004554:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004558:	2102      	movs	r1, #2
 800455a:	6019      	str	r1, [r3, #0]
 800455c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004560:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	fa93 f1a3 	rbit	r1, r3
 800456a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800456e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004572:	6019      	str	r1, [r3, #0]
  return result;
 8004574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004578:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	fab3 f383 	clz	r3, r3
 8004582:	b2db      	uxtb	r3, r3
 8004584:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004588:	b2db      	uxtb	r3, r3
 800458a:	f003 031f 	and.w	r3, r3, #31
 800458e:	2101      	movs	r1, #1
 8004590:	fa01 f303 	lsl.w	r3, r1, r3
 8004594:	4013      	ands	r3, r2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0a0      	beq.n	80044dc <HAL_RCC_OscConfig+0x6a0>
 800459a:	e08d      	b.n	80046b8 <HAL_RCC_OscConfig+0x87c>
 800459c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80045a4:	2201      	movs	r2, #1
 80045a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	fa93 f2a3 	rbit	r2, r3
 80045b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045be:	601a      	str	r2, [r3, #0]
  return result;
 80045c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045c8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045ca:	fab3 f383 	clz	r3, r3
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	461a      	mov	r2, r3
 80045d2:	4b68      	ldr	r3, [pc, #416]	; (8004774 <HAL_RCC_OscConfig+0x938>)
 80045d4:	4413      	add	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	461a      	mov	r2, r3
 80045da:	2300      	movs	r3, #0
 80045dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045de:	f7fd fbff 	bl	8001de0 <HAL_GetTick>
 80045e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e6:	e00a      	b.n	80045fe <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045e8:	f7fd fbfa 	bl	8001de0 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d902      	bls.n	80045fe <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	f000 bc55 	b.w	8004ea8 <HAL_RCC_OscConfig+0x106c>
 80045fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004602:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004606:	2202      	movs	r2, #2
 8004608:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800460e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	fa93 f2a3 	rbit	r2, r3
 8004618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800461c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004626:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800462a:	2202      	movs	r2, #2
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004632:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	fa93 f2a3 	rbit	r2, r3
 800463c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004640:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800464a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800464e:	2202      	movs	r2, #2
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004656:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	fa93 f2a3 	rbit	r2, r3
 8004660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004664:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004668:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800466a:	4b41      	ldr	r3, [pc, #260]	; (8004770 <HAL_RCC_OscConfig+0x934>)
 800466c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800466e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004672:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004676:	2102      	movs	r1, #2
 8004678:	6019      	str	r1, [r3, #0]
 800467a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800467e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	fa93 f1a3 	rbit	r1, r3
 8004688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800468c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004690:	6019      	str	r1, [r3, #0]
  return result;
 8004692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004696:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	fab3 f383 	clz	r3, r3
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	f003 031f 	and.w	r3, r3, #31
 80046ac:	2101      	movs	r1, #1
 80046ae:	fa01 f303 	lsl.w	r3, r1, r3
 80046b2:	4013      	ands	r3, r2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d197      	bne.n	80045e8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 81a1 	beq.w	8004a10 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ce:	2300      	movs	r3, #0
 80046d0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046d4:	4b26      	ldr	r3, [pc, #152]	; (8004770 <HAL_RCC_OscConfig+0x934>)
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d116      	bne.n	800470e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e0:	4b23      	ldr	r3, [pc, #140]	; (8004770 <HAL_RCC_OscConfig+0x934>)
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	4a22      	ldr	r2, [pc, #136]	; (8004770 <HAL_RCC_OscConfig+0x934>)
 80046e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ea:	61d3      	str	r3, [r2, #28]
 80046ec:	4b20      	ldr	r3, [pc, #128]	; (8004770 <HAL_RCC_OscConfig+0x934>)
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80046f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004702:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004706:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004708:	2301      	movs	r3, #1
 800470a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470e:	4b1a      	ldr	r3, [pc, #104]	; (8004778 <HAL_RCC_OscConfig+0x93c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004716:	2b00      	cmp	r3, #0
 8004718:	d11a      	bne.n	8004750 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800471a:	4b17      	ldr	r3, [pc, #92]	; (8004778 <HAL_RCC_OscConfig+0x93c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a16      	ldr	r2, [pc, #88]	; (8004778 <HAL_RCC_OscConfig+0x93c>)
 8004720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004724:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004726:	f7fd fb5b 	bl	8001de0 <HAL_GetTick>
 800472a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472e:	e009      	b.n	8004744 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004730:	f7fd fb56 	bl	8001de0 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b64      	cmp	r3, #100	; 0x64
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e3b1      	b.n	8004ea8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004744:	4b0c      	ldr	r3, [pc, #48]	; (8004778 <HAL_RCC_OscConfig+0x93c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0ef      	beq.n	8004730 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004754:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d10d      	bne.n	800477c <HAL_RCC_OscConfig+0x940>
 8004760:	4b03      	ldr	r3, [pc, #12]	; (8004770 <HAL_RCC_OscConfig+0x934>)
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	4a02      	ldr	r2, [pc, #8]	; (8004770 <HAL_RCC_OscConfig+0x934>)
 8004766:	f043 0301 	orr.w	r3, r3, #1
 800476a:	6213      	str	r3, [r2, #32]
 800476c:	e03c      	b.n	80047e8 <HAL_RCC_OscConfig+0x9ac>
 800476e:	bf00      	nop
 8004770:	40021000 	.word	0x40021000
 8004774:	10908120 	.word	0x10908120
 8004778:	40007000 	.word	0x40007000
 800477c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004780:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10c      	bne.n	80047a6 <HAL_RCC_OscConfig+0x96a>
 800478c:	4bc1      	ldr	r3, [pc, #772]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	4ac0      	ldr	r2, [pc, #768]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 8004792:	f023 0301 	bic.w	r3, r3, #1
 8004796:	6213      	str	r3, [r2, #32]
 8004798:	4bbe      	ldr	r3, [pc, #760]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	4abd      	ldr	r2, [pc, #756]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 800479e:	f023 0304 	bic.w	r3, r3, #4
 80047a2:	6213      	str	r3, [r2, #32]
 80047a4:	e020      	b.n	80047e8 <HAL_RCC_OscConfig+0x9ac>
 80047a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	2b05      	cmp	r3, #5
 80047b4:	d10c      	bne.n	80047d0 <HAL_RCC_OscConfig+0x994>
 80047b6:	4bb7      	ldr	r3, [pc, #732]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	4ab6      	ldr	r2, [pc, #728]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 80047bc:	f043 0304 	orr.w	r3, r3, #4
 80047c0:	6213      	str	r3, [r2, #32]
 80047c2:	4bb4      	ldr	r3, [pc, #720]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	4ab3      	ldr	r2, [pc, #716]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 80047c8:	f043 0301 	orr.w	r3, r3, #1
 80047cc:	6213      	str	r3, [r2, #32]
 80047ce:	e00b      	b.n	80047e8 <HAL_RCC_OscConfig+0x9ac>
 80047d0:	4bb0      	ldr	r3, [pc, #704]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	4aaf      	ldr	r2, [pc, #700]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 80047d6:	f023 0301 	bic.w	r3, r3, #1
 80047da:	6213      	str	r3, [r2, #32]
 80047dc:	4bad      	ldr	r3, [pc, #692]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	4aac      	ldr	r2, [pc, #688]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 80047e2:	f023 0304 	bic.w	r3, r3, #4
 80047e6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 8081 	beq.w	80048fc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047fa:	f7fd faf1 	bl	8001de0 <HAL_GetTick>
 80047fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004802:	e00b      	b.n	800481c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004804:	f7fd faec 	bl	8001de0 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	f241 3288 	movw	r2, #5000	; 0x1388
 8004814:	4293      	cmp	r3, r2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e345      	b.n	8004ea8 <HAL_RCC_OscConfig+0x106c>
 800481c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004820:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004824:	2202      	movs	r2, #2
 8004826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800482c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	fa93 f2a3 	rbit	r2, r3
 8004836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800483a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004844:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004848:	2202      	movs	r2, #2
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004850:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	fa93 f2a3 	rbit	r2, r3
 800485a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800485e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004862:	601a      	str	r2, [r3, #0]
  return result;
 8004864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004868:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800486c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800486e:	fab3 f383 	clz	r3, r3
 8004872:	b2db      	uxtb	r3, r3
 8004874:	095b      	lsrs	r3, r3, #5
 8004876:	b2db      	uxtb	r3, r3
 8004878:	f043 0302 	orr.w	r3, r3, #2
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d102      	bne.n	8004888 <HAL_RCC_OscConfig+0xa4c>
 8004882:	4b84      	ldr	r3, [pc, #528]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	e013      	b.n	80048b0 <HAL_RCC_OscConfig+0xa74>
 8004888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800488c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004890:	2202      	movs	r2, #2
 8004892:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004898:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	fa93 f2a3 	rbit	r2, r3
 80048a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	4b79      	ldr	r3, [pc, #484]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048b4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80048b8:	2102      	movs	r1, #2
 80048ba:	6011      	str	r1, [r2, #0]
 80048bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048c0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80048c4:	6812      	ldr	r2, [r2, #0]
 80048c6:	fa92 f1a2 	rbit	r1, r2
 80048ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048ce:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80048d2:	6011      	str	r1, [r2, #0]
  return result;
 80048d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048d8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80048dc:	6812      	ldr	r2, [r2, #0]
 80048de:	fab2 f282 	clz	r2, r2
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048e8:	b2d2      	uxtb	r2, r2
 80048ea:	f002 021f 	and.w	r2, r2, #31
 80048ee:	2101      	movs	r1, #1
 80048f0:	fa01 f202 	lsl.w	r2, r1, r2
 80048f4:	4013      	ands	r3, r2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d084      	beq.n	8004804 <HAL_RCC_OscConfig+0x9c8>
 80048fa:	e07f      	b.n	80049fc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048fc:	f7fd fa70 	bl	8001de0 <HAL_GetTick>
 8004900:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004904:	e00b      	b.n	800491e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004906:	f7fd fa6b 	bl	8001de0 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	f241 3288 	movw	r2, #5000	; 0x1388
 8004916:	4293      	cmp	r3, r2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e2c4      	b.n	8004ea8 <HAL_RCC_OscConfig+0x106c>
 800491e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004922:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004926:	2202      	movs	r2, #2
 8004928:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800492e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	fa93 f2a3 	rbit	r2, r3
 8004938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800493c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004946:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800494a:	2202      	movs	r2, #2
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004952:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	fa93 f2a3 	rbit	r2, r3
 800495c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004960:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004964:	601a      	str	r2, [r3, #0]
  return result;
 8004966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800496a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800496e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004970:	fab3 f383 	clz	r3, r3
 8004974:	b2db      	uxtb	r3, r3
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	b2db      	uxtb	r3, r3
 800497a:	f043 0302 	orr.w	r3, r3, #2
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d102      	bne.n	800498a <HAL_RCC_OscConfig+0xb4e>
 8004984:	4b43      	ldr	r3, [pc, #268]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	e013      	b.n	80049b2 <HAL_RCC_OscConfig+0xb76>
 800498a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800498e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004992:	2202      	movs	r2, #2
 8004994:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800499a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	fa93 f2a3 	rbit	r2, r3
 80049a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	4b39      	ldr	r3, [pc, #228]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049b6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80049ba:	2102      	movs	r1, #2
 80049bc:	6011      	str	r1, [r2, #0]
 80049be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049c2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80049c6:	6812      	ldr	r2, [r2, #0]
 80049c8:	fa92 f1a2 	rbit	r1, r2
 80049cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049d0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80049d4:	6011      	str	r1, [r2, #0]
  return result;
 80049d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049da:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80049de:	6812      	ldr	r2, [r2, #0]
 80049e0:	fab2 f282 	clz	r2, r2
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	f002 021f 	and.w	r2, r2, #31
 80049f0:	2101      	movs	r1, #1
 80049f2:	fa01 f202 	lsl.w	r2, r1, r2
 80049f6:	4013      	ands	r3, r2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d184      	bne.n	8004906 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049fc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d105      	bne.n	8004a10 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a04:	4b23      	ldr	r3, [pc, #140]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	4a22      	ldr	r2, [pc, #136]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 8004a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a0e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 8242 	beq.w	8004ea6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a22:	4b1c      	ldr	r3, [pc, #112]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f003 030c 	and.w	r3, r3, #12
 8004a2a:	2b08      	cmp	r3, #8
 8004a2c:	f000 8213 	beq.w	8004e56 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	f040 8162 	bne.w	8004d06 <HAL_RCC_OscConfig+0xeca>
 8004a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a46:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004a4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a54:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	fa93 f2a3 	rbit	r2, r3
 8004a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a62:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004a66:	601a      	str	r2, [r3, #0]
  return result;
 8004a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a6c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004a70:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a72:	fab3 f383 	clz	r3, r3
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	461a      	mov	r2, r3
 8004a84:	2300      	movs	r3, #0
 8004a86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a88:	f7fd f9aa 	bl	8001de0 <HAL_GetTick>
 8004a8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a90:	e00c      	b.n	8004aac <HAL_RCC_OscConfig+0xc70>
 8004a92:	bf00      	nop
 8004a94:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a98:	f7fd f9a2 	bl	8001de0 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e1fd      	b.n	8004ea8 <HAL_RCC_OscConfig+0x106c>
 8004aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ab0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004ab4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ab8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004abe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	fa93 f2a3 	rbit	r2, r3
 8004ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004acc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004ad0:	601a      	str	r2, [r3, #0]
  return result;
 8004ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004ada:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004adc:	fab3 f383 	clz	r3, r3
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	095b      	lsrs	r3, r3, #5
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	f043 0301 	orr.w	r3, r3, #1
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d102      	bne.n	8004af6 <HAL_RCC_OscConfig+0xcba>
 8004af0:	4bb0      	ldr	r3, [pc, #704]	; (8004db4 <HAL_RCC_OscConfig+0xf78>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	e027      	b.n	8004b46 <HAL_RCC_OscConfig+0xd0a>
 8004af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004afa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004afe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b08:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	fa93 f2a3 	rbit	r2, r3
 8004b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b16:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b20:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004b24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b2e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	fa93 f2a3 	rbit	r2, r3
 8004b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b3c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	4b9c      	ldr	r3, [pc, #624]	; (8004db4 <HAL_RCC_OscConfig+0xf78>)
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b4a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004b4e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b52:	6011      	str	r1, [r2, #0]
 8004b54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b58:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004b5c:	6812      	ldr	r2, [r2, #0]
 8004b5e:	fa92 f1a2 	rbit	r1, r2
 8004b62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b66:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004b6a:	6011      	str	r1, [r2, #0]
  return result;
 8004b6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b70:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004b74:	6812      	ldr	r2, [r2, #0]
 8004b76:	fab2 f282 	clz	r2, r2
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	f042 0220 	orr.w	r2, r2, #32
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	f002 021f 	and.w	r2, r2, #31
 8004b86:	2101      	movs	r1, #1
 8004b88:	fa01 f202 	lsl.w	r2, r1, r2
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d182      	bne.n	8004a98 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b92:	4b88      	ldr	r3, [pc, #544]	; (8004db4 <HAL_RCC_OscConfig+0xf78>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004baa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	430b      	orrs	r3, r1
 8004bb4:	497f      	ldr	r1, [pc, #508]	; (8004db4 <HAL_RCC_OscConfig+0xf78>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	604b      	str	r3, [r1, #4]
 8004bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bbe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004bc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004bc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bcc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	fa93 f2a3 	rbit	r2, r3
 8004bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bda:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004bde:	601a      	str	r2, [r3, #0]
  return result;
 8004be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004be8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bea:	fab3 f383 	clz	r3, r3
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004bf4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c00:	f7fd f8ee 	bl	8001de0 <HAL_GetTick>
 8004c04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c08:	e009      	b.n	8004c1e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c0a:	f7fd f8e9 	bl	8001de0 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e144      	b.n	8004ea8 <HAL_RCC_OscConfig+0x106c>
 8004c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c22:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004c26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c30:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	fa93 f2a3 	rbit	r2, r3
 8004c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c3e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004c42:	601a      	str	r2, [r3, #0]
  return result;
 8004c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c48:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004c4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c4e:	fab3 f383 	clz	r3, r3
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	f043 0301 	orr.w	r3, r3, #1
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d102      	bne.n	8004c68 <HAL_RCC_OscConfig+0xe2c>
 8004c62:	4b54      	ldr	r3, [pc, #336]	; (8004db4 <HAL_RCC_OscConfig+0xf78>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	e027      	b.n	8004cb8 <HAL_RCC_OscConfig+0xe7c>
 8004c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c6c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004c70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c7a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	fa93 f2a3 	rbit	r2, r3
 8004c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c88:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004c8c:	601a      	str	r2, [r3, #0]
 8004c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c92:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004c96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ca0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	fa93 f2a3 	rbit	r2, r3
 8004caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cae:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	4b3f      	ldr	r3, [pc, #252]	; (8004db4 <HAL_RCC_OscConfig+0xf78>)
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cbc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004cc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004cc4:	6011      	str	r1, [r2, #0]
 8004cc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cca:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004cce:	6812      	ldr	r2, [r2, #0]
 8004cd0:	fa92 f1a2 	rbit	r1, r2
 8004cd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cd8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004cdc:	6011      	str	r1, [r2, #0]
  return result;
 8004cde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ce2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004ce6:	6812      	ldr	r2, [r2, #0]
 8004ce8:	fab2 f282 	clz	r2, r2
 8004cec:	b2d2      	uxtb	r2, r2
 8004cee:	f042 0220 	orr.w	r2, r2, #32
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	f002 021f 	and.w	r2, r2, #31
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8004cfe:	4013      	ands	r3, r2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d082      	beq.n	8004c0a <HAL_RCC_OscConfig+0xdce>
 8004d04:	e0cf      	b.n	8004ea6 <HAL_RCC_OscConfig+0x106a>
 8004d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d0a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004d0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d18:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	fa93 f2a3 	rbit	r2, r3
 8004d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d26:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004d2a:	601a      	str	r2, [r3, #0]
  return result;
 8004d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d30:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004d34:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d36:	fab3 f383 	clz	r3, r3
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	461a      	mov	r2, r3
 8004d48:	2300      	movs	r3, #0
 8004d4a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d4c:	f7fd f848 	bl	8001de0 <HAL_GetTick>
 8004d50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d54:	e009      	b.n	8004d6a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d56:	f7fd f843 	bl	8001de0 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e09e      	b.n	8004ea8 <HAL_RCC_OscConfig+0x106c>
 8004d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d6e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004d72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d7c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	fa93 f2a3 	rbit	r2, r3
 8004d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d8a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004d8e:	601a      	str	r2, [r3, #0]
  return result;
 8004d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d94:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004d98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d9a:	fab3 f383 	clz	r3, r3
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	095b      	lsrs	r3, r3, #5
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d104      	bne.n	8004db8 <HAL_RCC_OscConfig+0xf7c>
 8004dae:	4b01      	ldr	r3, [pc, #4]	; (8004db4 <HAL_RCC_OscConfig+0xf78>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	e029      	b.n	8004e08 <HAL_RCC_OscConfig+0xfcc>
 8004db4:	40021000 	.word	0x40021000
 8004db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dbc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004dc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dca:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	fa93 f2a3 	rbit	r2, r3
 8004dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004de6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004df0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	fa93 f2a3 	rbit	r2, r3
 8004dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dfe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	4b2b      	ldr	r3, [pc, #172]	; (8004eb4 <HAL_RCC_OscConfig+0x1078>)
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e0c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004e10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004e14:	6011      	str	r1, [r2, #0]
 8004e16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e1a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004e1e:	6812      	ldr	r2, [r2, #0]
 8004e20:	fa92 f1a2 	rbit	r1, r2
 8004e24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e28:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004e2c:	6011      	str	r1, [r2, #0]
  return result;
 8004e2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e32:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004e36:	6812      	ldr	r2, [r2, #0]
 8004e38:	fab2 f282 	clz	r2, r2
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	f042 0220 	orr.w	r2, r2, #32
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	f002 021f 	and.w	r2, r2, #31
 8004e48:	2101      	movs	r1, #1
 8004e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e4e:	4013      	ands	r3, r2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d180      	bne.n	8004d56 <HAL_RCC_OscConfig+0xf1a>
 8004e54:	e027      	b.n	8004ea6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d101      	bne.n	8004e6a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e01e      	b.n	8004ea8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e6a:	4b12      	ldr	r3, [pc, #72]	; (8004eb4 <HAL_RCC_OscConfig+0x1078>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004e72:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004e76:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d10b      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004e8a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004e8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d001      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40021000 	.word	0x40021000

08004eb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b09e      	sub	sp, #120	; 0x78
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e162      	b.n	8005196 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ed0:	4b90      	ldr	r3, [pc, #576]	; (8005114 <HAL_RCC_ClockConfig+0x25c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d910      	bls.n	8004f00 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ede:	4b8d      	ldr	r3, [pc, #564]	; (8005114 <HAL_RCC_ClockConfig+0x25c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f023 0207 	bic.w	r2, r3, #7
 8004ee6:	498b      	ldr	r1, [pc, #556]	; (8005114 <HAL_RCC_ClockConfig+0x25c>)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eee:	4b89      	ldr	r3, [pc, #548]	; (8005114 <HAL_RCC_ClockConfig+0x25c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d001      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e14a      	b.n	8005196 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d008      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f0c:	4b82      	ldr	r3, [pc, #520]	; (8005118 <HAL_RCC_ClockConfig+0x260>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	497f      	ldr	r1, [pc, #508]	; (8005118 <HAL_RCC_ClockConfig+0x260>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 80dc 	beq.w	80050e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d13c      	bne.n	8004fae <HAL_RCC_ClockConfig+0xf6>
 8004f34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f38:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f3c:	fa93 f3a3 	rbit	r3, r3
 8004f40:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f44:	fab3 f383 	clz	r3, r3
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	f043 0301 	orr.w	r3, r3, #1
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d102      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xa6>
 8004f58:	4b6f      	ldr	r3, [pc, #444]	; (8005118 <HAL_RCC_ClockConfig+0x260>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	e00f      	b.n	8004f7e <HAL_RCC_ClockConfig+0xc6>
 8004f5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f66:	fa93 f3a3 	rbit	r3, r3
 8004f6a:	667b      	str	r3, [r7, #100]	; 0x64
 8004f6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f70:	663b      	str	r3, [r7, #96]	; 0x60
 8004f72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f74:	fa93 f3a3 	rbit	r3, r3
 8004f78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f7a:	4b67      	ldr	r3, [pc, #412]	; (8005118 <HAL_RCC_ClockConfig+0x260>)
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f82:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f86:	fa92 f2a2 	rbit	r2, r2
 8004f8a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004f8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004f8e:	fab2 f282 	clz	r2, r2
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	f042 0220 	orr.w	r2, r2, #32
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	f002 021f 	and.w	r2, r2, #31
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d17b      	bne.n	80050a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e0f3      	b.n	8005196 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d13c      	bne.n	8005030 <HAL_RCC_ClockConfig+0x178>
 8004fb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fbe:	fa93 f3a3 	rbit	r3, r3
 8004fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fc6:	fab3 f383 	clz	r3, r3
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	095b      	lsrs	r3, r3, #5
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	f043 0301 	orr.w	r3, r3, #1
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d102      	bne.n	8004fe0 <HAL_RCC_ClockConfig+0x128>
 8004fda:	4b4f      	ldr	r3, [pc, #316]	; (8005118 <HAL_RCC_ClockConfig+0x260>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	e00f      	b.n	8005000 <HAL_RCC_ClockConfig+0x148>
 8004fe0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fe4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fe8:	fa93 f3a3 	rbit	r3, r3
 8004fec:	647b      	str	r3, [r7, #68]	; 0x44
 8004fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ff2:	643b      	str	r3, [r7, #64]	; 0x40
 8004ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ff6:	fa93 f3a3 	rbit	r3, r3
 8004ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ffc:	4b46      	ldr	r3, [pc, #280]	; (8005118 <HAL_RCC_ClockConfig+0x260>)
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005004:	63ba      	str	r2, [r7, #56]	; 0x38
 8005006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005008:	fa92 f2a2 	rbit	r2, r2
 800500c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800500e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005010:	fab2 f282 	clz	r2, r2
 8005014:	b2d2      	uxtb	r2, r2
 8005016:	f042 0220 	orr.w	r2, r2, #32
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	f002 021f 	and.w	r2, r2, #31
 8005020:	2101      	movs	r1, #1
 8005022:	fa01 f202 	lsl.w	r2, r1, r2
 8005026:	4013      	ands	r3, r2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d13a      	bne.n	80050a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e0b2      	b.n	8005196 <HAL_RCC_ClockConfig+0x2de>
 8005030:	2302      	movs	r3, #2
 8005032:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005036:	fa93 f3a3 	rbit	r3, r3
 800503a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800503c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800503e:	fab3 f383 	clz	r3, r3
 8005042:	b2db      	uxtb	r3, r3
 8005044:	095b      	lsrs	r3, r3, #5
 8005046:	b2db      	uxtb	r3, r3
 8005048:	f043 0301 	orr.w	r3, r3, #1
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b01      	cmp	r3, #1
 8005050:	d102      	bne.n	8005058 <HAL_RCC_ClockConfig+0x1a0>
 8005052:	4b31      	ldr	r3, [pc, #196]	; (8005118 <HAL_RCC_ClockConfig+0x260>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	e00d      	b.n	8005074 <HAL_RCC_ClockConfig+0x1bc>
 8005058:	2302      	movs	r3, #2
 800505a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	fa93 f3a3 	rbit	r3, r3
 8005062:	627b      	str	r3, [r7, #36]	; 0x24
 8005064:	2302      	movs	r3, #2
 8005066:	623b      	str	r3, [r7, #32]
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	fa93 f3a3 	rbit	r3, r3
 800506e:	61fb      	str	r3, [r7, #28]
 8005070:	4b29      	ldr	r3, [pc, #164]	; (8005118 <HAL_RCC_ClockConfig+0x260>)
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	2202      	movs	r2, #2
 8005076:	61ba      	str	r2, [r7, #24]
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	fa92 f2a2 	rbit	r2, r2
 800507e:	617a      	str	r2, [r7, #20]
  return result;
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	fab2 f282 	clz	r2, r2
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	f042 0220 	orr.w	r2, r2, #32
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	f002 021f 	and.w	r2, r2, #31
 8005092:	2101      	movs	r1, #1
 8005094:	fa01 f202 	lsl.w	r2, r1, r2
 8005098:	4013      	ands	r3, r2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e079      	b.n	8005196 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050a2:	4b1d      	ldr	r3, [pc, #116]	; (8005118 <HAL_RCC_ClockConfig+0x260>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f023 0203 	bic.w	r2, r3, #3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	491a      	ldr	r1, [pc, #104]	; (8005118 <HAL_RCC_ClockConfig+0x260>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050b4:	f7fc fe94 	bl	8001de0 <HAL_GetTick>
 80050b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ba:	e00a      	b.n	80050d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050bc:	f7fc fe90 	bl	8001de0 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e061      	b.n	8005196 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050d2:	4b11      	ldr	r3, [pc, #68]	; (8005118 <HAL_RCC_ClockConfig+0x260>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f003 020c 	and.w	r2, r3, #12
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d1eb      	bne.n	80050bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050e4:	4b0b      	ldr	r3, [pc, #44]	; (8005114 <HAL_RCC_ClockConfig+0x25c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0307 	and.w	r3, r3, #7
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d214      	bcs.n	800511c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f2:	4b08      	ldr	r3, [pc, #32]	; (8005114 <HAL_RCC_ClockConfig+0x25c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f023 0207 	bic.w	r2, r3, #7
 80050fa:	4906      	ldr	r1, [pc, #24]	; (8005114 <HAL_RCC_ClockConfig+0x25c>)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	4313      	orrs	r3, r2
 8005100:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005102:	4b04      	ldr	r3, [pc, #16]	; (8005114 <HAL_RCC_ClockConfig+0x25c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d005      	beq.n	800511c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e040      	b.n	8005196 <HAL_RCC_ClockConfig+0x2de>
 8005114:	40022000 	.word	0x40022000
 8005118:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d008      	beq.n	800513a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005128:	4b1d      	ldr	r3, [pc, #116]	; (80051a0 <HAL_RCC_ClockConfig+0x2e8>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	491a      	ldr	r1, [pc, #104]	; (80051a0 <HAL_RCC_ClockConfig+0x2e8>)
 8005136:	4313      	orrs	r3, r2
 8005138:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b00      	cmp	r3, #0
 8005144:	d009      	beq.n	800515a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005146:	4b16      	ldr	r3, [pc, #88]	; (80051a0 <HAL_RCC_ClockConfig+0x2e8>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	4912      	ldr	r1, [pc, #72]	; (80051a0 <HAL_RCC_ClockConfig+0x2e8>)
 8005156:	4313      	orrs	r3, r2
 8005158:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800515a:	f000 f829 	bl	80051b0 <HAL_RCC_GetSysClockFreq>
 800515e:	4601      	mov	r1, r0
 8005160:	4b0f      	ldr	r3, [pc, #60]	; (80051a0 <HAL_RCC_ClockConfig+0x2e8>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005168:	22f0      	movs	r2, #240	; 0xf0
 800516a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	fa92 f2a2 	rbit	r2, r2
 8005172:	60fa      	str	r2, [r7, #12]
  return result;
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	fab2 f282 	clz	r2, r2
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	40d3      	lsrs	r3, r2
 800517e:	4a09      	ldr	r2, [pc, #36]	; (80051a4 <HAL_RCC_ClockConfig+0x2ec>)
 8005180:	5cd3      	ldrb	r3, [r2, r3]
 8005182:	fa21 f303 	lsr.w	r3, r1, r3
 8005186:	4a08      	ldr	r2, [pc, #32]	; (80051a8 <HAL_RCC_ClockConfig+0x2f0>)
 8005188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800518a:	4b08      	ldr	r3, [pc, #32]	; (80051ac <HAL_RCC_ClockConfig+0x2f4>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f7fc fde2 	bl	8001d58 <HAL_InitTick>
  
  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3778      	adds	r7, #120	; 0x78
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	40021000 	.word	0x40021000
 80051a4:	0800aa48 	.word	0x0800aa48
 80051a8:	20000090 	.word	0x20000090
 80051ac:	20000094 	.word	0x20000094

080051b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b08b      	sub	sp, #44	; 0x2c
 80051b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051b6:	2300      	movs	r3, #0
 80051b8:	61fb      	str	r3, [r7, #28]
 80051ba:	2300      	movs	r3, #0
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	2300      	movs	r3, #0
 80051c0:	627b      	str	r3, [r7, #36]	; 0x24
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80051ca:	4b29      	ldr	r3, [pc, #164]	; (8005270 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	f003 030c 	and.w	r3, r3, #12
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d002      	beq.n	80051e0 <HAL_RCC_GetSysClockFreq+0x30>
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d003      	beq.n	80051e6 <HAL_RCC_GetSysClockFreq+0x36>
 80051de:	e03c      	b.n	800525a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80051e0:	4b24      	ldr	r3, [pc, #144]	; (8005274 <HAL_RCC_GetSysClockFreq+0xc4>)
 80051e2:	623b      	str	r3, [r7, #32]
      break;
 80051e4:	e03c      	b.n	8005260 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80051ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80051f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	fa92 f2a2 	rbit	r2, r2
 80051f8:	607a      	str	r2, [r7, #4]
  return result;
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	fab2 f282 	clz	r2, r2
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	40d3      	lsrs	r3, r2
 8005204:	4a1c      	ldr	r2, [pc, #112]	; (8005278 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005206:	5cd3      	ldrb	r3, [r2, r3]
 8005208:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800520a:	4b19      	ldr	r3, [pc, #100]	; (8005270 <HAL_RCC_GetSysClockFreq+0xc0>)
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520e:	f003 030f 	and.w	r3, r3, #15
 8005212:	220f      	movs	r2, #15
 8005214:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	fa92 f2a2 	rbit	r2, r2
 800521c:	60fa      	str	r2, [r7, #12]
  return result;
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	fab2 f282 	clz	r2, r2
 8005224:	b2d2      	uxtb	r2, r2
 8005226:	40d3      	lsrs	r3, r2
 8005228:	4a14      	ldr	r2, [pc, #80]	; (800527c <HAL_RCC_GetSysClockFreq+0xcc>)
 800522a:	5cd3      	ldrb	r3, [r2, r3]
 800522c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d008      	beq.n	800524a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005238:	4a0e      	ldr	r2, [pc, #56]	; (8005274 <HAL_RCC_GetSysClockFreq+0xc4>)
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	fb02 f303 	mul.w	r3, r2, r3
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
 8005248:	e004      	b.n	8005254 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	4a0c      	ldr	r2, [pc, #48]	; (8005280 <HAL_RCC_GetSysClockFreq+0xd0>)
 800524e:	fb02 f303 	mul.w	r3, r2, r3
 8005252:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	623b      	str	r3, [r7, #32]
      break;
 8005258:	e002      	b.n	8005260 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800525a:	4b06      	ldr	r3, [pc, #24]	; (8005274 <HAL_RCC_GetSysClockFreq+0xc4>)
 800525c:	623b      	str	r3, [r7, #32]
      break;
 800525e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005260:	6a3b      	ldr	r3, [r7, #32]
}
 8005262:	4618      	mov	r0, r3
 8005264:	372c      	adds	r7, #44	; 0x2c
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	40021000 	.word	0x40021000
 8005274:	007a1200 	.word	0x007a1200
 8005278:	0800aa60 	.word	0x0800aa60
 800527c:	0800aa70 	.word	0x0800aa70
 8005280:	003d0900 	.word	0x003d0900

08005284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005288:	4b03      	ldr	r3, [pc, #12]	; (8005298 <HAL_RCC_GetHCLKFreq+0x14>)
 800528a:	681b      	ldr	r3, [r3, #0]
}
 800528c:	4618      	mov	r0, r3
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	20000090 	.word	0x20000090

0800529c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80052a2:	f7ff ffef 	bl	8005284 <HAL_RCC_GetHCLKFreq>
 80052a6:	4601      	mov	r1, r0
 80052a8:	4b0b      	ldr	r3, [pc, #44]	; (80052d8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052b0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80052b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	fa92 f2a2 	rbit	r2, r2
 80052bc:	603a      	str	r2, [r7, #0]
  return result;
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	fab2 f282 	clz	r2, r2
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	40d3      	lsrs	r3, r2
 80052c8:	4a04      	ldr	r2, [pc, #16]	; (80052dc <HAL_RCC_GetPCLK1Freq+0x40>)
 80052ca:	5cd3      	ldrb	r3, [r2, r3]
 80052cc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80052d0:	4618      	mov	r0, r3
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	40021000 	.word	0x40021000
 80052dc:	0800aa58 	.word	0x0800aa58

080052e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80052e6:	f7ff ffcd 	bl	8005284 <HAL_RCC_GetHCLKFreq>
 80052ea:	4601      	mov	r1, r0
 80052ec:	4b0b      	ldr	r3, [pc, #44]	; (800531c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80052f4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80052f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	fa92 f2a2 	rbit	r2, r2
 8005300:	603a      	str	r2, [r7, #0]
  return result;
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	fab2 f282 	clz	r2, r2
 8005308:	b2d2      	uxtb	r2, r2
 800530a:	40d3      	lsrs	r3, r2
 800530c:	4a04      	ldr	r2, [pc, #16]	; (8005320 <HAL_RCC_GetPCLK2Freq+0x40>)
 800530e:	5cd3      	ldrb	r3, [r2, r3]
 8005310:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005314:	4618      	mov	r0, r3
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	40021000 	.word	0x40021000
 8005320:	0800aa58 	.word	0x0800aa58

08005324 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b092      	sub	sp, #72	; 0x48
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005334:	2300      	movs	r3, #0
 8005336:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 80d4 	beq.w	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005348:	4b4e      	ldr	r3, [pc, #312]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10e      	bne.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005354:	4b4b      	ldr	r3, [pc, #300]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	4a4a      	ldr	r2, [pc, #296]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800535a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800535e:	61d3      	str	r3, [r2, #28]
 8005360:	4b48      	ldr	r3, [pc, #288]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005362:	69db      	ldr	r3, [r3, #28]
 8005364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005368:	60bb      	str	r3, [r7, #8]
 800536a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800536c:	2301      	movs	r3, #1
 800536e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005372:	4b45      	ldr	r3, [pc, #276]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537a:	2b00      	cmp	r3, #0
 800537c:	d118      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800537e:	4b42      	ldr	r3, [pc, #264]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a41      	ldr	r2, [pc, #260]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005388:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800538a:	f7fc fd29 	bl	8001de0 <HAL_GetTick>
 800538e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005390:	e008      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005392:	f7fc fd25 	bl	8001de0 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b64      	cmp	r3, #100	; 0x64
 800539e:	d901      	bls.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e169      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a4:	4b38      	ldr	r3, [pc, #224]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0f0      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053b0:	4b34      	ldr	r3, [pc, #208]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 8084 	beq.w	80054ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d07c      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053d0:	4b2c      	ldr	r3, [pc, #176]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e2:	fa93 f3a3 	rbit	r3, r3
 80053e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80053e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053ea:	fab3 f383 	clz	r3, r3
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	461a      	mov	r2, r3
 80053f2:	4b26      	ldr	r3, [pc, #152]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80053f4:	4413      	add	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	461a      	mov	r2, r3
 80053fa:	2301      	movs	r3, #1
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005402:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005406:	fa93 f3a3 	rbit	r3, r3
 800540a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800540c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800540e:	fab3 f383 	clz	r3, r3
 8005412:	b2db      	uxtb	r3, r3
 8005414:	461a      	mov	r2, r3
 8005416:	4b1d      	ldr	r3, [pc, #116]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005418:	4413      	add	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	461a      	mov	r2, r3
 800541e:	2300      	movs	r3, #0
 8005420:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005422:	4a18      	ldr	r2, [pc, #96]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005426:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d04b      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005432:	f7fc fcd5 	bl	8001de0 <HAL_GetTick>
 8005436:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005438:	e00a      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800543a:	f7fc fcd1 	bl	8001de0 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	f241 3288 	movw	r2, #5000	; 0x1388
 8005448:	4293      	cmp	r3, r2
 800544a:	d901      	bls.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e113      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005450:	2302      	movs	r3, #2
 8005452:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005456:	fa93 f3a3 	rbit	r3, r3
 800545a:	627b      	str	r3, [r7, #36]	; 0x24
 800545c:	2302      	movs	r3, #2
 800545e:	623b      	str	r3, [r7, #32]
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	fa93 f3a3 	rbit	r3, r3
 8005466:	61fb      	str	r3, [r7, #28]
  return result;
 8005468:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800546a:	fab3 f383 	clz	r3, r3
 800546e:	b2db      	uxtb	r3, r3
 8005470:	095b      	lsrs	r3, r3, #5
 8005472:	b2db      	uxtb	r3, r3
 8005474:	f043 0302 	orr.w	r3, r3, #2
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d108      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800547e:	4b01      	ldr	r3, [pc, #4]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	e00d      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005484:	40021000 	.word	0x40021000
 8005488:	40007000 	.word	0x40007000
 800548c:	10908100 	.word	0x10908100
 8005490:	2302      	movs	r3, #2
 8005492:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	fa93 f3a3 	rbit	r3, r3
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	4b78      	ldr	r3, [pc, #480]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	2202      	movs	r2, #2
 80054a2:	613a      	str	r2, [r7, #16]
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	fa92 f2a2 	rbit	r2, r2
 80054aa:	60fa      	str	r2, [r7, #12]
  return result;
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	fab2 f282 	clz	r2, r2
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054b8:	b2d2      	uxtb	r2, r2
 80054ba:	f002 021f 	and.w	r2, r2, #31
 80054be:	2101      	movs	r1, #1
 80054c0:	fa01 f202 	lsl.w	r2, r1, r2
 80054c4:	4013      	ands	r3, r2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d0b7      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80054ca:	4b6d      	ldr	r3, [pc, #436]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	496a      	ldr	r1, [pc, #424]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80054dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d105      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054e4:	4b66      	ldr	r3, [pc, #408]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	4a65      	ldr	r2, [pc, #404]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d008      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054fc:	4b60      	ldr	r3, [pc, #384]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005500:	f023 0203 	bic.w	r2, r3, #3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	495d      	ldr	r1, [pc, #372]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800550a:	4313      	orrs	r3, r2
 800550c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d008      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800551a:	4b59      	ldr	r3, [pc, #356]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800551c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	4956      	ldr	r1, [pc, #344]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005528:	4313      	orrs	r3, r2
 800552a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0304 	and.w	r3, r3, #4
 8005534:	2b00      	cmp	r3, #0
 8005536:	d008      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005538:	4b51      	ldr	r3, [pc, #324]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800553a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	494e      	ldr	r1, [pc, #312]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005546:	4313      	orrs	r3, r2
 8005548:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0320 	and.w	r3, r3, #32
 8005552:	2b00      	cmp	r3, #0
 8005554:	d008      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005556:	4b4a      	ldr	r3, [pc, #296]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555a:	f023 0210 	bic.w	r2, r3, #16
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	4947      	ldr	r1, [pc, #284]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005564:	4313      	orrs	r3, r2
 8005566:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d008      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005574:	4b42      	ldr	r3, [pc, #264]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	493f      	ldr	r1, [pc, #252]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005582:	4313      	orrs	r3, r2
 8005584:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558e:	2b00      	cmp	r3, #0
 8005590:	d008      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005592:	4b3b      	ldr	r3, [pc, #236]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005596:	f023 0220 	bic.w	r2, r3, #32
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	4938      	ldr	r1, [pc, #224]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d008      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055b0:	4b33      	ldr	r3, [pc, #204]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	4930      	ldr	r1, [pc, #192]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0310 	and.w	r3, r3, #16
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d008      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055ce:	4b2c      	ldr	r3, [pc, #176]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	4929      	ldr	r1, [pc, #164]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d008      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80055ec:	4b24      	ldr	r3, [pc, #144]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f8:	4921      	ldr	r1, [pc, #132]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005606:	2b00      	cmp	r3, #0
 8005608:	d008      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800560a:	4b1d      	ldr	r3, [pc, #116]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800560c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	491a      	ldr	r1, [pc, #104]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005618:	4313      	orrs	r3, r2
 800561a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005624:	2b00      	cmp	r3, #0
 8005626:	d008      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005628:	4b15      	ldr	r3, [pc, #84]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005634:	4912      	ldr	r1, [pc, #72]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005636:	4313      	orrs	r3, r2
 8005638:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d008      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005646:	4b0e      	ldr	r3, [pc, #56]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005652:	490b      	ldr	r1, [pc, #44]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005654:	4313      	orrs	r3, r2
 8005656:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d008      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005664:	4b06      	ldr	r3, [pc, #24]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005668:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005670:	4903      	ldr	r1, [pc, #12]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005672:	4313      	orrs	r3, r2
 8005674:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3748      	adds	r7, #72	; 0x48
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	40021000 	.word	0x40021000

08005684 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e09d      	b.n	80057d2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	2b00      	cmp	r3, #0
 800569c:	d108      	bne.n	80056b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056a6:	d009      	beq.n	80056bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	61da      	str	r2, [r3, #28]
 80056ae:	e005      	b.n	80056bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d106      	bne.n	80056dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7fb ffd2 	bl	8001680 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056fc:	d902      	bls.n	8005704 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80056fe:	2300      	movs	r3, #0
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	e002      	b.n	800570a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005708:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005712:	d007      	beq.n	8005724 <HAL_SPI_Init+0xa0>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800571c:	d002      	beq.n	8005724 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005734:	431a      	orrs	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	431a      	orrs	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	431a      	orrs	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005752:	431a      	orrs	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800575c:	431a      	orrs	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005766:	ea42 0103 	orr.w	r1, r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	0c1b      	lsrs	r3, r3, #16
 8005780:	f003 0204 	and.w	r2, r3, #4
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	f003 0310 	and.w	r3, r3, #16
 800578c:	431a      	orrs	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005792:	f003 0308 	and.w	r3, r3, #8
 8005796:	431a      	orrs	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80057a0:	ea42 0103 	orr.w	r1, r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	69da      	ldr	r2, [r3, #28]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b082      	sub	sp, #8
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e049      	b.n	8005880 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d106      	bne.n	8005806 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7fb ff7f 	bl	8001704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2202      	movs	r2, #2
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	3304      	adds	r3, #4
 8005816:	4619      	mov	r1, r3
 8005818:	4610      	mov	r0, r2
 800581a:	f000 fd27 	bl	800626c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b01      	cmp	r3, #1
 800589a:	d001      	beq.n	80058a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e04a      	b.n	8005936 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0201 	orr.w	r2, r2, #1
 80058b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a21      	ldr	r2, [pc, #132]	; (8005944 <HAL_TIM_Base_Start_IT+0xbc>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d018      	beq.n	80058f4 <HAL_TIM_Base_Start_IT+0x6c>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ca:	d013      	beq.n	80058f4 <HAL_TIM_Base_Start_IT+0x6c>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a1d      	ldr	r2, [pc, #116]	; (8005948 <HAL_TIM_Base_Start_IT+0xc0>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d00e      	beq.n	80058f4 <HAL_TIM_Base_Start_IT+0x6c>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a1c      	ldr	r2, [pc, #112]	; (800594c <HAL_TIM_Base_Start_IT+0xc4>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d009      	beq.n	80058f4 <HAL_TIM_Base_Start_IT+0x6c>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a1a      	ldr	r2, [pc, #104]	; (8005950 <HAL_TIM_Base_Start_IT+0xc8>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d004      	beq.n	80058f4 <HAL_TIM_Base_Start_IT+0x6c>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a19      	ldr	r2, [pc, #100]	; (8005954 <HAL_TIM_Base_Start_IT+0xcc>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d115      	bne.n	8005920 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	4b17      	ldr	r3, [pc, #92]	; (8005958 <HAL_TIM_Base_Start_IT+0xd0>)
 80058fc:	4013      	ands	r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2b06      	cmp	r3, #6
 8005904:	d015      	beq.n	8005932 <HAL_TIM_Base_Start_IT+0xaa>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800590c:	d011      	beq.n	8005932 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f042 0201 	orr.w	r2, r2, #1
 800591c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800591e:	e008      	b.n	8005932 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0201 	orr.w	r2, r2, #1
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	e000      	b.n	8005934 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005932:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	40012c00 	.word	0x40012c00
 8005948:	40000400 	.word	0x40000400
 800594c:	40000800 	.word	0x40000800
 8005950:	40013400 	.word	0x40013400
 8005954:	40014000 	.word	0x40014000
 8005958:	00010007 	.word	0x00010007

0800595c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e049      	b.n	8005a02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d106      	bne.n	8005988 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f841 	bl	8005a0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3304      	adds	r3, #4
 8005998:	4619      	mov	r1, r3
 800599a:	4610      	mov	r0, r2
 800599c:	f000 fc66 	bl	800626c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a12:	bf00      	nop
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
	...

08005a20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d109      	bne.n	8005a44 <HAL_TIM_PWM_Start+0x24>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	bf14      	ite	ne
 8005a3c:	2301      	movne	r3, #1
 8005a3e:	2300      	moveq	r3, #0
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	e03c      	b.n	8005abe <HAL_TIM_PWM_Start+0x9e>
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d109      	bne.n	8005a5e <HAL_TIM_PWM_Start+0x3e>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	bf14      	ite	ne
 8005a56:	2301      	movne	r3, #1
 8005a58:	2300      	moveq	r3, #0
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	e02f      	b.n	8005abe <HAL_TIM_PWM_Start+0x9e>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d109      	bne.n	8005a78 <HAL_TIM_PWM_Start+0x58>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	bf14      	ite	ne
 8005a70:	2301      	movne	r3, #1
 8005a72:	2300      	moveq	r3, #0
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	e022      	b.n	8005abe <HAL_TIM_PWM_Start+0x9e>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b0c      	cmp	r3, #12
 8005a7c:	d109      	bne.n	8005a92 <HAL_TIM_PWM_Start+0x72>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	bf14      	ite	ne
 8005a8a:	2301      	movne	r3, #1
 8005a8c:	2300      	moveq	r3, #0
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	e015      	b.n	8005abe <HAL_TIM_PWM_Start+0x9e>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b10      	cmp	r3, #16
 8005a96:	d109      	bne.n	8005aac <HAL_TIM_PWM_Start+0x8c>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	bf14      	ite	ne
 8005aa4:	2301      	movne	r3, #1
 8005aa6:	2300      	moveq	r3, #0
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	e008      	b.n	8005abe <HAL_TIM_PWM_Start+0x9e>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	bf14      	ite	ne
 8005ab8:	2301      	movne	r3, #1
 8005aba:	2300      	moveq	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e097      	b.n	8005bf6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d104      	bne.n	8005ad6 <HAL_TIM_PWM_Start+0xb6>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ad4:	e023      	b.n	8005b1e <HAL_TIM_PWM_Start+0xfe>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d104      	bne.n	8005ae6 <HAL_TIM_PWM_Start+0xc6>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ae4:	e01b      	b.n	8005b1e <HAL_TIM_PWM_Start+0xfe>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d104      	bne.n	8005af6 <HAL_TIM_PWM_Start+0xd6>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005af4:	e013      	b.n	8005b1e <HAL_TIM_PWM_Start+0xfe>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b0c      	cmp	r3, #12
 8005afa:	d104      	bne.n	8005b06 <HAL_TIM_PWM_Start+0xe6>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b04:	e00b      	b.n	8005b1e <HAL_TIM_PWM_Start+0xfe>
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b10      	cmp	r3, #16
 8005b0a:	d104      	bne.n	8005b16 <HAL_TIM_PWM_Start+0xf6>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b14:	e003      	b.n	8005b1e <HAL_TIM_PWM_Start+0xfe>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2201      	movs	r2, #1
 8005b24:	6839      	ldr	r1, [r7, #0]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 ffa0 	bl	8006a6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a33      	ldr	r2, [pc, #204]	; (8005c00 <HAL_TIM_PWM_Start+0x1e0>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d013      	beq.n	8005b5e <HAL_TIM_PWM_Start+0x13e>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a32      	ldr	r2, [pc, #200]	; (8005c04 <HAL_TIM_PWM_Start+0x1e4>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d00e      	beq.n	8005b5e <HAL_TIM_PWM_Start+0x13e>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a30      	ldr	r2, [pc, #192]	; (8005c08 <HAL_TIM_PWM_Start+0x1e8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d009      	beq.n	8005b5e <HAL_TIM_PWM_Start+0x13e>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a2f      	ldr	r2, [pc, #188]	; (8005c0c <HAL_TIM_PWM_Start+0x1ec>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d004      	beq.n	8005b5e <HAL_TIM_PWM_Start+0x13e>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a2d      	ldr	r2, [pc, #180]	; (8005c10 <HAL_TIM_PWM_Start+0x1f0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d101      	bne.n	8005b62 <HAL_TIM_PWM_Start+0x142>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e000      	b.n	8005b64 <HAL_TIM_PWM_Start+0x144>
 8005b62:	2300      	movs	r3, #0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d007      	beq.n	8005b78 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b76:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a20      	ldr	r2, [pc, #128]	; (8005c00 <HAL_TIM_PWM_Start+0x1e0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d018      	beq.n	8005bb4 <HAL_TIM_PWM_Start+0x194>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b8a:	d013      	beq.n	8005bb4 <HAL_TIM_PWM_Start+0x194>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a20      	ldr	r2, [pc, #128]	; (8005c14 <HAL_TIM_PWM_Start+0x1f4>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d00e      	beq.n	8005bb4 <HAL_TIM_PWM_Start+0x194>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a1f      	ldr	r2, [pc, #124]	; (8005c18 <HAL_TIM_PWM_Start+0x1f8>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d009      	beq.n	8005bb4 <HAL_TIM_PWM_Start+0x194>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a17      	ldr	r2, [pc, #92]	; (8005c04 <HAL_TIM_PWM_Start+0x1e4>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d004      	beq.n	8005bb4 <HAL_TIM_PWM_Start+0x194>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a16      	ldr	r2, [pc, #88]	; (8005c08 <HAL_TIM_PWM_Start+0x1e8>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d115      	bne.n	8005be0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	4b18      	ldr	r3, [pc, #96]	; (8005c1c <HAL_TIM_PWM_Start+0x1fc>)
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2b06      	cmp	r3, #6
 8005bc4:	d015      	beq.n	8005bf2 <HAL_TIM_PWM_Start+0x1d2>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bcc:	d011      	beq.n	8005bf2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f042 0201 	orr.w	r2, r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bde:	e008      	b.n	8005bf2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0201 	orr.w	r2, r2, #1
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	e000      	b.n	8005bf4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40012c00 	.word	0x40012c00
 8005c04:	40013400 	.word	0x40013400
 8005c08:	40014000 	.word	0x40014000
 8005c0c:	40014400 	.word	0x40014400
 8005c10:	40014800 	.word	0x40014800
 8005c14:	40000400 	.word	0x40000400
 8005c18:	40000800 	.word	0x40000800
 8005c1c:	00010007 	.word	0x00010007

08005c20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d122      	bne.n	8005c7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d11b      	bne.n	8005c7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f06f 0202 	mvn.w	r2, #2
 8005c4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fae3 	bl	800622e <HAL_TIM_IC_CaptureCallback>
 8005c68:	e005      	b.n	8005c76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fad5 	bl	800621a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 fae6 	bl	8006242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	f003 0304 	and.w	r3, r3, #4
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d122      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f003 0304 	and.w	r3, r3, #4
 8005c94:	2b04      	cmp	r3, #4
 8005c96:	d11b      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f06f 0204 	mvn.w	r2, #4
 8005ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fab9 	bl	800622e <HAL_TIM_IC_CaptureCallback>
 8005cbc:	e005      	b.n	8005cca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 faab 	bl	800621a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fabc 	bl	8006242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	f003 0308 	and.w	r3, r3, #8
 8005cda:	2b08      	cmp	r3, #8
 8005cdc:	d122      	bne.n	8005d24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f003 0308 	and.w	r3, r3, #8
 8005ce8:	2b08      	cmp	r3, #8
 8005cea:	d11b      	bne.n	8005d24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f06f 0208 	mvn.w	r2, #8
 8005cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2204      	movs	r2, #4
 8005cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	f003 0303 	and.w	r3, r3, #3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fa8f 	bl	800622e <HAL_TIM_IC_CaptureCallback>
 8005d10:	e005      	b.n	8005d1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fa81 	bl	800621a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fa92 	bl	8006242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f003 0310 	and.w	r3, r3, #16
 8005d2e:	2b10      	cmp	r3, #16
 8005d30:	d122      	bne.n	8005d78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	f003 0310 	and.w	r3, r3, #16
 8005d3c:	2b10      	cmp	r3, #16
 8005d3e:	d11b      	bne.n	8005d78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f06f 0210 	mvn.w	r2, #16
 8005d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2208      	movs	r2, #8
 8005d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fa65 	bl	800622e <HAL_TIM_IC_CaptureCallback>
 8005d64:	e005      	b.n	8005d72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fa57 	bl	800621a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fa68 	bl	8006242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d10e      	bne.n	8005da4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d107      	bne.n	8005da4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f06f 0201 	mvn.w	r2, #1
 8005d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7fb fb44 	bl	800142c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dae:	2b80      	cmp	r3, #128	; 0x80
 8005db0:	d10e      	bne.n	8005dd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dbc:	2b80      	cmp	r3, #128	; 0x80
 8005dbe:	d107      	bne.n	8005dd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fefe 	bl	8006bcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dde:	d10e      	bne.n	8005dfe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dea:	2b80      	cmp	r3, #128	; 0x80
 8005dec:	d107      	bne.n	8005dfe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 fef1 	bl	8006be0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e08:	2b40      	cmp	r3, #64	; 0x40
 8005e0a:	d10e      	bne.n	8005e2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e16:	2b40      	cmp	r3, #64	; 0x40
 8005e18:	d107      	bne.n	8005e2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fa16 	bl	8006256 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	f003 0320 	and.w	r3, r3, #32
 8005e34:	2b20      	cmp	r3, #32
 8005e36:	d10e      	bne.n	8005e56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f003 0320 	and.w	r3, r3, #32
 8005e42:	2b20      	cmp	r3, #32
 8005e44:	d107      	bne.n	8005e56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f06f 0220 	mvn.w	r2, #32
 8005e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 feb1 	bl	8006bb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e56:	bf00      	nop
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d101      	bne.n	8005e7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	e0ff      	b.n	800607e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b14      	cmp	r3, #20
 8005e8a:	f200 80f0 	bhi.w	800606e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005e8e:	a201      	add	r2, pc, #4	; (adr r2, 8005e94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e94:	08005ee9 	.word	0x08005ee9
 8005e98:	0800606f 	.word	0x0800606f
 8005e9c:	0800606f 	.word	0x0800606f
 8005ea0:	0800606f 	.word	0x0800606f
 8005ea4:	08005f29 	.word	0x08005f29
 8005ea8:	0800606f 	.word	0x0800606f
 8005eac:	0800606f 	.word	0x0800606f
 8005eb0:	0800606f 	.word	0x0800606f
 8005eb4:	08005f6b 	.word	0x08005f6b
 8005eb8:	0800606f 	.word	0x0800606f
 8005ebc:	0800606f 	.word	0x0800606f
 8005ec0:	0800606f 	.word	0x0800606f
 8005ec4:	08005fab 	.word	0x08005fab
 8005ec8:	0800606f 	.word	0x0800606f
 8005ecc:	0800606f 	.word	0x0800606f
 8005ed0:	0800606f 	.word	0x0800606f
 8005ed4:	08005fed 	.word	0x08005fed
 8005ed8:	0800606f 	.word	0x0800606f
 8005edc:	0800606f 	.word	0x0800606f
 8005ee0:	0800606f 	.word	0x0800606f
 8005ee4:	0800602d 	.word	0x0800602d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68b9      	ldr	r1, [r7, #8]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 fa4c 	bl	800638c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	699a      	ldr	r2, [r3, #24]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f042 0208 	orr.w	r2, r2, #8
 8005f02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699a      	ldr	r2, [r3, #24]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 0204 	bic.w	r2, r2, #4
 8005f12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6999      	ldr	r1, [r3, #24]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	691a      	ldr	r2, [r3, #16]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	430a      	orrs	r2, r1
 8005f24:	619a      	str	r2, [r3, #24]
      break;
 8005f26:	e0a5      	b.n	8006074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68b9      	ldr	r1, [r7, #8]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 fabc 	bl	80064ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699a      	ldr	r2, [r3, #24]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	699a      	ldr	r2, [r3, #24]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6999      	ldr	r1, [r3, #24]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	021a      	lsls	r2, r3, #8
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	619a      	str	r2, [r3, #24]
      break;
 8005f68:	e084      	b.n	8006074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68b9      	ldr	r1, [r7, #8]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 fb25 	bl	80065c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	69da      	ldr	r2, [r3, #28]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f042 0208 	orr.w	r2, r2, #8
 8005f84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	69da      	ldr	r2, [r3, #28]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f022 0204 	bic.w	r2, r2, #4
 8005f94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	69d9      	ldr	r1, [r3, #28]
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	691a      	ldr	r2, [r3, #16]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	61da      	str	r2, [r3, #28]
      break;
 8005fa8:	e064      	b.n	8006074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68b9      	ldr	r1, [r7, #8]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f000 fb8d 	bl	80066d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	69da      	ldr	r2, [r3, #28]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69da      	ldr	r2, [r3, #28]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	69d9      	ldr	r1, [r3, #28]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	021a      	lsls	r2, r3, #8
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	61da      	str	r2, [r3, #28]
      break;
 8005fea:	e043      	b.n	8006074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68b9      	ldr	r1, [r7, #8]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 fbd6 	bl	80067a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f042 0208 	orr.w	r2, r2, #8
 8006006:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 0204 	bic.w	r2, r2, #4
 8006016:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	691a      	ldr	r2, [r3, #16]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800602a:	e023      	b.n	8006074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68b9      	ldr	r1, [r7, #8]
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fc1a 	bl	800686c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006046:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006056:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	021a      	lsls	r2, r3, #8
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	430a      	orrs	r2, r1
 800606a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800606c:	e002      	b.n	8006074 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	75fb      	strb	r3, [r7, #23]
      break;
 8006072:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800607c:	7dfb      	ldrb	r3, [r7, #23]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop

08006088 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <HAL_TIM_ConfigClockSource+0x1c>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e0b6      	b.n	8006212 <HAL_TIM_ConfigClockSource+0x18a>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e0:	d03e      	beq.n	8006160 <HAL_TIM_ConfigClockSource+0xd8>
 80060e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e6:	f200 8087 	bhi.w	80061f8 <HAL_TIM_ConfigClockSource+0x170>
 80060ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ee:	f000 8086 	beq.w	80061fe <HAL_TIM_ConfigClockSource+0x176>
 80060f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f6:	d87f      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x170>
 80060f8:	2b70      	cmp	r3, #112	; 0x70
 80060fa:	d01a      	beq.n	8006132 <HAL_TIM_ConfigClockSource+0xaa>
 80060fc:	2b70      	cmp	r3, #112	; 0x70
 80060fe:	d87b      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x170>
 8006100:	2b60      	cmp	r3, #96	; 0x60
 8006102:	d050      	beq.n	80061a6 <HAL_TIM_ConfigClockSource+0x11e>
 8006104:	2b60      	cmp	r3, #96	; 0x60
 8006106:	d877      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x170>
 8006108:	2b50      	cmp	r3, #80	; 0x50
 800610a:	d03c      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0xfe>
 800610c:	2b50      	cmp	r3, #80	; 0x50
 800610e:	d873      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x170>
 8006110:	2b40      	cmp	r3, #64	; 0x40
 8006112:	d058      	beq.n	80061c6 <HAL_TIM_ConfigClockSource+0x13e>
 8006114:	2b40      	cmp	r3, #64	; 0x40
 8006116:	d86f      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x170>
 8006118:	2b30      	cmp	r3, #48	; 0x30
 800611a:	d064      	beq.n	80061e6 <HAL_TIM_ConfigClockSource+0x15e>
 800611c:	2b30      	cmp	r3, #48	; 0x30
 800611e:	d86b      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x170>
 8006120:	2b20      	cmp	r3, #32
 8006122:	d060      	beq.n	80061e6 <HAL_TIM_ConfigClockSource+0x15e>
 8006124:	2b20      	cmp	r3, #32
 8006126:	d867      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x170>
 8006128:	2b00      	cmp	r3, #0
 800612a:	d05c      	beq.n	80061e6 <HAL_TIM_ConfigClockSource+0x15e>
 800612c:	2b10      	cmp	r3, #16
 800612e:	d05a      	beq.n	80061e6 <HAL_TIM_ConfigClockSource+0x15e>
 8006130:	e062      	b.n	80061f8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6818      	ldr	r0, [r3, #0]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	6899      	ldr	r1, [r3, #8]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f000 fc73 	bl	8006a2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006154:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	609a      	str	r2, [r3, #8]
      break;
 800615e:	e04f      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6818      	ldr	r0, [r3, #0]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	6899      	ldr	r1, [r3, #8]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f000 fc5c 	bl	8006a2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689a      	ldr	r2, [r3, #8]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006182:	609a      	str	r2, [r3, #8]
      break;
 8006184:	e03c      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6818      	ldr	r0, [r3, #0]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	6859      	ldr	r1, [r3, #4]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	461a      	mov	r2, r3
 8006194:	f000 fbd0 	bl	8006938 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2150      	movs	r1, #80	; 0x50
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 fc29 	bl	80069f6 <TIM_ITRx_SetConfig>
      break;
 80061a4:	e02c      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6818      	ldr	r0, [r3, #0]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	6859      	ldr	r1, [r3, #4]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	461a      	mov	r2, r3
 80061b4:	f000 fbef 	bl	8006996 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2160      	movs	r1, #96	; 0x60
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 fc19 	bl	80069f6 <TIM_ITRx_SetConfig>
      break;
 80061c4:	e01c      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6818      	ldr	r0, [r3, #0]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	6859      	ldr	r1, [r3, #4]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	461a      	mov	r2, r3
 80061d4:	f000 fbb0 	bl	8006938 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2140      	movs	r1, #64	; 0x40
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 fc09 	bl	80069f6 <TIM_ITRx_SetConfig>
      break;
 80061e4:	e00c      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4619      	mov	r1, r3
 80061f0:	4610      	mov	r0, r2
 80061f2:	f000 fc00 	bl	80069f6 <TIM_ITRx_SetConfig>
      break;
 80061f6:	e003      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	73fb      	strb	r3, [r7, #15]
      break;
 80061fc:	e000      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80061fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006210:	7bfb      	ldrb	r3, [r7, #15]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006222:	bf00      	nop
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800624a:	bf00      	nop
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006256:	b480      	push	{r7}
 8006258:	b083      	sub	sp, #12
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800625e:	bf00      	nop
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
	...

0800626c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a3c      	ldr	r2, [pc, #240]	; (8006370 <TIM_Base_SetConfig+0x104>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00f      	beq.n	80062a4 <TIM_Base_SetConfig+0x38>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800628a:	d00b      	beq.n	80062a4 <TIM_Base_SetConfig+0x38>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a39      	ldr	r2, [pc, #228]	; (8006374 <TIM_Base_SetConfig+0x108>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d007      	beq.n	80062a4 <TIM_Base_SetConfig+0x38>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a38      	ldr	r2, [pc, #224]	; (8006378 <TIM_Base_SetConfig+0x10c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d003      	beq.n	80062a4 <TIM_Base_SetConfig+0x38>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a37      	ldr	r2, [pc, #220]	; (800637c <TIM_Base_SetConfig+0x110>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d108      	bne.n	80062b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a2d      	ldr	r2, [pc, #180]	; (8006370 <TIM_Base_SetConfig+0x104>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d01b      	beq.n	80062f6 <TIM_Base_SetConfig+0x8a>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c4:	d017      	beq.n	80062f6 <TIM_Base_SetConfig+0x8a>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a2a      	ldr	r2, [pc, #168]	; (8006374 <TIM_Base_SetConfig+0x108>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d013      	beq.n	80062f6 <TIM_Base_SetConfig+0x8a>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a29      	ldr	r2, [pc, #164]	; (8006378 <TIM_Base_SetConfig+0x10c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00f      	beq.n	80062f6 <TIM_Base_SetConfig+0x8a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a28      	ldr	r2, [pc, #160]	; (800637c <TIM_Base_SetConfig+0x110>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00b      	beq.n	80062f6 <TIM_Base_SetConfig+0x8a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a27      	ldr	r2, [pc, #156]	; (8006380 <TIM_Base_SetConfig+0x114>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d007      	beq.n	80062f6 <TIM_Base_SetConfig+0x8a>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a26      	ldr	r2, [pc, #152]	; (8006384 <TIM_Base_SetConfig+0x118>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d003      	beq.n	80062f6 <TIM_Base_SetConfig+0x8a>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a25      	ldr	r2, [pc, #148]	; (8006388 <TIM_Base_SetConfig+0x11c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d108      	bne.n	8006308 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a10      	ldr	r2, [pc, #64]	; (8006370 <TIM_Base_SetConfig+0x104>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d00f      	beq.n	8006354 <TIM_Base_SetConfig+0xe8>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a11      	ldr	r2, [pc, #68]	; (800637c <TIM_Base_SetConfig+0x110>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00b      	beq.n	8006354 <TIM_Base_SetConfig+0xe8>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a10      	ldr	r2, [pc, #64]	; (8006380 <TIM_Base_SetConfig+0x114>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d007      	beq.n	8006354 <TIM_Base_SetConfig+0xe8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a0f      	ldr	r2, [pc, #60]	; (8006384 <TIM_Base_SetConfig+0x118>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d003      	beq.n	8006354 <TIM_Base_SetConfig+0xe8>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a0e      	ldr	r2, [pc, #56]	; (8006388 <TIM_Base_SetConfig+0x11c>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d103      	bne.n	800635c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	691a      	ldr	r2, [r3, #16]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	615a      	str	r2, [r3, #20]
}
 8006362:	bf00      	nop
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	40012c00 	.word	0x40012c00
 8006374:	40000400 	.word	0x40000400
 8006378:	40000800 	.word	0x40000800
 800637c:	40013400 	.word	0x40013400
 8006380:	40014000 	.word	0x40014000
 8006384:	40014400 	.word	0x40014400
 8006388:	40014800 	.word	0x40014800

0800638c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	f023 0201 	bic.w	r2, r3, #1
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f023 0303 	bic.w	r3, r3, #3
 80063c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f023 0302 	bic.w	r3, r3, #2
 80063d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a2c      	ldr	r2, [pc, #176]	; (8006498 <TIM_OC1_SetConfig+0x10c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d00f      	beq.n	800640c <TIM_OC1_SetConfig+0x80>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a2b      	ldr	r2, [pc, #172]	; (800649c <TIM_OC1_SetConfig+0x110>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d00b      	beq.n	800640c <TIM_OC1_SetConfig+0x80>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a2a      	ldr	r2, [pc, #168]	; (80064a0 <TIM_OC1_SetConfig+0x114>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d007      	beq.n	800640c <TIM_OC1_SetConfig+0x80>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a29      	ldr	r2, [pc, #164]	; (80064a4 <TIM_OC1_SetConfig+0x118>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d003      	beq.n	800640c <TIM_OC1_SetConfig+0x80>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a28      	ldr	r2, [pc, #160]	; (80064a8 <TIM_OC1_SetConfig+0x11c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d10c      	bne.n	8006426 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f023 0308 	bic.w	r3, r3, #8
 8006412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	4313      	orrs	r3, r2
 800641c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f023 0304 	bic.w	r3, r3, #4
 8006424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a1b      	ldr	r2, [pc, #108]	; (8006498 <TIM_OC1_SetConfig+0x10c>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d00f      	beq.n	800644e <TIM_OC1_SetConfig+0xc2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a1a      	ldr	r2, [pc, #104]	; (800649c <TIM_OC1_SetConfig+0x110>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d00b      	beq.n	800644e <TIM_OC1_SetConfig+0xc2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a19      	ldr	r2, [pc, #100]	; (80064a0 <TIM_OC1_SetConfig+0x114>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d007      	beq.n	800644e <TIM_OC1_SetConfig+0xc2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a18      	ldr	r2, [pc, #96]	; (80064a4 <TIM_OC1_SetConfig+0x118>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d003      	beq.n	800644e <TIM_OC1_SetConfig+0xc2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a17      	ldr	r2, [pc, #92]	; (80064a8 <TIM_OC1_SetConfig+0x11c>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d111      	bne.n	8006472 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800645c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	4313      	orrs	r3, r2
 8006466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	4313      	orrs	r3, r2
 8006470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	621a      	str	r2, [r3, #32]
}
 800648c:	bf00      	nop
 800648e:	371c      	adds	r7, #28
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	40012c00 	.word	0x40012c00
 800649c:	40013400 	.word	0x40013400
 80064a0:	40014000 	.word	0x40014000
 80064a4:	40014400 	.word	0x40014400
 80064a8:	40014800 	.word	0x40014800

080064ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	f023 0210 	bic.w	r2, r3, #16
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	021b      	lsls	r3, r3, #8
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f023 0320 	bic.w	r3, r3, #32
 80064fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	011b      	lsls	r3, r3, #4
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	4313      	orrs	r3, r2
 8006506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a28      	ldr	r2, [pc, #160]	; (80065ac <TIM_OC2_SetConfig+0x100>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d003      	beq.n	8006518 <TIM_OC2_SetConfig+0x6c>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a27      	ldr	r2, [pc, #156]	; (80065b0 <TIM_OC2_SetConfig+0x104>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d10d      	bne.n	8006534 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800651e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	011b      	lsls	r3, r3, #4
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	4313      	orrs	r3, r2
 800652a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006532:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a1d      	ldr	r2, [pc, #116]	; (80065ac <TIM_OC2_SetConfig+0x100>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d00f      	beq.n	800655c <TIM_OC2_SetConfig+0xb0>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a1c      	ldr	r2, [pc, #112]	; (80065b0 <TIM_OC2_SetConfig+0x104>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d00b      	beq.n	800655c <TIM_OC2_SetConfig+0xb0>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a1b      	ldr	r2, [pc, #108]	; (80065b4 <TIM_OC2_SetConfig+0x108>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d007      	beq.n	800655c <TIM_OC2_SetConfig+0xb0>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a1a      	ldr	r2, [pc, #104]	; (80065b8 <TIM_OC2_SetConfig+0x10c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d003      	beq.n	800655c <TIM_OC2_SetConfig+0xb0>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a19      	ldr	r2, [pc, #100]	; (80065bc <TIM_OC2_SetConfig+0x110>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d113      	bne.n	8006584 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006562:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800656a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	695b      	ldr	r3, [r3, #20]
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	4313      	orrs	r3, r2
 8006576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	4313      	orrs	r3, r2
 8006582:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	621a      	str	r2, [r3, #32]
}
 800659e:	bf00      	nop
 80065a0:	371c      	adds	r7, #28
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	40012c00 	.word	0x40012c00
 80065b0:	40013400 	.word	0x40013400
 80065b4:	40014000 	.word	0x40014000
 80065b8:	40014400 	.word	0x40014400
 80065bc:	40014800 	.word	0x40014800

080065c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 0303 	bic.w	r3, r3, #3
 80065fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	4313      	orrs	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800660c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	021b      	lsls	r3, r3, #8
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	4313      	orrs	r3, r2
 8006618:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a27      	ldr	r2, [pc, #156]	; (80066bc <TIM_OC3_SetConfig+0xfc>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d003      	beq.n	800662a <TIM_OC3_SetConfig+0x6a>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a26      	ldr	r2, [pc, #152]	; (80066c0 <TIM_OC3_SetConfig+0x100>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d10d      	bne.n	8006646 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006630:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	021b      	lsls	r3, r3, #8
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	4313      	orrs	r3, r2
 800663c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006644:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a1c      	ldr	r2, [pc, #112]	; (80066bc <TIM_OC3_SetConfig+0xfc>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d00f      	beq.n	800666e <TIM_OC3_SetConfig+0xae>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a1b      	ldr	r2, [pc, #108]	; (80066c0 <TIM_OC3_SetConfig+0x100>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d00b      	beq.n	800666e <TIM_OC3_SetConfig+0xae>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a1a      	ldr	r2, [pc, #104]	; (80066c4 <TIM_OC3_SetConfig+0x104>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d007      	beq.n	800666e <TIM_OC3_SetConfig+0xae>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a19      	ldr	r2, [pc, #100]	; (80066c8 <TIM_OC3_SetConfig+0x108>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d003      	beq.n	800666e <TIM_OC3_SetConfig+0xae>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a18      	ldr	r2, [pc, #96]	; (80066cc <TIM_OC3_SetConfig+0x10c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d113      	bne.n	8006696 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800667c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	011b      	lsls	r3, r3, #4
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	4313      	orrs	r3, r2
 8006688:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	011b      	lsls	r3, r3, #4
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	4313      	orrs	r3, r2
 8006694:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	621a      	str	r2, [r3, #32]
}
 80066b0:	bf00      	nop
 80066b2:	371c      	adds	r7, #28
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr
 80066bc:	40012c00 	.word	0x40012c00
 80066c0:	40013400 	.word	0x40013400
 80066c4:	40014000 	.word	0x40014000
 80066c8:	40014400 	.word	0x40014400
 80066cc:	40014800 	.word	0x40014800

080066d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800670a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	021b      	lsls	r3, r3, #8
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	4313      	orrs	r3, r2
 8006716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800671e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	031b      	lsls	r3, r3, #12
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	4313      	orrs	r3, r2
 800672a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a18      	ldr	r2, [pc, #96]	; (8006790 <TIM_OC4_SetConfig+0xc0>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d00f      	beq.n	8006754 <TIM_OC4_SetConfig+0x84>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a17      	ldr	r2, [pc, #92]	; (8006794 <TIM_OC4_SetConfig+0xc4>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d00b      	beq.n	8006754 <TIM_OC4_SetConfig+0x84>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a16      	ldr	r2, [pc, #88]	; (8006798 <TIM_OC4_SetConfig+0xc8>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d007      	beq.n	8006754 <TIM_OC4_SetConfig+0x84>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a15      	ldr	r2, [pc, #84]	; (800679c <TIM_OC4_SetConfig+0xcc>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d003      	beq.n	8006754 <TIM_OC4_SetConfig+0x84>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a14      	ldr	r2, [pc, #80]	; (80067a0 <TIM_OC4_SetConfig+0xd0>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d109      	bne.n	8006768 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800675a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	019b      	lsls	r3, r3, #6
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	4313      	orrs	r3, r2
 8006766:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	621a      	str	r2, [r3, #32]
}
 8006782:	bf00      	nop
 8006784:	371c      	adds	r7, #28
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	40012c00 	.word	0x40012c00
 8006794:	40013400 	.word	0x40013400
 8006798:	40014000 	.word	0x40014000
 800679c:	40014400 	.word	0x40014400
 80067a0:	40014800 	.word	0x40014800

080067a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	4313      	orrs	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80067e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	041b      	lsls	r3, r3, #16
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a17      	ldr	r2, [pc, #92]	; (8006858 <TIM_OC5_SetConfig+0xb4>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d00f      	beq.n	800681e <TIM_OC5_SetConfig+0x7a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a16      	ldr	r2, [pc, #88]	; (800685c <TIM_OC5_SetConfig+0xb8>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d00b      	beq.n	800681e <TIM_OC5_SetConfig+0x7a>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a15      	ldr	r2, [pc, #84]	; (8006860 <TIM_OC5_SetConfig+0xbc>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d007      	beq.n	800681e <TIM_OC5_SetConfig+0x7a>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a14      	ldr	r2, [pc, #80]	; (8006864 <TIM_OC5_SetConfig+0xc0>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d003      	beq.n	800681e <TIM_OC5_SetConfig+0x7a>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a13      	ldr	r2, [pc, #76]	; (8006868 <TIM_OC5_SetConfig+0xc4>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d109      	bne.n	8006832 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006824:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	021b      	lsls	r3, r3, #8
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	4313      	orrs	r3, r2
 8006830:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	621a      	str	r2, [r3, #32]
}
 800684c:	bf00      	nop
 800684e:	371c      	adds	r7, #28
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	40012c00 	.word	0x40012c00
 800685c:	40013400 	.word	0x40013400
 8006860:	40014000 	.word	0x40014000
 8006864:	40014400 	.word	0x40014400
 8006868:	40014800 	.word	0x40014800

0800686c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800686c:	b480      	push	{r7}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800689a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800689e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	021b      	lsls	r3, r3, #8
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	051b      	lsls	r3, r3, #20
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	4313      	orrs	r3, r2
 80068be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a18      	ldr	r2, [pc, #96]	; (8006924 <TIM_OC6_SetConfig+0xb8>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d00f      	beq.n	80068e8 <TIM_OC6_SetConfig+0x7c>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a17      	ldr	r2, [pc, #92]	; (8006928 <TIM_OC6_SetConfig+0xbc>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d00b      	beq.n	80068e8 <TIM_OC6_SetConfig+0x7c>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a16      	ldr	r2, [pc, #88]	; (800692c <TIM_OC6_SetConfig+0xc0>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d007      	beq.n	80068e8 <TIM_OC6_SetConfig+0x7c>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a15      	ldr	r2, [pc, #84]	; (8006930 <TIM_OC6_SetConfig+0xc4>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d003      	beq.n	80068e8 <TIM_OC6_SetConfig+0x7c>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a14      	ldr	r2, [pc, #80]	; (8006934 <TIM_OC6_SetConfig+0xc8>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d109      	bne.n	80068fc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	029b      	lsls	r3, r3, #10
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	621a      	str	r2, [r3, #32]
}
 8006916:	bf00      	nop
 8006918:	371c      	adds	r7, #28
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	40012c00 	.word	0x40012c00
 8006928:	40013400 	.word	0x40013400
 800692c:	40014000 	.word	0x40014000
 8006930:	40014400 	.word	0x40014400
 8006934:	40014800 	.word	0x40014800

08006938 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006938:	b480      	push	{r7}
 800693a:	b087      	sub	sp, #28
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	f023 0201 	bic.w	r2, r3, #1
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	011b      	lsls	r3, r3, #4
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	4313      	orrs	r3, r2
 800696c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f023 030a 	bic.w	r3, r3, #10
 8006974:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	4313      	orrs	r3, r2
 800697c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	621a      	str	r2, [r3, #32]
}
 800698a:	bf00      	nop
 800698c:	371c      	adds	r7, #28
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006996:	b480      	push	{r7}
 8006998:	b087      	sub	sp, #28
 800699a:	af00      	add	r7, sp, #0
 800699c:	60f8      	str	r0, [r7, #12]
 800699e:	60b9      	str	r1, [r7, #8]
 80069a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	f023 0210 	bic.w	r2, r3, #16
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	031b      	lsls	r3, r3, #12
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	011b      	lsls	r3, r3, #4
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	4313      	orrs	r3, r2
 80069dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	621a      	str	r2, [r3, #32]
}
 80069ea:	bf00      	nop
 80069ec:	371c      	adds	r7, #28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b085      	sub	sp, #20
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a0e:	683a      	ldr	r2, [r7, #0]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	f043 0307 	orr.w	r3, r3, #7
 8006a18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	609a      	str	r2, [r3, #8]
}
 8006a20:	bf00      	nop
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
 8006a38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	021a      	lsls	r2, r3, #8
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	609a      	str	r2, [r3, #8]
}
 8006a60:	bf00      	nop
 8006a62:	371c      	adds	r7, #28
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f003 031f 	and.w	r3, r3, #31
 8006a7e:	2201      	movs	r2, #1
 8006a80:	fa02 f303 	lsl.w	r3, r2, r3
 8006a84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6a1a      	ldr	r2, [r3, #32]
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	43db      	mvns	r3, r3
 8006a8e:	401a      	ands	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6a1a      	ldr	r2, [r3, #32]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f003 031f 	and.w	r3, r3, #31
 8006a9e:	6879      	ldr	r1, [r7, #4]
 8006aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8006aa4:	431a      	orrs	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	621a      	str	r2, [r3, #32]
}
 8006aaa:	bf00      	nop
 8006aac:	371c      	adds	r7, #28
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
	...

08006ab8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d101      	bne.n	8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006acc:	2302      	movs	r3, #2
 8006ace:	e063      	b.n	8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2202      	movs	r2, #2
 8006adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a2b      	ldr	r2, [pc, #172]	; (8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d004      	beq.n	8006b04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a2a      	ldr	r2, [pc, #168]	; (8006ba8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d108      	bne.n	8006b16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a1b      	ldr	r2, [pc, #108]	; (8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d018      	beq.n	8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b42:	d013      	beq.n	8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a18      	ldr	r2, [pc, #96]	; (8006bac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d00e      	beq.n	8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a17      	ldr	r2, [pc, #92]	; (8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d009      	beq.n	8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a12      	ldr	r2, [pc, #72]	; (8006ba8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d004      	beq.n	8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a13      	ldr	r2, [pc, #76]	; (8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d10c      	bne.n	8006b86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	40012c00 	.word	0x40012c00
 8006ba8:	40013400 	.word	0x40013400
 8006bac:	40000400 	.word	0x40000400
 8006bb0:	40000800 	.word	0x40000800
 8006bb4:	40014000 	.word	0x40014000

08006bb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e040      	b.n	8006c88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d106      	bne.n	8006c1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7fa fde2 	bl	80017e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2224      	movs	r2, #36	; 0x24
 8006c20:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f022 0201 	bic.w	r2, r2, #1
 8006c30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fbd4 	bl	80073e0 <UART_SetConfig>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d101      	bne.n	8006c42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e022      	b.n	8006c88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d002      	beq.n	8006c50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 fd9c 	bl	8007788 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	689a      	ldr	r2, [r3, #8]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f042 0201 	orr.w	r2, r2, #1
 8006c7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 fe23 	bl	80078cc <UART_CheckIdleState>
 8006c86:	4603      	mov	r3, r0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b08b      	sub	sp, #44	; 0x2c
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ca2:	2b20      	cmp	r3, #32
 8006ca4:	d147      	bne.n	8006d36 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <HAL_UART_Transmit_IT+0x22>
 8006cac:	88fb      	ldrh	r3, [r7, #6]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e040      	b.n	8006d38 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	88fa      	ldrh	r2, [r7, #6]
 8006cc0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	88fa      	ldrh	r2, [r7, #6]
 8006cc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2221      	movs	r2, #33	; 0x21
 8006cde:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ce8:	d107      	bne.n	8006cfa <HAL_UART_Transmit_IT+0x6a>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d103      	bne.n	8006cfa <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	4a13      	ldr	r2, [pc, #76]	; (8006d44 <HAL_UART_Transmit_IT+0xb4>)
 8006cf6:	66da      	str	r2, [r3, #108]	; 0x6c
 8006cf8:	e002      	b.n	8006d00 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	4a12      	ldr	r2, [pc, #72]	; (8006d48 <HAL_UART_Transmit_IT+0xb8>)
 8006cfe:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	e853 3f00 	ldrex	r3, [r3]
 8006d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d14:	627b      	str	r3, [r7, #36]	; 0x24
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	623b      	str	r3, [r7, #32]
 8006d20:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d22:	69f9      	ldr	r1, [r7, #28]
 8006d24:	6a3a      	ldr	r2, [r7, #32]
 8006d26:	e841 2300 	strex	r3, r2, [r1]
 8006d2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1e6      	bne.n	8006d00 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8006d32:	2300      	movs	r3, #0
 8006d34:	e000      	b.n	8006d38 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006d36:	2302      	movs	r3, #2
  }
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	372c      	adds	r7, #44	; 0x2c
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	08007e01 	.word	0x08007e01
 8006d48:	08007d49 	.word	0x08007d49

08006d4c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08a      	sub	sp, #40	; 0x28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	4613      	mov	r3, r2
 8006d58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d60:	2b20      	cmp	r3, #32
 8006d62:	d132      	bne.n	8006dca <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d002      	beq.n	8006d70 <HAL_UART_Receive_IT+0x24>
 8006d6a:	88fb      	ldrh	r3, [r7, #6]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e02b      	b.n	8006dcc <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d018      	beq.n	8006dba <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	e853 3f00 	ldrex	r3, [r3]
 8006d94:	613b      	str	r3, [r7, #16]
   return(result);
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	623b      	str	r3, [r7, #32]
 8006da8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006daa:	69f9      	ldr	r1, [r7, #28]
 8006dac:	6a3a      	ldr	r2, [r7, #32]
 8006dae:	e841 2300 	strex	r3, r2, [r1]
 8006db2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1e6      	bne.n	8006d88 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006dba:	88fb      	ldrh	r3, [r7, #6]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	68b9      	ldr	r1, [r7, #8]
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 fe93 	bl	8007aec <UART_Start_Receive_IT>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	e000      	b.n	8006dcc <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006dca:	2302      	movs	r3, #2
  }
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3728      	adds	r7, #40	; 0x28
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b0ba      	sub	sp, #232	; 0xe8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006dfa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006dfe:	f640 030f 	movw	r3, #2063	; 0x80f
 8006e02:	4013      	ands	r3, r2
 8006e04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006e08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d115      	bne.n	8006e3c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e14:	f003 0320 	and.w	r3, r3, #32
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00f      	beq.n	8006e3c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e20:	f003 0320 	and.w	r3, r3, #32
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d009      	beq.n	8006e3c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 82ab 	beq.w	8007388 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	4798      	blx	r3
      }
      return;
 8006e3a:	e2a5      	b.n	8007388 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 8117 	beq.w	8007074 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d106      	bne.n	8006e60 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006e52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006e56:	4b85      	ldr	r3, [pc, #532]	; (800706c <HAL_UART_IRQHandler+0x298>)
 8006e58:	4013      	ands	r3, r2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 810a 	beq.w	8007074 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d011      	beq.n	8006e90 <HAL_UART_IRQHandler+0xbc>
 8006e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00b      	beq.n	8006e90 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e86:	f043 0201 	orr.w	r2, r3, #1
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e94:	f003 0302 	and.w	r3, r3, #2
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d011      	beq.n	8006ec0 <HAL_UART_IRQHandler+0xec>
 8006e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00b      	beq.n	8006ec0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2202      	movs	r2, #2
 8006eae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eb6:	f043 0204 	orr.w	r2, r3, #4
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d011      	beq.n	8006ef0 <HAL_UART_IRQHandler+0x11c>
 8006ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ed0:	f003 0301 	and.w	r3, r3, #1
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00b      	beq.n	8006ef0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2204      	movs	r2, #4
 8006ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ee6:	f043 0202 	orr.w	r2, r3, #2
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ef4:	f003 0308 	and.w	r3, r3, #8
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d017      	beq.n	8006f2c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f00:	f003 0320 	and.w	r3, r3, #32
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d105      	bne.n	8006f14 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f0c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00b      	beq.n	8006f2c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2208      	movs	r2, #8
 8006f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f22:	f043 0208 	orr.w	r2, r3, #8
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d012      	beq.n	8006f5e <HAL_UART_IRQHandler+0x18a>
 8006f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00c      	beq.n	8006f5e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f54:	f043 0220 	orr.w	r2, r3, #32
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 8211 	beq.w	800738c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f6e:	f003 0320 	and.w	r3, r3, #32
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00d      	beq.n	8006f92 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f7a:	f003 0320 	and.w	r3, r3, #32
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d007      	beq.n	8006f92 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d003      	beq.n	8006f92 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa6:	2b40      	cmp	r3, #64	; 0x40
 8006fa8:	d005      	beq.n	8006fb6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006faa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d04f      	beq.n	8007056 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fe4c 	bl	8007c54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc6:	2b40      	cmp	r3, #64	; 0x40
 8006fc8:	d141      	bne.n	800704e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3308      	adds	r3, #8
 8006fd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fd8:	e853 3f00 	ldrex	r3, [r3]
 8006fdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006fe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3308      	adds	r3, #8
 8006ff2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006ff6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006ffa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007002:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007006:	e841 2300 	strex	r3, r2, [r1]
 800700a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800700e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1d9      	bne.n	8006fca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800701a:	2b00      	cmp	r3, #0
 800701c:	d013      	beq.n	8007046 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007022:	4a13      	ldr	r2, [pc, #76]	; (8007070 <HAL_UART_IRQHandler+0x29c>)
 8007024:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800702a:	4618      	mov	r0, r3
 800702c:	f7fc fb26 	bl	800367c <HAL_DMA_Abort_IT>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d017      	beq.n	8007066 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800703a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007040:	4610      	mov	r0, r2
 8007042:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007044:	e00f      	b.n	8007066 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f9b4 	bl	80073b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800704c:	e00b      	b.n	8007066 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f9b0 	bl	80073b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007054:	e007      	b.n	8007066 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f9ac 	bl	80073b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007064:	e192      	b.n	800738c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007066:	bf00      	nop
    return;
 8007068:	e190      	b.n	800738c <HAL_UART_IRQHandler+0x5b8>
 800706a:	bf00      	nop
 800706c:	04000120 	.word	0x04000120
 8007070:	08007d1d 	.word	0x08007d1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007078:	2b01      	cmp	r3, #1
 800707a:	f040 814b 	bne.w	8007314 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800707e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007082:	f003 0310 	and.w	r3, r3, #16
 8007086:	2b00      	cmp	r3, #0
 8007088:	f000 8144 	beq.w	8007314 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800708c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007090:	f003 0310 	and.w	r3, r3, #16
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 813d 	beq.w	8007314 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2210      	movs	r2, #16
 80070a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ac:	2b40      	cmp	r3, #64	; 0x40
 80070ae:	f040 80b5 	bne.w	800721c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 8164 	beq.w	8007390 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80070ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070d2:	429a      	cmp	r2, r3
 80070d4:	f080 815c 	bcs.w	8007390 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	2b20      	cmp	r3, #32
 80070ea:	f000 8086 	beq.w	80071fa <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070fa:	e853 3f00 	ldrex	r3, [r3]
 80070fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007102:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007106:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800710a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007118:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800711c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007120:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007124:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007128:	e841 2300 	strex	r3, r2, [r1]
 800712c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007130:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1da      	bne.n	80070ee <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3308      	adds	r3, #8
 800713e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007142:	e853 3f00 	ldrex	r3, [r3]
 8007146:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007148:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800714a:	f023 0301 	bic.w	r3, r3, #1
 800714e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	3308      	adds	r3, #8
 8007158:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800715c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007160:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007162:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007164:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007168:	e841 2300 	strex	r3, r2, [r1]
 800716c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800716e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1e1      	bne.n	8007138 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	3308      	adds	r3, #8
 800717a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800717e:	e853 3f00 	ldrex	r3, [r3]
 8007182:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800718a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	3308      	adds	r3, #8
 8007194:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007198:	66fa      	str	r2, [r7, #108]	; 0x6c
 800719a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800719e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80071a0:	e841 2300 	strex	r3, r2, [r1]
 80071a4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80071a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e3      	bne.n	8007174 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2220      	movs	r2, #32
 80071b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071c2:	e853 3f00 	ldrex	r3, [r3]
 80071c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ca:	f023 0310 	bic.w	r3, r3, #16
 80071ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	461a      	mov	r2, r3
 80071d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80071de:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071e4:	e841 2300 	strex	r3, r2, [r1]
 80071e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80071ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1e4      	bne.n	80071ba <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7fc fa08 	bl	800360a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2202      	movs	r2, #2
 80071fe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800720c:	b29b      	uxth	r3, r3
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	b29b      	uxth	r3, r3
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f8d7 	bl	80073c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800721a:	e0b9      	b.n	8007390 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007228:	b29b      	uxth	r3, r3
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007236:	b29b      	uxth	r3, r3
 8007238:	2b00      	cmp	r3, #0
 800723a:	f000 80ab 	beq.w	8007394 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800723e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 80a6 	beq.w	8007394 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007250:	e853 3f00 	ldrex	r3, [r3]
 8007254:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007258:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800725c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	461a      	mov	r2, r3
 8007266:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800726a:	647b      	str	r3, [r7, #68]	; 0x44
 800726c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007270:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007272:	e841 2300 	strex	r3, r2, [r1]
 8007276:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1e4      	bne.n	8007248 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	3308      	adds	r3, #8
 8007284:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007288:	e853 3f00 	ldrex	r3, [r3]
 800728c:	623b      	str	r3, [r7, #32]
   return(result);
 800728e:	6a3b      	ldr	r3, [r7, #32]
 8007290:	f023 0301 	bic.w	r3, r3, #1
 8007294:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	3308      	adds	r3, #8
 800729e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80072a2:	633a      	str	r2, [r7, #48]	; 0x30
 80072a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072aa:	e841 2300 	strex	r3, r2, [r1]
 80072ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1e3      	bne.n	800727e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2220      	movs	r2, #32
 80072ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	e853 3f00 	ldrex	r3, [r3]
 80072d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f023 0310 	bic.w	r3, r3, #16
 80072de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	461a      	mov	r2, r3
 80072e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80072ec:	61fb      	str	r3, [r7, #28]
 80072ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f0:	69b9      	ldr	r1, [r7, #24]
 80072f2:	69fa      	ldr	r2, [r7, #28]
 80072f4:	e841 2300 	strex	r3, r2, [r1]
 80072f8:	617b      	str	r3, [r7, #20]
   return(result);
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e4      	bne.n	80072ca <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2202      	movs	r2, #2
 8007304:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007306:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800730a:	4619      	mov	r1, r3
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f85b 	bl	80073c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007312:	e03f      	b.n	8007394 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007318:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00e      	beq.n	800733e <HAL_UART_IRQHandler+0x56a>
 8007320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007324:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d008      	beq.n	800733e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007334:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 ff94 	bl	8008264 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800733c:	e02d      	b.n	800739a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800733e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00e      	beq.n	8007368 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800734a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800734e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007352:	2b00      	cmp	r3, #0
 8007354:	d008      	beq.n	8007368 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800735a:	2b00      	cmp	r3, #0
 800735c:	d01c      	beq.n	8007398 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	4798      	blx	r3
    }
    return;
 8007366:	e017      	b.n	8007398 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800736c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007370:	2b00      	cmp	r3, #0
 8007372:	d012      	beq.n	800739a <HAL_UART_IRQHandler+0x5c6>
 8007374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00c      	beq.n	800739a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fd9d 	bl	8007ec0 <UART_EndTransmit_IT>
    return;
 8007386:	e008      	b.n	800739a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007388:	bf00      	nop
 800738a:	e006      	b.n	800739a <HAL_UART_IRQHandler+0x5c6>
    return;
 800738c:	bf00      	nop
 800738e:	e004      	b.n	800739a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007390:	bf00      	nop
 8007392:	e002      	b.n	800739a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007394:	bf00      	nop
 8007396:	e000      	b.n	800739a <HAL_UART_IRQHandler+0x5c6>
    return;
 8007398:	bf00      	nop
  }

}
 800739a:	37e8      	adds	r7, #232	; 0xe8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	460b      	mov	r3, r1
 80073d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b088      	sub	sp, #32
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	689a      	ldr	r2, [r3, #8]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	431a      	orrs	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	431a      	orrs	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	4313      	orrs	r3, r2
 8007402:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800740e:	f023 030c 	bic.w	r3, r3, #12
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	6812      	ldr	r2, [r2, #0]
 8007416:	6979      	ldr	r1, [r7, #20]
 8007418:	430b      	orrs	r3, r1
 800741a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68da      	ldr	r2, [r3, #12]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	430a      	orrs	r2, r1
 8007430:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a1b      	ldr	r3, [r3, #32]
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	4313      	orrs	r3, r2
 8007440:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	430a      	orrs	r2, r1
 8007454:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4aa7      	ldr	r2, [pc, #668]	; (80076f8 <UART_SetConfig+0x318>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d120      	bne.n	80074a2 <UART_SetConfig+0xc2>
 8007460:	4ba6      	ldr	r3, [pc, #664]	; (80076fc <UART_SetConfig+0x31c>)
 8007462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007464:	f003 0303 	and.w	r3, r3, #3
 8007468:	2b03      	cmp	r3, #3
 800746a:	d817      	bhi.n	800749c <UART_SetConfig+0xbc>
 800746c:	a201      	add	r2, pc, #4	; (adr r2, 8007474 <UART_SetConfig+0x94>)
 800746e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007472:	bf00      	nop
 8007474:	08007485 	.word	0x08007485
 8007478:	08007491 	.word	0x08007491
 800747c:	08007497 	.word	0x08007497
 8007480:	0800748b 	.word	0x0800748b
 8007484:	2301      	movs	r3, #1
 8007486:	77fb      	strb	r3, [r7, #31]
 8007488:	e0b5      	b.n	80075f6 <UART_SetConfig+0x216>
 800748a:	2302      	movs	r3, #2
 800748c:	77fb      	strb	r3, [r7, #31]
 800748e:	e0b2      	b.n	80075f6 <UART_SetConfig+0x216>
 8007490:	2304      	movs	r3, #4
 8007492:	77fb      	strb	r3, [r7, #31]
 8007494:	e0af      	b.n	80075f6 <UART_SetConfig+0x216>
 8007496:	2308      	movs	r3, #8
 8007498:	77fb      	strb	r3, [r7, #31]
 800749a:	e0ac      	b.n	80075f6 <UART_SetConfig+0x216>
 800749c:	2310      	movs	r3, #16
 800749e:	77fb      	strb	r3, [r7, #31]
 80074a0:	e0a9      	b.n	80075f6 <UART_SetConfig+0x216>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a96      	ldr	r2, [pc, #600]	; (8007700 <UART_SetConfig+0x320>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d124      	bne.n	80074f6 <UART_SetConfig+0x116>
 80074ac:	4b93      	ldr	r3, [pc, #588]	; (80076fc <UART_SetConfig+0x31c>)
 80074ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80074b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80074b8:	d011      	beq.n	80074de <UART_SetConfig+0xfe>
 80074ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80074be:	d817      	bhi.n	80074f0 <UART_SetConfig+0x110>
 80074c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074c4:	d011      	beq.n	80074ea <UART_SetConfig+0x10a>
 80074c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074ca:	d811      	bhi.n	80074f0 <UART_SetConfig+0x110>
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d003      	beq.n	80074d8 <UART_SetConfig+0xf8>
 80074d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074d4:	d006      	beq.n	80074e4 <UART_SetConfig+0x104>
 80074d6:	e00b      	b.n	80074f0 <UART_SetConfig+0x110>
 80074d8:	2300      	movs	r3, #0
 80074da:	77fb      	strb	r3, [r7, #31]
 80074dc:	e08b      	b.n	80075f6 <UART_SetConfig+0x216>
 80074de:	2302      	movs	r3, #2
 80074e0:	77fb      	strb	r3, [r7, #31]
 80074e2:	e088      	b.n	80075f6 <UART_SetConfig+0x216>
 80074e4:	2304      	movs	r3, #4
 80074e6:	77fb      	strb	r3, [r7, #31]
 80074e8:	e085      	b.n	80075f6 <UART_SetConfig+0x216>
 80074ea:	2308      	movs	r3, #8
 80074ec:	77fb      	strb	r3, [r7, #31]
 80074ee:	e082      	b.n	80075f6 <UART_SetConfig+0x216>
 80074f0:	2310      	movs	r3, #16
 80074f2:	77fb      	strb	r3, [r7, #31]
 80074f4:	e07f      	b.n	80075f6 <UART_SetConfig+0x216>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a82      	ldr	r2, [pc, #520]	; (8007704 <UART_SetConfig+0x324>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d124      	bne.n	800754a <UART_SetConfig+0x16a>
 8007500:	4b7e      	ldr	r3, [pc, #504]	; (80076fc <UART_SetConfig+0x31c>)
 8007502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007504:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007508:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800750c:	d011      	beq.n	8007532 <UART_SetConfig+0x152>
 800750e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007512:	d817      	bhi.n	8007544 <UART_SetConfig+0x164>
 8007514:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007518:	d011      	beq.n	800753e <UART_SetConfig+0x15e>
 800751a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800751e:	d811      	bhi.n	8007544 <UART_SetConfig+0x164>
 8007520:	2b00      	cmp	r3, #0
 8007522:	d003      	beq.n	800752c <UART_SetConfig+0x14c>
 8007524:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007528:	d006      	beq.n	8007538 <UART_SetConfig+0x158>
 800752a:	e00b      	b.n	8007544 <UART_SetConfig+0x164>
 800752c:	2300      	movs	r3, #0
 800752e:	77fb      	strb	r3, [r7, #31]
 8007530:	e061      	b.n	80075f6 <UART_SetConfig+0x216>
 8007532:	2302      	movs	r3, #2
 8007534:	77fb      	strb	r3, [r7, #31]
 8007536:	e05e      	b.n	80075f6 <UART_SetConfig+0x216>
 8007538:	2304      	movs	r3, #4
 800753a:	77fb      	strb	r3, [r7, #31]
 800753c:	e05b      	b.n	80075f6 <UART_SetConfig+0x216>
 800753e:	2308      	movs	r3, #8
 8007540:	77fb      	strb	r3, [r7, #31]
 8007542:	e058      	b.n	80075f6 <UART_SetConfig+0x216>
 8007544:	2310      	movs	r3, #16
 8007546:	77fb      	strb	r3, [r7, #31]
 8007548:	e055      	b.n	80075f6 <UART_SetConfig+0x216>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a6e      	ldr	r2, [pc, #440]	; (8007708 <UART_SetConfig+0x328>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d124      	bne.n	800759e <UART_SetConfig+0x1be>
 8007554:	4b69      	ldr	r3, [pc, #420]	; (80076fc <UART_SetConfig+0x31c>)
 8007556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007558:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800755c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007560:	d011      	beq.n	8007586 <UART_SetConfig+0x1a6>
 8007562:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007566:	d817      	bhi.n	8007598 <UART_SetConfig+0x1b8>
 8007568:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800756c:	d011      	beq.n	8007592 <UART_SetConfig+0x1b2>
 800756e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007572:	d811      	bhi.n	8007598 <UART_SetConfig+0x1b8>
 8007574:	2b00      	cmp	r3, #0
 8007576:	d003      	beq.n	8007580 <UART_SetConfig+0x1a0>
 8007578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800757c:	d006      	beq.n	800758c <UART_SetConfig+0x1ac>
 800757e:	e00b      	b.n	8007598 <UART_SetConfig+0x1b8>
 8007580:	2300      	movs	r3, #0
 8007582:	77fb      	strb	r3, [r7, #31]
 8007584:	e037      	b.n	80075f6 <UART_SetConfig+0x216>
 8007586:	2302      	movs	r3, #2
 8007588:	77fb      	strb	r3, [r7, #31]
 800758a:	e034      	b.n	80075f6 <UART_SetConfig+0x216>
 800758c:	2304      	movs	r3, #4
 800758e:	77fb      	strb	r3, [r7, #31]
 8007590:	e031      	b.n	80075f6 <UART_SetConfig+0x216>
 8007592:	2308      	movs	r3, #8
 8007594:	77fb      	strb	r3, [r7, #31]
 8007596:	e02e      	b.n	80075f6 <UART_SetConfig+0x216>
 8007598:	2310      	movs	r3, #16
 800759a:	77fb      	strb	r3, [r7, #31]
 800759c:	e02b      	b.n	80075f6 <UART_SetConfig+0x216>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a5a      	ldr	r2, [pc, #360]	; (800770c <UART_SetConfig+0x32c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d124      	bne.n	80075f2 <UART_SetConfig+0x212>
 80075a8:	4b54      	ldr	r3, [pc, #336]	; (80076fc <UART_SetConfig+0x31c>)
 80075aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ac:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80075b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80075b4:	d011      	beq.n	80075da <UART_SetConfig+0x1fa>
 80075b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80075ba:	d817      	bhi.n	80075ec <UART_SetConfig+0x20c>
 80075bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80075c0:	d011      	beq.n	80075e6 <UART_SetConfig+0x206>
 80075c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80075c6:	d811      	bhi.n	80075ec <UART_SetConfig+0x20c>
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <UART_SetConfig+0x1f4>
 80075cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075d0:	d006      	beq.n	80075e0 <UART_SetConfig+0x200>
 80075d2:	e00b      	b.n	80075ec <UART_SetConfig+0x20c>
 80075d4:	2300      	movs	r3, #0
 80075d6:	77fb      	strb	r3, [r7, #31]
 80075d8:	e00d      	b.n	80075f6 <UART_SetConfig+0x216>
 80075da:	2302      	movs	r3, #2
 80075dc:	77fb      	strb	r3, [r7, #31]
 80075de:	e00a      	b.n	80075f6 <UART_SetConfig+0x216>
 80075e0:	2304      	movs	r3, #4
 80075e2:	77fb      	strb	r3, [r7, #31]
 80075e4:	e007      	b.n	80075f6 <UART_SetConfig+0x216>
 80075e6:	2308      	movs	r3, #8
 80075e8:	77fb      	strb	r3, [r7, #31]
 80075ea:	e004      	b.n	80075f6 <UART_SetConfig+0x216>
 80075ec:	2310      	movs	r3, #16
 80075ee:	77fb      	strb	r3, [r7, #31]
 80075f0:	e001      	b.n	80075f6 <UART_SetConfig+0x216>
 80075f2:	2310      	movs	r3, #16
 80075f4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	69db      	ldr	r3, [r3, #28]
 80075fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075fe:	d15b      	bne.n	80076b8 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8007600:	7ffb      	ldrb	r3, [r7, #31]
 8007602:	2b08      	cmp	r3, #8
 8007604:	d827      	bhi.n	8007656 <UART_SetConfig+0x276>
 8007606:	a201      	add	r2, pc, #4	; (adr r2, 800760c <UART_SetConfig+0x22c>)
 8007608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760c:	08007631 	.word	0x08007631
 8007610:	08007639 	.word	0x08007639
 8007614:	08007641 	.word	0x08007641
 8007618:	08007657 	.word	0x08007657
 800761c:	08007647 	.word	0x08007647
 8007620:	08007657 	.word	0x08007657
 8007624:	08007657 	.word	0x08007657
 8007628:	08007657 	.word	0x08007657
 800762c:	0800764f 	.word	0x0800764f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007630:	f7fd fe34 	bl	800529c <HAL_RCC_GetPCLK1Freq>
 8007634:	61b8      	str	r0, [r7, #24]
        break;
 8007636:	e013      	b.n	8007660 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007638:	f7fd fe52 	bl	80052e0 <HAL_RCC_GetPCLK2Freq>
 800763c:	61b8      	str	r0, [r7, #24]
        break;
 800763e:	e00f      	b.n	8007660 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007640:	4b33      	ldr	r3, [pc, #204]	; (8007710 <UART_SetConfig+0x330>)
 8007642:	61bb      	str	r3, [r7, #24]
        break;
 8007644:	e00c      	b.n	8007660 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007646:	f7fd fdb3 	bl	80051b0 <HAL_RCC_GetSysClockFreq>
 800764a:	61b8      	str	r0, [r7, #24]
        break;
 800764c:	e008      	b.n	8007660 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800764e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007652:	61bb      	str	r3, [r7, #24]
        break;
 8007654:	e004      	b.n	8007660 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8007656:	2300      	movs	r3, #0
 8007658:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	77bb      	strb	r3, [r7, #30]
        break;
 800765e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	2b00      	cmp	r3, #0
 8007664:	f000 8082 	beq.w	800776c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	005a      	lsls	r2, r3, #1
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	085b      	lsrs	r3, r3, #1
 8007672:	441a      	add	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	fbb2 f3f3 	udiv	r3, r2, r3
 800767c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	2b0f      	cmp	r3, #15
 8007682:	d916      	bls.n	80076b2 <UART_SetConfig+0x2d2>
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800768a:	d212      	bcs.n	80076b2 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	b29b      	uxth	r3, r3
 8007690:	f023 030f 	bic.w	r3, r3, #15
 8007694:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	085b      	lsrs	r3, r3, #1
 800769a:	b29b      	uxth	r3, r3
 800769c:	f003 0307 	and.w	r3, r3, #7
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	89fb      	ldrh	r3, [r7, #14]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	89fa      	ldrh	r2, [r7, #14]
 80076ae:	60da      	str	r2, [r3, #12]
 80076b0:	e05c      	b.n	800776c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	77bb      	strb	r3, [r7, #30]
 80076b6:	e059      	b.n	800776c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076b8:	7ffb      	ldrb	r3, [r7, #31]
 80076ba:	2b08      	cmp	r3, #8
 80076bc:	d835      	bhi.n	800772a <UART_SetConfig+0x34a>
 80076be:	a201      	add	r2, pc, #4	; (adr r2, 80076c4 <UART_SetConfig+0x2e4>)
 80076c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c4:	080076e9 	.word	0x080076e9
 80076c8:	080076f1 	.word	0x080076f1
 80076cc:	08007715 	.word	0x08007715
 80076d0:	0800772b 	.word	0x0800772b
 80076d4:	0800771b 	.word	0x0800771b
 80076d8:	0800772b 	.word	0x0800772b
 80076dc:	0800772b 	.word	0x0800772b
 80076e0:	0800772b 	.word	0x0800772b
 80076e4:	08007723 	.word	0x08007723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076e8:	f7fd fdd8 	bl	800529c <HAL_RCC_GetPCLK1Freq>
 80076ec:	61b8      	str	r0, [r7, #24]
        break;
 80076ee:	e021      	b.n	8007734 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076f0:	f7fd fdf6 	bl	80052e0 <HAL_RCC_GetPCLK2Freq>
 80076f4:	61b8      	str	r0, [r7, #24]
        break;
 80076f6:	e01d      	b.n	8007734 <UART_SetConfig+0x354>
 80076f8:	40013800 	.word	0x40013800
 80076fc:	40021000 	.word	0x40021000
 8007700:	40004400 	.word	0x40004400
 8007704:	40004800 	.word	0x40004800
 8007708:	40004c00 	.word	0x40004c00
 800770c:	40005000 	.word	0x40005000
 8007710:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007714:	4b1b      	ldr	r3, [pc, #108]	; (8007784 <UART_SetConfig+0x3a4>)
 8007716:	61bb      	str	r3, [r7, #24]
        break;
 8007718:	e00c      	b.n	8007734 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800771a:	f7fd fd49 	bl	80051b0 <HAL_RCC_GetSysClockFreq>
 800771e:	61b8      	str	r0, [r7, #24]
        break;
 8007720:	e008      	b.n	8007734 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007726:	61bb      	str	r3, [r7, #24]
        break;
 8007728:	e004      	b.n	8007734 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800772a:	2300      	movs	r3, #0
 800772c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	77bb      	strb	r3, [r7, #30]
        break;
 8007732:	bf00      	nop
    }

    if (pclk != 0U)
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d018      	beq.n	800776c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	085a      	lsrs	r2, r3, #1
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	441a      	add	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	fbb2 f3f3 	udiv	r3, r2, r3
 800774c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	2b0f      	cmp	r3, #15
 8007752:	d909      	bls.n	8007768 <UART_SetConfig+0x388>
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800775a:	d205      	bcs.n	8007768 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	b29a      	uxth	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	60da      	str	r2, [r3, #12]
 8007766:	e001      	b.n	800776c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007778:	7fbb      	ldrb	r3, [r7, #30]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3720      	adds	r7, #32
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	007a1200 	.word	0x007a1200

08007788 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007794:	f003 0301 	and.w	r3, r3, #1
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00a      	beq.n	80077b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	430a      	orrs	r2, r1
 80077b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b6:	f003 0302 	and.w	r3, r3, #2
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00a      	beq.n	80077d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	430a      	orrs	r2, r1
 80077d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d8:	f003 0304 	and.w	r3, r3, #4
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00a      	beq.n	80077f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	430a      	orrs	r2, r1
 80077f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fa:	f003 0308 	and.w	r3, r3, #8
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00a      	beq.n	8007818 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	430a      	orrs	r2, r1
 8007816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781c:	f003 0310 	and.w	r3, r3, #16
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00a      	beq.n	800783a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	430a      	orrs	r2, r1
 8007838:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783e:	f003 0320 	and.w	r3, r3, #32
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00a      	beq.n	800785c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	430a      	orrs	r2, r1
 800785a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007864:	2b00      	cmp	r3, #0
 8007866:	d01a      	beq.n	800789e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	430a      	orrs	r2, r1
 800787c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007886:	d10a      	bne.n	800789e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	430a      	orrs	r2, r1
 800789c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00a      	beq.n	80078c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	430a      	orrs	r2, r1
 80078be:	605a      	str	r2, [r3, #4]
  }
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b098      	sub	sp, #96	; 0x60
 80078d0:	af02      	add	r7, sp, #8
 80078d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078dc:	f7fa fa80 	bl	8001de0 <HAL_GetTick>
 80078e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0308 	and.w	r3, r3, #8
 80078ec:	2b08      	cmp	r3, #8
 80078ee:	d12e      	bne.n	800794e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078f8:	2200      	movs	r2, #0
 80078fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f88c 	bl	8007a1c <UART_WaitOnFlagUntilTimeout>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d021      	beq.n	800794e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007912:	e853 3f00 	ldrex	r3, [r3]
 8007916:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800791a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800791e:	653b      	str	r3, [r7, #80]	; 0x50
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	461a      	mov	r2, r3
 8007926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007928:	647b      	str	r3, [r7, #68]	; 0x44
 800792a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800792e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007930:	e841 2300 	strex	r3, r2, [r1]
 8007934:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1e6      	bne.n	800790a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2220      	movs	r2, #32
 8007940:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e062      	b.n	8007a14 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 0304 	and.w	r3, r3, #4
 8007958:	2b04      	cmp	r3, #4
 800795a:	d149      	bne.n	80079f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800795c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007964:	2200      	movs	r2, #0
 8007966:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f856 	bl	8007a1c <UART_WaitOnFlagUntilTimeout>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d03c      	beq.n	80079f0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	e853 3f00 	ldrex	r3, [r3]
 8007982:	623b      	str	r3, [r7, #32]
   return(result);
 8007984:	6a3b      	ldr	r3, [r7, #32]
 8007986:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800798a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	461a      	mov	r2, r3
 8007992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007994:	633b      	str	r3, [r7, #48]	; 0x30
 8007996:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007998:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800799a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800799c:	e841 2300 	strex	r3, r2, [r1]
 80079a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d1e6      	bne.n	8007976 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	3308      	adds	r3, #8
 80079ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	e853 3f00 	ldrex	r3, [r3]
 80079b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f023 0301 	bic.w	r3, r3, #1
 80079be:	64bb      	str	r3, [r7, #72]	; 0x48
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3308      	adds	r3, #8
 80079c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079c8:	61fa      	str	r2, [r7, #28]
 80079ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079cc:	69b9      	ldr	r1, [r7, #24]
 80079ce:	69fa      	ldr	r2, [r7, #28]
 80079d0:	e841 2300 	strex	r3, r2, [r1]
 80079d4:	617b      	str	r3, [r7, #20]
   return(result);
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1e5      	bne.n	80079a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2220      	movs	r2, #32
 80079e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e011      	b.n	8007a14 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2220      	movs	r2, #32
 80079f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2220      	movs	r2, #32
 80079fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3758      	adds	r7, #88	; 0x58
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	603b      	str	r3, [r7, #0]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a2c:	e049      	b.n	8007ac2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a34:	d045      	beq.n	8007ac2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a36:	f7fa f9d3 	bl	8001de0 <HAL_GetTick>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	1ad3      	subs	r3, r2, r3
 8007a40:	69ba      	ldr	r2, [r7, #24]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d302      	bcc.n	8007a4c <UART_WaitOnFlagUntilTimeout+0x30>
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d101      	bne.n	8007a50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	e048      	b.n	8007ae2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0304 	and.w	r3, r3, #4
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d031      	beq.n	8007ac2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	69db      	ldr	r3, [r3, #28]
 8007a64:	f003 0308 	and.w	r3, r3, #8
 8007a68:	2b08      	cmp	r3, #8
 8007a6a:	d110      	bne.n	8007a8e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2208      	movs	r2, #8
 8007a72:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f000 f8ed 	bl	8007c54 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2208      	movs	r2, #8
 8007a7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e029      	b.n	8007ae2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	69db      	ldr	r3, [r3, #28]
 8007a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a9c:	d111      	bne.n	8007ac2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007aa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f000 f8d3 	bl	8007c54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e00f      	b.n	8007ae2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	69da      	ldr	r2, [r3, #28]
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	4013      	ands	r3, r2
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	bf0c      	ite	eq
 8007ad2:	2301      	moveq	r3, #1
 8007ad4:	2300      	movne	r3, #0
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	461a      	mov	r2, r3
 8007ada:	79fb      	ldrb	r3, [r7, #7]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d0a6      	beq.n	8007a2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
	...

08007aec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b097      	sub	sp, #92	; 0x5c
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	4613      	mov	r3, r2
 8007af8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	88fa      	ldrh	r2, [r7, #6]
 8007b04:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	88fa      	ldrh	r2, [r7, #6]
 8007b0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b1e:	d10e      	bne.n	8007b3e <UART_Start_Receive_IT+0x52>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d105      	bne.n	8007b34 <UART_Start_Receive_IT+0x48>
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007b2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b32:	e01a      	b.n	8007b6a <UART_Start_Receive_IT+0x7e>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	22ff      	movs	r2, #255	; 0xff
 8007b38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b3c:	e015      	b.n	8007b6a <UART_Start_Receive_IT+0x7e>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10d      	bne.n	8007b62 <UART_Start_Receive_IT+0x76>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d104      	bne.n	8007b58 <UART_Start_Receive_IT+0x6c>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	22ff      	movs	r2, #255	; 0xff
 8007b52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b56:	e008      	b.n	8007b6a <UART_Start_Receive_IT+0x7e>
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	227f      	movs	r2, #127	; 0x7f
 8007b5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b60:	e003      	b.n	8007b6a <UART_Start_Receive_IT+0x7e>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2222      	movs	r2, #34	; 0x22
 8007b76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3308      	adds	r3, #8
 8007b80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b84:	e853 3f00 	ldrex	r3, [r3]
 8007b88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8c:	f043 0301 	orr.w	r3, r3, #1
 8007b90:	657b      	str	r3, [r7, #84]	; 0x54
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	3308      	adds	r3, #8
 8007b98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ba0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ba2:	e841 2300 	strex	r3, r2, [r1]
 8007ba6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1e5      	bne.n	8007b7a <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bb6:	d107      	bne.n	8007bc8 <UART_Start_Receive_IT+0xdc>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d103      	bne.n	8007bc8 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4a22      	ldr	r2, [pc, #136]	; (8007c4c <UART_Start_Receive_IT+0x160>)
 8007bc4:	669a      	str	r2, [r3, #104]	; 0x68
 8007bc6:	e002      	b.n	8007bce <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	4a21      	ldr	r2, [pc, #132]	; (8007c50 <UART_Start_Receive_IT+0x164>)
 8007bcc:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d019      	beq.n	8007c0a <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bde:	e853 3f00 	ldrex	r3, [r3]
 8007be2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8007bf6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bfc:	e841 2300 	strex	r3, r2, [r1]
 8007c00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1e6      	bne.n	8007bd6 <UART_Start_Receive_IT+0xea>
 8007c08:	e018      	b.n	8007c3c <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	e853 3f00 	ldrex	r3, [r3]
 8007c16:	613b      	str	r3, [r7, #16]
   return(result);
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	f043 0320 	orr.w	r3, r3, #32
 8007c1e:	653b      	str	r3, [r7, #80]	; 0x50
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	461a      	mov	r2, r3
 8007c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c28:	623b      	str	r3, [r7, #32]
 8007c2a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2c:	69f9      	ldr	r1, [r7, #28]
 8007c2e:	6a3a      	ldr	r2, [r7, #32]
 8007c30:	e841 2300 	strex	r3, r2, [r1]
 8007c34:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1e6      	bne.n	8007c0a <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	375c      	adds	r7, #92	; 0x5c
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	080080bd 	.word	0x080080bd
 8007c50:	08007f15 	.word	0x08007f15

08007c54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b095      	sub	sp, #84	; 0x54
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c64:	e853 3f00 	ldrex	r3, [r3]
 8007c68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	461a      	mov	r2, r3
 8007c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c7a:	643b      	str	r3, [r7, #64]	; 0x40
 8007c7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c82:	e841 2300 	strex	r3, r2, [r1]
 8007c86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1e6      	bne.n	8007c5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	3308      	adds	r3, #8
 8007c94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	e853 3f00 	ldrex	r3, [r3]
 8007c9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	f023 0301 	bic.w	r3, r3, #1
 8007ca4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	3308      	adds	r3, #8
 8007cac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1e5      	bne.n	8007c8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d118      	bne.n	8007cfc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	e853 3f00 	ldrex	r3, [r3]
 8007cd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	f023 0310 	bic.w	r3, r3, #16
 8007cde:	647b      	str	r3, [r7, #68]	; 0x44
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ce8:	61bb      	str	r3, [r7, #24]
 8007cea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cec:	6979      	ldr	r1, [r7, #20]
 8007cee:	69ba      	ldr	r2, [r7, #24]
 8007cf0:	e841 2300 	strex	r3, r2, [r1]
 8007cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1e6      	bne.n	8007cca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2220      	movs	r2, #32
 8007d00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007d10:	bf00      	nop
 8007d12:	3754      	adds	r7, #84	; 0x54
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f7ff fb3a 	bl	80073b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d40:	bf00      	nop
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b08f      	sub	sp, #60	; 0x3c
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d54:	2b21      	cmp	r3, #33	; 0x21
 8007d56:	d14d      	bne.n	8007df4 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d132      	bne.n	8007dca <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6a:	6a3b      	ldr	r3, [r7, #32]
 8007d6c:	e853 3f00 	ldrex	r3, [r3]
 8007d70:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d78:	637b      	str	r3, [r7, #52]	; 0x34
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d84:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d8a:	e841 2300 	strex	r3, r2, [r1]
 8007d8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1e6      	bne.n	8007d64 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	e853 3f00 	ldrex	r3, [r3]
 8007da2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007daa:	633b      	str	r3, [r7, #48]	; 0x30
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	461a      	mov	r2, r3
 8007db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db4:	61bb      	str	r3, [r7, #24]
 8007db6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db8:	6979      	ldr	r1, [r7, #20]
 8007dba:	69ba      	ldr	r2, [r7, #24]
 8007dbc:	e841 2300 	strex	r3, r2, [r1]
 8007dc0:	613b      	str	r3, [r7, #16]
   return(result);
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1e6      	bne.n	8007d96 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007dc8:	e014      	b.n	8007df4 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dce:	781a      	ldrb	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	b292      	uxth	r2, r2
 8007dd6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ddc:	1c5a      	adds	r2, r3, #1
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	3b01      	subs	r3, #1
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007df4:	bf00      	nop
 8007df6:	373c      	adds	r7, #60	; 0x3c
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b091      	sub	sp, #68	; 0x44
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e0c:	2b21      	cmp	r3, #33	; 0x21
 8007e0e:	d151      	bne.n	8007eb4 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d132      	bne.n	8007e82 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	e853 3f00 	ldrex	r3, [r3]
 8007e28:	623b      	str	r3, [r7, #32]
   return(result);
 8007e2a:	6a3b      	ldr	r3, [r7, #32]
 8007e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e30:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	461a      	mov	r2, r3
 8007e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3a:	633b      	str	r3, [r7, #48]	; 0x30
 8007e3c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e42:	e841 2300 	strex	r3, r2, [r1]
 8007e46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d1e6      	bne.n	8007e1c <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	e853 3f00 	ldrex	r3, [r3]
 8007e5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e62:	637b      	str	r3, [r7, #52]	; 0x34
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e6c:	61fb      	str	r3, [r7, #28]
 8007e6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e70:	69b9      	ldr	r1, [r7, #24]
 8007e72:	69fa      	ldr	r2, [r7, #28]
 8007e74:	e841 2300 	strex	r3, r2, [r1]
 8007e78:	617b      	str	r3, [r7, #20]
   return(result);
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1e6      	bne.n	8007e4e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007e80:	e018      	b.n	8007eb4 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e86:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e8a:	881a      	ldrh	r2, [r3, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e94:	b292      	uxth	r2, r2
 8007e96:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e9c:	1c9a      	adds	r2, r3, #2
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007eb4:	bf00      	nop
 8007eb6:	3744      	adds	r7, #68	; 0x44
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b088      	sub	sp, #32
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	e853 3f00 	ldrex	r3, [r3]
 8007ed4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007edc:	61fb      	str	r3, [r7, #28]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	61bb      	str	r3, [r7, #24]
 8007ee8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eea:	6979      	ldr	r1, [r7, #20]
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	e841 2300 	strex	r3, r2, [r1]
 8007ef2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1e6      	bne.n	8007ec8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2220      	movs	r2, #32
 8007efe:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f7ff fa4a 	bl	80073a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f0c:	bf00      	nop
 8007f0e:	3720      	adds	r7, #32
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b09c      	sub	sp, #112	; 0x70
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f22:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f2c:	2b22      	cmp	r3, #34	; 0x22
 8007f2e:	f040 80b9 	bne.w	80080a4 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007f38:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007f40:	b2d9      	uxtb	r1, r3
 8007f42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007f46:	b2da      	uxtb	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f4c:	400a      	ands	r2, r1
 8007f4e:	b2d2      	uxtb	r2, r2
 8007f50:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	3b01      	subs	r3, #1
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f040 809c 	bne.w	80080b4 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f84:	e853 3f00 	ldrex	r3, [r3]
 8007f88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f90:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f9c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007fa0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fa2:	e841 2300 	strex	r3, r2, [r1]
 8007fa6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007fa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1e6      	bne.n	8007f7c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3308      	adds	r3, #8
 8007fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb8:	e853 3f00 	ldrex	r3, [r3]
 8007fbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc0:	f023 0301 	bic.w	r3, r3, #1
 8007fc4:	667b      	str	r3, [r7, #100]	; 0x64
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	3308      	adds	r3, #8
 8007fcc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007fce:	647a      	str	r2, [r7, #68]	; 0x44
 8007fd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fd6:	e841 2300 	strex	r3, r2, [r1]
 8007fda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1e5      	bne.n	8007fae <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2220      	movs	r2, #32
 8007fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d018      	beq.n	8008036 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	e853 3f00 	ldrex	r3, [r3]
 8008010:	623b      	str	r3, [r7, #32]
   return(result);
 8008012:	6a3b      	ldr	r3, [r7, #32]
 8008014:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008018:	663b      	str	r3, [r7, #96]	; 0x60
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	461a      	mov	r2, r3
 8008020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008022:	633b      	str	r3, [r7, #48]	; 0x30
 8008024:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008026:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800802a:	e841 2300 	strex	r3, r2, [r1]
 800802e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1e6      	bne.n	8008004 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800803a:	2b01      	cmp	r3, #1
 800803c:	d12e      	bne.n	800809c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	e853 3f00 	ldrex	r3, [r3]
 8008050:	60fb      	str	r3, [r7, #12]
   return(result);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f023 0310 	bic.w	r3, r3, #16
 8008058:	65fb      	str	r3, [r7, #92]	; 0x5c
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	461a      	mov	r2, r3
 8008060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008062:	61fb      	str	r3, [r7, #28]
 8008064:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008066:	69b9      	ldr	r1, [r7, #24]
 8008068:	69fa      	ldr	r2, [r7, #28]
 800806a:	e841 2300 	strex	r3, r2, [r1]
 800806e:	617b      	str	r3, [r7, #20]
   return(result);
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1e6      	bne.n	8008044 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	69db      	ldr	r3, [r3, #28]
 800807c:	f003 0310 	and.w	r3, r3, #16
 8008080:	2b10      	cmp	r3, #16
 8008082:	d103      	bne.n	800808c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2210      	movs	r2, #16
 800808a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7ff f997 	bl	80073c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800809a:	e00b      	b.n	80080b4 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f7f8 fa61 	bl	8000564 <HAL_UART_RxCpltCallback>
}
 80080a2:	e007      	b.n	80080b4 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	699a      	ldr	r2, [r3, #24]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f042 0208 	orr.w	r2, r2, #8
 80080b2:	619a      	str	r2, [r3, #24]
}
 80080b4:	bf00      	nop
 80080b6:	3770      	adds	r7, #112	; 0x70
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b09c      	sub	sp, #112	; 0x70
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080ca:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080d4:	2b22      	cmp	r3, #34	; 0x22
 80080d6:	f040 80b9 	bne.w	800824c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80080e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080e8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80080ea:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80080ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80080f2:	4013      	ands	r3, r2
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80080f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080fe:	1c9a      	adds	r2, r3, #2
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800810a:	b29b      	uxth	r3, r3
 800810c:	3b01      	subs	r3, #1
 800810e:	b29a      	uxth	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800811c:	b29b      	uxth	r3, r3
 800811e:	2b00      	cmp	r3, #0
 8008120:	f040 809c 	bne.w	800825c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800812c:	e853 3f00 	ldrex	r3, [r3]
 8008130:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008134:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008138:	667b      	str	r3, [r7, #100]	; 0x64
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	461a      	mov	r2, r3
 8008140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008142:	657b      	str	r3, [r7, #84]	; 0x54
 8008144:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008146:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008148:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800814a:	e841 2300 	strex	r3, r2, [r1]
 800814e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008152:	2b00      	cmp	r3, #0
 8008154:	d1e6      	bne.n	8008124 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3308      	adds	r3, #8
 800815c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008160:	e853 3f00 	ldrex	r3, [r3]
 8008164:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008168:	f023 0301 	bic.w	r3, r3, #1
 800816c:	663b      	str	r3, [r7, #96]	; 0x60
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	3308      	adds	r3, #8
 8008174:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008176:	643a      	str	r2, [r7, #64]	; 0x40
 8008178:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800817c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800817e:	e841 2300 	strex	r3, r2, [r1]
 8008182:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1e5      	bne.n	8008156 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2220      	movs	r2, #32
 800818e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d018      	beq.n	80081de <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b2:	6a3b      	ldr	r3, [r7, #32]
 80081b4:	e853 3f00 	ldrex	r3, [r3]
 80081b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80081c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	461a      	mov	r2, r3
 80081c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081cc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081d2:	e841 2300 	strex	r3, r2, [r1]
 80081d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1e6      	bne.n	80081ac <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d12e      	bne.n	8008244 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	e853 3f00 	ldrex	r3, [r3]
 80081f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	f023 0310 	bic.w	r3, r3, #16
 8008200:	65bb      	str	r3, [r7, #88]	; 0x58
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	461a      	mov	r2, r3
 8008208:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800820a:	61bb      	str	r3, [r7, #24]
 800820c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820e:	6979      	ldr	r1, [r7, #20]
 8008210:	69ba      	ldr	r2, [r7, #24]
 8008212:	e841 2300 	strex	r3, r2, [r1]
 8008216:	613b      	str	r3, [r7, #16]
   return(result);
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1e6      	bne.n	80081ec <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	69db      	ldr	r3, [r3, #28]
 8008224:	f003 0310 	and.w	r3, r3, #16
 8008228:	2b10      	cmp	r3, #16
 800822a:	d103      	bne.n	8008234 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2210      	movs	r2, #16
 8008232:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800823a:	4619      	mov	r1, r3
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f7ff f8c3 	bl	80073c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008242:	e00b      	b.n	800825c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f7f8 f98d 	bl	8000564 <HAL_UART_RxCpltCallback>
}
 800824a:	e007      	b.n	800825c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	699a      	ldr	r2, [r3, #24]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f042 0208 	orr.w	r2, r2, #8
 800825a:	619a      	str	r2, [r3, #24]
}
 800825c:	bf00      	nop
 800825e:	3770      	adds	r7, #112	; 0x70
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800826c:	bf00      	nop
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008278:	b480      	push	{r7}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008280:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008284:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800828c:	b29a      	uxth	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	b29b      	uxth	r3, r3
 8008292:	43db      	mvns	r3, r3
 8008294:	b29b      	uxth	r3, r3
 8008296:	4013      	ands	r3, r2
 8008298:	b29a      	uxth	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3714      	adds	r7, #20
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr

080082ae <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80082ae:	b084      	sub	sp, #16
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	f107 0014 	add.w	r0, r7, #20
 80082bc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	370c      	adds	r7, #12
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	b004      	add	sp, #16
 80082ee:	4770      	bx	lr

080082f0 <__errno>:
 80082f0:	4b01      	ldr	r3, [pc, #4]	; (80082f8 <__errno+0x8>)
 80082f2:	6818      	ldr	r0, [r3, #0]
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	2000009c 	.word	0x2000009c

080082fc <__libc_init_array>:
 80082fc:	b570      	push	{r4, r5, r6, lr}
 80082fe:	4d0d      	ldr	r5, [pc, #52]	; (8008334 <__libc_init_array+0x38>)
 8008300:	4c0d      	ldr	r4, [pc, #52]	; (8008338 <__libc_init_array+0x3c>)
 8008302:	1b64      	subs	r4, r4, r5
 8008304:	10a4      	asrs	r4, r4, #2
 8008306:	2600      	movs	r6, #0
 8008308:	42a6      	cmp	r6, r4
 800830a:	d109      	bne.n	8008320 <__libc_init_array+0x24>
 800830c:	4d0b      	ldr	r5, [pc, #44]	; (800833c <__libc_init_array+0x40>)
 800830e:	4c0c      	ldr	r4, [pc, #48]	; (8008340 <__libc_init_array+0x44>)
 8008310:	f000 f906 	bl	8008520 <_init>
 8008314:	1b64      	subs	r4, r4, r5
 8008316:	10a4      	asrs	r4, r4, #2
 8008318:	2600      	movs	r6, #0
 800831a:	42a6      	cmp	r6, r4
 800831c:	d105      	bne.n	800832a <__libc_init_array+0x2e>
 800831e:	bd70      	pop	{r4, r5, r6, pc}
 8008320:	f855 3b04 	ldr.w	r3, [r5], #4
 8008324:	4798      	blx	r3
 8008326:	3601      	adds	r6, #1
 8008328:	e7ee      	b.n	8008308 <__libc_init_array+0xc>
 800832a:	f855 3b04 	ldr.w	r3, [r5], #4
 800832e:	4798      	blx	r3
 8008330:	3601      	adds	r6, #1
 8008332:	e7f2      	b.n	800831a <__libc_init_array+0x1e>
 8008334:	0800aa80 	.word	0x0800aa80
 8008338:	0800aa80 	.word	0x0800aa80
 800833c:	0800aa80 	.word	0x0800aa80
 8008340:	0800aa84 	.word	0x0800aa84

08008344 <malloc>:
 8008344:	4b02      	ldr	r3, [pc, #8]	; (8008350 <malloc+0xc>)
 8008346:	4601      	mov	r1, r0
 8008348:	6818      	ldr	r0, [r3, #0]
 800834a:	f000 b839 	b.w	80083c0 <_malloc_r>
 800834e:	bf00      	nop
 8008350:	2000009c 	.word	0x2000009c

08008354 <memcpy>:
 8008354:	440a      	add	r2, r1
 8008356:	4291      	cmp	r1, r2
 8008358:	f100 33ff 	add.w	r3, r0, #4294967295
 800835c:	d100      	bne.n	8008360 <memcpy+0xc>
 800835e:	4770      	bx	lr
 8008360:	b510      	push	{r4, lr}
 8008362:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008366:	f803 4f01 	strb.w	r4, [r3, #1]!
 800836a:	4291      	cmp	r1, r2
 800836c:	d1f9      	bne.n	8008362 <memcpy+0xe>
 800836e:	bd10      	pop	{r4, pc}

08008370 <memset>:
 8008370:	4402      	add	r2, r0
 8008372:	4603      	mov	r3, r0
 8008374:	4293      	cmp	r3, r2
 8008376:	d100      	bne.n	800837a <memset+0xa>
 8008378:	4770      	bx	lr
 800837a:	f803 1b01 	strb.w	r1, [r3], #1
 800837e:	e7f9      	b.n	8008374 <memset+0x4>

08008380 <sbrk_aligned>:
 8008380:	b570      	push	{r4, r5, r6, lr}
 8008382:	4e0e      	ldr	r6, [pc, #56]	; (80083bc <sbrk_aligned+0x3c>)
 8008384:	460c      	mov	r4, r1
 8008386:	6831      	ldr	r1, [r6, #0]
 8008388:	4605      	mov	r5, r0
 800838a:	b911      	cbnz	r1, 8008392 <sbrk_aligned+0x12>
 800838c:	f000 f88c 	bl	80084a8 <_sbrk_r>
 8008390:	6030      	str	r0, [r6, #0]
 8008392:	4621      	mov	r1, r4
 8008394:	4628      	mov	r0, r5
 8008396:	f000 f887 	bl	80084a8 <_sbrk_r>
 800839a:	1c43      	adds	r3, r0, #1
 800839c:	d00a      	beq.n	80083b4 <sbrk_aligned+0x34>
 800839e:	1cc4      	adds	r4, r0, #3
 80083a0:	f024 0403 	bic.w	r4, r4, #3
 80083a4:	42a0      	cmp	r0, r4
 80083a6:	d007      	beq.n	80083b8 <sbrk_aligned+0x38>
 80083a8:	1a21      	subs	r1, r4, r0
 80083aa:	4628      	mov	r0, r5
 80083ac:	f000 f87c 	bl	80084a8 <_sbrk_r>
 80083b0:	3001      	adds	r0, #1
 80083b2:	d101      	bne.n	80083b8 <sbrk_aligned+0x38>
 80083b4:	f04f 34ff 	mov.w	r4, #4294967295
 80083b8:	4620      	mov	r0, r4
 80083ba:	bd70      	pop	{r4, r5, r6, pc}
 80083bc:	20000750 	.word	0x20000750

080083c0 <_malloc_r>:
 80083c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083c4:	1ccd      	adds	r5, r1, #3
 80083c6:	f025 0503 	bic.w	r5, r5, #3
 80083ca:	3508      	adds	r5, #8
 80083cc:	2d0c      	cmp	r5, #12
 80083ce:	bf38      	it	cc
 80083d0:	250c      	movcc	r5, #12
 80083d2:	2d00      	cmp	r5, #0
 80083d4:	4607      	mov	r7, r0
 80083d6:	db01      	blt.n	80083dc <_malloc_r+0x1c>
 80083d8:	42a9      	cmp	r1, r5
 80083da:	d905      	bls.n	80083e8 <_malloc_r+0x28>
 80083dc:	230c      	movs	r3, #12
 80083de:	603b      	str	r3, [r7, #0]
 80083e0:	2600      	movs	r6, #0
 80083e2:	4630      	mov	r0, r6
 80083e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083e8:	4e2e      	ldr	r6, [pc, #184]	; (80084a4 <_malloc_r+0xe4>)
 80083ea:	f000 f88b 	bl	8008504 <__malloc_lock>
 80083ee:	6833      	ldr	r3, [r6, #0]
 80083f0:	461c      	mov	r4, r3
 80083f2:	bb34      	cbnz	r4, 8008442 <_malloc_r+0x82>
 80083f4:	4629      	mov	r1, r5
 80083f6:	4638      	mov	r0, r7
 80083f8:	f7ff ffc2 	bl	8008380 <sbrk_aligned>
 80083fc:	1c43      	adds	r3, r0, #1
 80083fe:	4604      	mov	r4, r0
 8008400:	d14d      	bne.n	800849e <_malloc_r+0xde>
 8008402:	6834      	ldr	r4, [r6, #0]
 8008404:	4626      	mov	r6, r4
 8008406:	2e00      	cmp	r6, #0
 8008408:	d140      	bne.n	800848c <_malloc_r+0xcc>
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	4631      	mov	r1, r6
 800840e:	4638      	mov	r0, r7
 8008410:	eb04 0803 	add.w	r8, r4, r3
 8008414:	f000 f848 	bl	80084a8 <_sbrk_r>
 8008418:	4580      	cmp	r8, r0
 800841a:	d13a      	bne.n	8008492 <_malloc_r+0xd2>
 800841c:	6821      	ldr	r1, [r4, #0]
 800841e:	3503      	adds	r5, #3
 8008420:	1a6d      	subs	r5, r5, r1
 8008422:	f025 0503 	bic.w	r5, r5, #3
 8008426:	3508      	adds	r5, #8
 8008428:	2d0c      	cmp	r5, #12
 800842a:	bf38      	it	cc
 800842c:	250c      	movcc	r5, #12
 800842e:	4629      	mov	r1, r5
 8008430:	4638      	mov	r0, r7
 8008432:	f7ff ffa5 	bl	8008380 <sbrk_aligned>
 8008436:	3001      	adds	r0, #1
 8008438:	d02b      	beq.n	8008492 <_malloc_r+0xd2>
 800843a:	6823      	ldr	r3, [r4, #0]
 800843c:	442b      	add	r3, r5
 800843e:	6023      	str	r3, [r4, #0]
 8008440:	e00e      	b.n	8008460 <_malloc_r+0xa0>
 8008442:	6822      	ldr	r2, [r4, #0]
 8008444:	1b52      	subs	r2, r2, r5
 8008446:	d41e      	bmi.n	8008486 <_malloc_r+0xc6>
 8008448:	2a0b      	cmp	r2, #11
 800844a:	d916      	bls.n	800847a <_malloc_r+0xba>
 800844c:	1961      	adds	r1, r4, r5
 800844e:	42a3      	cmp	r3, r4
 8008450:	6025      	str	r5, [r4, #0]
 8008452:	bf18      	it	ne
 8008454:	6059      	strne	r1, [r3, #4]
 8008456:	6863      	ldr	r3, [r4, #4]
 8008458:	bf08      	it	eq
 800845a:	6031      	streq	r1, [r6, #0]
 800845c:	5162      	str	r2, [r4, r5]
 800845e:	604b      	str	r3, [r1, #4]
 8008460:	4638      	mov	r0, r7
 8008462:	f104 060b 	add.w	r6, r4, #11
 8008466:	f000 f853 	bl	8008510 <__malloc_unlock>
 800846a:	f026 0607 	bic.w	r6, r6, #7
 800846e:	1d23      	adds	r3, r4, #4
 8008470:	1af2      	subs	r2, r6, r3
 8008472:	d0b6      	beq.n	80083e2 <_malloc_r+0x22>
 8008474:	1b9b      	subs	r3, r3, r6
 8008476:	50a3      	str	r3, [r4, r2]
 8008478:	e7b3      	b.n	80083e2 <_malloc_r+0x22>
 800847a:	6862      	ldr	r2, [r4, #4]
 800847c:	42a3      	cmp	r3, r4
 800847e:	bf0c      	ite	eq
 8008480:	6032      	streq	r2, [r6, #0]
 8008482:	605a      	strne	r2, [r3, #4]
 8008484:	e7ec      	b.n	8008460 <_malloc_r+0xa0>
 8008486:	4623      	mov	r3, r4
 8008488:	6864      	ldr	r4, [r4, #4]
 800848a:	e7b2      	b.n	80083f2 <_malloc_r+0x32>
 800848c:	4634      	mov	r4, r6
 800848e:	6876      	ldr	r6, [r6, #4]
 8008490:	e7b9      	b.n	8008406 <_malloc_r+0x46>
 8008492:	230c      	movs	r3, #12
 8008494:	603b      	str	r3, [r7, #0]
 8008496:	4638      	mov	r0, r7
 8008498:	f000 f83a 	bl	8008510 <__malloc_unlock>
 800849c:	e7a1      	b.n	80083e2 <_malloc_r+0x22>
 800849e:	6025      	str	r5, [r4, #0]
 80084a0:	e7de      	b.n	8008460 <_malloc_r+0xa0>
 80084a2:	bf00      	nop
 80084a4:	2000074c 	.word	0x2000074c

080084a8 <_sbrk_r>:
 80084a8:	b538      	push	{r3, r4, r5, lr}
 80084aa:	4d06      	ldr	r5, [pc, #24]	; (80084c4 <_sbrk_r+0x1c>)
 80084ac:	2300      	movs	r3, #0
 80084ae:	4604      	mov	r4, r0
 80084b0:	4608      	mov	r0, r1
 80084b2:	602b      	str	r3, [r5, #0]
 80084b4:	f7f9 fbc8 	bl	8001c48 <_sbrk>
 80084b8:	1c43      	adds	r3, r0, #1
 80084ba:	d102      	bne.n	80084c2 <_sbrk_r+0x1a>
 80084bc:	682b      	ldr	r3, [r5, #0]
 80084be:	b103      	cbz	r3, 80084c2 <_sbrk_r+0x1a>
 80084c0:	6023      	str	r3, [r4, #0]
 80084c2:	bd38      	pop	{r3, r4, r5, pc}
 80084c4:	20000754 	.word	0x20000754

080084c8 <strdup>:
 80084c8:	4b02      	ldr	r3, [pc, #8]	; (80084d4 <strdup+0xc>)
 80084ca:	4601      	mov	r1, r0
 80084cc:	6818      	ldr	r0, [r3, #0]
 80084ce:	f000 b803 	b.w	80084d8 <_strdup_r>
 80084d2:	bf00      	nop
 80084d4:	2000009c 	.word	0x2000009c

080084d8 <_strdup_r>:
 80084d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084da:	4604      	mov	r4, r0
 80084dc:	4608      	mov	r0, r1
 80084de:	460d      	mov	r5, r1
 80084e0:	f7f7 fe7c 	bl	80001dc <strlen>
 80084e4:	1c42      	adds	r2, r0, #1
 80084e6:	4611      	mov	r1, r2
 80084e8:	4620      	mov	r0, r4
 80084ea:	9201      	str	r2, [sp, #4]
 80084ec:	f7ff ff68 	bl	80083c0 <_malloc_r>
 80084f0:	4604      	mov	r4, r0
 80084f2:	b118      	cbz	r0, 80084fc <_strdup_r+0x24>
 80084f4:	9a01      	ldr	r2, [sp, #4]
 80084f6:	4629      	mov	r1, r5
 80084f8:	f7ff ff2c 	bl	8008354 <memcpy>
 80084fc:	4620      	mov	r0, r4
 80084fe:	b003      	add	sp, #12
 8008500:	bd30      	pop	{r4, r5, pc}
	...

08008504 <__malloc_lock>:
 8008504:	4801      	ldr	r0, [pc, #4]	; (800850c <__malloc_lock+0x8>)
 8008506:	f000 b809 	b.w	800851c <__retarget_lock_acquire_recursive>
 800850a:	bf00      	nop
 800850c:	20000758 	.word	0x20000758

08008510 <__malloc_unlock>:
 8008510:	4801      	ldr	r0, [pc, #4]	; (8008518 <__malloc_unlock+0x8>)
 8008512:	f000 b804 	b.w	800851e <__retarget_lock_release_recursive>
 8008516:	bf00      	nop
 8008518:	20000758 	.word	0x20000758

0800851c <__retarget_lock_acquire_recursive>:
 800851c:	4770      	bx	lr

0800851e <__retarget_lock_release_recursive>:
 800851e:	4770      	bx	lr

08008520 <_init>:
 8008520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008522:	bf00      	nop
 8008524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008526:	bc08      	pop	{r3}
 8008528:	469e      	mov	lr, r3
 800852a:	4770      	bx	lr

0800852c <_fini>:
 800852c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800852e:	bf00      	nop
 8008530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008532:	bc08      	pop	{r3}
 8008534:	469e      	mov	lr, r3
 8008536:	4770      	bx	lr
