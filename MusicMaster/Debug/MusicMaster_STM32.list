
MusicMaster_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c68  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002548  08006df0  08006df0  00016df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009338  08009338  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  08009338  08009338  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009338  08009338  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009338  08009338  00019338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800933c  0800933c  0001933c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08009340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          0000060c  20000100  20000100  00020100  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000070c  2000070c  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019933  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f89  00000000  00000000  00039a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d0  00000000  00000000  0003c9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001410  00000000  00000000  0003dec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fd36  00000000  00000000  0003f2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a11a  00000000  00000000  0005f006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bea53  00000000  00000000  00079120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00137b73  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ba8  00000000  00000000  00137bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000100 	.word	0x20000100
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006dd8 	.word	0x08006dd8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000104 	.word	0x20000104
 80001c4:	08006dd8 	.word	0x08006dd8

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <hashString>:
    struct DictionaryNode **buckets;
    int size;
};

// Hash function for string keys
unsigned int hashString(const char *key, int size) {
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	6039      	str	r1, [r7, #0]
    unsigned int hash = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	60fb      	str	r3, [r7, #12]
    while (*key) {
 80001fa:	e007      	b.n	800020c <hashString+0x20>
        hash = (hash << 5) + *key++;
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	015a      	lsls	r2, r3, #5
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	1c59      	adds	r1, r3, #1
 8000204:	6079      	str	r1, [r7, #4]
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	4413      	add	r3, r2
 800020a:	60fb      	str	r3, [r7, #12]
    while (*key) {
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d1f3      	bne.n	80001fc <hashString+0x10>
    }
    return hash % size;
 8000214:	683a      	ldr	r2, [r7, #0]
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	fbb3 f1f2 	udiv	r1, r3, r2
 800021c:	fb01 f202 	mul.w	r2, r1, r2
 8000220:	1a9b      	subs	r3, r3, r2
}
 8000222:	4618      	mov	r0, r3
 8000224:	3714      	adds	r7, #20
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr

0800022e <hashNumeric>:

// Hash function for numeric keys
unsigned int hashNumeric(int key, int size) {
 800022e:	b480      	push	{r7}
 8000230:	b083      	sub	sp, #12
 8000232:	af00      	add	r7, sp, #0
 8000234:	6078      	str	r0, [r7, #4]
 8000236:	6039      	str	r1, [r7, #0]
    return key % size;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	683a      	ldr	r2, [r7, #0]
 800023c:	fb93 f2f2 	sdiv	r2, r3, r2
 8000240:	6839      	ldr	r1, [r7, #0]
 8000242:	fb01 f202 	mul.w	r2, r1, r2
 8000246:	1a9b      	subs	r3, r3, r2
}
 8000248:	4618      	mov	r0, r3
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr

08000254 <initDictionary>:

// Initialize dictionary
Dictionary *initDictionary(int size) {
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
    Dictionary *dict = malloc(sizeof(Dictionary));
 800025c:	2008      	movs	r0, #8
 800025e:	f006 fccd 	bl	8006bfc <malloc>
 8000262:	4603      	mov	r3, r0
 8000264:	60bb      	str	r3, [r7, #8]
    dict->buckets = malloc(size * sizeof(struct DictionaryNode *));
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	009b      	lsls	r3, r3, #2
 800026a:	4618      	mov	r0, r3
 800026c:	f006 fcc6 	bl	8006bfc <malloc>
 8000270:	4603      	mov	r3, r0
 8000272:	461a      	mov	r2, r3
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	601a      	str	r2, [r3, #0]
    dict->size = size;
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < size; i++) {
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
 8000282:	e009      	b.n	8000298 <initDictionary+0x44>
        dict->buckets[i] = NULL;
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	681a      	ldr	r2, [r3, #0]
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	009b      	lsls	r3, r3, #2
 800028c:	4413      	add	r3, r2
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	3301      	adds	r3, #1
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	68fa      	ldr	r2, [r7, #12]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	429a      	cmp	r2, r3
 800029e:	dbf1      	blt.n	8000284 <initDictionary+0x30>
    }
    return dict;
 80002a0:	68bb      	ldr	r3, [r7, #8]
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	3710      	adds	r7, #16
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}

080002aa <insert>:

// Insert key-value pair into dictionary
void insert(Dictionary *dict, const char *stringKey, int numericKey, struct Tone *tones, int numTones) {
 80002aa:	b580      	push	{r7, lr}
 80002ac:	b086      	sub	sp, #24
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	60f8      	str	r0, [r7, #12]
 80002b2:	60b9      	str	r1, [r7, #8]
 80002b4:	607a      	str	r2, [r7, #4]
 80002b6:	603b      	str	r3, [r7, #0]
    unsigned int index;
    struct DictionaryNode *newNode = malloc(sizeof(struct DictionaryNode));
 80002b8:	2014      	movs	r0, #20
 80002ba:	f006 fc9f 	bl	8006bfc <malloc>
 80002be:	4603      	mov	r3, r0
 80002c0:	613b      	str	r3, [r7, #16]
    newNode->stringKey = strdup(stringKey);
 80002c2:	68b8      	ldr	r0, [r7, #8]
 80002c4:	f006 fd5c 	bl	8006d80 <strdup>
 80002c8:	4603      	mov	r3, r0
 80002ca:	461a      	mov	r2, r3
 80002cc:	693b      	ldr	r3, [r7, #16]
 80002ce:	601a      	str	r2, [r3, #0]
    newNode->numericKey = numericKey;
 80002d0:	693b      	ldr	r3, [r7, #16]
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	605a      	str	r2, [r3, #4]
    newNode->tones = malloc(numTones * sizeof(struct Tone));
 80002d6:	6a3b      	ldr	r3, [r7, #32]
 80002d8:	00db      	lsls	r3, r3, #3
 80002da:	4618      	mov	r0, r3
 80002dc:	f006 fc8e 	bl	8006bfc <malloc>
 80002e0:	4603      	mov	r3, r0
 80002e2:	461a      	mov	r2, r3
 80002e4:	693b      	ldr	r3, [r7, #16]
 80002e6:	609a      	str	r2, [r3, #8]
    memcpy(newNode->tones, tones, numTones * sizeof(struct Tone));
 80002e8:	693b      	ldr	r3, [r7, #16]
 80002ea:	6898      	ldr	r0, [r3, #8]
 80002ec:	6a3b      	ldr	r3, [r7, #32]
 80002ee:	00db      	lsls	r3, r3, #3
 80002f0:	461a      	mov	r2, r3
 80002f2:	6839      	ldr	r1, [r7, #0]
 80002f4:	f006 fc8a 	bl	8006c0c <memcpy>
    newNode->numTones = numTones;
 80002f8:	693b      	ldr	r3, [r7, #16]
 80002fa:	6a3a      	ldr	r2, [r7, #32]
 80002fc:	60da      	str	r2, [r3, #12]

    if (stringKey != NULL) {
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d007      	beq.n	8000314 <insert+0x6a>
        index = hashString(stringKey, dict->size);
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	4619      	mov	r1, r3
 800030a:	68b8      	ldr	r0, [r7, #8]
 800030c:	f7ff ff6e 	bl	80001ec <hashString>
 8000310:	6178      	str	r0, [r7, #20]
 8000312:	e006      	b.n	8000322 <insert+0x78>
    } else {
        index = hashNumeric(numericKey, dict->size);
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	4619      	mov	r1, r3
 800031a:	6878      	ldr	r0, [r7, #4]
 800031c:	f7ff ff87 	bl	800022e <hashNumeric>
 8000320:	6178      	str	r0, [r7, #20]
    }

    newNode->next = dict->buckets[index];
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	697b      	ldr	r3, [r7, #20]
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	4413      	add	r3, r2
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	693b      	ldr	r3, [r7, #16]
 8000330:	611a      	str	r2, [r3, #16]
    dict->buckets[index] = newNode;
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	009b      	lsls	r3, r3, #2
 800033a:	4413      	add	r3, r2
 800033c:	693a      	ldr	r2, [r7, #16]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	bf00      	nop
 8000342:	3718      	adds	r7, #24
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <lookup>:

// Lookup value by key
struct Tone *lookup(Dictionary *dict, const char *stringKey, int numericKey, int *numTones) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af00      	add	r7, sp, #0
 800034e:	60f8      	str	r0, [r7, #12]
 8000350:	60b9      	str	r1, [r7, #8]
 8000352:	607a      	str	r2, [r7, #4]
 8000354:	603b      	str	r3, [r7, #0]
    unsigned int index;
    struct DictionaryNode *current;

    if (stringKey != NULL) {
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d029      	beq.n	80003b0 <lookup+0x68>
        index = hashString(stringKey, dict->size);
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	4619      	mov	r1, r3
 8000362:	68b8      	ldr	r0, [r7, #8]
 8000364:	f7ff ff42 	bl	80001ec <hashString>
 8000368:	6138      	str	r0, [r7, #16]
        current = dict->buckets[index];
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	4413      	add	r3, r2
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	617b      	str	r3, [r7, #20]
        while (current) {
 8000378:	e016      	b.n	80003a8 <lookup+0x60>
            if (current->stringKey && strcmp(current->stringKey, stringKey) == 0) {
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d00f      	beq.n	80003a2 <lookup+0x5a>
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	68b9      	ldr	r1, [r7, #8]
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff ff1d 	bl	80001c8 <strcmp>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d106      	bne.n	80003a2 <lookup+0x5a>
                *numTones = current->numTones;
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	68da      	ldr	r2, [r3, #12]
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	601a      	str	r2, [r3, #0]
                return current->tones;
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	689b      	ldr	r3, [r3, #8]
 80003a0:	e02b      	b.n	80003fa <lookup+0xb2>
            }
            current = current->next;
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	691b      	ldr	r3, [r3, #16]
 80003a6:	617b      	str	r3, [r7, #20]
        while (current) {
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d1e5      	bne.n	800037a <lookup+0x32>
 80003ae:	e020      	b.n	80003f2 <lookup+0xaa>
        }
    } else {
        index = hashNumeric(numericKey, dict->size);
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	685b      	ldr	r3, [r3, #4]
 80003b4:	4619      	mov	r1, r3
 80003b6:	6878      	ldr	r0, [r7, #4]
 80003b8:	f7ff ff39 	bl	800022e <hashNumeric>
 80003bc:	6138      	str	r0, [r7, #16]
        current = dict->buckets[index];
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	693b      	ldr	r3, [r7, #16]
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	4413      	add	r3, r2
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	617b      	str	r3, [r7, #20]
        while (current) {
 80003cc:	e00e      	b.n	80003ec <lookup+0xa4>
            if (current->numericKey == numericKey) {
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	687a      	ldr	r2, [r7, #4]
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d106      	bne.n	80003e6 <lookup+0x9e>
                *numTones = current->numTones;
 80003d8:	697b      	ldr	r3, [r7, #20]
 80003da:	68da      	ldr	r2, [r3, #12]
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	601a      	str	r2, [r3, #0]
                return current->tones;
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	e009      	b.n	80003fa <lookup+0xb2>
            }
            current = current->next;
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	691b      	ldr	r3, [r3, #16]
 80003ea:	617b      	str	r3, [r7, #20]
        while (current) {
 80003ec:	697b      	ldr	r3, [r7, #20]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d1ed      	bne.n	80003ce <lookup+0x86>
        }
    }

    *numTones = 0;
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
    return NULL;
 80003f8:	2300      	movs	r3, #0
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	3718      	adds	r7, #24
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
	...

08000404 <extractNumber>:
////}
//PWM END

//UART BEGIN

void extractNumber(const uint8_t *data) {
 8000404:	b5b0      	push	{r4, r5, r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
	isCorrect = -1;
 800040c:	4b3d      	ldr	r3, [pc, #244]	; (8000504 <extractNumber+0x100>)
 800040e:	f04f 32ff 	mov.w	r2, #4294967295
 8000412:	601a      	str	r2, [r3, #0]
	// Extract the first four characters and convert them to integers
	char pass[19] = "PASS_CHANGED(XXXX)\n";
 8000414:	4b3c      	ldr	r3, [pc, #240]	; (8000508 <extractNumber+0x104>)
 8000416:	f107 0408 	add.w	r4, r7, #8
 800041a:	461d      	mov	r5, r3
 800041c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800041e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000420:	682b      	ldr	r3, [r5, #0]
 8000422:	461a      	mov	r2, r3
 8000424:	8022      	strh	r2, [r4, #0]
 8000426:	3402      	adds	r4, #2
 8000428:	0c1b      	lsrs	r3, r3, #16
 800042a:	7023      	strb	r3, [r4, #0]
	pass[13] = data[9];
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	3309      	adds	r3, #9
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	757b      	strb	r3, [r7, #21]
	pass[14] = data[10];
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	330a      	adds	r3, #10
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	75bb      	strb	r3, [r7, #22]
	pass[15] = data[11];
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	330b      	adds	r3, #11
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	75fb      	strb	r3, [r7, #23]
	pass[16] = data[12];
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	330c      	adds	r3, #12
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	763b      	strb	r3, [r7, #24]

	for (int i = 9; i < 13; i++) {
 800044c:	2309      	movs	r3, #9
 800044e:	61fb      	str	r3, [r7, #28]
 8000450:	e037      	b.n	80004c2 <extractNumber+0xbe>
		if (data[i] <= '9' && data[i] >= '0') {
 8000452:	69fb      	ldr	r3, [r7, #28]
 8000454:	687a      	ldr	r2, [r7, #4]
 8000456:	4413      	add	r3, r2
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b39      	cmp	r3, #57	; 0x39
 800045c:	d814      	bhi.n	8000488 <extractNumber+0x84>
 800045e:	69fb      	ldr	r3, [r7, #28]
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	4413      	add	r3, r2
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b2f      	cmp	r3, #47	; 0x2f
 8000468:	d90e      	bls.n	8000488 <extractNumber+0x84>
			password[i - 9] = data[i] - '0';
 800046a:	69fb      	ldr	r3, [r7, #28]
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	4413      	add	r3, r2
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	461a      	mov	r2, r3
 8000474:	69fb      	ldr	r3, [r7, #28]
 8000476:	3b09      	subs	r3, #9
 8000478:	3a30      	subs	r2, #48	; 0x30
 800047a:	4924      	ldr	r1, [pc, #144]	; (800050c <extractNumber+0x108>)
 800047c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 9; i < 13; i++) {
 8000480:	69fb      	ldr	r3, [r7, #28]
 8000482:	3301      	adds	r3, #1
 8000484:	61fb      	str	r3, [r7, #28]
 8000486:	e01c      	b.n	80004c2 <extractNumber+0xbe>
		} else {
			if (logStatus) {
 8000488:	4b21      	ldr	r3, [pc, #132]	; (8000510 <extractNumber+0x10c>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d004      	beq.n	800049a <extractNumber+0x96>
				HAL_UART_Transmit_IT(&huart1, "ERROR(INCORRECT FORMAT)\n", 24);
 8000490:	2218      	movs	r2, #24
 8000492:	4920      	ldr	r1, [pc, #128]	; (8000514 <extractNumber+0x110>)
 8000494:	4820      	ldr	r0, [pc, #128]	; (8000518 <extractNumber+0x114>)
 8000496:	f005 f857 	bl	8005548 <HAL_UART_Transmit_IT>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 800049a:	2200      	movs	r2, #0
 800049c:	2101      	movs	r1, #1
 800049e:	481f      	ldr	r0, [pc, #124]	; (800051c <extractNumber+0x118>)
 80004a0:	f001 ff00 	bl	80022a4 <HAL_GPIO_WritePin>
			buzzer_flag = WrongInput;
 80004a4:	4b1e      	ldr	r3, [pc, #120]	; (8000520 <extractNumber+0x11c>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]
			buzzerEnterTime = HAL_GetTick();
 80004aa:	f001 fbed 	bl	8001c88 <HAL_GetTick>
 80004ae:	4603      	mov	r3, r0
 80004b0:	4a1c      	ldr	r2, [pc, #112]	; (8000524 <extractNumber+0x120>)
 80004b2:	6013      	str	r3, [r2, #0]
			if (alertStatus)
 80004b4:	4b1c      	ldr	r3, [pc, #112]	; (8000528 <extractNumber+0x124>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d01f      	beq.n	80004fc <extractNumber+0xf8>
				PWM_Start();
 80004bc:	f001 f988 	bl	80017d0 <PWM_Start>
 80004c0:	e01d      	b.n	80004fe <extractNumber+0xfa>
	for (int i = 9; i < 13; i++) {
 80004c2:	69fb      	ldr	r3, [r7, #28]
 80004c4:	2b0c      	cmp	r3, #12
 80004c6:	ddc4      	ble.n	8000452 <extractNumber+0x4e>
			return;
		}
	}
	if (logStatus) {
 80004c8:	4b11      	ldr	r3, [pc, #68]	; (8000510 <extractNumber+0x10c>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d016      	beq.n	80004fe <extractNumber+0xfa>
		HAL_UART_Transmit_IT(&huart1, pass, 19);
 80004d0:	f107 0308 	add.w	r3, r7, #8
 80004d4:	2213      	movs	r2, #19
 80004d6:	4619      	mov	r1, r3
 80004d8:	480f      	ldr	r0, [pc, #60]	; (8000518 <extractNumber+0x114>)
 80004da:	f005 f835 	bl	8005548 <HAL_UART_Transmit_IT>
		buzzer_flag = CorrectInput;
 80004de:	4b10      	ldr	r3, [pc, #64]	; (8000520 <extractNumber+0x11c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	701a      	strb	r2, [r3, #0]
		buzzerEnterTime = HAL_GetTick();
 80004e4:	f001 fbd0 	bl	8001c88 <HAL_GetTick>
 80004e8:	4603      	mov	r3, r0
 80004ea:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <extractNumber+0x120>)
 80004ec:	6013      	str	r3, [r2, #0]
		if (alertStatus)
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <extractNumber+0x124>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d003      	beq.n	80004fe <extractNumber+0xfa>
			PWM_Start();
 80004f6:	f001 f96b 	bl	80017d0 <PWM_Start>
 80004fa:	e000      	b.n	80004fe <extractNumber+0xfa>
			return;
 80004fc:	bf00      	nop
	}
}
 80004fe:	3720      	adds	r7, #32
 8000500:	46bd      	mov	sp, r7
 8000502:	bdb0      	pop	{r4, r5, r7, pc}
 8000504:	20000040 	.word	0x20000040
 8000508:	08006e0c 	.word	0x08006e0c
 800050c:	20000000 	.word	0x20000000
 8000510:	20000038 	.word	0x20000038
 8000514:	08006df0 	.word	0x08006df0
 8000518:	2000026c 	.word	0x2000026c
 800051c:	48000800 	.word	0x48000800
 8000520:	20000048 	.word	0x20000048
 8000524:	20000620 	.word	0x20000620
 8000528:	2000003c 	.word	0x2000003c

0800052c <compareStrings>:

int compareStrings(const char *str1, const uint8_t *str2, int n) {
 800052c:	b480      	push	{r7}
 800052e:	b087      	sub	sp, #28
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < n; i++) {
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	e00e      	b.n	800055c <compareStrings+0x30>
		if (str1[i] != str2[i]) {
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	68fa      	ldr	r2, [r7, #12]
 8000542:	4413      	add	r3, r2
 8000544:	781a      	ldrb	r2, [r3, #0]
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	68b9      	ldr	r1, [r7, #8]
 800054a:	440b      	add	r3, r1
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	429a      	cmp	r2, r3
 8000550:	d001      	beq.n	8000556 <compareStrings+0x2a>
			return 0;
 8000552:	2300      	movs	r3, #0
 8000554:	e007      	b.n	8000566 <compareStrings+0x3a>
	for (int i = 0; i < n; i++) {
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	3301      	adds	r3, #1
 800055a:	617b      	str	r3, [r7, #20]
 800055c:	697a      	ldr	r2, [r7, #20]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	429a      	cmp	r2, r3
 8000562:	dbec      	blt.n	800053e <compareStrings+0x12>
		}
	}
	return 1;
 8000564:	2301      	movs	r3, #1
}
 8000566:	4618      	mov	r0, r3
 8000568:	371c      	adds	r7, #28
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
	...

08000574 <HAL_UART_RxCpltCallback>:

uint8_t data[100];
uint8_t d;
uint8_t i;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000574:	b5b0      	push	{r4, r5, r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a72      	ldr	r2, [pc, #456]	; (800074c <HAL_UART_RxCpltCallback+0x1d8>)
 8000582:	4293      	cmp	r3, r2
 8000584:	f040 80de 	bne.w	8000744 <HAL_UART_RxCpltCallback+0x1d0>
		HAL_UART_Receive_IT(&huart1, &d, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	4971      	ldr	r1, [pc, #452]	; (8000750 <HAL_UART_RxCpltCallback+0x1dc>)
 800058c:	4871      	ldr	r0, [pc, #452]	; (8000754 <HAL_UART_RxCpltCallback+0x1e0>)
 800058e:	f005 f839 	bl	8005604 <HAL_UART_Receive_IT>
		data[i++] = d;
 8000592:	4b71      	ldr	r3, [pc, #452]	; (8000758 <HAL_UART_RxCpltCallback+0x1e4>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	1c5a      	adds	r2, r3, #1
 8000598:	b2d1      	uxtb	r1, r2
 800059a:	4a6f      	ldr	r2, [pc, #444]	; (8000758 <HAL_UART_RxCpltCallback+0x1e4>)
 800059c:	7011      	strb	r1, [r2, #0]
 800059e:	461a      	mov	r2, r3
 80005a0:	4b6b      	ldr	r3, [pc, #428]	; (8000750 <HAL_UART_RxCpltCallback+0x1dc>)
 80005a2:	7819      	ldrb	r1, [r3, #0]
 80005a4:	4b6d      	ldr	r3, [pc, #436]	; (800075c <HAL_UART_RxCpltCallback+0x1e8>)
 80005a6:	5499      	strb	r1, [r3, r2]
		if (d == '\n') {
 80005a8:	4b69      	ldr	r3, [pc, #420]	; (8000750 <HAL_UART_RxCpltCallback+0x1dc>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b0a      	cmp	r3, #10
 80005ae:	f040 80c9 	bne.w	8000744 <HAL_UART_RxCpltCallback+0x1d0>
			if ((i == 15 && compareStrings(setPass, data, 9) == 1)
 80005b2:	4b69      	ldr	r3, [pc, #420]	; (8000758 <HAL_UART_RxCpltCallback+0x1e4>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b0f      	cmp	r3, #15
 80005b8:	d11a      	bne.n	80005f0 <HAL_UART_RxCpltCallback+0x7c>
 80005ba:	2209      	movs	r2, #9
 80005bc:	4967      	ldr	r1, [pc, #412]	; (800075c <HAL_UART_RxCpltCallback+0x1e8>)
 80005be:	4868      	ldr	r0, [pc, #416]	; (8000760 <HAL_UART_RxCpltCallback+0x1ec>)
 80005c0:	f7ff ffb4 	bl	800052c <compareStrings>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d112      	bne.n	80005f0 <HAL_UART_RxCpltCallback+0x7c>
					&& isCorrect == -1) {
 80005ca:	4b66      	ldr	r3, [pc, #408]	; (8000764 <HAL_UART_RxCpltCallback+0x1f0>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d2:	d10d      	bne.n	80005f0 <HAL_UART_RxCpltCallback+0x7c>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2101      	movs	r1, #1
 80005d8:	4863      	ldr	r0, [pc, #396]	; (8000768 <HAL_UART_RxCpltCallback+0x1f4>)
 80005da:	f001 fe63 	bl	80022a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2104      	movs	r1, #4
 80005e2:	4861      	ldr	r0, [pc, #388]	; (8000768 <HAL_UART_RxCpltCallback+0x1f4>)
 80005e4:	f001 fe5e 	bl	80022a4 <HAL_GPIO_WritePin>
				extractNumber(data);
 80005e8:	485c      	ldr	r0, [pc, #368]	; (800075c <HAL_UART_RxCpltCallback+0x1e8>)
 80005ea:	f7ff ff0b 	bl	8000404 <extractNumber>
 80005ee:	e0a6      	b.n	800073e <HAL_UART_RxCpltCallback+0x1ca>
			} else if (i == 7) {
 80005f0:	4b59      	ldr	r3, [pc, #356]	; (8000758 <HAL_UART_RxCpltCallback+0x1e4>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b07      	cmp	r3, #7
 80005f6:	d111      	bne.n	800061c <HAL_UART_RxCpltCallback+0xa8>
				if (compareStrings(logON, data, 6) == 1) {
 80005f8:	2206      	movs	r2, #6
 80005fa:	4958      	ldr	r1, [pc, #352]	; (800075c <HAL_UART_RxCpltCallback+0x1e8>)
 80005fc:	485b      	ldr	r0, [pc, #364]	; (800076c <HAL_UART_RxCpltCallback+0x1f8>)
 80005fe:	f7ff ff95 	bl	800052c <compareStrings>
 8000602:	4603      	mov	r3, r0
 8000604:	2b01      	cmp	r3, #1
 8000606:	f040 809a 	bne.w	800073e <HAL_UART_RxCpltCallback+0x1ca>
					logStatus = 1;
 800060a:	4b59      	ldr	r3, [pc, #356]	; (8000770 <HAL_UART_RxCpltCallback+0x1fc>)
 800060c:	2201      	movs	r2, #1
 800060e:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Log Turned ON\n",
 8000610:	2216      	movs	r2, #22
 8000612:	4958      	ldr	r1, [pc, #352]	; (8000774 <HAL_UART_RxCpltCallback+0x200>)
 8000614:	484f      	ldr	r0, [pc, #316]	; (8000754 <HAL_UART_RxCpltCallback+0x1e0>)
 8000616:	f004 ff97 	bl	8005548 <HAL_UART_Transmit_IT>
 800061a:	e090      	b.n	800073e <HAL_UART_RxCpltCallback+0x1ca>
							22);
				}
			} else if (i == 8) {
 800061c:	4b4e      	ldr	r3, [pc, #312]	; (8000758 <HAL_UART_RxCpltCallback+0x1e4>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b08      	cmp	r3, #8
 8000622:	d111      	bne.n	8000648 <HAL_UART_RxCpltCallback+0xd4>
				if (compareStrings(logOFF, data, 7) == 1) {
 8000624:	2207      	movs	r2, #7
 8000626:	494d      	ldr	r1, [pc, #308]	; (800075c <HAL_UART_RxCpltCallback+0x1e8>)
 8000628:	4853      	ldr	r0, [pc, #332]	; (8000778 <HAL_UART_RxCpltCallback+0x204>)
 800062a:	f7ff ff7f 	bl	800052c <compareStrings>
 800062e:	4603      	mov	r3, r0
 8000630:	2b01      	cmp	r3, #1
 8000632:	f040 8084 	bne.w	800073e <HAL_UART_RxCpltCallback+0x1ca>
					logStatus = 0;
 8000636:	4b4e      	ldr	r3, [pc, #312]	; (8000770 <HAL_UART_RxCpltCallback+0x1fc>)
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Log Turned OFF\n",
 800063c:	2217      	movs	r2, #23
 800063e:	494f      	ldr	r1, [pc, #316]	; (800077c <HAL_UART_RxCpltCallback+0x208>)
 8000640:	4844      	ldr	r0, [pc, #272]	; (8000754 <HAL_UART_RxCpltCallback+0x1e0>)
 8000642:	f004 ff81 	bl	8005548 <HAL_UART_Transmit_IT>
 8000646:	e07a      	b.n	800073e <HAL_UART_RxCpltCallback+0x1ca>
							23);
				}
			} else if (i == 9) {
 8000648:	4b43      	ldr	r3, [pc, #268]	; (8000758 <HAL_UART_RxCpltCallback+0x1e4>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b09      	cmp	r3, #9
 800064e:	d11a      	bne.n	8000686 <HAL_UART_RxCpltCallback+0x112>
				if (compareStrings(alertON, data, 8) == 1) {
 8000650:	2208      	movs	r2, #8
 8000652:	4942      	ldr	r1, [pc, #264]	; (800075c <HAL_UART_RxCpltCallback+0x1e8>)
 8000654:	484a      	ldr	r0, [pc, #296]	; (8000780 <HAL_UART_RxCpltCallback+0x20c>)
 8000656:	f7ff ff69 	bl	800052c <compareStrings>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d16e      	bne.n	800073e <HAL_UART_RxCpltCallback+0x1ca>
					alertStatus = 1;
 8000660:	4b48      	ldr	r3, [pc, #288]	; (8000784 <HAL_UART_RxCpltCallback+0x210>)
 8000662:	2201      	movs	r2, #1
 8000664:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Alerts Turned ON\n",
 8000666:	2219      	movs	r2, #25
 8000668:	4947      	ldr	r1, [pc, #284]	; (8000788 <HAL_UART_RxCpltCallback+0x214>)
 800066a:	483a      	ldr	r0, [pc, #232]	; (8000754 <HAL_UART_RxCpltCallback+0x1e0>)
 800066c:	f004 ff6c 	bl	8005548 <HAL_UART_Transmit_IT>
							25);
					buzzer_flag = CorrectInput;
 8000670:	4b46      	ldr	r3, [pc, #280]	; (800078c <HAL_UART_RxCpltCallback+0x218>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
					buzzerEnterTime = HAL_GetTick();
 8000676:	f001 fb07 	bl	8001c88 <HAL_GetTick>
 800067a:	4603      	mov	r3, r0
 800067c:	4a44      	ldr	r2, [pc, #272]	; (8000790 <HAL_UART_RxCpltCallback+0x21c>)
 800067e:	6013      	str	r3, [r2, #0]
					PWM_Start();
 8000680:	f001 f8a6 	bl	80017d0 <PWM_Start>
 8000684:	e05b      	b.n	800073e <HAL_UART_RxCpltCallback+0x1ca>
				}
			} else if (i == 10) {
 8000686:	4b34      	ldr	r3, [pc, #208]	; (8000758 <HAL_UART_RxCpltCallback+0x1e4>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b0a      	cmp	r3, #10
 800068c:	d110      	bne.n	80006b0 <HAL_UART_RxCpltCallback+0x13c>
				if (compareStrings(alertOFF, data, 9) == 1) {
 800068e:	2209      	movs	r2, #9
 8000690:	4932      	ldr	r1, [pc, #200]	; (800075c <HAL_UART_RxCpltCallback+0x1e8>)
 8000692:	4840      	ldr	r0, [pc, #256]	; (8000794 <HAL_UART_RxCpltCallback+0x220>)
 8000694:	f7ff ff4a 	bl	800052c <compareStrings>
 8000698:	4603      	mov	r3, r0
 800069a:	2b01      	cmp	r3, #1
 800069c:	d14f      	bne.n	800073e <HAL_UART_RxCpltCallback+0x1ca>
					alertStatus = 0;
 800069e:	4b39      	ldr	r3, [pc, #228]	; (8000784 <HAL_UART_RxCpltCallback+0x210>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Alerts Turned OFF\n",
 80006a4:	221a      	movs	r2, #26
 80006a6:	493c      	ldr	r1, [pc, #240]	; (8000798 <HAL_UART_RxCpltCallback+0x224>)
 80006a8:	482a      	ldr	r0, [pc, #168]	; (8000754 <HAL_UART_RxCpltCallback+0x1e0>)
 80006aa:	f004 ff4d 	bl	8005548 <HAL_UART_Transmit_IT>
 80006ae:	e046      	b.n	800073e <HAL_UART_RxCpltCallback+0x1ca>
							26);
				}
			} else if (i == 14 && (data[11] - '0') < 6
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <HAL_UART_RxCpltCallback+0x1e4>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b0e      	cmp	r3, #14
 80006b6:	d12d      	bne.n	8000714 <HAL_UART_RxCpltCallback+0x1a0>
 80006b8:	4b28      	ldr	r3, [pc, #160]	; (800075c <HAL_UART_RxCpltCallback+0x1e8>)
 80006ba:	7adb      	ldrb	r3, [r3, #11]
 80006bc:	2b35      	cmp	r3, #53	; 0x35
 80006be:	d829      	bhi.n	8000714 <HAL_UART_RxCpltCallback+0x1a0>
					&& (data[11] - '0') > -1) {
 80006c0:	4b26      	ldr	r3, [pc, #152]	; (800075c <HAL_UART_RxCpltCallback+0x1e8>)
 80006c2:	7adb      	ldrb	r3, [r3, #11]
 80006c4:	2b2f      	cmp	r3, #47	; 0x2f
 80006c6:	d925      	bls.n	8000714 <HAL_UART_RxCpltCallback+0x1a0>
				if (compareStrings(setVolume, data, 11) == 1
 80006c8:	220b      	movs	r2, #11
 80006ca:	4924      	ldr	r1, [pc, #144]	; (800075c <HAL_UART_RxCpltCallback+0x1e8>)
 80006cc:	4833      	ldr	r0, [pc, #204]	; (800079c <HAL_UART_RxCpltCallback+0x228>)
 80006ce:	f7ff ff2d 	bl	800052c <compareStrings>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d131      	bne.n	800073c <HAL_UART_RxCpltCallback+0x1c8>
						&& data[12] == ')') {
 80006d8:	4b20      	ldr	r3, [pc, #128]	; (800075c <HAL_UART_RxCpltCallback+0x1e8>)
 80006da:	7b1b      	ldrb	r3, [r3, #12]
 80006dc:	2b29      	cmp	r3, #41	; 0x29
 80006de:	d12d      	bne.n	800073c <HAL_UART_RxCpltCallback+0x1c8>
					int v = data[11] - '0';
 80006e0:	4b1e      	ldr	r3, [pc, #120]	; (800075c <HAL_UART_RxCpltCallback+0x1e8>)
 80006e2:	7adb      	ldrb	r3, [r3, #11]
 80006e4:	3b30      	subs	r3, #48	; 0x30
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
//					_volume = v * 10;
					char massage[24] = "Program Volume Set To  \n";
 80006e8:	4b2d      	ldr	r3, [pc, #180]	; (80007a0 <HAL_UART_RxCpltCallback+0x22c>)
 80006ea:	f107 040c 	add.w	r4, r7, #12
 80006ee:	461d      	mov	r5, r3
 80006f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006f8:	e884 0003 	stmia.w	r4, {r0, r1}
					massage[22] = data[11];
 80006fc:	4b17      	ldr	r3, [pc, #92]	; (800075c <HAL_UART_RxCpltCallback+0x1e8>)
 80006fe:	7adb      	ldrb	r3, [r3, #11]
 8000700:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					HAL_UART_Transmit_IT(&huart1, massage, 24);
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2218      	movs	r2, #24
 800070a:	4619      	mov	r1, r3
 800070c:	4811      	ldr	r0, [pc, #68]	; (8000754 <HAL_UART_RxCpltCallback+0x1e0>)
 800070e:	f004 ff1b 	bl	8005548 <HAL_UART_Transmit_IT>
				if (compareStrings(setVolume, data, 11) == 1
 8000712:	e013      	b.n	800073c <HAL_UART_RxCpltCallback+0x1c8>
				}
			} else {
				HAL_UART_Transmit_IT(&huart1, "INVALID INPUT\n", 14);
 8000714:	220e      	movs	r2, #14
 8000716:	4923      	ldr	r1, [pc, #140]	; (80007a4 <HAL_UART_RxCpltCallback+0x230>)
 8000718:	480e      	ldr	r0, [pc, #56]	; (8000754 <HAL_UART_RxCpltCallback+0x1e0>)
 800071a:	f004 ff15 	bl	8005548 <HAL_UART_Transmit_IT>
				buzzer_flag = WrongInput;
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <HAL_UART_RxCpltCallback+0x218>)
 8000720:	2201      	movs	r2, #1
 8000722:	701a      	strb	r2, [r3, #0]
				buzzerEnterTime = HAL_GetTick();
 8000724:	f001 fab0 	bl	8001c88 <HAL_GetTick>
 8000728:	4603      	mov	r3, r0
 800072a:	4a19      	ldr	r2, [pc, #100]	; (8000790 <HAL_UART_RxCpltCallback+0x21c>)
 800072c:	6013      	str	r3, [r2, #0]
				if (alertStatus)
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <HAL_UART_RxCpltCallback+0x210>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d003      	beq.n	800073e <HAL_UART_RxCpltCallback+0x1ca>
					PWM_Start();
 8000736:	f001 f84b 	bl	80017d0 <PWM_Start>
 800073a:	e000      	b.n	800073e <HAL_UART_RxCpltCallback+0x1ca>
				if (compareStrings(setVolume, data, 11) == 1
 800073c:	bf00      	nop
			}

			i = 0;
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <HAL_UART_RxCpltCallback+0x1e4>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8000744:	bf00      	nop
 8000746:	3728      	adds	r7, #40	; 0x28
 8000748:	46bd      	mov	sp, r7
 800074a:	bdb0      	pop	{r4, r5, r7, pc}
 800074c:	40013800 	.word	0x40013800
 8000750:	200006dc 	.word	0x200006dc
 8000754:	2000026c 	.word	0x2000026c
 8000758:	200006dd 	.word	0x200006dd
 800075c:	20000678 	.word	0x20000678
 8000760:	2000004c 	.word	0x2000004c
 8000764:	20000040 	.word	0x20000040
 8000768:	48000800 	.word	0x48000800
 800076c:	20000058 	.word	0x20000058
 8000770:	20000038 	.word	0x20000038
 8000774:	08006e20 	.word	0x08006e20
 8000778:	20000060 	.word	0x20000060
 800077c:	08006e38 	.word	0x08006e38
 8000780:	20000068 	.word	0x20000068
 8000784:	2000003c 	.word	0x2000003c
 8000788:	08006e50 	.word	0x08006e50
 800078c:	20000048 	.word	0x20000048
 8000790:	20000620 	.word	0x20000620
 8000794:	20000070 	.word	0x20000070
 8000798:	08006e6c 	.word	0x08006e6c
 800079c:	2000007c 	.word	0x2000007c
 80007a0:	08006e98 	.word	0x08006e98
 80007a4:	08006e88 	.word	0x08006e88

080007a8 <display_number>:

//UART END

void display_number(int led_flag, int _number) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOD,
 80007b2:	2201      	movs	r2, #1
 80007b4:	211e      	movs	r1, #30
 80007b6:	4813      	ldr	r0, [pc, #76]	; (8000804 <display_number+0x5c>)
 80007b8:	f001 fd74 	bl	80022a4 <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOD, led[led_flag], DISPLAY_ON);
 80007bc:	4a12      	ldr	r2, [pc, #72]	; (8000808 <display_number+0x60>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007c4:	2200      	movs	r2, #0
 80007c6:	4619      	mov	r1, r3
 80007c8:	480e      	ldr	r0, [pc, #56]	; (8000804 <display_number+0x5c>)
 80007ca:	f001 fd6b 	bl	80022a4 <HAL_GPIO_WritePin>
	if (_number != 0) {
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d009      	beq.n	80007e8 <display_number+0x40>
		HAL_GPIO_WritePin(GPIOD, digits[_number].pattern, GPIO_PIN_SET);
 80007d4:	4a0d      	ldr	r2, [pc, #52]	; (800080c <display_number+0x64>)
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	00db      	lsls	r3, r3, #3
 80007da:	4413      	add	r3, r2
 80007dc:	889b      	ldrh	r3, [r3, #4]
 80007de:	2201      	movs	r2, #1
 80007e0:	4619      	mov	r1, r3
 80007e2:	4808      	ldr	r0, [pc, #32]	; (8000804 <display_number+0x5c>)
 80007e4:	f001 fd5e 	bl	80022a4 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(GPIOD, digits[_number].anti_pattern, GPIO_PIN_RESET);
 80007e8:	4a08      	ldr	r2, [pc, #32]	; (800080c <display_number+0x64>)
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	00db      	lsls	r3, r3, #3
 80007ee:	4413      	add	r3, r2
 80007f0:	88db      	ldrh	r3, [r3, #6]
 80007f2:	2200      	movs	r2, #0
 80007f4:	4619      	mov	r1, r3
 80007f6:	4803      	ldr	r0, [pc, #12]	; (8000804 <display_number+0x5c>)
 80007f8:	f001 fd54 	bl	80022a4 <HAL_GPIO_WritePin>
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	48000c00 	.word	0x48000c00
 8000808:	200005e8 	.word	0x200005e8
 800080c:	20000628 	.word	0x20000628

08000810 <increase>:

void increase(int _head) {
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	carrier[_head] += 1;
 8000818:	4a0c      	ldr	r2, [pc, #48]	; (800084c <increase+0x3c>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000820:	1c5a      	adds	r2, r3, #1
 8000822:	490a      	ldr	r1, [pc, #40]	; (800084c <increase+0x3c>)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (carrier[_head] == 10) {
 800082a:	4a08      	ldr	r2, [pc, #32]	; (800084c <increase+0x3c>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000832:	2b0a      	cmp	r3, #10
 8000834:	d104      	bne.n	8000840 <increase+0x30>
		carrier[_head] = 0;
 8000836:	4a05      	ldr	r2, [pc, #20]	; (800084c <increase+0x3c>)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2100      	movs	r1, #0
 800083c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	200005f0 	.word	0x200005f0

08000850 <init_display>:

void init_display() {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,
 8000854:	2201      	movs	r2, #1
 8000856:	211e      	movs	r1, #30
 8000858:	4802      	ldr	r0, [pc, #8]	; (8000864 <init_display+0x14>)
 800085a:	f001 fd23 	bl	80022a4 <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	48000c00 	.word	0x48000c00

08000868 <initTonesDictionary>:

void initTonesDictionary() {
 8000868:	b580      	push	{r7, lr}
 800086a:	f5ad 5d0f 	sub.w	sp, sp, #9152	; 0x23c0
 800086e:	b08c      	sub	sp, #48	; 0x30
 8000870:	af02      	add	r7, sp, #8
    playlist = initDictionary(10);
 8000872:	200a      	movs	r0, #10
 8000874:	f7ff fcee 	bl	8000254 <initDictionary>
 8000878:	4603      	mov	r3, r0
 800087a:	4a38      	ldr	r2, [pc, #224]	; (800095c <initTonesDictionary+0xf4>)
 800087c:	6013      	str	r3, [r2, #0]

    // Example tones
    struct Tone super_mario_bros[]={{2637,306},{0,153},{2637,153},{0,153},{2093,153},{2637,153},{0,153},{3136,153},{0,459},{1586,153},{0,459},{2093,153},{0,306},{1586,153},{0,306},{1319,153},{0,306},{1760,153},{0,153},{1976,153},{0,153},{1865,153},{1760,153},{0,153},{1586,204},{2637,204},{3136,204},{3520,153},{0,153},{2794,153},{3136,153},{0,153},{2637,153},{0,153},{2093,153},{2349,153},{1976,153},{0,306},{2093,153},{0,306},{1586,153},{0,306},{1319,153},{0,306},{1760,153},{0,153},{1976,153},{0,153},{1865,153},{1760,153},{0,153},{1586,204},{2637,204},{3136,204},{3520,153},{0,153},{2794,153},{3136,153},{0,153},{2637,153},{0,153},{2093,153},{2349,153},{1976,153},{0,0}};
 800087e:	f507 530f 	add.w	r3, r7, #9152	; 0x23c0
 8000882:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000886:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800088a:	4a35      	ldr	r2, [pc, #212]	; (8000960 <initTonesDictionary+0xf8>)
 800088c:	4618      	mov	r0, r3
 800088e:	4611      	mov	r1, r2
 8000890:	f44f 7302 	mov.w	r3, #520	; 0x208
 8000894:	461a      	mov	r2, r3
 8000896:	f006 f9b9 	bl	8006c0c <memcpy>
    struct Tone hedwig_theme[]={{REST,750},{NOTE_D4,374},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_G4,750},{NOTE_D5,374},{NOTE_C5,1124},{NOTE_A4,1124},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_F4,750},{NOTE_GS4,374},{NOTE_D4,2249},{NOTE_D4,374},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_G4,750},{NOTE_D5,374},{NOTE_F5,750},{NOTE_E5,374},{NOTE_DS5,750},{NOTE_B4,374},{NOTE_DS5,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_B4,374},{NOTE_G4,2249},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_DS5,750},{NOTE_D5,374},{NOTE_CS5,750},{NOTE_A4,374},{NOTE_AS4,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_D4,374},{NOTE_D5,1700},{REST,150},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_F5,750},{NOTE_E5,374},{NOTE_DS5,750},{NOTE_B4,374},{NOTE_DS5,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_AS4,374},{NOTE_G4,2249},{0,0}};
 800089a:	f507 530f 	add.w	r3, r7, #9152	; 0x23c0
 800089e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80008a2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80008a6:	4a2f      	ldr	r2, [pc, #188]	; (8000964 <initTonesDictionary+0xfc>)
 80008a8:	4618      	mov	r0, r3
 80008aa:	4611      	mov	r1, r2
 80008ac:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80008b0:	461a      	mov	r2, r3
 80008b2:	f006 f9ab 	bl	8006c0c <memcpy>
    struct Tone doom[]={{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_FS3,67},{NOTE_D3,67},{NOTE_B2,67},{NOTE_A3,67},{NOTE_FS3,67},{NOTE_B2,67},{NOTE_D3,67},{NOTE_FS3,67},{NOTE_A3,67},{NOTE_FS3,67},{NOTE_D3,67},{NOTE_B2,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B3,67},{NOTE_G3,67},{NOTE_E3,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_B3,67},{NOTE_G4,67},{NOTE_B4,67},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_E3,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,534},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_E3,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_C4,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_CS4,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_B3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_A3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_G3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_GS3,133},{NOTE_A3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_B3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_A3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_G3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_F3,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B3,67},{NOTE_G3,67},{NOTE_E3,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_B3,67},{NOTE_G4,67},{NOTE_B4,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{0,0}};
 80008b6:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80008ba:	f103 0308 	add.w	r3, r3, #8
 80008be:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80008c2:	4a29      	ldr	r2, [pc, #164]	; (8000968 <initTonesDictionary+0x100>)
 80008c4:	4618      	mov	r0, r3
 80008c6:	4611      	mov	r1, r2
 80008c8:	f44f 6351 	mov.w	r3, #3344	; 0xd10
 80008cc:	461a      	mov	r2, r3
 80008ce:	f006 f99d 	bl	8006c0c <memcpy>
    struct Tone fur_elise[] = {{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_B4,16},{NOTE_D5,16},{NOTE_C5,16},{NOTE_A4,-8},{NOTE_C4,16},{NOTE_E4,16},{NOTE_A4,16},{NOTE_B4,-8},{NOTE_E4,16},{NOTE_GS4,16},{NOTE_B4,16},{NOTE_C5,8},{REST,16},{NOTE_E4,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_B4,16},{NOTE_D5,16},{NOTE_C5,16},{NOTE_A4,-8},{NOTE_C4,16},{NOTE_E4,16},{NOTE_A4,16},{NOTE_B4,-8},{NOTE_E4,16},{NOTE_C5,16},{NOTE_B4,16},{NOTE_A4,4},{REST,8},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_B4,16},{NOTE_D5,16},{NOTE_C5,16},{NOTE_A4,-8},{NOTE_C4,16},{NOTE_E4,16},{NOTE_A4,16},{NOTE_B4,-8},{NOTE_E4,16},{NOTE_GS4,16},{NOTE_B4,16},{NOTE_C5,8},{REST,16},{NOTE_E4,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_B4,16},{NOTE_D5,16},{NOTE_C5,16},{NOTE_A4,-8},{NOTE_C4,16},{NOTE_E4,16},{NOTE_A4,16},{NOTE_B4,-8},{NOTE_E4,16},{NOTE_C5,16},{NOTE_B4,16},{NOTE_A4,8},{REST,16},{NOTE_B4,16},{NOTE_C5,16},{NOTE_D5,16},{NOTE_E5,-8},{NOTE_G4,16},{NOTE_F5,16},{NOTE_E5,16},{NOTE_D5,-8},{NOTE_F4,16},{NOTE_E5,16},{NOTE_D5,16},{NOTE_C5,-8},{NOTE_E4,16},{NOTE_D5,16},{NOTE_C5,16},{NOTE_B4,8},{REST,16},{NOTE_E4,16},{NOTE_E5,16},{REST,16},{REST,16},{NOTE_E5,16},{NOTE_E6,16},{REST,16},{REST,16},{NOTE_DS5,16},{NOTE_E5,16},{REST,16},{REST,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_B4,16},{NOTE_D5,16},{NOTE_C5,16},{NOTE_A4,8},{REST,16},{NOTE_C4,16},{NOTE_E4,16},{NOTE_A4,16},{NOTE_B4,8},{REST,16},{NOTE_E4,16},{NOTE_GS4,16},{NOTE_B4,16},{NOTE_C5,8},{REST,16},{NOTE_E4,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_B4,16},{NOTE_D5,16},{NOTE_C5,16},{NOTE_A4,8},{REST,16},{NOTE_C4,16},{NOTE_E4,16},{NOTE_A4,16},{NOTE_B4,8},{REST,16},{NOTE_E4,16},{NOTE_C5,16},{NOTE_B4,16},{NOTE_A4,8},{REST,16},{NOTE_B4,16},{NOTE_C5,16},{NOTE_D5,16},{NOTE_E5,-8},{NOTE_G4,16},{NOTE_F5,16},{NOTE_E5,16},{NOTE_D5,-8},{NOTE_F4,16},{NOTE_E5,16},{NOTE_D5,16},{NOTE_C5,-8},{NOTE_E4,16},{NOTE_D5,16},{NOTE_C5,16},{NOTE_B4,8},{REST,16},{NOTE_E4,16},{NOTE_E5,16},{REST,16},{REST,16},{NOTE_E5,16},{NOTE_E6,16},{REST,16},{REST,16},{NOTE_DS5,16},{NOTE_E5,16},{REST,16},{REST,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_B4,16},{NOTE_D5,16},{NOTE_C5,16},{NOTE_A4,8},{REST,16},{NOTE_C4,16},{NOTE_E4,16},{NOTE_A4,16},{NOTE_B4,8},{REST,16},{NOTE_E4,16},{NOTE_GS4,16},{NOTE_B4,16},{NOTE_C5,8},{REST,16},{NOTE_E4,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_B4,16},{NOTE_D5,16},{NOTE_C5,16},{NOTE_A4,8},{REST,16},{NOTE_C4,16},{NOTE_E4,16},{NOTE_A4,16},{NOTE_B4,8},{REST,16},{NOTE_E4,16},{NOTE_C5,16},{NOTE_B4,16},{NOTE_A4,8},{REST,16},{NOTE_C5,16},{NOTE_C5,16},{NOTE_C5,16},{NOTE_C5,4},{NOTE_F5,-16},{NOTE_E5,32},{NOTE_E5,8},{NOTE_D5,8},{NOTE_AS5,-16},{NOTE_A5,32},{NOTE_A5,16},{NOTE_G5,16},{NOTE_F5,16},{NOTE_E5,16},{NOTE_D5,16},{NOTE_C5,16},{NOTE_AS4,8},{NOTE_A4,8},{NOTE_A4,32},{NOTE_G4,32},{NOTE_A4,32},{NOTE_B4,32},{NOTE_C5,4},{NOTE_D5,16},{NOTE_DS5,16},{NOTE_E5,-8},{NOTE_E5,16},{NOTE_F5,16},{NOTE_A4,16},{NOTE_C5,4},{NOTE_D5,-16},{NOTE_B4,32},{NOTE_C5,32},{NOTE_G5,32},{NOTE_G4,32},{NOTE_G5,32},{NOTE_A4,32},{NOTE_G5,32},{NOTE_B4,32},{NOTE_G5,32},{NOTE_C5,32},{NOTE_G5,32},{NOTE_D5,32},{NOTE_G5,32},{NOTE_E5,32},{NOTE_G5,32},{NOTE_C6,32},{NOTE_B5,32},{NOTE_A5,32},{NOTE_G5,32},{NOTE_F5,32},{NOTE_E5,32},{NOTE_D5,32},{NOTE_G5,32},{NOTE_F5,32},{NOTE_D5,32},{NOTE_C5,32},{NOTE_G5,32},{NOTE_G4,32},{NOTE_G5,32},{NOTE_A4,32},{NOTE_G5,32},{NOTE_B4,32},{NOTE_G5,32},{NOTE_C5,32},{NOTE_G5,32},{NOTE_D5,32},{NOTE_G5,32},{NOTE_E5,32},{NOTE_G5,32},{NOTE_C6,32},{NOTE_B5,32},{NOTE_A5,32},{NOTE_G5,32},{NOTE_F5,32},{NOTE_E5,32},{NOTE_D5,32},{NOTE_G5,32},{NOTE_F5,32},{NOTE_D5,32},{NOTE_E5,32},{NOTE_F5,32},{NOTE_E5,32},{NOTE_DS5,32},{NOTE_E5,32},{NOTE_B4,32},{NOTE_E5,32},{NOTE_DS5,32},{NOTE_E5,32},{NOTE_B4,32},{NOTE_E5,32},{NOTE_DS5,32},{NOTE_E5,-8},{NOTE_B4,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,-8},{NOTE_B4,16},{NOTE_E5,16},{REST,16},{REST,16},{NOTE_DS5,16},{NOTE_E5,16},{REST,16},{REST,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_B4,16},{NOTE_D5,16},{NOTE_C5,16},{NOTE_A4,8},{REST,16},{NOTE_C4,16},{NOTE_E4,16},{NOTE_A4,16},{NOTE_B4,8},{REST,16},{NOTE_E4,16},{NOTE_GS4,16},{NOTE_B4,16},{NOTE_C5,8},{REST,16},{NOTE_E4,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_B4,16},{NOTE_D5,16},{NOTE_C5,16},{NOTE_A4,8},{REST,16},{NOTE_C4,16},{NOTE_E4,16},{NOTE_A4,16},{NOTE_B4,8},{REST,16},{NOTE_E4,16},{NOTE_C5,16},{NOTE_B4,16},{NOTE_A4,8},{REST,16},{NOTE_B4,16},{NOTE_C5,16},{NOTE_D5,16},{NOTE_E5,-8},{NOTE_G4,16},{NOTE_F5,16},{NOTE_E5,16},{NOTE_D5,-8},{NOTE_F4,16},{NOTE_E5,16},{NOTE_D5,16},{NOTE_C5,-8},{NOTE_E4,16},{NOTE_D5,16},{NOTE_C5,16},{NOTE_B4,8},{REST,16},{NOTE_E4,16},{NOTE_E5,16},{REST,16},{REST,16},{NOTE_E5,16},{NOTE_E6,16},{REST,16},{REST,16},{NOTE_DS5,16},{NOTE_E5,16},{REST,16},{REST,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_D5,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_B4,16},{NOTE_D5,16},{NOTE_C5,16},{NOTE_A4,8},{REST,16},{NOTE_C4,16},{NOTE_E4,16},{NOTE_A4,16},{NOTE_B4,8},{REST,16},{NOTE_E4,16},{NOTE_GS4,16},{NOTE_B4,16},{NOTE_C5,8},{REST,16},{NOTE_E4,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_B4,16},{NOTE_D5,16},{NOTE_C5,16},{NOTE_A4,8},{REST,16},{NOTE_C4,16},{NOTE_E4,16},{NOTE_A4,16},{NOTE_B4,8},{REST,16},{NOTE_E4,16},{NOTE_C5,16},{NOTE_B4,16},{NOTE_A4,8},{REST,16},{REST,16},{REST,8},{NOTE_CS5,-4},{NOTE_D5,4},{NOTE_E5,16},{NOTE_F5,16},{NOTE_F5,4},{NOTE_F5,8},{NOTE_E5,-4},{NOTE_D5,4},{NOTE_C5,16},{NOTE_B4,16},{NOTE_A4,4},{NOTE_A4,8},{NOTE_A4,8},{NOTE_C5,8},{NOTE_B4,8},{NOTE_A4,-4},{NOTE_CS5,-4},{NOTE_D5,4},{NOTE_E5,16},{NOTE_F5,16},{NOTE_F5,4},{NOTE_F5,8},{NOTE_F5,-4},{NOTE_DS5,4},{NOTE_D5,16},{NOTE_C5,16},{NOTE_AS4,4},{NOTE_A4,8},{NOTE_GS4,4},{NOTE_G4,8},{NOTE_A4,-4},{NOTE_B4,4},{REST,8},{NOTE_A3,-32},{NOTE_C4,-32},{NOTE_E4,-32},{NOTE_A4,-32},{NOTE_C5,-32},{NOTE_E5,-32},{NOTE_D5,-32},{NOTE_C5,-32},{NOTE_B4,-32},{NOTE_A4,-32},{NOTE_C5,-32},{NOTE_E5,-32},{NOTE_A5,-32},{NOTE_C6,-32},{NOTE_E6,-32},{NOTE_D6,-32},{NOTE_C6,-32},{NOTE_B5,-32},{NOTE_A4,-32},{NOTE_C5,-32},{NOTE_E5,-32},{NOTE_A5,-32},{NOTE_C6,-32},{NOTE_E6,-32},{NOTE_D6,-32},{NOTE_C6,-32},{NOTE_B5,-32},{NOTE_AS5,-32},{NOTE_A5,-32},{NOTE_GS5,-32},{NOTE_G5,-32},{NOTE_FS5,-32},{NOTE_F5,-32},{NOTE_E5,-32},{NOTE_DS5,-32},{NOTE_D5,-32},{NOTE_CS5,-32},{NOTE_C5,-32},{NOTE_B4,-32},{NOTE_AS4,-32},{NOTE_A4,-32},{NOTE_GS4,-32},{NOTE_G4,-32},{NOTE_FS4,-32},{NOTE_F4,-32},{NOTE_E4,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_B4,16},{NOTE_D5,16},{NOTE_C5,16},{NOTE_A4,-8},{NOTE_C4,16},{NOTE_E4,16},{NOTE_A4,16},{NOTE_B4,-8},{NOTE_E4,16},{NOTE_GS4,16},{NOTE_B4,16},{NOTE_C5,8},{REST,16},{NOTE_E4,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_B4,16},{NOTE_D5,16},{NOTE_C5,16},{NOTE_A4,-8},{NOTE_C4,16},{NOTE_E4,16},{NOTE_A4,16},{NOTE_B4,-8},{NOTE_E4,16},{NOTE_C5,16},{NOTE_B4,16},{NOTE_A4,-8},{REST,-8},{REST,-8},{NOTE_G4,16},{NOTE_F5,16},{NOTE_E5,16},{NOTE_D5,4},{REST,8},{REST,-8},{NOTE_E4,16},{NOTE_D5,16},{NOTE_C5,16},{NOTE_B4,-8},{NOTE_E4,16},{NOTE_E5,8},{NOTE_E5,8},{NOTE_E6,-8},{NOTE_DS5,16},{NOTE_E5,16},{REST,16},{REST,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_B4,16},{NOTE_D5,16},{NOTE_C5,16},{NOTE_A4,-8},{NOTE_C4,16},{NOTE_E4,16},{NOTE_A4,16},{NOTE_B4,-8},{NOTE_E4,16},{NOTE_GS4,16},{NOTE_B4,16},{NOTE_C5,8},{REST,16},{NOTE_E4,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_DS5,16},{NOTE_E5,16},{NOTE_B4,16},{NOTE_D5,16},{NOTE_C5,16},{NOTE_A4,-8},{NOTE_C4,16},{NOTE_E4,16},{NOTE_A4,16},{NOTE_B4,-8},{NOTE_E4,16},{NOTE_C5,16},{NOTE_B4,16},{NOTE_A4,-4}};
 80008d2:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80008d6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80008da:	4a24      	ldr	r2, [pc, #144]	; (800096c <initTonesDictionary+0x104>)
 80008dc:	4618      	mov	r0, r3
 80008de:	4611      	mov	r1, r2
 80008e0:	f241 23d8 	movw	r3, #4824	; 0x12d8
 80008e4:	461a      	mov	r2, r3
 80008e6:	f006 f991 	bl	8006c0c <memcpy>
    // Insert tones into dictionary
    insert(playlist, "super_mario_bros", 0, super_mario_bros, sizeof(super_mario_bros) / sizeof(struct Tone));
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <initTonesDictionary+0xf4>)
 80008ec:	6818      	ldr	r0, [r3, #0]
 80008ee:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80008f2:	f103 0320 	add.w	r3, r3, #32
 80008f6:	2241      	movs	r2, #65	; 0x41
 80008f8:	9200      	str	r2, [sp, #0]
 80008fa:	2200      	movs	r2, #0
 80008fc:	491c      	ldr	r1, [pc, #112]	; (8000970 <initTonesDictionary+0x108>)
 80008fe:	f7ff fcd4 	bl	80002aa <insert>
    insert(playlist, "hedwig_theme", 1, hedwig_theme, sizeof(hedwig_theme) / sizeof(struct Tone));
 8000902:	4b16      	ldr	r3, [pc, #88]	; (800095c <initTonesDictionary+0xf4>)
 8000904:	6818      	ldr	r0, [r3, #0]
 8000906:	f507 53ff 	add.w	r3, r7, #8160	; 0x1fe0
 800090a:	f103 0308 	add.w	r3, r3, #8
 800090e:	223f      	movs	r2, #63	; 0x3f
 8000910:	9200      	str	r2, [sp, #0]
 8000912:	2201      	movs	r2, #1
 8000914:	4917      	ldr	r1, [pc, #92]	; (8000974 <initTonesDictionary+0x10c>)
 8000916:	f7ff fcc8 	bl	80002aa <insert>
    insert(playlist, "doom", 2, doom, sizeof(doom) / sizeof(struct Tone));
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <initTonesDictionary+0xf4>)
 800091c:	6818      	ldr	r0, [r3, #0]
 800091e:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8000922:	f103 0308 	add.w	r3, r3, #8
 8000926:	3b10      	subs	r3, #16
 8000928:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 800092c:	9200      	str	r2, [sp, #0]
 800092e:	2202      	movs	r2, #2
 8000930:	4911      	ldr	r1, [pc, #68]	; (8000978 <initTonesDictionary+0x110>)
 8000932:	f7ff fcba 	bl	80002aa <insert>
    insert(playlist, "fur_elise", 3, fur_elise, sizeof(fur_elise) / sizeof(struct Tone));
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <initTonesDictionary+0xf4>)
 8000938:	6818      	ldr	r0, [r3, #0]
 800093a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800093e:	3b28      	subs	r3, #40	; 0x28
 8000940:	f240 225b 	movw	r2, #603	; 0x25b
 8000944:	9200      	str	r2, [sp, #0]
 8000946:	2203      	movs	r2, #3
 8000948:	490c      	ldr	r1, [pc, #48]	; (800097c <initTonesDictionary+0x114>)
 800094a:	f7ff fcae 	bl	80002aa <insert>




}
 800094e:	bf00      	nop
 8000950:	f507 570f 	add.w	r7, r7, #9152	; 0x23c0
 8000954:	3728      	adds	r7, #40	; 0x28
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200005e0 	.word	0x200005e0
 8000960:	08006ee8 	.word	0x08006ee8
 8000964:	080070f0 	.word	0x080070f0
 8000968:	080072e8 	.word	0x080072e8
 800096c:	08007ff8 	.word	0x08007ff8
 8000970:	08006eb0 	.word	0x08006eb0
 8000974:	08006ec4 	.word	0x08006ec4
 8000978:	08006ed4 	.word	0x08006ed4
 800097c:	08006edc 	.word	0x08006edc

08000980 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b096      	sub	sp, #88	; 0x58
 8000984:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	struct digit _digits[10];
	_digits[0].number = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
	_digits[0].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
 800098a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800098e:	817b      	strh	r3, [r7, #10]
			| GPIO_PIN_15;

	_digits[1].number = 1;
 8000990:	2301      	movs	r3, #1
 8000992:	60fb      	str	r3, [r7, #12]
	_digits[1].pattern = GPIO_PIN_12;
 8000994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000998:	823b      	strh	r3, [r7, #16]
	_digits[1].anti_pattern = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800099a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800099e:	827b      	strh	r3, [r7, #18]

	_digits[2].number = 2;
 80009a0:	2302      	movs	r3, #2
 80009a2:	617b      	str	r3, [r7, #20]
	_digits[2].pattern = GPIO_PIN_13;
 80009a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a8:	833b      	strh	r3, [r7, #24]
	_digits[2].anti_pattern = GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15;
 80009aa:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80009ae:	837b      	strh	r3, [r7, #26]

	_digits[3].number = 3;
 80009b0:	2303      	movs	r3, #3
 80009b2:	61fb      	str	r3, [r7, #28]
	_digits[3].pattern = GPIO_PIN_12 | GPIO_PIN_13;
 80009b4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80009b8:	843b      	strh	r3, [r7, #32]
	_digits[3].anti_pattern = GPIO_PIN_14 | GPIO_PIN_15;
 80009ba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80009be:	847b      	strh	r3, [r7, #34]	; 0x22

	_digits[4].number = 4;
 80009c0:	2304      	movs	r3, #4
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
	_digits[4].pattern = GPIO_PIN_14;
 80009c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009c8:	853b      	strh	r3, [r7, #40]	; 0x28
	_digits[4].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15;
 80009ca:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80009ce:	857b      	strh	r3, [r7, #42]	; 0x2a

	_digits[5].number = 5;
 80009d0:	2305      	movs	r3, #5
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	_digits[5].pattern = GPIO_PIN_12 | GPIO_PIN_14;
 80009d4:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80009d8:	863b      	strh	r3, [r7, #48]	; 0x30
	_digits[5].anti_pattern = GPIO_PIN_13 | GPIO_PIN_15;
 80009da:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80009de:	867b      	strh	r3, [r7, #50]	; 0x32

	_digits[6].number = 6;
 80009e0:	2306      	movs	r3, #6
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
	_digits[6].pattern = GPIO_PIN_13 | GPIO_PIN_14;
 80009e4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80009e8:	873b      	strh	r3, [r7, #56]	; 0x38
	_digits[6].anti_pattern = GPIO_PIN_12 | GPIO_PIN_15;
 80009ea:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80009ee:	877b      	strh	r3, [r7, #58]	; 0x3a

	_digits[7].number = 7;
 80009f0:	2307      	movs	r3, #7
 80009f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	_digits[7].pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 80009f4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80009f8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	_digits[7].anti_pattern = GPIO_PIN_15;
 80009fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a00:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	_digits[8].number = 8;
 8000a04:	2308      	movs	r3, #8
 8000a06:	647b      	str	r3, [r7, #68]	; 0x44
	_digits[8].pattern = GPIO_PIN_15;
 8000a08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a0c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	_digits[8].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 8000a10:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000a14:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	_digits[9].number = 9;
 8000a18:	2309      	movs	r3, #9
 8000a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
	_digits[9].pattern = GPIO_PIN_12 | GPIO_PIN_15;
 8000a1c:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000a20:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	_digits[9].anti_pattern = GPIO_PIN_13 | GPIO_PIN_14;
 8000a24:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000a28:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	//initialize Global digits structure
	for (int i = 0; i < 10; i++) {
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	657b      	str	r3, [r7, #84]	; 0x54
 8000a30:	e00f      	b.n	8000a52 <main+0xd2>
		digits[i] = _digits[i];
 8000a32:	492a      	ldr	r1, [pc, #168]	; (8000adc <main+0x15c>)
 8000a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a38:	00d2      	lsls	r2, r2, #3
 8000a3a:	3258      	adds	r2, #88	; 0x58
 8000a3c:	443a      	add	r2, r7
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	440b      	add	r3, r1
 8000a42:	3a54      	subs	r2, #84	; 0x54
 8000a44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a48:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 0; i < 10; i++) {
 8000a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a4e:	3301      	adds	r3, #1
 8000a50:	657b      	str	r3, [r7, #84]	; 0x54
 8000a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a54:	2b09      	cmp	r3, #9
 8000a56:	ddec      	ble.n	8000a32 <main+0xb2>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a58:	f001 f8bc 	bl	8001bd4 <HAL_Init>

	/* USER CODE BEGIN Init */

	//Set 7-segment PINS
	led[0] = GPIO_PIN_1;
 8000a5c:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <main+0x160>)
 8000a5e:	2202      	movs	r2, #2
 8000a60:	801a      	strh	r2, [r3, #0]
	led[1] = GPIO_PIN_2;
 8000a62:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <main+0x160>)
 8000a64:	2204      	movs	r2, #4
 8000a66:	805a      	strh	r2, [r3, #2]
	led[2] = GPIO_PIN_3;
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <main+0x160>)
 8000a6a:	2208      	movs	r2, #8
 8000a6c:	809a      	strh	r2, [r3, #4]
	led[3] = GPIO_PIN_4;
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <main+0x160>)
 8000a70:	2210      	movs	r2, #16
 8000a72:	80da      	strh	r2, [r3, #6]

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a74:	f000 f844 	bl	8000b00 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a78:	f000 fa42 	bl	8000f00 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000a7c:	f000 f8a6 	bl	8000bcc <MX_I2C1_Init>
	MX_SPI1_Init();
 8000a80:	f000 f8e4 	bl	8000c4c <MX_SPI1_Init>
	MX_USB_PCD_Init();
 8000a84:	f000 fa1a 	bl	8000ebc <MX_USB_PCD_Init>
	MX_TIM1_Init();
 8000a88:	f000 f91e 	bl	8000cc8 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 8000a8c:	f000 f9e6 	bl	8000e5c <MX_USART1_UART_Init>
	MX_TIM2_Init();
 8000a90:	f000 f96e 	bl	8000d70 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8000a94:	4813      	ldr	r0, [pc, #76]	; (8000ae4 <main+0x164>)
 8000a96:	f003 fb53 	bl	8004140 <HAL_TIM_Base_Start_IT>
	HAL_UART_Transmit_IT(&huart1,
 8000a9a:	222c      	movs	r2, #44	; 0x2c
 8000a9c:	4912      	ldr	r1, [pc, #72]	; (8000ae8 <main+0x168>)
 8000a9e:	4813      	ldr	r0, [pc, #76]	; (8000aec <main+0x16c>)
 8000aa0:	f004 fd52 	bl	8005548 <HAL_UART_Transmit_IT>
			"=============\nProgram Running\n=============\n", 44);
	HAL_UART_Receive_IT(&huart1, &d, 1);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	4912      	ldr	r1, [pc, #72]	; (8000af0 <main+0x170>)
 8000aa8:	4810      	ldr	r0, [pc, #64]	; (8000aec <main+0x16c>)
 8000aaa:	f004 fdab 	bl	8005604 <HAL_UART_Receive_IT>
	initTonesDictionary();
 8000aae:	f7ff fedb 	bl	8000868 <initTonesDictionary>
	PWM_Start();
 8000ab2:	f000 fe8d 	bl	80017d0 <PWM_Start>
	 int toneCount;
	 melody = lookup(playlist, "fur_elise", 3, &toneCount);;
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <main+0x174>)
 8000ab8:	6818      	ldr	r0, [r3, #0]
 8000aba:	463b      	mov	r3, r7
 8000abc:	2203      	movs	r2, #3
 8000abe:	490e      	ldr	r1, [pc, #56]	; (8000af8 <main+0x178>)
 8000ac0:	f7ff fc42 	bl	8000348 <lookup>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <main+0x17c>)
 8000ac8:	6013      	str	r3, [r2, #0]
	 Change_Melody(melody, toneCount);
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <main+0x17c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	683a      	ldr	r2, [r7, #0]
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 ff40 	bl	8001958 <Change_Melody>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000ad8:	e7fe      	b.n	8000ad8 <main+0x158>
 8000ada:	bf00      	nop
 8000adc:	20000628 	.word	0x20000628
 8000ae0:	200005e8 	.word	0x200005e8
 8000ae4:	200001d4 	.word	0x200001d4
 8000ae8:	080092d0 	.word	0x080092d0
 8000aec:	2000026c 	.word	0x2000026c
 8000af0:	200006dc 	.word	0x200006dc
 8000af4:	200005e0 	.word	0x200005e0
 8000af8:	08006edc 	.word	0x08006edc
 8000afc:	200005e4 	.word	0x200005e4

08000b00 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b09e      	sub	sp, #120	; 0x78
 8000b04:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b06:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b0a:	2228      	movs	r2, #40	; 0x28
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f006 f88a 	bl	8006c28 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000b24:	463b      	mov	r3, r7
 8000b26:	223c      	movs	r2, #60	; 0x3c
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f006 f87c 	bl	8006c28 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000b30:	2303      	movs	r3, #3
 8000b32:	653b      	str	r3, [r7, #80]	; 0x50
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b34:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b38:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b42:	2310      	movs	r3, #16
 8000b44:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b46:	2302      	movs	r3, #2
 8000b48:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b4e:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000b50:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b54:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f001 fdca 	bl	80026f4 <HAL_RCC_OscConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0x6a>
		Error_Handler();
 8000b66:	f000 fc85 	bl	8001474 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b7a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000b80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b84:	2101      	movs	r1, #1
 8000b86:	4618      	mov	r0, r3
 8000b88:	f002 fdf2 	bl	8003770 <HAL_RCC_ClockConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <SystemClock_Config+0x96>
		Error_Handler();
 8000b92:	f000 fc6f 	bl	8001474 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <SystemClock_Config+0xc8>)
 8000b98:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_TIM1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000ba2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ba6:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000bac:	463b      	mov	r3, r7
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f003 f814 	bl	8003bdc <HAL_RCCEx_PeriphCLKConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0xbe>
		Error_Handler();
 8000bba:	f000 fc5b 	bl	8001474 <Error_Handler>
	}
}
 8000bbe:	bf00      	nop
 8000bc0:	3778      	adds	r7, #120	; 0x78
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	00021021 	.word	0x00021021

08000bcc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <MX_I2C1_Init+0x74>)
 8000bd2:	4a1c      	ldr	r2, [pc, #112]	; (8000c44 <MX_I2C1_Init+0x78>)
 8000bd4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <MX_I2C1_Init+0x74>)
 8000bd8:	4a1b      	ldr	r2, [pc, #108]	; (8000c48 <MX_I2C1_Init+0x7c>)
 8000bda:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000bdc:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <MX_I2C1_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000be2:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MX_I2C1_Init+0x74>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000be8:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <MX_I2C1_Init+0x74>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_I2C1_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <MX_I2C1_Init+0x74>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_I2C1_Init+0x74>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_I2C1_Init+0x74>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000c06:	480e      	ldr	r0, [pc, #56]	; (8000c40 <MX_I2C1_Init+0x74>)
 8000c08:	f001 fb7c 	bl	8002304 <HAL_I2C_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000c12:	f000 fc2f 	bl	8001474 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000c16:	2100      	movs	r1, #0
 8000c18:	4809      	ldr	r0, [pc, #36]	; (8000c40 <MX_I2C1_Init+0x74>)
 8000c1a:	f001 fc02 	bl	8002422 <HAL_I2CEx_ConfigAnalogFilter>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000c24:	f000 fc26 	bl	8001474 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_I2C1_Init+0x74>)
 8000c2c:	f001 fc44 	bl	80024b8 <HAL_I2CEx_ConfigDigitalFilter>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000c36:	f000 fc1d 	bl	8001474 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	2000011c 	.word	0x2000011c
 8000c44:	40005400 	.word	0x40005400
 8000c48:	2000090e 	.word	0x2000090e

08000c4c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <MX_SPI1_Init+0x74>)
 8000c52:	4a1c      	ldr	r2, [pc, #112]	; (8000cc4 <MX_SPI1_Init+0x78>)
 8000c54:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c56:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <MX_SPI1_Init+0x74>)
 8000c58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c5c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <MX_SPI1_Init+0x74>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c64:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <MX_SPI1_Init+0x74>)
 8000c66:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c6a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <MX_SPI1_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <MX_SPI1_Init+0x74>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_SPI1_Init+0x74>)
 8000c7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c7e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_SPI1_Init+0x74>)
 8000c82:	2208      	movs	r2, #8
 8000c84:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_SPI1_Init+0x74>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_SPI1_Init+0x74>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_SPI1_Init+0x74>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_SPI1_Init+0x74>)
 8000c9a:	2207      	movs	r2, #7
 8000c9c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_SPI1_Init+0x74>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_SPI1_Init+0x74>)
 8000ca6:	2208      	movs	r2, #8
 8000ca8:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_SPI1_Init+0x74>)
 8000cac:	f003 f946 	bl	8003f3c <HAL_SPI_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_SPI1_Init+0x6e>
		Error_Handler();
 8000cb6:	f000 fbdd 	bl	8001474 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000170 	.word	0x20000170
 8000cc4:	40013000 	.word	0x40013000

08000cc8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000cce:	f107 0310 	add.w	r3, r7, #16
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000ce6:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <MX_TIM1_Init+0xa0>)
 8000ce8:	4a20      	ldr	r2, [pc, #128]	; (8000d6c <MX_TIM1_Init+0xa4>)
 8000cea:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 4800 - 1;
 8000cec:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <MX_TIM1_Init+0xa0>)
 8000cee:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000cf2:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <MX_TIM1_Init+0xa0>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 5 - 1;
 8000cfa:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <MX_TIM1_Init+0xa0>)
 8000cfc:	2204      	movs	r2, #4
 8000cfe:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <MX_TIM1_Init+0xa0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <MX_TIM1_Init+0xa0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <MX_TIM1_Init+0xa0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000d12:	4815      	ldr	r0, [pc, #84]	; (8000d68 <MX_TIM1_Init+0xa0>)
 8000d14:	f003 f9bd 	bl	8004092 <HAL_TIM_Base_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM1_Init+0x5a>
		Error_Handler();
 8000d1e:	f000 fba9 	bl	8001474 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d26:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	480e      	ldr	r0, [pc, #56]	; (8000d68 <MX_TIM1_Init+0xa0>)
 8000d30:	f003 fe06 	bl	8004940 <HAL_TIM_ConfigClockSource>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM1_Init+0x76>
		Error_Handler();
 8000d3a:	f000 fb9b 	bl	8001474 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4806      	ldr	r0, [pc, #24]	; (8000d68 <MX_TIM1_Init+0xa0>)
 8000d50:	f004 fb0e 	bl	8005370 <HAL_TIMEx_MasterConfigSynchronization>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8000d5a:	f000 fb8b 	bl	8001474 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	3720      	adds	r7, #32
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200001d4 	.word	0x200001d4
 8000d6c:	40012c00 	.word	0x40012c00

08000d70 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08e      	sub	sp, #56	; 0x38
 8000d74:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000d76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000d90:	463b      	mov	r3, r7
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]
 8000d9e:	615a      	str	r2, [r3, #20]
 8000da0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000da2:	4b2d      	ldr	r3, [pc, #180]	; (8000e58 <MX_TIM2_Init+0xe8>)
 8000da4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000da8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000daa:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <MX_TIM2_Init+0xe8>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db0:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <MX_TIM2_Init+0xe8>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8000db6:	4b28      	ldr	r3, [pc, #160]	; (8000e58 <MX_TIM2_Init+0xe8>)
 8000db8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dbc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dbe:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <MX_TIM2_Init+0xe8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc4:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <MX_TIM2_Init+0xe8>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000dca:	4823      	ldr	r0, [pc, #140]	; (8000e58 <MX_TIM2_Init+0xe8>)
 8000dcc:	f003 f961 	bl	8004092 <HAL_TIM_Base_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM2_Init+0x6a>
		Error_Handler();
 8000dd6:	f000 fb4d 	bl	8001474 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000de0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de4:	4619      	mov	r1, r3
 8000de6:	481c      	ldr	r0, [pc, #112]	; (8000e58 <MX_TIM2_Init+0xe8>)
 8000de8:	f003 fdaa 	bl	8004940 <HAL_TIM_ConfigClockSource>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM2_Init+0x86>
		Error_Handler();
 8000df2:	f000 fb3f 	bl	8001474 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000df6:	4818      	ldr	r0, [pc, #96]	; (8000e58 <MX_TIM2_Init+0xe8>)
 8000df8:	f003 fa0c 	bl	8004214 <HAL_TIM_PWM_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM2_Init+0x96>
		Error_Handler();
 8000e02:	f000 fb37 	bl	8001474 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	4810      	ldr	r0, [pc, #64]	; (8000e58 <MX_TIM2_Init+0xe8>)
 8000e16:	f004 faab 	bl	8005370 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8000e20:	f000 fb28 	bl	8001474 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e24:	2360      	movs	r3, #96	; 0x60
 8000e26:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000e34:	463b      	mov	r3, r7
 8000e36:	2200      	movs	r2, #0
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4807      	ldr	r0, [pc, #28]	; (8000e58 <MX_TIM2_Init+0xe8>)
 8000e3c:	f003 fc6c 	bl	8004718 <HAL_TIM_PWM_ConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 8000e46:	f000 fb15 	bl	8001474 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000e4a:	4803      	ldr	r0, [pc, #12]	; (8000e58 <MX_TIM2_Init+0xe8>)
 8000e4c:	f000 fbfa 	bl	8001644 <HAL_TIM_MspPostInit>

}
 8000e50:	bf00      	nop
 8000e52:	3738      	adds	r7, #56	; 0x38
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000220 	.word	0x20000220

08000e5c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000e60:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <MX_USART1_UART_Init+0x58>)
 8000e62:	4a15      	ldr	r2, [pc, #84]	; (8000eb8 <MX_USART1_UART_Init+0x5c>)
 8000e64:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <MX_USART1_UART_Init+0x58>)
 8000e68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e6c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <MX_USART1_UART_Init+0x58>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <MX_USART1_UART_Init+0x58>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <MX_USART1_UART_Init+0x58>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <MX_USART1_UART_Init+0x58>)
 8000e82:	220c      	movs	r2, #12
 8000e84:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <MX_USART1_UART_Init+0x58>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <MX_USART1_UART_Init+0x58>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <MX_USART1_UART_Init+0x58>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <MX_USART1_UART_Init+0x58>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <MX_USART1_UART_Init+0x58>)
 8000ea0:	f004 fb04 	bl	80054ac <HAL_UART_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000eaa:	f000 fae3 	bl	8001474 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	2000026c 	.word	0x2000026c
 8000eb8:	40013800 	.word	0x40013800

08000ebc <MX_USB_PCD_Init>:
/**
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <MX_USB_PCD_Init+0x3c>)
 8000ec2:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <MX_USB_PCD_Init+0x40>)
 8000ec4:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <MX_USB_PCD_Init+0x3c>)
 8000ec8:	2208      	movs	r2, #8
 8000eca:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <MX_USB_PCD_Init+0x3c>)
 8000ece:	2202      	movs	r2, #2
 8000ed0:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <MX_USB_PCD_Init+0x3c>)
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000ed8:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <MX_USB_PCD_Init+0x3c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <MX_USB_PCD_Init+0x3c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK) {
 8000ee4:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <MX_USB_PCD_Init+0x3c>)
 8000ee6:	f001 fb33 	bl	8002550 <HAL_PCD_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_USB_PCD_Init+0x38>
		Error_Handler();
 8000ef0:	f000 fac0 	bl	8001474 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200002f4 	.word	0x200002f4
 8000efc:	40005c00 	.word	0x40005c00

08000f00 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08c      	sub	sp, #48	; 0x30
 8000f04:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000f16:	4b5d      	ldr	r3, [pc, #372]	; (800108c <MX_GPIO_Init+0x18c>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	4a5c      	ldr	r2, [pc, #368]	; (800108c <MX_GPIO_Init+0x18c>)
 8000f1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f20:	6153      	str	r3, [r2, #20]
 8000f22:	4b5a      	ldr	r3, [pc, #360]	; (800108c <MX_GPIO_Init+0x18c>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f2a:	61bb      	str	r3, [r7, #24]
 8000f2c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2e:	4b57      	ldr	r3, [pc, #348]	; (800108c <MX_GPIO_Init+0x18c>)
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	4a56      	ldr	r2, [pc, #344]	; (800108c <MX_GPIO_Init+0x18c>)
 8000f34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f38:	6153      	str	r3, [r2, #20]
 8000f3a:	4b54      	ldr	r3, [pc, #336]	; (800108c <MX_GPIO_Init+0x18c>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000f46:	4b51      	ldr	r3, [pc, #324]	; (800108c <MX_GPIO_Init+0x18c>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	4a50      	ldr	r2, [pc, #320]	; (800108c <MX_GPIO_Init+0x18c>)
 8000f4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f50:	6153      	str	r3, [r2, #20]
 8000f52:	4b4e      	ldr	r3, [pc, #312]	; (800108c <MX_GPIO_Init+0x18c>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	4b4b      	ldr	r3, [pc, #300]	; (800108c <MX_GPIO_Init+0x18c>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	4a4a      	ldr	r2, [pc, #296]	; (800108c <MX_GPIO_Init+0x18c>)
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f68:	6153      	str	r3, [r2, #20]
 8000f6a:	4b48      	ldr	r3, [pc, #288]	; (800108c <MX_GPIO_Init+0x18c>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f76:	4b45      	ldr	r3, [pc, #276]	; (800108c <MX_GPIO_Init+0x18c>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	4a44      	ldr	r2, [pc, #272]	; (800108c <MX_GPIO_Init+0x18c>)
 8000f7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f80:	6153      	str	r3, [r2, #20]
 8000f82:	4b42      	ldr	r3, [pc, #264]	; (800108c <MX_GPIO_Init+0x18c>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	4b3f      	ldr	r3, [pc, #252]	; (800108c <MX_GPIO_Init+0x18c>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a3e      	ldr	r2, [pc, #248]	; (800108c <MX_GPIO_Init+0x18c>)
 8000f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f98:	6153      	str	r3, [r2, #20]
 8000f9a:	4b3c      	ldr	r3, [pc, #240]	; (800108c <MX_GPIO_Init+0x18c>)
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2108      	movs	r1, #8
 8000faa:	4839      	ldr	r0, [pc, #228]	; (8001090 <MX_GPIO_Init+0x190>)
 8000fac:	f001 f97a 	bl	80022a4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2,
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2107      	movs	r1, #7
 8000fb4:	4837      	ldr	r0, [pc, #220]	; (8001094 <MX_GPIO_Init+0x194>)
 8000fb6:	f001 f975 	bl	80022a4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f24f 011e 	movw	r1, #61470	; 0xf01e
 8000fc0:	4835      	ldr	r0, [pc, #212]	; (8001098 <MX_GPIO_Init+0x198>)
 8000fc2:	f001 f96f 	bl	80022a4 <HAL_GPIO_WritePin>
			GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_1
					| GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET);


	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000fc6:	2308      	movs	r3, #8
 8000fc8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	4619      	mov	r1, r3
 8000fdc:	482c      	ldr	r0, [pc, #176]	; (8001090 <MX_GPIO_Init+0x190>)
 8000fde:	f000 ffe7 	bl	8001fb0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC0 PC1 PC2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4826      	ldr	r0, [pc, #152]	; (8001094 <MX_GPIO_Init+0x194>)
 8000ffa:	f000 ffd9 	bl	8001fb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ffe:	2301      	movs	r3, #1
 8001000:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001002:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001006:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4619      	mov	r1, r3
 8001012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001016:	f000 ffcb 	bl	8001fb0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_3;
 800101a:	230a      	movs	r3, #10
 800101c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800101e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001022:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001024:	2302      	movs	r3, #2
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	4619      	mov	r1, r3
 800102e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001032:	f000 ffbd 	bl	8001fb0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15
	 PD1 PD2 PD3 PD4 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15
 8001036:	f24f 031e 	movw	r3, #61470	; 0xf01e
 800103a:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4619      	mov	r1, r3
 800104e:	4812      	ldr	r0, [pc, #72]	; (8001098 <MX_GPIO_Init+0x198>)
 8001050:	f000 ffae 	bl	8001fb0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2100      	movs	r1, #0
 8001058:	2006      	movs	r0, #6
 800105a:	f000 fefc 	bl	8001e56 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800105e:	2006      	movs	r0, #6
 8001060:	f000 ff15 	bl	8001e8e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	2100      	movs	r1, #0
 8001068:	2007      	movs	r0, #7
 800106a:	f000 fef4 	bl	8001e56 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800106e:	2007      	movs	r0, #7
 8001070:	f000 ff0d 	bl	8001e8e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	2100      	movs	r1, #0
 8001078:	2009      	movs	r0, #9
 800107a:	f000 feec 	bl	8001e56 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800107e:	2009      	movs	r0, #9
 8001080:	f000 ff05 	bl	8001e8e <HAL_NVIC_EnableIRQ>

}
 8001084:	bf00      	nop
 8001086:	3730      	adds	r7, #48	; 0x30
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40021000 	.word	0x40021000
 8001090:	48001000 	.word	0x48001000
 8001094:	48000800 	.word	0x48000800
 8001098:	48000c00 	.word	0x48000c00

0800109c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 80010a6:	f000 fdef 	bl	8001c88 <HAL_GetTick>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4a91      	ldr	r2, [pc, #580]	; (80012f4 <HAL_GPIO_EXTI_Callback+0x258>)
 80010ae:	6013      	str	r3, [r2, #0]
	if ((GPIO_Pin == GPIO_PIN_1) && LED != 4) {
 80010b0:	88fb      	ldrh	r3, [r7, #6]
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d116      	bne.n	80010e4 <HAL_GPIO_EXTI_Callback+0x48>
 80010b6:	4b90      	ldr	r3, [pc, #576]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x25c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	d012      	beq.n	80010e4 <HAL_GPIO_EXTI_Callback+0x48>

		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 80010be:	4b8d      	ldr	r3, [pc, #564]	; (80012f4 <HAL_GPIO_EXTI_Callback+0x258>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	4b8e      	ldr	r3, [pc, #568]	; (80012fc <HAL_GPIO_EXTI_Callback+0x260>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80010cc:	f240 8150 	bls.w	8001370 <HAL_GPIO_EXTI_Callback+0x2d4>
//			counterInside++;
			increase(LED);
 80010d0:	4b89      	ldr	r3, [pc, #548]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x25c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fb9b 	bl	8000810 <increase>
			previousMillis = currentMillis;
 80010da:	4b86      	ldr	r3, [pc, #536]	; (80012f4 <HAL_GPIO_EXTI_Callback+0x258>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a87      	ldr	r2, [pc, #540]	; (80012fc <HAL_GPIO_EXTI_Callback+0x260>)
 80010e0:	6013      	str	r3, [r2, #0]
		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 80010e2:	e145      	b.n	8001370 <HAL_GPIO_EXTI_Callback+0x2d4>
		}
	} else if ((GPIO_Pin == GPIO_PIN_3)) {
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	2b08      	cmp	r3, #8
 80010e8:	f040 812a 	bne.w	8001340 <HAL_GPIO_EXTI_Callback+0x2a4>

		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 80010ec:	4b81      	ldr	r3, [pc, #516]	; (80012f4 <HAL_GPIO_EXTI_Callback+0x258>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b82      	ldr	r3, [pc, #520]	; (80012fc <HAL_GPIO_EXTI_Callback+0x260>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80010fa:	f240 8139 	bls.w	8001370 <HAL_GPIO_EXTI_Callback+0x2d4>
			if (nextTurn < 6)
 80010fe:	4b80      	ldr	r3, [pc, #512]	; (8001300 <HAL_GPIO_EXTI_Callback+0x264>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b05      	cmp	r3, #5
 8001104:	dc04      	bgt.n	8001110 <HAL_GPIO_EXTI_Callback+0x74>
				nextTurn++;
 8001106:	4b7e      	ldr	r3, [pc, #504]	; (8001300 <HAL_GPIO_EXTI_Callback+0x264>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	3301      	adds	r3, #1
 800110c:	4a7c      	ldr	r2, [pc, #496]	; (8001300 <HAL_GPIO_EXTI_Callback+0x264>)
 800110e:	6013      	str	r3, [r2, #0]
			if ((isCorrect == -1) && nextTurn == 6) {
 8001110:	4b7c      	ldr	r3, [pc, #496]	; (8001304 <HAL_GPIO_EXTI_Callback+0x268>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001118:	d126      	bne.n	8001168 <HAL_GPIO_EXTI_Callback+0xcc>
 800111a:	4b79      	ldr	r3, [pc, #484]	; (8001300 <HAL_GPIO_EXTI_Callback+0x264>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b06      	cmp	r3, #6
 8001120:	d122      	bne.n	8001168 <HAL_GPIO_EXTI_Callback+0xcc>
				for (int i = 0; i < 4; i++) {
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	e007      	b.n	8001138 <HAL_GPIO_EXTI_Callback+0x9c>
					carrier[i] = 0;
 8001128:	4a77      	ldr	r2, [pc, #476]	; (8001308 <HAL_GPIO_EXTI_Callback+0x26c>)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	2100      	movs	r1, #0
 800112e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int i = 0; i < 4; i++) {
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	3301      	adds	r3, #1
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	2b03      	cmp	r3, #3
 800113c:	ddf4      	ble.n	8001128 <HAL_GPIO_EXTI_Callback+0x8c>
				    //password[i] = 0;
				}
				//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2102      	movs	r1, #2
 8001142:	4872      	ldr	r0, [pc, #456]	; (800130c <HAL_GPIO_EXTI_Callback+0x270>)
 8001144:	f001 f8ae 	bl	80022a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8001148:	2200      	movs	r2, #0
 800114a:	2104      	movs	r1, #4
 800114c:	486f      	ldr	r0, [pc, #444]	; (800130c <HAL_GPIO_EXTI_Callback+0x270>)
 800114e:	f001 f8a9 	bl	80022a4 <HAL_GPIO_WritePin>
				LED = -1;
 8001152:	4b69      	ldr	r3, [pc, #420]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001154:	f04f 32ff 	mov.w	r2, #4294967295
 8001158:	601a      	str	r2, [r3, #0]
				nextTurn = 0;
 800115a:	4b69      	ldr	r3, [pc, #420]	; (8001300 <HAL_GPIO_EXTI_Callback+0x264>)
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
				blink = 1;
 8001160:	4b6b      	ldr	r3, [pc, #428]	; (8001310 <HAL_GPIO_EXTI_Callback+0x274>)
 8001162:	2201      	movs	r2, #1
 8001164:	601a      	str	r2, [r3, #0]
				return;
 8001166:	e103      	b.n	8001370 <HAL_GPIO_EXTI_Callback+0x2d4>
			} else if ((isCorrect != 0 && isCorrect != 1)) {
 8001168:	4b66      	ldr	r3, [pc, #408]	; (8001304 <HAL_GPIO_EXTI_Callback+0x268>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	f000 80bb 	beq.w	80012e8 <HAL_GPIO_EXTI_Callback+0x24c>
 8001172:	4b64      	ldr	r3, [pc, #400]	; (8001304 <HAL_GPIO_EXTI_Callback+0x268>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b01      	cmp	r3, #1
 8001178:	f000 80b6 	beq.w	80012e8 <HAL_GPIO_EXTI_Callback+0x24c>

				LED += 1;
 800117c:	4b5e      	ldr	r3, [pc, #376]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x25c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	4a5d      	ldr	r2, [pc, #372]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001184:	6013      	str	r3, [r2, #0]
				if (LED == 4) {
 8001186:	4b5c      	ldr	r3, [pc, #368]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b04      	cmp	r3, #4
 800118c:	f040 80ac 	bne.w	80012e8 <HAL_GPIO_EXTI_Callback+0x24c>
					int bool = 1;
 8001190:	2301      	movs	r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
					for (int i = 0; i < 4; i++) {
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	e061      	b.n	800125e <HAL_GPIO_EXTI_Callback+0x1c2>
						if (password[i] != carrier[i]) {
 800119a:	4a5e      	ldr	r2, [pc, #376]	; (8001314 <HAL_GPIO_EXTI_Callback+0x278>)
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011a2:	4959      	ldr	r1, [pc, #356]	; (8001308 <HAL_GPIO_EXTI_Callback+0x26c>)
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d054      	beq.n	8001258 <HAL_GPIO_EXTI_Callback+0x1bc>
							bool = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
							logFailed[4] = carrier[0] + '0';
 80011b2:	4b55      	ldr	r3, [pc, #340]	; (8001308 <HAL_GPIO_EXTI_Callback+0x26c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	3330      	adds	r3, #48	; 0x30
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	4b56      	ldr	r3, [pc, #344]	; (8001318 <HAL_GPIO_EXTI_Callback+0x27c>)
 80011be:	711a      	strb	r2, [r3, #4]
							logFailed[5] = carrier[1] + '0';
 80011c0:	4b51      	ldr	r3, [pc, #324]	; (8001308 <HAL_GPIO_EXTI_Callback+0x26c>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	3330      	adds	r3, #48	; 0x30
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4b53      	ldr	r3, [pc, #332]	; (8001318 <HAL_GPIO_EXTI_Callback+0x27c>)
 80011cc:	715a      	strb	r2, [r3, #5]
							logFailed[6] = carrier[2] + '0';
 80011ce:	4b4e      	ldr	r3, [pc, #312]	; (8001308 <HAL_GPIO_EXTI_Callback+0x26c>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	3330      	adds	r3, #48	; 0x30
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	4b4f      	ldr	r3, [pc, #316]	; (8001318 <HAL_GPIO_EXTI_Callback+0x27c>)
 80011da:	719a      	strb	r2, [r3, #6]
							logFailed[7] = carrier[3] + '0';
 80011dc:	4b4a      	ldr	r3, [pc, #296]	; (8001308 <HAL_GPIO_EXTI_Callback+0x26c>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	3330      	adds	r3, #48	; 0x30
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4b4c      	ldr	r3, [pc, #304]	; (8001318 <HAL_GPIO_EXTI_Callback+0x27c>)
 80011e8:	71da      	strb	r2, [r3, #7]
							isCorrect = 0;
 80011ea:	4b46      	ldr	r3, [pc, #280]	; (8001304 <HAL_GPIO_EXTI_Callback+0x268>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
							if (logStatus)
 80011f0:	4b4a      	ldr	r3, [pc, #296]	; (800131c <HAL_GPIO_EXTI_Callback+0x280>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d004      	beq.n	8001202 <HAL_GPIO_EXTI_Callback+0x166>
								HAL_UART_Transmit_IT(&huart1, logFailed, 18);
 80011f8:	2212      	movs	r2, #18
 80011fa:	4947      	ldr	r1, [pc, #284]	; (8001318 <HAL_GPIO_EXTI_Callback+0x27c>)
 80011fc:	4848      	ldr	r0, [pc, #288]	; (8001320 <HAL_GPIO_EXTI_Callback+0x284>)
 80011fe:	f004 f9a3 	bl	8005548 <HAL_UART_Transmit_IT>
							prevEnterTime = HAL_GetTick();
 8001202:	f000 fd41 	bl	8001c88 <HAL_GetTick>
 8001206:	4603      	mov	r3, r0
 8001208:	4a46      	ldr	r2, [pc, #280]	; (8001324 <HAL_GPIO_EXTI_Callback+0x288>)
 800120a:	6013      	str	r3, [r2, #0]
							wrongPassCounter++;
 800120c:	4b46      	ldr	r3, [pc, #280]	; (8001328 <HAL_GPIO_EXTI_Callback+0x28c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	3301      	adds	r3, #1
 8001212:	4a45      	ldr	r2, [pc, #276]	; (8001328 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001214:	6013      	str	r3, [r2, #0]
							if (wrongPassCounter % 3 == 0)
 8001216:	4b44      	ldr	r3, [pc, #272]	; (8001328 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001218:	6819      	ldr	r1, [r3, #0]
 800121a:	4b44      	ldr	r3, [pc, #272]	; (800132c <HAL_GPIO_EXTI_Callback+0x290>)
 800121c:	fb83 3201 	smull	r3, r2, r3, r1
 8001220:	17cb      	asrs	r3, r1, #31
 8001222:	1ad2      	subs	r2, r2, r3
 8001224:	4613      	mov	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4413      	add	r3, r2
 800122a:	1aca      	subs	r2, r1, r3
 800122c:	2a00      	cmp	r2, #0
 800122e:	d103      	bne.n	8001238 <HAL_GPIO_EXTI_Callback+0x19c>
								buzzer_flag = SuperWrongPass;
 8001230:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <HAL_GPIO_EXTI_Callback+0x294>)
 8001232:	2204      	movs	r2, #4
 8001234:	701a      	strb	r2, [r3, #0]
 8001236:	e002      	b.n	800123e <HAL_GPIO_EXTI_Callback+0x1a2>
							else
								buzzer_flag = WrongPass;
 8001238:	4b3d      	ldr	r3, [pc, #244]	; (8001330 <HAL_GPIO_EXTI_Callback+0x294>)
 800123a:	2203      	movs	r2, #3
 800123c:	701a      	strb	r2, [r3, #0]
							buzzerEnterTime = HAL_GetTick();
 800123e:	f000 fd23 	bl	8001c88 <HAL_GetTick>
 8001242:	4603      	mov	r3, r0
 8001244:	4a3b      	ldr	r2, [pc, #236]	; (8001334 <HAL_GPIO_EXTI_Callback+0x298>)
 8001246:	6013      	str	r3, [r2, #0]
							if (alertStatus)
 8001248:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <HAL_GPIO_EXTI_Callback+0x29c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 808e 	beq.w	800136e <HAL_GPIO_EXTI_Callback+0x2d2>
								PWM_Start();
 8001252:	f000 fabd 	bl	80017d0 <PWM_Start>
							return;
 8001256:	e08a      	b.n	800136e <HAL_GPIO_EXTI_Callback+0x2d2>
					for (int i = 0; i < 4; i++) {
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	3301      	adds	r3, #1
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	2b03      	cmp	r3, #3
 8001262:	dd9a      	ble.n	800119a <HAL_GPIO_EXTI_Callback+0xfe>
						}
					}
					if (bool) {
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d03e      	beq.n	80012e8 <HAL_GPIO_EXTI_Callback+0x24c>
						logCorrect[4] = carrier[0] + '0';
 800126a:	4b27      	ldr	r3, [pc, #156]	; (8001308 <HAL_GPIO_EXTI_Callback+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	3330      	adds	r3, #48	; 0x30
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b31      	ldr	r3, [pc, #196]	; (800133c <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001276:	711a      	strb	r2, [r3, #4]
						logCorrect[5] = carrier[1] + '0';
 8001278:	4b23      	ldr	r3, [pc, #140]	; (8001308 <HAL_GPIO_EXTI_Callback+0x26c>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	3330      	adds	r3, #48	; 0x30
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4b2e      	ldr	r3, [pc, #184]	; (800133c <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001284:	715a      	strb	r2, [r3, #5]
						logCorrect[6] = carrier[2] + '0';
 8001286:	4b20      	ldr	r3, [pc, #128]	; (8001308 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	b2db      	uxtb	r3, r3
 800128c:	3330      	adds	r3, #48	; 0x30
 800128e:	b2da      	uxtb	r2, r3
 8001290:	4b2a      	ldr	r3, [pc, #168]	; (800133c <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001292:	719a      	strb	r2, [r3, #6]
						logCorrect[7] = carrier[3] + '0';
 8001294:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	3330      	adds	r3, #48	; 0x30
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4b27      	ldr	r3, [pc, #156]	; (800133c <HAL_GPIO_EXTI_Callback+0x2a0>)
 80012a0:	71da      	strb	r2, [r3, #7]
						isCorrect = 1;
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <HAL_GPIO_EXTI_Callback+0x268>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	601a      	str	r2, [r3, #0]
						if (logStatus)
 80012a8:	4b1c      	ldr	r3, [pc, #112]	; (800131c <HAL_GPIO_EXTI_Callback+0x280>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d004      	beq.n	80012ba <HAL_GPIO_EXTI_Callback+0x21e>
							HAL_UART_Transmit_IT(&huart1, logCorrect, 19);
 80012b0:	2213      	movs	r2, #19
 80012b2:	4922      	ldr	r1, [pc, #136]	; (800133c <HAL_GPIO_EXTI_Callback+0x2a0>)
 80012b4:	481a      	ldr	r0, [pc, #104]	; (8001320 <HAL_GPIO_EXTI_Callback+0x284>)
 80012b6:	f004 f947 	bl	8005548 <HAL_UART_Transmit_IT>
						prevEnterTime = HAL_GetTick();
 80012ba:	f000 fce5 	bl	8001c88 <HAL_GetTick>
 80012be:	4603      	mov	r3, r0
 80012c0:	4a18      	ldr	r2, [pc, #96]	; (8001324 <HAL_GPIO_EXTI_Callback+0x288>)
 80012c2:	6013      	str	r3, [r2, #0]
						buzzer_flag = CorrectPass;
 80012c4:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <HAL_GPIO_EXTI_Callback+0x294>)
 80012c6:	2202      	movs	r2, #2
 80012c8:	701a      	strb	r2, [r3, #0]
						buzzerEnterTime = HAL_GetTick();
 80012ca:	f000 fcdd 	bl	8001c88 <HAL_GetTick>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4a18      	ldr	r2, [pc, #96]	; (8001334 <HAL_GPIO_EXTI_Callback+0x298>)
 80012d2:	6013      	str	r3, [r2, #0]
						if (alertStatus)
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <HAL_GPIO_EXTI_Callback+0x29c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <HAL_GPIO_EXTI_Callback+0x244>
							PWM_Start();
 80012dc:	f000 fa78 	bl	80017d0 <PWM_Start>
						wrongPassCounter = 0;
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <HAL_GPIO_EXTI_Callback+0x28c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
						return;
 80012e6:	e043      	b.n	8001370 <HAL_GPIO_EXTI_Callback+0x2d4>
					}
				}
			}
			previousMillis = currentMillis;
 80012e8:	4b02      	ldr	r3, [pc, #8]	; (80012f4 <HAL_GPIO_EXTI_Callback+0x258>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a03      	ldr	r2, [pc, #12]	; (80012fc <HAL_GPIO_EXTI_Callback+0x260>)
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	e03e      	b.n	8001370 <HAL_GPIO_EXTI_Callback+0x2d4>
 80012f2:	bf00      	nop
 80012f4:	20000608 	.word	0x20000608
 80012f8:	20000624 	.word	0x20000624
 80012fc:	20000604 	.word	0x20000604
 8001300:	20000614 	.word	0x20000614
 8001304:	20000040 	.word	0x20000040
 8001308:	200005f0 	.word	0x200005f0
 800130c:	48000800 	.word	0x48000800
 8001310:	20000044 	.word	0x20000044
 8001314:	20000000 	.word	0x20000000
 8001318:	20000024 	.word	0x20000024
 800131c:	20000038 	.word	0x20000038
 8001320:	2000026c 	.word	0x2000026c
 8001324:	2000061c 	.word	0x2000061c
 8001328:	20000600 	.word	0x20000600
 800132c:	55555556 	.word	0x55555556
 8001330:	20000048 	.word	0x20000048
 8001334:	20000620 	.word	0x20000620
 8001338:	2000003c 	.word	0x2000003c
 800133c:	20000010 	.word	0x20000010
		}

	} else if (GPIO_Pin == GPIO_PIN_0 && isCorrect == 0) {
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d114      	bne.n	8001370 <HAL_GPIO_EXTI_Callback+0x2d4>
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d110      	bne.n	8001370 <HAL_GPIO_EXTI_Callback+0x2d4>
		blink = 0;
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
		isCorrect = -1;
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001356:	f04f 32ff 	mov.w	r2, #4294967295
 800135a:	601a      	str	r2, [r3, #0]
		prevEnterTime = HAL_GetTick();
 800135c:	f000 fc94 	bl	8001c88 <HAL_GetTick>
 8001360:	4603      	mov	r3, r0
 8001362:	4a07      	ldr	r2, [pc, #28]	; (8001380 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001364:	6013      	str	r3, [r2, #0]
//		PWM_Stop();
		buzzer_flag = NONE;
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001368:	2205      	movs	r2, #5
 800136a:	701a      	strb	r2, [r3, #0]
 800136c:	e000      	b.n	8001370 <HAL_GPIO_EXTI_Callback+0x2d4>
							return;
 800136e:	bf00      	nop
	}
}
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000040 	.word	0x20000040
 800137c:	20000044 	.word	0x20000044
 8001380:	2000061c 	.word	0x2000061c
 8001384:	20000048 	.word	0x20000048

08001388 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a31      	ldr	r2, [pc, #196]	; (800145c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d15c      	bne.n	8001454 <HAL_TIM_PeriodElapsedCallback+0xcc>
		if (index == LED && HAL_GetTick() - prevTime < 400) {
 800139a:	4b31      	ldr	r3, [pc, #196]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	4b31      	ldr	r3, [pc, #196]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d119      	bne.n	80013da <HAL_TIM_PeriodElapsedCallback+0x52>
 80013a6:	f000 fc6f 	bl	8001c88 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	4b2e      	ldr	r3, [pc, #184]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80013b6:	d210      	bcs.n	80013da <HAL_TIM_PeriodElapsedCallback+0x52>
			display_number(index, carrier[index]);
 80013b8:	4b29      	ldr	r3, [pc, #164]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b28      	ldr	r3, [pc, #160]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	492a      	ldr	r1, [pc, #168]	; (800146c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80013c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013c6:	4619      	mov	r1, r3
 80013c8:	4610      	mov	r0, r2
 80013ca:	f7ff f9ed 	bl	80007a8 <display_number>
			coolDownTimer = HAL_GetTick();
 80013ce:	f000 fc5b 	bl	8001c88 <HAL_GetTick>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4a26      	ldr	r2, [pc, #152]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	e02d      	b.n	8001436 <HAL_TIM_PeriodElapsedCallback+0xae>
		} else if (index == LED && HAL_GetTick() - prevTime > 900) {
 80013da:	4b21      	ldr	r3, [pc, #132]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4b21      	ldr	r3, [pc, #132]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d116      	bne.n	8001414 <HAL_TIM_PeriodElapsedCallback+0x8c>
 80013e6:	f000 fc4f 	bl	8001c88 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80013f6:	d90d      	bls.n	8001414 <HAL_TIM_PeriodElapsedCallback+0x8c>
			//coolDown
			if (HAL_GetTick() - coolDownTimer > 100) {
 80013f8:	f000 fc46 	bl	8001c88 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b64      	cmp	r3, #100	; 0x64
 8001406:	d916      	bls.n	8001436 <HAL_TIM_PeriodElapsedCallback+0xae>
				prevTime = HAL_GetTick();
 8001408:	f000 fc3e 	bl	8001c88 <HAL_GetTick>
 800140c:	4603      	mov	r3, r0
 800140e:	4a16      	ldr	r2, [pc, #88]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001410:	6013      	str	r3, [r2, #0]
			if (HAL_GetTick() - coolDownTimer > 100) {
 8001412:	e010      	b.n	8001436 <HAL_TIM_PeriodElapsedCallback+0xae>
			}
		} else if (index != LED) {
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	429a      	cmp	r2, r3
 800141e:	d00a      	beq.n	8001436 <HAL_TIM_PeriodElapsedCallback+0xae>
			display_number(index, carrier[index]);
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4910      	ldr	r1, [pc, #64]	; (800146c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800142a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800142e:	4619      	mov	r1, r3
 8001430:	4610      	mov	r0, r2
 8001432:	f7ff f9b9 	bl	80007a8 <display_number>
		}
		if (index == 4) {
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b04      	cmp	r3, #4
 800143c:	d105      	bne.n	800144a <HAL_TIM_PeriodElapsedCallback+0xc2>
			index = 0;
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
			init_display();
 8001444:	f7ff fa04 	bl	8000850 <init_display>
//		case SuperWrongPass:
//			PWM_Change_Tone(1000, _volume);
//			break;
//		}
	}
}
 8001448:	e004      	b.n	8001454 <HAL_TIM_PeriodElapsedCallback+0xcc>
			++index;
 800144a:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	3301      	adds	r3, #1
 8001450:	4a03      	ldr	r2, [pc, #12]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40012c00 	.word	0x40012c00
 8001460:	20000618 	.word	0x20000618
 8001464:	20000624 	.word	0x20000624
 8001468:	2000060c 	.word	0x2000060c
 800146c:	200005f0 	.word	0x200005f0
 8001470:	20000610 	.word	0x20000610

08001474 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001478:	b672      	cpsid	i
}
 800147a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800147c:	e7fe      	b.n	800147c <Error_Handler+0x8>
	...

08001480 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <HAL_MspInit+0x44>)
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <HAL_MspInit+0x44>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6193      	str	r3, [r2, #24]
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <HAL_MspInit+0x44>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <HAL_MspInit+0x44>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <HAL_MspInit+0x44>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	61d3      	str	r3, [r2, #28]
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_MspInit+0x44>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014b6:	2007      	movs	r0, #7
 80014b8:	f000 fcc2 	bl	8001e40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40021000 	.word	0x40021000

080014c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a17      	ldr	r2, [pc, #92]	; (8001544 <HAL_I2C_MspInit+0x7c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d127      	bne.n	800153a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_I2C_MspInit+0x80>)
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	4a16      	ldr	r2, [pc, #88]	; (8001548 <HAL_I2C_MspInit+0x80>)
 80014f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f4:	6153      	str	r3, [r2, #20]
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <HAL_I2C_MspInit+0x80>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001502:	23c0      	movs	r3, #192	; 0xc0
 8001504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001506:	2312      	movs	r3, #18
 8001508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800150a:	2301      	movs	r3, #1
 800150c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001512:	2304      	movs	r3, #4
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	480b      	ldr	r0, [pc, #44]	; (800154c <HAL_I2C_MspInit+0x84>)
 800151e:	f000 fd47 	bl	8001fb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_I2C_MspInit+0x80>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	4a08      	ldr	r2, [pc, #32]	; (8001548 <HAL_I2C_MspInit+0x80>)
 8001528:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800152c:	61d3      	str	r3, [r2, #28]
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_I2C_MspInit+0x80>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800153a:	bf00      	nop
 800153c:	3728      	adds	r7, #40	; 0x28
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40005400 	.word	0x40005400
 8001548:	40021000 	.word	0x40021000
 800154c:	48000400 	.word	0x48000400

08001550 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a17      	ldr	r2, [pc, #92]	; (80015cc <HAL_SPI_MspInit+0x7c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d128      	bne.n	80015c4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001572:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <HAL_SPI_MspInit+0x80>)
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	4a16      	ldr	r2, [pc, #88]	; (80015d0 <HAL_SPI_MspInit+0x80>)
 8001578:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800157c:	6193      	str	r3, [r2, #24]
 800157e:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <HAL_SPI_MspInit+0x80>)
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <HAL_SPI_MspInit+0x80>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <HAL_SPI_MspInit+0x80>)
 8001590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001594:	6153      	str	r3, [r2, #20]
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <HAL_SPI_MspInit+0x80>)
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80015a2:	23e0      	movs	r3, #224	; 0xe0
 80015a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ae:	2303      	movs	r3, #3
 80015b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015b2:	2305      	movs	r3, #5
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4619      	mov	r1, r3
 80015bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c0:	f000 fcf6 	bl	8001fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015c4:	bf00      	nop
 80015c6:	3728      	adds	r7, #40	; 0x28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40013000 	.word	0x40013000
 80015d0:	40021000 	.word	0x40021000

080015d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a16      	ldr	r2, [pc, #88]	; (800163c <HAL_TIM_Base_MspInit+0x68>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d114      	bne.n	8001610 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <HAL_TIM_Base_MspInit+0x6c>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	4a15      	ldr	r2, [pc, #84]	; (8001640 <HAL_TIM_Base_MspInit+0x6c>)
 80015ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015f0:	6193      	str	r3, [r2, #24]
 80015f2:	4b13      	ldr	r3, [pc, #76]	; (8001640 <HAL_TIM_Base_MspInit+0x6c>)
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2100      	movs	r1, #0
 8001602:	2019      	movs	r0, #25
 8001604:	f000 fc27 	bl	8001e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001608:	2019      	movs	r0, #25
 800160a:	f000 fc40 	bl	8001e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800160e:	e010      	b.n	8001632 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001618:	d10b      	bne.n	8001632 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_TIM_Base_MspInit+0x6c>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	4a08      	ldr	r2, [pc, #32]	; (8001640 <HAL_TIM_Base_MspInit+0x6c>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	61d3      	str	r3, [r2, #28]
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_TIM_Base_MspInit+0x6c>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
}
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40012c00 	.word	0x40012c00
 8001640:	40021000 	.word	0x40021000

08001644 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001664:	d11d      	bne.n	80016a2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_TIM_MspPostInit+0x68>)
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	4a10      	ldr	r2, [pc, #64]	; (80016ac <HAL_TIM_MspPostInit+0x68>)
 800166c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001670:	6153      	str	r3, [r2, #20]
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <HAL_TIM_MspPostInit+0x68>)
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800167e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001682:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001690:	2301      	movs	r3, #1
 8001692:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	4619      	mov	r1, r3
 800169a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169e:	f000 fc87 	bl	8001fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80016a2:	bf00      	nop
 80016a4:	3720      	adds	r7, #32
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000

080016b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a1b      	ldr	r2, [pc, #108]	; (800173c <HAL_UART_MspInit+0x8c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d12f      	bne.n	8001732 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016d2:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_UART_MspInit+0x90>)
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	4a1a      	ldr	r2, [pc, #104]	; (8001740 <HAL_UART_MspInit+0x90>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016dc:	6193      	str	r3, [r2, #24]
 80016de:	4b18      	ldr	r3, [pc, #96]	; (8001740 <HAL_UART_MspInit+0x90>)
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <HAL_UART_MspInit+0x90>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	4a14      	ldr	r2, [pc, #80]	; (8001740 <HAL_UART_MspInit+0x90>)
 80016f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016f4:	6153      	str	r3, [r2, #20]
 80016f6:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_UART_MspInit+0x90>)
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001702:	2330      	movs	r3, #48	; 0x30
 8001704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001712:	2307      	movs	r3, #7
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	4809      	ldr	r0, [pc, #36]	; (8001744 <HAL_UART_MspInit+0x94>)
 800171e:	f000 fc47 	bl	8001fb0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	2100      	movs	r1, #0
 8001726:	2025      	movs	r0, #37	; 0x25
 8001728:	f000 fb95 	bl	8001e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800172c:	2025      	movs	r0, #37	; 0x25
 800172e:	f000 fbae 	bl	8001e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001732:	bf00      	nop
 8001734:	3728      	adds	r7, #40	; 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40013800 	.word	0x40013800
 8001740:	40021000 	.word	0x40021000
 8001744:	48000800 	.word	0x48000800

08001748 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a18      	ldr	r2, [pc, #96]	; (80017c8 <HAL_PCD_MspInit+0x80>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d129      	bne.n	80017be <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <HAL_PCD_MspInit+0x84>)
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	4a17      	ldr	r2, [pc, #92]	; (80017cc <HAL_PCD_MspInit+0x84>)
 8001770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001774:	6153      	str	r3, [r2, #20]
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_PCD_MspInit+0x84>)
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001782:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001790:	2303      	movs	r3, #3
 8001792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001794:	230e      	movs	r3, #14
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a2:	f000 fc05 	bl	8001fb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_PCD_MspInit+0x84>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	4a08      	ldr	r2, [pc, #32]	; (80017cc <HAL_PCD_MspInit+0x84>)
 80017ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017b0:	61d3      	str	r3, [r2, #28]
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_PCD_MspInit+0x84>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80017be:	bf00      	nop
 80017c0:	3728      	adds	r7, #40	; 0x28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40005c00 	.word	0x40005c00
 80017cc:	40021000 	.word	0x40021000

080017d0 <PWM_Start>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PWM_Start()
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <PWM_Start+0x18>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <PWM_Start+0x1c>)
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	4611      	mov	r1, r2
 80017de:	4618      	mov	r0, r3
 80017e0:	f002 fd7a 	bl	80042d8 <HAL_TIM_PWM_Start>
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000088 	.word	0x20000088
 80017ec:	200006e0 	.word	0x200006e0

080017f0 <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	460a      	mov	r2, r1
 80017fa:	80fb      	strh	r3, [r7, #6]
 80017fc:	4613      	mov	r3, r2
 80017fe:	80bb      	strh	r3, [r7, #4]
    if (pwm_freq == 0 || pwm_freq > 20000)
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d004      	beq.n	8001810 <PWM_Change_Tone+0x20>
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	f644 6220 	movw	r2, #20000	; 0x4e20
 800180c:	4293      	cmp	r3, r2
 800180e:	d937      	bls.n	8001880 <PWM_Change_Tone+0x90>
    {
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 8001810:	4b4e      	ldr	r3, [pc, #312]	; (800194c <PWM_Change_Tone+0x15c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d105      	bne.n	8001824 <PWM_Change_Tone+0x34>
 8001818:	4b4d      	ldr	r3, [pc, #308]	; (8001950 <PWM_Change_Tone+0x160>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2200      	movs	r2, #0
 8001820:	635a      	str	r2, [r3, #52]	; 0x34
 8001822:	e08e      	b.n	8001942 <PWM_Change_Tone+0x152>
 8001824:	4b49      	ldr	r3, [pc, #292]	; (800194c <PWM_Change_Tone+0x15c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b04      	cmp	r3, #4
 800182a:	d105      	bne.n	8001838 <PWM_Change_Tone+0x48>
 800182c:	4b48      	ldr	r3, [pc, #288]	; (8001950 <PWM_Change_Tone+0x160>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	2300      	movs	r3, #0
 8001834:	6393      	str	r3, [r2, #56]	; 0x38
 8001836:	e084      	b.n	8001942 <PWM_Change_Tone+0x152>
 8001838:	4b44      	ldr	r3, [pc, #272]	; (800194c <PWM_Change_Tone+0x15c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b08      	cmp	r3, #8
 800183e:	d105      	bne.n	800184c <PWM_Change_Tone+0x5c>
 8001840:	4b43      	ldr	r3, [pc, #268]	; (8001950 <PWM_Change_Tone+0x160>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	2300      	movs	r3, #0
 8001848:	63d3      	str	r3, [r2, #60]	; 0x3c
 800184a:	e07a      	b.n	8001942 <PWM_Change_Tone+0x152>
 800184c:	4b3f      	ldr	r3, [pc, #252]	; (800194c <PWM_Change_Tone+0x15c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b0c      	cmp	r3, #12
 8001852:	d105      	bne.n	8001860 <PWM_Change_Tone+0x70>
 8001854:	4b3e      	ldr	r3, [pc, #248]	; (8001950 <PWM_Change_Tone+0x160>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	2300      	movs	r3, #0
 800185c:	6413      	str	r3, [r2, #64]	; 0x40
 800185e:	e070      	b.n	8001942 <PWM_Change_Tone+0x152>
 8001860:	4b3a      	ldr	r3, [pc, #232]	; (800194c <PWM_Change_Tone+0x15c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b10      	cmp	r3, #16
 8001866:	d105      	bne.n	8001874 <PWM_Change_Tone+0x84>
 8001868:	4b39      	ldr	r3, [pc, #228]	; (8001950 <PWM_Change_Tone+0x160>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	2300      	movs	r3, #0
 8001870:	6593      	str	r3, [r2, #88]	; 0x58
 8001872:	e066      	b.n	8001942 <PWM_Change_Tone+0x152>
 8001874:	4b36      	ldr	r3, [pc, #216]	; (8001950 <PWM_Change_Tone+0x160>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	2300      	movs	r3, #0
 800187c:	65d3      	str	r3, [r2, #92]	; 0x5c
 800187e:	e060      	b.n	8001942 <PWM_Change_Tone+0x152>
    }
    else
    {
        const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 8001880:	f002 f8f2 	bl	8003a68 <HAL_RCC_GetSysClockFreq>
 8001884:	61f8      	str	r0, [r7, #28]
        const uint16_t prescaler = 1;
 8001886:	2301      	movs	r3, #1
 8001888:	837b      	strh	r3, [r7, #26]
        const uint32_t timer_clock = internal_clock_freq / prescaler;
 800188a:	8b7b      	ldrh	r3, [r7, #26]
 800188c:	69fa      	ldr	r2, [r7, #28]
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	617b      	str	r3, [r7, #20]
        const uint32_t period_cycles = timer_clock / pwm_freq;
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	fbb2 f3f3 	udiv	r3, r2, r3
 800189c:	613b      	str	r3, [r7, #16]
        const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 800189e:	88bb      	ldrh	r3, [r7, #4]
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	fb02 f303 	mul.w	r3, r2, r3
 80018a6:	4a2b      	ldr	r2, [pc, #172]	; (8001954 <PWM_Change_Tone+0x164>)
 80018a8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ac:	09db      	lsrs	r3, r3, #7
 80018ae:	60fb      	str	r3, [r7, #12]

        pwm_timer->Instance->PSC = prescaler - 1;
 80018b0:	8b7b      	ldrh	r3, [r7, #26]
 80018b2:	1e5a      	subs	r2, r3, #1
 80018b4:	4b26      	ldr	r3, [pc, #152]	; (8001950 <PWM_Change_Tone+0x160>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	629a      	str	r2, [r3, #40]	; 0x28
        pwm_timer->Instance->ARR = period_cycles - 1;
 80018bc:	4b24      	ldr	r3, [pc, #144]	; (8001950 <PWM_Change_Tone+0x160>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	3a01      	subs	r2, #1
 80018c6:	62da      	str	r2, [r3, #44]	; 0x2c
        pwm_timer->Instance->EGR = TIM_EGR_UG;
 80018c8:	4b21      	ldr	r3, [pc, #132]	; (8001950 <PWM_Change_Tone+0x160>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2201      	movs	r2, #1
 80018d0:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80018d2:	4b1e      	ldr	r3, [pc, #120]	; (800194c <PWM_Change_Tone+0x15c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d105      	bne.n	80018e6 <PWM_Change_Tone+0xf6>
 80018da:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <PWM_Change_Tone+0x160>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
 80018e4:	e02d      	b.n	8001942 <PWM_Change_Tone+0x152>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80018e6:	4b19      	ldr	r3, [pc, #100]	; (800194c <PWM_Change_Tone+0x15c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d105      	bne.n	80018fa <PWM_Change_Tone+0x10a>
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <PWM_Change_Tone+0x160>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80018f8:	e023      	b.n	8001942 <PWM_Change_Tone+0x152>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80018fa:	4b14      	ldr	r3, [pc, #80]	; (800194c <PWM_Change_Tone+0x15c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d105      	bne.n	800190e <PWM_Change_Tone+0x11e>
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <PWM_Change_Tone+0x160>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800190c:	e019      	b.n	8001942 <PWM_Change_Tone+0x152>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <PWM_Change_Tone+0x15c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b0c      	cmp	r3, #12
 8001914:	d105      	bne.n	8001922 <PWM_Change_Tone+0x132>
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <PWM_Change_Tone+0x160>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001920:	e00f      	b.n	8001942 <PWM_Change_Tone+0x152>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <PWM_Change_Tone+0x15c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b10      	cmp	r3, #16
 8001928:	d105      	bne.n	8001936 <PWM_Change_Tone+0x146>
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <PWM_Change_Tone+0x160>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001934:	e005      	b.n	8001942 <PWM_Change_Tone+0x152>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <PWM_Change_Tone+0x160>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001940:	e7ff      	b.n	8001942 <PWM_Change_Tone+0x152>
 8001942:	bf00      	nop
 8001944:	3720      	adds	r7, #32
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200006e0 	.word	0x200006e0
 8001950:	20000088 	.word	0x20000088
 8001954:	10624dd3 	.word	0x10624dd3

08001958 <Change_Melody>:

void Change_Melody(const struct Tone *melody, uint16_t tone_count)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	807b      	strh	r3, [r7, #2]
    melody_ptr = melody;
 8001964:	4a07      	ldr	r2, [pc, #28]	; (8001984 <Change_Melody+0x2c>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6013      	str	r3, [r2, #0]
    melody_tone_count = tone_count;
 800196a:	4a07      	ldr	r2, [pc, #28]	; (8001988 <Change_Melody+0x30>)
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	8013      	strh	r3, [r2, #0]
    current_tone_number = 0;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <Change_Melody+0x34>)
 8001972:	2200      	movs	r2, #0
 8001974:	801a      	strh	r2, [r3, #0]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	200006e4 	.word	0x200006e4
 8001988:	200006e8 	.word	0x200006e8
 800198c:	200006ea 	.word	0x200006ea

08001990 <Update_Melody>:

void Update_Melody()
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
    if ((HAL_GetTick() > current_tone_end) && (current_tone_number < melody_tone_count))
 8001996:	f000 f977 	bl	8001c88 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <Update_Melody+0x74>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d92a      	bls.n	80019fa <Update_Melody+0x6a>
 80019a4:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <Update_Melody+0x78>)
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <Update_Melody+0x7c>)
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d222      	bcs.n	80019fa <Update_Melody+0x6a>
    {
        const struct Tone active_tone = *(melody_ptr + current_tone_number);
 80019b4:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <Update_Melody+0x80>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <Update_Melody+0x78>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	441a      	add	r2, r3
 80019c2:	463b      	mov	r3, r7
 80019c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019c8:	e883 0003 	stmia.w	r3, {r0, r1}
        PWM_Change_Tone(active_tone.frequency, volume);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	4a10      	ldr	r2, [pc, #64]	; (8001a14 <Update_Melody+0x84>)
 80019d2:	8812      	ldrh	r2, [r2, #0]
 80019d4:	b292      	uxth	r2, r2
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff09 	bl	80017f0 <PWM_Change_Tone>
        current_tone_end = HAL_GetTick() + active_tone.duration;
 80019de:	f000 f953 	bl	8001c88 <HAL_GetTick>
 80019e2:	4603      	mov	r3, r0
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	4413      	add	r3, r2
 80019e8:	4a06      	ldr	r2, [pc, #24]	; (8001a04 <Update_Melody+0x74>)
 80019ea:	6013      	str	r3, [r2, #0]
        current_tone_number++;
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <Update_Melody+0x78>)
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	3301      	adds	r3, #1
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <Update_Melody+0x78>)
 80019f8:	801a      	strh	r2, [r3, #0]
    }
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200006ec 	.word	0x200006ec
 8001a08:	200006ea 	.word	0x200006ea
 8001a0c:	200006e8 	.word	0x200006e8
 8001a10:	200006e4 	.word	0x200006e4
 8001a14:	2000008c 	.word	0x2000008c

08001a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <NMI_Handler+0x4>

08001a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <HardFault_Handler+0x4>

08001a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <MemManage_Handler+0x4>

08001a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a2e:	e7fe      	b.n	8001a2e <BusFault_Handler+0x4>

08001a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <UsageFault_Handler+0x4>

08001a36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a64:	f000 f8fc 	bl	8001c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Update_Melody();
 8001a68:	f7ff ff92 	bl	8001990 <Update_Melody>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001a74:	2001      	movs	r0, #1
 8001a76:	f000 fc2d 	bl	80022d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  if(HAL_GetTick() > last_button_press + 200)
 8001a7a:	f000 f905 	bl	8001c88 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <EXTI0_IRQHandler+0x28>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	33c8      	adds	r3, #200	; 0xc8
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d904      	bls.n	8001a94 <EXTI0_IRQHandler+0x24>
  {
	  last_button_press = HAL_GetTick();
 8001a8a:	f000 f8fd 	bl	8001c88 <HAL_GetTick>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4a01      	ldr	r2, [pc, #4]	; (8001a98 <EXTI0_IRQHandler+0x28>)
 8001a92:	6013      	str	r3, [r2, #0]

  }
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200006f0 	.word	0x200006f0

08001a9c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001aa0:	2002      	movs	r0, #2
 8001aa2:	f000 fc17 	bl	80022d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001aae:	2004      	movs	r0, #4
 8001ab0:	f000 fc10 	bl	80022d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001abc:	2008      	movs	r0, #8
 8001abe:	f000 fc09 	bl	80022d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001acc:	4802      	ldr	r0, [pc, #8]	; (8001ad8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001ace:	f002 fd03 	bl	80044d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200001d4 	.word	0x200001d4

08001adc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ae0:	4802      	ldr	r0, [pc, #8]	; (8001aec <USART1_IRQHandler+0x10>)
 8001ae2:	f003 fdd3 	bl	800568c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	2000026c 	.word	0x2000026c

08001af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af8:	4a14      	ldr	r2, [pc, #80]	; (8001b4c <_sbrk+0x5c>)
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <_sbrk+0x60>)
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d102      	bne.n	8001b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <_sbrk+0x64>)
 8001b0e:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <_sbrk+0x68>)
 8001b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <_sbrk+0x64>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d207      	bcs.n	8001b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b20:	f005 f842 	bl	8006ba8 <__errno>
 8001b24:	4603      	mov	r3, r0
 8001b26:	220c      	movs	r2, #12
 8001b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2e:	e009      	b.n	8001b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <_sbrk+0x64>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b36:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <_sbrk+0x64>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <_sbrk+0x64>)
 8001b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b42:	68fb      	ldr	r3, [r7, #12]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	2000a000 	.word	0x2000a000
 8001b50:	00000400 	.word	0x00000400
 8001b54:	200006f4 	.word	0x200006f4
 8001b58:	20000710 	.word	0x20000710

08001b5c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <SystemInit+0x20>)
 8001b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b66:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <SystemInit+0x20>)
 8001b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bb8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b84:	f7ff ffea 	bl	8001b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b88:	480c      	ldr	r0, [pc, #48]	; (8001bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8001b8a:	490d      	ldr	r1, [pc, #52]	; (8001bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	; (8001bc4 <LoopForever+0xe>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b90:	e002      	b.n	8001b98 <LoopCopyDataInit>

08001b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b96:	3304      	adds	r3, #4

08001b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b9c:	d3f9      	bcc.n	8001b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ba0:	4c0a      	ldr	r4, [pc, #40]	; (8001bcc <LoopForever+0x16>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba4:	e001      	b.n	8001baa <LoopFillZerobss>

08001ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba8:	3204      	adds	r2, #4

08001baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bac:	d3fb      	bcc.n	8001ba6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bae:	f005 f801 	bl	8006bb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bb2:	f7fe fee5 	bl	8000980 <main>

08001bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8001bb6:	e7fe      	b.n	8001bb6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bb8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc0:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001bc4:	08009340 	.word	0x08009340
  ldr r2, =_sbss
 8001bc8:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001bcc:	2000070c 	.word	0x2000070c

08001bd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bd0:	e7fe      	b.n	8001bd0 <ADC1_2_IRQHandler>
	...

08001bd4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <HAL_Init+0x28>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a07      	ldr	r2, [pc, #28]	; (8001bfc <HAL_Init+0x28>)
 8001bde:	f043 0310 	orr.w	r3, r3, #16
 8001be2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be4:	2003      	movs	r0, #3
 8001be6:	f000 f92b 	bl	8001e40 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bea:	2000      	movs	r0, #0
 8001bec:	f000 f808 	bl	8001c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf0:	f7ff fc46 	bl	8001480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40022000 	.word	0x40022000

08001c00 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_InitTick+0x54>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_InitTick+0x58>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4619      	mov	r1, r3
 8001c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 f943 	bl	8001eaa <HAL_SYSTICK_Config>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e00e      	b.n	8001c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b0f      	cmp	r3, #15
 8001c32:	d80a      	bhi.n	8001c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c34:	2200      	movs	r2, #0
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	f000 f90b 	bl	8001e56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c40:	4a06      	ldr	r2, [pc, #24]	; (8001c5c <HAL_InitTick+0x5c>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e000      	b.n	8001c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000090 	.word	0x20000090
 8001c58:	20000098 	.word	0x20000098
 8001c5c:	20000094 	.word	0x20000094

08001c60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_IncTick+0x20>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_IncTick+0x24>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <HAL_IncTick+0x24>)
 8001c72:	6013      	str	r3, [r2, #0]
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000098 	.word	0x20000098
 8001c84:	200006f8 	.word	0x200006f8

08001c88 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <HAL_GetTick+0x14>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	200006f8 	.word	0x200006f8

08001ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd2:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	60d3      	str	r3, [r2, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <__NVIC_GetPriorityGrouping+0x18>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	f003 0307 	and.w	r3, r3, #7
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	db0b      	blt.n	8001d2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	f003 021f 	and.w	r2, r3, #31
 8001d1c:	4907      	ldr	r1, [pc, #28]	; (8001d3c <__NVIC_EnableIRQ+0x38>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	095b      	lsrs	r3, r3, #5
 8001d24:	2001      	movs	r0, #1
 8001d26:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000e100 	.word	0xe000e100

08001d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	6039      	str	r1, [r7, #0]
 8001d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	db0a      	blt.n	8001d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	490c      	ldr	r1, [pc, #48]	; (8001d8c <__NVIC_SetPriority+0x4c>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	0112      	lsls	r2, r2, #4
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	440b      	add	r3, r1
 8001d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d68:	e00a      	b.n	8001d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4908      	ldr	r1, [pc, #32]	; (8001d90 <__NVIC_SetPriority+0x50>)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	3b04      	subs	r3, #4
 8001d78:	0112      	lsls	r2, r2, #4
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	761a      	strb	r2, [r3, #24]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000e100 	.word	0xe000e100
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	; 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f1c3 0307 	rsb	r3, r3, #7
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	bf28      	it	cs
 8001db2:	2304      	movcs	r3, #4
 8001db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3304      	adds	r3, #4
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d902      	bls.n	8001dc4 <NVIC_EncodePriority+0x30>
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3b03      	subs	r3, #3
 8001dc2:	e000      	b.n	8001dc6 <NVIC_EncodePriority+0x32>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	43d9      	mvns	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	4313      	orrs	r3, r2
         );
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3724      	adds	r7, #36	; 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e0c:	d301      	bcc.n	8001e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e00f      	b.n	8001e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e12:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <SysTick_Config+0x40>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1a:	210f      	movs	r1, #15
 8001e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e20:	f7ff ff8e 	bl	8001d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <SysTick_Config+0x40>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2a:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <SysTick_Config+0x40>)
 8001e2c:	2207      	movs	r2, #7
 8001e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	e000e010 	.word	0xe000e010

08001e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff ff29 	bl	8001ca0 <__NVIC_SetPriorityGrouping>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b086      	sub	sp, #24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
 8001e62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e68:	f7ff ff3e 	bl	8001ce8 <__NVIC_GetPriorityGrouping>
 8001e6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	6978      	ldr	r0, [r7, #20]
 8001e74:	f7ff ff8e 	bl	8001d94 <NVIC_EncodePriority>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff5d 	bl	8001d40 <__NVIC_SetPriority>
}
 8001e86:	bf00      	nop
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4603      	mov	r3, r0
 8001e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff31 	bl	8001d04 <__NVIC_EnableIRQ>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ffa2 	bl	8001dfc <SysTick_Config>
 8001eb8:	4603      	mov	r3, r0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d008      	beq.n	8001ee6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2204      	movs	r2, #4
 8001ed8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e020      	b.n	8001f28 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 020e 	bic.w	r2, r2, #14
 8001ef4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0201 	bic.w	r2, r2, #1
 8001f04:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0e:	2101      	movs	r1, #1
 8001f10:	fa01 f202 	lsl.w	r2, r1, r2
 8001f14:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d005      	beq.n	8001f56 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	73fb      	strb	r3, [r7, #15]
 8001f54:	e027      	b.n	8001fa6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 020e 	bic.w	r2, r2, #14
 8001f64:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0201 	bic.w	r2, r2, #1
 8001f74:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7e:	2101      	movs	r1, #1
 8001f80:	fa01 f202 	lsl.w	r2, r1, r2
 8001f84:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	4798      	blx	r3
    } 
  }
  return status;
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fbe:	e154      	b.n	800226a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 8146 	beq.w	8002264 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d005      	beq.n	8001ff0 <HAL_GPIO_Init+0x40>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d130      	bne.n	8002052 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002026:	2201      	movs	r2, #1
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	f003 0201 	and.w	r2, r3, #1
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b03      	cmp	r3, #3
 800205c:	d017      	beq.n	800208e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	2203      	movs	r2, #3
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d123      	bne.n	80020e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	08da      	lsrs	r2, r3, #3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3208      	adds	r2, #8
 80020a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	220f      	movs	r2, #15
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	08da      	lsrs	r2, r3, #3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3208      	adds	r2, #8
 80020dc:	6939      	ldr	r1, [r7, #16]
 80020de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	2203      	movs	r2, #3
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0203 	and.w	r2, r3, #3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 80a0 	beq.w	8002264 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002124:	4b58      	ldr	r3, [pc, #352]	; (8002288 <HAL_GPIO_Init+0x2d8>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	4a57      	ldr	r2, [pc, #348]	; (8002288 <HAL_GPIO_Init+0x2d8>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6193      	str	r3, [r2, #24]
 8002130:	4b55      	ldr	r3, [pc, #340]	; (8002288 <HAL_GPIO_Init+0x2d8>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800213c:	4a53      	ldr	r2, [pc, #332]	; (800228c <HAL_GPIO_Init+0x2dc>)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	3302      	adds	r3, #2
 8002144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002148:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002166:	d019      	beq.n	800219c <HAL_GPIO_Init+0x1ec>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a49      	ldr	r2, [pc, #292]	; (8002290 <HAL_GPIO_Init+0x2e0>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d013      	beq.n	8002198 <HAL_GPIO_Init+0x1e8>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a48      	ldr	r2, [pc, #288]	; (8002294 <HAL_GPIO_Init+0x2e4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d00d      	beq.n	8002194 <HAL_GPIO_Init+0x1e4>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a47      	ldr	r2, [pc, #284]	; (8002298 <HAL_GPIO_Init+0x2e8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d007      	beq.n	8002190 <HAL_GPIO_Init+0x1e0>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a46      	ldr	r2, [pc, #280]	; (800229c <HAL_GPIO_Init+0x2ec>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d101      	bne.n	800218c <HAL_GPIO_Init+0x1dc>
 8002188:	2304      	movs	r3, #4
 800218a:	e008      	b.n	800219e <HAL_GPIO_Init+0x1ee>
 800218c:	2305      	movs	r3, #5
 800218e:	e006      	b.n	800219e <HAL_GPIO_Init+0x1ee>
 8002190:	2303      	movs	r3, #3
 8002192:	e004      	b.n	800219e <HAL_GPIO_Init+0x1ee>
 8002194:	2302      	movs	r3, #2
 8002196:	e002      	b.n	800219e <HAL_GPIO_Init+0x1ee>
 8002198:	2301      	movs	r3, #1
 800219a:	e000      	b.n	800219e <HAL_GPIO_Init+0x1ee>
 800219c:	2300      	movs	r3, #0
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	f002 0203 	and.w	r2, r2, #3
 80021a4:	0092      	lsls	r2, r2, #2
 80021a6:	4093      	lsls	r3, r2
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021ae:	4937      	ldr	r1, [pc, #220]	; (800228c <HAL_GPIO_Init+0x2dc>)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	089b      	lsrs	r3, r3, #2
 80021b4:	3302      	adds	r3, #2
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021bc:	4b38      	ldr	r3, [pc, #224]	; (80022a0 <HAL_GPIO_Init+0x2f0>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4313      	orrs	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021e0:	4a2f      	ldr	r2, [pc, #188]	; (80022a0 <HAL_GPIO_Init+0x2f0>)
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021e6:	4b2e      	ldr	r3, [pc, #184]	; (80022a0 <HAL_GPIO_Init+0x2f0>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4013      	ands	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4313      	orrs	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800220a:	4a25      	ldr	r2, [pc, #148]	; (80022a0 <HAL_GPIO_Init+0x2f0>)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002210:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <HAL_GPIO_Init+0x2f0>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	43db      	mvns	r3, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4013      	ands	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002234:	4a1a      	ldr	r2, [pc, #104]	; (80022a0 <HAL_GPIO_Init+0x2f0>)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800223a:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_GPIO_Init+0x2f0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	43db      	mvns	r3, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800225e:	4a10      	ldr	r2, [pc, #64]	; (80022a0 <HAL_GPIO_Init+0x2f0>)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	3301      	adds	r3, #1
 8002268:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	f47f aea3 	bne.w	8001fc0 <HAL_GPIO_Init+0x10>
  }
}
 800227a:	bf00      	nop
 800227c:	bf00      	nop
 800227e:	371c      	adds	r7, #28
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	40021000 	.word	0x40021000
 800228c:	40010000 	.word	0x40010000
 8002290:	48000400 	.word	0x48000400
 8002294:	48000800 	.word	0x48000800
 8002298:	48000c00 	.word	0x48000c00
 800229c:	48001000 	.word	0x48001000
 80022a0:	40010400 	.word	0x40010400

080022a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	807b      	strh	r3, [r7, #2]
 80022b0:	4613      	mov	r3, r2
 80022b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022b4:	787b      	ldrb	r3, [r7, #1]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022ba:	887a      	ldrh	r2, [r7, #2]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022c0:	e002      	b.n	80022c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022c2:	887a      	ldrh	r2, [r7, #2]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022de:	4b08      	ldr	r3, [pc, #32]	; (8002300 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022e0:	695a      	ldr	r2, [r3, #20]
 80022e2:	88fb      	ldrh	r3, [r7, #6]
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d006      	beq.n	80022f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022ea:	4a05      	ldr	r2, [pc, #20]	; (8002300 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022ec:	88fb      	ldrh	r3, [r7, #6]
 80022ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022f0:	88fb      	ldrh	r3, [r7, #6]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe fed2 	bl	800109c <HAL_GPIO_EXTI_Callback>
  }
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40010400 	.word	0x40010400

08002304 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e081      	b.n	800241a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d106      	bne.n	8002330 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff f8cc 	bl	80014c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2224      	movs	r2, #36	; 0x24
 8002334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0201 	bic.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002354:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002364:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d107      	bne.n	800237e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	e006      	b.n	800238c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800238a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2b02      	cmp	r3, #2
 8002392:	d104      	bne.n	800239e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800239c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691a      	ldr	r2, [r3, #16]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69d9      	ldr	r1, [r3, #28]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1a      	ldr	r2, [r3, #32]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b20      	cmp	r3, #32
 8002436:	d138      	bne.n	80024aa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002442:	2302      	movs	r3, #2
 8002444:	e032      	b.n	80024ac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2224      	movs	r2, #36	; 0x24
 8002452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0201 	bic.w	r2, r2, #1
 8002464:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002474:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6819      	ldr	r1, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 0201 	orr.w	r2, r2, #1
 8002494:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2220      	movs	r2, #32
 800249a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	e000      	b.n	80024ac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024aa:	2302      	movs	r3, #2
  }
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b20      	cmp	r3, #32
 80024cc:	d139      	bne.n	8002542 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024d8:	2302      	movs	r3, #2
 80024da:	e033      	b.n	8002544 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2224      	movs	r2, #36	; 0x24
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0201 	bic.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800250a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 0201 	orr.w	r2, r2, #1
 800252c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2220      	movs	r2, #32
 8002532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	e000      	b.n	8002544 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002542:	2302      	movs	r3, #2
  }
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002552:	b08b      	sub	sp, #44	; 0x2c
 8002554:	af06      	add	r7, sp, #24
 8002556:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e0c4      	b.n	80026ec <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d106      	bne.n	800257c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff f8e6 	bl	8001748 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2203      	movs	r2, #3
 8002580:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f004 fad1 	bl	8006b30 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800258e:	2300      	movs	r3, #0
 8002590:	73fb      	strb	r3, [r7, #15]
 8002592:	e040      	b.n	8002616 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	440b      	add	r3, r1
 80025a4:	3301      	adds	r3, #1
 80025a6:	2201      	movs	r2, #1
 80025a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	440b      	add	r3, r1
 80025ba:	7bfa      	ldrb	r2, [r7, #15]
 80025bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	440b      	add	r3, r1
 80025ce:	3303      	adds	r3, #3
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025d4:	7bfa      	ldrb	r2, [r7, #15]
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	440b      	add	r3, r1
 80025e2:	3338      	adds	r3, #56	; 0x38
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025e8:	7bfa      	ldrb	r2, [r7, #15]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	440b      	add	r3, r1
 80025f6:	333c      	adds	r3, #60	; 0x3c
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025fc:	7bfa      	ldrb	r2, [r7, #15]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	440b      	add	r3, r1
 800260a:	3340      	adds	r3, #64	; 0x40
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	3301      	adds	r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
 8002616:	7bfa      	ldrb	r2, [r7, #15]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	429a      	cmp	r2, r3
 800261e:	d3b9      	bcc.n	8002594 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002620:	2300      	movs	r3, #0
 8002622:	73fb      	strb	r3, [r7, #15]
 8002624:	e044      	b.n	80026b0 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002626:	7bfa      	ldrb	r2, [r7, #15]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	440b      	add	r3, r1
 8002634:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800263c:	7bfa      	ldrb	r2, [r7, #15]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	440b      	add	r3, r1
 800264a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800264e:	7bfa      	ldrb	r2, [r7, #15]
 8002650:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002652:	7bfa      	ldrb	r2, [r7, #15]
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	440b      	add	r3, r1
 8002660:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002668:	7bfa      	ldrb	r2, [r7, #15]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	440b      	add	r3, r1
 8002676:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800267e:	7bfa      	ldrb	r2, [r7, #15]
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	440b      	add	r3, r1
 800268c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002694:	7bfa      	ldrb	r2, [r7, #15]
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	440b      	add	r3, r1
 80026a2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	3301      	adds	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
 80026b0:	7bfa      	ldrb	r2, [r7, #15]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d3b5      	bcc.n	8002626 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	687e      	ldr	r6, [r7, #4]
 80026c2:	466d      	mov	r5, sp
 80026c4:	f106 0410 	add.w	r4, r6, #16
 80026c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026cc:	6823      	ldr	r3, [r4, #0]
 80026ce:	602b      	str	r3, [r5, #0]
 80026d0:	1d33      	adds	r3, r6, #4
 80026d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026d4:	6838      	ldr	r0, [r7, #0]
 80026d6:	f004 fa46 	bl	8006b66 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002700:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002704:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d102      	bne.n	800271a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	f001 b823 	b.w	8003760 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800271a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 817d 	beq.w	8002a2a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002730:	4bbc      	ldr	r3, [pc, #752]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 030c 	and.w	r3, r3, #12
 8002738:	2b04      	cmp	r3, #4
 800273a:	d00c      	beq.n	8002756 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800273c:	4bb9      	ldr	r3, [pc, #740]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 030c 	and.w	r3, r3, #12
 8002744:	2b08      	cmp	r3, #8
 8002746:	d15c      	bne.n	8002802 <HAL_RCC_OscConfig+0x10e>
 8002748:	4bb6      	ldr	r3, [pc, #728]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002754:	d155      	bne.n	8002802 <HAL_RCC_OscConfig+0x10e>
 8002756:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800275a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002762:	fa93 f3a3 	rbit	r3, r3
 8002766:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800276a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	095b      	lsrs	r3, r3, #5
 8002776:	b2db      	uxtb	r3, r3
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b01      	cmp	r3, #1
 8002780:	d102      	bne.n	8002788 <HAL_RCC_OscConfig+0x94>
 8002782:	4ba8      	ldr	r3, [pc, #672]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	e015      	b.n	80027b4 <HAL_RCC_OscConfig+0xc0>
 8002788:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800278c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800279c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027a0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80027a4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80027a8:	fa93 f3a3 	rbit	r3, r3
 80027ac:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80027b0:	4b9c      	ldr	r3, [pc, #624]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027b8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80027bc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80027c0:	fa92 f2a2 	rbit	r2, r2
 80027c4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80027c8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80027cc:	fab2 f282 	clz	r2, r2
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	f042 0220 	orr.w	r2, r2, #32
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	f002 021f 	and.w	r2, r2, #31
 80027dc:	2101      	movs	r1, #1
 80027de:	fa01 f202 	lsl.w	r2, r1, r2
 80027e2:	4013      	ands	r3, r2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 811f 	beq.w	8002a28 <HAL_RCC_OscConfig+0x334>
 80027ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f040 8116 	bne.w	8002a28 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	f000 bfaf 	b.w	8003760 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002806:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002812:	d106      	bne.n	8002822 <HAL_RCC_OscConfig+0x12e>
 8002814:	4b83      	ldr	r3, [pc, #524]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a82      	ldr	r2, [pc, #520]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 800281a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	e036      	b.n	8002890 <HAL_RCC_OscConfig+0x19c>
 8002822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002826:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10c      	bne.n	800284c <HAL_RCC_OscConfig+0x158>
 8002832:	4b7c      	ldr	r3, [pc, #496]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a7b      	ldr	r2, [pc, #492]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 8002838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	4b79      	ldr	r3, [pc, #484]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a78      	ldr	r2, [pc, #480]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 8002844:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	e021      	b.n	8002890 <HAL_RCC_OscConfig+0x19c>
 800284c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002850:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800285c:	d10c      	bne.n	8002878 <HAL_RCC_OscConfig+0x184>
 800285e:	4b71      	ldr	r3, [pc, #452]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a70      	ldr	r2, [pc, #448]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 8002864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	4b6e      	ldr	r3, [pc, #440]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a6d      	ldr	r2, [pc, #436]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 8002870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	e00b      	b.n	8002890 <HAL_RCC_OscConfig+0x19c>
 8002878:	4b6a      	ldr	r3, [pc, #424]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a69      	ldr	r2, [pc, #420]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 800287e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4b67      	ldr	r3, [pc, #412]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a66      	ldr	r2, [pc, #408]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 800288a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800288e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002890:	4b64      	ldr	r3, [pc, #400]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	f023 020f 	bic.w	r2, r3, #15
 8002898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	495f      	ldr	r1, [pc, #380]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d059      	beq.n	800296e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ba:	f7ff f9e5 	bl	8001c88 <HAL_GetTick>
 80028be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c2:	e00a      	b.n	80028da <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c4:	f7ff f9e0 	bl	8001c88 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b64      	cmp	r3, #100	; 0x64
 80028d2:	d902      	bls.n	80028da <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	f000 bf43 	b.w	8003760 <HAL_RCC_OscConfig+0x106c>
 80028da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028de:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80028ee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	095b      	lsrs	r3, r3, #5
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b01      	cmp	r3, #1
 8002904:	d102      	bne.n	800290c <HAL_RCC_OscConfig+0x218>
 8002906:	4b47      	ldr	r3, [pc, #284]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	e015      	b.n	8002938 <HAL_RCC_OscConfig+0x244>
 800290c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002910:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002914:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002918:	fa93 f3a3 	rbit	r3, r3
 800291c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002920:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002924:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002928:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800292c:	fa93 f3a3 	rbit	r3, r3
 8002930:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002934:	4b3b      	ldr	r3, [pc, #236]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800293c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002940:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002944:	fa92 f2a2 	rbit	r2, r2
 8002948:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800294c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002950:	fab2 f282 	clz	r2, r2
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	f042 0220 	orr.w	r2, r2, #32
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	f002 021f 	and.w	r2, r2, #31
 8002960:	2101      	movs	r1, #1
 8002962:	fa01 f202 	lsl.w	r2, r1, r2
 8002966:	4013      	ands	r3, r2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0ab      	beq.n	80028c4 <HAL_RCC_OscConfig+0x1d0>
 800296c:	e05d      	b.n	8002a2a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296e:	f7ff f98b 	bl	8001c88 <HAL_GetTick>
 8002972:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002976:	e00a      	b.n	800298e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002978:	f7ff f986 	bl	8001c88 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b64      	cmp	r3, #100	; 0x64
 8002986:	d902      	bls.n	800298e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	f000 bee9 	b.w	8003760 <HAL_RCC_OscConfig+0x106c>
 800298e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002992:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800299a:	fa93 f3a3 	rbit	r3, r3
 800299e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80029a2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	095b      	lsrs	r3, r3, #5
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d102      	bne.n	80029c0 <HAL_RCC_OscConfig+0x2cc>
 80029ba:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	e015      	b.n	80029ec <HAL_RCC_OscConfig+0x2f8>
 80029c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029c4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80029cc:	fa93 f3a3 	rbit	r3, r3
 80029d0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80029d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029d8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80029dc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80029e0:	fa93 f3a3 	rbit	r3, r3
 80029e4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80029e8:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029f0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80029f4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80029f8:	fa92 f2a2 	rbit	r2, r2
 80029fc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002a00:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002a04:	fab2 f282 	clz	r2, r2
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	f042 0220 	orr.w	r2, r2, #32
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	f002 021f 	and.w	r2, r2, #31
 8002a14:	2101      	movs	r1, #1
 8002a16:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1ab      	bne.n	8002978 <HAL_RCC_OscConfig+0x284>
 8002a20:	e003      	b.n	8002a2a <HAL_RCC_OscConfig+0x336>
 8002a22:	bf00      	nop
 8002a24:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 817d 	beq.w	8002d3a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a40:	4ba6      	ldr	r3, [pc, #664]	; (8002cdc <HAL_RCC_OscConfig+0x5e8>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 030c 	and.w	r3, r3, #12
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00b      	beq.n	8002a64 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a4c:	4ba3      	ldr	r3, [pc, #652]	; (8002cdc <HAL_RCC_OscConfig+0x5e8>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d172      	bne.n	8002b3e <HAL_RCC_OscConfig+0x44a>
 8002a58:	4ba0      	ldr	r3, [pc, #640]	; (8002cdc <HAL_RCC_OscConfig+0x5e8>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d16c      	bne.n	8002b3e <HAL_RCC_OscConfig+0x44a>
 8002a64:	2302      	movs	r3, #2
 8002a66:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002a76:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	095b      	lsrs	r3, r3, #5
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d102      	bne.n	8002a94 <HAL_RCC_OscConfig+0x3a0>
 8002a8e:	4b93      	ldr	r3, [pc, #588]	; (8002cdc <HAL_RCC_OscConfig+0x5e8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	e013      	b.n	8002abc <HAL_RCC_OscConfig+0x3c8>
 8002a94:	2302      	movs	r3, #2
 8002a96:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002a9e:	fa93 f3a3 	rbit	r3, r3
 8002aa2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002aac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ab0:	fa93 f3a3 	rbit	r3, r3
 8002ab4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002ab8:	4b88      	ldr	r3, [pc, #544]	; (8002cdc <HAL_RCC_OscConfig+0x5e8>)
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	2202      	movs	r2, #2
 8002abe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002ac2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002ac6:	fa92 f2a2 	rbit	r2, r2
 8002aca:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002ace:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002ad2:	fab2 f282 	clz	r2, r2
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	f042 0220 	orr.w	r2, r2, #32
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	f002 021f 	and.w	r2, r2, #31
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <HAL_RCC_OscConfig+0x410>
 8002aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d002      	beq.n	8002b04 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	f000 be2e 	b.w	8003760 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b04:	4b75      	ldr	r3, [pc, #468]	; (8002cdc <HAL_RCC_OscConfig+0x5e8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	21f8      	movs	r1, #248	; 0xf8
 8002b1a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002b22:	fa91 f1a1 	rbit	r1, r1
 8002b26:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002b2a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002b2e:	fab1 f181 	clz	r1, r1
 8002b32:	b2c9      	uxtb	r1, r1
 8002b34:	408b      	lsls	r3, r1
 8002b36:	4969      	ldr	r1, [pc, #420]	; (8002cdc <HAL_RCC_OscConfig+0x5e8>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3c:	e0fd      	b.n	8002d3a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 8088 	beq.w	8002c60 <HAL_RCC_OscConfig+0x56c>
 8002b50:	2301      	movs	r3, #1
 8002b52:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002b62:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b66:	fab3 f383 	clz	r3, r3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	461a      	mov	r2, r3
 8002b78:	2301      	movs	r3, #1
 8002b7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7ff f884 	bl	8001c88 <HAL_GetTick>
 8002b80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b86:	f7ff f87f 	bl	8001c88 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d902      	bls.n	8002b9c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	f000 bde2 	b.w	8003760 <HAL_RCC_OscConfig+0x106c>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002bae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb2:	fab3 f383 	clz	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	095b      	lsrs	r3, r3, #5
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d102      	bne.n	8002bcc <HAL_RCC_OscConfig+0x4d8>
 8002bc6:	4b45      	ldr	r3, [pc, #276]	; (8002cdc <HAL_RCC_OscConfig+0x5e8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	e013      	b.n	8002bf4 <HAL_RCC_OscConfig+0x500>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002bde:	2302      	movs	r3, #2
 8002be0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002be4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002be8:	fa93 f3a3 	rbit	r3, r3
 8002bec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002bf0:	4b3a      	ldr	r3, [pc, #232]	; (8002cdc <HAL_RCC_OscConfig+0x5e8>)
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002bfa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002bfe:	fa92 f2a2 	rbit	r2, r2
 8002c02:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002c06:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002c0a:	fab2 f282 	clz	r2, r2
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	f042 0220 	orr.w	r2, r2, #32
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	f002 021f 	and.w	r2, r2, #31
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0af      	beq.n	8002b86 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c26:	4b2d      	ldr	r3, [pc, #180]	; (8002cdc <HAL_RCC_OscConfig+0x5e8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	21f8      	movs	r1, #248	; 0xf8
 8002c3c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002c44:	fa91 f1a1 	rbit	r1, r1
 8002c48:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002c4c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002c50:	fab1 f181 	clz	r1, r1
 8002c54:	b2c9      	uxtb	r1, r1
 8002c56:	408b      	lsls	r3, r1
 8002c58:	4920      	ldr	r1, [pc, #128]	; (8002cdc <HAL_RCC_OscConfig+0x5e8>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	600b      	str	r3, [r1, #0]
 8002c5e:	e06c      	b.n	8002d3a <HAL_RCC_OscConfig+0x646>
 8002c60:	2301      	movs	r3, #1
 8002c62:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002c72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	461a      	mov	r2, r3
 8002c88:	2300      	movs	r3, #0
 8002c8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fffc 	bl	8001c88 <HAL_GetTick>
 8002c90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c94:	e00a      	b.n	8002cac <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c96:	f7fe fff7 	bl	8001c88 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d902      	bls.n	8002cac <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	f000 bd5a 	b.w	8003760 <HAL_RCC_OscConfig+0x106c>
 8002cac:	2302      	movs	r3, #2
 8002cae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002cb6:	fa93 f3a3 	rbit	r3, r3
 8002cba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cc2:	fab3 f383 	clz	r3, r3
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	095b      	lsrs	r3, r3, #5
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d104      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x5ec>
 8002cd6:	4b01      	ldr	r3, [pc, #4]	; (8002cdc <HAL_RCC_OscConfig+0x5e8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	e015      	b.n	8002d08 <HAL_RCC_OscConfig+0x614>
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002cf8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002cfc:	fa93 f3a3 	rbit	r3, r3
 8002d00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002d04:	4bc8      	ldr	r3, [pc, #800]	; (8003028 <HAL_RCC_OscConfig+0x934>)
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	2202      	movs	r2, #2
 8002d0a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002d0e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002d12:	fa92 f2a2 	rbit	r2, r2
 8002d16:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002d1a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002d1e:	fab2 f282 	clz	r2, r2
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	f042 0220 	orr.w	r2, r2, #32
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	f002 021f 	and.w	r2, r2, #31
 8002d2e:	2101      	movs	r1, #1
 8002d30:	fa01 f202 	lsl.w	r2, r1, r2
 8002d34:	4013      	ands	r3, r2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1ad      	bne.n	8002c96 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 8110 	beq.w	8002f70 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d079      	beq.n	8002e54 <HAL_RCC_OscConfig+0x760>
 8002d60:	2301      	movs	r3, #1
 8002d62:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d66:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d6a:	fa93 f3a3 	rbit	r3, r3
 8002d6e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4bab      	ldr	r3, [pc, #684]	; (800302c <HAL_RCC_OscConfig+0x938>)
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	461a      	mov	r2, r3
 8002d86:	2301      	movs	r3, #1
 8002d88:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8a:	f7fe ff7d 	bl	8001c88 <HAL_GetTick>
 8002d8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d92:	e00a      	b.n	8002daa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d94:	f7fe ff78 	bl	8001c88 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d902      	bls.n	8002daa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	f000 bcdb 	b.w	8003760 <HAL_RCC_OscConfig+0x106c>
 8002daa:	2302      	movs	r3, #2
 8002dac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002db4:	fa93 f3a3 	rbit	r3, r3
 8002db8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dcc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	fa93 f2a3 	rbit	r2, r3
 8002dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002de8:	2202      	movs	r2, #2
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	fa93 f2a3 	rbit	r2, r3
 8002dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e02:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e04:	4b88      	ldr	r3, [pc, #544]	; (8003028 <HAL_RCC_OscConfig+0x934>)
 8002e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e10:	2102      	movs	r1, #2
 8002e12:	6019      	str	r1, [r3, #0]
 8002e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e18:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	fa93 f1a3 	rbit	r1, r3
 8002e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e26:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e2a:	6019      	str	r1, [r3, #0]
  return result;
 8002e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e30:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	fab3 f383 	clz	r3, r3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	f003 031f 	and.w	r3, r3, #31
 8002e46:	2101      	movs	r1, #1
 8002e48:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0a0      	beq.n	8002d94 <HAL_RCC_OscConfig+0x6a0>
 8002e52:	e08d      	b.n	8002f70 <HAL_RCC_OscConfig+0x87c>
 8002e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e58:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e64:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	fa93 f2a3 	rbit	r2, r3
 8002e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e72:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e76:	601a      	str	r2, [r3, #0]
  return result;
 8002e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e80:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4b68      	ldr	r3, [pc, #416]	; (800302c <HAL_RCC_OscConfig+0x938>)
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	461a      	mov	r2, r3
 8002e92:	2300      	movs	r3, #0
 8002e94:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e96:	f7fe fef7 	bl	8001c88 <HAL_GetTick>
 8002e9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea0:	f7fe fef2 	bl	8001c88 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d902      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	f000 bc55 	b.w	8003760 <HAL_RCC_OscConfig+0x106c>
 8002eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	fa93 f2a3 	rbit	r2, r3
 8002ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ede:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	fa93 f2a3 	rbit	r2, r3
 8002ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f06:	2202      	movs	r2, #2
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	fa93 f2a3 	rbit	r2, r3
 8002f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f20:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f22:	4b41      	ldr	r3, [pc, #260]	; (8003028 <HAL_RCC_OscConfig+0x934>)
 8002f24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002f2e:	2102      	movs	r1, #2
 8002f30:	6019      	str	r1, [r3, #0]
 8002f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f36:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	fa93 f1a3 	rbit	r1, r3
 8002f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f44:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f48:	6019      	str	r1, [r3, #0]
  return result;
 8002f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	fab3 f383 	clz	r3, r3
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f003 031f 	and.w	r3, r3, #31
 8002f64:	2101      	movs	r1, #1
 8002f66:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d197      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 81a1 	beq.w	80032c8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f86:	2300      	movs	r3, #0
 8002f88:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f8c:	4b26      	ldr	r3, [pc, #152]	; (8003028 <HAL_RCC_OscConfig+0x934>)
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d116      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f98:	4b23      	ldr	r3, [pc, #140]	; (8003028 <HAL_RCC_OscConfig+0x934>)
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	4a22      	ldr	r2, [pc, #136]	; (8003028 <HAL_RCC_OscConfig+0x934>)
 8002f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	61d3      	str	r3, [r2, #28]
 8002fa4:	4b20      	ldr	r3, [pc, #128]	; (8003028 <HAL_RCC_OscConfig+0x934>)
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fba:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002fbe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc6:	4b1a      	ldr	r3, [pc, #104]	; (8003030 <HAL_RCC_OscConfig+0x93c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d11a      	bne.n	8003008 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fd2:	4b17      	ldr	r3, [pc, #92]	; (8003030 <HAL_RCC_OscConfig+0x93c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a16      	ldr	r2, [pc, #88]	; (8003030 <HAL_RCC_OscConfig+0x93c>)
 8002fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fdc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fde:	f7fe fe53 	bl	8001c88 <HAL_GetTick>
 8002fe2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe6:	e009      	b.n	8002ffc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe8:	f7fe fe4e 	bl	8001c88 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b64      	cmp	r3, #100	; 0x64
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e3b1      	b.n	8003760 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffc:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <HAL_RCC_OscConfig+0x93c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0ef      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d10d      	bne.n	8003034 <HAL_RCC_OscConfig+0x940>
 8003018:	4b03      	ldr	r3, [pc, #12]	; (8003028 <HAL_RCC_OscConfig+0x934>)
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	4a02      	ldr	r2, [pc, #8]	; (8003028 <HAL_RCC_OscConfig+0x934>)
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	6213      	str	r3, [r2, #32]
 8003024:	e03c      	b.n	80030a0 <HAL_RCC_OscConfig+0x9ac>
 8003026:	bf00      	nop
 8003028:	40021000 	.word	0x40021000
 800302c:	10908120 	.word	0x10908120
 8003030:	40007000 	.word	0x40007000
 8003034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003038:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10c      	bne.n	800305e <HAL_RCC_OscConfig+0x96a>
 8003044:	4bc1      	ldr	r3, [pc, #772]	; (800334c <HAL_RCC_OscConfig+0xc58>)
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	4ac0      	ldr	r2, [pc, #768]	; (800334c <HAL_RCC_OscConfig+0xc58>)
 800304a:	f023 0301 	bic.w	r3, r3, #1
 800304e:	6213      	str	r3, [r2, #32]
 8003050:	4bbe      	ldr	r3, [pc, #760]	; (800334c <HAL_RCC_OscConfig+0xc58>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	4abd      	ldr	r2, [pc, #756]	; (800334c <HAL_RCC_OscConfig+0xc58>)
 8003056:	f023 0304 	bic.w	r3, r3, #4
 800305a:	6213      	str	r3, [r2, #32]
 800305c:	e020      	b.n	80030a0 <HAL_RCC_OscConfig+0x9ac>
 800305e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003062:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	2b05      	cmp	r3, #5
 800306c:	d10c      	bne.n	8003088 <HAL_RCC_OscConfig+0x994>
 800306e:	4bb7      	ldr	r3, [pc, #732]	; (800334c <HAL_RCC_OscConfig+0xc58>)
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	4ab6      	ldr	r2, [pc, #728]	; (800334c <HAL_RCC_OscConfig+0xc58>)
 8003074:	f043 0304 	orr.w	r3, r3, #4
 8003078:	6213      	str	r3, [r2, #32]
 800307a:	4bb4      	ldr	r3, [pc, #720]	; (800334c <HAL_RCC_OscConfig+0xc58>)
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	4ab3      	ldr	r2, [pc, #716]	; (800334c <HAL_RCC_OscConfig+0xc58>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	6213      	str	r3, [r2, #32]
 8003086:	e00b      	b.n	80030a0 <HAL_RCC_OscConfig+0x9ac>
 8003088:	4bb0      	ldr	r3, [pc, #704]	; (800334c <HAL_RCC_OscConfig+0xc58>)
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	4aaf      	ldr	r2, [pc, #700]	; (800334c <HAL_RCC_OscConfig+0xc58>)
 800308e:	f023 0301 	bic.w	r3, r3, #1
 8003092:	6213      	str	r3, [r2, #32]
 8003094:	4bad      	ldr	r3, [pc, #692]	; (800334c <HAL_RCC_OscConfig+0xc58>)
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	4aac      	ldr	r2, [pc, #688]	; (800334c <HAL_RCC_OscConfig+0xc58>)
 800309a:	f023 0304 	bic.w	r3, r3, #4
 800309e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 8081 	beq.w	80031b4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b2:	f7fe fde9 	bl	8001c88 <HAL_GetTick>
 80030b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ba:	e00b      	b.n	80030d4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030bc:	f7fe fde4 	bl	8001c88 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e345      	b.n	8003760 <HAL_RCC_OscConfig+0x106c>
 80030d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80030dc:	2202      	movs	r2, #2
 80030de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	fa93 f2a3 	rbit	r2, r3
 80030ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003100:	2202      	movs	r2, #2
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003108:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	fa93 f2a3 	rbit	r2, r3
 8003112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003116:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800311a:	601a      	str	r2, [r3, #0]
  return result;
 800311c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003120:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003124:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003126:	fab3 f383 	clz	r3, r3
 800312a:	b2db      	uxtb	r3, r3
 800312c:	095b      	lsrs	r3, r3, #5
 800312e:	b2db      	uxtb	r3, r3
 8003130:	f043 0302 	orr.w	r3, r3, #2
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d102      	bne.n	8003140 <HAL_RCC_OscConfig+0xa4c>
 800313a:	4b84      	ldr	r3, [pc, #528]	; (800334c <HAL_RCC_OscConfig+0xc58>)
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	e013      	b.n	8003168 <HAL_RCC_OscConfig+0xa74>
 8003140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003144:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003148:	2202      	movs	r2, #2
 800314a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003150:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	fa93 f2a3 	rbit	r2, r3
 800315a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	4b79      	ldr	r3, [pc, #484]	; (800334c <HAL_RCC_OscConfig+0xc58>)
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800316c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003170:	2102      	movs	r1, #2
 8003172:	6011      	str	r1, [r2, #0]
 8003174:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003178:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800317c:	6812      	ldr	r2, [r2, #0]
 800317e:	fa92 f1a2 	rbit	r1, r2
 8003182:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003186:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800318a:	6011      	str	r1, [r2, #0]
  return result;
 800318c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003190:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003194:	6812      	ldr	r2, [r2, #0]
 8003196:	fab2 f282 	clz	r2, r2
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	f002 021f 	and.w	r2, r2, #31
 80031a6:	2101      	movs	r1, #1
 80031a8:	fa01 f202 	lsl.w	r2, r1, r2
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d084      	beq.n	80030bc <HAL_RCC_OscConfig+0x9c8>
 80031b2:	e07f      	b.n	80032b4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b4:	f7fe fd68 	bl	8001c88 <HAL_GetTick>
 80031b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031bc:	e00b      	b.n	80031d6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031be:	f7fe fd63 	bl	8001c88 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e2c4      	b.n	8003760 <HAL_RCC_OscConfig+0x106c>
 80031d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031da:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80031de:	2202      	movs	r2, #2
 80031e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	fa93 f2a3 	rbit	r2, r3
 80031f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003202:	2202      	movs	r2, #2
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	fa93 f2a3 	rbit	r2, r3
 8003214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003218:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800321c:	601a      	str	r2, [r3, #0]
  return result;
 800321e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003222:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003226:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003228:	fab3 f383 	clz	r3, r3
 800322c:	b2db      	uxtb	r3, r3
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	b2db      	uxtb	r3, r3
 8003232:	f043 0302 	orr.w	r3, r3, #2
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d102      	bne.n	8003242 <HAL_RCC_OscConfig+0xb4e>
 800323c:	4b43      	ldr	r3, [pc, #268]	; (800334c <HAL_RCC_OscConfig+0xc58>)
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	e013      	b.n	800326a <HAL_RCC_OscConfig+0xb76>
 8003242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003246:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800324a:	2202      	movs	r2, #2
 800324c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003252:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	fa93 f2a3 	rbit	r2, r3
 800325c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003260:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	4b39      	ldr	r3, [pc, #228]	; (800334c <HAL_RCC_OscConfig+0xc58>)
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800326e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003272:	2102      	movs	r1, #2
 8003274:	6011      	str	r1, [r2, #0]
 8003276:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800327a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	fa92 f1a2 	rbit	r1, r2
 8003284:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003288:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800328c:	6011      	str	r1, [r2, #0]
  return result;
 800328e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003292:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003296:	6812      	ldr	r2, [r2, #0]
 8003298:	fab2 f282 	clz	r2, r2
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	f002 021f 	and.w	r2, r2, #31
 80032a8:	2101      	movs	r1, #1
 80032aa:	fa01 f202 	lsl.w	r2, r1, r2
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d184      	bne.n	80031be <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032b4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d105      	bne.n	80032c8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032bc:	4b23      	ldr	r3, [pc, #140]	; (800334c <HAL_RCC_OscConfig+0xc58>)
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	4a22      	ldr	r2, [pc, #136]	; (800334c <HAL_RCC_OscConfig+0xc58>)
 80032c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032c6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 8242 	beq.w	800375e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032da:	4b1c      	ldr	r3, [pc, #112]	; (800334c <HAL_RCC_OscConfig+0xc58>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	f000 8213 	beq.w	800370e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	f040 8162 	bne.w	80035be <HAL_RCC_OscConfig+0xeca>
 80032fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003302:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003306:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	fa93 f2a3 	rbit	r2, r3
 8003316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800331e:	601a      	str	r2, [r3, #0]
  return result;
 8003320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003324:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003328:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003334:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	461a      	mov	r2, r3
 800333c:	2300      	movs	r3, #0
 800333e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003340:	f7fe fca2 	bl	8001c88 <HAL_GetTick>
 8003344:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003348:	e00c      	b.n	8003364 <HAL_RCC_OscConfig+0xc70>
 800334a:	bf00      	nop
 800334c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003350:	f7fe fc9a 	bl	8001c88 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e1fd      	b.n	8003760 <HAL_RCC_OscConfig+0x106c>
 8003364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003368:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800336c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003370:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003376:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	fa93 f2a3 	rbit	r2, r3
 8003380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003384:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003388:	601a      	str	r2, [r3, #0]
  return result;
 800338a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003392:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003394:	fab3 f383 	clz	r3, r3
 8003398:	b2db      	uxtb	r3, r3
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	b2db      	uxtb	r3, r3
 800339e:	f043 0301 	orr.w	r3, r3, #1
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d102      	bne.n	80033ae <HAL_RCC_OscConfig+0xcba>
 80033a8:	4bb0      	ldr	r3, [pc, #704]	; (800366c <HAL_RCC_OscConfig+0xf78>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	e027      	b.n	80033fe <HAL_RCC_OscConfig+0xd0a>
 80033ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80033b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	fa93 f2a3 	rbit	r2, r3
 80033ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ce:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80033dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	fa93 f2a3 	rbit	r2, r3
 80033f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	4b9c      	ldr	r3, [pc, #624]	; (800366c <HAL_RCC_OscConfig+0xf78>)
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003402:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003406:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800340a:	6011      	str	r1, [r2, #0]
 800340c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003410:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003414:	6812      	ldr	r2, [r2, #0]
 8003416:	fa92 f1a2 	rbit	r1, r2
 800341a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800341e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003422:	6011      	str	r1, [r2, #0]
  return result;
 8003424:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003428:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800342c:	6812      	ldr	r2, [r2, #0]
 800342e:	fab2 f282 	clz	r2, r2
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	f042 0220 	orr.w	r2, r2, #32
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	f002 021f 	and.w	r2, r2, #31
 800343e:	2101      	movs	r1, #1
 8003440:	fa01 f202 	lsl.w	r2, r1, r2
 8003444:	4013      	ands	r3, r2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d182      	bne.n	8003350 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800344a:	4b88      	ldr	r3, [pc, #544]	; (800366c <HAL_RCC_OscConfig+0xf78>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003456:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800345e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003462:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	430b      	orrs	r3, r1
 800346c:	497f      	ldr	r1, [pc, #508]	; (800366c <HAL_RCC_OscConfig+0xf78>)
 800346e:	4313      	orrs	r3, r2
 8003470:	604b      	str	r3, [r1, #4]
 8003472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003476:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800347a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800347e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003484:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	fa93 f2a3 	rbit	r2, r3
 800348e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003492:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003496:	601a      	str	r2, [r3, #0]
  return result;
 8003498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80034a0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a2:	fab3 f383 	clz	r3, r3
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	461a      	mov	r2, r3
 80034b4:	2301      	movs	r3, #1
 80034b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b8:	f7fe fbe6 	bl	8001c88 <HAL_GetTick>
 80034bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034c0:	e009      	b.n	80034d6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c2:	f7fe fbe1 	bl	8001c88 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e144      	b.n	8003760 <HAL_RCC_OscConfig+0x106c>
 80034d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034da:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80034de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	fa93 f2a3 	rbit	r2, r3
 80034f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80034fa:	601a      	str	r2, [r3, #0]
  return result;
 80034fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003500:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003504:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003506:	fab3 f383 	clz	r3, r3
 800350a:	b2db      	uxtb	r3, r3
 800350c:	095b      	lsrs	r3, r3, #5
 800350e:	b2db      	uxtb	r3, r3
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b01      	cmp	r3, #1
 8003518:	d102      	bne.n	8003520 <HAL_RCC_OscConfig+0xe2c>
 800351a:	4b54      	ldr	r3, [pc, #336]	; (800366c <HAL_RCC_OscConfig+0xf78>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	e027      	b.n	8003570 <HAL_RCC_OscConfig+0xe7c>
 8003520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003524:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003528:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800352c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003532:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	fa93 f2a3 	rbit	r2, r3
 800353c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003540:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800354e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003558:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	fa93 f2a3 	rbit	r2, r3
 8003562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003566:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	4b3f      	ldr	r3, [pc, #252]	; (800366c <HAL_RCC_OscConfig+0xf78>)
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003574:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003578:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800357c:	6011      	str	r1, [r2, #0]
 800357e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003582:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003586:	6812      	ldr	r2, [r2, #0]
 8003588:	fa92 f1a2 	rbit	r1, r2
 800358c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003590:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003594:	6011      	str	r1, [r2, #0]
  return result;
 8003596:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800359a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800359e:	6812      	ldr	r2, [r2, #0]
 80035a0:	fab2 f282 	clz	r2, r2
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	f042 0220 	orr.w	r2, r2, #32
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	f002 021f 	and.w	r2, r2, #31
 80035b0:	2101      	movs	r1, #1
 80035b2:	fa01 f202 	lsl.w	r2, r1, r2
 80035b6:	4013      	ands	r3, r2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d082      	beq.n	80034c2 <HAL_RCC_OscConfig+0xdce>
 80035bc:	e0cf      	b.n	800375e <HAL_RCC_OscConfig+0x106a>
 80035be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80035c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	fa93 f2a3 	rbit	r2, r3
 80035da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035de:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80035e2:	601a      	str	r2, [r3, #0]
  return result;
 80035e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80035ec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ee:	fab3 f383 	clz	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	461a      	mov	r2, r3
 8003600:	2300      	movs	r3, #0
 8003602:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003604:	f7fe fb40 	bl	8001c88 <HAL_GetTick>
 8003608:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800360c:	e009      	b.n	8003622 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800360e:	f7fe fb3b 	bl	8001c88 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e09e      	b.n	8003760 <HAL_RCC_OscConfig+0x106c>
 8003622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003626:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800362a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800362e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003634:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	fa93 f2a3 	rbit	r2, r3
 800363e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003642:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003646:	601a      	str	r2, [r3, #0]
  return result;
 8003648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003650:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003652:	fab3 f383 	clz	r3, r3
 8003656:	b2db      	uxtb	r3, r3
 8003658:	095b      	lsrs	r3, r3, #5
 800365a:	b2db      	uxtb	r3, r3
 800365c:	f043 0301 	orr.w	r3, r3, #1
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b01      	cmp	r3, #1
 8003664:	d104      	bne.n	8003670 <HAL_RCC_OscConfig+0xf7c>
 8003666:	4b01      	ldr	r3, [pc, #4]	; (800366c <HAL_RCC_OscConfig+0xf78>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	e029      	b.n	80036c0 <HAL_RCC_OscConfig+0xfcc>
 800366c:	40021000 	.word	0x40021000
 8003670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003674:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003678:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800367c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003682:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	fa93 f2a3 	rbit	r2, r3
 800368c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003690:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800369e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	fa93 f2a3 	rbit	r2, r3
 80036b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	4b2b      	ldr	r3, [pc, #172]	; (800376c <HAL_RCC_OscConfig+0x1078>)
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036c4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80036c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036cc:	6011      	str	r1, [r2, #0]
 80036ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036d2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80036d6:	6812      	ldr	r2, [r2, #0]
 80036d8:	fa92 f1a2 	rbit	r1, r2
 80036dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036e0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80036e4:	6011      	str	r1, [r2, #0]
  return result;
 80036e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036ea:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80036ee:	6812      	ldr	r2, [r2, #0]
 80036f0:	fab2 f282 	clz	r2, r2
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	f042 0220 	orr.w	r2, r2, #32
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	f002 021f 	and.w	r2, r2, #31
 8003700:	2101      	movs	r1, #1
 8003702:	fa01 f202 	lsl.w	r2, r1, r2
 8003706:	4013      	ands	r3, r2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d180      	bne.n	800360e <HAL_RCC_OscConfig+0xf1a>
 800370c:	e027      	b.n	800375e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800370e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003712:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e01e      	b.n	8003760 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003722:	4b12      	ldr	r3, [pc, #72]	; (800376c <HAL_RCC_OscConfig+0x1078>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800372a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800372e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003736:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	429a      	cmp	r2, r3
 8003740:	d10b      	bne.n	800375a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003742:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003746:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800374a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003756:	429a      	cmp	r2, r3
 8003758:	d001      	beq.n	800375e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40021000 	.word	0x40021000

08003770 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b09e      	sub	sp, #120	; 0x78
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800377a:	2300      	movs	r3, #0
 800377c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e162      	b.n	8003a4e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003788:	4b90      	ldr	r3, [pc, #576]	; (80039cc <HAL_RCC_ClockConfig+0x25c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d910      	bls.n	80037b8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003796:	4b8d      	ldr	r3, [pc, #564]	; (80039cc <HAL_RCC_ClockConfig+0x25c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 0207 	bic.w	r2, r3, #7
 800379e:	498b      	ldr	r1, [pc, #556]	; (80039cc <HAL_RCC_ClockConfig+0x25c>)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a6:	4b89      	ldr	r3, [pc, #548]	; (80039cc <HAL_RCC_ClockConfig+0x25c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e14a      	b.n	8003a4e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d008      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037c4:	4b82      	ldr	r3, [pc, #520]	; (80039d0 <HAL_RCC_ClockConfig+0x260>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	497f      	ldr	r1, [pc, #508]	; (80039d0 <HAL_RCC_ClockConfig+0x260>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 80dc 	beq.w	800399c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d13c      	bne.n	8003866 <HAL_RCC_ClockConfig+0xf6>
 80037ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037f4:	fa93 f3a3 	rbit	r3, r3
 80037f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80037fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fc:	fab3 f383 	clz	r3, r3
 8003800:	b2db      	uxtb	r3, r3
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	b2db      	uxtb	r3, r3
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b01      	cmp	r3, #1
 800380e:	d102      	bne.n	8003816 <HAL_RCC_ClockConfig+0xa6>
 8003810:	4b6f      	ldr	r3, [pc, #444]	; (80039d0 <HAL_RCC_ClockConfig+0x260>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	e00f      	b.n	8003836 <HAL_RCC_ClockConfig+0xc6>
 8003816:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800381a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800381e:	fa93 f3a3 	rbit	r3, r3
 8003822:	667b      	str	r3, [r7, #100]	; 0x64
 8003824:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003828:	663b      	str	r3, [r7, #96]	; 0x60
 800382a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800382c:	fa93 f3a3 	rbit	r3, r3
 8003830:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003832:	4b67      	ldr	r3, [pc, #412]	; (80039d0 <HAL_RCC_ClockConfig+0x260>)
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800383a:	65ba      	str	r2, [r7, #88]	; 0x58
 800383c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800383e:	fa92 f2a2 	rbit	r2, r2
 8003842:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003844:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003846:	fab2 f282 	clz	r2, r2
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	f042 0220 	orr.w	r2, r2, #32
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	f002 021f 	and.w	r2, r2, #31
 8003856:	2101      	movs	r1, #1
 8003858:	fa01 f202 	lsl.w	r2, r1, r2
 800385c:	4013      	ands	r3, r2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d17b      	bne.n	800395a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e0f3      	b.n	8003a4e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b02      	cmp	r3, #2
 800386c:	d13c      	bne.n	80038e8 <HAL_RCC_ClockConfig+0x178>
 800386e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003872:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003876:	fa93 f3a3 	rbit	r3, r3
 800387a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800387c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800387e:	fab3 f383 	clz	r3, r3
 8003882:	b2db      	uxtb	r3, r3
 8003884:	095b      	lsrs	r3, r3, #5
 8003886:	b2db      	uxtb	r3, r3
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b01      	cmp	r3, #1
 8003890:	d102      	bne.n	8003898 <HAL_RCC_ClockConfig+0x128>
 8003892:	4b4f      	ldr	r3, [pc, #316]	; (80039d0 <HAL_RCC_ClockConfig+0x260>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	e00f      	b.n	80038b8 <HAL_RCC_ClockConfig+0x148>
 8003898:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800389c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a0:	fa93 f3a3 	rbit	r3, r3
 80038a4:	647b      	str	r3, [r7, #68]	; 0x44
 80038a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038aa:	643b      	str	r3, [r7, #64]	; 0x40
 80038ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ae:	fa93 f3a3 	rbit	r3, r3
 80038b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038b4:	4b46      	ldr	r3, [pc, #280]	; (80039d0 <HAL_RCC_ClockConfig+0x260>)
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038bc:	63ba      	str	r2, [r7, #56]	; 0x38
 80038be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038c0:	fa92 f2a2 	rbit	r2, r2
 80038c4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80038c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038c8:	fab2 f282 	clz	r2, r2
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	f042 0220 	orr.w	r2, r2, #32
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	f002 021f 	and.w	r2, r2, #31
 80038d8:	2101      	movs	r1, #1
 80038da:	fa01 f202 	lsl.w	r2, r1, r2
 80038de:	4013      	ands	r3, r2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d13a      	bne.n	800395a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0b2      	b.n	8003a4e <HAL_RCC_ClockConfig+0x2de>
 80038e8:	2302      	movs	r3, #2
 80038ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ee:	fa93 f3a3 	rbit	r3, r3
 80038f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f6:	fab3 f383 	clz	r3, r3
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	095b      	lsrs	r3, r3, #5
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b01      	cmp	r3, #1
 8003908:	d102      	bne.n	8003910 <HAL_RCC_ClockConfig+0x1a0>
 800390a:	4b31      	ldr	r3, [pc, #196]	; (80039d0 <HAL_RCC_ClockConfig+0x260>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	e00d      	b.n	800392c <HAL_RCC_ClockConfig+0x1bc>
 8003910:	2302      	movs	r3, #2
 8003912:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003916:	fa93 f3a3 	rbit	r3, r3
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
 800391c:	2302      	movs	r3, #2
 800391e:	623b      	str	r3, [r7, #32]
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	fa93 f3a3 	rbit	r3, r3
 8003926:	61fb      	str	r3, [r7, #28]
 8003928:	4b29      	ldr	r3, [pc, #164]	; (80039d0 <HAL_RCC_ClockConfig+0x260>)
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	2202      	movs	r2, #2
 800392e:	61ba      	str	r2, [r7, #24]
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	fa92 f2a2 	rbit	r2, r2
 8003936:	617a      	str	r2, [r7, #20]
  return result;
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	fab2 f282 	clz	r2, r2
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	f042 0220 	orr.w	r2, r2, #32
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	f002 021f 	and.w	r2, r2, #31
 800394a:	2101      	movs	r1, #1
 800394c:	fa01 f202 	lsl.w	r2, r1, r2
 8003950:	4013      	ands	r3, r2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e079      	b.n	8003a4e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800395a:	4b1d      	ldr	r3, [pc, #116]	; (80039d0 <HAL_RCC_ClockConfig+0x260>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f023 0203 	bic.w	r2, r3, #3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	491a      	ldr	r1, [pc, #104]	; (80039d0 <HAL_RCC_ClockConfig+0x260>)
 8003968:	4313      	orrs	r3, r2
 800396a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800396c:	f7fe f98c 	bl	8001c88 <HAL_GetTick>
 8003970:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003972:	e00a      	b.n	800398a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003974:	f7fe f988 	bl	8001c88 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e061      	b.n	8003a4e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398a:	4b11      	ldr	r3, [pc, #68]	; (80039d0 <HAL_RCC_ClockConfig+0x260>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f003 020c 	and.w	r2, r3, #12
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	429a      	cmp	r2, r3
 800399a:	d1eb      	bne.n	8003974 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <HAL_RCC_ClockConfig+0x25c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d214      	bcs.n	80039d4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039aa:	4b08      	ldr	r3, [pc, #32]	; (80039cc <HAL_RCC_ClockConfig+0x25c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f023 0207 	bic.w	r2, r3, #7
 80039b2:	4906      	ldr	r1, [pc, #24]	; (80039cc <HAL_RCC_ClockConfig+0x25c>)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ba:	4b04      	ldr	r3, [pc, #16]	; (80039cc <HAL_RCC_ClockConfig+0x25c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e040      	b.n	8003a4e <HAL_RCC_ClockConfig+0x2de>
 80039cc:	40022000 	.word	0x40022000
 80039d0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d008      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039e0:	4b1d      	ldr	r3, [pc, #116]	; (8003a58 <HAL_RCC_ClockConfig+0x2e8>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	491a      	ldr	r1, [pc, #104]	; (8003a58 <HAL_RCC_ClockConfig+0x2e8>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d009      	beq.n	8003a12 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039fe:	4b16      	ldr	r3, [pc, #88]	; (8003a58 <HAL_RCC_ClockConfig+0x2e8>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	4912      	ldr	r1, [pc, #72]	; (8003a58 <HAL_RCC_ClockConfig+0x2e8>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a12:	f000 f829 	bl	8003a68 <HAL_RCC_GetSysClockFreq>
 8003a16:	4601      	mov	r1, r0
 8003a18:	4b0f      	ldr	r3, [pc, #60]	; (8003a58 <HAL_RCC_ClockConfig+0x2e8>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a20:	22f0      	movs	r2, #240	; 0xf0
 8003a22:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	fa92 f2a2 	rbit	r2, r2
 8003a2a:	60fa      	str	r2, [r7, #12]
  return result;
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	fab2 f282 	clz	r2, r2
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	40d3      	lsrs	r3, r2
 8003a36:	4a09      	ldr	r2, [pc, #36]	; (8003a5c <HAL_RCC_ClockConfig+0x2ec>)
 8003a38:	5cd3      	ldrb	r3, [r2, r3]
 8003a3a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a3e:	4a08      	ldr	r2, [pc, #32]	; (8003a60 <HAL_RCC_ClockConfig+0x2f0>)
 8003a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a42:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <HAL_RCC_ClockConfig+0x2f4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fe f8da 	bl	8001c00 <HAL_InitTick>
  
  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3778      	adds	r7, #120	; 0x78
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	08009300 	.word	0x08009300
 8003a60:	20000090 	.word	0x20000090
 8003a64:	20000094 	.word	0x20000094

08003a68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b08b      	sub	sp, #44	; 0x2c
 8003a6c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61fb      	str	r3, [r7, #28]
 8003a72:	2300      	movs	r3, #0
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	2300      	movs	r3, #0
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a82:	4b29      	ldr	r3, [pc, #164]	; (8003b28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d002      	beq.n	8003a98 <HAL_RCC_GetSysClockFreq+0x30>
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d003      	beq.n	8003a9e <HAL_RCC_GetSysClockFreq+0x36>
 8003a96:	e03c      	b.n	8003b12 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a98:	4b24      	ldr	r3, [pc, #144]	; (8003b2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a9a:	623b      	str	r3, [r7, #32]
      break;
 8003a9c:	e03c      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003aa4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003aa8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	fa92 f2a2 	rbit	r2, r2
 8003ab0:	607a      	str	r2, [r7, #4]
  return result;
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	fab2 f282 	clz	r2, r2
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	40d3      	lsrs	r3, r2
 8003abc:	4a1c      	ldr	r2, [pc, #112]	; (8003b30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003abe:	5cd3      	ldrb	r3, [r2, r3]
 8003ac0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003ac2:	4b19      	ldr	r3, [pc, #100]	; (8003b28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	220f      	movs	r2, #15
 8003acc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	fa92 f2a2 	rbit	r2, r2
 8003ad4:	60fa      	str	r2, [r7, #12]
  return result;
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	fab2 f282 	clz	r2, r2
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	40d3      	lsrs	r3, r2
 8003ae0:	4a14      	ldr	r2, [pc, #80]	; (8003b34 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ae2:	5cd3      	ldrb	r3, [r2, r3]
 8003ae4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d008      	beq.n	8003b02 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003af0:	4a0e      	ldr	r2, [pc, #56]	; (8003b2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	fb02 f303 	mul.w	r3, r2, r3
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
 8003b00:	e004      	b.n	8003b0c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	4a0c      	ldr	r2, [pc, #48]	; (8003b38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	623b      	str	r3, [r7, #32]
      break;
 8003b10:	e002      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b12:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b14:	623b      	str	r3, [r7, #32]
      break;
 8003b16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b18:	6a3b      	ldr	r3, [r7, #32]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	372c      	adds	r7, #44	; 0x2c
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	007a1200 	.word	0x007a1200
 8003b30:	08009318 	.word	0x08009318
 8003b34:	08009328 	.word	0x08009328
 8003b38:	003d0900 	.word	0x003d0900

08003b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b40:	4b03      	ldr	r3, [pc, #12]	; (8003b50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b42:	681b      	ldr	r3, [r3, #0]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	20000090 	.word	0x20000090

08003b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003b5a:	f7ff ffef 	bl	8003b3c <HAL_RCC_GetHCLKFreq>
 8003b5e:	4601      	mov	r1, r0
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b68:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b6c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	fa92 f2a2 	rbit	r2, r2
 8003b74:	603a      	str	r2, [r7, #0]
  return result;
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	fab2 f282 	clz	r2, r2
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	40d3      	lsrs	r3, r2
 8003b80:	4a04      	ldr	r2, [pc, #16]	; (8003b94 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003b82:	5cd3      	ldrb	r3, [r2, r3]
 8003b84:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40021000 	.word	0x40021000
 8003b94:	08009310 	.word	0x08009310

08003b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003b9e:	f7ff ffcd 	bl	8003b3c <HAL_RCC_GetHCLKFreq>
 8003ba2:	4601      	mov	r1, r0
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003bac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003bb0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	fa92 f2a2 	rbit	r2, r2
 8003bb8:	603a      	str	r2, [r7, #0]
  return result;
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	fab2 f282 	clz	r2, r2
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	40d3      	lsrs	r3, r2
 8003bc4:	4a04      	ldr	r2, [pc, #16]	; (8003bd8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003bc6:	5cd3      	ldrb	r3, [r2, r3]
 8003bc8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	08009310 	.word	0x08009310

08003bdc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b092      	sub	sp, #72	; 0x48
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003bec:	2300      	movs	r3, #0
 8003bee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 80d4 	beq.w	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c00:	4b4e      	ldr	r3, [pc, #312]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10e      	bne.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c0c:	4b4b      	ldr	r3, [pc, #300]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	4a4a      	ldr	r2, [pc, #296]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c16:	61d3      	str	r3, [r2, #28]
 8003c18:	4b48      	ldr	r3, [pc, #288]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c24:	2301      	movs	r3, #1
 8003c26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c2a:	4b45      	ldr	r3, [pc, #276]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d118      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c36:	4b42      	ldr	r3, [pc, #264]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a41      	ldr	r2, [pc, #260]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c40:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c42:	f7fe f821 	bl	8001c88 <HAL_GetTick>
 8003c46:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c48:	e008      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c4a:	f7fe f81d 	bl	8001c88 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b64      	cmp	r3, #100	; 0x64
 8003c56:	d901      	bls.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e169      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5c:	4b38      	ldr	r3, [pc, #224]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f0      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c68:	4b34      	ldr	r3, [pc, #208]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c70:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 8084 	beq.w	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d07c      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c88:	4b2c      	ldr	r3, [pc, #176]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	fa93 f3a3 	rbit	r3, r3
 8003c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ca2:	fab3 f383 	clz	r3, r3
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4b26      	ldr	r3, [pc, #152]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cac:	4413      	add	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbe:	fa93 f3a3 	rbit	r3, r3
 8003cc2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cc6:	fab3 f383 	clz	r3, r3
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	461a      	mov	r2, r3
 8003cce:	4b1d      	ldr	r3, [pc, #116]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cda:	4a18      	ldr	r2, [pc, #96]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cde:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d04b      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cea:	f7fd ffcd 	bl	8001c88 <HAL_GetTick>
 8003cee:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf0:	e00a      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf2:	f7fd ffc9 	bl	8001c88 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e113      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0e:	fa93 f3a3 	rbit	r3, r3
 8003d12:	627b      	str	r3, [r7, #36]	; 0x24
 8003d14:	2302      	movs	r3, #2
 8003d16:	623b      	str	r3, [r7, #32]
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	fa93 f3a3 	rbit	r3, r3
 8003d1e:	61fb      	str	r3, [r7, #28]
  return result;
 8003d20:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d22:	fab3 f383 	clz	r3, r3
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	095b      	lsrs	r3, r3, #5
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	f043 0302 	orr.w	r3, r3, #2
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d108      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003d36:	4b01      	ldr	r3, [pc, #4]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	e00d      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	40007000 	.word	0x40007000
 8003d44:	10908100 	.word	0x10908100
 8003d48:	2302      	movs	r3, #2
 8003d4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	fa93 f3a3 	rbit	r3, r3
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	4b78      	ldr	r3, [pc, #480]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	2202      	movs	r2, #2
 8003d5a:	613a      	str	r2, [r7, #16]
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	fa92 f2a2 	rbit	r2, r2
 8003d62:	60fa      	str	r2, [r7, #12]
  return result;
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	fab2 f282 	clz	r2, r2
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d70:	b2d2      	uxtb	r2, r2
 8003d72:	f002 021f 	and.w	r2, r2, #31
 8003d76:	2101      	movs	r1, #1
 8003d78:	fa01 f202 	lsl.w	r2, r1, r2
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0b7      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d82:	4b6d      	ldr	r3, [pc, #436]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	496a      	ldr	r1, [pc, #424]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d105      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d9c:	4b66      	ldr	r3, [pc, #408]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	4a65      	ldr	r2, [pc, #404]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003da2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003da6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003db4:	4b60      	ldr	r3, [pc, #384]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db8:	f023 0203 	bic.w	r2, r3, #3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	495d      	ldr	r1, [pc, #372]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d008      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dd2:	4b59      	ldr	r3, [pc, #356]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	4956      	ldr	r1, [pc, #344]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003df0:	4b51      	ldr	r3, [pc, #324]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	494e      	ldr	r1, [pc, #312]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0320 	and.w	r3, r3, #32
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d008      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e0e:	4b4a      	ldr	r3, [pc, #296]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	f023 0210 	bic.w	r2, r3, #16
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	4947      	ldr	r1, [pc, #284]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003e2c:	4b42      	ldr	r3, [pc, #264]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e38:	493f      	ldr	r1, [pc, #252]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d008      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e4a:	4b3b      	ldr	r3, [pc, #236]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	f023 0220 	bic.w	r2, r3, #32
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	4938      	ldr	r1, [pc, #224]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d008      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e68:	4b33      	ldr	r3, [pc, #204]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	4930      	ldr	r1, [pc, #192]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0310 	and.w	r3, r3, #16
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d008      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e86:	4b2c      	ldr	r3, [pc, #176]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	4929      	ldr	r1, [pc, #164]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ea4:	4b24      	ldr	r3, [pc, #144]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb0:	4921      	ldr	r1, [pc, #132]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d008      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ec2:	4b1d      	ldr	r3, [pc, #116]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	491a      	ldr	r1, [pc, #104]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d008      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003ee0:	4b15      	ldr	r3, [pc, #84]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eec:	4912      	ldr	r1, [pc, #72]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d008      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003efe:	4b0e      	ldr	r3, [pc, #56]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	490b      	ldr	r1, [pc, #44]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d008      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003f1c:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f28:	4903      	ldr	r1, [pc, #12]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3748      	adds	r7, #72	; 0x48
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40021000 	.word	0x40021000

08003f3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e09d      	b.n	800408a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d108      	bne.n	8003f68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f5e:	d009      	beq.n	8003f74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	61da      	str	r2, [r3, #28]
 8003f66:	e005      	b.n	8003f74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d106      	bne.n	8003f94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7fd fade 	bl	8001550 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003faa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fb4:	d902      	bls.n	8003fbc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	e002      	b.n	8003fc2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fc0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003fca:	d007      	beq.n	8003fdc <HAL_SPI_Init+0xa0>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fd4:	d002      	beq.n	8003fdc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401e:	ea42 0103 	orr.w	r1, r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004026:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	0c1b      	lsrs	r3, r3, #16
 8004038:	f003 0204 	and.w	r2, r3, #4
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	f003 0310 	and.w	r3, r3, #16
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004058:	ea42 0103 	orr.w	r1, r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	69da      	ldr	r2, [r3, #28]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004078:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e049      	b.n	8004138 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d106      	bne.n	80040be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7fd fa8b 	bl	80015d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2202      	movs	r2, #2
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3304      	adds	r3, #4
 80040ce:	4619      	mov	r1, r3
 80040d0:	4610      	mov	r0, r2
 80040d2:	f000 fd27 	bl	8004b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b01      	cmp	r3, #1
 8004152:	d001      	beq.n	8004158 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e04a      	b.n	80041ee <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a21      	ldr	r2, [pc, #132]	; (80041fc <HAL_TIM_Base_Start_IT+0xbc>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d018      	beq.n	80041ac <HAL_TIM_Base_Start_IT+0x6c>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004182:	d013      	beq.n	80041ac <HAL_TIM_Base_Start_IT+0x6c>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a1d      	ldr	r2, [pc, #116]	; (8004200 <HAL_TIM_Base_Start_IT+0xc0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d00e      	beq.n	80041ac <HAL_TIM_Base_Start_IT+0x6c>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a1c      	ldr	r2, [pc, #112]	; (8004204 <HAL_TIM_Base_Start_IT+0xc4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d009      	beq.n	80041ac <HAL_TIM_Base_Start_IT+0x6c>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a1a      	ldr	r2, [pc, #104]	; (8004208 <HAL_TIM_Base_Start_IT+0xc8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d004      	beq.n	80041ac <HAL_TIM_Base_Start_IT+0x6c>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a19      	ldr	r2, [pc, #100]	; (800420c <HAL_TIM_Base_Start_IT+0xcc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d115      	bne.n	80041d8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	4b17      	ldr	r3, [pc, #92]	; (8004210 <HAL_TIM_Base_Start_IT+0xd0>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2b06      	cmp	r3, #6
 80041bc:	d015      	beq.n	80041ea <HAL_TIM_Base_Start_IT+0xaa>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c4:	d011      	beq.n	80041ea <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f042 0201 	orr.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d6:	e008      	b.n	80041ea <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0201 	orr.w	r2, r2, #1
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	e000      	b.n	80041ec <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40012c00 	.word	0x40012c00
 8004200:	40000400 	.word	0x40000400
 8004204:	40000800 	.word	0x40000800
 8004208:	40013400 	.word	0x40013400
 800420c:	40014000 	.word	0x40014000
 8004210:	00010007 	.word	0x00010007

08004214 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e049      	b.n	80042ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f841 	bl	80042c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3304      	adds	r3, #4
 8004250:	4619      	mov	r1, r3
 8004252:	4610      	mov	r0, r2
 8004254:	f000 fc66 	bl	8004b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
	...

080042d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d109      	bne.n	80042fc <HAL_TIM_PWM_Start+0x24>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	bf14      	ite	ne
 80042f4:	2301      	movne	r3, #1
 80042f6:	2300      	moveq	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	e03c      	b.n	8004376 <HAL_TIM_PWM_Start+0x9e>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d109      	bne.n	8004316 <HAL_TIM_PWM_Start+0x3e>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b01      	cmp	r3, #1
 800430c:	bf14      	ite	ne
 800430e:	2301      	movne	r3, #1
 8004310:	2300      	moveq	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	e02f      	b.n	8004376 <HAL_TIM_PWM_Start+0x9e>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b08      	cmp	r3, #8
 800431a:	d109      	bne.n	8004330 <HAL_TIM_PWM_Start+0x58>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b01      	cmp	r3, #1
 8004326:	bf14      	ite	ne
 8004328:	2301      	movne	r3, #1
 800432a:	2300      	moveq	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	e022      	b.n	8004376 <HAL_TIM_PWM_Start+0x9e>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2b0c      	cmp	r3, #12
 8004334:	d109      	bne.n	800434a <HAL_TIM_PWM_Start+0x72>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b01      	cmp	r3, #1
 8004340:	bf14      	ite	ne
 8004342:	2301      	movne	r3, #1
 8004344:	2300      	moveq	r3, #0
 8004346:	b2db      	uxtb	r3, r3
 8004348:	e015      	b.n	8004376 <HAL_TIM_PWM_Start+0x9e>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b10      	cmp	r3, #16
 800434e:	d109      	bne.n	8004364 <HAL_TIM_PWM_Start+0x8c>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b01      	cmp	r3, #1
 800435a:	bf14      	ite	ne
 800435c:	2301      	movne	r3, #1
 800435e:	2300      	moveq	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	e008      	b.n	8004376 <HAL_TIM_PWM_Start+0x9e>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b01      	cmp	r3, #1
 800436e:	bf14      	ite	ne
 8004370:	2301      	movne	r3, #1
 8004372:	2300      	moveq	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e097      	b.n	80044ae <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d104      	bne.n	800438e <HAL_TIM_PWM_Start+0xb6>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800438c:	e023      	b.n	80043d6 <HAL_TIM_PWM_Start+0xfe>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b04      	cmp	r3, #4
 8004392:	d104      	bne.n	800439e <HAL_TIM_PWM_Start+0xc6>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800439c:	e01b      	b.n	80043d6 <HAL_TIM_PWM_Start+0xfe>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d104      	bne.n	80043ae <HAL_TIM_PWM_Start+0xd6>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043ac:	e013      	b.n	80043d6 <HAL_TIM_PWM_Start+0xfe>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b0c      	cmp	r3, #12
 80043b2:	d104      	bne.n	80043be <HAL_TIM_PWM_Start+0xe6>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043bc:	e00b      	b.n	80043d6 <HAL_TIM_PWM_Start+0xfe>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b10      	cmp	r3, #16
 80043c2:	d104      	bne.n	80043ce <HAL_TIM_PWM_Start+0xf6>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043cc:	e003      	b.n	80043d6 <HAL_TIM_PWM_Start+0xfe>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2202      	movs	r2, #2
 80043d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2201      	movs	r2, #1
 80043dc:	6839      	ldr	r1, [r7, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 ffa0 	bl	8005324 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a33      	ldr	r2, [pc, #204]	; (80044b8 <HAL_TIM_PWM_Start+0x1e0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d013      	beq.n	8004416 <HAL_TIM_PWM_Start+0x13e>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a32      	ldr	r2, [pc, #200]	; (80044bc <HAL_TIM_PWM_Start+0x1e4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00e      	beq.n	8004416 <HAL_TIM_PWM_Start+0x13e>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a30      	ldr	r2, [pc, #192]	; (80044c0 <HAL_TIM_PWM_Start+0x1e8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d009      	beq.n	8004416 <HAL_TIM_PWM_Start+0x13e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a2f      	ldr	r2, [pc, #188]	; (80044c4 <HAL_TIM_PWM_Start+0x1ec>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d004      	beq.n	8004416 <HAL_TIM_PWM_Start+0x13e>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a2d      	ldr	r2, [pc, #180]	; (80044c8 <HAL_TIM_PWM_Start+0x1f0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d101      	bne.n	800441a <HAL_TIM_PWM_Start+0x142>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <HAL_TIM_PWM_Start+0x144>
 800441a:	2300      	movs	r3, #0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d007      	beq.n	8004430 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800442e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a20      	ldr	r2, [pc, #128]	; (80044b8 <HAL_TIM_PWM_Start+0x1e0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d018      	beq.n	800446c <HAL_TIM_PWM_Start+0x194>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004442:	d013      	beq.n	800446c <HAL_TIM_PWM_Start+0x194>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a20      	ldr	r2, [pc, #128]	; (80044cc <HAL_TIM_PWM_Start+0x1f4>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d00e      	beq.n	800446c <HAL_TIM_PWM_Start+0x194>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a1f      	ldr	r2, [pc, #124]	; (80044d0 <HAL_TIM_PWM_Start+0x1f8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d009      	beq.n	800446c <HAL_TIM_PWM_Start+0x194>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a17      	ldr	r2, [pc, #92]	; (80044bc <HAL_TIM_PWM_Start+0x1e4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d004      	beq.n	800446c <HAL_TIM_PWM_Start+0x194>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a16      	ldr	r2, [pc, #88]	; (80044c0 <HAL_TIM_PWM_Start+0x1e8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d115      	bne.n	8004498 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	4b18      	ldr	r3, [pc, #96]	; (80044d4 <HAL_TIM_PWM_Start+0x1fc>)
 8004474:	4013      	ands	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b06      	cmp	r3, #6
 800447c:	d015      	beq.n	80044aa <HAL_TIM_PWM_Start+0x1d2>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004484:	d011      	beq.n	80044aa <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 0201 	orr.w	r2, r2, #1
 8004494:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004496:	e008      	b.n	80044aa <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	e000      	b.n	80044ac <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40012c00 	.word	0x40012c00
 80044bc:	40013400 	.word	0x40013400
 80044c0:	40014000 	.word	0x40014000
 80044c4:	40014400 	.word	0x40014400
 80044c8:	40014800 	.word	0x40014800
 80044cc:	40000400 	.word	0x40000400
 80044d0:	40000800 	.word	0x40000800
 80044d4:	00010007 	.word	0x00010007

080044d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d122      	bne.n	8004534 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d11b      	bne.n	8004534 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f06f 0202 	mvn.w	r2, #2
 8004504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fae3 	bl	8004ae6 <HAL_TIM_IC_CaptureCallback>
 8004520:	e005      	b.n	800452e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fad5 	bl	8004ad2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fae6 	bl	8004afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	2b04      	cmp	r3, #4
 8004540:	d122      	bne.n	8004588 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b04      	cmp	r3, #4
 800454e:	d11b      	bne.n	8004588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f06f 0204 	mvn.w	r2, #4
 8004558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2202      	movs	r2, #2
 800455e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fab9 	bl	8004ae6 <HAL_TIM_IC_CaptureCallback>
 8004574:	e005      	b.n	8004582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 faab 	bl	8004ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fabc 	bl	8004afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b08      	cmp	r3, #8
 8004594:	d122      	bne.n	80045dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f003 0308 	and.w	r3, r3, #8
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d11b      	bne.n	80045dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f06f 0208 	mvn.w	r2, #8
 80045ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2204      	movs	r2, #4
 80045b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fa8f 	bl	8004ae6 <HAL_TIM_IC_CaptureCallback>
 80045c8:	e005      	b.n	80045d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fa81 	bl	8004ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 fa92 	bl	8004afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0310 	and.w	r3, r3, #16
 80045e6:	2b10      	cmp	r3, #16
 80045e8:	d122      	bne.n	8004630 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0310 	and.w	r3, r3, #16
 80045f4:	2b10      	cmp	r3, #16
 80045f6:	d11b      	bne.n	8004630 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0210 	mvn.w	r2, #16
 8004600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2208      	movs	r2, #8
 8004606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fa65 	bl	8004ae6 <HAL_TIM_IC_CaptureCallback>
 800461c:	e005      	b.n	800462a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fa57 	bl	8004ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 fa68 	bl	8004afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b01      	cmp	r3, #1
 800463c:	d10e      	bne.n	800465c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b01      	cmp	r3, #1
 800464a:	d107      	bne.n	800465c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0201 	mvn.w	r2, #1
 8004654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fc fe96 	bl	8001388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004666:	2b80      	cmp	r3, #128	; 0x80
 8004668:	d10e      	bne.n	8004688 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004674:	2b80      	cmp	r3, #128	; 0x80
 8004676:	d107      	bne.n	8004688 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fefe 	bl	8005484 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004696:	d10e      	bne.n	80046b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a2:	2b80      	cmp	r3, #128	; 0x80
 80046a4:	d107      	bne.n	80046b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 fef1 	bl	8005498 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	d10e      	bne.n	80046e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ce:	2b40      	cmp	r3, #64	; 0x40
 80046d0:	d107      	bne.n	80046e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 fa16 	bl	8004b0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b20      	cmp	r3, #32
 80046ee:	d10e      	bne.n	800470e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b20      	cmp	r3, #32
 80046fc:	d107      	bne.n	800470e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f06f 0220 	mvn.w	r2, #32
 8004706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 feb1 	bl	8005470 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800470e:	bf00      	nop
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800472e:	2b01      	cmp	r3, #1
 8004730:	d101      	bne.n	8004736 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004732:	2302      	movs	r3, #2
 8004734:	e0ff      	b.n	8004936 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b14      	cmp	r3, #20
 8004742:	f200 80f0 	bhi.w	8004926 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004746:	a201      	add	r2, pc, #4	; (adr r2, 800474c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474c:	080047a1 	.word	0x080047a1
 8004750:	08004927 	.word	0x08004927
 8004754:	08004927 	.word	0x08004927
 8004758:	08004927 	.word	0x08004927
 800475c:	080047e1 	.word	0x080047e1
 8004760:	08004927 	.word	0x08004927
 8004764:	08004927 	.word	0x08004927
 8004768:	08004927 	.word	0x08004927
 800476c:	08004823 	.word	0x08004823
 8004770:	08004927 	.word	0x08004927
 8004774:	08004927 	.word	0x08004927
 8004778:	08004927 	.word	0x08004927
 800477c:	08004863 	.word	0x08004863
 8004780:	08004927 	.word	0x08004927
 8004784:	08004927 	.word	0x08004927
 8004788:	08004927 	.word	0x08004927
 800478c:	080048a5 	.word	0x080048a5
 8004790:	08004927 	.word	0x08004927
 8004794:	08004927 	.word	0x08004927
 8004798:	08004927 	.word	0x08004927
 800479c:	080048e5 	.word	0x080048e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68b9      	ldr	r1, [r7, #8]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fa4c 	bl	8004c44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699a      	ldr	r2, [r3, #24]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0208 	orr.w	r2, r2, #8
 80047ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	699a      	ldr	r2, [r3, #24]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0204 	bic.w	r2, r2, #4
 80047ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6999      	ldr	r1, [r3, #24]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	691a      	ldr	r2, [r3, #16]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	619a      	str	r2, [r3, #24]
      break;
 80047de:	e0a5      	b.n	800492c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68b9      	ldr	r1, [r7, #8]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fabc 	bl	8004d64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699a      	ldr	r2, [r3, #24]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699a      	ldr	r2, [r3, #24]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800480a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6999      	ldr	r1, [r3, #24]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	021a      	lsls	r2, r3, #8
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	619a      	str	r2, [r3, #24]
      break;
 8004820:	e084      	b.n	800492c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68b9      	ldr	r1, [r7, #8]
 8004828:	4618      	mov	r0, r3
 800482a:	f000 fb25 	bl	8004e78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69da      	ldr	r2, [r3, #28]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f042 0208 	orr.w	r2, r2, #8
 800483c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	69da      	ldr	r2, [r3, #28]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0204 	bic.w	r2, r2, #4
 800484c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69d9      	ldr	r1, [r3, #28]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	691a      	ldr	r2, [r3, #16]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	61da      	str	r2, [r3, #28]
      break;
 8004860:	e064      	b.n	800492c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68b9      	ldr	r1, [r7, #8]
 8004868:	4618      	mov	r0, r3
 800486a:	f000 fb8d 	bl	8004f88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69da      	ldr	r2, [r3, #28]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800487c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69da      	ldr	r2, [r3, #28]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800488c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69d9      	ldr	r1, [r3, #28]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	021a      	lsls	r2, r3, #8
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	61da      	str	r2, [r3, #28]
      break;
 80048a2:	e043      	b.n	800492c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68b9      	ldr	r1, [r7, #8]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fbd6 	bl	800505c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0208 	orr.w	r2, r2, #8
 80048be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0204 	bic.w	r2, r2, #4
 80048ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	691a      	ldr	r2, [r3, #16]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80048e2:	e023      	b.n	800492c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68b9      	ldr	r1, [r7, #8]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fc1a 	bl	8005124 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800490e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	021a      	lsls	r2, r3, #8
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004924:	e002      	b.n	800492c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	75fb      	strb	r3, [r7, #23]
      break;
 800492a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004934:	7dfb      	ldrb	r3, [r7, #23]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop

08004940 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004954:	2b01      	cmp	r3, #1
 8004956:	d101      	bne.n	800495c <HAL_TIM_ConfigClockSource+0x1c>
 8004958:	2302      	movs	r3, #2
 800495a:	e0b6      	b.n	8004aca <HAL_TIM_ConfigClockSource+0x18a>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800497a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800497e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004986:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004998:	d03e      	beq.n	8004a18 <HAL_TIM_ConfigClockSource+0xd8>
 800499a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800499e:	f200 8087 	bhi.w	8004ab0 <HAL_TIM_ConfigClockSource+0x170>
 80049a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a6:	f000 8086 	beq.w	8004ab6 <HAL_TIM_ConfigClockSource+0x176>
 80049aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ae:	d87f      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x170>
 80049b0:	2b70      	cmp	r3, #112	; 0x70
 80049b2:	d01a      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0xaa>
 80049b4:	2b70      	cmp	r3, #112	; 0x70
 80049b6:	d87b      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x170>
 80049b8:	2b60      	cmp	r3, #96	; 0x60
 80049ba:	d050      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0x11e>
 80049bc:	2b60      	cmp	r3, #96	; 0x60
 80049be:	d877      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x170>
 80049c0:	2b50      	cmp	r3, #80	; 0x50
 80049c2:	d03c      	beq.n	8004a3e <HAL_TIM_ConfigClockSource+0xfe>
 80049c4:	2b50      	cmp	r3, #80	; 0x50
 80049c6:	d873      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x170>
 80049c8:	2b40      	cmp	r3, #64	; 0x40
 80049ca:	d058      	beq.n	8004a7e <HAL_TIM_ConfigClockSource+0x13e>
 80049cc:	2b40      	cmp	r3, #64	; 0x40
 80049ce:	d86f      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x170>
 80049d0:	2b30      	cmp	r3, #48	; 0x30
 80049d2:	d064      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x15e>
 80049d4:	2b30      	cmp	r3, #48	; 0x30
 80049d6:	d86b      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x170>
 80049d8:	2b20      	cmp	r3, #32
 80049da:	d060      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x15e>
 80049dc:	2b20      	cmp	r3, #32
 80049de:	d867      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x170>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d05c      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x15e>
 80049e4:	2b10      	cmp	r3, #16
 80049e6:	d05a      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x15e>
 80049e8:	e062      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	6899      	ldr	r1, [r3, #8]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f000 fc73 	bl	80052e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	609a      	str	r2, [r3, #8]
      break;
 8004a16:	e04f      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6818      	ldr	r0, [r3, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	6899      	ldr	r1, [r3, #8]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f000 fc5c 	bl	80052e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a3a:	609a      	str	r2, [r3, #8]
      break;
 8004a3c:	e03c      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6818      	ldr	r0, [r3, #0]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	6859      	ldr	r1, [r3, #4]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f000 fbd0 	bl	80051f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2150      	movs	r1, #80	; 0x50
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fc29 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004a5c:	e02c      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6818      	ldr	r0, [r3, #0]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6859      	ldr	r1, [r3, #4]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f000 fbef 	bl	800524e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2160      	movs	r1, #96	; 0x60
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fc19 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004a7c:	e01c      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6818      	ldr	r0, [r3, #0]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	6859      	ldr	r1, [r3, #4]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	f000 fbb0 	bl	80051f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2140      	movs	r1, #64	; 0x40
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fc09 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004a9c:	e00c      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	f000 fc00 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004aae:	e003      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ab4:	e000      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004ab6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
	...

08004b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a3c      	ldr	r2, [pc, #240]	; (8004c28 <TIM_Base_SetConfig+0x104>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00f      	beq.n	8004b5c <TIM_Base_SetConfig+0x38>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b42:	d00b      	beq.n	8004b5c <TIM_Base_SetConfig+0x38>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a39      	ldr	r2, [pc, #228]	; (8004c2c <TIM_Base_SetConfig+0x108>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d007      	beq.n	8004b5c <TIM_Base_SetConfig+0x38>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a38      	ldr	r2, [pc, #224]	; (8004c30 <TIM_Base_SetConfig+0x10c>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d003      	beq.n	8004b5c <TIM_Base_SetConfig+0x38>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a37      	ldr	r2, [pc, #220]	; (8004c34 <TIM_Base_SetConfig+0x110>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d108      	bne.n	8004b6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a2d      	ldr	r2, [pc, #180]	; (8004c28 <TIM_Base_SetConfig+0x104>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d01b      	beq.n	8004bae <TIM_Base_SetConfig+0x8a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7c:	d017      	beq.n	8004bae <TIM_Base_SetConfig+0x8a>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a2a      	ldr	r2, [pc, #168]	; (8004c2c <TIM_Base_SetConfig+0x108>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d013      	beq.n	8004bae <TIM_Base_SetConfig+0x8a>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a29      	ldr	r2, [pc, #164]	; (8004c30 <TIM_Base_SetConfig+0x10c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00f      	beq.n	8004bae <TIM_Base_SetConfig+0x8a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a28      	ldr	r2, [pc, #160]	; (8004c34 <TIM_Base_SetConfig+0x110>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00b      	beq.n	8004bae <TIM_Base_SetConfig+0x8a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a27      	ldr	r2, [pc, #156]	; (8004c38 <TIM_Base_SetConfig+0x114>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d007      	beq.n	8004bae <TIM_Base_SetConfig+0x8a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a26      	ldr	r2, [pc, #152]	; (8004c3c <TIM_Base_SetConfig+0x118>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d003      	beq.n	8004bae <TIM_Base_SetConfig+0x8a>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a25      	ldr	r2, [pc, #148]	; (8004c40 <TIM_Base_SetConfig+0x11c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d108      	bne.n	8004bc0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a10      	ldr	r2, [pc, #64]	; (8004c28 <TIM_Base_SetConfig+0x104>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00f      	beq.n	8004c0c <TIM_Base_SetConfig+0xe8>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a11      	ldr	r2, [pc, #68]	; (8004c34 <TIM_Base_SetConfig+0x110>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00b      	beq.n	8004c0c <TIM_Base_SetConfig+0xe8>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a10      	ldr	r2, [pc, #64]	; (8004c38 <TIM_Base_SetConfig+0x114>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d007      	beq.n	8004c0c <TIM_Base_SetConfig+0xe8>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a0f      	ldr	r2, [pc, #60]	; (8004c3c <TIM_Base_SetConfig+0x118>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d003      	beq.n	8004c0c <TIM_Base_SetConfig+0xe8>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a0e      	ldr	r2, [pc, #56]	; (8004c40 <TIM_Base_SetConfig+0x11c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d103      	bne.n	8004c14 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	691a      	ldr	r2, [r3, #16]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	615a      	str	r2, [r3, #20]
}
 8004c1a:	bf00      	nop
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40012c00 	.word	0x40012c00
 8004c2c:	40000400 	.word	0x40000400
 8004c30:	40000800 	.word	0x40000800
 8004c34:	40013400 	.word	0x40013400
 8004c38:	40014000 	.word	0x40014000
 8004c3c:	40014400 	.word	0x40014400
 8004c40:	40014800 	.word	0x40014800

08004c44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	f023 0201 	bic.w	r2, r3, #1
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f023 0303 	bic.w	r3, r3, #3
 8004c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f023 0302 	bic.w	r3, r3, #2
 8004c90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a2c      	ldr	r2, [pc, #176]	; (8004d50 <TIM_OC1_SetConfig+0x10c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00f      	beq.n	8004cc4 <TIM_OC1_SetConfig+0x80>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a2b      	ldr	r2, [pc, #172]	; (8004d54 <TIM_OC1_SetConfig+0x110>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00b      	beq.n	8004cc4 <TIM_OC1_SetConfig+0x80>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a2a      	ldr	r2, [pc, #168]	; (8004d58 <TIM_OC1_SetConfig+0x114>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d007      	beq.n	8004cc4 <TIM_OC1_SetConfig+0x80>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a29      	ldr	r2, [pc, #164]	; (8004d5c <TIM_OC1_SetConfig+0x118>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d003      	beq.n	8004cc4 <TIM_OC1_SetConfig+0x80>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a28      	ldr	r2, [pc, #160]	; (8004d60 <TIM_OC1_SetConfig+0x11c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d10c      	bne.n	8004cde <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f023 0308 	bic.w	r3, r3, #8
 8004cca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f023 0304 	bic.w	r3, r3, #4
 8004cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a1b      	ldr	r2, [pc, #108]	; (8004d50 <TIM_OC1_SetConfig+0x10c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d00f      	beq.n	8004d06 <TIM_OC1_SetConfig+0xc2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a1a      	ldr	r2, [pc, #104]	; (8004d54 <TIM_OC1_SetConfig+0x110>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00b      	beq.n	8004d06 <TIM_OC1_SetConfig+0xc2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a19      	ldr	r2, [pc, #100]	; (8004d58 <TIM_OC1_SetConfig+0x114>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d007      	beq.n	8004d06 <TIM_OC1_SetConfig+0xc2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a18      	ldr	r2, [pc, #96]	; (8004d5c <TIM_OC1_SetConfig+0x118>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d003      	beq.n	8004d06 <TIM_OC1_SetConfig+0xc2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a17      	ldr	r2, [pc, #92]	; (8004d60 <TIM_OC1_SetConfig+0x11c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d111      	bne.n	8004d2a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	621a      	str	r2, [r3, #32]
}
 8004d44:	bf00      	nop
 8004d46:	371c      	adds	r7, #28
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	40012c00 	.word	0x40012c00
 8004d54:	40013400 	.word	0x40013400
 8004d58:	40014000 	.word	0x40014000
 8004d5c:	40014400 	.word	0x40014400
 8004d60:	40014800 	.word	0x40014800

08004d64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	f023 0210 	bic.w	r2, r3, #16
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	021b      	lsls	r3, r3, #8
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f023 0320 	bic.w	r3, r3, #32
 8004db2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a28      	ldr	r2, [pc, #160]	; (8004e64 <TIM_OC2_SetConfig+0x100>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d003      	beq.n	8004dd0 <TIM_OC2_SetConfig+0x6c>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a27      	ldr	r2, [pc, #156]	; (8004e68 <TIM_OC2_SetConfig+0x104>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d10d      	bne.n	8004dec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	011b      	lsls	r3, r3, #4
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a1d      	ldr	r2, [pc, #116]	; (8004e64 <TIM_OC2_SetConfig+0x100>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00f      	beq.n	8004e14 <TIM_OC2_SetConfig+0xb0>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a1c      	ldr	r2, [pc, #112]	; (8004e68 <TIM_OC2_SetConfig+0x104>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d00b      	beq.n	8004e14 <TIM_OC2_SetConfig+0xb0>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a1b      	ldr	r2, [pc, #108]	; (8004e6c <TIM_OC2_SetConfig+0x108>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d007      	beq.n	8004e14 <TIM_OC2_SetConfig+0xb0>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a1a      	ldr	r2, [pc, #104]	; (8004e70 <TIM_OC2_SetConfig+0x10c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d003      	beq.n	8004e14 <TIM_OC2_SetConfig+0xb0>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a19      	ldr	r2, [pc, #100]	; (8004e74 <TIM_OC2_SetConfig+0x110>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d113      	bne.n	8004e3c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e1a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e22:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	621a      	str	r2, [r3, #32]
}
 8004e56:	bf00      	nop
 8004e58:	371c      	adds	r7, #28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40012c00 	.word	0x40012c00
 8004e68:	40013400 	.word	0x40013400
 8004e6c:	40014000 	.word	0x40014000
 8004e70:	40014400 	.word	0x40014400
 8004e74:	40014800 	.word	0x40014800

08004e78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0303 	bic.w	r3, r3, #3
 8004eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ec4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	021b      	lsls	r3, r3, #8
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a27      	ldr	r2, [pc, #156]	; (8004f74 <TIM_OC3_SetConfig+0xfc>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d003      	beq.n	8004ee2 <TIM_OC3_SetConfig+0x6a>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a26      	ldr	r2, [pc, #152]	; (8004f78 <TIM_OC3_SetConfig+0x100>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d10d      	bne.n	8004efe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ee8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	021b      	lsls	r3, r3, #8
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004efc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a1c      	ldr	r2, [pc, #112]	; (8004f74 <TIM_OC3_SetConfig+0xfc>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00f      	beq.n	8004f26 <TIM_OC3_SetConfig+0xae>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a1b      	ldr	r2, [pc, #108]	; (8004f78 <TIM_OC3_SetConfig+0x100>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d00b      	beq.n	8004f26 <TIM_OC3_SetConfig+0xae>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a1a      	ldr	r2, [pc, #104]	; (8004f7c <TIM_OC3_SetConfig+0x104>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d007      	beq.n	8004f26 <TIM_OC3_SetConfig+0xae>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a19      	ldr	r2, [pc, #100]	; (8004f80 <TIM_OC3_SetConfig+0x108>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d003      	beq.n	8004f26 <TIM_OC3_SetConfig+0xae>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a18      	ldr	r2, [pc, #96]	; (8004f84 <TIM_OC3_SetConfig+0x10c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d113      	bne.n	8004f4e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	621a      	str	r2, [r3, #32]
}
 8004f68:	bf00      	nop
 8004f6a:	371c      	adds	r7, #28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	40012c00 	.word	0x40012c00
 8004f78:	40013400 	.word	0x40013400
 8004f7c:	40014000 	.word	0x40014000
 8004f80:	40014400 	.word	0x40014400
 8004f84:	40014800 	.word	0x40014800

08004f88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	021b      	lsls	r3, r3, #8
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	031b      	lsls	r3, r3, #12
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a18      	ldr	r2, [pc, #96]	; (8005048 <TIM_OC4_SetConfig+0xc0>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d00f      	beq.n	800500c <TIM_OC4_SetConfig+0x84>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a17      	ldr	r2, [pc, #92]	; (800504c <TIM_OC4_SetConfig+0xc4>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d00b      	beq.n	800500c <TIM_OC4_SetConfig+0x84>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a16      	ldr	r2, [pc, #88]	; (8005050 <TIM_OC4_SetConfig+0xc8>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d007      	beq.n	800500c <TIM_OC4_SetConfig+0x84>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a15      	ldr	r2, [pc, #84]	; (8005054 <TIM_OC4_SetConfig+0xcc>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d003      	beq.n	800500c <TIM_OC4_SetConfig+0x84>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a14      	ldr	r2, [pc, #80]	; (8005058 <TIM_OC4_SetConfig+0xd0>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d109      	bne.n	8005020 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005012:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	019b      	lsls	r3, r3, #6
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	4313      	orrs	r3, r2
 800501e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	621a      	str	r2, [r3, #32]
}
 800503a:	bf00      	nop
 800503c:	371c      	adds	r7, #28
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	40012c00 	.word	0x40012c00
 800504c:	40013400 	.word	0x40013400
 8005050:	40014000 	.word	0x40014000
 8005054:	40014400 	.word	0x40014400
 8005058:	40014800 	.word	0x40014800

0800505c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800505c:	b480      	push	{r7}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800508a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80050a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	041b      	lsls	r3, r3, #16
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a17      	ldr	r2, [pc, #92]	; (8005110 <TIM_OC5_SetConfig+0xb4>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d00f      	beq.n	80050d6 <TIM_OC5_SetConfig+0x7a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a16      	ldr	r2, [pc, #88]	; (8005114 <TIM_OC5_SetConfig+0xb8>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d00b      	beq.n	80050d6 <TIM_OC5_SetConfig+0x7a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a15      	ldr	r2, [pc, #84]	; (8005118 <TIM_OC5_SetConfig+0xbc>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d007      	beq.n	80050d6 <TIM_OC5_SetConfig+0x7a>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a14      	ldr	r2, [pc, #80]	; (800511c <TIM_OC5_SetConfig+0xc0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d003      	beq.n	80050d6 <TIM_OC5_SetConfig+0x7a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a13      	ldr	r2, [pc, #76]	; (8005120 <TIM_OC5_SetConfig+0xc4>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d109      	bne.n	80050ea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	021b      	lsls	r3, r3, #8
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	621a      	str	r2, [r3, #32]
}
 8005104:	bf00      	nop
 8005106:	371c      	adds	r7, #28
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	40012c00 	.word	0x40012c00
 8005114:	40013400 	.word	0x40013400
 8005118:	40014000 	.word	0x40014000
 800511c:	40014400 	.word	0x40014400
 8005120:	40014800 	.word	0x40014800

08005124 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800514a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	021b      	lsls	r3, r3, #8
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	4313      	orrs	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800516a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	051b      	lsls	r3, r3, #20
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	4313      	orrs	r3, r2
 8005176:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a18      	ldr	r2, [pc, #96]	; (80051dc <TIM_OC6_SetConfig+0xb8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d00f      	beq.n	80051a0 <TIM_OC6_SetConfig+0x7c>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a17      	ldr	r2, [pc, #92]	; (80051e0 <TIM_OC6_SetConfig+0xbc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d00b      	beq.n	80051a0 <TIM_OC6_SetConfig+0x7c>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a16      	ldr	r2, [pc, #88]	; (80051e4 <TIM_OC6_SetConfig+0xc0>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d007      	beq.n	80051a0 <TIM_OC6_SetConfig+0x7c>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a15      	ldr	r2, [pc, #84]	; (80051e8 <TIM_OC6_SetConfig+0xc4>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d003      	beq.n	80051a0 <TIM_OC6_SetConfig+0x7c>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a14      	ldr	r2, [pc, #80]	; (80051ec <TIM_OC6_SetConfig+0xc8>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d109      	bne.n	80051b4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	029b      	lsls	r3, r3, #10
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	621a      	str	r2, [r3, #32]
}
 80051ce:	bf00      	nop
 80051d0:	371c      	adds	r7, #28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	40012c00 	.word	0x40012c00
 80051e0:	40013400 	.word	0x40013400
 80051e4:	40014000 	.word	0x40014000
 80051e8:	40014400 	.word	0x40014400
 80051ec:	40014800 	.word	0x40014800

080051f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	f023 0201 	bic.w	r2, r3, #1
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800521a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f023 030a 	bic.w	r3, r3, #10
 800522c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	621a      	str	r2, [r3, #32]
}
 8005242:	bf00      	nop
 8005244:	371c      	adds	r7, #28
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800524e:	b480      	push	{r7}
 8005250:	b087      	sub	sp, #28
 8005252:	af00      	add	r7, sp, #0
 8005254:	60f8      	str	r0, [r7, #12]
 8005256:	60b9      	str	r1, [r7, #8]
 8005258:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	f023 0210 	bic.w	r2, r3, #16
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005278:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	031b      	lsls	r3, r3, #12
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	4313      	orrs	r3, r2
 8005282:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800528a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	621a      	str	r2, [r3, #32]
}
 80052a2:	bf00      	nop
 80052a4:	371c      	adds	r7, #28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b085      	sub	sp, #20
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f043 0307 	orr.w	r3, r3, #7
 80052d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	609a      	str	r2, [r3, #8]
}
 80052d8:	bf00      	nop
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	021a      	lsls	r2, r3, #8
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	431a      	orrs	r2, r3
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4313      	orrs	r3, r2
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	609a      	str	r2, [r3, #8]
}
 8005318:	bf00      	nop
 800531a:	371c      	adds	r7, #28
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f003 031f 	and.w	r3, r3, #31
 8005336:	2201      	movs	r2, #1
 8005338:	fa02 f303 	lsl.w	r3, r2, r3
 800533c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6a1a      	ldr	r2, [r3, #32]
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	43db      	mvns	r3, r3
 8005346:	401a      	ands	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a1a      	ldr	r2, [r3, #32]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f003 031f 	and.w	r3, r3, #31
 8005356:	6879      	ldr	r1, [r7, #4]
 8005358:	fa01 f303 	lsl.w	r3, r1, r3
 800535c:	431a      	orrs	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	621a      	str	r2, [r3, #32]
}
 8005362:	bf00      	nop
 8005364:	371c      	adds	r7, #28
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
	...

08005370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005380:	2b01      	cmp	r3, #1
 8005382:	d101      	bne.n	8005388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005384:	2302      	movs	r3, #2
 8005386:	e063      	b.n	8005450 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a2b      	ldr	r2, [pc, #172]	; (800545c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d004      	beq.n	80053bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a2a      	ldr	r2, [pc, #168]	; (8005460 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d108      	bne.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4313      	orrs	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a1b      	ldr	r2, [pc, #108]	; (800545c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d018      	beq.n	8005424 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fa:	d013      	beq.n	8005424 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a18      	ldr	r2, [pc, #96]	; (8005464 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00e      	beq.n	8005424 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a17      	ldr	r2, [pc, #92]	; (8005468 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d009      	beq.n	8005424 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a12      	ldr	r2, [pc, #72]	; (8005460 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d004      	beq.n	8005424 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a13      	ldr	r2, [pc, #76]	; (800546c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d10c      	bne.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800542a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	4313      	orrs	r3, r2
 8005434:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	40012c00 	.word	0x40012c00
 8005460:	40013400 	.word	0x40013400
 8005464:	40000400 	.word	0x40000400
 8005468:	40000800 	.word	0x40000800
 800546c:	40014000 	.word	0x40014000

08005470 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e040      	b.n	8005540 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d106      	bne.n	80054d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7fc f8ee 	bl	80016b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2224      	movs	r2, #36	; 0x24
 80054d8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0201 	bic.w	r2, r2, #1
 80054e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fbd4 	bl	8005c98 <UART_SetConfig>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d101      	bne.n	80054fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e022      	b.n	8005540 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d002      	beq.n	8005508 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fd9c 	bl	8006040 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005516:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005526:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0201 	orr.w	r2, r2, #1
 8005536:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 fe23 	bl	8006184 <UART_CheckIdleState>
 800553e:	4603      	mov	r3, r0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005548:	b480      	push	{r7}
 800554a:	b08b      	sub	sp, #44	; 0x2c
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	4613      	mov	r3, r2
 8005554:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800555a:	2b20      	cmp	r3, #32
 800555c:	d147      	bne.n	80055ee <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <HAL_UART_Transmit_IT+0x22>
 8005564:	88fb      	ldrh	r3, [r7, #6]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e040      	b.n	80055f0 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	88fa      	ldrh	r2, [r7, #6]
 8005578:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	88fa      	ldrh	r2, [r7, #6]
 8005580:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2221      	movs	r2, #33	; 0x21
 8005596:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a0:	d107      	bne.n	80055b2 <HAL_UART_Transmit_IT+0x6a>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d103      	bne.n	80055b2 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4a13      	ldr	r2, [pc, #76]	; (80055fc <HAL_UART_Transmit_IT+0xb4>)
 80055ae:	66da      	str	r2, [r3, #108]	; 0x6c
 80055b0:	e002      	b.n	80055b8 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	4a12      	ldr	r2, [pc, #72]	; (8005600 <HAL_UART_Transmit_IT+0xb8>)
 80055b6:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	e853 3f00 	ldrex	r3, [r3]
 80055c4:	613b      	str	r3, [r7, #16]
   return(result);
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	623b      	str	r3, [r7, #32]
 80055d8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055da:	69f9      	ldr	r1, [r7, #28]
 80055dc:	6a3a      	ldr	r2, [r7, #32]
 80055de:	e841 2300 	strex	r3, r2, [r1]
 80055e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1e6      	bne.n	80055b8 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	e000      	b.n	80055f0 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80055ee:	2302      	movs	r3, #2
  }
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	372c      	adds	r7, #44	; 0x2c
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	080066b9 	.word	0x080066b9
 8005600:	08006601 	.word	0x08006601

08005604 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b08a      	sub	sp, #40	; 0x28
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	4613      	mov	r3, r2
 8005610:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005618:	2b20      	cmp	r3, #32
 800561a:	d132      	bne.n	8005682 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <HAL_UART_Receive_IT+0x24>
 8005622:	88fb      	ldrh	r3, [r7, #6]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e02b      	b.n	8005684 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d018      	beq.n	8005672 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	e853 3f00 	ldrex	r3, [r3]
 800564c:	613b      	str	r3, [r7, #16]
   return(result);
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	623b      	str	r3, [r7, #32]
 8005660:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005662:	69f9      	ldr	r1, [r7, #28]
 8005664:	6a3a      	ldr	r2, [r7, #32]
 8005666:	e841 2300 	strex	r3, r2, [r1]
 800566a:	61bb      	str	r3, [r7, #24]
   return(result);
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1e6      	bne.n	8005640 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005672:	88fb      	ldrh	r3, [r7, #6]
 8005674:	461a      	mov	r2, r3
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 fe93 	bl	80063a4 <UART_Start_Receive_IT>
 800567e:	4603      	mov	r3, r0
 8005680:	e000      	b.n	8005684 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005682:	2302      	movs	r3, #2
  }
}
 8005684:	4618      	mov	r0, r3
 8005686:	3728      	adds	r7, #40	; 0x28
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b0ba      	sub	sp, #232	; 0xe8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80056b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80056b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80056ba:	4013      	ands	r3, r2
 80056bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80056c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d115      	bne.n	80056f4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80056c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056cc:	f003 0320 	and.w	r3, r3, #32
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00f      	beq.n	80056f4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80056d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056d8:	f003 0320 	and.w	r3, r3, #32
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d009      	beq.n	80056f4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 82ab 	beq.w	8005c40 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	4798      	blx	r3
      }
      return;
 80056f2:	e2a5      	b.n	8005c40 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80056f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 8117 	beq.w	800592c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80056fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d106      	bne.n	8005718 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800570a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800570e:	4b85      	ldr	r3, [pc, #532]	; (8005924 <HAL_UART_IRQHandler+0x298>)
 8005710:	4013      	ands	r3, r2
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 810a 	beq.w	800592c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	2b00      	cmp	r3, #0
 8005722:	d011      	beq.n	8005748 <HAL_UART_IRQHandler+0xbc>
 8005724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00b      	beq.n	8005748 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2201      	movs	r2, #1
 8005736:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800573e:	f043 0201 	orr.w	r2, r3, #1
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d011      	beq.n	8005778 <HAL_UART_IRQHandler+0xec>
 8005754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00b      	beq.n	8005778 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2202      	movs	r2, #2
 8005766:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800576e:	f043 0204 	orr.w	r2, r3, #4
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	d011      	beq.n	80057a8 <HAL_UART_IRQHandler+0x11c>
 8005784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00b      	beq.n	80057a8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2204      	movs	r2, #4
 8005796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800579e:	f043 0202 	orr.w	r2, r3, #2
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80057a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ac:	f003 0308 	and.w	r3, r3, #8
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d017      	beq.n	80057e4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80057b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057b8:	f003 0320 	and.w	r3, r3, #32
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d105      	bne.n	80057cc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80057c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00b      	beq.n	80057e4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2208      	movs	r2, #8
 80057d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057da:	f043 0208 	orr.w	r2, r3, #8
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80057e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d012      	beq.n	8005816 <HAL_UART_IRQHandler+0x18a>
 80057f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00c      	beq.n	8005816 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005804:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800580c:	f043 0220 	orr.w	r2, r3, #32
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 8211 	beq.w	8005c44 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005826:	f003 0320 	and.w	r3, r3, #32
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00d      	beq.n	800584a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800582e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005832:	f003 0320 	and.w	r3, r3, #32
 8005836:	2b00      	cmp	r3, #0
 8005838:	d007      	beq.n	800584a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005850:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585e:	2b40      	cmp	r3, #64	; 0x40
 8005860:	d005      	beq.n	800586e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005866:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800586a:	2b00      	cmp	r3, #0
 800586c:	d04f      	beq.n	800590e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 fe4c 	bl	800650c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587e:	2b40      	cmp	r3, #64	; 0x40
 8005880:	d141      	bne.n	8005906 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3308      	adds	r3, #8
 8005888:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005890:	e853 3f00 	ldrex	r3, [r3]
 8005894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005898:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800589c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3308      	adds	r3, #8
 80058aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80058ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80058b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80058ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80058be:	e841 2300 	strex	r3, r2, [r1]
 80058c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80058c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1d9      	bne.n	8005882 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d013      	beq.n	80058fe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058da:	4a13      	ldr	r2, [pc, #76]	; (8005928 <HAL_UART_IRQHandler+0x29c>)
 80058dc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fc fb26 	bl	8001f34 <HAL_DMA_Abort_IT>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d017      	beq.n	800591e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80058f8:	4610      	mov	r0, r2
 80058fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058fc:	e00f      	b.n	800591e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f9b4 	bl	8005c6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005904:	e00b      	b.n	800591e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f9b0 	bl	8005c6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800590c:	e007      	b.n	800591e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f9ac 	bl	8005c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800591c:	e192      	b.n	8005c44 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800591e:	bf00      	nop
    return;
 8005920:	e190      	b.n	8005c44 <HAL_UART_IRQHandler+0x5b8>
 8005922:	bf00      	nop
 8005924:	04000120 	.word	0x04000120
 8005928:	080065d5 	.word	0x080065d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005930:	2b01      	cmp	r3, #1
 8005932:	f040 814b 	bne.w	8005bcc <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800593a:	f003 0310 	and.w	r3, r3, #16
 800593e:	2b00      	cmp	r3, #0
 8005940:	f000 8144 	beq.w	8005bcc <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005948:	f003 0310 	and.w	r3, r3, #16
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 813d 	beq.w	8005bcc <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2210      	movs	r2, #16
 8005958:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005964:	2b40      	cmp	r3, #64	; 0x40
 8005966:	f040 80b5 	bne.w	8005ad4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005976:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 8164 	beq.w	8005c48 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005986:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800598a:	429a      	cmp	r2, r3
 800598c:	f080 815c 	bcs.w	8005c48 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005996:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	f000 8086 	beq.w	8005ab2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80059ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	461a      	mov	r2, r3
 80059cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80059d4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80059dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80059e0:	e841 2300 	strex	r3, r2, [r1]
 80059e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80059e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1da      	bne.n	80059a6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3308      	adds	r3, #8
 80059f6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059fa:	e853 3f00 	ldrex	r3, [r3]
 80059fe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a02:	f023 0301 	bic.w	r3, r3, #1
 8005a06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3308      	adds	r3, #8
 8005a10:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a14:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a18:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a20:	e841 2300 	strex	r3, r2, [r1]
 8005a24:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1e1      	bne.n	80059f0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3308      	adds	r3, #8
 8005a32:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a36:	e853 3f00 	ldrex	r3, [r3]
 8005a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3308      	adds	r3, #8
 8005a4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a50:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a58:	e841 2300 	strex	r3, r2, [r1]
 8005a5c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1e3      	bne.n	8005a2c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2220      	movs	r2, #32
 8005a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a7a:	e853 3f00 	ldrex	r3, [r3]
 8005a7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a82:	f023 0310 	bic.w	r3, r3, #16
 8005a86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a94:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a96:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a9c:	e841 2300 	strex	r3, r2, [r1]
 8005aa0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e4      	bne.n	8005a72 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7fc fa08 	bl	8001ec2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	4619      	mov	r1, r3
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f8d7 	bl	8005c80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ad2:	e0b9      	b.n	8005c48 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 80ab 	beq.w	8005c4c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005af6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 80a6 	beq.w	8005c4c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b08:	e853 3f00 	ldrex	r3, [r3]
 8005b0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b22:	647b      	str	r3, [r7, #68]	; 0x44
 8005b24:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b2a:	e841 2300 	strex	r3, r2, [r1]
 8005b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1e4      	bne.n	8005b00 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	3308      	adds	r3, #8
 8005b3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	e853 3f00 	ldrex	r3, [r3]
 8005b44:	623b      	str	r3, [r7, #32]
   return(result);
 8005b46:	6a3b      	ldr	r3, [r7, #32]
 8005b48:	f023 0301 	bic.w	r3, r3, #1
 8005b4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3308      	adds	r3, #8
 8005b56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b5a:	633a      	str	r2, [r7, #48]	; 0x30
 8005b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1e3      	bne.n	8005b36 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	e853 3f00 	ldrex	r3, [r3]
 8005b8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 0310 	bic.w	r3, r3, #16
 8005b96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ba4:	61fb      	str	r3, [r7, #28]
 8005ba6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba8:	69b9      	ldr	r1, [r7, #24]
 8005baa:	69fa      	ldr	r2, [r7, #28]
 8005bac:	e841 2300 	strex	r3, r2, [r1]
 8005bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1e4      	bne.n	8005b82 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bbe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f85b 	bl	8005c80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bca:	e03f      	b.n	8005c4c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00e      	beq.n	8005bf6 <HAL_UART_IRQHandler+0x56a>
 8005bd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d008      	beq.n	8005bf6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005bec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 ff94 	bl	8006b1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bf4:	e02d      	b.n	8005c52 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00e      	beq.n	8005c20 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d008      	beq.n	8005c20 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d01c      	beq.n	8005c50 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	4798      	blx	r3
    }
    return;
 8005c1e:	e017      	b.n	8005c50 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d012      	beq.n	8005c52 <HAL_UART_IRQHandler+0x5c6>
 8005c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00c      	beq.n	8005c52 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 fd9d 	bl	8006778 <UART_EndTransmit_IT>
    return;
 8005c3e:	e008      	b.n	8005c52 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005c40:	bf00      	nop
 8005c42:	e006      	b.n	8005c52 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005c44:	bf00      	nop
 8005c46:	e004      	b.n	8005c52 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005c48:	bf00      	nop
 8005c4a:	e002      	b.n	8005c52 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005c4c:	bf00      	nop
 8005c4e:	e000      	b.n	8005c52 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005c50:	bf00      	nop
  }

}
 8005c52:	37e8      	adds	r7, #232	; 0xe8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b088      	sub	sp, #32
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005cc6:	f023 030c 	bic.w	r3, r3, #12
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	6812      	ldr	r2, [r2, #0]
 8005cce:	6979      	ldr	r1, [r7, #20]
 8005cd0:	430b      	orrs	r3, r1
 8005cd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68da      	ldr	r2, [r3, #12]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4aa7      	ldr	r2, [pc, #668]	; (8005fb0 <UART_SetConfig+0x318>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d120      	bne.n	8005d5a <UART_SetConfig+0xc2>
 8005d18:	4ba6      	ldr	r3, [pc, #664]	; (8005fb4 <UART_SetConfig+0x31c>)
 8005d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1c:	f003 0303 	and.w	r3, r3, #3
 8005d20:	2b03      	cmp	r3, #3
 8005d22:	d817      	bhi.n	8005d54 <UART_SetConfig+0xbc>
 8005d24:	a201      	add	r2, pc, #4	; (adr r2, 8005d2c <UART_SetConfig+0x94>)
 8005d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2a:	bf00      	nop
 8005d2c:	08005d3d 	.word	0x08005d3d
 8005d30:	08005d49 	.word	0x08005d49
 8005d34:	08005d4f 	.word	0x08005d4f
 8005d38:	08005d43 	.word	0x08005d43
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	77fb      	strb	r3, [r7, #31]
 8005d40:	e0b5      	b.n	8005eae <UART_SetConfig+0x216>
 8005d42:	2302      	movs	r3, #2
 8005d44:	77fb      	strb	r3, [r7, #31]
 8005d46:	e0b2      	b.n	8005eae <UART_SetConfig+0x216>
 8005d48:	2304      	movs	r3, #4
 8005d4a:	77fb      	strb	r3, [r7, #31]
 8005d4c:	e0af      	b.n	8005eae <UART_SetConfig+0x216>
 8005d4e:	2308      	movs	r3, #8
 8005d50:	77fb      	strb	r3, [r7, #31]
 8005d52:	e0ac      	b.n	8005eae <UART_SetConfig+0x216>
 8005d54:	2310      	movs	r3, #16
 8005d56:	77fb      	strb	r3, [r7, #31]
 8005d58:	e0a9      	b.n	8005eae <UART_SetConfig+0x216>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a96      	ldr	r2, [pc, #600]	; (8005fb8 <UART_SetConfig+0x320>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d124      	bne.n	8005dae <UART_SetConfig+0x116>
 8005d64:	4b93      	ldr	r3, [pc, #588]	; (8005fb4 <UART_SetConfig+0x31c>)
 8005d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d70:	d011      	beq.n	8005d96 <UART_SetConfig+0xfe>
 8005d72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d76:	d817      	bhi.n	8005da8 <UART_SetConfig+0x110>
 8005d78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d7c:	d011      	beq.n	8005da2 <UART_SetConfig+0x10a>
 8005d7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d82:	d811      	bhi.n	8005da8 <UART_SetConfig+0x110>
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d003      	beq.n	8005d90 <UART_SetConfig+0xf8>
 8005d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d8c:	d006      	beq.n	8005d9c <UART_SetConfig+0x104>
 8005d8e:	e00b      	b.n	8005da8 <UART_SetConfig+0x110>
 8005d90:	2300      	movs	r3, #0
 8005d92:	77fb      	strb	r3, [r7, #31]
 8005d94:	e08b      	b.n	8005eae <UART_SetConfig+0x216>
 8005d96:	2302      	movs	r3, #2
 8005d98:	77fb      	strb	r3, [r7, #31]
 8005d9a:	e088      	b.n	8005eae <UART_SetConfig+0x216>
 8005d9c:	2304      	movs	r3, #4
 8005d9e:	77fb      	strb	r3, [r7, #31]
 8005da0:	e085      	b.n	8005eae <UART_SetConfig+0x216>
 8005da2:	2308      	movs	r3, #8
 8005da4:	77fb      	strb	r3, [r7, #31]
 8005da6:	e082      	b.n	8005eae <UART_SetConfig+0x216>
 8005da8:	2310      	movs	r3, #16
 8005daa:	77fb      	strb	r3, [r7, #31]
 8005dac:	e07f      	b.n	8005eae <UART_SetConfig+0x216>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a82      	ldr	r2, [pc, #520]	; (8005fbc <UART_SetConfig+0x324>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d124      	bne.n	8005e02 <UART_SetConfig+0x16a>
 8005db8:	4b7e      	ldr	r3, [pc, #504]	; (8005fb4 <UART_SetConfig+0x31c>)
 8005dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005dc0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005dc4:	d011      	beq.n	8005dea <UART_SetConfig+0x152>
 8005dc6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005dca:	d817      	bhi.n	8005dfc <UART_SetConfig+0x164>
 8005dcc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005dd0:	d011      	beq.n	8005df6 <UART_SetConfig+0x15e>
 8005dd2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005dd6:	d811      	bhi.n	8005dfc <UART_SetConfig+0x164>
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <UART_SetConfig+0x14c>
 8005ddc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005de0:	d006      	beq.n	8005df0 <UART_SetConfig+0x158>
 8005de2:	e00b      	b.n	8005dfc <UART_SetConfig+0x164>
 8005de4:	2300      	movs	r3, #0
 8005de6:	77fb      	strb	r3, [r7, #31]
 8005de8:	e061      	b.n	8005eae <UART_SetConfig+0x216>
 8005dea:	2302      	movs	r3, #2
 8005dec:	77fb      	strb	r3, [r7, #31]
 8005dee:	e05e      	b.n	8005eae <UART_SetConfig+0x216>
 8005df0:	2304      	movs	r3, #4
 8005df2:	77fb      	strb	r3, [r7, #31]
 8005df4:	e05b      	b.n	8005eae <UART_SetConfig+0x216>
 8005df6:	2308      	movs	r3, #8
 8005df8:	77fb      	strb	r3, [r7, #31]
 8005dfa:	e058      	b.n	8005eae <UART_SetConfig+0x216>
 8005dfc:	2310      	movs	r3, #16
 8005dfe:	77fb      	strb	r3, [r7, #31]
 8005e00:	e055      	b.n	8005eae <UART_SetConfig+0x216>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a6e      	ldr	r2, [pc, #440]	; (8005fc0 <UART_SetConfig+0x328>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d124      	bne.n	8005e56 <UART_SetConfig+0x1be>
 8005e0c:	4b69      	ldr	r3, [pc, #420]	; (8005fb4 <UART_SetConfig+0x31c>)
 8005e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e10:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005e14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e18:	d011      	beq.n	8005e3e <UART_SetConfig+0x1a6>
 8005e1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e1e:	d817      	bhi.n	8005e50 <UART_SetConfig+0x1b8>
 8005e20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e24:	d011      	beq.n	8005e4a <UART_SetConfig+0x1b2>
 8005e26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e2a:	d811      	bhi.n	8005e50 <UART_SetConfig+0x1b8>
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <UART_SetConfig+0x1a0>
 8005e30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e34:	d006      	beq.n	8005e44 <UART_SetConfig+0x1ac>
 8005e36:	e00b      	b.n	8005e50 <UART_SetConfig+0x1b8>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	77fb      	strb	r3, [r7, #31]
 8005e3c:	e037      	b.n	8005eae <UART_SetConfig+0x216>
 8005e3e:	2302      	movs	r3, #2
 8005e40:	77fb      	strb	r3, [r7, #31]
 8005e42:	e034      	b.n	8005eae <UART_SetConfig+0x216>
 8005e44:	2304      	movs	r3, #4
 8005e46:	77fb      	strb	r3, [r7, #31]
 8005e48:	e031      	b.n	8005eae <UART_SetConfig+0x216>
 8005e4a:	2308      	movs	r3, #8
 8005e4c:	77fb      	strb	r3, [r7, #31]
 8005e4e:	e02e      	b.n	8005eae <UART_SetConfig+0x216>
 8005e50:	2310      	movs	r3, #16
 8005e52:	77fb      	strb	r3, [r7, #31]
 8005e54:	e02b      	b.n	8005eae <UART_SetConfig+0x216>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a5a      	ldr	r2, [pc, #360]	; (8005fc4 <UART_SetConfig+0x32c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d124      	bne.n	8005eaa <UART_SetConfig+0x212>
 8005e60:	4b54      	ldr	r3, [pc, #336]	; (8005fb4 <UART_SetConfig+0x31c>)
 8005e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e64:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005e68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e6c:	d011      	beq.n	8005e92 <UART_SetConfig+0x1fa>
 8005e6e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e72:	d817      	bhi.n	8005ea4 <UART_SetConfig+0x20c>
 8005e74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e78:	d011      	beq.n	8005e9e <UART_SetConfig+0x206>
 8005e7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e7e:	d811      	bhi.n	8005ea4 <UART_SetConfig+0x20c>
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d003      	beq.n	8005e8c <UART_SetConfig+0x1f4>
 8005e84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e88:	d006      	beq.n	8005e98 <UART_SetConfig+0x200>
 8005e8a:	e00b      	b.n	8005ea4 <UART_SetConfig+0x20c>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	77fb      	strb	r3, [r7, #31]
 8005e90:	e00d      	b.n	8005eae <UART_SetConfig+0x216>
 8005e92:	2302      	movs	r3, #2
 8005e94:	77fb      	strb	r3, [r7, #31]
 8005e96:	e00a      	b.n	8005eae <UART_SetConfig+0x216>
 8005e98:	2304      	movs	r3, #4
 8005e9a:	77fb      	strb	r3, [r7, #31]
 8005e9c:	e007      	b.n	8005eae <UART_SetConfig+0x216>
 8005e9e:	2308      	movs	r3, #8
 8005ea0:	77fb      	strb	r3, [r7, #31]
 8005ea2:	e004      	b.n	8005eae <UART_SetConfig+0x216>
 8005ea4:	2310      	movs	r3, #16
 8005ea6:	77fb      	strb	r3, [r7, #31]
 8005ea8:	e001      	b.n	8005eae <UART_SetConfig+0x216>
 8005eaa:	2310      	movs	r3, #16
 8005eac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eb6:	d15b      	bne.n	8005f70 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8005eb8:	7ffb      	ldrb	r3, [r7, #31]
 8005eba:	2b08      	cmp	r3, #8
 8005ebc:	d827      	bhi.n	8005f0e <UART_SetConfig+0x276>
 8005ebe:	a201      	add	r2, pc, #4	; (adr r2, 8005ec4 <UART_SetConfig+0x22c>)
 8005ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec4:	08005ee9 	.word	0x08005ee9
 8005ec8:	08005ef1 	.word	0x08005ef1
 8005ecc:	08005ef9 	.word	0x08005ef9
 8005ed0:	08005f0f 	.word	0x08005f0f
 8005ed4:	08005eff 	.word	0x08005eff
 8005ed8:	08005f0f 	.word	0x08005f0f
 8005edc:	08005f0f 	.word	0x08005f0f
 8005ee0:	08005f0f 	.word	0x08005f0f
 8005ee4:	08005f07 	.word	0x08005f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ee8:	f7fd fe34 	bl	8003b54 <HAL_RCC_GetPCLK1Freq>
 8005eec:	61b8      	str	r0, [r7, #24]
        break;
 8005eee:	e013      	b.n	8005f18 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ef0:	f7fd fe52 	bl	8003b98 <HAL_RCC_GetPCLK2Freq>
 8005ef4:	61b8      	str	r0, [r7, #24]
        break;
 8005ef6:	e00f      	b.n	8005f18 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ef8:	4b33      	ldr	r3, [pc, #204]	; (8005fc8 <UART_SetConfig+0x330>)
 8005efa:	61bb      	str	r3, [r7, #24]
        break;
 8005efc:	e00c      	b.n	8005f18 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005efe:	f7fd fdb3 	bl	8003a68 <HAL_RCC_GetSysClockFreq>
 8005f02:	61b8      	str	r0, [r7, #24]
        break;
 8005f04:	e008      	b.n	8005f18 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f0a:	61bb      	str	r3, [r7, #24]
        break;
 8005f0c:	e004      	b.n	8005f18 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	77bb      	strb	r3, [r7, #30]
        break;
 8005f16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 8082 	beq.w	8006024 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	005a      	lsls	r2, r3, #1
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	085b      	lsrs	r3, r3, #1
 8005f2a:	441a      	add	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	2b0f      	cmp	r3, #15
 8005f3a:	d916      	bls.n	8005f6a <UART_SetConfig+0x2d2>
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f42:	d212      	bcs.n	8005f6a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	f023 030f 	bic.w	r3, r3, #15
 8005f4c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	085b      	lsrs	r3, r3, #1
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	89fb      	ldrh	r3, [r7, #14]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	89fa      	ldrh	r2, [r7, #14]
 8005f66:	60da      	str	r2, [r3, #12]
 8005f68:	e05c      	b.n	8006024 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	77bb      	strb	r3, [r7, #30]
 8005f6e:	e059      	b.n	8006024 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f70:	7ffb      	ldrb	r3, [r7, #31]
 8005f72:	2b08      	cmp	r3, #8
 8005f74:	d835      	bhi.n	8005fe2 <UART_SetConfig+0x34a>
 8005f76:	a201      	add	r2, pc, #4	; (adr r2, 8005f7c <UART_SetConfig+0x2e4>)
 8005f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7c:	08005fa1 	.word	0x08005fa1
 8005f80:	08005fa9 	.word	0x08005fa9
 8005f84:	08005fcd 	.word	0x08005fcd
 8005f88:	08005fe3 	.word	0x08005fe3
 8005f8c:	08005fd3 	.word	0x08005fd3
 8005f90:	08005fe3 	.word	0x08005fe3
 8005f94:	08005fe3 	.word	0x08005fe3
 8005f98:	08005fe3 	.word	0x08005fe3
 8005f9c:	08005fdb 	.word	0x08005fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fa0:	f7fd fdd8 	bl	8003b54 <HAL_RCC_GetPCLK1Freq>
 8005fa4:	61b8      	str	r0, [r7, #24]
        break;
 8005fa6:	e021      	b.n	8005fec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fa8:	f7fd fdf6 	bl	8003b98 <HAL_RCC_GetPCLK2Freq>
 8005fac:	61b8      	str	r0, [r7, #24]
        break;
 8005fae:	e01d      	b.n	8005fec <UART_SetConfig+0x354>
 8005fb0:	40013800 	.word	0x40013800
 8005fb4:	40021000 	.word	0x40021000
 8005fb8:	40004400 	.word	0x40004400
 8005fbc:	40004800 	.word	0x40004800
 8005fc0:	40004c00 	.word	0x40004c00
 8005fc4:	40005000 	.word	0x40005000
 8005fc8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fcc:	4b1b      	ldr	r3, [pc, #108]	; (800603c <UART_SetConfig+0x3a4>)
 8005fce:	61bb      	str	r3, [r7, #24]
        break;
 8005fd0:	e00c      	b.n	8005fec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fd2:	f7fd fd49 	bl	8003a68 <HAL_RCC_GetSysClockFreq>
 8005fd6:	61b8      	str	r0, [r7, #24]
        break;
 8005fd8:	e008      	b.n	8005fec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fde:	61bb      	str	r3, [r7, #24]
        break;
 8005fe0:	e004      	b.n	8005fec <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	77bb      	strb	r3, [r7, #30]
        break;
 8005fea:	bf00      	nop
    }

    if (pclk != 0U)
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d018      	beq.n	8006024 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	085a      	lsrs	r2, r3, #1
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	441a      	add	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	fbb2 f3f3 	udiv	r3, r2, r3
 8006004:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	2b0f      	cmp	r3, #15
 800600a:	d909      	bls.n	8006020 <UART_SetConfig+0x388>
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006012:	d205      	bcs.n	8006020 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	b29a      	uxth	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	60da      	str	r2, [r3, #12]
 800601e:	e001      	b.n	8006024 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006030:	7fbb      	ldrb	r3, [r7, #30]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3720      	adds	r7, #32
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	007a1200 	.word	0x007a1200

08006040 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00a      	beq.n	800606a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00a      	beq.n	80060ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b2:	f003 0308 	and.w	r3, r3, #8
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00a      	beq.n	80060d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	430a      	orrs	r2, r1
 80060ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	f003 0310 	and.w	r3, r3, #16
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00a      	beq.n	80060f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	f003 0320 	and.w	r3, r3, #32
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00a      	beq.n	8006114 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611c:	2b00      	cmp	r3, #0
 800611e:	d01a      	beq.n	8006156 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	430a      	orrs	r2, r1
 8006134:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800613e:	d10a      	bne.n	8006156 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00a      	beq.n	8006178 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	430a      	orrs	r2, r1
 8006176:	605a      	str	r2, [r3, #4]
  }
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b098      	sub	sp, #96	; 0x60
 8006188:	af02      	add	r7, sp, #8
 800618a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006194:	f7fb fd78 	bl	8001c88 <HAL_GetTick>
 8006198:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0308 	and.w	r3, r3, #8
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	d12e      	bne.n	8006206 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061b0:	2200      	movs	r2, #0
 80061b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f88c 	bl	80062d4 <UART_WaitOnFlagUntilTimeout>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d021      	beq.n	8006206 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ca:	e853 3f00 	ldrex	r3, [r3]
 80061ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061d6:	653b      	str	r3, [r7, #80]	; 0x50
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	461a      	mov	r2, r3
 80061de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061e0:	647b      	str	r3, [r7, #68]	; 0x44
 80061e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061e8:	e841 2300 	strex	r3, r2, [r1]
 80061ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1e6      	bne.n	80061c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2220      	movs	r2, #32
 80061f8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e062      	b.n	80062cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0304 	and.w	r3, r3, #4
 8006210:	2b04      	cmp	r3, #4
 8006212:	d149      	bne.n	80062a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800621c:	2200      	movs	r2, #0
 800621e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f856 	bl	80062d4 <UART_WaitOnFlagUntilTimeout>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d03c      	beq.n	80062a8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	e853 3f00 	ldrex	r3, [r3]
 800623a:	623b      	str	r3, [r7, #32]
   return(result);
 800623c:	6a3b      	ldr	r3, [r7, #32]
 800623e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006242:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	461a      	mov	r2, r3
 800624a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800624c:	633b      	str	r3, [r7, #48]	; 0x30
 800624e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006250:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006254:	e841 2300 	strex	r3, r2, [r1]
 8006258:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1e6      	bne.n	800622e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	3308      	adds	r3, #8
 8006266:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	e853 3f00 	ldrex	r3, [r3]
 800626e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f023 0301 	bic.w	r3, r3, #1
 8006276:	64bb      	str	r3, [r7, #72]	; 0x48
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3308      	adds	r3, #8
 800627e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006280:	61fa      	str	r2, [r7, #28]
 8006282:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	69b9      	ldr	r1, [r7, #24]
 8006286:	69fa      	ldr	r2, [r7, #28]
 8006288:	e841 2300 	strex	r3, r2, [r1]
 800628c:	617b      	str	r3, [r7, #20]
   return(result);
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e5      	bne.n	8006260 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2220      	movs	r2, #32
 8006298:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e011      	b.n	80062cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2220      	movs	r2, #32
 80062ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2220      	movs	r2, #32
 80062b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3758      	adds	r7, #88	; 0x58
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	4613      	mov	r3, r2
 80062e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062e4:	e049      	b.n	800637a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ec:	d045      	beq.n	800637a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ee:	f7fb fccb 	bl	8001c88 <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d302      	bcc.n	8006304 <UART_WaitOnFlagUntilTimeout+0x30>
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e048      	b.n	800639a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0304 	and.w	r3, r3, #4
 8006312:	2b00      	cmp	r3, #0
 8006314:	d031      	beq.n	800637a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	f003 0308 	and.w	r3, r3, #8
 8006320:	2b08      	cmp	r3, #8
 8006322:	d110      	bne.n	8006346 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2208      	movs	r2, #8
 800632a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 f8ed 	bl	800650c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2208      	movs	r2, #8
 8006336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e029      	b.n	800639a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006354:	d111      	bne.n	800637a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800635e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 f8d3 	bl	800650c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2220      	movs	r2, #32
 800636a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e00f      	b.n	800639a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	69da      	ldr	r2, [r3, #28]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	4013      	ands	r3, r2
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	429a      	cmp	r2, r3
 8006388:	bf0c      	ite	eq
 800638a:	2301      	moveq	r3, #1
 800638c:	2300      	movne	r3, #0
 800638e:	b2db      	uxtb	r3, r3
 8006390:	461a      	mov	r2, r3
 8006392:	79fb      	ldrb	r3, [r7, #7]
 8006394:	429a      	cmp	r2, r3
 8006396:	d0a6      	beq.n	80062e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
	...

080063a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b097      	sub	sp, #92	; 0x5c
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	4613      	mov	r3, r2
 80063b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	88fa      	ldrh	r2, [r7, #6]
 80063bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	88fa      	ldrh	r2, [r7, #6]
 80063c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063d6:	d10e      	bne.n	80063f6 <UART_Start_Receive_IT+0x52>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d105      	bne.n	80063ec <UART_Start_Receive_IT+0x48>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80063e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063ea:	e01a      	b.n	8006422 <UART_Start_Receive_IT+0x7e>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	22ff      	movs	r2, #255	; 0xff
 80063f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063f4:	e015      	b.n	8006422 <UART_Start_Receive_IT+0x7e>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10d      	bne.n	800641a <UART_Start_Receive_IT+0x76>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d104      	bne.n	8006410 <UART_Start_Receive_IT+0x6c>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	22ff      	movs	r2, #255	; 0xff
 800640a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800640e:	e008      	b.n	8006422 <UART_Start_Receive_IT+0x7e>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	227f      	movs	r2, #127	; 0x7f
 8006414:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006418:	e003      	b.n	8006422 <UART_Start_Receive_IT+0x7e>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2222      	movs	r2, #34	; 0x22
 800642e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	3308      	adds	r3, #8
 8006438:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800643c:	e853 3f00 	ldrex	r3, [r3]
 8006440:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006444:	f043 0301 	orr.w	r3, r3, #1
 8006448:	657b      	str	r3, [r7, #84]	; 0x54
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	3308      	adds	r3, #8
 8006450:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006452:	64ba      	str	r2, [r7, #72]	; 0x48
 8006454:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006456:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006458:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800645a:	e841 2300 	strex	r3, r2, [r1]
 800645e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1e5      	bne.n	8006432 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800646e:	d107      	bne.n	8006480 <UART_Start_Receive_IT+0xdc>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d103      	bne.n	8006480 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4a22      	ldr	r2, [pc, #136]	; (8006504 <UART_Start_Receive_IT+0x160>)
 800647c:	669a      	str	r2, [r3, #104]	; 0x68
 800647e:	e002      	b.n	8006486 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	4a21      	ldr	r2, [pc, #132]	; (8006508 <UART_Start_Receive_IT+0x164>)
 8006484:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d019      	beq.n	80064c2 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006496:	e853 3f00 	ldrex	r3, [r3]
 800649a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80064a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	461a      	mov	r2, r3
 80064aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ac:	637b      	str	r3, [r7, #52]	; 0x34
 80064ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064b4:	e841 2300 	strex	r3, r2, [r1]
 80064b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1e6      	bne.n	800648e <UART_Start_Receive_IT+0xea>
 80064c0:	e018      	b.n	80064f4 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	e853 3f00 	ldrex	r3, [r3]
 80064ce:	613b      	str	r3, [r7, #16]
   return(result);
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f043 0320 	orr.w	r3, r3, #32
 80064d6:	653b      	str	r3, [r7, #80]	; 0x50
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	461a      	mov	r2, r3
 80064de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064e0:	623b      	str	r3, [r7, #32]
 80064e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e4:	69f9      	ldr	r1, [r7, #28]
 80064e6:	6a3a      	ldr	r2, [r7, #32]
 80064e8:	e841 2300 	strex	r3, r2, [r1]
 80064ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1e6      	bne.n	80064c2 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	375c      	adds	r7, #92	; 0x5c
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	08006975 	.word	0x08006975
 8006508:	080067cd 	.word	0x080067cd

0800650c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800650c:	b480      	push	{r7}
 800650e:	b095      	sub	sp, #84	; 0x54
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800651c:	e853 3f00 	ldrex	r3, [r3]
 8006520:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006524:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006528:	64fb      	str	r3, [r7, #76]	; 0x4c
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006532:	643b      	str	r3, [r7, #64]	; 0x40
 8006534:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006536:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006538:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800653a:	e841 2300 	strex	r3, r2, [r1]
 800653e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1e6      	bne.n	8006514 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	3308      	adds	r3, #8
 800654c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	e853 3f00 	ldrex	r3, [r3]
 8006554:	61fb      	str	r3, [r7, #28]
   return(result);
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	f023 0301 	bic.w	r3, r3, #1
 800655c:	64bb      	str	r3, [r7, #72]	; 0x48
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	3308      	adds	r3, #8
 8006564:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006566:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006568:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800656c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800656e:	e841 2300 	strex	r3, r2, [r1]
 8006572:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1e5      	bne.n	8006546 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800657e:	2b01      	cmp	r3, #1
 8006580:	d118      	bne.n	80065b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	e853 3f00 	ldrex	r3, [r3]
 800658e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f023 0310 	bic.w	r3, r3, #16
 8006596:	647b      	str	r3, [r7, #68]	; 0x44
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	461a      	mov	r2, r3
 800659e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065a0:	61bb      	str	r3, [r7, #24]
 80065a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a4:	6979      	ldr	r1, [r7, #20]
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	e841 2300 	strex	r3, r2, [r1]
 80065ac:	613b      	str	r3, [r7, #16]
   return(result);
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1e6      	bne.n	8006582 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80065c8:	bf00      	nop
 80065ca:	3754      	adds	r7, #84	; 0x54
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f7ff fb3a 	bl	8005c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065f8:	bf00      	nop
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006600:	b480      	push	{r7}
 8006602:	b08f      	sub	sp, #60	; 0x3c
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800660c:	2b21      	cmp	r3, #33	; 0x21
 800660e:	d14d      	bne.n	80066ac <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006616:	b29b      	uxth	r3, r3
 8006618:	2b00      	cmp	r3, #0
 800661a:	d132      	bne.n	8006682 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006622:	6a3b      	ldr	r3, [r7, #32]
 8006624:	e853 3f00 	ldrex	r3, [r3]
 8006628:	61fb      	str	r3, [r7, #28]
   return(result);
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006630:	637b      	str	r3, [r7, #52]	; 0x34
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	461a      	mov	r2, r3
 8006638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800663a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800663c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006642:	e841 2300 	strex	r3, r2, [r1]
 8006646:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1e6      	bne.n	800661c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	e853 3f00 	ldrex	r3, [r3]
 800665a:	60bb      	str	r3, [r7, #8]
   return(result);
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006662:	633b      	str	r3, [r7, #48]	; 0x30
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	461a      	mov	r2, r3
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	61bb      	str	r3, [r7, #24]
 800666e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006670:	6979      	ldr	r1, [r7, #20]
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	e841 2300 	strex	r3, r2, [r1]
 8006678:	613b      	str	r3, [r7, #16]
   return(result);
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1e6      	bne.n	800664e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006680:	e014      	b.n	80066ac <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006686:	781a      	ldrb	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	b292      	uxth	r2, r2
 800668e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006694:	1c5a      	adds	r2, r3, #1
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	3b01      	subs	r3, #1
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80066ac:	bf00      	nop
 80066ae:	373c      	adds	r7, #60	; 0x3c
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b091      	sub	sp, #68	; 0x44
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066c4:	2b21      	cmp	r3, #33	; 0x21
 80066c6:	d151      	bne.n	800676c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d132      	bne.n	800673a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	e853 3f00 	ldrex	r3, [r3]
 80066e0:	623b      	str	r3, [r7, #32]
   return(result);
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	461a      	mov	r2, r3
 80066f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f2:	633b      	str	r3, [r7, #48]	; 0x30
 80066f4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066fa:	e841 2300 	strex	r3, r2, [r1]
 80066fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1e6      	bne.n	80066d4 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	e853 3f00 	ldrex	r3, [r3]
 8006712:	60fb      	str	r3, [r7, #12]
   return(result);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800671a:	637b      	str	r3, [r7, #52]	; 0x34
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	461a      	mov	r2, r3
 8006722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006724:	61fb      	str	r3, [r7, #28]
 8006726:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006728:	69b9      	ldr	r1, [r7, #24]
 800672a:	69fa      	ldr	r2, [r7, #28]
 800672c:	e841 2300 	strex	r3, r2, [r1]
 8006730:	617b      	str	r3, [r7, #20]
   return(result);
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1e6      	bne.n	8006706 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006738:	e018      	b.n	800676c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800673e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006742:	881a      	ldrh	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800674c:	b292      	uxth	r2, r2
 800674e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006754:	1c9a      	adds	r2, r3, #2
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006760:	b29b      	uxth	r3, r3
 8006762:	3b01      	subs	r3, #1
 8006764:	b29a      	uxth	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800676c:	bf00      	nop
 800676e:	3744      	adds	r7, #68	; 0x44
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b088      	sub	sp, #32
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	e853 3f00 	ldrex	r3, [r3]
 800678c:	60bb      	str	r3, [r7, #8]
   return(result);
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006794:	61fb      	str	r3, [r7, #28]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	461a      	mov	r2, r3
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	61bb      	str	r3, [r7, #24]
 80067a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a2:	6979      	ldr	r1, [r7, #20]
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	e841 2300 	strex	r3, r2, [r1]
 80067aa:	613b      	str	r3, [r7, #16]
   return(result);
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1e6      	bne.n	8006780 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2220      	movs	r2, #32
 80067b6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f7ff fa4a 	bl	8005c58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067c4:	bf00      	nop
 80067c6:	3720      	adds	r7, #32
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b09c      	sub	sp, #112	; 0x70
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067da:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067e4:	2b22      	cmp	r3, #34	; 0x22
 80067e6:	f040 80b9 	bne.w	800695c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80067f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80067f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80067f8:	b2d9      	uxtb	r1, r3
 80067fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006804:	400a      	ands	r2, r1
 8006806:	b2d2      	uxtb	r2, r2
 8006808:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680e:	1c5a      	adds	r2, r3, #1
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800681a:	b29b      	uxth	r3, r3
 800681c:	3b01      	subs	r3, #1
 800681e:	b29a      	uxth	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800682c:	b29b      	uxth	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	f040 809c 	bne.w	800696c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800683c:	e853 3f00 	ldrex	r3, [r3]
 8006840:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006844:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006848:	66bb      	str	r3, [r7, #104]	; 0x68
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006852:	65bb      	str	r3, [r7, #88]	; 0x58
 8006854:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006856:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006858:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800685a:	e841 2300 	strex	r3, r2, [r1]
 800685e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1e6      	bne.n	8006834 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3308      	adds	r3, #8
 800686c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006870:	e853 3f00 	ldrex	r3, [r3]
 8006874:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006878:	f023 0301 	bic.w	r3, r3, #1
 800687c:	667b      	str	r3, [r7, #100]	; 0x64
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3308      	adds	r3, #8
 8006884:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006886:	647a      	str	r2, [r7, #68]	; 0x44
 8006888:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800688c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800688e:	e841 2300 	strex	r3, r2, [r1]
 8006892:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1e5      	bne.n	8006866 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2220      	movs	r2, #32
 800689e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d018      	beq.n	80068ee <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	e853 3f00 	ldrex	r3, [r3]
 80068c8:	623b      	str	r3, [r7, #32]
   return(result);
 80068ca:	6a3b      	ldr	r3, [r7, #32]
 80068cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068d0:	663b      	str	r3, [r7, #96]	; 0x60
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	461a      	mov	r2, r3
 80068d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068da:	633b      	str	r3, [r7, #48]	; 0x30
 80068dc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068e2:	e841 2300 	strex	r3, r2, [r1]
 80068e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1e6      	bne.n	80068bc <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d12e      	bne.n	8006954 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	60fb      	str	r3, [r7, #12]
   return(result);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f023 0310 	bic.w	r3, r3, #16
 8006910:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800691a:	61fb      	str	r3, [r7, #28]
 800691c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691e:	69b9      	ldr	r1, [r7, #24]
 8006920:	69fa      	ldr	r2, [r7, #28]
 8006922:	e841 2300 	strex	r3, r2, [r1]
 8006926:	617b      	str	r3, [r7, #20]
   return(result);
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1e6      	bne.n	80068fc <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	69db      	ldr	r3, [r3, #28]
 8006934:	f003 0310 	and.w	r3, r3, #16
 8006938:	2b10      	cmp	r3, #16
 800693a:	d103      	bne.n	8006944 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2210      	movs	r2, #16
 8006942:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800694a:	4619      	mov	r1, r3
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7ff f997 	bl	8005c80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006952:	e00b      	b.n	800696c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7f9 fe0d 	bl	8000574 <HAL_UART_RxCpltCallback>
}
 800695a:	e007      	b.n	800696c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699a      	ldr	r2, [r3, #24]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f042 0208 	orr.w	r2, r2, #8
 800696a:	619a      	str	r2, [r3, #24]
}
 800696c:	bf00      	nop
 800696e:	3770      	adds	r7, #112	; 0x70
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b09c      	sub	sp, #112	; 0x70
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006982:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800698c:	2b22      	cmp	r3, #34	; 0x22
 800698e:	f040 80b9 	bne.w	8006b04 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006998:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80069a2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80069a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80069aa:	4013      	ands	r3, r2
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b6:	1c9a      	adds	r2, r3, #2
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	3b01      	subs	r3, #1
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f040 809c 	bne.w	8006b14 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069e4:	e853 3f00 	ldrex	r3, [r3]
 80069e8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80069ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069f0:	667b      	str	r3, [r7, #100]	; 0x64
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	461a      	mov	r2, r3
 80069f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069fa:	657b      	str	r3, [r7, #84]	; 0x54
 80069fc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1e6      	bne.n	80069dc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3308      	adds	r3, #8
 8006a14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	f023 0301 	bic.w	r3, r3, #1
 8006a24:	663b      	str	r3, [r7, #96]	; 0x60
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3308      	adds	r3, #8
 8006a2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a2e:	643a      	str	r2, [r7, #64]	; 0x40
 8006a30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e5      	bne.n	8006a0e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d018      	beq.n	8006a96 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	e853 3f00 	ldrex	r3, [r3]
 8006a70:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a84:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a8a:	e841 2300 	strex	r3, r2, [r1]
 8006a8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1e6      	bne.n	8006a64 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d12e      	bne.n	8006afc <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	e853 3f00 	ldrex	r3, [r3]
 8006ab0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	f023 0310 	bic.w	r3, r3, #16
 8006ab8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ac2:	61bb      	str	r3, [r7, #24]
 8006ac4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac6:	6979      	ldr	r1, [r7, #20]
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	e841 2300 	strex	r3, r2, [r1]
 8006ace:	613b      	str	r3, [r7, #16]
   return(result);
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1e6      	bne.n	8006aa4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	69db      	ldr	r3, [r3, #28]
 8006adc:	f003 0310 	and.w	r3, r3, #16
 8006ae0:	2b10      	cmp	r3, #16
 8006ae2:	d103      	bne.n	8006aec <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2210      	movs	r2, #16
 8006aea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7ff f8c3 	bl	8005c80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006afa:	e00b      	b.n	8006b14 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f7f9 fd39 	bl	8000574 <HAL_UART_RxCpltCallback>
}
 8006b02:	e007      	b.n	8006b14 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	699a      	ldr	r2, [r3, #24]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f042 0208 	orr.w	r2, r2, #8
 8006b12:	619a      	str	r2, [r3, #24]
}
 8006b14:	bf00      	nop
 8006b16:	3770      	adds	r7, #112	; 0x70
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006b38:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006b3c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	43db      	mvns	r3, r3
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	4013      	ands	r3, r2
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3714      	adds	r7, #20
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006b66:	b084      	sub	sp, #16
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	f107 0014 	add.w	r0, r7, #20
 8006b74:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	b004      	add	sp, #16
 8006ba6:	4770      	bx	lr

08006ba8 <__errno>:
 8006ba8:	4b01      	ldr	r3, [pc, #4]	; (8006bb0 <__errno+0x8>)
 8006baa:	6818      	ldr	r0, [r3, #0]
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	2000009c 	.word	0x2000009c

08006bb4 <__libc_init_array>:
 8006bb4:	b570      	push	{r4, r5, r6, lr}
 8006bb6:	4d0d      	ldr	r5, [pc, #52]	; (8006bec <__libc_init_array+0x38>)
 8006bb8:	4c0d      	ldr	r4, [pc, #52]	; (8006bf0 <__libc_init_array+0x3c>)
 8006bba:	1b64      	subs	r4, r4, r5
 8006bbc:	10a4      	asrs	r4, r4, #2
 8006bbe:	2600      	movs	r6, #0
 8006bc0:	42a6      	cmp	r6, r4
 8006bc2:	d109      	bne.n	8006bd8 <__libc_init_array+0x24>
 8006bc4:	4d0b      	ldr	r5, [pc, #44]	; (8006bf4 <__libc_init_array+0x40>)
 8006bc6:	4c0c      	ldr	r4, [pc, #48]	; (8006bf8 <__libc_init_array+0x44>)
 8006bc8:	f000 f906 	bl	8006dd8 <_init>
 8006bcc:	1b64      	subs	r4, r4, r5
 8006bce:	10a4      	asrs	r4, r4, #2
 8006bd0:	2600      	movs	r6, #0
 8006bd2:	42a6      	cmp	r6, r4
 8006bd4:	d105      	bne.n	8006be2 <__libc_init_array+0x2e>
 8006bd6:	bd70      	pop	{r4, r5, r6, pc}
 8006bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bdc:	4798      	blx	r3
 8006bde:	3601      	adds	r6, #1
 8006be0:	e7ee      	b.n	8006bc0 <__libc_init_array+0xc>
 8006be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006be6:	4798      	blx	r3
 8006be8:	3601      	adds	r6, #1
 8006bea:	e7f2      	b.n	8006bd2 <__libc_init_array+0x1e>
 8006bec:	08009338 	.word	0x08009338
 8006bf0:	08009338 	.word	0x08009338
 8006bf4:	08009338 	.word	0x08009338
 8006bf8:	0800933c 	.word	0x0800933c

08006bfc <malloc>:
 8006bfc:	4b02      	ldr	r3, [pc, #8]	; (8006c08 <malloc+0xc>)
 8006bfe:	4601      	mov	r1, r0
 8006c00:	6818      	ldr	r0, [r3, #0]
 8006c02:	f000 b839 	b.w	8006c78 <_malloc_r>
 8006c06:	bf00      	nop
 8006c08:	2000009c 	.word	0x2000009c

08006c0c <memcpy>:
 8006c0c:	440a      	add	r2, r1
 8006c0e:	4291      	cmp	r1, r2
 8006c10:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c14:	d100      	bne.n	8006c18 <memcpy+0xc>
 8006c16:	4770      	bx	lr
 8006c18:	b510      	push	{r4, lr}
 8006c1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c22:	4291      	cmp	r1, r2
 8006c24:	d1f9      	bne.n	8006c1a <memcpy+0xe>
 8006c26:	bd10      	pop	{r4, pc}

08006c28 <memset>:
 8006c28:	4402      	add	r2, r0
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d100      	bne.n	8006c32 <memset+0xa>
 8006c30:	4770      	bx	lr
 8006c32:	f803 1b01 	strb.w	r1, [r3], #1
 8006c36:	e7f9      	b.n	8006c2c <memset+0x4>

08006c38 <sbrk_aligned>:
 8006c38:	b570      	push	{r4, r5, r6, lr}
 8006c3a:	4e0e      	ldr	r6, [pc, #56]	; (8006c74 <sbrk_aligned+0x3c>)
 8006c3c:	460c      	mov	r4, r1
 8006c3e:	6831      	ldr	r1, [r6, #0]
 8006c40:	4605      	mov	r5, r0
 8006c42:	b911      	cbnz	r1, 8006c4a <sbrk_aligned+0x12>
 8006c44:	f000 f88c 	bl	8006d60 <_sbrk_r>
 8006c48:	6030      	str	r0, [r6, #0]
 8006c4a:	4621      	mov	r1, r4
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	f000 f887 	bl	8006d60 <_sbrk_r>
 8006c52:	1c43      	adds	r3, r0, #1
 8006c54:	d00a      	beq.n	8006c6c <sbrk_aligned+0x34>
 8006c56:	1cc4      	adds	r4, r0, #3
 8006c58:	f024 0403 	bic.w	r4, r4, #3
 8006c5c:	42a0      	cmp	r0, r4
 8006c5e:	d007      	beq.n	8006c70 <sbrk_aligned+0x38>
 8006c60:	1a21      	subs	r1, r4, r0
 8006c62:	4628      	mov	r0, r5
 8006c64:	f000 f87c 	bl	8006d60 <_sbrk_r>
 8006c68:	3001      	adds	r0, #1
 8006c6a:	d101      	bne.n	8006c70 <sbrk_aligned+0x38>
 8006c6c:	f04f 34ff 	mov.w	r4, #4294967295
 8006c70:	4620      	mov	r0, r4
 8006c72:	bd70      	pop	{r4, r5, r6, pc}
 8006c74:	20000700 	.word	0x20000700

08006c78 <_malloc_r>:
 8006c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c7c:	1ccd      	adds	r5, r1, #3
 8006c7e:	f025 0503 	bic.w	r5, r5, #3
 8006c82:	3508      	adds	r5, #8
 8006c84:	2d0c      	cmp	r5, #12
 8006c86:	bf38      	it	cc
 8006c88:	250c      	movcc	r5, #12
 8006c8a:	2d00      	cmp	r5, #0
 8006c8c:	4607      	mov	r7, r0
 8006c8e:	db01      	blt.n	8006c94 <_malloc_r+0x1c>
 8006c90:	42a9      	cmp	r1, r5
 8006c92:	d905      	bls.n	8006ca0 <_malloc_r+0x28>
 8006c94:	230c      	movs	r3, #12
 8006c96:	603b      	str	r3, [r7, #0]
 8006c98:	2600      	movs	r6, #0
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ca0:	4e2e      	ldr	r6, [pc, #184]	; (8006d5c <_malloc_r+0xe4>)
 8006ca2:	f000 f88b 	bl	8006dbc <__malloc_lock>
 8006ca6:	6833      	ldr	r3, [r6, #0]
 8006ca8:	461c      	mov	r4, r3
 8006caa:	bb34      	cbnz	r4, 8006cfa <_malloc_r+0x82>
 8006cac:	4629      	mov	r1, r5
 8006cae:	4638      	mov	r0, r7
 8006cb0:	f7ff ffc2 	bl	8006c38 <sbrk_aligned>
 8006cb4:	1c43      	adds	r3, r0, #1
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	d14d      	bne.n	8006d56 <_malloc_r+0xde>
 8006cba:	6834      	ldr	r4, [r6, #0]
 8006cbc:	4626      	mov	r6, r4
 8006cbe:	2e00      	cmp	r6, #0
 8006cc0:	d140      	bne.n	8006d44 <_malloc_r+0xcc>
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	4631      	mov	r1, r6
 8006cc6:	4638      	mov	r0, r7
 8006cc8:	eb04 0803 	add.w	r8, r4, r3
 8006ccc:	f000 f848 	bl	8006d60 <_sbrk_r>
 8006cd0:	4580      	cmp	r8, r0
 8006cd2:	d13a      	bne.n	8006d4a <_malloc_r+0xd2>
 8006cd4:	6821      	ldr	r1, [r4, #0]
 8006cd6:	3503      	adds	r5, #3
 8006cd8:	1a6d      	subs	r5, r5, r1
 8006cda:	f025 0503 	bic.w	r5, r5, #3
 8006cde:	3508      	adds	r5, #8
 8006ce0:	2d0c      	cmp	r5, #12
 8006ce2:	bf38      	it	cc
 8006ce4:	250c      	movcc	r5, #12
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	4638      	mov	r0, r7
 8006cea:	f7ff ffa5 	bl	8006c38 <sbrk_aligned>
 8006cee:	3001      	adds	r0, #1
 8006cf0:	d02b      	beq.n	8006d4a <_malloc_r+0xd2>
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	442b      	add	r3, r5
 8006cf6:	6023      	str	r3, [r4, #0]
 8006cf8:	e00e      	b.n	8006d18 <_malloc_r+0xa0>
 8006cfa:	6822      	ldr	r2, [r4, #0]
 8006cfc:	1b52      	subs	r2, r2, r5
 8006cfe:	d41e      	bmi.n	8006d3e <_malloc_r+0xc6>
 8006d00:	2a0b      	cmp	r2, #11
 8006d02:	d916      	bls.n	8006d32 <_malloc_r+0xba>
 8006d04:	1961      	adds	r1, r4, r5
 8006d06:	42a3      	cmp	r3, r4
 8006d08:	6025      	str	r5, [r4, #0]
 8006d0a:	bf18      	it	ne
 8006d0c:	6059      	strne	r1, [r3, #4]
 8006d0e:	6863      	ldr	r3, [r4, #4]
 8006d10:	bf08      	it	eq
 8006d12:	6031      	streq	r1, [r6, #0]
 8006d14:	5162      	str	r2, [r4, r5]
 8006d16:	604b      	str	r3, [r1, #4]
 8006d18:	4638      	mov	r0, r7
 8006d1a:	f104 060b 	add.w	r6, r4, #11
 8006d1e:	f000 f853 	bl	8006dc8 <__malloc_unlock>
 8006d22:	f026 0607 	bic.w	r6, r6, #7
 8006d26:	1d23      	adds	r3, r4, #4
 8006d28:	1af2      	subs	r2, r6, r3
 8006d2a:	d0b6      	beq.n	8006c9a <_malloc_r+0x22>
 8006d2c:	1b9b      	subs	r3, r3, r6
 8006d2e:	50a3      	str	r3, [r4, r2]
 8006d30:	e7b3      	b.n	8006c9a <_malloc_r+0x22>
 8006d32:	6862      	ldr	r2, [r4, #4]
 8006d34:	42a3      	cmp	r3, r4
 8006d36:	bf0c      	ite	eq
 8006d38:	6032      	streq	r2, [r6, #0]
 8006d3a:	605a      	strne	r2, [r3, #4]
 8006d3c:	e7ec      	b.n	8006d18 <_malloc_r+0xa0>
 8006d3e:	4623      	mov	r3, r4
 8006d40:	6864      	ldr	r4, [r4, #4]
 8006d42:	e7b2      	b.n	8006caa <_malloc_r+0x32>
 8006d44:	4634      	mov	r4, r6
 8006d46:	6876      	ldr	r6, [r6, #4]
 8006d48:	e7b9      	b.n	8006cbe <_malloc_r+0x46>
 8006d4a:	230c      	movs	r3, #12
 8006d4c:	603b      	str	r3, [r7, #0]
 8006d4e:	4638      	mov	r0, r7
 8006d50:	f000 f83a 	bl	8006dc8 <__malloc_unlock>
 8006d54:	e7a1      	b.n	8006c9a <_malloc_r+0x22>
 8006d56:	6025      	str	r5, [r4, #0]
 8006d58:	e7de      	b.n	8006d18 <_malloc_r+0xa0>
 8006d5a:	bf00      	nop
 8006d5c:	200006fc 	.word	0x200006fc

08006d60 <_sbrk_r>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	4d06      	ldr	r5, [pc, #24]	; (8006d7c <_sbrk_r+0x1c>)
 8006d64:	2300      	movs	r3, #0
 8006d66:	4604      	mov	r4, r0
 8006d68:	4608      	mov	r0, r1
 8006d6a:	602b      	str	r3, [r5, #0]
 8006d6c:	f7fa fec0 	bl	8001af0 <_sbrk>
 8006d70:	1c43      	adds	r3, r0, #1
 8006d72:	d102      	bne.n	8006d7a <_sbrk_r+0x1a>
 8006d74:	682b      	ldr	r3, [r5, #0]
 8006d76:	b103      	cbz	r3, 8006d7a <_sbrk_r+0x1a>
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	bd38      	pop	{r3, r4, r5, pc}
 8006d7c:	20000704 	.word	0x20000704

08006d80 <strdup>:
 8006d80:	4b02      	ldr	r3, [pc, #8]	; (8006d8c <strdup+0xc>)
 8006d82:	4601      	mov	r1, r0
 8006d84:	6818      	ldr	r0, [r3, #0]
 8006d86:	f000 b803 	b.w	8006d90 <_strdup_r>
 8006d8a:	bf00      	nop
 8006d8c:	2000009c 	.word	0x2000009c

08006d90 <_strdup_r>:
 8006d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d92:	4604      	mov	r4, r0
 8006d94:	4608      	mov	r0, r1
 8006d96:	460d      	mov	r5, r1
 8006d98:	f7f9 fa20 	bl	80001dc <strlen>
 8006d9c:	1c42      	adds	r2, r0, #1
 8006d9e:	4611      	mov	r1, r2
 8006da0:	4620      	mov	r0, r4
 8006da2:	9201      	str	r2, [sp, #4]
 8006da4:	f7ff ff68 	bl	8006c78 <_malloc_r>
 8006da8:	4604      	mov	r4, r0
 8006daa:	b118      	cbz	r0, 8006db4 <_strdup_r+0x24>
 8006dac:	9a01      	ldr	r2, [sp, #4]
 8006dae:	4629      	mov	r1, r5
 8006db0:	f7ff ff2c 	bl	8006c0c <memcpy>
 8006db4:	4620      	mov	r0, r4
 8006db6:	b003      	add	sp, #12
 8006db8:	bd30      	pop	{r4, r5, pc}
	...

08006dbc <__malloc_lock>:
 8006dbc:	4801      	ldr	r0, [pc, #4]	; (8006dc4 <__malloc_lock+0x8>)
 8006dbe:	f000 b809 	b.w	8006dd4 <__retarget_lock_acquire_recursive>
 8006dc2:	bf00      	nop
 8006dc4:	20000708 	.word	0x20000708

08006dc8 <__malloc_unlock>:
 8006dc8:	4801      	ldr	r0, [pc, #4]	; (8006dd0 <__malloc_unlock+0x8>)
 8006dca:	f000 b804 	b.w	8006dd6 <__retarget_lock_release_recursive>
 8006dce:	bf00      	nop
 8006dd0:	20000708 	.word	0x20000708

08006dd4 <__retarget_lock_acquire_recursive>:
 8006dd4:	4770      	bx	lr

08006dd6 <__retarget_lock_release_recursive>:
 8006dd6:	4770      	bx	lr

08006dd8 <_init>:
 8006dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dda:	bf00      	nop
 8006ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dde:	bc08      	pop	{r3}
 8006de0:	469e      	mov	lr, r3
 8006de2:	4770      	bx	lr

08006de4 <_fini>:
 8006de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de6:	bf00      	nop
 8006de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dea:	bc08      	pop	{r3}
 8006dec:	469e      	mov	lr, r3
 8006dee:	4770      	bx	lr
