
MusicMaster_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a19c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003674  0800a32c  0800a32c  0001a32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9a0  0800d9a0  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800d9a0  0800d9a0  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d9a0  0800d9a0  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9a0  0800d9a0  0001d9a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9a4  0800d9a4  0001d9a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800d9a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          0000072c  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007c4  200007c4  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d3bd  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003700  00000000  00000000  0003d485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001848  00000000  00000000  00040b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001740  00000000  00000000  000423d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021866  00000000  00000000  00043b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e2be  00000000  00000000  00065376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c88c8  00000000  00000000  00083634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014befc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000074f0  00000000  00000000  0014bf4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a314 	.word	0x0800a314

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800a314 	.word	0x0800a314

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2uiz>:
 8000618:	004a      	lsls	r2, r1, #1
 800061a:	d211      	bcs.n	8000640 <__aeabi_d2uiz+0x28>
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000620:	d211      	bcs.n	8000646 <__aeabi_d2uiz+0x2e>
 8000622:	d50d      	bpl.n	8000640 <__aeabi_d2uiz+0x28>
 8000624:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d40e      	bmi.n	800064c <__aeabi_d2uiz+0x34>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	fa23 f002 	lsr.w	r0, r3, r2
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d102      	bne.n	8000652 <__aeabi_d2uiz+0x3a>
 800064c:	f04f 30ff 	mov.w	r0, #4294967295
 8000650:	4770      	bx	lr
 8000652:	f04f 0000 	mov.w	r0, #0
 8000656:	4770      	bx	lr

08000658 <hashString>:
	struct DictionaryNode **buckets;
	int size;
};

// Hash function for string keys
unsigned int hashString(const char *key, int size) {
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
	unsigned int hash = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
	while (*key) {
 8000666:	e007      	b.n	8000678 <hashString+0x20>
		hash = (hash << 5) + *key++;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	015a      	lsls	r2, r3, #5
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	1c59      	adds	r1, r3, #1
 8000670:	6079      	str	r1, [r7, #4]
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	4413      	add	r3, r2
 8000676:	60fb      	str	r3, [r7, #12]
	while (*key) {
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1f3      	bne.n	8000668 <hashString+0x10>
	}
	return hash % size;
 8000680:	683a      	ldr	r2, [r7, #0]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	fbb3 f1f2 	udiv	r1, r3, r2
 8000688:	fb01 f202 	mul.w	r2, r1, r2
 800068c:	1a9b      	subs	r3, r3, r2
}
 800068e:	4618      	mov	r0, r3
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <initDictionary>:

// Initialize dictionary
Dictionary* initDictionary(int size) {
 800069a:	b580      	push	{r7, lr}
 800069c:	b084      	sub	sp, #16
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
	Dictionary *dict = malloc(sizeof(Dictionary));
 80006a2:	2008      	movs	r0, #8
 80006a4:	f008 fbba 	bl	8008e1c <malloc>
 80006a8:	4603      	mov	r3, r0
 80006aa:	60bb      	str	r3, [r7, #8]
	dict->buckets = malloc(size * sizeof(struct DictionaryNode*));
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f008 fbb3 	bl	8008e1c <malloc>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	601a      	str	r2, [r3, #0]
	dict->size = size;
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < size; i++) {
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e009      	b.n	80006de <initDictionary+0x44>
		dict->buckets[i] = NULL;
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	4413      	add	r3, r2
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < size; i++) {
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	3301      	adds	r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	dbf1      	blt.n	80006ca <initDictionary+0x30>
	}
	return dict;
 80006e6:	68bb      	ldr	r3, [r7, #8]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <insert>:

// Insert key-value pair into dictionary
void insert(Dictionary *dict, const char *stringKey, struct Tone *tones,
		int numTones) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
 80006fc:	603b      	str	r3, [r7, #0]
	unsigned int index;
	struct DictionaryNode *newNode = malloc(sizeof(struct DictionaryNode));
 80006fe:	2014      	movs	r0, #20
 8000700:	f008 fb8c 	bl	8008e1c <malloc>
 8000704:	4603      	mov	r3, r0
 8000706:	613b      	str	r3, [r7, #16]
	newNode->stringKey = strdup(stringKey);
 8000708:	68b8      	ldr	r0, [r7, #8]
 800070a:	f008 fd35 	bl	8009178 <strdup>
 800070e:	4603      	mov	r3, r0
 8000710:	461a      	mov	r2, r3
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	601a      	str	r2, [r3, #0]
	newNode->tones = malloc(numTones * sizeof(struct Tone));
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	4618      	mov	r0, r3
 800071c:	f008 fb7e 	bl	8008e1c <malloc>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	605a      	str	r2, [r3, #4]
	memcpy(newNode->tones, tones, numTones * sizeof(struct Tone));
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	6858      	ldr	r0, [r3, #4]
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	00db      	lsls	r3, r3, #3
 8000730:	461a      	mov	r2, r3
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	f008 fb7a 	bl	8008e2c <memcpy>
	newNode->numTones = numTones;
 8000738:	693b      	ldr	r3, [r7, #16]
 800073a:	683a      	ldr	r2, [r7, #0]
 800073c:	609a      	str	r2, [r3, #8]
	newNode->black_listed = 0;
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]

	if (stringKey != NULL) {
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d006      	beq.n	8000758 <insert+0x68>
		index = hashString(stringKey, dict->size);
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	4619      	mov	r1, r3
 8000750:	68b8      	ldr	r0, [r7, #8]
 8000752:	f7ff ff81 	bl	8000658 <hashString>
 8000756:	6178      	str	r0, [r7, #20]
	}

	newNode->next = dict->buckets[index];
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	4413      	add	r3, r2
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	611a      	str	r2, [r3, #16]
	dict->buckets[index] = newNode;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4413      	add	r3, r2
 8000772:	693a      	ldr	r2, [r7, #16]
 8000774:	601a      	str	r2, [r3, #0]
}
 8000776:	bf00      	nop
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <lookup>:

// Lookup value by key
struct Tone* lookup(Dictionary *dict, const char *stringKey, int *numTones,
		struct DictionaryNode **node) {
 800077e:	b580      	push	{r7, lr}
 8000780:	b086      	sub	sp, #24
 8000782:	af00      	add	r7, sp, #0
 8000784:	60f8      	str	r0, [r7, #12]
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	607a      	str	r2, [r7, #4]
 800078a:	603b      	str	r3, [r7, #0]
	unsigned int index;
	struct DictionaryNode *current;

	if (stringKey != NULL) {
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d02b      	beq.n	80007ea <lookup+0x6c>
		index = hashString(stringKey, dict->size);
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	4619      	mov	r1, r3
 8000798:	68b8      	ldr	r0, [r7, #8]
 800079a:	f7ff ff5d 	bl	8000658 <hashString>
 800079e:	6138      	str	r0, [r7, #16]
		current = dict->buckets[index];
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	693b      	ldr	r3, [r7, #16]
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4413      	add	r3, r2
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	617b      	str	r3, [r7, #20]
		while (current) {
 80007ae:	e019      	b.n	80007e4 <lookup+0x66>
			if (current->stringKey
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d012      	beq.n	80007de <lookup+0x60>
					&& strcmp(current->stringKey, stringKey) == 0) {
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	68b9      	ldr	r1, [r7, #8]
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fd06 	bl	80001d0 <strcmp>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d109      	bne.n	80007de <lookup+0x60>
				*numTones = current->numTones;
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	689a      	ldr	r2, [r3, #8]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	601a      	str	r2, [r3, #0]
				*node = current;
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	697a      	ldr	r2, [r7, #20]
 80007d6:	601a      	str	r2, [r3, #0]
				return current->tones;
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	e009      	b.n	80007f2 <lookup+0x74>
			}
			current = current->next;
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	691b      	ldr	r3, [r3, #16]
 80007e2:	617b      	str	r3, [r7, #20]
		while (current) {
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d1e2      	bne.n	80007b0 <lookup+0x32>
		}
	}

	*numTones = 0;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
	return NULL;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <getDictSize>:

int getDictSize(Dictionary *dict) {
 80007fa:	b480      	push	{r7}
 80007fc:	b083      	sub	sp, #12
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
	return dict->size;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	685b      	ldr	r3, [r3, #4]
}
 8000806:	4618      	mov	r0, r3
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <setBlacklisted>:

// Function to set black_listed flag on
void setBlacklisted(struct DictionaryNode *node) {
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
    node->black_listed = 1;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2201      	movs	r2, #1
 800081e:	60da      	str	r2, [r3, #12]
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <unsetBlacklisted>:

// Function to set black_listed flag off
void unsetBlacklisted(struct DictionaryNode *node) {
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
    node->black_listed = 0;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <isBlacklisted>:

// Function to check if a node is blacklisted
int isBlacklisted(struct DictionaryNode *node) {
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
    return node->black_listed;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	68db      	ldr	r3, [r3, #12]
}
 8000852:	4618      	mov	r0, r3
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
	...

08000860 <initializePlaylistOrder>:
#define REST      0

struct Dictionary *playlist = NULL;
char **playlistOrder;

void initializePlaylistOrder() {
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
    playlistOrder = (char **)malloc(10 * sizeof(char *));
 8000864:	2028      	movs	r0, #40	; 0x28
 8000866:	f008 fad9 	bl	8008e1c <malloc>
 800086a:	4603      	mov	r3, r0
 800086c:	461a      	mov	r2, r3
 800086e:	4b02      	ldr	r3, [pc, #8]	; (8000878 <initializePlaylistOrder+0x18>)
 8000870:	601a      	str	r2, [r3, #0]
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200000b8 	.word	0x200000b8

0800087c <initTonesDictionary>:

void initTonesDictionary() {
 800087c:	b580      	push	{r7, lr}
 800087e:	f5ad 5d50 	sub.w	sp, sp, #13312	; 0x3400
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
    playlist = initDictionary(6);
 8000886:	2006      	movs	r0, #6
 8000888:	f7ff ff07 	bl	800069a <initDictionary>
 800088c:	4603      	mov	r3, r0
 800088e:	4a5b      	ldr	r2, [pc, #364]	; (80009fc <initTonesDictionary+0x180>)
 8000890:	6013      	str	r3, [r2, #0]
    initializePlaylistOrder();
 8000892:	f7ff ffe5 	bl	8000860 <initializePlaylistOrder>
    playlistOrder[0] = "super_mario_bros";
 8000896:	4b5a      	ldr	r3, [pc, #360]	; (8000a00 <initTonesDictionary+0x184>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a5a      	ldr	r2, [pc, #360]	; (8000a04 <initTonesDictionary+0x188>)
 800089c:	601a      	str	r2, [r3, #0]
    playlistOrder[1] = "hedwig_theme";
 800089e:	4b58      	ldr	r3, [pc, #352]	; (8000a00 <initTonesDictionary+0x184>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	3304      	adds	r3, #4
 80008a4:	4a58      	ldr	r2, [pc, #352]	; (8000a08 <initTonesDictionary+0x18c>)
 80008a6:	601a      	str	r2, [r3, #0]
    playlistOrder[2] = "doom";
 80008a8:	4b55      	ldr	r3, [pc, #340]	; (8000a00 <initTonesDictionary+0x184>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	3308      	adds	r3, #8
 80008ae:	4a57      	ldr	r2, [pc, #348]	; (8000a0c <initTonesDictionary+0x190>)
 80008b0:	601a      	str	r2, [r3, #0]
    playlistOrder[3] = "fur_elise";
 80008b2:	4b53      	ldr	r3, [pc, #332]	; (8000a00 <initTonesDictionary+0x184>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	330c      	adds	r3, #12
 80008b8:	4a55      	ldr	r2, [pc, #340]	; (8000a10 <initTonesDictionary+0x194>)
 80008ba:	601a      	str	r2, [r3, #0]
    playlistOrder[4] = "tetris";
 80008bc:	4b50      	ldr	r3, [pc, #320]	; (8000a00 <initTonesDictionary+0x184>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	3310      	adds	r3, #16
 80008c2:	4a54      	ldr	r2, [pc, #336]	; (8000a14 <initTonesDictionary+0x198>)
 80008c4:	601a      	str	r2, [r3, #0]
    playlistOrder[5] = "tokyo_drift";
 80008c6:	4b4e      	ldr	r3, [pc, #312]	; (8000a00 <initTonesDictionary+0x184>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	3314      	adds	r3, #20
 80008cc:	4a52      	ldr	r2, [pc, #328]	; (8000a18 <initTonesDictionary+0x19c>)
 80008ce:	601a      	str	r2, [r3, #0]

    // Example tones
    struct Tone super_mario_bros[]={{2637,306},{0,153},{2637,153},{0,153},{2093,153},{2637,153},{0,153},{3136,153},{0,459},{1586,153},{0,459},{2093,153},{0,306},{1586,153},{0,306},{1319,153},{0,306},{1760,153},{0,153},{1976,153},{0,153},{1865,153},{1760,153},{0,153},{1586,204},{2637,204},{3136,204},{3520,153},{0,153},{2794,153},{3136,153},{0,153},{2637,153},{0,153},{2093,153},{2349,153},{1976,153},{0,306},{2093,153},{0,306},{1586,153},{0,306},{1319,153},{0,306},{1760,153},{0,153},{1976,153},{0,153},{1865,153},{1760,153},{0,153},{1586,204},{2637,204},{3136,204},{3520,153},{0,153},{2794,153},{3136,153},{0,153},{2637,153},{0,153},{2093,153},{2349,153},{1976,153},{0,0}};
 80008d0:	f507 5350 	add.w	r3, r7, #13312	; 0x3400
 80008d4:	f103 0318 	add.w	r3, r3, #24
 80008d8:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80008dc:	4a4f      	ldr	r2, [pc, #316]	; (8000a1c <initTonesDictionary+0x1a0>)
 80008de:	4618      	mov	r0, r3
 80008e0:	4611      	mov	r1, r2
 80008e2:	f44f 7302 	mov.w	r3, #520	; 0x208
 80008e6:	461a      	mov	r2, r3
 80008e8:	f008 faa0 	bl	8008e2c <memcpy>
    struct Tone hedwig_theme[]={{REST,750},{NOTE_D4,374},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_G4,750},{NOTE_D5,374},{NOTE_C5,1124},{NOTE_A4,1124},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_F4,750},{NOTE_GS4,374},{NOTE_D4,2249},{NOTE_D4,374},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_G4,750},{NOTE_D5,374},{NOTE_F5,750},{NOTE_E5,374},{NOTE_DS5,750},{NOTE_B4,374},{NOTE_DS5,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_B4,374},{NOTE_G4,2249},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_DS5,750},{NOTE_D5,374},{NOTE_CS5,750},{NOTE_A4,374},{NOTE_AS4,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_D4,374},{NOTE_D5,1700},{REST,150},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_F5,750},{NOTE_E5,374},{NOTE_DS5,750},{NOTE_B4,374},{NOTE_DS5,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_AS4,374},{NOTE_G4,2249},{0,0}};
 80008ec:	f507 5350 	add.w	r3, r7, #13312	; 0x3400
 80008f0:	f103 0318 	add.w	r3, r3, #24
 80008f4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80008f8:	4a49      	ldr	r2, [pc, #292]	; (8000a20 <initTonesDictionary+0x1a4>)
 80008fa:	4618      	mov	r0, r3
 80008fc:	4611      	mov	r1, r2
 80008fe:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000902:	461a      	mov	r2, r3
 8000904:	f008 fa92 	bl	8008e2c <memcpy>
    struct Tone doom[]={{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_FS3,67},{NOTE_D3,67},{NOTE_B2,67},{NOTE_A3,67},{NOTE_FS3,67},{NOTE_B2,67},{NOTE_D3,67},{NOTE_FS3,67},{NOTE_A3,67},{NOTE_FS3,67},{NOTE_D3,67},{NOTE_B2,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B3,67},{NOTE_G3,67},{NOTE_E3,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_B3,67},{NOTE_G4,67},{NOTE_B4,67},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_E3,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,534},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_E3,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_C4,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_CS4,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_B3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_A3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_G3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_GS3,133},{NOTE_A3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_B3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_A3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_G3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_F3,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B3,67},{NOTE_G3,67},{NOTE_E3,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_B3,67},{NOTE_G4,67},{NOTE_B4,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{0,0}};
 8000908:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 800090c:	f103 0318 	add.w	r3, r3, #24
 8000910:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000914:	4a43      	ldr	r2, [pc, #268]	; (8000a24 <initTonesDictionary+0x1a8>)
 8000916:	4618      	mov	r0, r3
 8000918:	4611      	mov	r1, r2
 800091a:	f44f 6351 	mov.w	r3, #3344	; 0xd10
 800091e:	461a      	mov	r2, r3
 8000920:	f008 fa84 	bl	8008e2c <memcpy>
    struct Tone fur_elise[] = {{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,750},{REST,250},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_C5,188},{NOTE_C5,188},{NOTE_C5,188},{NOTE_C5,750},{NOTE_F5,282},{NOTE_E5,94},{NOTE_E5,250},{NOTE_D5,250},{NOTE_AS5,282},{NOTE_A5,94},{NOTE_A5,188},{NOTE_G5,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_AS4,250},{NOTE_A4,250},{NOTE_A4,94},{NOTE_G4,94},{NOTE_A4,94},{NOTE_B4,94},{NOTE_C5,750},{NOTE_D5,188},{NOTE_DS5,188},{NOTE_E5,375},{NOTE_E5,188},{NOTE_F5,188},{NOTE_A4,188},{NOTE_C5,750},{NOTE_D5,282},{NOTE_B4,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_G4,94},{NOTE_G5,94},{NOTE_A4,94},{NOTE_G5,94},{NOTE_B4,94},{NOTE_G5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_E5,94},{NOTE_G5,94},{NOTE_C6,94},{NOTE_B5,94},{NOTE_A5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_D5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_G4,94},{NOTE_G5,94},{NOTE_A4,94},{NOTE_G5,94},{NOTE_B4,94},{NOTE_G5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_E5,94},{NOTE_G5,94},{NOTE_C6,94},{NOTE_B5,94},{NOTE_A5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_D5,94},{NOTE_E5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,94},{NOTE_B4,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,94},{NOTE_B4,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,375},{NOTE_B4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,375},{NOTE_B4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{REST,188},{REST,250},{NOTE_CS5,1125},{NOTE_D5,750},{NOTE_E5,188},{NOTE_F5,188},{NOTE_F5,750},{NOTE_F5,250},{NOTE_E5,1125},{NOTE_D5,750},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,750},{NOTE_A4,250},{NOTE_A4,250},{NOTE_C5,250},{NOTE_B4,250},{NOTE_A4,1125},{NOTE_CS5,1125},{NOTE_D5,750},{NOTE_E5,188},{NOTE_F5,188},{NOTE_F5,750},{NOTE_F5,250},{NOTE_F5,1125},{NOTE_DS5,750},{NOTE_D5,188},{NOTE_C5,188},{NOTE_AS4,750},{NOTE_A4,250},{NOTE_GS4,750},{NOTE_G4,250},{NOTE_A4,1125},{NOTE_B4,750},{REST,250},{NOTE_A3,141},{NOTE_C4,141},{NOTE_E4,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_D5,141},{NOTE_C5,141},{NOTE_B4,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_A5,141},{NOTE_C6,141},{NOTE_E6,141},{NOTE_D6,141},{NOTE_C6,141},{NOTE_B5,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_A5,141},{NOTE_C6,141},{NOTE_E6,141},{NOTE_D6,141},{NOTE_C6,141},{NOTE_B5,141},{NOTE_AS5,141},{NOTE_A5,141},{NOTE_GS5,141},{NOTE_G5,141},{NOTE_FS5,141},{NOTE_F5,141},{NOTE_E5,141},{NOTE_DS5,141},{NOTE_D5,141},{NOTE_CS5,141},{NOTE_C5,141},{NOTE_B4,141},{NOTE_AS4,141},{NOTE_A4,141},{NOTE_GS4,141},{NOTE_G4,141},{NOTE_FS4,141},{NOTE_F4,141},{NOTE_E4,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,375},{REST,375},{REST,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,750},{REST,250},{REST,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_E5,250},{NOTE_E5,250},{NOTE_E6,375},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,1125},{0,0}};
 8000924:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8000928:	f103 0318 	add.w	r3, r3, #24
 800092c:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8000930:	4a3d      	ldr	r2, [pc, #244]	; (8000a28 <initTonesDictionary+0x1ac>)
 8000932:	4618      	mov	r0, r3
 8000934:	4611      	mov	r1, r2
 8000936:	f44f 5397 	mov.w	r3, #4832	; 0x12e0
 800093a:	461a      	mov	r2, r3
 800093c:	f008 fa76 	bl	8008e2c <memcpy>
    struct Tone tetris[] = {{NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 834}, {NOTE_A4, 834}, {NOTE_GS4, 834}, {NOTE_B4, 417}, {REST, 208}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 417}, {NOTE_E5, 417}, {NOTE_A5, 834}, {NOTE_GS5, 834},{NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 834}, {NOTE_A4, 834}, {NOTE_GS4, 834}, {NOTE_B4, 417}, {REST, 208}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 417}, {NOTE_E5, 417}, {NOTE_A5, 834}, {NOTE_GS5, 834},{NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 834}, {NOTE_A4, 834}, {NOTE_GS4, 834}, {NOTE_B4, 417}, {REST, 208}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 417}, {NOTE_E5, 417}, {NOTE_A5, 834}, {NOTE_GS5, 834},{0,0}};
 8000940:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8000944:	f103 0318 	add.w	r3, r3, #24
 8000948:	f5a3 6354 	sub.w	r3, r3, #3392	; 0xd40
 800094c:	4a37      	ldr	r2, [pc, #220]	; (8000a2c <initTonesDictionary+0x1b0>)
 800094e:	4618      	mov	r0, r3
 8000950:	4611      	mov	r1, r2
 8000952:	f44f 6315 	mov.w	r3, #2384	; 0x950
 8000956:	461a      	mov	r2, r3
 8000958:	f008 fa68 	bl	8008e2c <memcpy>
    struct Tone tokyo_drift[]={{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,500},{NOTE_B4,500},{NOTE_DS5,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{REST,0},{REST,0},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,500},{NOTE_B4,500},{NOTE_DS5,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{REST,0},{REST,0},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,500},{NOTE_B4,500},{NOTE_DS5,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{REST,0},{REST,0}};
 800095c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000960:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000964:	4a32      	ldr	r2, [pc, #200]	; (8000a30 <initTonesDictionary+0x1b4>)
 8000966:	4618      	mov	r0, r3
 8000968:	4611      	mov	r1, r2
 800096a:	f44f 63db 	mov.w	r3, #1752	; 0x6d8
 800096e:	461a      	mov	r2, r3
 8000970:	f008 fa5c 	bl	8008e2c <memcpy>
    // Insert tones into dictionary
    insert(playlist, "super_mario_bros", super_mario_bros, sizeof(super_mario_bros) / sizeof(struct Tone));
 8000974:	4b21      	ldr	r3, [pc, #132]	; (80009fc <initTonesDictionary+0x180>)
 8000976:	6818      	ldr	r0, [r3, #0]
 8000978:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 800097c:	f102 0210 	add.w	r2, r2, #16
 8000980:	2341      	movs	r3, #65	; 0x41
 8000982:	4920      	ldr	r1, [pc, #128]	; (8000a04 <initTonesDictionary+0x188>)
 8000984:	f7ff feb4 	bl	80006f0 <insert>
    insert(playlist, "hedwig_theme", hedwig_theme, sizeof(hedwig_theme) / sizeof(struct Tone));
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <initTonesDictionary+0x180>)
 800098a:	6818      	ldr	r0, [r3, #0]
 800098c:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 8000990:	f102 0218 	add.w	r2, r2, #24
 8000994:	233f      	movs	r3, #63	; 0x3f
 8000996:	491c      	ldr	r1, [pc, #112]	; (8000a08 <initTonesDictionary+0x18c>)
 8000998:	f7ff feaa 	bl	80006f0 <insert>
    insert(playlist, "doom", doom, sizeof(doom) / sizeof(struct Tone));
 800099c:	4b17      	ldr	r3, [pc, #92]	; (80009fc <initTonesDictionary+0x180>)
 800099e:	6818      	ldr	r0, [r3, #0]
 80009a0:	f507 520c 	add.w	r2, r7, #8960	; 0x2300
 80009a4:	f102 0218 	add.w	r2, r2, #24
 80009a8:	3a10      	subs	r2, #16
 80009aa:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
 80009ae:	4917      	ldr	r1, [pc, #92]	; (8000a0c <initTonesDictionary+0x190>)
 80009b0:	f7ff fe9e 	bl	80006f0 <insert>
    insert(playlist, "fur_elise", fur_elise, sizeof(fur_elise) / sizeof(struct Tone));
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <initTonesDictionary+0x180>)
 80009b6:	6818      	ldr	r0, [r3, #0]
 80009b8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80009bc:	f102 0218 	add.w	r2, r2, #24
 80009c0:	3a30      	subs	r2, #48	; 0x30
 80009c2:	f44f 7317 	mov.w	r3, #604	; 0x25c
 80009c6:	4912      	ldr	r1, [pc, #72]	; (8000a10 <initTonesDictionary+0x194>)
 80009c8:	f7ff fe92 	bl	80006f0 <insert>
    insert(playlist, "tetris", tetris, sizeof(tetris) / sizeof(struct Tone));
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <initTonesDictionary+0x180>)
 80009ce:	6818      	ldr	r0, [r3, #0]
 80009d0:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 80009d4:	f44f 7395 	mov.w	r3, #298	; 0x12a
 80009d8:	490e      	ldr	r1, [pc, #56]	; (8000a14 <initTonesDictionary+0x198>)
 80009da:	f7ff fe89 	bl	80006f0 <insert>
    insert(playlist, "tokyo_drift", tokyo_drift, sizeof(tokyo_drift) / sizeof(struct Tone));
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <initTonesDictionary+0x180>)
 80009e0:	6818      	ldr	r0, [r3, #0]
 80009e2:	f107 0218 	add.w	r2, r7, #24
 80009e6:	3a18      	subs	r2, #24
 80009e8:	23db      	movs	r3, #219	; 0xdb
 80009ea:	490b      	ldr	r1, [pc, #44]	; (8000a18 <initTonesDictionary+0x19c>)
 80009ec:	f7ff fe80 	bl	80006f0 <insert>
}
 80009f0:	bf00      	nop
 80009f2:	f507 5750 	add.w	r7, r7, #13312	; 0x3400
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200000b4 	.word	0x200000b4
 8000a00:	200000b8 	.word	0x200000b8
 8000a04:	0800a32c 	.word	0x0800a32c
 8000a08:	0800a340 	.word	0x0800a340
 8000a0c:	0800a350 	.word	0x0800a350
 8000a10:	0800a358 	.word	0x0800a358
 8000a14:	0800a364 	.word	0x0800a364
 8000a18:	0800a36c 	.word	0x0800a36c
 8000a1c:	0800a378 	.word	0x0800a378
 8000a20:	0800a580 	.word	0x0800a580
 8000a24:	0800a778 	.word	0x0800a778
 8000a28:	0800b488 	.word	0x0800b488
 8000a2c:	0800c768 	.word	0x0800c768
 8000a30:	0800d0b8 	.word	0x0800d0b8

08000a34 <extractNumber>:
};
enum ProgramMode programMode = Shuffle;

//UART BEGIN
//Function to extract music number from Set_Music()
void extractNumber(const uint8_t *data) {
 8000a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a38:	b089      	sub	sp, #36	; 0x24
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
 8000a3e:	466b      	mov	r3, sp
 8000a40:	461e      	mov	r6, r3
	int helper[digit_count(getDictSize(playlist))];
 8000a42:	4b52      	ldr	r3, [pc, #328]	; (8000b8c <extractNumber+0x158>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fed7 	bl	80007fa <getDictSize>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 fa58 	bl	8000f04 <digit_count>
 8000a54:	4601      	mov	r1, r0
 8000a56:	1e4b      	subs	r3, r1, #1
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	460a      	mov	r2, r1
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	4690      	mov	r8, r2
 8000a60:	4699      	mov	r9, r3
 8000a62:	f04f 0200 	mov.w	r2, #0
 8000a66:	f04f 0300 	mov.w	r3, #0
 8000a6a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000a6e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000a72:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000a76:	460a      	mov	r2, r1
 8000a78:	2300      	movs	r3, #0
 8000a7a:	4614      	mov	r4, r2
 8000a7c:	461d      	mov	r5, r3
 8000a7e:	f04f 0200 	mov.w	r2, #0
 8000a82:	f04f 0300 	mov.w	r3, #0
 8000a86:	016b      	lsls	r3, r5, #5
 8000a88:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000a8c:	0162      	lsls	r2, r4, #5
 8000a8e:	460b      	mov	r3, r1
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	3307      	adds	r3, #7
 8000a94:	08db      	lsrs	r3, r3, #3
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	ebad 0d03 	sub.w	sp, sp, r3
 8000a9c:	466b      	mov	r3, sp
 8000a9e:	3303      	adds	r3, #3
 8000aa0:	089b      	lsrs	r3, r3, #2
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	613b      	str	r3, [r7, #16]
	int flag = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
	if (data[10 + digit_count(getDictSize(playlist))] == ')'
 8000aaa:	4b38      	ldr	r3, [pc, #224]	; (8000b8c <extractNumber+0x158>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fea3 	bl	80007fa <getDictSize>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 fa24 	bl	8000f04 <digit_count>
 8000abc:	4603      	mov	r3, r0
 8000abe:	330a      	adds	r3, #10
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b29      	cmp	r3, #41	; 0x29
 8000aca:	d154      	bne.n	8000b76 <extractNumber+0x142>
			&& (data[10] != '0')) {
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	330a      	adds	r3, #10
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b30      	cmp	r3, #48	; 0x30
 8000ad4:	d04f      	beq.n	8000b76 <extractNumber+0x142>
		for (int i = 10; i < 10 + digit_count(getDictSize(playlist)); i++) {
 8000ad6:	230a      	movs	r3, #10
 8000ad8:	61fb      	str	r3, [r7, #28]
 8000ada:	e01e      	b.n	8000b1a <extractNumber+0xe6>
			if (data[i] <= '9' && data[i] >= '0') {
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b39      	cmp	r3, #57	; 0x39
 8000ae6:	d815      	bhi.n	8000b14 <extractNumber+0xe0>
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b2f      	cmp	r3, #47	; 0x2f
 8000af2:	d90f      	bls.n	8000b14 <extractNumber+0xe0>
				helper[i - 10] = data[i] - '0';
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	f1a3 020a 	sub.w	r2, r3, #10
 8000b04:	3930      	subs	r1, #48	; 0x30
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int i = 10; i < 10 + digit_count(getDictSize(playlist)); i++) {
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	61fb      	str	r3, [r7, #28]
 8000b12:	e002      	b.n	8000b1a <extractNumber+0xe6>
			} else {
				flag = 1;
 8000b14:	2301      	movs	r3, #1
 8000b16:	61bb      	str	r3, [r7, #24]
				break;
 8000b18:	e00d      	b.n	8000b36 <extractNumber+0x102>
		for (int i = 10; i < 10 + digit_count(getDictSize(playlist)); i++) {
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <extractNumber+0x158>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fe6b 	bl	80007fa <getDictSize>
 8000b24:	4603      	mov	r3, r0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f9ec 	bl	8000f04 <digit_count>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	3309      	adds	r3, #9
 8000b30:	69fa      	ldr	r2, [r7, #28]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	ddd2      	ble.n	8000adc <extractNumber+0xa8>
			}
		}
		if (!flag) {
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d11c      	bne.n	8000b76 <extractNumber+0x142>
			int num = array_to_number(helper,
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <extractNumber+0x158>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fe5a 	bl	80007fa <getDictSize>
 8000b46:	4603      	mov	r3, r0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 f9db 	bl	8000f04 <digit_count>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	4619      	mov	r1, r3
 8000b52:	6938      	ldr	r0, [r7, #16]
 8000b54:	f000 fa30 	bl	8000fb8 <array_to_number>
 8000b58:	60f8      	str	r0, [r7, #12]
					digit_count(getDictSize(playlist)));
			if (num <= getDictSize(playlist)) {
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <extractNumber+0x158>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fe4b 	bl	80007fa <getDictSize>
 8000b64:	4602      	mov	r2, r0
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	dc04      	bgt.n	8000b76 <extractNumber+0x142>
				set_music(num);
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	f000 fb7b 	bl	8001268 <set_music>
 8000b72:	46b5      	mov	sp, r6
 8000b74:	e005      	b.n	8000b82 <extractNumber+0x14e>
				return;
			}
		}
	}
	HAL_UART_Transmit_IT(&huart1, "[ERROR][Music not found][XX:XX]", 17);
 8000b76:	2211      	movs	r2, #17
 8000b78:	4905      	ldr	r1, [pc, #20]	; (8000b90 <extractNumber+0x15c>)
 8000b7a:	4806      	ldr	r0, [pc, #24]	; (8000b94 <extractNumber+0x160>)
 8000b7c:	f006 fdf4 	bl	8007768 <HAL_UART_Transmit_IT>
 8000b80:	46b5      	mov	sp, r6
//failed
}
 8000b82:	3724      	adds	r7, #36	; 0x24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200000b4 	.word	0x200000b4
 8000b90:	0800d790 	.word	0x0800d790
 8000b94:	2000025c 	.word	0x2000025c

08000b98 <compareStrings>:

int compareStrings(const char *str1, const uint8_t *str2, int n) {
 8000b98:	b480      	push	{r7}
 8000b9a:	b087      	sub	sp, #28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < n; i++) {
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	e00e      	b.n	8000bc8 <compareStrings+0x30>
		if (str1[i] != str2[i]) {
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	4413      	add	r3, r2
 8000bb0:	781a      	ldrb	r2, [r3, #0]
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	68b9      	ldr	r1, [r7, #8]
 8000bb6:	440b      	add	r3, r1
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d001      	beq.n	8000bc2 <compareStrings+0x2a>
			return 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e007      	b.n	8000bd2 <compareStrings+0x3a>
	for (int i = 0; i < n; i++) {
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	697a      	ldr	r2, [r7, #20]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	dbec      	blt.n	8000baa <compareStrings+0x12>
		}
	}
	return 1;
 8000bd0:	2301      	movs	r3, #1
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	371c      	adds	r7, #28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <HAL_UART_RxCpltCallback>:

uint8_t data[100];
uint8_t d;
uint8_t i;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a34      	ldr	r2, [pc, #208]	; (8000cc0 <HAL_UART_RxCpltCallback+0xe0>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d161      	bne.n	8000cb6 <HAL_UART_RxCpltCallback+0xd6>
		HAL_UART_Receive_IT(&huart1, &d, 1);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4933      	ldr	r1, [pc, #204]	; (8000cc4 <HAL_UART_RxCpltCallback+0xe4>)
 8000bf6:	4834      	ldr	r0, [pc, #208]	; (8000cc8 <HAL_UART_RxCpltCallback+0xe8>)
 8000bf8:	f006 fe14 	bl	8007824 <HAL_UART_Receive_IT>
		data[i++] = d;
 8000bfc:	4b33      	ldr	r3, [pc, #204]	; (8000ccc <HAL_UART_RxCpltCallback+0xec>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	1c5a      	adds	r2, r3, #1
 8000c02:	b2d1      	uxtb	r1, r2
 8000c04:	4a31      	ldr	r2, [pc, #196]	; (8000ccc <HAL_UART_RxCpltCallback+0xec>)
 8000c06:	7011      	strb	r1, [r2, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b2e      	ldr	r3, [pc, #184]	; (8000cc4 <HAL_UART_RxCpltCallback+0xe4>)
 8000c0c:	7819      	ldrb	r1, [r3, #0]
 8000c0e:	4b30      	ldr	r3, [pc, #192]	; (8000cd0 <HAL_UART_RxCpltCallback+0xf0>)
 8000c10:	5499      	strb	r1, [r3, r2]
		if (d == '\n') {
 8000c12:	4b2c      	ldr	r3, [pc, #176]	; (8000cc4 <HAL_UART_RxCpltCallback+0xe4>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b0a      	cmp	r3, #10
 8000c18:	d14d      	bne.n	8000cb6 <HAL_UART_RxCpltCallback+0xd6>
			if ((i == 6 && compareStrings(pause, data, 5) == 1)) {
 8000c1a:	4b2c      	ldr	r3, [pc, #176]	; (8000ccc <HAL_UART_RxCpltCallback+0xec>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d110      	bne.n	8000c44 <HAL_UART_RxCpltCallback+0x64>
 8000c22:	2205      	movs	r2, #5
 8000c24:	492a      	ldr	r1, [pc, #168]	; (8000cd0 <HAL_UART_RxCpltCallback+0xf0>)
 8000c26:	482b      	ldr	r0, [pc, #172]	; (8000cd4 <HAL_UART_RxCpltCallback+0xf4>)
 8000c28:	f7ff ffb6 	bl	8000b98 <compareStrings>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d108      	bne.n	8000c44 <HAL_UART_RxCpltCallback+0x64>
				programState = Paused;
 8000c32:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <HAL_UART_RxCpltCallback+0xf8>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart1, "-=MUSIC PAUSED=-\r", 17);
 8000c38:	2211      	movs	r2, #17
 8000c3a:	4928      	ldr	r1, [pc, #160]	; (8000cdc <HAL_UART_RxCpltCallback+0xfc>)
 8000c3c:	4822      	ldr	r0, [pc, #136]	; (8000cc8 <HAL_UART_RxCpltCallback+0xe8>)
 8000c3e:	f006 fd93 	bl	8007768 <HAL_UART_Transmit_IT>
 8000c42:	e035      	b.n	8000cb0 <HAL_UART_RxCpltCallback+0xd0>
			} else if (i == 7 && compareStrings(resume, data, 6) == 1) {
 8000c44:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <HAL_UART_RxCpltCallback+0xec>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b07      	cmp	r3, #7
 8000c4a:	d110      	bne.n	8000c6e <HAL_UART_RxCpltCallback+0x8e>
 8000c4c:	2206      	movs	r2, #6
 8000c4e:	4920      	ldr	r1, [pc, #128]	; (8000cd0 <HAL_UART_RxCpltCallback+0xf0>)
 8000c50:	4823      	ldr	r0, [pc, #140]	; (8000ce0 <HAL_UART_RxCpltCallback+0x100>)
 8000c52:	f7ff ffa1 	bl	8000b98 <compareStrings>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d108      	bne.n	8000c6e <HAL_UART_RxCpltCallback+0x8e>

				programState = Resume;
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <HAL_UART_RxCpltCallback+0xf8>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart1, "-=MUSIC RESUME=-\n", 17);
 8000c62:	2211      	movs	r2, #17
 8000c64:	491f      	ldr	r1, [pc, #124]	; (8000ce4 <HAL_UART_RxCpltCallback+0x104>)
 8000c66:	4818      	ldr	r0, [pc, #96]	; (8000cc8 <HAL_UART_RxCpltCallback+0xe8>)
 8000c68:	f006 fd7e 	bl	8007768 <HAL_UART_Transmit_IT>
 8000c6c:	e020      	b.n	8000cb0 <HAL_UART_RxCpltCallback+0xd0>

			} else if (i == 12 + digit_count(getDictSize(playlist))
 8000c6e:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <HAL_UART_RxCpltCallback+0xec>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	461c      	mov	r4, r3
 8000c74:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <HAL_UART_RxCpltCallback+0x108>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fdbe 	bl	80007fa <getDictSize>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 f93f 	bl	8000f04 <digit_count>
 8000c86:	4603      	mov	r3, r0
 8000c88:	330c      	adds	r3, #12
 8000c8a:	429c      	cmp	r4, r3
 8000c8c:	d10b      	bne.n	8000ca6 <HAL_UART_RxCpltCallback+0xc6>
					&& compareStrings(setMusic, data, 10) == 1) {
 8000c8e:	220a      	movs	r2, #10
 8000c90:	490f      	ldr	r1, [pc, #60]	; (8000cd0 <HAL_UART_RxCpltCallback+0xf0>)
 8000c92:	4816      	ldr	r0, [pc, #88]	; (8000cec <HAL_UART_RxCpltCallback+0x10c>)
 8000c94:	f7ff ff80 	bl	8000b98 <compareStrings>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d103      	bne.n	8000ca6 <HAL_UART_RxCpltCallback+0xc6>
				extractNumber(data);
 8000c9e:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <HAL_UART_RxCpltCallback+0xf0>)
 8000ca0:	f7ff fec8 	bl	8000a34 <extractNumber>
 8000ca4:	e004      	b.n	8000cb0 <HAL_UART_RxCpltCallback+0xd0>

			} else {
				HAL_UART_Transmit_IT(&huart1, "INVALID INPUT\n", 14);
 8000ca6:	220e      	movs	r2, #14
 8000ca8:	4911      	ldr	r1, [pc, #68]	; (8000cf0 <HAL_UART_RxCpltCallback+0x110>)
 8000caa:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <HAL_UART_RxCpltCallback+0xe8>)
 8000cac:	f006 fd5c 	bl	8007768 <HAL_UART_Transmit_IT>
			}

			i = 0;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_UART_RxCpltCallback+0xec>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd90      	pop	{r4, r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40013800 	.word	0x40013800
 8000cc4:	200006c4 	.word	0x200006c4
 8000cc8:	2000025c 	.word	0x2000025c
 8000ccc:	200006c5 	.word	0x200006c5
 8000cd0:	20000660 	.word	0x20000660
 8000cd4:	20000004 	.word	0x20000004
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	0800d7b0 	.word	0x0800d7b0
 8000ce0:	2000000c 	.word	0x2000000c
 8000ce4:	0800d7c4 	.word	0x0800d7c4
 8000ce8:	200000b4 	.word	0x200000b4
 8000cec:	20000014 	.word	0x20000014
 8000cf0:	0800d7d8 	.word	0x0800d7d8

08000cf4 <normalize_adc>:
	CHANGE_MUSIC, CHANGE_VOLUME, NONE
};
enum ADC_FUNCTION adc_function = NONE;

uint32_t normalize_adc(uint32_t adc_value, uint32_t max_adc_value,
		uint32_t playlist_size) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
	if (adc_function == CHANGE_MUSIC) {
 8000d00:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <normalize_adc+0xb0>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d131      	bne.n	8000d6c <normalize_adc+0x78>
		// Calculate the step size
		float step = (float) max_adc_value / (playlist_size);
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	ee07 3a90 	vmov	s15, r3
 8000d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	ee07 3a90 	vmov	s15, r3
 8000d18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d20:	edc7 7a04 	vstr	s15, [r7, #16]
		// Calculate the normalized music number
		uint32_t normalized_number = (uint32_t) ((float) adc_value / step + 0.5); // Adding 0.5 for rounding
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	ee07 3a90 	vmov	s15, r3
 8000d2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d32:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000d36:	ee16 0a90 	vmov	r0, s13
 8000d3a:	f7ff fc15 	bl	8000568 <__aeabi_f2d>
 8000d3e:	f04f 0200 	mov.w	r2, #0
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <normalize_adc+0xb4>)
 8000d44:	f7ff fab2 	bl	80002ac <__adddf3>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4610      	mov	r0, r2
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f7ff fc62 	bl	8000618 <__aeabi_d2uiz>
 8000d54:	4603      	mov	r3, r0
 8000d56:	617b      	str	r3, [r7, #20]
		// Ensure the normalized number is at least 1
		if (normalized_number < 1) {
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <normalize_adc+0x6e>
			normalized_number = 1;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	617b      	str	r3, [r7, #20]
		}
		adc_select = normalized_number;
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	4a11      	ldr	r2, [pc, #68]	; (8000dac <normalize_adc+0xb8>)
 8000d66:	6013      	str	r3, [r2, #0]
		return normalized_number;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	e016      	b.n	8000d9a <normalize_adc+0xa6>
	} else if (adc_function == CHANGE_VOLUME) {
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <normalize_adc+0xb0>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d112      	bne.n	8000d9a <normalize_adc+0xa6>
		adc_value = (adc_value * 101) / max_adc_value;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2265      	movs	r2, #101	; 0x65
 8000d78:	fb03 f202 	mul.w	r2, r3, r2
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d82:	60fb      	str	r3, [r7, #12]
		if (adc_value > 97)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b61      	cmp	r3, #97	; 0x61
 8000d88:	d901      	bls.n	8000d8e <normalize_adc+0x9a>
			adc_value = 100;
 8000d8a:	2364      	movs	r3, #100	; 0x64
 8000d8c:	60fb      	str	r3, [r7, #12]
		volume = adc_value;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <normalize_adc+0xbc>)
 8000d94:	801a      	strh	r2, [r3, #0]
		return adc_value;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	e7ff      	b.n	8000d9a <normalize_adc+0xa6>
	}
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	2000001e 	.word	0x2000001e
 8000da8:	3fe00000 	.word	0x3fe00000
 8000dac:	200005d8 	.word	0x200005d8
 8000db0:	20000024 	.word	0x20000024

08000db4 <denoise_adc>:

int adc_indx = 0;
uint32_t adc_values[50];
int denoise_adc() {
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
	int sum = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 50; i++) {
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	603b      	str	r3, [r7, #0]
 8000dc2:	e009      	b.n	8000dd8 <denoise_adc+0x24>
		sum += adc_values[i];
 8000dc4:	4a0c      	ldr	r2, [pc, #48]	; (8000df8 <denoise_adc+0x44>)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4413      	add	r3, r2
 8000dd0:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 50; i++) {
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	2b31      	cmp	r3, #49	; 0x31
 8000ddc:	ddf2      	ble.n	8000dc4 <denoise_adc+0x10>
	}
	return sum / 50;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a06      	ldr	r2, [pc, #24]	; (8000dfc <denoise_adc+0x48>)
 8000de2:	fb82 1203 	smull	r1, r2, r2, r3
 8000de6:	1112      	asrs	r2, r2, #4
 8000de8:	17db      	asrs	r3, r3, #31
 8000dea:	1ad3      	subs	r3, r2, r3
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	200006cc 	.word	0x200006cc
 8000dfc:	51eb851f 	.word	0x51eb851f

08000e00 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e10:	d128      	bne.n	8000e64 <HAL_ADC_ConvCpltCallback+0x64>
		uint32_t value;
		value = HAL_ADC_GetValue(hadc);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f001 ffc3 	bl	8002d9e <HAL_ADC_GetValue>
 8000e18:	60f8      	str	r0, [r7, #12]
		if (adc_indx < 50)
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <HAL_ADC_ConvCpltCallback+0x6c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b31      	cmp	r3, #49	; 0x31
 8000e20:	dc09      	bgt.n	8000e36 <HAL_ADC_ConvCpltCallback+0x36>
			adc_values[adc_indx++] = value;
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_ADC_ConvCpltCallback+0x6c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	1c5a      	adds	r2, r3, #1
 8000e28:	4910      	ldr	r1, [pc, #64]	; (8000e6c <HAL_ADC_ConvCpltCallback+0x6c>)
 8000e2a:	600a      	str	r2, [r1, #0]
 8000e2c:	4910      	ldr	r1, [pc, #64]	; (8000e70 <HAL_ADC_ConvCpltCallback+0x70>)
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			value = denoise_adc();
			extract_int_to_carrier(
					normalize_adc(value, 4095, getDictSize(playlist)));
		}
	}
}
 8000e34:	e016      	b.n	8000e64 <HAL_ADC_ConvCpltCallback+0x64>
			adc_indx = 0;
 8000e36:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <HAL_ADC_ConvCpltCallback+0x6c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
			value = denoise_adc();
 8000e3c:	f7ff ffba 	bl	8000db4 <denoise_adc>
 8000e40:	4603      	mov	r3, r0
 8000e42:	60fb      	str	r3, [r7, #12]
					normalize_adc(value, 4095, getDictSize(playlist)));
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_ADC_ConvCpltCallback+0x74>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fcd6 	bl	80007fa <getDictSize>
 8000e4e:	4603      	mov	r3, r0
			extract_int_to_carrier(
 8000e50:	461a      	mov	r2, r3
 8000e52:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000e56:	68f8      	ldr	r0, [r7, #12]
 8000e58:	f7ff ff4c 	bl	8000cf4 <normalize_adc>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f870 	bl	8000f44 <extract_int_to_carrier>
}
 8000e64:	bf00      	nop
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200006c8 	.word	0x200006c8
 8000e70:	200006cc 	.word	0x200006cc
 8000e74:	200000b4 	.word	0x200000b4

08000e78 <display_number>:
//ADC End

void display_number(int led_flag, int _number) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOD,
 8000e82:	2201      	movs	r2, #1
 8000e84:	211e      	movs	r1, #30
 8000e86:	4813      	ldr	r0, [pc, #76]	; (8000ed4 <display_number+0x5c>)
 8000e88:	f003 fb1c 	bl	80044c4 <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOD, led[led_flag], DISPLAY_ON);
 8000e8c:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <display_number+0x60>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e94:	2200      	movs	r2, #0
 8000e96:	4619      	mov	r1, r3
 8000e98:	480e      	ldr	r0, [pc, #56]	; (8000ed4 <display_number+0x5c>)
 8000e9a:	f003 fb13 	bl	80044c4 <HAL_GPIO_WritePin>
	if (_number != 0) {
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d009      	beq.n	8000eb8 <display_number+0x40>
		HAL_GPIO_WritePin(GPIOD, digits[_number].pattern, GPIO_PIN_SET);
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	; (8000edc <display_number+0x64>)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	4413      	add	r3, r2
 8000eac:	889b      	ldrh	r3, [r3, #4]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4808      	ldr	r0, [pc, #32]	; (8000ed4 <display_number+0x5c>)
 8000eb4:	f003 fb06 	bl	80044c4 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(GPIOD, digits[_number].anti_pattern, GPIO_PIN_RESET);
 8000eb8:	4a08      	ldr	r2, [pc, #32]	; (8000edc <display_number+0x64>)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	4413      	add	r3, r2
 8000ec0:	88db      	ldrh	r3, [r3, #6]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <display_number+0x5c>)
 8000ec8:	f003 fafc 	bl	80044c4 <HAL_GPIO_WritePin>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	48000c00 	.word	0x48000c00
 8000ed8:	200005e4 	.word	0x200005e4
 8000edc:	2000060c 	.word	0x2000060c

08000ee0 <init_display>:

void init_display() {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
//Reset All Segment Values
	HAL_GPIO_WritePin(GPIOD,
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <init_display+0x20>)
 8000eec:	f003 faea 	bl	80044c4 <HAL_GPIO_WritePin>
	GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_12, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOD,
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	211e      	movs	r1, #30
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <init_display+0x20>)
 8000ef6:	f003 fae5 	bl	80044c4 <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	48000c00 	.word	0x48000c00

08000f04 <digit_count>:

//Carrier is to be displayed on seven segment
int musicNumberSize = 0;
int digit_count(int val) {
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	int i, size = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
	int temp = val;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	60bb      	str	r3, [r7, #8]

	while (temp > 0) {
 8000f14:	e00a      	b.n	8000f2c <digit_count+0x28>
		temp /= 10;
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	4a09      	ldr	r2, [pc, #36]	; (8000f40 <digit_count+0x3c>)
 8000f1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f1e:	1092      	asrs	r2, r2, #2
 8000f20:	17db      	asrs	r3, r3, #31
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	60bb      	str	r3, [r7, #8]
		size++;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
	while (temp > 0) {
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	dcf1      	bgt.n	8000f16 <digit_count+0x12>
	}
	return size;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	66666667 	.word	0x66666667

08000f44 <extract_int_to_carrier>:

void extract_int_to_carrier(int val) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	int i;
	i = digit_count(val) - 1;
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ffd9 	bl	8000f04 <digit_count>
 8000f52:	4603      	mov	r3, r0
 8000f54:	3b01      	subs	r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
	musicNumberSize = digit_count(val);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ffd3 	bl	8000f04 <digit_count>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4a12      	ldr	r2, [pc, #72]	; (8000fac <extract_int_to_carrier+0x68>)
 8000f62:	6013      	str	r3, [r2, #0]

	while (val > 0) {
 8000f64:	e019      	b.n	8000f9a <extract_int_to_carrier+0x56>
		carrier[i--] = val % 10;
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	1e43      	subs	r3, r0, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	6879      	ldr	r1, [r7, #4]
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <extract_int_to_carrier+0x6c>)
 8000f70:	fb83 2301 	smull	r2, r3, r3, r1
 8000f74:	109a      	asrs	r2, r3, #2
 8000f76:	17cb      	asrs	r3, r1, #31
 8000f78:	1ad2      	subs	r2, r2, r3
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	1aca      	subs	r2, r1, r3
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <extract_int_to_carrier+0x70>)
 8000f86:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		val /= 10;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <extract_int_to_carrier+0x6c>)
 8000f8e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f92:	1092      	asrs	r2, r2, #2
 8000f94:	17db      	asrs	r3, r3, #31
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	607b      	str	r3, [r7, #4]
	while (val > 0) {
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	dce2      	bgt.n	8000f66 <extract_int_to_carrier+0x22>
	}
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000794 	.word	0x20000794
 8000fb0:	66666667 	.word	0x66666667
 8000fb4:	200005ec 	.word	0x200005ec

08000fb8 <array_to_number>:

int array_to_number(int *array, int size) {
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
	int number = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < size; i++) {
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	e00f      	b.n	8000fec <array_to_number+0x34>
		number = number * 10 + array[i];
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	4413      	add	r3, r2
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	440b      	add	r3, r1
 8000fe4:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < size; i++) {
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68ba      	ldr	r2, [r7, #8]
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	dbeb      	blt.n	8000fcc <array_to_number+0x14>
	}
	return number;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <get_time>:

//Time since program start

void get_time() {
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
	// Convert milliseconds to seconds
	uint32_t seconds = timePassed / 1000;
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <get_time+0x68>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a18      	ldr	r2, [pc, #96]	; (8001070 <get_time+0x6c>)
 8001010:	fba2 2303 	umull	r2, r3, r2, r3
 8001014:	099b      	lsrs	r3, r3, #6
 8001016:	60fb      	str	r3, [r7, #12]
	// Calculate minutes
	uint32_t minutes = seconds / 60;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4a16      	ldr	r2, [pc, #88]	; (8001074 <get_time+0x70>)
 800101c:	fba2 2303 	umull	r2, r3, r2, r3
 8001020:	095b      	lsrs	r3, r3, #5
 8001022:	60bb      	str	r3, [r7, #8]

	char min_str[3], sec_str[3];
	snprintf(min_str, sizeof(min_str), "%02d", minutes % 60);
 8001024:	68b9      	ldr	r1, [r7, #8]
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <get_time+0x70>)
 8001028:	fba3 2301 	umull	r2, r3, r3, r1
 800102c:	095a      	lsrs	r2, r3, #5
 800102e:	4613      	mov	r3, r2
 8001030:	011b      	lsls	r3, r3, #4
 8001032:	1a9b      	subs	r3, r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	1aca      	subs	r2, r1, r3
 8001038:	1d38      	adds	r0, r7, #4
 800103a:	4613      	mov	r3, r2
 800103c:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <get_time+0x74>)
 800103e:	2103      	movs	r1, #3
 8001040:	f008 f866 	bl	8009110 <sniprintf>
	snprintf(sec_str, sizeof(sec_str), "%02d", seconds % 60);
 8001044:	68f9      	ldr	r1, [r7, #12]
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <get_time+0x70>)
 8001048:	fba3 2301 	umull	r2, r3, r3, r1
 800104c:	095a      	lsrs	r2, r3, #5
 800104e:	4613      	mov	r3, r2
 8001050:	011b      	lsls	r3, r3, #4
 8001052:	1a9b      	subs	r3, r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	1aca      	subs	r2, r1, r3
 8001058:	4638      	mov	r0, r7
 800105a:	4613      	mov	r3, r2
 800105c:	4a06      	ldr	r2, [pc, #24]	; (8001078 <get_time+0x74>)
 800105e:	2103      	movs	r1, #3
 8001060:	f008 f856 	bl	8009110 <sniprintf>

}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000600 	.word	0x20000600
 8001070:	10624dd3 	.word	0x10624dd3
 8001074:	88888889 	.word	0x88888889
 8001078:	0800d7e8 	.word	0x0800d7e8

0800107c <generate_random_int>:

int generate_random_int() {
 800107c:	b598      	push	{r3, r4, r7, lr}
 800107e:	af00      	add	r7, sp, #0
	return random_number = rand() % getDictSize(playlist);
 8001080:	f007 fff8 	bl	8009074 <rand>
 8001084:	4604      	mov	r4, r0
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <generate_random_int+0x2c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fbb5 	bl	80007fa <getDictSize>
 8001090:	4603      	mov	r3, r0
 8001092:	fb94 f2f3 	sdiv	r2, r4, r3
 8001096:	fb02 f303 	mul.w	r3, r2, r3
 800109a:	1ae3      	subs	r3, r4, r3
 800109c:	4a03      	ldr	r2, [pc, #12]	; (80010ac <generate_random_int+0x30>)
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	4b02      	ldr	r3, [pc, #8]	; (80010ac <generate_random_int+0x30>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	bd98      	pop	{r3, r4, r7, pc}
 80010a8:	200000b4 	.word	0x200000b4
 80010ac:	200005fc 	.word	0x200005fc

080010b0 <next_shuffle>:
	} else {
		programMode = Shuffle;
	}
}

int next_shuffle() {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
	struct DictionaryNode *node = NULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
	int toneCount = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
	srand(HAL_GetTick());
 80010be:	f001 faf1 	bl	80026a4 <HAL_GetTick>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f007 ffa7 	bl	8009018 <srand>
	int i = generate_random_int();
 80010ca:	f7ff ffd7 	bl	800107c <generate_random_int>
 80010ce:	60f8      	str	r0, [r7, #12]
	melody = lookup(playlist, playlistOrder[i], &toneCount, &node);
 80010d0:	4b21      	ldr	r3, [pc, #132]	; (8001158 <next_shuffle+0xa8>)
 80010d2:	6818      	ldr	r0, [r3, #0]
 80010d4:	4b21      	ldr	r3, [pc, #132]	; (800115c <next_shuffle+0xac>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	6819      	ldr	r1, [r3, #0]
 80010e0:	f107 0308 	add.w	r3, r7, #8
 80010e4:	1d3a      	adds	r2, r7, #4
 80010e6:	f7ff fb4a 	bl	800077e <lookup>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a1c      	ldr	r2, [pc, #112]	; (8001160 <next_shuffle+0xb0>)
 80010ee:	6013      	str	r3, [r2, #0]

	while (node && isBlacklisted(node)) {
 80010f0:	e012      	b.n	8001118 <next_shuffle+0x68>
		i = generate_random_int();
 80010f2:	f7ff ffc3 	bl	800107c <generate_random_int>
 80010f6:	60f8      	str	r0, [r7, #12]
		melody = lookup(playlist, playlistOrder[i], &toneCount, &node);
 80010f8:	4b17      	ldr	r3, [pc, #92]	; (8001158 <next_shuffle+0xa8>)
 80010fa:	6818      	ldr	r0, [r3, #0]
 80010fc:	4b17      	ldr	r3, [pc, #92]	; (800115c <next_shuffle+0xac>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	6819      	ldr	r1, [r3, #0]
 8001108:	f107 0308 	add.w	r3, r7, #8
 800110c:	1d3a      	adds	r2, r7, #4
 800110e:	f7ff fb36 	bl	800077e <lookup>
 8001112:	4603      	mov	r3, r0
 8001114:	4a12      	ldr	r2, [pc, #72]	; (8001160 <next_shuffle+0xb0>)
 8001116:	6013      	str	r3, [r2, #0]
	while (node && isBlacklisted(node)) {
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d006      	beq.n	800112c <next_shuffle+0x7c>
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fb90 	bl	8000846 <isBlacklisted>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1e2      	bne.n	80010f2 <next_shuffle+0x42>
	}
	currentMusic = i + 1;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3301      	adds	r3, #1
 8001130:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <next_shuffle+0xb4>)
 8001132:	6013      	str	r3, [r2, #0]
	if (node) {
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d008      	beq.n	800114c <next_shuffle+0x9c>
		setBlacklisted(node);
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fb68 	bl	8000812 <setBlacklisted>
		playedCount++;
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <next_shuffle+0xb8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	3301      	adds	r3, #1
 8001148:	4a07      	ldr	r2, [pc, #28]	; (8001168 <next_shuffle+0xb8>)
 800114a:	6013      	str	r3, [r2, #0]
	}

	return toneCount;
 800114c:	687b      	ldr	r3, [r7, #4]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200000b4 	.word	0x200000b4
 800115c:	200000b8 	.word	0x200000b8
 8001160:	200005e0 	.word	0x200005e0
 8001164:	200005d4 	.word	0x200005d4
 8001168:	200005d0 	.word	0x200005d0

0800116c <next_music>:

//Choose next music based on programMode
void next_music() {
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
	int toneCount;
	struct DictionaryNode *node;
	if (programState == Resume) {
 8001172:	4b36      	ldr	r3, [pc, #216]	; (800124c <next_music+0xe0>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d163      	bne.n	8001242 <next_music+0xd6>
		if (playedCount >= getDictSize(playlist)) {
 800117a:	4b35      	ldr	r3, [pc, #212]	; (8001250 <next_music+0xe4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fb3b 	bl	80007fa <getDictSize>
 8001184:	4602      	mov	r2, r0
 8001186:	4b33      	ldr	r3, [pc, #204]	; (8001254 <next_music+0xe8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	429a      	cmp	r2, r3
 800118c:	dc25      	bgt.n	80011da <next_music+0x6e>
			for (int i = 0; i < getDictSize(playlist); i++) {
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	e016      	b.n	80011c2 <next_music+0x56>
				melody = lookup(playlist, playlistOrder[i], &toneCount, &node);
 8001194:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <next_music+0xe4>)
 8001196:	6818      	ldr	r0, [r3, #0]
 8001198:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <next_music+0xec>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	6819      	ldr	r1, [r3, #0]
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	f107 0208 	add.w	r2, r7, #8
 80011aa:	f7ff fae8 	bl	800077e <lookup>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4a2a      	ldr	r2, [pc, #168]	; (800125c <next_music+0xf0>)
 80011b2:	6013      	str	r3, [r2, #0]
				unsetBlacklisted(node);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fb38 	bl	800082c <unsetBlacklisted>
			for (int i = 0; i < getDictSize(playlist); i++) {
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3301      	adds	r3, #1
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b23      	ldr	r3, [pc, #140]	; (8001250 <next_music+0xe4>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fb17 	bl	80007fa <getDictSize>
 80011cc:	4602      	mov	r2, r0
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4293      	cmp	r3, r2
 80011d2:	dbdf      	blt.n	8001194 <next_music+0x28>
			}
			playedCount = 0;
 80011d4:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <next_music+0xe8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
		}

		if (programMode == Liner) {
 80011da:	4b21      	ldr	r3, [pc, #132]	; (8001260 <next_music+0xf4>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d11f      	bne.n	8001222 <next_music+0xb6>
			currentMusic = playedCount;
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <next_music+0xe8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a1f      	ldr	r2, [pc, #124]	; (8001264 <next_music+0xf8>)
 80011e8:	6013      	str	r3, [r2, #0]
			melody = lookup(playlist, playlistOrder[playedCount++], &toneCount,
 80011ea:	4b19      	ldr	r3, [pc, #100]	; (8001250 <next_music+0xe4>)
 80011ec:	6818      	ldr	r0, [r3, #0]
 80011ee:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <next_music+0xec>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <next_music+0xe8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	1c59      	adds	r1, r3, #1
 80011f8:	4c16      	ldr	r4, [pc, #88]	; (8001254 <next_music+0xe8>)
 80011fa:	6021      	str	r1, [r4, #0]
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	6819      	ldr	r1, [r3, #0]
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	f107 0208 	add.w	r2, r7, #8
 8001208:	f7ff fab9 	bl	800077e <lookup>
 800120c:	4603      	mov	r3, r0
 800120e:	4a13      	ldr	r2, [pc, #76]	; (800125c <next_music+0xf0>)
 8001210:	6013      	str	r3, [r2, #0]
					&node);
			Change_Melody(melody, toneCount);
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <next_music+0xf0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f000 ffee 	bl	80021fc <Change_Melody>
 8001220:	e00a      	b.n	8001238 <next_music+0xcc>
		} else {
			toneCount = next_shuffle();
 8001222:	f7ff ff45 	bl	80010b0 <next_shuffle>
 8001226:	4603      	mov	r3, r0
 8001228:	60bb      	str	r3, [r7, #8]
			Change_Melody(melody, toneCount);
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <next_music+0xf0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	4611      	mov	r1, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f000 ffe2 	bl	80021fc <Change_Melody>
		}
		extract_int_to_carrier(currentMusic);
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <next_music+0xf8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fe81 	bl	8000f44 <extract_int_to_carrier>
	}
}
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	bd90      	pop	{r4, r7, pc}
 800124a:	bf00      	nop
 800124c:	20000000 	.word	0x20000000
 8001250:	200000b4 	.word	0x200000b4
 8001254:	200005d0 	.word	0x200005d0
 8001258:	200000b8 	.word	0x200000b8
 800125c:	200005e0 	.word	0x200005e0
 8001260:	2000065c 	.word	0x2000065c
 8001264:	200005d4 	.word	0x200005d4

08001268 <set_music>:

void set_music(int num) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	int toneCount;
	struct DictionaryNode *node;
	melody = lookup(playlist, playlistOrder[num - 1], &toneCount, &node);
 8001270:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <set_music+0x60>)
 8001272:	6818      	ldr	r0, [r3, #0]
 8001274:	4b15      	ldr	r3, [pc, #84]	; (80012cc <set_music+0x64>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800127e:	3b01      	subs	r3, #1
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	6819      	ldr	r1, [r3, #0]
 8001286:	f107 0308 	add.w	r3, r7, #8
 800128a:	f107 020c 	add.w	r2, r7, #12
 800128e:	f7ff fa76 	bl	800077e <lookup>
 8001292:	4603      	mov	r3, r0
 8001294:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <set_music+0x68>)
 8001296:	6013      	str	r3, [r2, #0]
	Change_Melody(melody, toneCount);
 8001298:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <set_music+0x68>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	4611      	mov	r1, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 ffab 	bl	80021fc <Change_Melody>
	currentMusic = num;
 80012a6:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <set_music+0x6c>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6013      	str	r3, [r2, #0]
	unsetBlacklisted(node);
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fabc 	bl	800082c <unsetBlacklisted>
	extract_int_to_carrier(currentMusic);
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <set_music+0x6c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fe43 	bl	8000f44 <extract_int_to_carrier>
}
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200000b4 	.word	0x200000b4
 80012cc:	200000b8 	.word	0x200000b8
 80012d0:	200005e0 	.word	0x200005e0
 80012d4:	200005d4 	.word	0x200005d4

080012d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b096      	sub	sp, #88	; 0x58
 80012dc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	struct digit _digits[10];
	_digits[0].number = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
	_digits[0].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
 80012e2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80012e6:	817b      	strh	r3, [r7, #10]
			| GPIO_PIN_15;

	_digits[1].number = 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
	_digits[1].pattern = GPIO_PIN_12;
 80012ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f0:	823b      	strh	r3, [r7, #16]
	_digits[1].anti_pattern = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80012f2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80012f6:	827b      	strh	r3, [r7, #18]

	_digits[2].number = 2;
 80012f8:	2302      	movs	r3, #2
 80012fa:	617b      	str	r3, [r7, #20]
	_digits[2].pattern = GPIO_PIN_13;
 80012fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001300:	833b      	strh	r3, [r7, #24]
	_digits[2].anti_pattern = GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15;
 8001302:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001306:	837b      	strh	r3, [r7, #26]

	_digits[3].number = 3;
 8001308:	2303      	movs	r3, #3
 800130a:	61fb      	str	r3, [r7, #28]
	_digits[3].pattern = GPIO_PIN_12 | GPIO_PIN_13;
 800130c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001310:	843b      	strh	r3, [r7, #32]
	_digits[3].anti_pattern = GPIO_PIN_14 | GPIO_PIN_15;
 8001312:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001316:	847b      	strh	r3, [r7, #34]	; 0x22

	_digits[4].number = 4;
 8001318:	2304      	movs	r3, #4
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
	_digits[4].pattern = GPIO_PIN_14;
 800131c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001320:	853b      	strh	r3, [r7, #40]	; 0x28
	_digits[4].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15;
 8001322:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001326:	857b      	strh	r3, [r7, #42]	; 0x2a

	_digits[5].number = 5;
 8001328:	2305      	movs	r3, #5
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
	_digits[5].pattern = GPIO_PIN_12 | GPIO_PIN_14;
 800132c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001330:	863b      	strh	r3, [r7, #48]	; 0x30
	_digits[5].anti_pattern = GPIO_PIN_13 | GPIO_PIN_15;
 8001332:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001336:	867b      	strh	r3, [r7, #50]	; 0x32

	_digits[6].number = 6;
 8001338:	2306      	movs	r3, #6
 800133a:	637b      	str	r3, [r7, #52]	; 0x34
	_digits[6].pattern = GPIO_PIN_13 | GPIO_PIN_14;
 800133c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001340:	873b      	strh	r3, [r7, #56]	; 0x38
	_digits[6].anti_pattern = GPIO_PIN_12 | GPIO_PIN_15;
 8001342:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001346:	877b      	strh	r3, [r7, #58]	; 0x3a

	_digits[7].number = 7;
 8001348:	2307      	movs	r3, #7
 800134a:	63fb      	str	r3, [r7, #60]	; 0x3c
	_digits[7].pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 800134c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001350:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	_digits[7].anti_pattern = GPIO_PIN_15;
 8001354:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001358:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	_digits[8].number = 8;
 800135c:	2308      	movs	r3, #8
 800135e:	647b      	str	r3, [r7, #68]	; 0x44
	_digits[8].pattern = GPIO_PIN_15;
 8001360:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001364:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	_digits[8].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 8001368:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800136c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	_digits[9].number = 9;
 8001370:	2309      	movs	r3, #9
 8001372:	64fb      	str	r3, [r7, #76]	; 0x4c
	_digits[9].pattern = GPIO_PIN_12 | GPIO_PIN_15;
 8001374:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001378:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	_digits[9].anti_pattern = GPIO_PIN_13 | GPIO_PIN_14;
 800137c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001380:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

//initialize Global digits structure
	for (int i = 0; i < 10; i++) {
 8001384:	2300      	movs	r3, #0
 8001386:	657b      	str	r3, [r7, #84]	; 0x54
 8001388:	e00f      	b.n	80013aa <main+0xd2>
		digits[i] = _digits[i];
 800138a:	4922      	ldr	r1, [pc, #136]	; (8001414 <main+0x13c>)
 800138c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800138e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001390:	00d2      	lsls	r2, r2, #3
 8001392:	3258      	adds	r2, #88	; 0x58
 8001394:	443a      	add	r2, r7
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	440b      	add	r3, r1
 800139a:	3a54      	subs	r2, #84	; 0x54
 800139c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013a0:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 0; i < 10; i++) {
 80013a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013a6:	3301      	adds	r3, #1
 80013a8:	657b      	str	r3, [r7, #84]	; 0x54
 80013aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013ac:	2b09      	cmp	r3, #9
 80013ae:	ddec      	ble.n	800138a <main+0xb2>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013b0:	f001 f91e 	bl	80025f0 <HAL_Init>

	/* USER CODE BEGIN Init */

//Set 7-segment PINS
	led[0] = GPIO_PIN_1;
 80013b4:	4b18      	ldr	r3, [pc, #96]	; (8001418 <main+0x140>)
 80013b6:	2202      	movs	r2, #2
 80013b8:	801a      	strh	r2, [r3, #0]
	led[1] = GPIO_PIN_2;
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <main+0x140>)
 80013bc:	2204      	movs	r2, #4
 80013be:	805a      	strh	r2, [r3, #2]
	led[2] = GPIO_PIN_3;
 80013c0:	4b15      	ldr	r3, [pc, #84]	; (8001418 <main+0x140>)
 80013c2:	2208      	movs	r2, #8
 80013c4:	809a      	strh	r2, [r3, #4]
	led[3] = GPIO_PIN_4;
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <main+0x140>)
 80013c8:	2210      	movs	r2, #16
 80013ca:	80da      	strh	r2, [r3, #6]

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013cc:	f000 f82e 	bl	800142c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013d0:	f000 fa9e 	bl	8001910 <MX_GPIO_Init>
	MX_I2C1_Init();
 80013d4:	f000 f902 	bl	80015dc <MX_I2C1_Init>
	MX_SPI1_Init();
 80013d8:	f000 f940 	bl	800165c <MX_SPI1_Init>
	MX_USB_PCD_Init();
 80013dc:	f000 fa76 	bl	80018cc <MX_USB_PCD_Init>
	MX_TIM1_Init();
 80013e0:	f000 f97a 	bl	80016d8 <MX_TIM1_Init>
	MX_TIM2_Init();
 80013e4:	f000 f9cc 	bl	8001780 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 80013e8:	f000 fa40 	bl	800186c <MX_USART1_UART_Init>
	MX_ADC1_Init();
 80013ec:	f000 f886 	bl	80014fc <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 80013f0:	480a      	ldr	r0, [pc, #40]	; (800141c <main+0x144>)
 80013f2:	f004 ffb5 	bl	8006360 <HAL_TIM_Base_Start_IT>
	HAL_UART_Transmit_IT(&huart1,
 80013f6:	222c      	movs	r2, #44	; 0x2c
 80013f8:	4909      	ldr	r1, [pc, #36]	; (8001420 <main+0x148>)
 80013fa:	480a      	ldr	r0, [pc, #40]	; (8001424 <main+0x14c>)
 80013fc:	f006 f9b4 	bl	8007768 <HAL_UART_Transmit_IT>
			"=============\nProgram Running\n=============\n", 44);
	HAL_UART_Receive_IT(&huart1, &d, 1);
 8001400:	2201      	movs	r2, #1
 8001402:	4909      	ldr	r1, [pc, #36]	; (8001428 <main+0x150>)
 8001404:	4807      	ldr	r0, [pc, #28]	; (8001424 <main+0x14c>)
 8001406:	f006 fa0d 	bl	8007824 <HAL_UART_Receive_IT>
	initTonesDictionary();
 800140a:	f7ff fa37 	bl	800087c <initTonesDictionary>
	PWM_Start();
 800140e:	f000 fe31 	bl	8002074 <PWM_Start>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001412:	e7fe      	b.n	8001412 <main+0x13a>
 8001414:	2000060c 	.word	0x2000060c
 8001418:	200005e4 	.word	0x200005e4
 800141c:	200001c4 	.word	0x200001c4
 8001420:	0800d7f0 	.word	0x0800d7f0
 8001424:	2000025c 	.word	0x2000025c
 8001428:	200006c4 	.word	0x200006c4

0800142c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b09e      	sub	sp, #120	; 0x78
 8001430:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001432:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001436:	2228      	movs	r2, #40	; 0x28
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f007 fd04 	bl	8008e48 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001440:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001450:	463b      	mov	r3, r7
 8001452:	223c      	movs	r2, #60	; 0x3c
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f007 fcf6 	bl	8008e48 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800145c:	2303      	movs	r3, #3
 800145e:	653b      	str	r3, [r7, #80]	; 0x50
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001460:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001464:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001466:	2300      	movs	r3, #0
 8001468:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800146a:	2301      	movs	r3, #1
 800146c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800146e:	2310      	movs	r3, #16
 8001470:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001472:	2302      	movs	r3, #2
 8001474:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001476:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800147a:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800147c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001480:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001482:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001486:	4618      	mov	r0, r3
 8001488:	f003 fa44 	bl	8004914 <HAL_RCC_OscConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <SystemClock_Config+0x6a>
		Error_Handler();
 8001492:	f000 fbfb 	bl	8001c8c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001496:	230f      	movs	r3, #15
 8001498:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800149a:	2302      	movs	r3, #2
 800149c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80014ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014b0:	2101      	movs	r1, #1
 80014b2:	4618      	mov	r0, r3
 80014b4:	f004 fa6c 	bl	8005990 <HAL_RCC_ClockConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <SystemClock_Config+0x96>
		Error_Handler();
 80014be:	f000 fbe5 	bl	8001c8c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <SystemClock_Config+0xcc>)
 80014c4:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_TIM1
			| RCC_PERIPHCLK_ADC12;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80014ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80014d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014d8:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80014da:	2300      	movs	r3, #0
 80014dc:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80014de:	463b      	mov	r3, r7
 80014e0:	4618      	mov	r0, r3
 80014e2:	f004 fc8b 	bl	8005dfc <HAL_RCCEx_PeriphCLKConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <SystemClock_Config+0xc4>
		Error_Handler();
 80014ec:	f000 fbce 	bl	8001c8c <Error_Handler>
	}
}
 80014f0:	bf00      	nop
 80014f2:	3778      	adds	r7, #120	; 0x78
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	000210a1 	.word	0x000210a1

080014fc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8001502:	f107 031c 	add.w	r3, r7, #28
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
 800151c:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800151e:	4b2e      	ldr	r3, [pc, #184]	; (80015d8 <MX_ADC1_Init+0xdc>)
 8001520:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001524:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001526:	4b2c      	ldr	r3, [pc, #176]	; (80015d8 <MX_ADC1_Init+0xdc>)
 8001528:	2200      	movs	r2, #0
 800152a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800152c:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <MX_ADC1_Init+0xdc>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001532:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <MX_ADC1_Init+0xdc>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001538:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <MX_ADC1_Init+0xdc>)
 800153a:	2201      	movs	r2, #1
 800153c:	765a      	strb	r2, [r3, #25]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800153e:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <MX_ADC1_Init+0xdc>)
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001546:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <MX_ADC1_Init+0xdc>)
 8001548:	2200      	movs	r2, #0
 800154a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800154c:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <MX_ADC1_Init+0xdc>)
 800154e:	2201      	movs	r2, #1
 8001550:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001552:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <MX_ADC1_Init+0xdc>)
 8001554:	2200      	movs	r2, #0
 8001556:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001558:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <MX_ADC1_Init+0xdc>)
 800155a:	2201      	movs	r2, #1
 800155c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800155e:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <MX_ADC1_Init+0xdc>)
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001566:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <MX_ADC1_Init+0xdc>)
 8001568:	2204      	movs	r2, #4
 800156a:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800156c:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <MX_ADC1_Init+0xdc>)
 800156e:	2200      	movs	r2, #0
 8001570:	761a      	strb	r2, [r3, #24]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001572:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <MX_ADC1_Init+0xdc>)
 8001574:	2200      	movs	r2, #0
 8001576:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001578:	4817      	ldr	r0, [pc, #92]	; (80015d8 <MX_ADC1_Init+0xdc>)
 800157a:	f001 f8b3 	bl	80026e4 <HAL_ADC_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_ADC1_Init+0x8c>
		Error_Handler();
 8001584:	f000 fb82 	bl	8001c8c <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	4619      	mov	r1, r3
 8001592:	4811      	ldr	r0, [pc, #68]	; (80015d8 <MX_ADC1_Init+0xdc>)
 8001594:	f002 fa0a 	bl	80039ac <HAL_ADCEx_MultiModeConfigChannel>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_ADC1_Init+0xa6>
		Error_Handler();
 800159e:	f000 fb75 	bl	8001c8c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 80015a2:	2305      	movs	r3, #5
 80015a4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80015a6:	2301      	movs	r3, #1
 80015a8:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80015ae:	2307      	movs	r3, #7
 80015b0:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	4619      	mov	r1, r3
 80015be:	4806      	ldr	r0, [pc, #24]	; (80015d8 <MX_ADC1_Init+0xdc>)
 80015c0:	f001 ff08 	bl	80033d4 <HAL_ADC_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_ADC1_Init+0xd2>
		Error_Handler();
 80015ca:	f000 fb5f 	bl	8001c8c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	3728      	adds	r7, #40	; 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200000bc 	.word	0x200000bc

080015dc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <MX_I2C1_Init+0x74>)
 80015e2:	4a1c      	ldr	r2, [pc, #112]	; (8001654 <MX_I2C1_Init+0x78>)
 80015e4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 80015e6:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <MX_I2C1_Init+0x74>)
 80015e8:	4a1b      	ldr	r2, [pc, #108]	; (8001658 <MX_I2C1_Init+0x7c>)
 80015ea:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <MX_I2C1_Init+0x74>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <MX_I2C1_Init+0x74>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f8:	4b15      	ldr	r3, [pc, #84]	; (8001650 <MX_I2C1_Init+0x74>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_I2C1_Init+0x74>)
 8001600:	2200      	movs	r2, #0
 8001602:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_I2C1_Init+0x74>)
 8001606:	2200      	movs	r2, #0
 8001608:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_I2C1_Init+0x74>)
 800160c:	2200      	movs	r2, #0
 800160e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_I2C1_Init+0x74>)
 8001612:	2200      	movs	r2, #0
 8001614:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001616:	480e      	ldr	r0, [pc, #56]	; (8001650 <MX_I2C1_Init+0x74>)
 8001618:	f002 ff84 	bl	8004524 <HAL_I2C_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8001622:	f000 fb33 	bl	8001c8c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8001626:	2100      	movs	r1, #0
 8001628:	4809      	ldr	r0, [pc, #36]	; (8001650 <MX_I2C1_Init+0x74>)
 800162a:	f003 f80a 	bl	8004642 <HAL_I2CEx_ConfigAnalogFilter>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001634:	f000 fb2a 	bl	8001c8c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001638:	2100      	movs	r1, #0
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_I2C1_Init+0x74>)
 800163c:	f003 f84c 	bl	80046d8 <HAL_I2CEx_ConfigDigitalFilter>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_I2C1_Init+0x6e>
		Error_Handler();
 8001646:	f000 fb21 	bl	8001c8c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000010c 	.word	0x2000010c
 8001654:	40005400 	.word	0x40005400
 8001658:	2000090e 	.word	0x2000090e

0800165c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <MX_SPI1_Init+0x74>)
 8001662:	4a1c      	ldr	r2, [pc, #112]	; (80016d4 <MX_SPI1_Init+0x78>)
 8001664:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001666:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <MX_SPI1_Init+0x74>)
 8001668:	f44f 7282 	mov.w	r2, #260	; 0x104
 800166c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800166e:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <MX_SPI1_Init+0x74>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001674:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <MX_SPI1_Init+0x74>)
 8001676:	f44f 7240 	mov.w	r2, #768	; 0x300
 800167a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <MX_SPI1_Init+0x74>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <MX_SPI1_Init+0x74>)
 8001684:	2200      	movs	r2, #0
 8001686:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_SPI1_Init+0x74>)
 800168a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800168e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_SPI1_Init+0x74>)
 8001692:	2208      	movs	r2, #8
 8001694:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_SPI1_Init+0x74>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_SPI1_Init+0x74>)
 800169e:	2200      	movs	r2, #0
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_SPI1_Init+0x74>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_SPI1_Init+0x74>)
 80016aa:	2207      	movs	r2, #7
 80016ac:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MX_SPI1_Init+0x74>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_SPI1_Init+0x74>)
 80016b6:	2208      	movs	r2, #8
 80016b8:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_SPI1_Init+0x74>)
 80016bc:	f004 fd4e 	bl	800615c <HAL_SPI_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_SPI1_Init+0x6e>
		Error_Handler();
 80016c6:	f000 fae1 	bl	8001c8c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000160 	.word	0x20000160
 80016d4:	40013000 	.word	0x40013000

080016d8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80016de:	f107 0310 	add.w	r3, r7, #16
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <MX_TIM1_Init+0xa0>)
 80016f8:	4a20      	ldr	r2, [pc, #128]	; (800177c <MX_TIM1_Init+0xa4>)
 80016fa:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 4800 - 1;
 80016fc:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <MX_TIM1_Init+0xa0>)
 80016fe:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001702:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001704:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <MX_TIM1_Init+0xa0>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 5 - 1;
 800170a:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <MX_TIM1_Init+0xa0>)
 800170c:	2204      	movs	r2, #4
 800170e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <MX_TIM1_Init+0xa0>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <MX_TIM1_Init+0xa0>)
 8001718:	2200      	movs	r2, #0
 800171a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800171c:	4b16      	ldr	r3, [pc, #88]	; (8001778 <MX_TIM1_Init+0xa0>)
 800171e:	2200      	movs	r2, #0
 8001720:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001722:	4815      	ldr	r0, [pc, #84]	; (8001778 <MX_TIM1_Init+0xa0>)
 8001724:	f004 fdc5 	bl	80062b2 <HAL_TIM_Base_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM1_Init+0x5a>
		Error_Handler();
 800172e:	f000 faad 	bl	8001c8c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001736:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	4619      	mov	r1, r3
 800173e:	480e      	ldr	r0, [pc, #56]	; (8001778 <MX_TIM1_Init+0xa0>)
 8001740:	f005 fa0e 	bl	8006b60 <HAL_TIM_ConfigClockSource>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM1_Init+0x76>
		Error_Handler();
 800174a:	f000 fa9f 	bl	8001c8c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	4619      	mov	r1, r3
 800175e:	4806      	ldr	r0, [pc, #24]	; (8001778 <MX_TIM1_Init+0xa0>)
 8001760:	f005 ff16 	bl	8007590 <HAL_TIMEx_MasterConfigSynchronization>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 800176a:	f000 fa8f 	bl	8001c8c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	3720      	adds	r7, #32
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200001c4 	.word	0x200001c4
 800177c:	40012c00 	.word	0x40012c00

08001780 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b08e      	sub	sp, #56	; 0x38
 8001784:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001794:	f107 031c 	add.w	r3, r7, #28
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80017a0:	463b      	mov	r3, r7
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	611a      	str	r2, [r3, #16]
 80017ae:	615a      	str	r2, [r3, #20]
 80017b0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80017b2:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <MX_TIM2_Init+0xe8>)
 80017b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017b8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80017ba:	4b2b      	ldr	r3, [pc, #172]	; (8001868 <MX_TIM2_Init+0xe8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c0:	4b29      	ldr	r3, [pc, #164]	; (8001868 <MX_TIM2_Init+0xe8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 80017c6:	4b28      	ldr	r3, [pc, #160]	; (8001868 <MX_TIM2_Init+0xe8>)
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295
 80017cc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	4b26      	ldr	r3, [pc, #152]	; (8001868 <MX_TIM2_Init+0xe8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d4:	4b24      	ldr	r3, [pc, #144]	; (8001868 <MX_TIM2_Init+0xe8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80017da:	4823      	ldr	r0, [pc, #140]	; (8001868 <MX_TIM2_Init+0xe8>)
 80017dc:	f004 fd69 	bl	80062b2 <HAL_TIM_Base_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM2_Init+0x6a>
		Error_Handler();
 80017e6:	f000 fa51 	bl	8001c8c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80017f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017f4:	4619      	mov	r1, r3
 80017f6:	481c      	ldr	r0, [pc, #112]	; (8001868 <MX_TIM2_Init+0xe8>)
 80017f8:	f005 f9b2 	bl	8006b60 <HAL_TIM_ConfigClockSource>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM2_Init+0x86>
		Error_Handler();
 8001802:	f000 fa43 	bl	8001c8c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001806:	4818      	ldr	r0, [pc, #96]	; (8001868 <MX_TIM2_Init+0xe8>)
 8001808:	f004 fe14 	bl	8006434 <HAL_TIM_PWM_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM2_Init+0x96>
		Error_Handler();
 8001812:	f000 fa3b 	bl	8001c8c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800181e:	f107 031c 	add.w	r3, r7, #28
 8001822:	4619      	mov	r1, r3
 8001824:	4810      	ldr	r0, [pc, #64]	; (8001868 <MX_TIM2_Init+0xe8>)
 8001826:	f005 feb3 	bl	8007590 <HAL_TIMEx_MasterConfigSynchronization>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8001830:	f000 fa2c 	bl	8001c8c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001834:	2360      	movs	r3, #96	; 0x60
 8001836:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800183c:	2300      	movs	r3, #0
 800183e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8001844:	463b      	mov	r3, r7
 8001846:	2200      	movs	r2, #0
 8001848:	4619      	mov	r1, r3
 800184a:	4807      	ldr	r0, [pc, #28]	; (8001868 <MX_TIM2_Init+0xe8>)
 800184c:	f005 f874 	bl	8006938 <HAL_TIM_PWM_ConfigChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 8001856:	f000 fa19 	bl	8001c8c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800185a:	4803      	ldr	r0, [pc, #12]	; (8001868 <MX_TIM2_Init+0xe8>)
 800185c:	f000 fb44 	bl	8001ee8 <HAL_TIM_MspPostInit>

}
 8001860:	bf00      	nop
 8001862:	3738      	adds	r7, #56	; 0x38
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000210 	.word	0x20000210

0800186c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <MX_USART1_UART_Init+0x58>)
 8001872:	4a15      	ldr	r2, [pc, #84]	; (80018c8 <MX_USART1_UART_Init+0x5c>)
 8001874:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001876:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <MX_USART1_UART_Init+0x58>)
 8001878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800187c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <MX_USART1_UART_Init+0x58>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <MX_USART1_UART_Init+0x58>)
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <MX_USART1_UART_Init+0x58>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_USART1_UART_Init+0x58>)
 8001892:	220c      	movs	r2, #12
 8001894:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <MX_USART1_UART_Init+0x58>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_USART1_UART_Init+0x58>)
 800189e:	2200      	movs	r2, #0
 80018a0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <MX_USART1_UART_Init+0x58>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <MX_USART1_UART_Init+0x58>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80018ae:	4805      	ldr	r0, [pc, #20]	; (80018c4 <MX_USART1_UART_Init+0x58>)
 80018b0:	f005 ff0c 	bl	80076cc <HAL_UART_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_USART1_UART_Init+0x52>
		Error_Handler();
 80018ba:	f000 f9e7 	bl	8001c8c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	2000025c 	.word	0x2000025c
 80018c8:	40013800 	.word	0x40013800

080018cc <MX_USB_PCD_Init>:
/**
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 80018d0:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <MX_USB_PCD_Init+0x3c>)
 80018d2:	4a0e      	ldr	r2, [pc, #56]	; (800190c <MX_USB_PCD_Init+0x40>)
 80018d4:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <MX_USB_PCD_Init+0x3c>)
 80018d8:	2208      	movs	r2, #8
 80018da:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80018dc:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <MX_USB_PCD_Init+0x3c>)
 80018de:	2202      	movs	r2, #2
 80018e0:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <MX_USB_PCD_Init+0x3c>)
 80018e4:	2202      	movs	r2, #2
 80018e6:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80018e8:	4b07      	ldr	r3, [pc, #28]	; (8001908 <MX_USB_PCD_Init+0x3c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <MX_USB_PCD_Init+0x3c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK) {
 80018f4:	4804      	ldr	r0, [pc, #16]	; (8001908 <MX_USB_PCD_Init+0x3c>)
 80018f6:	f002 ff3b 	bl	8004770 <HAL_PCD_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_USB_PCD_Init+0x38>
		Error_Handler();
 8001900:	f000 f9c4 	bl	8001c8c <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	200002e4 	.word	0x200002e4
 800190c:	40005c00 	.word	0x40005c00

08001910 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b08c      	sub	sp, #48	; 0x30
 8001914:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001916:	f107 031c 	add.w	r3, r7, #28
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
 8001924:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001926:	4b62      	ldr	r3, [pc, #392]	; (8001ab0 <MX_GPIO_Init+0x1a0>)
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	4a61      	ldr	r2, [pc, #388]	; (8001ab0 <MX_GPIO_Init+0x1a0>)
 800192c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001930:	6153      	str	r3, [r2, #20]
 8001932:	4b5f      	ldr	r3, [pc, #380]	; (8001ab0 <MX_GPIO_Init+0x1a0>)
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800193a:	61bb      	str	r3, [r7, #24]
 800193c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800193e:	4b5c      	ldr	r3, [pc, #368]	; (8001ab0 <MX_GPIO_Init+0x1a0>)
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	4a5b      	ldr	r2, [pc, #364]	; (8001ab0 <MX_GPIO_Init+0x1a0>)
 8001944:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001948:	6153      	str	r3, [r2, #20]
 800194a:	4b59      	ldr	r3, [pc, #356]	; (8001ab0 <MX_GPIO_Init+0x1a0>)
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001956:	4b56      	ldr	r3, [pc, #344]	; (8001ab0 <MX_GPIO_Init+0x1a0>)
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	4a55      	ldr	r2, [pc, #340]	; (8001ab0 <MX_GPIO_Init+0x1a0>)
 800195c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001960:	6153      	str	r3, [r2, #20]
 8001962:	4b53      	ldr	r3, [pc, #332]	; (8001ab0 <MX_GPIO_Init+0x1a0>)
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800196e:	4b50      	ldr	r3, [pc, #320]	; (8001ab0 <MX_GPIO_Init+0x1a0>)
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	4a4f      	ldr	r2, [pc, #316]	; (8001ab0 <MX_GPIO_Init+0x1a0>)
 8001974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001978:	6153      	str	r3, [r2, #20]
 800197a:	4b4d      	ldr	r3, [pc, #308]	; (8001ab0 <MX_GPIO_Init+0x1a0>)
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001986:	4b4a      	ldr	r3, [pc, #296]	; (8001ab0 <MX_GPIO_Init+0x1a0>)
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	4a49      	ldr	r2, [pc, #292]	; (8001ab0 <MX_GPIO_Init+0x1a0>)
 800198c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001990:	6153      	str	r3, [r2, #20]
 8001992:	4b47      	ldr	r3, [pc, #284]	; (8001ab0 <MX_GPIO_Init+0x1a0>)
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	4b44      	ldr	r3, [pc, #272]	; (8001ab0 <MX_GPIO_Init+0x1a0>)
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	4a43      	ldr	r2, [pc, #268]	; (8001ab0 <MX_GPIO_Init+0x1a0>)
 80019a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a8:	6153      	str	r3, [r2, #20]
 80019aa:	4b41      	ldr	r3, [pc, #260]	; (8001ab0 <MX_GPIO_Init+0x1a0>)
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2108      	movs	r1, #8
 80019ba:	483e      	ldr	r0, [pc, #248]	; (8001ab4 <MX_GPIO_Init+0x1a4>)
 80019bc:	f002 fd82 	bl	80044c4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 80019c0:	2200      	movs	r2, #0
 80019c2:	f24f 011e 	movw	r1, #61470	; 0xf01e
 80019c6:	483c      	ldr	r0, [pc, #240]	; (8001ab8 <MX_GPIO_Init+0x1a8>)
 80019c8:	f002 fd7c 	bl	80044c4 <HAL_GPIO_WritePin>
			GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_1
					| GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80019cc:	2308      	movs	r3, #8
 80019ce:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d0:	2301      	movs	r3, #1
 80019d2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2300      	movs	r3, #0
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80019dc:	f107 031c 	add.w	r3, r7, #28
 80019e0:	4619      	mov	r1, r3
 80019e2:	4834      	ldr	r0, [pc, #208]	; (8001ab4 <MX_GPIO_Init+0x1a4>)
 80019e4:	f002 fbdc 	bl	80041a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT4_Pin */
	GPIO_InitStruct.Pin = MEMS_INT4_Pin;
 80019e8:	2320      	movs	r3, #32
 80019ea:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019ec:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80019f0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT4_GPIO_Port, &GPIO_InitStruct);
 80019f6:	f107 031c 	add.w	r3, r7, #28
 80019fa:	4619      	mov	r1, r3
 80019fc:	482d      	ldr	r0, [pc, #180]	; (8001ab4 <MX_GPIO_Init+0x1a4>)
 80019fe:	f002 fbcf 	bl	80041a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a02:	2301      	movs	r3, #1
 8001a04:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001a06:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001a0a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a10:	f107 031c 	add.w	r3, r7, #28
 8001a14:	4619      	mov	r1, r3
 8001a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a1a:	f002 fbc1 	bl	80041a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA2 PA3 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4;
 8001a1e:	231e      	movs	r3, #30
 8001a20:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001a22:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001a26:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	4619      	mov	r1, r3
 8001a32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a36:	f002 fbb3 	bl	80041a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15
	 PD1 PD2 PD3 PD4 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15
 8001a3a:	f24f 031e 	movw	r3, #61470	; 0xf01e
 8001a3e:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a40:	2301      	movs	r3, #1
 8001a42:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a4c:	f107 031c 	add.w	r3, r7, #28
 8001a50:	4619      	mov	r1, r3
 8001a52:	4819      	ldr	r0, [pc, #100]	; (8001ab8 <MX_GPIO_Init+0x1a8>)
 8001a54:	f002 fba4 	bl	80041a0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	2006      	movs	r0, #6
 8001a5e:	f002 faf2 	bl	8004046 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a62:	2006      	movs	r0, #6
 8001a64:	f002 fb0b 	bl	800407e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2007      	movs	r0, #7
 8001a6e:	f002 faea 	bl	8004046 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001a72:	2007      	movs	r0, #7
 8001a74:	f002 fb03 	bl	800407e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2008      	movs	r0, #8
 8001a7e:	f002 fae2 	bl	8004046 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8001a82:	2008      	movs	r0, #8
 8001a84:	f002 fafb 	bl	800407e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	2009      	movs	r0, #9
 8001a8e:	f002 fada 	bl	8004046 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001a92:	2009      	movs	r0, #9
 8001a94:	f002 faf3 	bl	800407e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	200a      	movs	r0, #10
 8001a9e:	f002 fad2 	bl	8004046 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001aa2:	200a      	movs	r0, #10
 8001aa4:	f002 faeb 	bl	800407e <HAL_NVIC_EnableIRQ>

}
 8001aa8:	bf00      	nop
 8001aaa:	3730      	adds	r7, #48	; 0x30
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	48001000 	.word	0x48001000
 8001ab8:	48000c00 	.word	0x48000c00

08001abc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 8001ac6:	f000 fded 	bl	80026a4 <HAL_GetTick>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4a4a      	ldr	r2, [pc, #296]	; (8001bf8 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001ace:	6013      	str	r3, [r2, #0]
	if ((GPIO_Pin == GPIO_PIN_1)) {
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d110      	bne.n	8001af8 <HAL_GPIO_EXTI_Callback+0x3c>

		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 8001ad6:	4b48      	ldr	r3, [pc, #288]	; (8001bf8 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	4b48      	ldr	r3, [pc, #288]	; (8001bfc <HAL_GPIO_EXTI_Callback+0x140>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2bfa      	cmp	r3, #250	; 0xfa
 8001ae2:	f240 8084 	bls.w	8001bee <HAL_GPIO_EXTI_Callback+0x132>
//			counterInside++;
			next_music();
 8001ae6:	f7ff fb41 	bl	800116c <next_music>
			get_time();
 8001aea:	f7ff fa8b 	bl	8001004 <get_time>
			previousMillis = currentMillis;
 8001aee:	4b42      	ldr	r3, [pc, #264]	; (8001bf8 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a42      	ldr	r2, [pc, #264]	; (8001bfc <HAL_GPIO_EXTI_Callback+0x140>)
 8001af4:	6013      	str	r3, [r2, #0]
			HAL_ADC_Stop_IT(&hadc1);
			set_music(adc_select);
		}
	} else if (GPIO_Pin == GPIO_PIN_0) {
	}
}
 8001af6:	e07a      	b.n	8001bee <HAL_GPIO_EXTI_Callback+0x132>
	} else if ((GPIO_Pin == GPIO_PIN_2)) {
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d129      	bne.n	8001b52 <HAL_GPIO_EXTI_Callback+0x96>
		if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)) {
 8001afe:	2104      	movs	r1, #4
 8001b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b04:	f002 fcc6 	bl	8004494 <HAL_GPIO_ReadPin>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d115      	bne.n	8001b3a <HAL_GPIO_EXTI_Callback+0x7e>
			if ((currentMillis - previousMillis > DEBOUNCE_DELAY
 8001b0e:	4b3a      	ldr	r3, [pc, #232]	; (8001bf8 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	4b3a      	ldr	r3, [pc, #232]	; (8001bfc <HAL_GPIO_EXTI_Callback+0x140>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2bfa      	cmp	r3, #250	; 0xfa
 8001b1a:	d968      	bls.n	8001bee <HAL_GPIO_EXTI_Callback+0x132>
					&& adc_function != CHANGE_MUSIC)) {
 8001b1c:	4b38      	ldr	r3, [pc, #224]	; (8001c00 <HAL_GPIO_EXTI_Callback+0x144>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d064      	beq.n	8001bee <HAL_GPIO_EXTI_Callback+0x132>
				adc_function = CHANGE_VOLUME;
 8001b24:	4b36      	ldr	r3, [pc, #216]	; (8001c00 <HAL_GPIO_EXTI_Callback+0x144>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	701a      	strb	r2, [r3, #0]
				HAL_ADC_Start_IT(&hadc1);
 8001b2a:	4836      	ldr	r0, [pc, #216]	; (8001c04 <HAL_GPIO_EXTI_Callback+0x148>)
 8001b2c:	f000 ffba 	bl	8002aa4 <HAL_ADC_Start_IT>
				previousMillis = currentMillis;
 8001b30:	4b31      	ldr	r3, [pc, #196]	; (8001bf8 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a31      	ldr	r2, [pc, #196]	; (8001bfc <HAL_GPIO_EXTI_Callback+0x140>)
 8001b36:	6013      	str	r3, [r2, #0]
}
 8001b38:	e059      	b.n	8001bee <HAL_GPIO_EXTI_Callback+0x132>
			adc_function = NONE;
 8001b3a:	4b31      	ldr	r3, [pc, #196]	; (8001c00 <HAL_GPIO_EXTI_Callback+0x144>)
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Stop_IT(&hadc1);
 8001b40:	4830      	ldr	r0, [pc, #192]	; (8001c04 <HAL_GPIO_EXTI_Callback+0x148>)
 8001b42:	f001 f8ef 	bl	8002d24 <HAL_ADC_Stop_IT>
			extract_int_to_carrier(currentMusic);
 8001b46:	4b30      	ldr	r3, [pc, #192]	; (8001c08 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f9fa 	bl	8000f44 <extract_int_to_carrier>
}
 8001b50:	e04d      	b.n	8001bee <HAL_GPIO_EXTI_Callback+0x132>
	} else if ((GPIO_Pin == GPIO_PIN_3)) {
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d11e      	bne.n	8001b96 <HAL_GPIO_EXTI_Callback+0xda>
		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 8001b58:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <HAL_GPIO_EXTI_Callback+0x140>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2bfa      	cmp	r3, #250	; 0xfa
 8001b64:	d943      	bls.n	8001bee <HAL_GPIO_EXTI_Callback+0x132>
			if (programState == Paused || programState == IDLE)
 8001b66:	4b29      	ldr	r3, [pc, #164]	; (8001c0c <HAL_GPIO_EXTI_Callback+0x150>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_EXTI_Callback+0xba>
 8001b6e:	4b27      	ldr	r3, [pc, #156]	; (8001c0c <HAL_GPIO_EXTI_Callback+0x150>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d103      	bne.n	8001b7e <HAL_GPIO_EXTI_Callback+0xc2>
				programState = Resume;
 8001b76:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <HAL_GPIO_EXTI_Callback+0x150>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	701a      	strb	r2, [r3, #0]
 8001b7c:	e006      	b.n	8001b8c <HAL_GPIO_EXTI_Callback+0xd0>
			else if (programState == Resume)
 8001b7e:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <HAL_GPIO_EXTI_Callback+0x150>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d102      	bne.n	8001b8c <HAL_GPIO_EXTI_Callback+0xd0>
				programState = Paused;
 8001b86:	4b21      	ldr	r3, [pc, #132]	; (8001c0c <HAL_GPIO_EXTI_Callback+0x150>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
			previousMillis = currentMillis;
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a1a      	ldr	r2, [pc, #104]	; (8001bfc <HAL_GPIO_EXTI_Callback+0x140>)
 8001b92:	6013      	str	r3, [r2, #0]
}
 8001b94:	e02b      	b.n	8001bee <HAL_GPIO_EXTI_Callback+0x132>
	} else if ((GPIO_Pin == GPIO_PIN_4)) {
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	2b10      	cmp	r3, #16
 8001b9a:	d128      	bne.n	8001bee <HAL_GPIO_EXTI_Callback+0x132>
		if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)) {
 8001b9c:	2110      	movs	r1, #16
 8001b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba2:	f002 fc77 	bl	8004494 <HAL_GPIO_ReadPin>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d115      	bne.n	8001bd8 <HAL_GPIO_EXTI_Callback+0x11c>
			if ((currentMillis - previousMillis > DEBOUNCE_DELAY
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_GPIO_EXTI_Callback+0x140>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2bfa      	cmp	r3, #250	; 0xfa
 8001bb8:	d919      	bls.n	8001bee <HAL_GPIO_EXTI_Callback+0x132>
					&& adc_function != CHANGE_VOLUME)) {
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <HAL_GPIO_EXTI_Callback+0x144>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d015      	beq.n	8001bee <HAL_GPIO_EXTI_Callback+0x132>
				adc_function = CHANGE_MUSIC;
 8001bc2:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <HAL_GPIO_EXTI_Callback+0x144>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]
				HAL_ADC_Start_IT(&hadc1);
 8001bc8:	480e      	ldr	r0, [pc, #56]	; (8001c04 <HAL_GPIO_EXTI_Callback+0x148>)
 8001bca:	f000 ff6b 	bl	8002aa4 <HAL_ADC_Start_IT>
				previousMillis = currentMillis;
 8001bce:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <HAL_GPIO_EXTI_Callback+0x140>)
 8001bd4:	6013      	str	r3, [r2, #0]
}
 8001bd6:	e00a      	b.n	8001bee <HAL_GPIO_EXTI_Callback+0x132>
			adc_function = NONE;
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_GPIO_EXTI_Callback+0x144>)
 8001bda:	2202      	movs	r2, #2
 8001bdc:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Stop_IT(&hadc1);
 8001bde:	4809      	ldr	r0, [pc, #36]	; (8001c04 <HAL_GPIO_EXTI_Callback+0x148>)
 8001be0:	f001 f8a0 	bl	8002d24 <HAL_ADC_Stop_IT>
			set_music(adc_select);
 8001be4:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_GPIO_EXTI_Callback+0x154>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fb3d 	bl	8001268 <set_music>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000608 	.word	0x20000608
 8001bfc:	20000604 	.word	0x20000604
 8001c00:	2000001e 	.word	0x2000001e
 8001c04:	200000bc 	.word	0x200000bc
 8001c08:	200005d4 	.word	0x200005d4
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	200005d8 	.word	0x200005d8

08001c14 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a15      	ldr	r2, [pc, #84]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d124      	bne.n	8001c70 <HAL_TIM_PeriodElapsedCallback+0x5c>
		timePassed = HAL_GetTick();
 8001c26:	f000 fd3d 	bl	80026a4 <HAL_GetTick>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	4a13      	ldr	r2, [pc, #76]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001c2e:	6013      	str	r3, [r2, #0]
		if (index < musicNumberSize) {
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	da0a      	bge.n	8001c52 <HAL_TIM_PeriodElapsedCallback+0x3e>
			display_number(index, carrier[index]);
 8001c3c:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4910      	ldr	r1, [pc, #64]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	f7ff f913 	bl	8000e78 <display_number>
		}
		if (index == 4) {
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d105      	bne.n	8001c66 <HAL_TIM_PeriodElapsedCallback+0x52>
			index = 0;
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
			init_display();
 8001c60:	f7ff f93e 	bl	8000ee0 <init_display>
		} else {
			++index;
		}

	}
}
 8001c64:	e004      	b.n	8001c70 <HAL_TIM_PeriodElapsedCallback+0x5c>
			++index;
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c6e:	6013      	str	r3, [r2, #0]
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40012c00 	.word	0x40012c00
 8001c7c:	20000600 	.word	0x20000600
 8001c80:	200005dc 	.word	0x200005dc
 8001c84:	20000794 	.word	0x20000794
 8001c88:	200005ec 	.word	0x200005ec

08001c8c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c90:	b672      	cpsid	i
}
 8001c92:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c94:	e7fe      	b.n	8001c94 <Error_Handler+0x8>
	...

08001c98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <HAL_MspInit+0x44>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <HAL_MspInit+0x44>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6193      	str	r3, [r2, #24]
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_MspInit+0x44>)
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_MspInit+0x44>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	4a08      	ldr	r2, [pc, #32]	; (8001cdc <HAL_MspInit+0x44>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	61d3      	str	r3, [r2, #28]
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_MspInit+0x44>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cce:	2007      	movs	r0, #7
 8001cd0:	f002 f9ae 	bl	8004030 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d00:	d12b      	bne.n	8001d5a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001d02:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <HAL_ADC_MspInit+0x84>)
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	4a17      	ldr	r2, [pc, #92]	; (8001d64 <HAL_ADC_MspInit+0x84>)
 8001d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	6153      	str	r3, [r2, #20]
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <HAL_ADC_MspInit+0x84>)
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d1a:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_ADC_MspInit+0x84>)
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	4a11      	ldr	r2, [pc, #68]	; (8001d64 <HAL_ADC_MspInit+0x84>)
 8001d20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d24:	6153      	str	r3, [r2, #20]
 8001d26:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <HAL_ADC_MspInit+0x84>)
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d32:	2310      	movs	r3, #16
 8001d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d36:	2303      	movs	r3, #3
 8001d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d3e:	f107 0314 	add.w	r3, r7, #20
 8001d42:	4619      	mov	r1, r3
 8001d44:	4808      	ldr	r0, [pc, #32]	; (8001d68 <HAL_ADC_MspInit+0x88>)
 8001d46:	f002 fa2b 	bl	80041a0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	2012      	movs	r0, #18
 8001d50:	f002 f979 	bl	8004046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001d54:	2012      	movs	r0, #18
 8001d56:	f002 f992 	bl	800407e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d5a:	bf00      	nop
 8001d5c:	3728      	adds	r7, #40	; 0x28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000
 8001d68:	48001400 	.word	0x48001400

08001d6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a17      	ldr	r2, [pc, #92]	; (8001de8 <HAL_I2C_MspInit+0x7c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d127      	bne.n	8001dde <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8e:	4b17      	ldr	r3, [pc, #92]	; (8001dec <HAL_I2C_MspInit+0x80>)
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	4a16      	ldr	r2, [pc, #88]	; (8001dec <HAL_I2C_MspInit+0x80>)
 8001d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d98:	6153      	str	r3, [r2, #20]
 8001d9a:	4b14      	ldr	r3, [pc, #80]	; (8001dec <HAL_I2C_MspInit+0x80>)
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001da6:	23c0      	movs	r3, #192	; 0xc0
 8001da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001daa:	2312      	movs	r3, #18
 8001dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dae:	2301      	movs	r3, #1
 8001db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001db2:	2303      	movs	r3, #3
 8001db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001db6:	2304      	movs	r3, #4
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dba:	f107 0314 	add.w	r3, r7, #20
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	480b      	ldr	r0, [pc, #44]	; (8001df0 <HAL_I2C_MspInit+0x84>)
 8001dc2:	f002 f9ed 	bl	80041a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_I2C_MspInit+0x80>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	4a08      	ldr	r2, [pc, #32]	; (8001dec <HAL_I2C_MspInit+0x80>)
 8001dcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dd0:	61d3      	str	r3, [r2, #28]
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_I2C_MspInit+0x80>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dde:	bf00      	nop
 8001de0:	3728      	adds	r7, #40	; 0x28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40005400 	.word	0x40005400
 8001dec:	40021000 	.word	0x40021000
 8001df0:	48000400 	.word	0x48000400

08001df4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	; 0x28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a17      	ldr	r2, [pc, #92]	; (8001e70 <HAL_SPI_MspInit+0x7c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d128      	bne.n	8001e68 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <HAL_SPI_MspInit+0x80>)
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	4a16      	ldr	r2, [pc, #88]	; (8001e74 <HAL_SPI_MspInit+0x80>)
 8001e1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e20:	6193      	str	r3, [r2, #24]
 8001e22:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <HAL_SPI_MspInit+0x80>)
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <HAL_SPI_MspInit+0x80>)
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	4a10      	ldr	r2, [pc, #64]	; (8001e74 <HAL_SPI_MspInit+0x80>)
 8001e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e38:	6153      	str	r3, [r2, #20]
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <HAL_SPI_MspInit+0x80>)
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001e46:	23e0      	movs	r3, #224	; 0xe0
 8001e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e52:	2303      	movs	r3, #3
 8001e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e56:	2305      	movs	r3, #5
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5a:	f107 0314 	add.w	r3, r7, #20
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e64:	f002 f99c 	bl	80041a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e68:	bf00      	nop
 8001e6a:	3728      	adds	r7, #40	; 0x28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40013000 	.word	0x40013000
 8001e74:	40021000 	.word	0x40021000

08001e78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a16      	ldr	r2, [pc, #88]	; (8001ee0 <HAL_TIM_Base_MspInit+0x68>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d114      	bne.n	8001eb4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <HAL_TIM_Base_MspInit+0x6c>)
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	4a15      	ldr	r2, [pc, #84]	; (8001ee4 <HAL_TIM_Base_MspInit+0x6c>)
 8001e90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e94:	6193      	str	r3, [r2, #24]
 8001e96:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <HAL_TIM_Base_MspInit+0x6c>)
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	2019      	movs	r0, #25
 8001ea8:	f002 f8cd 	bl	8004046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001eac:	2019      	movs	r0, #25
 8001eae:	f002 f8e6 	bl	800407e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001eb2:	e010      	b.n	8001ed6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ebc:	d10b      	bne.n	8001ed6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_TIM_Base_MspInit+0x6c>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	4a08      	ldr	r2, [pc, #32]	; (8001ee4 <HAL_TIM_Base_MspInit+0x6c>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	61d3      	str	r3, [r2, #28]
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_TIM_Base_MspInit+0x6c>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
}
 8001ed6:	bf00      	nop
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40012c00 	.word	0x40012c00
 8001ee4:	40021000 	.word	0x40021000

08001ee8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 030c 	add.w	r3, r7, #12
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f08:	d11d      	bne.n	8001f46 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0a:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <HAL_TIM_MspPostInit+0x68>)
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	4a10      	ldr	r2, [pc, #64]	; (8001f50 <HAL_TIM_MspPostInit+0x68>)
 8001f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f14:	6153      	str	r3, [r2, #20]
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <HAL_TIM_MspPostInit+0x68>)
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f34:	2301      	movs	r3, #1
 8001f36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f38:	f107 030c 	add.w	r3, r7, #12
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f42:	f002 f92d 	bl	80041a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f46:	bf00      	nop
 8001f48:	3720      	adds	r7, #32
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40021000 	.word	0x40021000

08001f54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	; 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a1b      	ldr	r2, [pc, #108]	; (8001fe0 <HAL_UART_MspInit+0x8c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d12f      	bne.n	8001fd6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f76:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <HAL_UART_MspInit+0x90>)
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	4a1a      	ldr	r2, [pc, #104]	; (8001fe4 <HAL_UART_MspInit+0x90>)
 8001f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f80:	6193      	str	r3, [r2, #24]
 8001f82:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <HAL_UART_MspInit+0x90>)
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <HAL_UART_MspInit+0x90>)
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	4a14      	ldr	r2, [pc, #80]	; (8001fe4 <HAL_UART_MspInit+0x90>)
 8001f94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f98:	6153      	str	r3, [r2, #20]
 8001f9a:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <HAL_UART_MspInit+0x90>)
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001fa6:	2330      	movs	r3, #48	; 0x30
 8001fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001faa:	2302      	movs	r3, #2
 8001fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fb6:	2307      	movs	r3, #7
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4809      	ldr	r0, [pc, #36]	; (8001fe8 <HAL_UART_MspInit+0x94>)
 8001fc2:	f002 f8ed 	bl	80041a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2100      	movs	r1, #0
 8001fca:	2025      	movs	r0, #37	; 0x25
 8001fcc:	f002 f83b 	bl	8004046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fd0:	2025      	movs	r0, #37	; 0x25
 8001fd2:	f002 f854 	bl	800407e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001fd6:	bf00      	nop
 8001fd8:	3728      	adds	r7, #40	; 0x28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40013800 	.word	0x40013800
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	48000800 	.word	0x48000800

08001fec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	; 0x28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a18      	ldr	r2, [pc, #96]	; (800206c <HAL_PCD_MspInit+0x80>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d129      	bne.n	8002062 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200e:	4b18      	ldr	r3, [pc, #96]	; (8002070 <HAL_PCD_MspInit+0x84>)
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	4a17      	ldr	r2, [pc, #92]	; (8002070 <HAL_PCD_MspInit+0x84>)
 8002014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002018:	6153      	str	r3, [r2, #20]
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <HAL_PCD_MspInit+0x84>)
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8002026:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800202a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202c:	2302      	movs	r3, #2
 800202e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002034:	2303      	movs	r3, #3
 8002036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8002038:	230e      	movs	r3, #14
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	4619      	mov	r1, r3
 8002042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002046:	f002 f8ab 	bl	80041a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <HAL_PCD_MspInit+0x84>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	4a08      	ldr	r2, [pc, #32]	; (8002070 <HAL_PCD_MspInit+0x84>)
 8002050:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002054:	61d3      	str	r3, [r2, #28]
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_PCD_MspInit+0x84>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002062:	bf00      	nop
 8002064:	3728      	adds	r7, #40	; 0x28
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40005c00 	.word	0x40005c00
 8002070:	40021000 	.word	0x40021000

08002074 <PWM_Start>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PWM_Start() {
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <PWM_Start+0x18>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a04      	ldr	r2, [pc, #16]	; (8002090 <PWM_Start+0x1c>)
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	4611      	mov	r1, r2
 8002082:	4618      	mov	r0, r3
 8002084:	f004 fa38 	bl	80064f8 <HAL_TIM_PWM_Start>
}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20000020 	.word	0x20000020
 8002090:	20000798 	.word	0x20000798

08002094 <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	460a      	mov	r2, r1
 800209e:	80fb      	strh	r3, [r7, #6]
 80020a0:	4613      	mov	r3, r2
 80020a2:	80bb      	strh	r3, [r7, #4]
	if (pwm_freq == 0 || pwm_freq > 20000) {
 80020a4:	88fb      	ldrh	r3, [r7, #6]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d004      	beq.n	80020b4 <PWM_Change_Tone+0x20>
 80020aa:	88fb      	ldrh	r3, [r7, #6]
 80020ac:	f644 6220 	movw	r2, #20000	; 0x4e20
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d937      	bls.n	8002124 <PWM_Change_Tone+0x90>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 80020b4:	4b4e      	ldr	r3, [pc, #312]	; (80021f0 <PWM_Change_Tone+0x15c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d105      	bne.n	80020c8 <PWM_Change_Tone+0x34>
 80020bc:	4b4d      	ldr	r3, [pc, #308]	; (80021f4 <PWM_Change_Tone+0x160>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2200      	movs	r2, #0
 80020c4:	635a      	str	r2, [r3, #52]	; 0x34
 80020c6:	e08e      	b.n	80021e6 <PWM_Change_Tone+0x152>
 80020c8:	4b49      	ldr	r3, [pc, #292]	; (80021f0 <PWM_Change_Tone+0x15c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d105      	bne.n	80020dc <PWM_Change_Tone+0x48>
 80020d0:	4b48      	ldr	r3, [pc, #288]	; (80021f4 <PWM_Change_Tone+0x160>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	2300      	movs	r3, #0
 80020d8:	6393      	str	r3, [r2, #56]	; 0x38
 80020da:	e084      	b.n	80021e6 <PWM_Change_Tone+0x152>
 80020dc:	4b44      	ldr	r3, [pc, #272]	; (80021f0 <PWM_Change_Tone+0x15c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d105      	bne.n	80020f0 <PWM_Change_Tone+0x5c>
 80020e4:	4b43      	ldr	r3, [pc, #268]	; (80021f4 <PWM_Change_Tone+0x160>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	2300      	movs	r3, #0
 80020ec:	63d3      	str	r3, [r2, #60]	; 0x3c
 80020ee:	e07a      	b.n	80021e6 <PWM_Change_Tone+0x152>
 80020f0:	4b3f      	ldr	r3, [pc, #252]	; (80021f0 <PWM_Change_Tone+0x15c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b0c      	cmp	r3, #12
 80020f6:	d105      	bne.n	8002104 <PWM_Change_Tone+0x70>
 80020f8:	4b3e      	ldr	r3, [pc, #248]	; (80021f4 <PWM_Change_Tone+0x160>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	2300      	movs	r3, #0
 8002100:	6413      	str	r3, [r2, #64]	; 0x40
 8002102:	e070      	b.n	80021e6 <PWM_Change_Tone+0x152>
 8002104:	4b3a      	ldr	r3, [pc, #232]	; (80021f0 <PWM_Change_Tone+0x15c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b10      	cmp	r3, #16
 800210a:	d105      	bne.n	8002118 <PWM_Change_Tone+0x84>
 800210c:	4b39      	ldr	r3, [pc, #228]	; (80021f4 <PWM_Change_Tone+0x160>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	2300      	movs	r3, #0
 8002114:	6593      	str	r3, [r2, #88]	; 0x58
 8002116:	e066      	b.n	80021e6 <PWM_Change_Tone+0x152>
 8002118:	4b36      	ldr	r3, [pc, #216]	; (80021f4 <PWM_Change_Tone+0x160>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	2300      	movs	r3, #0
 8002120:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002122:	e060      	b.n	80021e6 <PWM_Change_Tone+0x152>
	} else {
		const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 8002124:	f003 fdb0 	bl	8005c88 <HAL_RCC_GetSysClockFreq>
 8002128:	61f8      	str	r0, [r7, #28]
		const uint16_t prescaler = 1;
 800212a:	2301      	movs	r3, #1
 800212c:	837b      	strh	r3, [r7, #26]
		const uint32_t timer_clock = internal_clock_freq / prescaler;
 800212e:	8b7b      	ldrh	r3, [r7, #26]
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	fbb2 f3f3 	udiv	r3, r2, r3
 8002136:	617b      	str	r3, [r7, #20]
		const uint32_t period_cycles = timer_clock / pwm_freq;
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002140:	613b      	str	r3, [r7, #16]
		const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 8002142:	88bb      	ldrh	r3, [r7, #4]
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	4a2b      	ldr	r2, [pc, #172]	; (80021f8 <PWM_Change_Tone+0x164>)
 800214c:	fba2 2303 	umull	r2, r3, r2, r3
 8002150:	09db      	lsrs	r3, r3, #7
 8002152:	60fb      	str	r3, [r7, #12]

		pwm_timer->Instance->PSC = prescaler - 1;
 8002154:	8b7b      	ldrh	r3, [r7, #26]
 8002156:	1e5a      	subs	r2, r3, #1
 8002158:	4b26      	ldr	r3, [pc, #152]	; (80021f4 <PWM_Change_Tone+0x160>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	629a      	str	r2, [r3, #40]	; 0x28
		pwm_timer->Instance->ARR = period_cycles - 1;
 8002160:	4b24      	ldr	r3, [pc, #144]	; (80021f4 <PWM_Change_Tone+0x160>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	3a01      	subs	r2, #1
 800216a:	62da      	str	r2, [r3, #44]	; 0x2c
		pwm_timer->Instance->EGR = TIM_EGR_UG;
 800216c:	4b21      	ldr	r3, [pc, #132]	; (80021f4 <PWM_Change_Tone+0x160>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2201      	movs	r2, #1
 8002174:	615a      	str	r2, [r3, #20]
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8002176:	4b1e      	ldr	r3, [pc, #120]	; (80021f0 <PWM_Change_Tone+0x15c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d105      	bne.n	800218a <PWM_Change_Tone+0xf6>
 800217e:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <PWM_Change_Tone+0x160>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8002188:	e02d      	b.n	80021e6 <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 800218a:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <PWM_Change_Tone+0x15c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b04      	cmp	r3, #4
 8002190:	d105      	bne.n	800219e <PWM_Change_Tone+0x10a>
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <PWM_Change_Tone+0x160>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800219c:	e023      	b.n	80021e6 <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 800219e:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <PWM_Change_Tone+0x15c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d105      	bne.n	80021b2 <PWM_Change_Tone+0x11e>
 80021a6:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <PWM_Change_Tone+0x160>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80021b0:	e019      	b.n	80021e6 <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80021b2:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <PWM_Change_Tone+0x15c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b0c      	cmp	r3, #12
 80021b8:	d105      	bne.n	80021c6 <PWM_Change_Tone+0x132>
 80021ba:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <PWM_Change_Tone+0x160>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80021c4:	e00f      	b.n	80021e6 <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <PWM_Change_Tone+0x15c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b10      	cmp	r3, #16
 80021cc:	d105      	bne.n	80021da <PWM_Change_Tone+0x146>
 80021ce:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <PWM_Change_Tone+0x160>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6593      	str	r3, [r2, #88]	; 0x58
}
 80021d8:	e005      	b.n	80021e6 <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <PWM_Change_Tone+0x160>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80021e4:	e7ff      	b.n	80021e6 <PWM_Change_Tone+0x152>
 80021e6:	bf00      	nop
 80021e8:	3720      	adds	r7, #32
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000798 	.word	0x20000798
 80021f4:	20000020 	.word	0x20000020
 80021f8:	10624dd3 	.word	0x10624dd3

080021fc <Change_Melody>:

void Change_Melody(const struct Tone *melody, uint16_t tone_count) {
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	807b      	strh	r3, [r7, #2]
	melody_ptr = melody;
 8002208:	4a07      	ldr	r2, [pc, #28]	; (8002228 <Change_Melody+0x2c>)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6013      	str	r3, [r2, #0]
	melody_tone_count = tone_count;
 800220e:	4a07      	ldr	r2, [pc, #28]	; (800222c <Change_Melody+0x30>)
 8002210:	887b      	ldrh	r3, [r7, #2]
 8002212:	8013      	strh	r3, [r2, #0]
	current_tone_number = 0;
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <Change_Melody+0x34>)
 8002216:	2200      	movs	r2, #0
 8002218:	801a      	strh	r2, [r3, #0]
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	2000079c 	.word	0x2000079c
 800222c:	200007a0 	.word	0x200007a0
 8002230:	200007a2 	.word	0x200007a2

08002234 <Update_Melody>:

void Update_Melody() {
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
	if (programState != Paused && programState != IDLE) {
 800223a:	4b28      	ldr	r3, [pc, #160]	; (80022dc <Update_Melody+0xa8>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d042      	beq.n	80022c8 <Update_Melody+0x94>
 8002242:	4b26      	ldr	r3, [pc, #152]	; (80022dc <Update_Melody+0xa8>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d03e      	beq.n	80022c8 <Update_Melody+0x94>
		if ((HAL_GetTick() > current_tone_end)
 800224a:	f000 fa2b 	bl	80026a4 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	4b23      	ldr	r3, [pc, #140]	; (80022e0 <Update_Melody+0xac>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d92c      	bls.n	80022b2 <Update_Melody+0x7e>
				&& (current_tone_number < melody_tone_count)) {
 8002258:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <Update_Melody+0xb0>)
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	b29a      	uxth	r2, r3
 800225e:	4b22      	ldr	r3, [pc, #136]	; (80022e8 <Update_Melody+0xb4>)
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	b29b      	uxth	r3, r3
 8002264:	429a      	cmp	r2, r3
 8002266:	d224      	bcs.n	80022b2 <Update_Melody+0x7e>
			const struct Tone active_tone = *(melody_ptr + current_tone_number);
 8002268:	4b20      	ldr	r3, [pc, #128]	; (80022ec <Update_Melody+0xb8>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <Update_Melody+0xb0>)
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	b29b      	uxth	r3, r3
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	441a      	add	r2, r3
 8002276:	463b      	mov	r3, r7
 8002278:	e892 0003 	ldmia.w	r2, {r0, r1}
 800227c:	e883 0003 	stmia.w	r3, {r0, r1}
			PWM_Change_Tone(active_tone.frequency, volume);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	b29b      	uxth	r3, r3
 8002284:	4a1a      	ldr	r2, [pc, #104]	; (80022f0 <Update_Melody+0xbc>)
 8002286:	8812      	ldrh	r2, [r2, #0]
 8002288:	b292      	uxth	r2, r2
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff01 	bl	8002094 <PWM_Change_Tone>
			current_tone_end = HAL_GetTick() + active_tone.duration;
 8002292:	f000 fa07 	bl	80026a4 <HAL_GetTick>
 8002296:	4603      	mov	r3, r0
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4413      	add	r3, r2
 800229c:	4a10      	ldr	r2, [pc, #64]	; (80022e0 <Update_Melody+0xac>)
 800229e:	6013      	str	r3, [r2, #0]
			current_tone_number++;
 80022a0:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <Update_Melody+0xb0>)
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	3301      	adds	r3, #1
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <Update_Melody+0xb0>)
 80022ac:	801a      	strh	r2, [r3, #0]
				&& (current_tone_number < melody_tone_count)) {
 80022ae:	bf00      	nop
		if ((HAL_GetTick() > current_tone_end)
 80022b0:	e00f      	b.n	80022d2 <Update_Melody+0x9e>
		}else if(current_tone_number >= melody_tone_count)
 80022b2:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <Update_Melody+0xb0>)
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <Update_Melody+0xb4>)
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	429a      	cmp	r2, r3
 80022c0:	d307      	bcc.n	80022d2 <Update_Melody+0x9e>
		{
			next_music();
 80022c2:	f7fe ff53 	bl	800116c <next_music>
		if ((HAL_GetTick() > current_tone_end)
 80022c6:	e004      	b.n	80022d2 <Update_Melody+0x9e>
		}
	}else
	{
		PWM_Change_Tone(0, 0);
 80022c8:	2100      	movs	r1, #0
 80022ca:	2000      	movs	r0, #0
 80022cc:	f7ff fee2 	bl	8002094 <PWM_Change_Tone>
	}
}
 80022d0:	e000      	b.n	80022d4 <Update_Melody+0xa0>
		if ((HAL_GetTick() > current_tone_end)
 80022d2:	bf00      	nop
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000000 	.word	0x20000000
 80022e0:	200007a4 	.word	0x200007a4
 80022e4:	200007a2 	.word	0x200007a2
 80022e8:	200007a0 	.word	0x200007a0
 80022ec:	2000079c 	.word	0x2000079c
 80022f0:	20000024 	.word	0x20000024

080022f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80022f8:	e7fe      	b.n	80022f8 <NMI_Handler+0x4>

080022fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022fe:	e7fe      	b.n	80022fe <HardFault_Handler+0x4>

08002300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002304:	e7fe      	b.n	8002304 <MemManage_Handler+0x4>

08002306 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800230a:	e7fe      	b.n	800230a <BusFault_Handler+0x4>

0800230c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002310:	e7fe      	b.n	8002310 <UsageFault_Handler+0x4>

08002312 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002340:	f000 f99c 	bl	800267c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	Update_Melody();
 8002344:	f7ff ff76 	bl	8002234 <Update_Melody>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}

0800234c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002350:	2001      	movs	r0, #1
 8002352:	f002 f8cf 	bl	80044f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	if (HAL_GetTick() > last_button_press + 200) {
 8002356:	f000 f9a5 	bl	80026a4 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	4b05      	ldr	r3, [pc, #20]	; (8002374 <EXTI0_IRQHandler+0x28>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	33c8      	adds	r3, #200	; 0xc8
 8002362:	429a      	cmp	r2, r3
 8002364:	d904      	bls.n	8002370 <EXTI0_IRQHandler+0x24>
		last_button_press = HAL_GetTick();
 8002366:	f000 f99d 	bl	80026a4 <HAL_GetTick>
 800236a:	4603      	mov	r3, r0
 800236c:	4a01      	ldr	r2, [pc, #4]	; (8002374 <EXTI0_IRQHandler+0x28>)
 800236e:	6013      	str	r3, [r2, #0]

	}
  /* USER CODE END EXTI0_IRQn 1 */
}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}
 8002374:	200007a8 	.word	0x200007a8

08002378 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800237c:	2002      	movs	r0, #2
 800237e:	f002 f8b9 	bl	80044f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}

08002386 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800238a:	2004      	movs	r0, #4
 800238c:	f002 f8b2 	bl	80044f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8002390:	bf00      	nop
 8002392:	bd80      	pop	{r7, pc}

08002394 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002398:	2008      	movs	r0, #8
 800239a:	f002 f8ab 	bl	80044f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80023a6:	2010      	movs	r0, #16
 80023a8:	f002 f8a4 	bl	80044f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80023ac:	bf00      	nop
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80023b4:	4802      	ldr	r0, [pc, #8]	; (80023c0 <ADC1_2_IRQHandler+0x10>)
 80023b6:	f000 fcff 	bl	8002db8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200000bc 	.word	0x200000bc

080023c4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023c8:	4802      	ldr	r0, [pc, #8]	; (80023d4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80023ca:	f004 f995 	bl	80066f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	200001c4 	.word	0x200001c4

080023d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023dc:	4802      	ldr	r0, [pc, #8]	; (80023e8 <USART1_IRQHandler+0x10>)
 80023de:	f005 fa65 	bl	80078ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	2000025c 	.word	0x2000025c

080023ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return 1;
 80023f0:	2301      	movs	r3, #1
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <_kill>:

int _kill(int pid, int sig)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002406:	f006 fcdf 	bl	8008dc8 <__errno>
 800240a:	4603      	mov	r3, r0
 800240c:	2216      	movs	r2, #22
 800240e:	601a      	str	r2, [r3, #0]
  return -1;
 8002410:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <_exit>:

void _exit (int status)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002424:	f04f 31ff 	mov.w	r1, #4294967295
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff ffe7 	bl	80023fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800242e:	e7fe      	b.n	800242e <_exit+0x12>

08002430 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	e00a      	b.n	8002458 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002442:	f3af 8000 	nop.w
 8002446:	4601      	mov	r1, r0
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	60ba      	str	r2, [r7, #8]
 800244e:	b2ca      	uxtb	r2, r1
 8002450:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	3301      	adds	r3, #1
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	429a      	cmp	r2, r3
 800245e:	dbf0      	blt.n	8002442 <_read+0x12>
  }

  return len;
 8002460:	687b      	ldr	r3, [r7, #4]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b086      	sub	sp, #24
 800246e:	af00      	add	r7, sp, #0
 8002470:	60f8      	str	r0, [r7, #12]
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	e009      	b.n	8002490 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	60ba      	str	r2, [r7, #8]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	3301      	adds	r3, #1
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	429a      	cmp	r2, r3
 8002496:	dbf1      	blt.n	800247c <_write+0x12>
  }
  return len;
 8002498:	687b      	ldr	r3, [r7, #4]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <_close>:

int _close(int file)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024ca:	605a      	str	r2, [r3, #4]
  return 0;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <_isatty>:

int _isatty(int file)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024e2:	2301      	movs	r3, #1
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002514:	4a14      	ldr	r2, [pc, #80]	; (8002568 <_sbrk+0x5c>)
 8002516:	4b15      	ldr	r3, [pc, #84]	; (800256c <_sbrk+0x60>)
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002520:	4b13      	ldr	r3, [pc, #76]	; (8002570 <_sbrk+0x64>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d102      	bne.n	800252e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002528:	4b11      	ldr	r3, [pc, #68]	; (8002570 <_sbrk+0x64>)
 800252a:	4a12      	ldr	r2, [pc, #72]	; (8002574 <_sbrk+0x68>)
 800252c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <_sbrk+0x64>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4413      	add	r3, r2
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	429a      	cmp	r2, r3
 800253a:	d207      	bcs.n	800254c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800253c:	f006 fc44 	bl	8008dc8 <__errno>
 8002540:	4603      	mov	r3, r0
 8002542:	220c      	movs	r2, #12
 8002544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002546:	f04f 33ff 	mov.w	r3, #4294967295
 800254a:	e009      	b.n	8002560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800254c:	4b08      	ldr	r3, [pc, #32]	; (8002570 <_sbrk+0x64>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002552:	4b07      	ldr	r3, [pc, #28]	; (8002570 <_sbrk+0x64>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4413      	add	r3, r2
 800255a:	4a05      	ldr	r2, [pc, #20]	; (8002570 <_sbrk+0x64>)
 800255c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800255e:	68fb      	ldr	r3, [r7, #12]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	2000a000 	.word	0x2000a000
 800256c:	00000400 	.word	0x00000400
 8002570:	200007ac 	.word	0x200007ac
 8002574:	200007c8 	.word	0x200007c8

08002578 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <SystemInit+0x20>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002582:	4a05      	ldr	r2, [pc, #20]	; (8002598 <SystemInit+0x20>)
 8002584:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002588:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800259c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025d4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80025a0:	f7ff ffea 	bl	8002578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025a4:	480c      	ldr	r0, [pc, #48]	; (80025d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80025a6:	490d      	ldr	r1, [pc, #52]	; (80025dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80025a8:	4a0d      	ldr	r2, [pc, #52]	; (80025e0 <LoopForever+0xe>)
  movs r3, #0
 80025aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025ac:	e002      	b.n	80025b4 <LoopCopyDataInit>

080025ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025b2:	3304      	adds	r3, #4

080025b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025b8:	d3f9      	bcc.n	80025ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ba:	4a0a      	ldr	r2, [pc, #40]	; (80025e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025bc:	4c0a      	ldr	r4, [pc, #40]	; (80025e8 <LoopForever+0x16>)
  movs r3, #0
 80025be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c0:	e001      	b.n	80025c6 <LoopFillZerobss>

080025c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c4:	3204      	adds	r2, #4

080025c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025c8:	d3fb      	bcc.n	80025c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025ca:	f006 fc03 	bl	8008dd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025ce:	f7fe fe83 	bl	80012d8 <main>

080025d2 <LoopForever>:

LoopForever:
    b LoopForever
 80025d2:	e7fe      	b.n	80025d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80025d4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80025d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025dc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80025e0:	0800d9a8 	.word	0x0800d9a8
  ldr r2, =_sbss
 80025e4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80025e8:	200007c4 	.word	0x200007c4

080025ec <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025ec:	e7fe      	b.n	80025ec <ADC3_IRQHandler>
	...

080025f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <HAL_Init+0x28>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a07      	ldr	r2, [pc, #28]	; (8002618 <HAL_Init+0x28>)
 80025fa:	f043 0310 	orr.w	r3, r3, #16
 80025fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002600:	2003      	movs	r0, #3
 8002602:	f001 fd15 	bl	8004030 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002606:	2000      	movs	r0, #0
 8002608:	f000 f808 	bl	800261c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800260c:	f7ff fb44 	bl	8001c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40022000 	.word	0x40022000

0800261c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <HAL_InitTick+0x54>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4b12      	ldr	r3, [pc, #72]	; (8002674 <HAL_InitTick+0x58>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	4619      	mov	r1, r3
 800262e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002632:	fbb3 f3f1 	udiv	r3, r3, r1
 8002636:	fbb2 f3f3 	udiv	r3, r2, r3
 800263a:	4618      	mov	r0, r3
 800263c:	f001 fd2d 	bl	800409a <HAL_SYSTICK_Config>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e00e      	b.n	8002668 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b0f      	cmp	r3, #15
 800264e:	d80a      	bhi.n	8002666 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002650:	2200      	movs	r2, #0
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	f04f 30ff 	mov.w	r0, #4294967295
 8002658:	f001 fcf5 	bl	8004046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800265c:	4a06      	ldr	r2, [pc, #24]	; (8002678 <HAL_InitTick+0x5c>)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	e000      	b.n	8002668 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
}
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20000028 	.word	0x20000028
 8002674:	20000030 	.word	0x20000030
 8002678:	2000002c 	.word	0x2000002c

0800267c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_IncTick+0x20>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	461a      	mov	r2, r3
 8002686:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_IncTick+0x24>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4413      	add	r3, r2
 800268c:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <HAL_IncTick+0x24>)
 800268e:	6013      	str	r3, [r2, #0]
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	20000030 	.word	0x20000030
 80026a0:	200007b0 	.word	0x200007b0

080026a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80026a8:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <HAL_GetTick+0x14>)
 80026aa:	681b      	ldr	r3, [r3, #0]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	200007b0 	.word	0x200007b0

080026bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b09a      	sub	sp, #104	; 0x68
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e1c9      	b.n	8002a98 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	2b00      	cmp	r3, #0
 8002714:	d176      	bne.n	8002804 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	2b00      	cmp	r3, #0
 800271c:	d152      	bne.n	80027c4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff fad1 	bl	8001ce0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d13b      	bne.n	80027c4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f001 fa83 	bl	8003c58 <ADC_Disable>
 8002752:	4603      	mov	r3, r0
 8002754:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	2b00      	cmp	r3, #0
 8002762:	d12f      	bne.n	80027c4 <HAL_ADC_Init+0xe0>
 8002764:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002768:	2b00      	cmp	r3, #0
 800276a:	d12b      	bne.n	80027c4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002774:	f023 0302 	bic.w	r3, r3, #2
 8002778:	f043 0202 	orr.w	r2, r3, #2
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800278e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800279e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027a0:	4b86      	ldr	r3, [pc, #536]	; (80029bc <HAL_ADC_Init+0x2d8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a86      	ldr	r2, [pc, #536]	; (80029c0 <HAL_ADC_Init+0x2dc>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	0c9a      	lsrs	r2, r3, #18
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027b6:	e002      	b.n	80027be <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f9      	bne.n	80027b8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d007      	beq.n	80027e2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80027dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027e0:	d110      	bne.n	8002804 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f023 0312 	bic.w	r3, r3, #18
 80027ea:	f043 0210 	orr.w	r2, r3, #16
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	f043 0201 	orr.w	r2, r3, #1
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	f003 0310 	and.w	r3, r3, #16
 800280c:	2b00      	cmp	r3, #0
 800280e:	f040 8136 	bne.w	8002a7e <HAL_ADC_Init+0x39a>
 8002812:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002816:	2b00      	cmp	r3, #0
 8002818:	f040 8131 	bne.w	8002a7e <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002826:	2b00      	cmp	r3, #0
 8002828:	f040 8129 	bne.w	8002a7e <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002834:	f043 0202 	orr.w	r2, r3, #2
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002844:	d004      	beq.n	8002850 <HAL_ADC_Init+0x16c>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a5e      	ldr	r2, [pc, #376]	; (80029c4 <HAL_ADC_Init+0x2e0>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d101      	bne.n	8002854 <HAL_ADC_Init+0x170>
 8002850:	4b5d      	ldr	r3, [pc, #372]	; (80029c8 <HAL_ADC_Init+0x2e4>)
 8002852:	e000      	b.n	8002856 <HAL_ADC_Init+0x172>
 8002854:	4b5d      	ldr	r3, [pc, #372]	; (80029cc <HAL_ADC_Init+0x2e8>)
 8002856:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002860:	d102      	bne.n	8002868 <HAL_ADC_Init+0x184>
 8002862:	4b58      	ldr	r3, [pc, #352]	; (80029c4 <HAL_ADC_Init+0x2e0>)
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	e01a      	b.n	800289e <HAL_ADC_Init+0x1ba>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a55      	ldr	r2, [pc, #340]	; (80029c4 <HAL_ADC_Init+0x2e0>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d103      	bne.n	800287a <HAL_ADC_Init+0x196>
 8002872:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	e011      	b.n	800289e <HAL_ADC_Init+0x1ba>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a54      	ldr	r2, [pc, #336]	; (80029d0 <HAL_ADC_Init+0x2ec>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d102      	bne.n	800288a <HAL_ADC_Init+0x1a6>
 8002884:	4b53      	ldr	r3, [pc, #332]	; (80029d4 <HAL_ADC_Init+0x2f0>)
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	e009      	b.n	800289e <HAL_ADC_Init+0x1ba>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a51      	ldr	r2, [pc, #324]	; (80029d4 <HAL_ADC_Init+0x2f0>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d102      	bne.n	800289a <HAL_ADC_Init+0x1b6>
 8002894:	4b4e      	ldr	r3, [pc, #312]	; (80029d0 <HAL_ADC_Init+0x2ec>)
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	e001      	b.n	800289e <HAL_ADC_Init+0x1ba>
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d108      	bne.n	80028be <HAL_ADC_Init+0x1da>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_ADC_Init+0x1da>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_ADC_Init+0x1dc>
 80028be:	2300      	movs	r3, #0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d11c      	bne.n	80028fe <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80028c4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d010      	beq.n	80028ec <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d107      	bne.n	80028e6 <HAL_ADC_Init+0x202>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_ADC_Init+0x202>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <HAL_ADC_Init+0x204>
 80028e6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d108      	bne.n	80028fe <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80028ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	431a      	orrs	r2, r3
 80028fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028fc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	7e5b      	ldrb	r3, [r3, #25]
 8002902:	035b      	lsls	r3, r3, #13
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002908:	2a01      	cmp	r2, #1
 800290a:	d002      	beq.n	8002912 <HAL_ADC_Init+0x22e>
 800290c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002910:	e000      	b.n	8002914 <HAL_ADC_Init+0x230>
 8002912:	2200      	movs	r2, #0
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	4313      	orrs	r3, r2
 8002922:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002924:	4313      	orrs	r3, r2
 8002926:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d11b      	bne.n	800296a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	7e5b      	ldrb	r3, [r3, #25]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d109      	bne.n	800294e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	3b01      	subs	r3, #1
 8002940:	045a      	lsls	r2, r3, #17
 8002942:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002944:	4313      	orrs	r3, r2
 8002946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294a:	663b      	str	r3, [r7, #96]	; 0x60
 800294c:	e00d      	b.n	800296a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002956:	f043 0220 	orr.w	r2, r3, #32
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	f043 0201 	orr.w	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296e:	2b01      	cmp	r3, #1
 8002970:	d03a      	beq.n	80029e8 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a16      	ldr	r2, [pc, #88]	; (80029d0 <HAL_ADC_Init+0x2ec>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d004      	beq.n	8002986 <HAL_ADC_Init+0x2a2>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a14      	ldr	r2, [pc, #80]	; (80029d4 <HAL_ADC_Init+0x2f0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d128      	bne.n	80029d8 <HAL_ADC_Init+0x2f4>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800298e:	d012      	beq.n	80029b6 <HAL_ADC_Init+0x2d2>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002998:	d00a      	beq.n	80029b0 <HAL_ADC_Init+0x2cc>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80029a2:	d002      	beq.n	80029aa <HAL_ADC_Init+0x2c6>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	e018      	b.n	80029dc <HAL_ADC_Init+0x2f8>
 80029aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029ae:	e015      	b.n	80029dc <HAL_ADC_Init+0x2f8>
 80029b0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80029b4:	e012      	b.n	80029dc <HAL_ADC_Init+0x2f8>
 80029b6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80029ba:	e00f      	b.n	80029dc <HAL_ADC_Init+0x2f8>
 80029bc:	20000028 	.word	0x20000028
 80029c0:	431bde83 	.word	0x431bde83
 80029c4:	50000100 	.word	0x50000100
 80029c8:	50000300 	.word	0x50000300
 80029cc:	50000700 	.word	0x50000700
 80029d0:	50000400 	.word	0x50000400
 80029d4:	50000500 	.word	0x50000500
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029e0:	4313      	orrs	r3, r2
 80029e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029e4:	4313      	orrs	r3, r2
 80029e6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d114      	bne.n	8002a20 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a04:	f023 0302 	bic.w	r3, r3, #2
 8002a08:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	7e1b      	ldrb	r3, [r3, #24]
 8002a0e:	039a      	lsls	r2, r3, #14
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <HAL_ADC_Init+0x3bc>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002a30:	430b      	orrs	r3, r1
 8002a32:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d10c      	bne.n	8002a56 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	f023 010f 	bic.w	r1, r3, #15
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	1e5a      	subs	r2, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30
 8002a54:	e007      	b.n	8002a66 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 020f 	bic.w	r2, r2, #15
 8002a64:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	f023 0303 	bic.w	r3, r3, #3
 8002a74:	f043 0201 	orr.w	r2, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40
 8002a7c:	e00a      	b.n	8002a94 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f023 0312 	bic.w	r3, r3, #18
 8002a86:	f043 0210 	orr.w	r2, r3, #16
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002a8e:	2301      	movs	r3, #1
 8002a90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002a94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3768      	adds	r7, #104	; 0x68
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	fff0c007 	.word	0xfff0c007

08002aa4 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f040 8123 	bne.w	8002d06 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_ADC_Start_IT+0x2a>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e11e      	b.n	8002d0c <HAL_ADC_Start_IT+0x268>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f001 f85a 	bl	8003b90 <ADC_Enable>
 8002adc:	4603      	mov	r3, r0
 8002ade:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f040 810a 	bne.w	8002cfc <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002af0:	f023 0301 	bic.w	r3, r3, #1
 8002af4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b04:	d004      	beq.n	8002b10 <HAL_ADC_Start_IT+0x6c>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a82      	ldr	r2, [pc, #520]	; (8002d14 <HAL_ADC_Start_IT+0x270>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d106      	bne.n	8002b1e <HAL_ADC_Start_IT+0x7a>
 8002b10:	4b81      	ldr	r3, [pc, #516]	; (8002d18 <HAL_ADC_Start_IT+0x274>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d010      	beq.n	8002b3e <HAL_ADC_Start_IT+0x9a>
 8002b1c:	e005      	b.n	8002b2a <HAL_ADC_Start_IT+0x86>
 8002b1e:	4b7f      	ldr	r3, [pc, #508]	; (8002d1c <HAL_ADC_Start_IT+0x278>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 031f 	and.w	r3, r3, #31
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d009      	beq.n	8002b3e <HAL_ADC_Start_IT+0x9a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b32:	d004      	beq.n	8002b3e <HAL_ADC_Start_IT+0x9a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a79      	ldr	r2, [pc, #484]	; (8002d20 <HAL_ADC_Start_IT+0x27c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d115      	bne.n	8002b6a <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d036      	beq.n	8002bc6 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002b68:	e02d      	b.n	8002bc6 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b7e:	d004      	beq.n	8002b8a <HAL_ADC_Start_IT+0xe6>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a63      	ldr	r2, [pc, #396]	; (8002d14 <HAL_ADC_Start_IT+0x270>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d10a      	bne.n	8002ba0 <HAL_ADC_Start_IT+0xfc>
 8002b8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	bf14      	ite	ne
 8002b98:	2301      	movne	r3, #1
 8002b9a:	2300      	moveq	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	e008      	b.n	8002bb2 <HAL_ADC_Start_IT+0x10e>
 8002ba0:	4b5f      	ldr	r3, [pc, #380]	; (8002d20 <HAL_ADC_Start_IT+0x27c>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf14      	ite	ne
 8002bac:	2301      	movne	r3, #1
 8002bae:	2300      	moveq	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d007      	beq.n	8002bc6 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bbe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd2:	d106      	bne.n	8002be2 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd8:	f023 0206 	bic.w	r2, r3, #6
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	645a      	str	r2, [r3, #68]	; 0x44
 8002be0:	e002      	b.n	8002be8 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	221c      	movs	r2, #28
 8002bf6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d110      	bne.n	8002c22 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0204 	bic.w	r2, r2, #4
 8002c0e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0208 	orr.w	r2, r2, #8
 8002c1e:	605a      	str	r2, [r3, #4]
          break;
 8002c20:	e008      	b.n	8002c34 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f042 020c 	orr.w	r2, r2, #12
 8002c30:	605a      	str	r2, [r3, #4]
          break;
 8002c32:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d107      	bne.n	8002c4c <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0210 	bic.w	r2, r2, #16
 8002c4a:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c54:	d004      	beq.n	8002c60 <HAL_ADC_Start_IT+0x1bc>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a2e      	ldr	r2, [pc, #184]	; (8002d14 <HAL_ADC_Start_IT+0x270>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d106      	bne.n	8002c6e <HAL_ADC_Start_IT+0x1ca>
 8002c60:	4b2d      	ldr	r3, [pc, #180]	; (8002d18 <HAL_ADC_Start_IT+0x274>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 031f 	and.w	r3, r3, #31
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d03e      	beq.n	8002cea <HAL_ADC_Start_IT+0x246>
 8002c6c:	e005      	b.n	8002c7a <HAL_ADC_Start_IT+0x1d6>
 8002c6e:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <HAL_ADC_Start_IT+0x278>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d037      	beq.n	8002cea <HAL_ADC_Start_IT+0x246>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c82:	d004      	beq.n	8002c8e <HAL_ADC_Start_IT+0x1ea>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a22      	ldr	r2, [pc, #136]	; (8002d14 <HAL_ADC_Start_IT+0x270>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d106      	bne.n	8002c9c <HAL_ADC_Start_IT+0x1f8>
 8002c8e:	4b22      	ldr	r3, [pc, #136]	; (8002d18 <HAL_ADC_Start_IT+0x274>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	2b05      	cmp	r3, #5
 8002c98:	d027      	beq.n	8002cea <HAL_ADC_Start_IT+0x246>
 8002c9a:	e005      	b.n	8002ca8 <HAL_ADC_Start_IT+0x204>
 8002c9c:	4b1f      	ldr	r3, [pc, #124]	; (8002d1c <HAL_ADC_Start_IT+0x278>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 031f 	and.w	r3, r3, #31
 8002ca4:	2b05      	cmp	r3, #5
 8002ca6:	d020      	beq.n	8002cea <HAL_ADC_Start_IT+0x246>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cb0:	d004      	beq.n	8002cbc <HAL_ADC_Start_IT+0x218>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a17      	ldr	r2, [pc, #92]	; (8002d14 <HAL_ADC_Start_IT+0x270>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d106      	bne.n	8002cca <HAL_ADC_Start_IT+0x226>
 8002cbc:	4b16      	ldr	r3, [pc, #88]	; (8002d18 <HAL_ADC_Start_IT+0x274>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 031f 	and.w	r3, r3, #31
 8002cc4:	2b09      	cmp	r3, #9
 8002cc6:	d010      	beq.n	8002cea <HAL_ADC_Start_IT+0x246>
 8002cc8:	e005      	b.n	8002cd6 <HAL_ADC_Start_IT+0x232>
 8002cca:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <HAL_ADC_Start_IT+0x278>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 031f 	and.w	r3, r3, #31
 8002cd2:	2b09      	cmp	r3, #9
 8002cd4:	d009      	beq.n	8002cea <HAL_ADC_Start_IT+0x246>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cde:	d004      	beq.n	8002cea <HAL_ADC_Start_IT+0x246>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a0e      	ldr	r2, [pc, #56]	; (8002d20 <HAL_ADC_Start_IT+0x27c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d10f      	bne.n	8002d0a <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f042 0204 	orr.w	r2, r2, #4
 8002cf8:	609a      	str	r2, [r3, #8]
 8002cfa:	e006      	b.n	8002d0a <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d04:	e001      	b.n	8002d0a <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d06:	2302      	movs	r3, #2
 8002d08:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	50000100 	.word	0x50000100
 8002d18:	50000300 	.word	0x50000300
 8002d1c:	50000700 	.word	0x50000700
 8002d20:	50000400 	.word	0x50000400

08002d24 <HAL_ADC_Stop_IT>:
  *         use function @ref HAL_ADCEx_RegularStop_IT().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_ADC_Stop_IT+0x1a>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e02b      	b.n	8002d96 <HAL_ADC_Stop_IT+0x72>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002d46:	216c      	movs	r1, #108	; 0x6c
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 ffeb 	bl	8003d24 <ADC_ConversionStop>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d119      	bne.n	8002d8c <HAL_ADC_Stop_IT+0x68>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 021c 	bic.w	r2, r2, #28
 8002d66:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 ff75 	bl	8003c58 <ADC_Disable>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d109      	bne.n	8002d8c <HAL_ADC_Stop_IT+0x68>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	f043 0201 	orr.w	r2, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d004      	beq.n	8002df0 <HAL_ADC_IRQHandler+0x38>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10b      	bne.n	8002e08 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 80bc 	beq.w	8002f74 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 80b6 	beq.w	8002f74 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d105      	bne.n	8002e20 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e28:	d004      	beq.n	8002e34 <HAL_ADC_IRQHandler+0x7c>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a90      	ldr	r2, [pc, #576]	; (8003070 <HAL_ADC_IRQHandler+0x2b8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d106      	bne.n	8002e42 <HAL_ADC_IRQHandler+0x8a>
 8002e34:	4b8f      	ldr	r3, [pc, #572]	; (8003074 <HAL_ADC_IRQHandler+0x2bc>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 031f 	and.w	r3, r3, #31
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d03e      	beq.n	8002ebe <HAL_ADC_IRQHandler+0x106>
 8002e40:	e005      	b.n	8002e4e <HAL_ADC_IRQHandler+0x96>
 8002e42:	4b8d      	ldr	r3, [pc, #564]	; (8003078 <HAL_ADC_IRQHandler+0x2c0>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 031f 	and.w	r3, r3, #31
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d037      	beq.n	8002ebe <HAL_ADC_IRQHandler+0x106>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e56:	d004      	beq.n	8002e62 <HAL_ADC_IRQHandler+0xaa>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a84      	ldr	r2, [pc, #528]	; (8003070 <HAL_ADC_IRQHandler+0x2b8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d106      	bne.n	8002e70 <HAL_ADC_IRQHandler+0xb8>
 8002e62:	4b84      	ldr	r3, [pc, #528]	; (8003074 <HAL_ADC_IRQHandler+0x2bc>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 031f 	and.w	r3, r3, #31
 8002e6a:	2b05      	cmp	r3, #5
 8002e6c:	d027      	beq.n	8002ebe <HAL_ADC_IRQHandler+0x106>
 8002e6e:	e005      	b.n	8002e7c <HAL_ADC_IRQHandler+0xc4>
 8002e70:	4b81      	ldr	r3, [pc, #516]	; (8003078 <HAL_ADC_IRQHandler+0x2c0>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	2b05      	cmp	r3, #5
 8002e7a:	d020      	beq.n	8002ebe <HAL_ADC_IRQHandler+0x106>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e84:	d004      	beq.n	8002e90 <HAL_ADC_IRQHandler+0xd8>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a79      	ldr	r2, [pc, #484]	; (8003070 <HAL_ADC_IRQHandler+0x2b8>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d106      	bne.n	8002e9e <HAL_ADC_IRQHandler+0xe6>
 8002e90:	4b78      	ldr	r3, [pc, #480]	; (8003074 <HAL_ADC_IRQHandler+0x2bc>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	2b09      	cmp	r3, #9
 8002e9a:	d010      	beq.n	8002ebe <HAL_ADC_IRQHandler+0x106>
 8002e9c:	e005      	b.n	8002eaa <HAL_ADC_IRQHandler+0xf2>
 8002e9e:	4b76      	ldr	r3, [pc, #472]	; (8003078 <HAL_ADC_IRQHandler+0x2c0>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 031f 	and.w	r3, r3, #31
 8002ea6:	2b09      	cmp	r3, #9
 8002ea8:	d009      	beq.n	8002ebe <HAL_ADC_IRQHandler+0x106>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eb2:	d004      	beq.n	8002ebe <HAL_ADC_IRQHandler+0x106>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a70      	ldr	r2, [pc, #448]	; (800307c <HAL_ADC_IRQHandler+0x2c4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d104      	bne.n	8002ec8 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	61bb      	str	r3, [r7, #24]
 8002ec6:	e00f      	b.n	8002ee8 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ed0:	d004      	beq.n	8002edc <HAL_ADC_IRQHandler+0x124>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a66      	ldr	r2, [pc, #408]	; (8003070 <HAL_ADC_IRQHandler+0x2b8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d102      	bne.n	8002ee2 <HAL_ADC_IRQHandler+0x12a>
 8002edc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ee0:	e000      	b.n	8002ee4 <HAL_ADC_IRQHandler+0x12c>
 8002ee2:	4b66      	ldr	r3, [pc, #408]	; (800307c <HAL_ADC_IRQHandler+0x2c4>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d137      	bne.n	8002f66 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d132      	bne.n	8002f66 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d02d      	beq.n	8002f66 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d11a      	bne.n	8002f4e <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 020c 	bic.w	r2, r2, #12
 8002f26:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d112      	bne.n	8002f66 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	f043 0201 	orr.w	r2, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	641a      	str	r2, [r3, #64]	; 0x40
 8002f4c:	e00b      	b.n	8002f66 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f043 0210 	orr.w	r2, r3, #16
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5e:	f043 0201 	orr.w	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7fd ff4a 	bl	8000e00 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	220c      	movs	r2, #12
 8002f72:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d004      	beq.n	8002f88 <HAL_ADC_IRQHandler+0x1d0>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f003 0320 	and.w	r3, r3, #32
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10b      	bne.n	8002fa0 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 8138 	beq.w	8003204 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 8132 	beq.w	8003204 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fb4:	d004      	beq.n	8002fc0 <HAL_ADC_IRQHandler+0x208>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a2d      	ldr	r2, [pc, #180]	; (8003070 <HAL_ADC_IRQHandler+0x2b8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d106      	bne.n	8002fce <HAL_ADC_IRQHandler+0x216>
 8002fc0:	4b2c      	ldr	r3, [pc, #176]	; (8003074 <HAL_ADC_IRQHandler+0x2bc>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d03e      	beq.n	800304a <HAL_ADC_IRQHandler+0x292>
 8002fcc:	e005      	b.n	8002fda <HAL_ADC_IRQHandler+0x222>
 8002fce:	4b2a      	ldr	r3, [pc, #168]	; (8003078 <HAL_ADC_IRQHandler+0x2c0>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 031f 	and.w	r3, r3, #31
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d037      	beq.n	800304a <HAL_ADC_IRQHandler+0x292>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fe2:	d004      	beq.n	8002fee <HAL_ADC_IRQHandler+0x236>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a21      	ldr	r2, [pc, #132]	; (8003070 <HAL_ADC_IRQHandler+0x2b8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d106      	bne.n	8002ffc <HAL_ADC_IRQHandler+0x244>
 8002fee:	4b21      	ldr	r3, [pc, #132]	; (8003074 <HAL_ADC_IRQHandler+0x2bc>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 031f 	and.w	r3, r3, #31
 8002ff6:	2b05      	cmp	r3, #5
 8002ff8:	d027      	beq.n	800304a <HAL_ADC_IRQHandler+0x292>
 8002ffa:	e005      	b.n	8003008 <HAL_ADC_IRQHandler+0x250>
 8002ffc:	4b1e      	ldr	r3, [pc, #120]	; (8003078 <HAL_ADC_IRQHandler+0x2c0>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 031f 	and.w	r3, r3, #31
 8003004:	2b05      	cmp	r3, #5
 8003006:	d020      	beq.n	800304a <HAL_ADC_IRQHandler+0x292>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003010:	d004      	beq.n	800301c <HAL_ADC_IRQHandler+0x264>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a16      	ldr	r2, [pc, #88]	; (8003070 <HAL_ADC_IRQHandler+0x2b8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d106      	bne.n	800302a <HAL_ADC_IRQHandler+0x272>
 800301c:	4b15      	ldr	r3, [pc, #84]	; (8003074 <HAL_ADC_IRQHandler+0x2bc>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 031f 	and.w	r3, r3, #31
 8003024:	2b09      	cmp	r3, #9
 8003026:	d010      	beq.n	800304a <HAL_ADC_IRQHandler+0x292>
 8003028:	e005      	b.n	8003036 <HAL_ADC_IRQHandler+0x27e>
 800302a:	4b13      	ldr	r3, [pc, #76]	; (8003078 <HAL_ADC_IRQHandler+0x2c0>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 031f 	and.w	r3, r3, #31
 8003032:	2b09      	cmp	r3, #9
 8003034:	d009      	beq.n	800304a <HAL_ADC_IRQHandler+0x292>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800303e:	d004      	beq.n	800304a <HAL_ADC_IRQHandler+0x292>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a0d      	ldr	r2, [pc, #52]	; (800307c <HAL_ADC_IRQHandler+0x2c4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d104      	bne.n	8003054 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	61bb      	str	r3, [r7, #24]
 8003052:	e018      	b.n	8003086 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800305c:	d004      	beq.n	8003068 <HAL_ADC_IRQHandler+0x2b0>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a03      	ldr	r2, [pc, #12]	; (8003070 <HAL_ADC_IRQHandler+0x2b8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d10b      	bne.n	8003080 <HAL_ADC_IRQHandler+0x2c8>
 8003068:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800306c:	e009      	b.n	8003082 <HAL_ADC_IRQHandler+0x2ca>
 800306e:	bf00      	nop
 8003070:	50000100 	.word	0x50000100
 8003074:	50000300 	.word	0x50000300
 8003078:	50000700 	.word	0x50000700
 800307c:	50000400 	.word	0x50000400
 8003080:	4b92      	ldr	r3, [pc, #584]	; (80032cc <HAL_ADC_IRQHandler+0x514>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003090:	2b00      	cmp	r3, #0
 8003092:	f040 80b0 	bne.w	80031f6 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00d      	beq.n	80030bc <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f040 80a3 	bne.w	80031f6 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f040 809d 	bne.w	80031f6 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 8097 	beq.w	80031f6 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030d0:	d004      	beq.n	80030dc <HAL_ADC_IRQHandler+0x324>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a7e      	ldr	r2, [pc, #504]	; (80032d0 <HAL_ADC_IRQHandler+0x518>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d106      	bne.n	80030ea <HAL_ADC_IRQHandler+0x332>
 80030dc:	4b7d      	ldr	r3, [pc, #500]	; (80032d4 <HAL_ADC_IRQHandler+0x51c>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d03e      	beq.n	8003166 <HAL_ADC_IRQHandler+0x3ae>
 80030e8:	e005      	b.n	80030f6 <HAL_ADC_IRQHandler+0x33e>
 80030ea:	4b7b      	ldr	r3, [pc, #492]	; (80032d8 <HAL_ADC_IRQHandler+0x520>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 031f 	and.w	r3, r3, #31
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d037      	beq.n	8003166 <HAL_ADC_IRQHandler+0x3ae>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030fe:	d004      	beq.n	800310a <HAL_ADC_IRQHandler+0x352>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a72      	ldr	r2, [pc, #456]	; (80032d0 <HAL_ADC_IRQHandler+0x518>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d106      	bne.n	8003118 <HAL_ADC_IRQHandler+0x360>
 800310a:	4b72      	ldr	r3, [pc, #456]	; (80032d4 <HAL_ADC_IRQHandler+0x51c>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 031f 	and.w	r3, r3, #31
 8003112:	2b06      	cmp	r3, #6
 8003114:	d027      	beq.n	8003166 <HAL_ADC_IRQHandler+0x3ae>
 8003116:	e005      	b.n	8003124 <HAL_ADC_IRQHandler+0x36c>
 8003118:	4b6f      	ldr	r3, [pc, #444]	; (80032d8 <HAL_ADC_IRQHandler+0x520>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	2b06      	cmp	r3, #6
 8003122:	d020      	beq.n	8003166 <HAL_ADC_IRQHandler+0x3ae>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800312c:	d004      	beq.n	8003138 <HAL_ADC_IRQHandler+0x380>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a67      	ldr	r2, [pc, #412]	; (80032d0 <HAL_ADC_IRQHandler+0x518>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d106      	bne.n	8003146 <HAL_ADC_IRQHandler+0x38e>
 8003138:	4b66      	ldr	r3, [pc, #408]	; (80032d4 <HAL_ADC_IRQHandler+0x51c>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 031f 	and.w	r3, r3, #31
 8003140:	2b07      	cmp	r3, #7
 8003142:	d010      	beq.n	8003166 <HAL_ADC_IRQHandler+0x3ae>
 8003144:	e005      	b.n	8003152 <HAL_ADC_IRQHandler+0x39a>
 8003146:	4b64      	ldr	r3, [pc, #400]	; (80032d8 <HAL_ADC_IRQHandler+0x520>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 031f 	and.w	r3, r3, #31
 800314e:	2b07      	cmp	r3, #7
 8003150:	d009      	beq.n	8003166 <HAL_ADC_IRQHandler+0x3ae>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800315a:	d004      	beq.n	8003166 <HAL_ADC_IRQHandler+0x3ae>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a5a      	ldr	r2, [pc, #360]	; (80032cc <HAL_ADC_IRQHandler+0x514>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d104      	bne.n	8003170 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	e00f      	b.n	8003190 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003178:	d004      	beq.n	8003184 <HAL_ADC_IRQHandler+0x3cc>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a54      	ldr	r2, [pc, #336]	; (80032d0 <HAL_ADC_IRQHandler+0x518>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d102      	bne.n	800318a <HAL_ADC_IRQHandler+0x3d2>
 8003184:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003188:	e000      	b.n	800318c <HAL_ADC_IRQHandler+0x3d4>
 800318a:	4b50      	ldr	r3, [pc, #320]	; (80032cc <HAL_ADC_IRQHandler+0x514>)
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d12d      	bne.n	80031f6 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 0308 	and.w	r3, r3, #8
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d11a      	bne.n	80031de <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031b6:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d112      	bne.n	80031f6 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	f043 0201 	orr.w	r2, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	641a      	str	r2, [r3, #64]	; 0x40
 80031dc:	e00b      	b.n	80031f6 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f043 0210 	orr.w	r2, r3, #16
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	f043 0201 	orr.w	r2, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f8c4 	bl	8003384 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2260      	movs	r2, #96	; 0x60
 8003202:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320a:	2b00      	cmp	r3, #0
 800320c:	d011      	beq.n	8003232 <HAL_ADC_IRQHandler+0x47a>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00c      	beq.n	8003232 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff fa49 	bl	80026bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2280      	movs	r2, #128	; 0x80
 8003230:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003238:	2b00      	cmp	r3, #0
 800323a:	d012      	beq.n	8003262 <HAL_ADC_IRQHandler+0x4aa>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00d      	beq.n	8003262 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f8aa 	bl	80033ac <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003260:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003268:	2b00      	cmp	r3, #0
 800326a:	d012      	beq.n	8003292 <HAL_ADC_IRQHandler+0x4da>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00d      	beq.n	8003292 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f89c 	bl	80033c0 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003290:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	2b00      	cmp	r3, #0
 800329a:	d04f      	beq.n	800333c <HAL_ADC_IRQHandler+0x584>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d04a      	beq.n	800333c <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d102      	bne.n	80032b4 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 80032ae:	2301      	movs	r3, #1
 80032b0:	61fb      	str	r3, [r7, #28]
 80032b2:	e02d      	b.n	8003310 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032bc:	d004      	beq.n	80032c8 <HAL_ADC_IRQHandler+0x510>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a03      	ldr	r2, [pc, #12]	; (80032d0 <HAL_ADC_IRQHandler+0x518>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d109      	bne.n	80032dc <HAL_ADC_IRQHandler+0x524>
 80032c8:	4b02      	ldr	r3, [pc, #8]	; (80032d4 <HAL_ADC_IRQHandler+0x51c>)
 80032ca:	e008      	b.n	80032de <HAL_ADC_IRQHandler+0x526>
 80032cc:	50000400 	.word	0x50000400
 80032d0:	50000100 	.word	0x50000100
 80032d4:	50000300 	.word	0x50000300
 80032d8:	50000700 	.word	0x50000700
 80032dc:	4b28      	ldr	r3, [pc, #160]	; (8003380 <HAL_ADC_IRQHandler+0x5c8>)
 80032de:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d109      	bne.n	8003300 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d10a      	bne.n	8003310 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80032fa:	2301      	movs	r3, #1
 80032fc:	61fb      	str	r3, [r7, #28]
 80032fe:	e007      	b.n	8003310 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 800330c:	2301      	movs	r3, #1
 800330e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d10e      	bne.n	8003334 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003326:	f043 0202 	orr.w	r2, r3, #2
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff f9ce 	bl	80026d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2210      	movs	r2, #16
 800333a:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003342:	2b00      	cmp	r3, #0
 8003344:	d018      	beq.n	8003378 <HAL_ADC_IRQHandler+0x5c0>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334c:	2b00      	cmp	r3, #0
 800334e:	d013      	beq.n	8003378 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003360:	f043 0208 	orr.w	r2, r3, #8
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003370:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f810 	bl	8003398 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8003378:	bf00      	nop
 800337a:	3720      	adds	r7, #32
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	50000700 	.word	0x50000700

08003384 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b09b      	sub	sp, #108	; 0x6c
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x22>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e2ca      	b.n	800398c <HAL_ADC_ConfigChannel+0x5b8>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	f040 82ae 	bne.w	800396a <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b04      	cmp	r3, #4
 8003414:	d81c      	bhi.n	8003450 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	4413      	add	r3, r2
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	461a      	mov	r2, r3
 800342a:	231f      	movs	r3, #31
 800342c:	4093      	lsls	r3, r2
 800342e:	43db      	mvns	r3, r3
 8003430:	4019      	ands	r1, r3
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	4413      	add	r3, r2
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	fa00 f203 	lsl.w	r2, r0, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	631a      	str	r2, [r3, #48]	; 0x30
 800344e:	e063      	b.n	8003518 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b09      	cmp	r3, #9
 8003456:	d81e      	bhi.n	8003496 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	4413      	add	r3, r2
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	3b1e      	subs	r3, #30
 800346c:	221f      	movs	r2, #31
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	4019      	ands	r1, r3
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	6818      	ldr	r0, [r3, #0]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	4413      	add	r3, r2
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	3b1e      	subs	r3, #30
 8003488:	fa00 f203 	lsl.w	r2, r0, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	635a      	str	r2, [r3, #52]	; 0x34
 8003494:	e040      	b.n	8003518 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b0e      	cmp	r3, #14
 800349c:	d81e      	bhi.n	80034dc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	4413      	add	r3, r2
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	3b3c      	subs	r3, #60	; 0x3c
 80034b2:	221f      	movs	r2, #31
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	43db      	mvns	r3, r3
 80034ba:	4019      	ands	r1, r3
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	4413      	add	r3, r2
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	3b3c      	subs	r3, #60	; 0x3c
 80034ce:	fa00 f203 	lsl.w	r2, r0, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	639a      	str	r2, [r3, #56]	; 0x38
 80034da:	e01d      	b.n	8003518 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	4413      	add	r3, r2
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	3b5a      	subs	r3, #90	; 0x5a
 80034f0:	221f      	movs	r2, #31
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43db      	mvns	r3, r3
 80034f8:	4019      	ands	r1, r3
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	6818      	ldr	r0, [r3, #0]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	4413      	add	r3, r2
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	3b5a      	subs	r3, #90	; 0x5a
 800350c:	fa00 f203 	lsl.w	r2, r0, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	2b00      	cmp	r3, #0
 8003524:	f040 80e5 	bne.w	80036f2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b09      	cmp	r3, #9
 800352e:	d91c      	bls.n	800356a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6999      	ldr	r1, [r3, #24]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	4613      	mov	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	3b1e      	subs	r3, #30
 8003542:	2207      	movs	r2, #7
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	4019      	ands	r1, r3
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	6898      	ldr	r0, [r3, #8]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	4413      	add	r3, r2
 800355a:	3b1e      	subs	r3, #30
 800355c:	fa00 f203 	lsl.w	r2, r0, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	619a      	str	r2, [r3, #24]
 8003568:	e019      	b.n	800359e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6959      	ldr	r1, [r3, #20]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	4613      	mov	r3, r2
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	4413      	add	r3, r2
 800357a:	2207      	movs	r2, #7
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	4019      	ands	r1, r3
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	6898      	ldr	r0, [r3, #8]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4613      	mov	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	4413      	add	r3, r2
 8003592:	fa00 f203 	lsl.w	r2, r0, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	695a      	ldr	r2, [r3, #20]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	08db      	lsrs	r3, r3, #3
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	2b03      	cmp	r3, #3
 80035be:	d84f      	bhi.n	8003660 <HAL_ADC_ConfigChannel+0x28c>
 80035c0:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <HAL_ADC_ConfigChannel+0x1f4>)
 80035c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c6:	bf00      	nop
 80035c8:	080035d9 	.word	0x080035d9
 80035cc:	080035fb 	.word	0x080035fb
 80035d0:	0800361d 	.word	0x0800361d
 80035d4:	0800363f 	.word	0x0800363f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035de:	4b9a      	ldr	r3, [pc, #616]	; (8003848 <HAL_ADC_ConfigChannel+0x474>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	0691      	lsls	r1, r2, #26
 80035e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035ea:	430a      	orrs	r2, r1
 80035ec:	431a      	orrs	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80035f6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80035f8:	e07e      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003600:	4b91      	ldr	r3, [pc, #580]	; (8003848 <HAL_ADC_ConfigChannel+0x474>)
 8003602:	4013      	ands	r3, r2
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	0691      	lsls	r1, r2, #26
 800360a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800360c:	430a      	orrs	r2, r1
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003618:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800361a:	e06d      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003622:	4b89      	ldr	r3, [pc, #548]	; (8003848 <HAL_ADC_ConfigChannel+0x474>)
 8003624:	4013      	ands	r3, r2
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	0691      	lsls	r1, r2, #26
 800362c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800362e:	430a      	orrs	r2, r1
 8003630:	431a      	orrs	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800363a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800363c:	e05c      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003644:	4b80      	ldr	r3, [pc, #512]	; (8003848 <HAL_ADC_ConfigChannel+0x474>)
 8003646:	4013      	ands	r3, r2
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	0691      	lsls	r1, r2, #26
 800364e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003650:	430a      	orrs	r2, r1
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800365c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800365e:	e04b      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003666:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	069b      	lsls	r3, r3, #26
 8003670:	429a      	cmp	r2, r3
 8003672:	d107      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003682:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800368a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	069b      	lsls	r3, r3, #26
 8003694:	429a      	cmp	r2, r3
 8003696:	d107      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036a6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	069b      	lsls	r3, r3, #26
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d107      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036ca:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	069b      	lsls	r3, r3, #26
 80036dc:	429a      	cmp	r2, r3
 80036de:	d10a      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036ee:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80036f0:	e001      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80036f2:	bf00      	nop
 80036f4:	e000      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80036f6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	2b01      	cmp	r3, #1
 8003704:	d108      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x344>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x344>
 8003714:	2301      	movs	r3, #1
 8003716:	e000      	b.n	800371a <HAL_ADC_ConfigChannel+0x346>
 8003718:	2300      	movs	r3, #0
 800371a:	2b00      	cmp	r3, #0
 800371c:	f040 8130 	bne.w	8003980 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d00f      	beq.n	8003748 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2201      	movs	r2, #1
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	43da      	mvns	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	400a      	ands	r2, r1
 8003742:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003746:	e049      	b.n	80037dc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2201      	movs	r2, #1
 8003756:	409a      	lsls	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b09      	cmp	r3, #9
 8003768:	d91c      	bls.n	80037a4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6999      	ldr	r1, [r3, #24]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4613      	mov	r3, r2
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	4413      	add	r3, r2
 800377a:	3b1b      	subs	r3, #27
 800377c:	2207      	movs	r2, #7
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	43db      	mvns	r3, r3
 8003784:	4019      	ands	r1, r3
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	6898      	ldr	r0, [r3, #8]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	4613      	mov	r3, r2
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	4413      	add	r3, r2
 8003794:	3b1b      	subs	r3, #27
 8003796:	fa00 f203 	lsl.w	r2, r0, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	619a      	str	r2, [r3, #24]
 80037a2:	e01b      	b.n	80037dc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6959      	ldr	r1, [r3, #20]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	4613      	mov	r3, r2
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	4413      	add	r3, r2
 80037b6:	2207      	movs	r2, #7
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	43db      	mvns	r3, r3
 80037be:	4019      	ands	r1, r3
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	6898      	ldr	r0, [r3, #8]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	4613      	mov	r3, r2
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	4413      	add	r3, r2
 80037d0:	fa00 f203 	lsl.w	r2, r0, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037e4:	d004      	beq.n	80037f0 <HAL_ADC_ConfigChannel+0x41c>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a18      	ldr	r2, [pc, #96]	; (800384c <HAL_ADC_ConfigChannel+0x478>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d101      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x420>
 80037f0:	4b17      	ldr	r3, [pc, #92]	; (8003850 <HAL_ADC_ConfigChannel+0x47c>)
 80037f2:	e000      	b.n	80037f6 <HAL_ADC_ConfigChannel+0x422>
 80037f4:	4b17      	ldr	r3, [pc, #92]	; (8003854 <HAL_ADC_ConfigChannel+0x480>)
 80037f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b10      	cmp	r3, #16
 80037fe:	d105      	bne.n	800380c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003808:	2b00      	cmp	r3, #0
 800380a:	d015      	beq.n	8003838 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003810:	2b11      	cmp	r3, #17
 8003812:	d105      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00b      	beq.n	8003838 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003824:	2b12      	cmp	r3, #18
 8003826:	f040 80ab 	bne.w	8003980 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800382a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003832:	2b00      	cmp	r3, #0
 8003834:	f040 80a4 	bne.w	8003980 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003840:	d10a      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x484>
 8003842:	4b02      	ldr	r3, [pc, #8]	; (800384c <HAL_ADC_ConfigChannel+0x478>)
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	e022      	b.n	800388e <HAL_ADC_ConfigChannel+0x4ba>
 8003848:	83fff000 	.word	0x83fff000
 800384c:	50000100 	.word	0x50000100
 8003850:	50000300 	.word	0x50000300
 8003854:	50000700 	.word	0x50000700
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a4e      	ldr	r2, [pc, #312]	; (8003998 <HAL_ADC_ConfigChannel+0x5c4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d103      	bne.n	800386a <HAL_ADC_ConfigChannel+0x496>
 8003862:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	e011      	b.n	800388e <HAL_ADC_ConfigChannel+0x4ba>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a4b      	ldr	r2, [pc, #300]	; (800399c <HAL_ADC_ConfigChannel+0x5c8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d102      	bne.n	800387a <HAL_ADC_ConfigChannel+0x4a6>
 8003874:	4b4a      	ldr	r3, [pc, #296]	; (80039a0 <HAL_ADC_ConfigChannel+0x5cc>)
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	e009      	b.n	800388e <HAL_ADC_ConfigChannel+0x4ba>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a48      	ldr	r2, [pc, #288]	; (80039a0 <HAL_ADC_ConfigChannel+0x5cc>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d102      	bne.n	800388a <HAL_ADC_ConfigChannel+0x4b6>
 8003884:	4b45      	ldr	r3, [pc, #276]	; (800399c <HAL_ADC_ConfigChannel+0x5c8>)
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	e001      	b.n	800388e <HAL_ADC_ConfigChannel+0x4ba>
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 0303 	and.w	r3, r3, #3
 8003898:	2b01      	cmp	r3, #1
 800389a:	d108      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x4da>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x4da>
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x4dc>
 80038ae:	2300      	movs	r3, #0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d150      	bne.n	8003956 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80038b4:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d010      	beq.n	80038dc <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d107      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x502>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x502>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <HAL_ADC_ConfigChannel+0x504>
 80038d6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d13c      	bne.n	8003956 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b10      	cmp	r3, #16
 80038e2:	d11d      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x54c>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038ec:	d118      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80038ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80038f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038f8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038fa:	4b2a      	ldr	r3, [pc, #168]	; (80039a4 <HAL_ADC_ConfigChannel+0x5d0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a2a      	ldr	r2, [pc, #168]	; (80039a8 <HAL_ADC_ConfigChannel+0x5d4>)
 8003900:	fba2 2303 	umull	r2, r3, r2, r3
 8003904:	0c9a      	lsrs	r2, r3, #18
 8003906:	4613      	mov	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003910:	e002      	b.n	8003918 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	3b01      	subs	r3, #1
 8003916:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f9      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800391e:	e02e      	b.n	800397e <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b11      	cmp	r3, #17
 8003926:	d10b      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x56c>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003930:	d106      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800393a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800393c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800393e:	e01e      	b.n	800397e <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b12      	cmp	r3, #18
 8003946:	d11a      	bne.n	800397e <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003948:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003952:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003954:	e013      	b.n	800397e <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	f043 0220 	orr.w	r2, r3, #32
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003968:	e00a      	b.n	8003980 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f043 0220 	orr.w	r2, r3, #32
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800397c:	e000      	b.n	8003980 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800397e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003988:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800398c:	4618      	mov	r0, r3
 800398e:	376c      	adds	r7, #108	; 0x6c
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	50000100 	.word	0x50000100
 800399c:	50000400 	.word	0x50000400
 80039a0:	50000500 	.word	0x50000500
 80039a4:	20000028 	.word	0x20000028
 80039a8:	431bde83 	.word	0x431bde83

080039ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b099      	sub	sp, #100	; 0x64
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039b6:	2300      	movs	r3, #0
 80039b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039c4:	d102      	bne.n	80039cc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80039c6:	4b6d      	ldr	r3, [pc, #436]	; (8003b7c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	e01a      	b.n	8003a02 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a6a      	ldr	r2, [pc, #424]	; (8003b7c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d103      	bne.n	80039de <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80039d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80039da:	60bb      	str	r3, [r7, #8]
 80039dc:	e011      	b.n	8003a02 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a67      	ldr	r2, [pc, #412]	; (8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d102      	bne.n	80039ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80039e8:	4b66      	ldr	r3, [pc, #408]	; (8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80039ea:	60bb      	str	r3, [r7, #8]
 80039ec:	e009      	b.n	8003a02 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a64      	ldr	r2, [pc, #400]	; (8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d102      	bne.n	80039fe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80039f8:	4b61      	ldr	r3, [pc, #388]	; (8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	e001      	b.n	8003a02 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80039fe:	2300      	movs	r3, #0
 8003a00:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0b0      	b.n	8003b6e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e0a9      	b.n	8003b6e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f040 808d 	bne.w	8003b4c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f040 8086 	bne.w	8003b4c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a48:	d004      	beq.n	8003a54 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a4b      	ldr	r2, [pc, #300]	; (8003b7c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d101      	bne.n	8003a58 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003a54:	4b4c      	ldr	r3, [pc, #304]	; (8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003a56:	e000      	b.n	8003a5a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003a58:	4b4c      	ldr	r3, [pc, #304]	; (8003b8c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003a5a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d040      	beq.n	8003ae6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003a64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	6859      	ldr	r1, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a76:	035b      	lsls	r3, r3, #13
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a7e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d108      	bne.n	8003aa0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e000      	b.n	8003aa2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d15c      	bne.n	8003b60 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d107      	bne.n	8003ac2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003ac2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d14b      	bne.n	8003b60 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003ac8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003ad0:	f023 030f 	bic.w	r3, r3, #15
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	6811      	ldr	r1, [r2, #0]
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	6892      	ldr	r2, [r2, #8]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ae2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ae4:	e03c      	b.n	8003b60 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003ae6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003aee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003af0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d108      	bne.n	8003b12 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003b12:	2300      	movs	r3, #0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d123      	bne.n	8003b60 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d107      	bne.n	8003b34 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003b34:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d112      	bne.n	8003b60 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003b3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b42:	f023 030f 	bic.w	r3, r3, #15
 8003b46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b48:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b4a:	e009      	b.n	8003b60 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	f043 0220 	orr.w	r2, r3, #32
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003b5e:	e000      	b.n	8003b62 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b60:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003b6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3764      	adds	r7, #100	; 0x64
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	50000100 	.word	0x50000100
 8003b80:	50000400 	.word	0x50000400
 8003b84:	50000500 	.word	0x50000500
 8003b88:	50000300 	.word	0x50000300
 8003b8c:	50000700 	.word	0x50000700

08003b90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d108      	bne.n	8003bbc <ADC_Enable+0x2c>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <ADC_Enable+0x2c>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e000      	b.n	8003bbe <ADC_Enable+0x2e>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d143      	bne.n	8003c4a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	4b22      	ldr	r3, [pc, #136]	; (8003c54 <ADC_Enable+0xc4>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00d      	beq.n	8003bec <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	f043 0210 	orr.w	r2, r3, #16
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be0:	f043 0201 	orr.w	r2, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e02f      	b.n	8003c4c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003bfc:	f7fe fd52 	bl	80026a4 <HAL_GetTick>
 8003c00:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c02:	e01b      	b.n	8003c3c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c04:	f7fe fd4e 	bl	80026a4 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d914      	bls.n	8003c3c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d00d      	beq.n	8003c3c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	f043 0210 	orr.w	r2, r3, #16
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c30:	f043 0201 	orr.w	r2, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e007      	b.n	8003c4c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d1dc      	bne.n	8003c04 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	8000003f 	.word	0x8000003f

08003c58 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d108      	bne.n	8003c84 <ADC_Disable+0x2c>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <ADC_Disable+0x2c>
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <ADC_Disable+0x2e>
 8003c84:	2300      	movs	r3, #0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d047      	beq.n	8003d1a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 030d 	and.w	r3, r3, #13
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d10f      	bne.n	8003cb8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0202 	orr.w	r2, r2, #2
 8003ca6:	609a      	str	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2203      	movs	r2, #3
 8003cae:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003cb0:	f7fe fcf8 	bl	80026a4 <HAL_GetTick>
 8003cb4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003cb6:	e029      	b.n	8003d0c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	f043 0210 	orr.w	r2, r3, #16
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc8:	f043 0201 	orr.w	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e023      	b.n	8003d1c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003cd4:	f7fe fce6 	bl	80026a4 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d914      	bls.n	8003d0c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d10d      	bne.n	8003d0c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	f043 0210 	orr.w	r2, r3, #16
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d00:	f043 0201 	orr.w	r2, r3, #1
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e007      	b.n	8003d1c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d0dc      	beq.n	8003cd4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 030c 	and.w	r3, r3, #12
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 809b 	beq.w	8003e80 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d58:	d12a      	bne.n	8003db0 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d126      	bne.n	8003db0 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d122      	bne.n	8003db0 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8003d6a:	230c      	movs	r3, #12
 8003d6c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003d6e:	e014      	b.n	8003d9a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	4a46      	ldr	r2, [pc, #280]	; (8003e8c <ADC_ConversionStop+0x168>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d90d      	bls.n	8003d94 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	f043 0210 	orr.w	r2, r3, #16
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d88:	f043 0201 	orr.w	r2, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e076      	b.n	8003e82 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	3301      	adds	r3, #1
 8003d98:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	d1e3      	bne.n	8003d70 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2240      	movs	r2, #64	; 0x40
 8003dae:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b60      	cmp	r3, #96	; 0x60
 8003db4:	d015      	beq.n	8003de2 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d10e      	bne.n	8003de2 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d107      	bne.n	8003de2 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0210 	orr.w	r2, r2, #16
 8003de0:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b0c      	cmp	r3, #12
 8003de6:	d015      	beq.n	8003e14 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d10e      	bne.n	8003e14 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d107      	bne.n	8003e14 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0220 	orr.w	r2, r2, #32
 8003e12:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	2b60      	cmp	r3, #96	; 0x60
 8003e18:	d005      	beq.n	8003e26 <ADC_ConversionStop+0x102>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b6c      	cmp	r3, #108	; 0x6c
 8003e1e:	d105      	bne.n	8003e2c <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003e20:	230c      	movs	r3, #12
 8003e22:	617b      	str	r3, [r7, #20]
        break;
 8003e24:	e005      	b.n	8003e32 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003e26:	2308      	movs	r3, #8
 8003e28:	617b      	str	r3, [r7, #20]
        break;
 8003e2a:	e002      	b.n	8003e32 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003e2c:	2304      	movs	r3, #4
 8003e2e:	617b      	str	r3, [r7, #20]
        break;
 8003e30:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003e32:	f7fe fc37 	bl	80026a4 <HAL_GetTick>
 8003e36:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003e38:	e01b      	b.n	8003e72 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003e3a:	f7fe fc33 	bl	80026a4 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b0b      	cmp	r3, #11
 8003e46:	d914      	bls.n	8003e72 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	4013      	ands	r3, r2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00d      	beq.n	8003e72 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f043 0210 	orr.w	r2, r3, #16
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	f043 0201 	orr.w	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e007      	b.n	8003e82 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1dc      	bne.n	8003e3a <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	000993ff 	.word	0x000993ff

08003e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003eac:	4013      	ands	r3, r2
 8003eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ec2:	4a04      	ldr	r2, [pc, #16]	; (8003ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	60d3      	str	r3, [r2, #12]
}
 8003ec8:	bf00      	nop
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	e000ed00 	.word	0xe000ed00

08003ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003edc:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	0a1b      	lsrs	r3, r3, #8
 8003ee2:	f003 0307 	and.w	r3, r3, #7
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	e000ed00 	.word	0xe000ed00

08003ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	db0b      	blt.n	8003f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f06:	79fb      	ldrb	r3, [r7, #7]
 8003f08:	f003 021f 	and.w	r2, r3, #31
 8003f0c:	4907      	ldr	r1, [pc, #28]	; (8003f2c <__NVIC_EnableIRQ+0x38>)
 8003f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	2001      	movs	r0, #1
 8003f16:	fa00 f202 	lsl.w	r2, r0, r2
 8003f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	e000e100 	.word	0xe000e100

08003f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4603      	mov	r3, r0
 8003f38:	6039      	str	r1, [r7, #0]
 8003f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	db0a      	blt.n	8003f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	490c      	ldr	r1, [pc, #48]	; (8003f7c <__NVIC_SetPriority+0x4c>)
 8003f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4e:	0112      	lsls	r2, r2, #4
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	440b      	add	r3, r1
 8003f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f58:	e00a      	b.n	8003f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	4908      	ldr	r1, [pc, #32]	; (8003f80 <__NVIC_SetPriority+0x50>)
 8003f60:	79fb      	ldrb	r3, [r7, #7]
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	3b04      	subs	r3, #4
 8003f68:	0112      	lsls	r2, r2, #4
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	761a      	strb	r2, [r3, #24]
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	e000e100 	.word	0xe000e100
 8003f80:	e000ed00 	.word	0xe000ed00

08003f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b089      	sub	sp, #36	; 0x24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f1c3 0307 	rsb	r3, r3, #7
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	bf28      	it	cs
 8003fa2:	2304      	movcs	r3, #4
 8003fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	2b06      	cmp	r3, #6
 8003fac:	d902      	bls.n	8003fb4 <NVIC_EncodePriority+0x30>
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	3b03      	subs	r3, #3
 8003fb2:	e000      	b.n	8003fb6 <NVIC_EncodePriority+0x32>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	43da      	mvns	r2, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	401a      	ands	r2, r3
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd6:	43d9      	mvns	r1, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fdc:	4313      	orrs	r3, r2
         );
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3724      	adds	r7, #36	; 0x24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
	...

08003fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ffc:	d301      	bcc.n	8004002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ffe:	2301      	movs	r3, #1
 8004000:	e00f      	b.n	8004022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004002:	4a0a      	ldr	r2, [pc, #40]	; (800402c <SysTick_Config+0x40>)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3b01      	subs	r3, #1
 8004008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800400a:	210f      	movs	r1, #15
 800400c:	f04f 30ff 	mov.w	r0, #4294967295
 8004010:	f7ff ff8e 	bl	8003f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004014:	4b05      	ldr	r3, [pc, #20]	; (800402c <SysTick_Config+0x40>)
 8004016:	2200      	movs	r2, #0
 8004018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800401a:	4b04      	ldr	r3, [pc, #16]	; (800402c <SysTick_Config+0x40>)
 800401c:	2207      	movs	r2, #7
 800401e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	e000e010 	.word	0xe000e010

08004030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff ff29 	bl	8003e90 <__NVIC_SetPriorityGrouping>
}
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b086      	sub	sp, #24
 800404a:	af00      	add	r7, sp, #0
 800404c:	4603      	mov	r3, r0
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	607a      	str	r2, [r7, #4]
 8004052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004054:	2300      	movs	r3, #0
 8004056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004058:	f7ff ff3e 	bl	8003ed8 <__NVIC_GetPriorityGrouping>
 800405c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	6978      	ldr	r0, [r7, #20]
 8004064:	f7ff ff8e 	bl	8003f84 <NVIC_EncodePriority>
 8004068:	4602      	mov	r2, r0
 800406a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800406e:	4611      	mov	r1, r2
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff ff5d 	bl	8003f30 <__NVIC_SetPriority>
}
 8004076:	bf00      	nop
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	4603      	mov	r3, r0
 8004086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff ff31 	bl	8003ef4 <__NVIC_EnableIRQ>
}
 8004092:	bf00      	nop
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7ff ffa2 	bl	8003fec <SysTick_Config>
 80040a8:	4603      	mov	r3, r0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d008      	beq.n	80040d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2204      	movs	r2, #4
 80040c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e020      	b.n	8004118 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 020e 	bic.w	r2, r2, #14
 80040e4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0201 	bic.w	r2, r2, #1
 80040f4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fe:	2101      	movs	r1, #1
 8004100:	fa01 f202 	lsl.w	r2, r1, r2
 8004104:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800412c:	2300      	movs	r3, #0
 800412e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004136:	2b02      	cmp	r3, #2
 8004138:	d005      	beq.n	8004146 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2204      	movs	r2, #4
 800413e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	73fb      	strb	r3, [r7, #15]
 8004144:	e027      	b.n	8004196 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 020e 	bic.w	r2, r2, #14
 8004154:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0201 	bic.w	r2, r2, #1
 8004164:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416e:	2101      	movs	r1, #1
 8004170:	fa01 f202 	lsl.w	r2, r1, r2
 8004174:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	4798      	blx	r3
    } 
  }
  return status;
 8004196:	7bfb      	ldrb	r3, [r7, #15]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041aa:	2300      	movs	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041ae:	e154      	b.n	800445a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	2101      	movs	r1, #1
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	fa01 f303 	lsl.w	r3, r1, r3
 80041bc:	4013      	ands	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 8146 	beq.w	8004454 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d005      	beq.n	80041e0 <HAL_GPIO_Init+0x40>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f003 0303 	and.w	r3, r3, #3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d130      	bne.n	8004242 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	2203      	movs	r2, #3
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	43db      	mvns	r3, r3
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4013      	ands	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004216:	2201      	movs	r2, #1
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	43db      	mvns	r3, r3
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4013      	ands	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	091b      	lsrs	r3, r3, #4
 800422c:	f003 0201 	and.w	r2, r3, #1
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	2b03      	cmp	r3, #3
 800424c:	d017      	beq.n	800427e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	2203      	movs	r2, #3
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	43db      	mvns	r3, r3
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	4013      	ands	r3, r2
 8004264:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	689a      	ldr	r2, [r3, #8]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d123      	bne.n	80042d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	08da      	lsrs	r2, r3, #3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3208      	adds	r2, #8
 8004292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004296:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	220f      	movs	r2, #15
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	43db      	mvns	r3, r3
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4013      	ands	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	691a      	ldr	r2, [r3, #16]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	fa02 f303 	lsl.w	r3, r2, r3
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	08da      	lsrs	r2, r3, #3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3208      	adds	r2, #8
 80042cc:	6939      	ldr	r1, [r7, #16]
 80042ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	2203      	movs	r2, #3
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	43db      	mvns	r3, r3
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	4013      	ands	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f003 0203 	and.w	r2, r3, #3
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 80a0 	beq.w	8004454 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004314:	4b58      	ldr	r3, [pc, #352]	; (8004478 <HAL_GPIO_Init+0x2d8>)
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	4a57      	ldr	r2, [pc, #348]	; (8004478 <HAL_GPIO_Init+0x2d8>)
 800431a:	f043 0301 	orr.w	r3, r3, #1
 800431e:	6193      	str	r3, [r2, #24]
 8004320:	4b55      	ldr	r3, [pc, #340]	; (8004478 <HAL_GPIO_Init+0x2d8>)
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800432c:	4a53      	ldr	r2, [pc, #332]	; (800447c <HAL_GPIO_Init+0x2dc>)
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	089b      	lsrs	r3, r3, #2
 8004332:	3302      	adds	r3, #2
 8004334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004338:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f003 0303 	and.w	r3, r3, #3
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	220f      	movs	r2, #15
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	43db      	mvns	r3, r3
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4013      	ands	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004356:	d019      	beq.n	800438c <HAL_GPIO_Init+0x1ec>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a49      	ldr	r2, [pc, #292]	; (8004480 <HAL_GPIO_Init+0x2e0>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d013      	beq.n	8004388 <HAL_GPIO_Init+0x1e8>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a48      	ldr	r2, [pc, #288]	; (8004484 <HAL_GPIO_Init+0x2e4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d00d      	beq.n	8004384 <HAL_GPIO_Init+0x1e4>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a47      	ldr	r2, [pc, #284]	; (8004488 <HAL_GPIO_Init+0x2e8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d007      	beq.n	8004380 <HAL_GPIO_Init+0x1e0>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a46      	ldr	r2, [pc, #280]	; (800448c <HAL_GPIO_Init+0x2ec>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d101      	bne.n	800437c <HAL_GPIO_Init+0x1dc>
 8004378:	2304      	movs	r3, #4
 800437a:	e008      	b.n	800438e <HAL_GPIO_Init+0x1ee>
 800437c:	2305      	movs	r3, #5
 800437e:	e006      	b.n	800438e <HAL_GPIO_Init+0x1ee>
 8004380:	2303      	movs	r3, #3
 8004382:	e004      	b.n	800438e <HAL_GPIO_Init+0x1ee>
 8004384:	2302      	movs	r3, #2
 8004386:	e002      	b.n	800438e <HAL_GPIO_Init+0x1ee>
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <HAL_GPIO_Init+0x1ee>
 800438c:	2300      	movs	r3, #0
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	f002 0203 	and.w	r2, r2, #3
 8004394:	0092      	lsls	r2, r2, #2
 8004396:	4093      	lsls	r3, r2
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800439e:	4937      	ldr	r1, [pc, #220]	; (800447c <HAL_GPIO_Init+0x2dc>)
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	089b      	lsrs	r3, r3, #2
 80043a4:	3302      	adds	r3, #2
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043ac:	4b38      	ldr	r3, [pc, #224]	; (8004490 <HAL_GPIO_Init+0x2f0>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	43db      	mvns	r3, r3
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4013      	ands	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80043d0:	4a2f      	ldr	r2, [pc, #188]	; (8004490 <HAL_GPIO_Init+0x2f0>)
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043d6:	4b2e      	ldr	r3, [pc, #184]	; (8004490 <HAL_GPIO_Init+0x2f0>)
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	43db      	mvns	r3, r3
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4013      	ands	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80043fa:	4a25      	ldr	r2, [pc, #148]	; (8004490 <HAL_GPIO_Init+0x2f0>)
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004400:	4b23      	ldr	r3, [pc, #140]	; (8004490 <HAL_GPIO_Init+0x2f0>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	43db      	mvns	r3, r3
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4013      	ands	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4313      	orrs	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004424:	4a1a      	ldr	r2, [pc, #104]	; (8004490 <HAL_GPIO_Init+0x2f0>)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800442a:	4b19      	ldr	r3, [pc, #100]	; (8004490 <HAL_GPIO_Init+0x2f0>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	43db      	mvns	r3, r3
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4013      	ands	r3, r2
 8004438:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4313      	orrs	r3, r2
 800444c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800444e:	4a10      	ldr	r2, [pc, #64]	; (8004490 <HAL_GPIO_Init+0x2f0>)
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	3301      	adds	r3, #1
 8004458:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	fa22 f303 	lsr.w	r3, r2, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	f47f aea3 	bne.w	80041b0 <HAL_GPIO_Init+0x10>
  }
}
 800446a:	bf00      	nop
 800446c:	bf00      	nop
 800446e:	371c      	adds	r7, #28
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	40021000 	.word	0x40021000
 800447c:	40010000 	.word	0x40010000
 8004480:	48000400 	.word	0x48000400
 8004484:	48000800 	.word	0x48000800
 8004488:	48000c00 	.word	0x48000c00
 800448c:	48001000 	.word	0x48001000
 8004490:	40010400 	.word	0x40010400

08004494 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	887b      	ldrh	r3, [r7, #2]
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044ac:	2301      	movs	r3, #1
 80044ae:	73fb      	strb	r3, [r7, #15]
 80044b0:	e001      	b.n	80044b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044b2:	2300      	movs	r3, #0
 80044b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	807b      	strh	r3, [r7, #2]
 80044d0:	4613      	mov	r3, r2
 80044d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044d4:	787b      	ldrb	r3, [r7, #1]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044da:	887a      	ldrh	r2, [r7, #2]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044e0:	e002      	b.n	80044e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044e2:	887a      	ldrh	r2, [r7, #2]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80044fe:	4b08      	ldr	r3, [pc, #32]	; (8004520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004500:	695a      	ldr	r2, [r3, #20]
 8004502:	88fb      	ldrh	r3, [r7, #6]
 8004504:	4013      	ands	r3, r2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d006      	beq.n	8004518 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800450a:	4a05      	ldr	r2, [pc, #20]	; (8004520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800450c:	88fb      	ldrh	r3, [r7, #6]
 800450e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004510:	88fb      	ldrh	r3, [r7, #6]
 8004512:	4618      	mov	r0, r3
 8004514:	f7fd fad2 	bl	8001abc <HAL_GPIO_EXTI_Callback>
  }
}
 8004518:	bf00      	nop
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40010400 	.word	0x40010400

08004524 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e081      	b.n	800463a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d106      	bne.n	8004550 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7fd fc0e 	bl	8001d6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2224      	movs	r2, #36	; 0x24
 8004554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0201 	bic.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004574:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004584:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d107      	bne.n	800459e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800459a:	609a      	str	r2, [r3, #8]
 800459c:	e006      	b.n	80045ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80045aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d104      	bne.n	80045be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6812      	ldr	r2, [r2, #0]
 80045c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691a      	ldr	r2, [r3, #16]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	69d9      	ldr	r1, [r3, #28]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a1a      	ldr	r2, [r3, #32]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0201 	orr.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2220      	movs	r2, #32
 8004626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b20      	cmp	r3, #32
 8004656:	d138      	bne.n	80046ca <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800465e:	2b01      	cmp	r3, #1
 8004660:	d101      	bne.n	8004666 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004662:	2302      	movs	r3, #2
 8004664:	e032      	b.n	80046cc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2224      	movs	r2, #36	; 0x24
 8004672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0201 	bic.w	r2, r2, #1
 8004684:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004694:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6819      	ldr	r1, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0201 	orr.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	e000      	b.n	80046cc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046ca:	2302      	movs	r3, #2
  }
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b20      	cmp	r3, #32
 80046ec:	d139      	bne.n	8004762 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e033      	b.n	8004764 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2224      	movs	r2, #36	; 0x24
 8004708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0201 	bic.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800472a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	021b      	lsls	r3, r3, #8
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f042 0201 	orr.w	r2, r2, #1
 800474c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	e000      	b.n	8004764 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004762:	2302      	movs	r3, #2
  }
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004772:	b08b      	sub	sp, #44	; 0x2c
 8004774:	af06      	add	r7, sp, #24
 8004776:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e0c4      	b.n	800490c <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fd fc28 	bl	8001fec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2203      	movs	r2, #3
 80047a0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f004 fad1 	bl	8008d50 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047ae:	2300      	movs	r3, #0
 80047b0:	73fb      	strb	r3, [r7, #15]
 80047b2:	e040      	b.n	8004836 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	4613      	mov	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	440b      	add	r3, r1
 80047c4:	3301      	adds	r3, #1
 80047c6:	2201      	movs	r2, #1
 80047c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	1c5a      	adds	r2, r3, #1
 80047d0:	4613      	mov	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	440b      	add	r3, r1
 80047da:	7bfa      	ldrb	r2, [r7, #15]
 80047dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80047de:	7bfb      	ldrb	r3, [r7, #15]
 80047e0:	6879      	ldr	r1, [r7, #4]
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	4613      	mov	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	440b      	add	r3, r1
 80047ee:	3303      	adds	r3, #3
 80047f0:	2200      	movs	r2, #0
 80047f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80047f4:	7bfa      	ldrb	r2, [r7, #15]
 80047f6:	6879      	ldr	r1, [r7, #4]
 80047f8:	4613      	mov	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	440b      	add	r3, r1
 8004802:	3338      	adds	r3, #56	; 0x38
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004808:	7bfa      	ldrb	r2, [r7, #15]
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	4613      	mov	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	440b      	add	r3, r1
 8004816:	333c      	adds	r3, #60	; 0x3c
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800481c:	7bfa      	ldrb	r2, [r7, #15]
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	4613      	mov	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	440b      	add	r3, r1
 800482a:	3340      	adds	r3, #64	; 0x40
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	3301      	adds	r3, #1
 8004834:	73fb      	strb	r3, [r7, #15]
 8004836:	7bfa      	ldrb	r2, [r7, #15]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	429a      	cmp	r2, r3
 800483e:	d3b9      	bcc.n	80047b4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004840:	2300      	movs	r3, #0
 8004842:	73fb      	strb	r3, [r7, #15]
 8004844:	e044      	b.n	80048d0 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004846:	7bfa      	ldrb	r2, [r7, #15]
 8004848:	6879      	ldr	r1, [r7, #4]
 800484a:	4613      	mov	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	440b      	add	r3, r1
 8004854:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004858:	2200      	movs	r2, #0
 800485a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800485c:	7bfa      	ldrb	r2, [r7, #15]
 800485e:	6879      	ldr	r1, [r7, #4]
 8004860:	4613      	mov	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	440b      	add	r3, r1
 800486a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800486e:	7bfa      	ldrb	r2, [r7, #15]
 8004870:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004872:	7bfa      	ldrb	r2, [r7, #15]
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	4613      	mov	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	440b      	add	r3, r1
 8004880:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004884:	2200      	movs	r2, #0
 8004886:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004888:	7bfa      	ldrb	r2, [r7, #15]
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	4613      	mov	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	440b      	add	r3, r1
 8004896:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800489e:	7bfa      	ldrb	r2, [r7, #15]
 80048a0:	6879      	ldr	r1, [r7, #4]
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	440b      	add	r3, r1
 80048ac:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80048b4:	7bfa      	ldrb	r2, [r7, #15]
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	4613      	mov	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	440b      	add	r3, r1
 80048c2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80048c6:	2200      	movs	r2, #0
 80048c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
 80048cc:	3301      	adds	r3, #1
 80048ce:	73fb      	strb	r3, [r7, #15]
 80048d0:	7bfa      	ldrb	r2, [r7, #15]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d3b5      	bcc.n	8004846 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	687e      	ldr	r6, [r7, #4]
 80048e2:	466d      	mov	r5, sp
 80048e4:	f106 0410 	add.w	r4, r6, #16
 80048e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	602b      	str	r3, [r5, #0]
 80048f0:	1d33      	adds	r3, r6, #4
 80048f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048f4:	6838      	ldr	r0, [r7, #0]
 80048f6:	f004 fa46 	bl	8008d86 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004914 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800491a:	af00      	add	r7, sp, #0
 800491c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004920:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004924:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800492a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d102      	bne.n	800493a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	f001 b823 	b.w	8005980 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800493a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800493e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 817d 	beq.w	8004c4a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004950:	4bbc      	ldr	r3, [pc, #752]	; (8004c44 <HAL_RCC_OscConfig+0x330>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f003 030c 	and.w	r3, r3, #12
 8004958:	2b04      	cmp	r3, #4
 800495a:	d00c      	beq.n	8004976 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800495c:	4bb9      	ldr	r3, [pc, #740]	; (8004c44 <HAL_RCC_OscConfig+0x330>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f003 030c 	and.w	r3, r3, #12
 8004964:	2b08      	cmp	r3, #8
 8004966:	d15c      	bne.n	8004a22 <HAL_RCC_OscConfig+0x10e>
 8004968:	4bb6      	ldr	r3, [pc, #728]	; (8004c44 <HAL_RCC_OscConfig+0x330>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004974:	d155      	bne.n	8004a22 <HAL_RCC_OscConfig+0x10e>
 8004976:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800497a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004982:	fa93 f3a3 	rbit	r3, r3
 8004986:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800498a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800498e:	fab3 f383 	clz	r3, r3
 8004992:	b2db      	uxtb	r3, r3
 8004994:	095b      	lsrs	r3, r3, #5
 8004996:	b2db      	uxtb	r3, r3
 8004998:	f043 0301 	orr.w	r3, r3, #1
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d102      	bne.n	80049a8 <HAL_RCC_OscConfig+0x94>
 80049a2:	4ba8      	ldr	r3, [pc, #672]	; (8004c44 <HAL_RCC_OscConfig+0x330>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	e015      	b.n	80049d4 <HAL_RCC_OscConfig+0xc0>
 80049a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049ac:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80049b4:	fa93 f3a3 	rbit	r3, r3
 80049b8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80049bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049c0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80049c4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80049c8:	fa93 f3a3 	rbit	r3, r3
 80049cc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80049d0:	4b9c      	ldr	r3, [pc, #624]	; (8004c44 <HAL_RCC_OscConfig+0x330>)
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049d8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80049dc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80049e0:	fa92 f2a2 	rbit	r2, r2
 80049e4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80049e8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80049ec:	fab2 f282 	clz	r2, r2
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	f042 0220 	orr.w	r2, r2, #32
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	f002 021f 	and.w	r2, r2, #31
 80049fc:	2101      	movs	r1, #1
 80049fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004a02:	4013      	ands	r3, r2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 811f 	beq.w	8004c48 <HAL_RCC_OscConfig+0x334>
 8004a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f040 8116 	bne.w	8004c48 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	f000 bfaf 	b.w	8005980 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a32:	d106      	bne.n	8004a42 <HAL_RCC_OscConfig+0x12e>
 8004a34:	4b83      	ldr	r3, [pc, #524]	; (8004c44 <HAL_RCC_OscConfig+0x330>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a82      	ldr	r2, [pc, #520]	; (8004c44 <HAL_RCC_OscConfig+0x330>)
 8004a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	e036      	b.n	8004ab0 <HAL_RCC_OscConfig+0x19c>
 8004a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10c      	bne.n	8004a6c <HAL_RCC_OscConfig+0x158>
 8004a52:	4b7c      	ldr	r3, [pc, #496]	; (8004c44 <HAL_RCC_OscConfig+0x330>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a7b      	ldr	r2, [pc, #492]	; (8004c44 <HAL_RCC_OscConfig+0x330>)
 8004a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	4b79      	ldr	r3, [pc, #484]	; (8004c44 <HAL_RCC_OscConfig+0x330>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a78      	ldr	r2, [pc, #480]	; (8004c44 <HAL_RCC_OscConfig+0x330>)
 8004a64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	e021      	b.n	8004ab0 <HAL_RCC_OscConfig+0x19c>
 8004a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a7c:	d10c      	bne.n	8004a98 <HAL_RCC_OscConfig+0x184>
 8004a7e:	4b71      	ldr	r3, [pc, #452]	; (8004c44 <HAL_RCC_OscConfig+0x330>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a70      	ldr	r2, [pc, #448]	; (8004c44 <HAL_RCC_OscConfig+0x330>)
 8004a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	4b6e      	ldr	r3, [pc, #440]	; (8004c44 <HAL_RCC_OscConfig+0x330>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a6d      	ldr	r2, [pc, #436]	; (8004c44 <HAL_RCC_OscConfig+0x330>)
 8004a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	e00b      	b.n	8004ab0 <HAL_RCC_OscConfig+0x19c>
 8004a98:	4b6a      	ldr	r3, [pc, #424]	; (8004c44 <HAL_RCC_OscConfig+0x330>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a69      	ldr	r2, [pc, #420]	; (8004c44 <HAL_RCC_OscConfig+0x330>)
 8004a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	4b67      	ldr	r3, [pc, #412]	; (8004c44 <HAL_RCC_OscConfig+0x330>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a66      	ldr	r2, [pc, #408]	; (8004c44 <HAL_RCC_OscConfig+0x330>)
 8004aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aae:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ab0:	4b64      	ldr	r3, [pc, #400]	; (8004c44 <HAL_RCC_OscConfig+0x330>)
 8004ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab4:	f023 020f 	bic.w	r2, r3, #15
 8004ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004abc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	495f      	ldr	r1, [pc, #380]	; (8004c44 <HAL_RCC_OscConfig+0x330>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ace:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d059      	beq.n	8004b8e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ada:	f7fd fde3 	bl	80026a4 <HAL_GetTick>
 8004ade:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae2:	e00a      	b.n	8004afa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ae4:	f7fd fdde 	bl	80026a4 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b64      	cmp	r3, #100	; 0x64
 8004af2:	d902      	bls.n	8004afa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	f000 bf43 	b.w	8005980 <HAL_RCC_OscConfig+0x106c>
 8004afa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004afe:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b02:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004b06:	fa93 f3a3 	rbit	r3, r3
 8004b0a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004b0e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b12:	fab3 f383 	clz	r3, r3
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	095b      	lsrs	r3, r3, #5
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	f043 0301 	orr.w	r3, r3, #1
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d102      	bne.n	8004b2c <HAL_RCC_OscConfig+0x218>
 8004b26:	4b47      	ldr	r3, [pc, #284]	; (8004c44 <HAL_RCC_OscConfig+0x330>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	e015      	b.n	8004b58 <HAL_RCC_OscConfig+0x244>
 8004b2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b30:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b34:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004b38:	fa93 f3a3 	rbit	r3, r3
 8004b3c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004b40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b44:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004b48:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004b4c:	fa93 f3a3 	rbit	r3, r3
 8004b50:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004b54:	4b3b      	ldr	r3, [pc, #236]	; (8004c44 <HAL_RCC_OscConfig+0x330>)
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b5c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004b60:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004b64:	fa92 f2a2 	rbit	r2, r2
 8004b68:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004b6c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004b70:	fab2 f282 	clz	r2, r2
 8004b74:	b2d2      	uxtb	r2, r2
 8004b76:	f042 0220 	orr.w	r2, r2, #32
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	f002 021f 	and.w	r2, r2, #31
 8004b80:	2101      	movs	r1, #1
 8004b82:	fa01 f202 	lsl.w	r2, r1, r2
 8004b86:	4013      	ands	r3, r2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0ab      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x1d0>
 8004b8c:	e05d      	b.n	8004c4a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8e:	f7fd fd89 	bl	80026a4 <HAL_GetTick>
 8004b92:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b96:	e00a      	b.n	8004bae <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b98:	f7fd fd84 	bl	80026a4 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b64      	cmp	r3, #100	; 0x64
 8004ba6:	d902      	bls.n	8004bae <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	f000 bee9 	b.w	8005980 <HAL_RCC_OscConfig+0x106c>
 8004bae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bb2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004bba:	fa93 f3a3 	rbit	r3, r3
 8004bbe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004bc2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc6:	fab3 f383 	clz	r3, r3
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	095b      	lsrs	r3, r3, #5
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	f043 0301 	orr.w	r3, r3, #1
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d102      	bne.n	8004be0 <HAL_RCC_OscConfig+0x2cc>
 8004bda:	4b1a      	ldr	r3, [pc, #104]	; (8004c44 <HAL_RCC_OscConfig+0x330>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	e015      	b.n	8004c0c <HAL_RCC_OscConfig+0x2f8>
 8004be0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004be4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004bec:	fa93 f3a3 	rbit	r3, r3
 8004bf0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004bf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bf8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004bfc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004c00:	fa93 f3a3 	rbit	r3, r3
 8004c04:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004c08:	4b0e      	ldr	r3, [pc, #56]	; (8004c44 <HAL_RCC_OscConfig+0x330>)
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c10:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004c14:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004c18:	fa92 f2a2 	rbit	r2, r2
 8004c1c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004c20:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004c24:	fab2 f282 	clz	r2, r2
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	f042 0220 	orr.w	r2, r2, #32
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	f002 021f 	and.w	r2, r2, #31
 8004c34:	2101      	movs	r1, #1
 8004c36:	fa01 f202 	lsl.w	r2, r1, r2
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1ab      	bne.n	8004b98 <HAL_RCC_OscConfig+0x284>
 8004c40:	e003      	b.n	8004c4a <HAL_RCC_OscConfig+0x336>
 8004c42:	bf00      	nop
 8004c44:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 817d 	beq.w	8004f5a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004c60:	4ba6      	ldr	r3, [pc, #664]	; (8004efc <HAL_RCC_OscConfig+0x5e8>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f003 030c 	and.w	r3, r3, #12
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00b      	beq.n	8004c84 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004c6c:	4ba3      	ldr	r3, [pc, #652]	; (8004efc <HAL_RCC_OscConfig+0x5e8>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f003 030c 	and.w	r3, r3, #12
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d172      	bne.n	8004d5e <HAL_RCC_OscConfig+0x44a>
 8004c78:	4ba0      	ldr	r3, [pc, #640]	; (8004efc <HAL_RCC_OscConfig+0x5e8>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d16c      	bne.n	8004d5e <HAL_RCC_OscConfig+0x44a>
 8004c84:	2302      	movs	r3, #2
 8004c86:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004c8e:	fa93 f3a3 	rbit	r3, r3
 8004c92:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004c96:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c9a:	fab3 f383 	clz	r3, r3
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	095b      	lsrs	r3, r3, #5
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	f043 0301 	orr.w	r3, r3, #1
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d102      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x3a0>
 8004cae:	4b93      	ldr	r3, [pc, #588]	; (8004efc <HAL_RCC_OscConfig+0x5e8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	e013      	b.n	8004cdc <HAL_RCC_OscConfig+0x3c8>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cba:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004cbe:	fa93 f3a3 	rbit	r3, r3
 8004cc2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004ccc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004cd0:	fa93 f3a3 	rbit	r3, r3
 8004cd4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004cd8:	4b88      	ldr	r3, [pc, #544]	; (8004efc <HAL_RCC_OscConfig+0x5e8>)
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	2202      	movs	r2, #2
 8004cde:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004ce2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004ce6:	fa92 f2a2 	rbit	r2, r2
 8004cea:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004cee:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004cf2:	fab2 f282 	clz	r2, r2
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	f042 0220 	orr.w	r2, r2, #32
 8004cfc:	b2d2      	uxtb	r2, r2
 8004cfe:	f002 021f 	and.w	r2, r2, #31
 8004d02:	2101      	movs	r1, #1
 8004d04:	fa01 f202 	lsl.w	r2, r1, r2
 8004d08:	4013      	ands	r3, r2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <HAL_RCC_OscConfig+0x410>
 8004d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d002      	beq.n	8004d24 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	f000 be2e 	b.w	8005980 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d24:	4b75      	ldr	r3, [pc, #468]	; (8004efc <HAL_RCC_OscConfig+0x5e8>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	21f8      	movs	r1, #248	; 0xf8
 8004d3a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004d42:	fa91 f1a1 	rbit	r1, r1
 8004d46:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004d4a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004d4e:	fab1 f181 	clz	r1, r1
 8004d52:	b2c9      	uxtb	r1, r1
 8004d54:	408b      	lsls	r3, r1
 8004d56:	4969      	ldr	r1, [pc, #420]	; (8004efc <HAL_RCC_OscConfig+0x5e8>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d5c:	e0fd      	b.n	8004f5a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 8088 	beq.w	8004e80 <HAL_RCC_OscConfig+0x56c>
 8004d70:	2301      	movs	r3, #1
 8004d72:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d76:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004d7a:	fa93 f3a3 	rbit	r3, r3
 8004d7e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004d82:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d86:	fab3 f383 	clz	r3, r3
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	461a      	mov	r2, r3
 8004d98:	2301      	movs	r3, #1
 8004d9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9c:	f7fd fc82 	bl	80026a4 <HAL_GetTick>
 8004da0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da4:	e00a      	b.n	8004dbc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004da6:	f7fd fc7d 	bl	80026a4 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d902      	bls.n	8004dbc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	f000 bde2 	b.w	8005980 <HAL_RCC_OscConfig+0x106c>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004dc6:	fa93 f3a3 	rbit	r3, r3
 8004dca:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004dce:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd2:	fab3 f383 	clz	r3, r3
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	095b      	lsrs	r3, r3, #5
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	f043 0301 	orr.w	r3, r3, #1
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d102      	bne.n	8004dec <HAL_RCC_OscConfig+0x4d8>
 8004de6:	4b45      	ldr	r3, [pc, #276]	; (8004efc <HAL_RCC_OscConfig+0x5e8>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	e013      	b.n	8004e14 <HAL_RCC_OscConfig+0x500>
 8004dec:	2302      	movs	r3, #2
 8004dee:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004df6:	fa93 f3a3 	rbit	r3, r3
 8004dfa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004dfe:	2302      	movs	r3, #2
 8004e00:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004e04:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004e08:	fa93 f3a3 	rbit	r3, r3
 8004e0c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004e10:	4b3a      	ldr	r3, [pc, #232]	; (8004efc <HAL_RCC_OscConfig+0x5e8>)
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	2202      	movs	r2, #2
 8004e16:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004e1a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004e1e:	fa92 f2a2 	rbit	r2, r2
 8004e22:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004e26:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004e2a:	fab2 f282 	clz	r2, r2
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	f042 0220 	orr.w	r2, r2, #32
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	f002 021f 	and.w	r2, r2, #31
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e40:	4013      	ands	r3, r2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0af      	beq.n	8004da6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e46:	4b2d      	ldr	r3, [pc, #180]	; (8004efc <HAL_RCC_OscConfig+0x5e8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	21f8      	movs	r1, #248	; 0xf8
 8004e5c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e60:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004e64:	fa91 f1a1 	rbit	r1, r1
 8004e68:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004e6c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004e70:	fab1 f181 	clz	r1, r1
 8004e74:	b2c9      	uxtb	r1, r1
 8004e76:	408b      	lsls	r3, r1
 8004e78:	4920      	ldr	r1, [pc, #128]	; (8004efc <HAL_RCC_OscConfig+0x5e8>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	600b      	str	r3, [r1, #0]
 8004e7e:	e06c      	b.n	8004f5a <HAL_RCC_OscConfig+0x646>
 8004e80:	2301      	movs	r3, #1
 8004e82:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e86:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004e8a:	fa93 f3a3 	rbit	r3, r3
 8004e8e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004e92:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e96:	fab3 f383 	clz	r3, r3
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ea0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eac:	f7fd fbfa 	bl	80026a4 <HAL_GetTick>
 8004eb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eb4:	e00a      	b.n	8004ecc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eb6:	f7fd fbf5 	bl	80026a4 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d902      	bls.n	8004ecc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	f000 bd5a 	b.w	8005980 <HAL_RCC_OscConfig+0x106c>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004ed6:	fa93 f3a3 	rbit	r3, r3
 8004eda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ee2:	fab3 f383 	clz	r3, r3
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	095b      	lsrs	r3, r3, #5
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	f043 0301 	orr.w	r3, r3, #1
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d104      	bne.n	8004f00 <HAL_RCC_OscConfig+0x5ec>
 8004ef6:	4b01      	ldr	r3, [pc, #4]	; (8004efc <HAL_RCC_OscConfig+0x5e8>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	e015      	b.n	8004f28 <HAL_RCC_OscConfig+0x614>
 8004efc:	40021000 	.word	0x40021000
 8004f00:	2302      	movs	r3, #2
 8004f02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f0a:	fa93 f3a3 	rbit	r3, r3
 8004f0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004f12:	2302      	movs	r3, #2
 8004f14:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f18:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f1c:	fa93 f3a3 	rbit	r3, r3
 8004f20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f24:	4bc8      	ldr	r3, [pc, #800]	; (8005248 <HAL_RCC_OscConfig+0x934>)
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	2202      	movs	r2, #2
 8004f2a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004f2e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004f32:	fa92 f2a2 	rbit	r2, r2
 8004f36:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004f3a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004f3e:	fab2 f282 	clz	r2, r2
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	f042 0220 	orr.w	r2, r2, #32
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	f002 021f 	and.w	r2, r2, #31
 8004f4e:	2101      	movs	r1, #1
 8004f50:	fa01 f202 	lsl.w	r2, r1, r2
 8004f54:	4013      	ands	r3, r2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1ad      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 8110 	beq.w	8005190 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d079      	beq.n	8005074 <HAL_RCC_OscConfig+0x760>
 8004f80:	2301      	movs	r3, #1
 8004f82:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004f8a:	fa93 f3a3 	rbit	r3, r3
 8004f8e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f96:	fab3 f383 	clz	r3, r3
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	4bab      	ldr	r3, [pc, #684]	; (800524c <HAL_RCC_OscConfig+0x938>)
 8004fa0:	4413      	add	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004faa:	f7fd fb7b 	bl	80026a4 <HAL_GetTick>
 8004fae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fb2:	e00a      	b.n	8004fca <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fb4:	f7fd fb76 	bl	80026a4 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d902      	bls.n	8004fca <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	f000 bcdb 	b.w	8005980 <HAL_RCC_OscConfig+0x106c>
 8004fca:	2302      	movs	r3, #2
 8004fcc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004fd4:	fa93 f3a3 	rbit	r3, r3
 8004fd8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fe0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	fa93 f2a3 	rbit	r2, r3
 8004ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ffa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005004:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005008:	2202      	movs	r2, #2
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	fa93 f2a3 	rbit	r2, r3
 800501a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800501e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005022:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005024:	4b88      	ldr	r3, [pc, #544]	; (8005248 <HAL_RCC_OscConfig+0x934>)
 8005026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800502c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005030:	2102      	movs	r1, #2
 8005032:	6019      	str	r1, [r3, #0]
 8005034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005038:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	fa93 f1a3 	rbit	r1, r3
 8005042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005046:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800504a:	6019      	str	r1, [r3, #0]
  return result;
 800504c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005050:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	fab3 f383 	clz	r3, r3
 800505a:	b2db      	uxtb	r3, r3
 800505c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005060:	b2db      	uxtb	r3, r3
 8005062:	f003 031f 	and.w	r3, r3, #31
 8005066:	2101      	movs	r1, #1
 8005068:	fa01 f303 	lsl.w	r3, r1, r3
 800506c:	4013      	ands	r3, r2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0a0      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x6a0>
 8005072:	e08d      	b.n	8005190 <HAL_RCC_OscConfig+0x87c>
 8005074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005078:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800507c:	2201      	movs	r2, #1
 800507e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005084:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	fa93 f2a3 	rbit	r2, r3
 800508e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005092:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005096:	601a      	str	r2, [r3, #0]
  return result;
 8005098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800509c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050a0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050a2:	fab3 f383 	clz	r3, r3
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	461a      	mov	r2, r3
 80050aa:	4b68      	ldr	r3, [pc, #416]	; (800524c <HAL_RCC_OscConfig+0x938>)
 80050ac:	4413      	add	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	461a      	mov	r2, r3
 80050b2:	2300      	movs	r3, #0
 80050b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050b6:	f7fd faf5 	bl	80026a4 <HAL_GetTick>
 80050ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050be:	e00a      	b.n	80050d6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050c0:	f7fd faf0 	bl	80026a4 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d902      	bls.n	80050d6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	f000 bc55 	b.w	8005980 <HAL_RCC_OscConfig+0x106c>
 80050d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050da:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80050de:	2202      	movs	r2, #2
 80050e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	fa93 f2a3 	rbit	r2, r3
 80050f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050f4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005102:	2202      	movs	r2, #2
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800510a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	fa93 f2a3 	rbit	r2, r3
 8005114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005118:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005122:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005126:	2202      	movs	r2, #2
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800512e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	fa93 f2a3 	rbit	r2, r3
 8005138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800513c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005140:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005142:	4b41      	ldr	r3, [pc, #260]	; (8005248 <HAL_RCC_OscConfig+0x934>)
 8005144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800514a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800514e:	2102      	movs	r1, #2
 8005150:	6019      	str	r1, [r3, #0]
 8005152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005156:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	fa93 f1a3 	rbit	r1, r3
 8005160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005164:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005168:	6019      	str	r1, [r3, #0]
  return result;
 800516a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800516e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	fab3 f383 	clz	r3, r3
 8005178:	b2db      	uxtb	r3, r3
 800517a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800517e:	b2db      	uxtb	r3, r3
 8005180:	f003 031f 	and.w	r3, r3, #31
 8005184:	2101      	movs	r1, #1
 8005186:	fa01 f303 	lsl.w	r3, r1, r3
 800518a:	4013      	ands	r3, r2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d197      	bne.n	80050c0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005194:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 81a1 	beq.w	80054e8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051a6:	2300      	movs	r3, #0
 80051a8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ac:	4b26      	ldr	r3, [pc, #152]	; (8005248 <HAL_RCC_OscConfig+0x934>)
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d116      	bne.n	80051e6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051b8:	4b23      	ldr	r3, [pc, #140]	; (8005248 <HAL_RCC_OscConfig+0x934>)
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	4a22      	ldr	r2, [pc, #136]	; (8005248 <HAL_RCC_OscConfig+0x934>)
 80051be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c2:	61d3      	str	r3, [r2, #28]
 80051c4:	4b20      	ldr	r3, [pc, #128]	; (8005248 <HAL_RCC_OscConfig+0x934>)
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80051cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051d0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051da:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80051de:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80051e0:	2301      	movs	r3, #1
 80051e2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e6:	4b1a      	ldr	r3, [pc, #104]	; (8005250 <HAL_RCC_OscConfig+0x93c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d11a      	bne.n	8005228 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051f2:	4b17      	ldr	r3, [pc, #92]	; (8005250 <HAL_RCC_OscConfig+0x93c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a16      	ldr	r2, [pc, #88]	; (8005250 <HAL_RCC_OscConfig+0x93c>)
 80051f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051fe:	f7fd fa51 	bl	80026a4 <HAL_GetTick>
 8005202:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005206:	e009      	b.n	800521c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005208:	f7fd fa4c 	bl	80026a4 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b64      	cmp	r3, #100	; 0x64
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e3b1      	b.n	8005980 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800521c:	4b0c      	ldr	r3, [pc, #48]	; (8005250 <HAL_RCC_OscConfig+0x93c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0ef      	beq.n	8005208 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800522c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d10d      	bne.n	8005254 <HAL_RCC_OscConfig+0x940>
 8005238:	4b03      	ldr	r3, [pc, #12]	; (8005248 <HAL_RCC_OscConfig+0x934>)
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	4a02      	ldr	r2, [pc, #8]	; (8005248 <HAL_RCC_OscConfig+0x934>)
 800523e:	f043 0301 	orr.w	r3, r3, #1
 8005242:	6213      	str	r3, [r2, #32]
 8005244:	e03c      	b.n	80052c0 <HAL_RCC_OscConfig+0x9ac>
 8005246:	bf00      	nop
 8005248:	40021000 	.word	0x40021000
 800524c:	10908120 	.word	0x10908120
 8005250:	40007000 	.word	0x40007000
 8005254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005258:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10c      	bne.n	800527e <HAL_RCC_OscConfig+0x96a>
 8005264:	4bc1      	ldr	r3, [pc, #772]	; (800556c <HAL_RCC_OscConfig+0xc58>)
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	4ac0      	ldr	r2, [pc, #768]	; (800556c <HAL_RCC_OscConfig+0xc58>)
 800526a:	f023 0301 	bic.w	r3, r3, #1
 800526e:	6213      	str	r3, [r2, #32]
 8005270:	4bbe      	ldr	r3, [pc, #760]	; (800556c <HAL_RCC_OscConfig+0xc58>)
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	4abd      	ldr	r2, [pc, #756]	; (800556c <HAL_RCC_OscConfig+0xc58>)
 8005276:	f023 0304 	bic.w	r3, r3, #4
 800527a:	6213      	str	r3, [r2, #32]
 800527c:	e020      	b.n	80052c0 <HAL_RCC_OscConfig+0x9ac>
 800527e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005282:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	2b05      	cmp	r3, #5
 800528c:	d10c      	bne.n	80052a8 <HAL_RCC_OscConfig+0x994>
 800528e:	4bb7      	ldr	r3, [pc, #732]	; (800556c <HAL_RCC_OscConfig+0xc58>)
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	4ab6      	ldr	r2, [pc, #728]	; (800556c <HAL_RCC_OscConfig+0xc58>)
 8005294:	f043 0304 	orr.w	r3, r3, #4
 8005298:	6213      	str	r3, [r2, #32]
 800529a:	4bb4      	ldr	r3, [pc, #720]	; (800556c <HAL_RCC_OscConfig+0xc58>)
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	4ab3      	ldr	r2, [pc, #716]	; (800556c <HAL_RCC_OscConfig+0xc58>)
 80052a0:	f043 0301 	orr.w	r3, r3, #1
 80052a4:	6213      	str	r3, [r2, #32]
 80052a6:	e00b      	b.n	80052c0 <HAL_RCC_OscConfig+0x9ac>
 80052a8:	4bb0      	ldr	r3, [pc, #704]	; (800556c <HAL_RCC_OscConfig+0xc58>)
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	4aaf      	ldr	r2, [pc, #700]	; (800556c <HAL_RCC_OscConfig+0xc58>)
 80052ae:	f023 0301 	bic.w	r3, r3, #1
 80052b2:	6213      	str	r3, [r2, #32]
 80052b4:	4bad      	ldr	r3, [pc, #692]	; (800556c <HAL_RCC_OscConfig+0xc58>)
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	4aac      	ldr	r2, [pc, #688]	; (800556c <HAL_RCC_OscConfig+0xc58>)
 80052ba:	f023 0304 	bic.w	r3, r3, #4
 80052be:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 8081 	beq.w	80053d4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052d2:	f7fd f9e7 	bl	80026a4 <HAL_GetTick>
 80052d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052da:	e00b      	b.n	80052f4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052dc:	f7fd f9e2 	bl	80026a4 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e345      	b.n	8005980 <HAL_RCC_OscConfig+0x106c>
 80052f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80052fc:	2202      	movs	r2, #2
 80052fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005304:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	fa93 f2a3 	rbit	r2, r3
 800530e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005312:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800531c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005320:	2202      	movs	r2, #2
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005328:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	fa93 f2a3 	rbit	r2, r3
 8005332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005336:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800533a:	601a      	str	r2, [r3, #0]
  return result;
 800533c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005340:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005344:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005346:	fab3 f383 	clz	r3, r3
 800534a:	b2db      	uxtb	r3, r3
 800534c:	095b      	lsrs	r3, r3, #5
 800534e:	b2db      	uxtb	r3, r3
 8005350:	f043 0302 	orr.w	r3, r3, #2
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d102      	bne.n	8005360 <HAL_RCC_OscConfig+0xa4c>
 800535a:	4b84      	ldr	r3, [pc, #528]	; (800556c <HAL_RCC_OscConfig+0xc58>)
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	e013      	b.n	8005388 <HAL_RCC_OscConfig+0xa74>
 8005360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005364:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005368:	2202      	movs	r2, #2
 800536a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800536c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005370:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	fa93 f2a3 	rbit	r2, r3
 800537a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800537e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	4b79      	ldr	r3, [pc, #484]	; (800556c <HAL_RCC_OscConfig+0xc58>)
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800538c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005390:	2102      	movs	r1, #2
 8005392:	6011      	str	r1, [r2, #0]
 8005394:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005398:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800539c:	6812      	ldr	r2, [r2, #0]
 800539e:	fa92 f1a2 	rbit	r1, r2
 80053a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053a6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80053aa:	6011      	str	r1, [r2, #0]
  return result;
 80053ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053b0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80053b4:	6812      	ldr	r2, [r2, #0]
 80053b6:	fab2 f282 	clz	r2, r2
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053c0:	b2d2      	uxtb	r2, r2
 80053c2:	f002 021f 	and.w	r2, r2, #31
 80053c6:	2101      	movs	r1, #1
 80053c8:	fa01 f202 	lsl.w	r2, r1, r2
 80053cc:	4013      	ands	r3, r2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d084      	beq.n	80052dc <HAL_RCC_OscConfig+0x9c8>
 80053d2:	e07f      	b.n	80054d4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053d4:	f7fd f966 	bl	80026a4 <HAL_GetTick>
 80053d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053dc:	e00b      	b.n	80053f6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053de:	f7fd f961 	bl	80026a4 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e2c4      	b.n	8005980 <HAL_RCC_OscConfig+0x106c>
 80053f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053fa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80053fe:	2202      	movs	r2, #2
 8005400:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005406:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	fa93 f2a3 	rbit	r2, r3
 8005410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005414:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800541e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005422:	2202      	movs	r2, #2
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800542a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	fa93 f2a3 	rbit	r2, r3
 8005434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005438:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800543c:	601a      	str	r2, [r3, #0]
  return result;
 800543e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005442:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005446:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005448:	fab3 f383 	clz	r3, r3
 800544c:	b2db      	uxtb	r3, r3
 800544e:	095b      	lsrs	r3, r3, #5
 8005450:	b2db      	uxtb	r3, r3
 8005452:	f043 0302 	orr.w	r3, r3, #2
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b02      	cmp	r3, #2
 800545a:	d102      	bne.n	8005462 <HAL_RCC_OscConfig+0xb4e>
 800545c:	4b43      	ldr	r3, [pc, #268]	; (800556c <HAL_RCC_OscConfig+0xc58>)
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	e013      	b.n	800548a <HAL_RCC_OscConfig+0xb76>
 8005462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005466:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800546a:	2202      	movs	r2, #2
 800546c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800546e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005472:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	fa93 f2a3 	rbit	r2, r3
 800547c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005480:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	4b39      	ldr	r3, [pc, #228]	; (800556c <HAL_RCC_OscConfig+0xc58>)
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800548e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005492:	2102      	movs	r1, #2
 8005494:	6011      	str	r1, [r2, #0]
 8005496:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800549a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800549e:	6812      	ldr	r2, [r2, #0]
 80054a0:	fa92 f1a2 	rbit	r1, r2
 80054a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054a8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80054ac:	6011      	str	r1, [r2, #0]
  return result;
 80054ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054b2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80054b6:	6812      	ldr	r2, [r2, #0]
 80054b8:	fab2 f282 	clz	r2, r2
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	f002 021f 	and.w	r2, r2, #31
 80054c8:	2101      	movs	r1, #1
 80054ca:	fa01 f202 	lsl.w	r2, r1, r2
 80054ce:	4013      	ands	r3, r2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d184      	bne.n	80053de <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80054d4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d105      	bne.n	80054e8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054dc:	4b23      	ldr	r3, [pc, #140]	; (800556c <HAL_RCC_OscConfig+0xc58>)
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	4a22      	ldr	r2, [pc, #136]	; (800556c <HAL_RCC_OscConfig+0xc58>)
 80054e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054e6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 8242 	beq.w	800597e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054fa:	4b1c      	ldr	r3, [pc, #112]	; (800556c <HAL_RCC_OscConfig+0xc58>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f003 030c 	and.w	r3, r3, #12
 8005502:	2b08      	cmp	r3, #8
 8005504:	f000 8213 	beq.w	800592e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800550c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	2b02      	cmp	r3, #2
 8005516:	f040 8162 	bne.w	80057de <HAL_RCC_OscConfig+0xeca>
 800551a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800551e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005522:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005526:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800552c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	fa93 f2a3 	rbit	r2, r3
 8005536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800553a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800553e:	601a      	str	r2, [r3, #0]
  return result;
 8005540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005544:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005548:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800554a:	fab3 f383 	clz	r3, r3
 800554e:	b2db      	uxtb	r3, r3
 8005550:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005554:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	461a      	mov	r2, r3
 800555c:	2300      	movs	r3, #0
 800555e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005560:	f7fd f8a0 	bl	80026a4 <HAL_GetTick>
 8005564:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005568:	e00c      	b.n	8005584 <HAL_RCC_OscConfig+0xc70>
 800556a:	bf00      	nop
 800556c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005570:	f7fd f898 	bl	80026a4 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e1fd      	b.n	8005980 <HAL_RCC_OscConfig+0x106c>
 8005584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005588:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800558c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005596:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	fa93 f2a3 	rbit	r2, r3
 80055a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055a4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80055a8:	601a      	str	r2, [r3, #0]
  return result;
 80055aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ae:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80055b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055b4:	fab3 f383 	clz	r3, r3
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	095b      	lsrs	r3, r3, #5
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	f043 0301 	orr.w	r3, r3, #1
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d102      	bne.n	80055ce <HAL_RCC_OscConfig+0xcba>
 80055c8:	4bb0      	ldr	r3, [pc, #704]	; (800588c <HAL_RCC_OscConfig+0xf78>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	e027      	b.n	800561e <HAL_RCC_OscConfig+0xd0a>
 80055ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055d2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80055d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	fa93 f2a3 	rbit	r2, r3
 80055ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ee:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055f8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80055fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005606:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	fa93 f2a3 	rbit	r2, r3
 8005610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005614:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	4b9c      	ldr	r3, [pc, #624]	; (800588c <HAL_RCC_OscConfig+0xf78>)
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005622:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005626:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800562a:	6011      	str	r1, [r2, #0]
 800562c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005630:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005634:	6812      	ldr	r2, [r2, #0]
 8005636:	fa92 f1a2 	rbit	r1, r2
 800563a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800563e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005642:	6011      	str	r1, [r2, #0]
  return result;
 8005644:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005648:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800564c:	6812      	ldr	r2, [r2, #0]
 800564e:	fab2 f282 	clz	r2, r2
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	f042 0220 	orr.w	r2, r2, #32
 8005658:	b2d2      	uxtb	r2, r2
 800565a:	f002 021f 	and.w	r2, r2, #31
 800565e:	2101      	movs	r1, #1
 8005660:	fa01 f202 	lsl.w	r2, r1, r2
 8005664:	4013      	ands	r3, r2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d182      	bne.n	8005570 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800566a:	4b88      	ldr	r3, [pc, #544]	; (800588c <HAL_RCC_OscConfig+0xf78>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005676:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800567e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005682:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	430b      	orrs	r3, r1
 800568c:	497f      	ldr	r1, [pc, #508]	; (800588c <HAL_RCC_OscConfig+0xf78>)
 800568e:	4313      	orrs	r3, r2
 8005690:	604b      	str	r3, [r1, #4]
 8005692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005696:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800569a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800569e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056a4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	fa93 f2a3 	rbit	r2, r3
 80056ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056b2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80056b6:	601a      	str	r2, [r3, #0]
  return result;
 80056b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056bc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80056c0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056c2:	fab3 f383 	clz	r3, r3
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80056cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	461a      	mov	r2, r3
 80056d4:	2301      	movs	r3, #1
 80056d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d8:	f7fc ffe4 	bl	80026a4 <HAL_GetTick>
 80056dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056e0:	e009      	b.n	80056f6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056e2:	f7fc ffdf 	bl	80026a4 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e144      	b.n	8005980 <HAL_RCC_OscConfig+0x106c>
 80056f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056fa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80056fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005702:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005708:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	fa93 f2a3 	rbit	r2, r3
 8005712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005716:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800571a:	601a      	str	r2, [r3, #0]
  return result;
 800571c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005720:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005724:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005726:	fab3 f383 	clz	r3, r3
 800572a:	b2db      	uxtb	r3, r3
 800572c:	095b      	lsrs	r3, r3, #5
 800572e:	b2db      	uxtb	r3, r3
 8005730:	f043 0301 	orr.w	r3, r3, #1
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b01      	cmp	r3, #1
 8005738:	d102      	bne.n	8005740 <HAL_RCC_OscConfig+0xe2c>
 800573a:	4b54      	ldr	r3, [pc, #336]	; (800588c <HAL_RCC_OscConfig+0xf78>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	e027      	b.n	8005790 <HAL_RCC_OscConfig+0xe7c>
 8005740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005744:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005748:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800574c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005752:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	fa93 f2a3 	rbit	r2, r3
 800575c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005760:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800576a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800576e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005778:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	fa93 f2a3 	rbit	r2, r3
 8005782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005786:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	4b3f      	ldr	r3, [pc, #252]	; (800588c <HAL_RCC_OscConfig+0xf78>)
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005794:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005798:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800579c:	6011      	str	r1, [r2, #0]
 800579e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057a2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80057a6:	6812      	ldr	r2, [r2, #0]
 80057a8:	fa92 f1a2 	rbit	r1, r2
 80057ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057b0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80057b4:	6011      	str	r1, [r2, #0]
  return result;
 80057b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057ba:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80057be:	6812      	ldr	r2, [r2, #0]
 80057c0:	fab2 f282 	clz	r2, r2
 80057c4:	b2d2      	uxtb	r2, r2
 80057c6:	f042 0220 	orr.w	r2, r2, #32
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	f002 021f 	and.w	r2, r2, #31
 80057d0:	2101      	movs	r1, #1
 80057d2:	fa01 f202 	lsl.w	r2, r1, r2
 80057d6:	4013      	ands	r3, r2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d082      	beq.n	80056e2 <HAL_RCC_OscConfig+0xdce>
 80057dc:	e0cf      	b.n	800597e <HAL_RCC_OscConfig+0x106a>
 80057de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057e2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80057e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057f0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	fa93 f2a3 	rbit	r2, r3
 80057fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057fe:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005802:	601a      	str	r2, [r3, #0]
  return result;
 8005804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005808:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800580c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800580e:	fab3 f383 	clz	r3, r3
 8005812:	b2db      	uxtb	r3, r3
 8005814:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005818:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	461a      	mov	r2, r3
 8005820:	2300      	movs	r3, #0
 8005822:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005824:	f7fc ff3e 	bl	80026a4 <HAL_GetTick>
 8005828:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800582c:	e009      	b.n	8005842 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800582e:	f7fc ff39 	bl	80026a4 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d901      	bls.n	8005842 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e09e      	b.n	8005980 <HAL_RCC_OscConfig+0x106c>
 8005842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005846:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800584a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800584e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005854:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	fa93 f2a3 	rbit	r2, r3
 800585e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005862:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005866:	601a      	str	r2, [r3, #0]
  return result;
 8005868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800586c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005870:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005872:	fab3 f383 	clz	r3, r3
 8005876:	b2db      	uxtb	r3, r3
 8005878:	095b      	lsrs	r3, r3, #5
 800587a:	b2db      	uxtb	r3, r3
 800587c:	f043 0301 	orr.w	r3, r3, #1
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b01      	cmp	r3, #1
 8005884:	d104      	bne.n	8005890 <HAL_RCC_OscConfig+0xf7c>
 8005886:	4b01      	ldr	r3, [pc, #4]	; (800588c <HAL_RCC_OscConfig+0xf78>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	e029      	b.n	80058e0 <HAL_RCC_OscConfig+0xfcc>
 800588c:	40021000 	.word	0x40021000
 8005890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005894:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005898:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800589c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058a2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	fa93 f2a3 	rbit	r2, r3
 80058ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058b0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ba:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80058be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058c8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	fa93 f2a3 	rbit	r2, r3
 80058d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058d6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	4b2b      	ldr	r3, [pc, #172]	; (800598c <HAL_RCC_OscConfig+0x1078>)
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058e4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80058e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80058ec:	6011      	str	r1, [r2, #0]
 80058ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058f2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80058f6:	6812      	ldr	r2, [r2, #0]
 80058f8:	fa92 f1a2 	rbit	r1, r2
 80058fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005900:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005904:	6011      	str	r1, [r2, #0]
  return result;
 8005906:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800590a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800590e:	6812      	ldr	r2, [r2, #0]
 8005910:	fab2 f282 	clz	r2, r2
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	f042 0220 	orr.w	r2, r2, #32
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	f002 021f 	and.w	r2, r2, #31
 8005920:	2101      	movs	r1, #1
 8005922:	fa01 f202 	lsl.w	r2, r1, r2
 8005926:	4013      	ands	r3, r2
 8005928:	2b00      	cmp	r3, #0
 800592a:	d180      	bne.n	800582e <HAL_RCC_OscConfig+0xf1a>
 800592c:	e027      	b.n	800597e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800592e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005932:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d101      	bne.n	8005942 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e01e      	b.n	8005980 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005942:	4b12      	ldr	r3, [pc, #72]	; (800598c <HAL_RCC_OscConfig+0x1078>)
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800594a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800594e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005956:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	429a      	cmp	r2, r3
 8005960:	d10b      	bne.n	800597a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005962:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005966:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800596a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800596e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005976:	429a      	cmp	r2, r3
 8005978:	d001      	beq.n	800597e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e000      	b.n	8005980 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	40021000 	.word	0x40021000

08005990 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b09e      	sub	sp, #120	; 0x78
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e162      	b.n	8005c6e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059a8:	4b90      	ldr	r3, [pc, #576]	; (8005bec <HAL_RCC_ClockConfig+0x25c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0307 	and.w	r3, r3, #7
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d910      	bls.n	80059d8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059b6:	4b8d      	ldr	r3, [pc, #564]	; (8005bec <HAL_RCC_ClockConfig+0x25c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f023 0207 	bic.w	r2, r3, #7
 80059be:	498b      	ldr	r1, [pc, #556]	; (8005bec <HAL_RCC_ClockConfig+0x25c>)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059c6:	4b89      	ldr	r3, [pc, #548]	; (8005bec <HAL_RCC_ClockConfig+0x25c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0307 	and.w	r3, r3, #7
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d001      	beq.n	80059d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e14a      	b.n	8005c6e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d008      	beq.n	80059f6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059e4:	4b82      	ldr	r3, [pc, #520]	; (8005bf0 <HAL_RCC_ClockConfig+0x260>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	497f      	ldr	r1, [pc, #508]	; (8005bf0 <HAL_RCC_ClockConfig+0x260>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 80dc 	beq.w	8005bbc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d13c      	bne.n	8005a86 <HAL_RCC_ClockConfig+0xf6>
 8005a0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a10:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a14:	fa93 f3a3 	rbit	r3, r3
 8005a18:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a1c:	fab3 f383 	clz	r3, r3
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	095b      	lsrs	r3, r3, #5
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	f043 0301 	orr.w	r3, r3, #1
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d102      	bne.n	8005a36 <HAL_RCC_ClockConfig+0xa6>
 8005a30:	4b6f      	ldr	r3, [pc, #444]	; (8005bf0 <HAL_RCC_ClockConfig+0x260>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	e00f      	b.n	8005a56 <HAL_RCC_ClockConfig+0xc6>
 8005a36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a3e:	fa93 f3a3 	rbit	r3, r3
 8005a42:	667b      	str	r3, [r7, #100]	; 0x64
 8005a44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a48:	663b      	str	r3, [r7, #96]	; 0x60
 8005a4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a4c:	fa93 f3a3 	rbit	r3, r3
 8005a50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a52:	4b67      	ldr	r3, [pc, #412]	; (8005bf0 <HAL_RCC_ClockConfig+0x260>)
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a5a:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a5e:	fa92 f2a2 	rbit	r2, r2
 8005a62:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005a64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a66:	fab2 f282 	clz	r2, r2
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	f042 0220 	orr.w	r2, r2, #32
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	f002 021f 	and.w	r2, r2, #31
 8005a76:	2101      	movs	r1, #1
 8005a78:	fa01 f202 	lsl.w	r2, r1, r2
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d17b      	bne.n	8005b7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e0f3      	b.n	8005c6e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d13c      	bne.n	8005b08 <HAL_RCC_ClockConfig+0x178>
 8005a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a96:	fa93 f3a3 	rbit	r3, r3
 8005a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a9e:	fab3 f383 	clz	r3, r3
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	095b      	lsrs	r3, r3, #5
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	f043 0301 	orr.w	r3, r3, #1
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d102      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0x128>
 8005ab2:	4b4f      	ldr	r3, [pc, #316]	; (8005bf0 <HAL_RCC_ClockConfig+0x260>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	e00f      	b.n	8005ad8 <HAL_RCC_ClockConfig+0x148>
 8005ab8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005abc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ac0:	fa93 f3a3 	rbit	r3, r3
 8005ac4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ac6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005aca:	643b      	str	r3, [r7, #64]	; 0x40
 8005acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ace:	fa93 f3a3 	rbit	r3, r3
 8005ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ad4:	4b46      	ldr	r3, [pc, #280]	; (8005bf0 <HAL_RCC_ClockConfig+0x260>)
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005adc:	63ba      	str	r2, [r7, #56]	; 0x38
 8005ade:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ae0:	fa92 f2a2 	rbit	r2, r2
 8005ae4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005ae6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ae8:	fab2 f282 	clz	r2, r2
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	f042 0220 	orr.w	r2, r2, #32
 8005af2:	b2d2      	uxtb	r2, r2
 8005af4:	f002 021f 	and.w	r2, r2, #31
 8005af8:	2101      	movs	r1, #1
 8005afa:	fa01 f202 	lsl.w	r2, r1, r2
 8005afe:	4013      	ands	r3, r2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d13a      	bne.n	8005b7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e0b2      	b.n	8005c6e <HAL_RCC_ClockConfig+0x2de>
 8005b08:	2302      	movs	r3, #2
 8005b0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0e:	fa93 f3a3 	rbit	r3, r3
 8005b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b16:	fab3 f383 	clz	r3, r3
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	095b      	lsrs	r3, r3, #5
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	f043 0301 	orr.w	r3, r3, #1
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d102      	bne.n	8005b30 <HAL_RCC_ClockConfig+0x1a0>
 8005b2a:	4b31      	ldr	r3, [pc, #196]	; (8005bf0 <HAL_RCC_ClockConfig+0x260>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	e00d      	b.n	8005b4c <HAL_RCC_ClockConfig+0x1bc>
 8005b30:	2302      	movs	r3, #2
 8005b32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b36:	fa93 f3a3 	rbit	r3, r3
 8005b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	623b      	str	r3, [r7, #32]
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	fa93 f3a3 	rbit	r3, r3
 8005b46:	61fb      	str	r3, [r7, #28]
 8005b48:	4b29      	ldr	r3, [pc, #164]	; (8005bf0 <HAL_RCC_ClockConfig+0x260>)
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	61ba      	str	r2, [r7, #24]
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	fa92 f2a2 	rbit	r2, r2
 8005b56:	617a      	str	r2, [r7, #20]
  return result;
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	fab2 f282 	clz	r2, r2
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	f042 0220 	orr.w	r2, r2, #32
 8005b64:	b2d2      	uxtb	r2, r2
 8005b66:	f002 021f 	and.w	r2, r2, #31
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b70:	4013      	ands	r3, r2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e079      	b.n	8005c6e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b7a:	4b1d      	ldr	r3, [pc, #116]	; (8005bf0 <HAL_RCC_ClockConfig+0x260>)
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f023 0203 	bic.w	r2, r3, #3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	491a      	ldr	r1, [pc, #104]	; (8005bf0 <HAL_RCC_ClockConfig+0x260>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b8c:	f7fc fd8a 	bl	80026a4 <HAL_GetTick>
 8005b90:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b92:	e00a      	b.n	8005baa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b94:	f7fc fd86 	bl	80026a4 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e061      	b.n	8005c6e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005baa:	4b11      	ldr	r3, [pc, #68]	; (8005bf0 <HAL_RCC_ClockConfig+0x260>)
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f003 020c 	and.w	r2, r3, #12
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d1eb      	bne.n	8005b94 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bbc:	4b0b      	ldr	r3, [pc, #44]	; (8005bec <HAL_RCC_ClockConfig+0x25c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0307 	and.w	r3, r3, #7
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d214      	bcs.n	8005bf4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bca:	4b08      	ldr	r3, [pc, #32]	; (8005bec <HAL_RCC_ClockConfig+0x25c>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f023 0207 	bic.w	r2, r3, #7
 8005bd2:	4906      	ldr	r1, [pc, #24]	; (8005bec <HAL_RCC_ClockConfig+0x25c>)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bda:	4b04      	ldr	r3, [pc, #16]	; (8005bec <HAL_RCC_ClockConfig+0x25c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d005      	beq.n	8005bf4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e040      	b.n	8005c6e <HAL_RCC_ClockConfig+0x2de>
 8005bec:	40022000 	.word	0x40022000
 8005bf0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0304 	and.w	r3, r3, #4
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d008      	beq.n	8005c12 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c00:	4b1d      	ldr	r3, [pc, #116]	; (8005c78 <HAL_RCC_ClockConfig+0x2e8>)
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	491a      	ldr	r1, [pc, #104]	; (8005c78 <HAL_RCC_ClockConfig+0x2e8>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0308 	and.w	r3, r3, #8
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d009      	beq.n	8005c32 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c1e:	4b16      	ldr	r3, [pc, #88]	; (8005c78 <HAL_RCC_ClockConfig+0x2e8>)
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	4912      	ldr	r1, [pc, #72]	; (8005c78 <HAL_RCC_ClockConfig+0x2e8>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005c32:	f000 f829 	bl	8005c88 <HAL_RCC_GetSysClockFreq>
 8005c36:	4601      	mov	r1, r0
 8005c38:	4b0f      	ldr	r3, [pc, #60]	; (8005c78 <HAL_RCC_ClockConfig+0x2e8>)
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c40:	22f0      	movs	r2, #240	; 0xf0
 8005c42:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	fa92 f2a2 	rbit	r2, r2
 8005c4a:	60fa      	str	r2, [r7, #12]
  return result;
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	fab2 f282 	clz	r2, r2
 8005c52:	b2d2      	uxtb	r2, r2
 8005c54:	40d3      	lsrs	r3, r2
 8005c56:	4a09      	ldr	r2, [pc, #36]	; (8005c7c <HAL_RCC_ClockConfig+0x2ec>)
 8005c58:	5cd3      	ldrb	r3, [r2, r3]
 8005c5a:	fa21 f303 	lsr.w	r3, r1, r3
 8005c5e:	4a08      	ldr	r2, [pc, #32]	; (8005c80 <HAL_RCC_ClockConfig+0x2f0>)
 8005c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005c62:	4b08      	ldr	r3, [pc, #32]	; (8005c84 <HAL_RCC_ClockConfig+0x2f4>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fc fcd8 	bl	800261c <HAL_InitTick>
  
  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3778      	adds	r7, #120	; 0x78
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	40021000 	.word	0x40021000
 8005c7c:	0800d820 	.word	0x0800d820
 8005c80:	20000028 	.word	0x20000028
 8005c84:	2000002c 	.word	0x2000002c

08005c88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b08b      	sub	sp, #44	; 0x2c
 8005c8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	61fb      	str	r3, [r7, #28]
 8005c92:	2300      	movs	r3, #0
 8005c94:	61bb      	str	r3, [r7, #24]
 8005c96:	2300      	movs	r3, #0
 8005c98:	627b      	str	r3, [r7, #36]	; 0x24
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005ca2:	4b29      	ldr	r3, [pc, #164]	; (8005d48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	f003 030c 	and.w	r3, r3, #12
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d002      	beq.n	8005cb8 <HAL_RCC_GetSysClockFreq+0x30>
 8005cb2:	2b08      	cmp	r3, #8
 8005cb4:	d003      	beq.n	8005cbe <HAL_RCC_GetSysClockFreq+0x36>
 8005cb6:	e03c      	b.n	8005d32 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005cb8:	4b24      	ldr	r3, [pc, #144]	; (8005d4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005cba:	623b      	str	r3, [r7, #32]
      break;
 8005cbc:	e03c      	b.n	8005d38 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005cc4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005cc8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	fa92 f2a2 	rbit	r2, r2
 8005cd0:	607a      	str	r2, [r7, #4]
  return result;
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	fab2 f282 	clz	r2, r2
 8005cd8:	b2d2      	uxtb	r2, r2
 8005cda:	40d3      	lsrs	r3, r2
 8005cdc:	4a1c      	ldr	r2, [pc, #112]	; (8005d50 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005cde:	5cd3      	ldrb	r3, [r2, r3]
 8005ce0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005ce2:	4b19      	ldr	r3, [pc, #100]	; (8005d48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce6:	f003 030f 	and.w	r3, r3, #15
 8005cea:	220f      	movs	r2, #15
 8005cec:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	fa92 f2a2 	rbit	r2, r2
 8005cf4:	60fa      	str	r2, [r7, #12]
  return result;
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	fab2 f282 	clz	r2, r2
 8005cfc:	b2d2      	uxtb	r2, r2
 8005cfe:	40d3      	lsrs	r3, r2
 8005d00:	4a14      	ldr	r2, [pc, #80]	; (8005d54 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005d02:	5cd3      	ldrb	r3, [r2, r3]
 8005d04:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d008      	beq.n	8005d22 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005d10:	4a0e      	ldr	r2, [pc, #56]	; (8005d4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	fb02 f303 	mul.w	r3, r2, r3
 8005d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d20:	e004      	b.n	8005d2c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	4a0c      	ldr	r2, [pc, #48]	; (8005d58 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d26:	fb02 f303 	mul.w	r3, r2, r3
 8005d2a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	623b      	str	r3, [r7, #32]
      break;
 8005d30:	e002      	b.n	8005d38 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d32:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d34:	623b      	str	r3, [r7, #32]
      break;
 8005d36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d38:	6a3b      	ldr	r3, [r7, #32]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	372c      	adds	r7, #44	; 0x2c
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	40021000 	.word	0x40021000
 8005d4c:	007a1200 	.word	0x007a1200
 8005d50:	0800d838 	.word	0x0800d838
 8005d54:	0800d848 	.word	0x0800d848
 8005d58:	003d0900 	.word	0x003d0900

08005d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d60:	4b03      	ldr	r3, [pc, #12]	; (8005d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d62:	681b      	ldr	r3, [r3, #0]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	20000028 	.word	0x20000028

08005d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005d7a:	f7ff ffef 	bl	8005d5c <HAL_RCC_GetHCLKFreq>
 8005d7e:	4601      	mov	r1, r0
 8005d80:	4b0b      	ldr	r3, [pc, #44]	; (8005db0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d88:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005d8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	fa92 f2a2 	rbit	r2, r2
 8005d94:	603a      	str	r2, [r7, #0]
  return result;
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	fab2 f282 	clz	r2, r2
 8005d9c:	b2d2      	uxtb	r2, r2
 8005d9e:	40d3      	lsrs	r3, r2
 8005da0:	4a04      	ldr	r2, [pc, #16]	; (8005db4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005da2:	5cd3      	ldrb	r3, [r2, r3]
 8005da4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005da8:	4618      	mov	r0, r3
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	40021000 	.word	0x40021000
 8005db4:	0800d830 	.word	0x0800d830

08005db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005dbe:	f7ff ffcd 	bl	8005d5c <HAL_RCC_GetHCLKFreq>
 8005dc2:	4601      	mov	r1, r0
 8005dc4:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005dcc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005dd0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	fa92 f2a2 	rbit	r2, r2
 8005dd8:	603a      	str	r2, [r7, #0]
  return result;
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	fab2 f282 	clz	r2, r2
 8005de0:	b2d2      	uxtb	r2, r2
 8005de2:	40d3      	lsrs	r3, r2
 8005de4:	4a04      	ldr	r2, [pc, #16]	; (8005df8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005de6:	5cd3      	ldrb	r3, [r2, r3]
 8005de8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005dec:	4618      	mov	r0, r3
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	40021000 	.word	0x40021000
 8005df8:	0800d830 	.word	0x0800d830

08005dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b092      	sub	sp, #72	; 0x48
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 80d4 	beq.w	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e20:	4b4e      	ldr	r3, [pc, #312]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e22:	69db      	ldr	r3, [r3, #28]
 8005e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10e      	bne.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e2c:	4b4b      	ldr	r3, [pc, #300]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	4a4a      	ldr	r2, [pc, #296]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e36:	61d3      	str	r3, [r2, #28]
 8005e38:	4b48      	ldr	r3, [pc, #288]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e40:	60bb      	str	r3, [r7, #8]
 8005e42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e44:	2301      	movs	r3, #1
 8005e46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e4a:	4b45      	ldr	r3, [pc, #276]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d118      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e56:	4b42      	ldr	r3, [pc, #264]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a41      	ldr	r2, [pc, #260]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e60:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e62:	f7fc fc1f 	bl	80026a4 <HAL_GetTick>
 8005e66:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e68:	e008      	b.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e6a:	f7fc fc1b 	bl	80026a4 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	2b64      	cmp	r3, #100	; 0x64
 8005e76:	d901      	bls.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e169      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e7c:	4b38      	ldr	r3, [pc, #224]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0f0      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e88:	4b34      	ldr	r3, [pc, #208]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e90:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 8084 	beq.w	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d07c      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ea8:	4b2c      	ldr	r3, [pc, #176]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005eb6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eba:	fa93 f3a3 	rbit	r3, r3
 8005ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ec2:	fab3 f383 	clz	r3, r3
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	461a      	mov	r2, r3
 8005eca:	4b26      	ldr	r3, [pc, #152]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ecc:	4413      	add	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	6013      	str	r3, [r2, #0]
 8005ed6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005eda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ede:	fa93 f3a3 	rbit	r3, r3
 8005ee2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ee6:	fab3 f383 	clz	r3, r3
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	4b1d      	ldr	r3, [pc, #116]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ef0:	4413      	add	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005efa:	4a18      	ldr	r2, [pc, #96]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005efe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d04b      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f0a:	f7fc fbcb 	bl	80026a4 <HAL_GetTick>
 8005f0e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f10:	e00a      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f12:	f7fc fbc7 	bl	80026a4 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d901      	bls.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e113      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2e:	fa93 f3a3 	rbit	r3, r3
 8005f32:	627b      	str	r3, [r7, #36]	; 0x24
 8005f34:	2302      	movs	r3, #2
 8005f36:	623b      	str	r3, [r7, #32]
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	fa93 f3a3 	rbit	r3, r3
 8005f3e:	61fb      	str	r3, [r7, #28]
  return result;
 8005f40:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f42:	fab3 f383 	clz	r3, r3
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	095b      	lsrs	r3, r3, #5
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	f043 0302 	orr.w	r3, r3, #2
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d108      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005f56:	4b01      	ldr	r3, [pc, #4]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	e00d      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005f5c:	40021000 	.word	0x40021000
 8005f60:	40007000 	.word	0x40007000
 8005f64:	10908100 	.word	0x10908100
 8005f68:	2302      	movs	r3, #2
 8005f6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	fa93 f3a3 	rbit	r3, r3
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	4b78      	ldr	r3, [pc, #480]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	2202      	movs	r2, #2
 8005f7a:	613a      	str	r2, [r7, #16]
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	fa92 f2a2 	rbit	r2, r2
 8005f82:	60fa      	str	r2, [r7, #12]
  return result;
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	fab2 f282 	clz	r2, r2
 8005f8a:	b2d2      	uxtb	r2, r2
 8005f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f90:	b2d2      	uxtb	r2, r2
 8005f92:	f002 021f 	and.w	r2, r2, #31
 8005f96:	2101      	movs	r1, #1
 8005f98:	fa01 f202 	lsl.w	r2, r1, r2
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d0b7      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005fa2:	4b6d      	ldr	r3, [pc, #436]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	496a      	ldr	r1, [pc, #424]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005fb4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d105      	bne.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fbc:	4b66      	ldr	r3, [pc, #408]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	4a65      	ldr	r2, [pc, #404]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fc6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d008      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fd4:	4b60      	ldr	r3, [pc, #384]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd8:	f023 0203 	bic.w	r2, r3, #3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	495d      	ldr	r1, [pc, #372]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d008      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ff2:	4b59      	ldr	r3, [pc, #356]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	4956      	ldr	r1, [pc, #344]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006000:	4313      	orrs	r3, r2
 8006002:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	d008      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006010:	4b51      	ldr	r3, [pc, #324]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006014:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	494e      	ldr	r1, [pc, #312]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800601e:	4313      	orrs	r3, r2
 8006020:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b00      	cmp	r3, #0
 800602c:	d008      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800602e:	4b4a      	ldr	r3, [pc, #296]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006032:	f023 0210 	bic.w	r2, r3, #16
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	4947      	ldr	r1, [pc, #284]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800603c:	4313      	orrs	r3, r2
 800603e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d008      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800604c:	4b42      	ldr	r3, [pc, #264]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006058:	493f      	ldr	r1, [pc, #252]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800605a:	4313      	orrs	r3, r2
 800605c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006066:	2b00      	cmp	r3, #0
 8006068:	d008      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800606a:	4b3b      	ldr	r3, [pc, #236]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800606c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606e:	f023 0220 	bic.w	r2, r3, #32
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	4938      	ldr	r1, [pc, #224]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006078:	4313      	orrs	r3, r2
 800607a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0308 	and.w	r3, r3, #8
 8006084:	2b00      	cmp	r3, #0
 8006086:	d008      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006088:	4b33      	ldr	r3, [pc, #204]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800608a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	4930      	ldr	r1, [pc, #192]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006096:	4313      	orrs	r3, r2
 8006098:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0310 	and.w	r3, r3, #16
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d008      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80060a6:	4b2c      	ldr	r3, [pc, #176]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	4929      	ldr	r1, [pc, #164]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d008      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060c4:	4b24      	ldr	r3, [pc, #144]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d0:	4921      	ldr	r1, [pc, #132]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d008      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80060e2:	4b1d      	ldr	r3, [pc, #116]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	491a      	ldr	r1, [pc, #104]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d008      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006100:	4b15      	ldr	r3, [pc, #84]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006104:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610c:	4912      	ldr	r1, [pc, #72]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800610e:	4313      	orrs	r3, r2
 8006110:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d008      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800611e:	4b0e      	ldr	r3, [pc, #56]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006122:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612a:	490b      	ldr	r1, [pc, #44]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800612c:	4313      	orrs	r3, r2
 800612e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d008      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800613c:	4b06      	ldr	r3, [pc, #24]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800613e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006140:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006148:	4903      	ldr	r1, [pc, #12]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800614a:	4313      	orrs	r3, r2
 800614c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3748      	adds	r7, #72	; 0x48
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	40021000 	.word	0x40021000

0800615c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e09d      	b.n	80062aa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	2b00      	cmp	r3, #0
 8006174:	d108      	bne.n	8006188 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800617e:	d009      	beq.n	8006194 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	61da      	str	r2, [r3, #28]
 8006186:	e005      	b.n	8006194 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d106      	bne.n	80061b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7fb fe20 	bl	8001df4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061d4:	d902      	bls.n	80061dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80061d6:	2300      	movs	r3, #0
 80061d8:	60fb      	str	r3, [r7, #12]
 80061da:	e002      	b.n	80061e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80061dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80061ea:	d007      	beq.n	80061fc <HAL_SPI_Init+0xa0>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061f4:	d002      	beq.n	80061fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800620c:	431a      	orrs	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	431a      	orrs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	431a      	orrs	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800622a:	431a      	orrs	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	69db      	ldr	r3, [r3, #28]
 8006230:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006234:	431a      	orrs	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800623e:	ea42 0103 	orr.w	r1, r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006246:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	0c1b      	lsrs	r3, r3, #16
 8006258:	f003 0204 	and.w	r2, r3, #4
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	f003 0310 	and.w	r3, r3, #16
 8006264:	431a      	orrs	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626a:	f003 0308 	and.w	r3, r3, #8
 800626e:	431a      	orrs	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006278:	ea42 0103 	orr.w	r1, r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69da      	ldr	r2, [r3, #28]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006298:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b082      	sub	sp, #8
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e049      	b.n	8006358 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d106      	bne.n	80062de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7fb fdcd 	bl	8001e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2202      	movs	r2, #2
 80062e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3304      	adds	r3, #4
 80062ee:	4619      	mov	r1, r3
 80062f0:	4610      	mov	r0, r2
 80062f2:	f000 fd27 	bl	8006d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b01      	cmp	r3, #1
 8006372:	d001      	beq.n	8006378 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e04a      	b.n	800640e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2202      	movs	r2, #2
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68da      	ldr	r2, [r3, #12]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f042 0201 	orr.w	r2, r2, #1
 800638e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a21      	ldr	r2, [pc, #132]	; (800641c <HAL_TIM_Base_Start_IT+0xbc>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d018      	beq.n	80063cc <HAL_TIM_Base_Start_IT+0x6c>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a2:	d013      	beq.n	80063cc <HAL_TIM_Base_Start_IT+0x6c>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a1d      	ldr	r2, [pc, #116]	; (8006420 <HAL_TIM_Base_Start_IT+0xc0>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d00e      	beq.n	80063cc <HAL_TIM_Base_Start_IT+0x6c>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a1c      	ldr	r2, [pc, #112]	; (8006424 <HAL_TIM_Base_Start_IT+0xc4>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d009      	beq.n	80063cc <HAL_TIM_Base_Start_IT+0x6c>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a1a      	ldr	r2, [pc, #104]	; (8006428 <HAL_TIM_Base_Start_IT+0xc8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d004      	beq.n	80063cc <HAL_TIM_Base_Start_IT+0x6c>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a19      	ldr	r2, [pc, #100]	; (800642c <HAL_TIM_Base_Start_IT+0xcc>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d115      	bne.n	80063f8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	4b17      	ldr	r3, [pc, #92]	; (8006430 <HAL_TIM_Base_Start_IT+0xd0>)
 80063d4:	4013      	ands	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2b06      	cmp	r3, #6
 80063dc:	d015      	beq.n	800640a <HAL_TIM_Base_Start_IT+0xaa>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e4:	d011      	beq.n	800640a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f042 0201 	orr.w	r2, r2, #1
 80063f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063f6:	e008      	b.n	800640a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f042 0201 	orr.w	r2, r2, #1
 8006406:	601a      	str	r2, [r3, #0]
 8006408:	e000      	b.n	800640c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800640a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	40012c00 	.word	0x40012c00
 8006420:	40000400 	.word	0x40000400
 8006424:	40000800 	.word	0x40000800
 8006428:	40013400 	.word	0x40013400
 800642c:	40014000 	.word	0x40014000
 8006430:	00010007 	.word	0x00010007

08006434 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e049      	b.n	80064da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d106      	bne.n	8006460 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f841 	bl	80064e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2202      	movs	r2, #2
 8006464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3304      	adds	r3, #4
 8006470:	4619      	mov	r1, r3
 8006472:	4610      	mov	r0, r2
 8006474:	f000 fc66 	bl	8006d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b083      	sub	sp, #12
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80064ea:	bf00      	nop
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
	...

080064f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d109      	bne.n	800651c <HAL_TIM_PWM_Start+0x24>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b01      	cmp	r3, #1
 8006512:	bf14      	ite	ne
 8006514:	2301      	movne	r3, #1
 8006516:	2300      	moveq	r3, #0
 8006518:	b2db      	uxtb	r3, r3
 800651a:	e03c      	b.n	8006596 <HAL_TIM_PWM_Start+0x9e>
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	2b04      	cmp	r3, #4
 8006520:	d109      	bne.n	8006536 <HAL_TIM_PWM_Start+0x3e>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b01      	cmp	r3, #1
 800652c:	bf14      	ite	ne
 800652e:	2301      	movne	r3, #1
 8006530:	2300      	moveq	r3, #0
 8006532:	b2db      	uxtb	r3, r3
 8006534:	e02f      	b.n	8006596 <HAL_TIM_PWM_Start+0x9e>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2b08      	cmp	r3, #8
 800653a:	d109      	bne.n	8006550 <HAL_TIM_PWM_Start+0x58>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b01      	cmp	r3, #1
 8006546:	bf14      	ite	ne
 8006548:	2301      	movne	r3, #1
 800654a:	2300      	moveq	r3, #0
 800654c:	b2db      	uxtb	r3, r3
 800654e:	e022      	b.n	8006596 <HAL_TIM_PWM_Start+0x9e>
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	2b0c      	cmp	r3, #12
 8006554:	d109      	bne.n	800656a <HAL_TIM_PWM_Start+0x72>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b01      	cmp	r3, #1
 8006560:	bf14      	ite	ne
 8006562:	2301      	movne	r3, #1
 8006564:	2300      	moveq	r3, #0
 8006566:	b2db      	uxtb	r3, r3
 8006568:	e015      	b.n	8006596 <HAL_TIM_PWM_Start+0x9e>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2b10      	cmp	r3, #16
 800656e:	d109      	bne.n	8006584 <HAL_TIM_PWM_Start+0x8c>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b01      	cmp	r3, #1
 800657a:	bf14      	ite	ne
 800657c:	2301      	movne	r3, #1
 800657e:	2300      	moveq	r3, #0
 8006580:	b2db      	uxtb	r3, r3
 8006582:	e008      	b.n	8006596 <HAL_TIM_PWM_Start+0x9e>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b01      	cmp	r3, #1
 800658e:	bf14      	ite	ne
 8006590:	2301      	movne	r3, #1
 8006592:	2300      	moveq	r3, #0
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e097      	b.n	80066ce <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d104      	bne.n	80065ae <HAL_TIM_PWM_Start+0xb6>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2202      	movs	r2, #2
 80065a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065ac:	e023      	b.n	80065f6 <HAL_TIM_PWM_Start+0xfe>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b04      	cmp	r3, #4
 80065b2:	d104      	bne.n	80065be <HAL_TIM_PWM_Start+0xc6>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065bc:	e01b      	b.n	80065f6 <HAL_TIM_PWM_Start+0xfe>
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b08      	cmp	r3, #8
 80065c2:	d104      	bne.n	80065ce <HAL_TIM_PWM_Start+0xd6>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065cc:	e013      	b.n	80065f6 <HAL_TIM_PWM_Start+0xfe>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2b0c      	cmp	r3, #12
 80065d2:	d104      	bne.n	80065de <HAL_TIM_PWM_Start+0xe6>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065dc:	e00b      	b.n	80065f6 <HAL_TIM_PWM_Start+0xfe>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b10      	cmp	r3, #16
 80065e2:	d104      	bne.n	80065ee <HAL_TIM_PWM_Start+0xf6>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2202      	movs	r2, #2
 80065e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065ec:	e003      	b.n	80065f6 <HAL_TIM_PWM_Start+0xfe>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2202      	movs	r2, #2
 80065f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2201      	movs	r2, #1
 80065fc:	6839      	ldr	r1, [r7, #0]
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 ffa0 	bl	8007544 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a33      	ldr	r2, [pc, #204]	; (80066d8 <HAL_TIM_PWM_Start+0x1e0>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d013      	beq.n	8006636 <HAL_TIM_PWM_Start+0x13e>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a32      	ldr	r2, [pc, #200]	; (80066dc <HAL_TIM_PWM_Start+0x1e4>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d00e      	beq.n	8006636 <HAL_TIM_PWM_Start+0x13e>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a30      	ldr	r2, [pc, #192]	; (80066e0 <HAL_TIM_PWM_Start+0x1e8>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d009      	beq.n	8006636 <HAL_TIM_PWM_Start+0x13e>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a2f      	ldr	r2, [pc, #188]	; (80066e4 <HAL_TIM_PWM_Start+0x1ec>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d004      	beq.n	8006636 <HAL_TIM_PWM_Start+0x13e>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a2d      	ldr	r2, [pc, #180]	; (80066e8 <HAL_TIM_PWM_Start+0x1f0>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d101      	bne.n	800663a <HAL_TIM_PWM_Start+0x142>
 8006636:	2301      	movs	r3, #1
 8006638:	e000      	b.n	800663c <HAL_TIM_PWM_Start+0x144>
 800663a:	2300      	movs	r3, #0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d007      	beq.n	8006650 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800664e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a20      	ldr	r2, [pc, #128]	; (80066d8 <HAL_TIM_PWM_Start+0x1e0>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d018      	beq.n	800668c <HAL_TIM_PWM_Start+0x194>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006662:	d013      	beq.n	800668c <HAL_TIM_PWM_Start+0x194>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a20      	ldr	r2, [pc, #128]	; (80066ec <HAL_TIM_PWM_Start+0x1f4>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00e      	beq.n	800668c <HAL_TIM_PWM_Start+0x194>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a1f      	ldr	r2, [pc, #124]	; (80066f0 <HAL_TIM_PWM_Start+0x1f8>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d009      	beq.n	800668c <HAL_TIM_PWM_Start+0x194>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a17      	ldr	r2, [pc, #92]	; (80066dc <HAL_TIM_PWM_Start+0x1e4>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d004      	beq.n	800668c <HAL_TIM_PWM_Start+0x194>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a16      	ldr	r2, [pc, #88]	; (80066e0 <HAL_TIM_PWM_Start+0x1e8>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d115      	bne.n	80066b8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689a      	ldr	r2, [r3, #8]
 8006692:	4b18      	ldr	r3, [pc, #96]	; (80066f4 <HAL_TIM_PWM_Start+0x1fc>)
 8006694:	4013      	ands	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2b06      	cmp	r3, #6
 800669c:	d015      	beq.n	80066ca <HAL_TIM_PWM_Start+0x1d2>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066a4:	d011      	beq.n	80066ca <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f042 0201 	orr.w	r2, r2, #1
 80066b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b6:	e008      	b.n	80066ca <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f042 0201 	orr.w	r2, r2, #1
 80066c6:	601a      	str	r2, [r3, #0]
 80066c8:	e000      	b.n	80066cc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	40012c00 	.word	0x40012c00
 80066dc:	40013400 	.word	0x40013400
 80066e0:	40014000 	.word	0x40014000
 80066e4:	40014400 	.word	0x40014400
 80066e8:	40014800 	.word	0x40014800
 80066ec:	40000400 	.word	0x40000400
 80066f0:	40000800 	.word	0x40000800
 80066f4:	00010007 	.word	0x00010007

080066f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b02      	cmp	r3, #2
 800670c:	d122      	bne.n	8006754 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b02      	cmp	r3, #2
 800671a:	d11b      	bne.n	8006754 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f06f 0202 	mvn.w	r2, #2
 8006724:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	f003 0303 	and.w	r3, r3, #3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fae3 	bl	8006d06 <HAL_TIM_IC_CaptureCallback>
 8006740:	e005      	b.n	800674e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fad5 	bl	8006cf2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 fae6 	bl	8006d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	f003 0304 	and.w	r3, r3, #4
 800675e:	2b04      	cmp	r3, #4
 8006760:	d122      	bne.n	80067a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b04      	cmp	r3, #4
 800676e:	d11b      	bne.n	80067a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f06f 0204 	mvn.w	r2, #4
 8006778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2202      	movs	r2, #2
 800677e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fab9 	bl	8006d06 <HAL_TIM_IC_CaptureCallback>
 8006794:	e005      	b.n	80067a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 faab 	bl	8006cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fabc 	bl	8006d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	f003 0308 	and.w	r3, r3, #8
 80067b2:	2b08      	cmp	r3, #8
 80067b4:	d122      	bne.n	80067fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f003 0308 	and.w	r3, r3, #8
 80067c0:	2b08      	cmp	r3, #8
 80067c2:	d11b      	bne.n	80067fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f06f 0208 	mvn.w	r2, #8
 80067cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2204      	movs	r2, #4
 80067d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	f003 0303 	and.w	r3, r3, #3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fa8f 	bl	8006d06 <HAL_TIM_IC_CaptureCallback>
 80067e8:	e005      	b.n	80067f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 fa81 	bl	8006cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fa92 	bl	8006d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	f003 0310 	and.w	r3, r3, #16
 8006806:	2b10      	cmp	r3, #16
 8006808:	d122      	bne.n	8006850 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	f003 0310 	and.w	r3, r3, #16
 8006814:	2b10      	cmp	r3, #16
 8006816:	d11b      	bne.n	8006850 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f06f 0210 	mvn.w	r2, #16
 8006820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2208      	movs	r2, #8
 8006826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fa65 	bl	8006d06 <HAL_TIM_IC_CaptureCallback>
 800683c:	e005      	b.n	800684a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fa57 	bl	8006cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fa68 	bl	8006d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	2b01      	cmp	r3, #1
 800685c:	d10e      	bne.n	800687c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f003 0301 	and.w	r3, r3, #1
 8006868:	2b01      	cmp	r3, #1
 800686a:	d107      	bne.n	800687c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f06f 0201 	mvn.w	r2, #1
 8006874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7fb f9cc 	bl	8001c14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006886:	2b80      	cmp	r3, #128	; 0x80
 8006888:	d10e      	bne.n	80068a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006894:	2b80      	cmp	r3, #128	; 0x80
 8006896:	d107      	bne.n	80068a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80068a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fefe 	bl	80076a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068b6:	d10e      	bne.n	80068d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c2:	2b80      	cmp	r3, #128	; 0x80
 80068c4:	d107      	bne.n	80068d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80068ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fef1 	bl	80076b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e0:	2b40      	cmp	r3, #64	; 0x40
 80068e2:	d10e      	bne.n	8006902 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ee:	2b40      	cmp	r3, #64	; 0x40
 80068f0:	d107      	bne.n	8006902 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fa16 	bl	8006d2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	f003 0320 	and.w	r3, r3, #32
 800690c:	2b20      	cmp	r3, #32
 800690e:	d10e      	bne.n	800692e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f003 0320 	and.w	r3, r3, #32
 800691a:	2b20      	cmp	r3, #32
 800691c:	d107      	bne.n	800692e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f06f 0220 	mvn.w	r2, #32
 8006926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 feb1 	bl	8007690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800692e:	bf00      	nop
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
	...

08006938 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006944:	2300      	movs	r3, #0
 8006946:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800694e:	2b01      	cmp	r3, #1
 8006950:	d101      	bne.n	8006956 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006952:	2302      	movs	r3, #2
 8006954:	e0ff      	b.n	8006b56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b14      	cmp	r3, #20
 8006962:	f200 80f0 	bhi.w	8006b46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006966:	a201      	add	r2, pc, #4	; (adr r2, 800696c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696c:	080069c1 	.word	0x080069c1
 8006970:	08006b47 	.word	0x08006b47
 8006974:	08006b47 	.word	0x08006b47
 8006978:	08006b47 	.word	0x08006b47
 800697c:	08006a01 	.word	0x08006a01
 8006980:	08006b47 	.word	0x08006b47
 8006984:	08006b47 	.word	0x08006b47
 8006988:	08006b47 	.word	0x08006b47
 800698c:	08006a43 	.word	0x08006a43
 8006990:	08006b47 	.word	0x08006b47
 8006994:	08006b47 	.word	0x08006b47
 8006998:	08006b47 	.word	0x08006b47
 800699c:	08006a83 	.word	0x08006a83
 80069a0:	08006b47 	.word	0x08006b47
 80069a4:	08006b47 	.word	0x08006b47
 80069a8:	08006b47 	.word	0x08006b47
 80069ac:	08006ac5 	.word	0x08006ac5
 80069b0:	08006b47 	.word	0x08006b47
 80069b4:	08006b47 	.word	0x08006b47
 80069b8:	08006b47 	.word	0x08006b47
 80069bc:	08006b05 	.word	0x08006b05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68b9      	ldr	r1, [r7, #8]
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 fa4c 	bl	8006e64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	699a      	ldr	r2, [r3, #24]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f042 0208 	orr.w	r2, r2, #8
 80069da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	699a      	ldr	r2, [r3, #24]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f022 0204 	bic.w	r2, r2, #4
 80069ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6999      	ldr	r1, [r3, #24]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	691a      	ldr	r2, [r3, #16]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	619a      	str	r2, [r3, #24]
      break;
 80069fe:	e0a5      	b.n	8006b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68b9      	ldr	r1, [r7, #8]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 fabc 	bl	8006f84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699a      	ldr	r2, [r3, #24]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	699a      	ldr	r2, [r3, #24]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6999      	ldr	r1, [r3, #24]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	021a      	lsls	r2, r3, #8
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	619a      	str	r2, [r3, #24]
      break;
 8006a40:	e084      	b.n	8006b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68b9      	ldr	r1, [r7, #8]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 fb25 	bl	8007098 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	69da      	ldr	r2, [r3, #28]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f042 0208 	orr.w	r2, r2, #8
 8006a5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	69da      	ldr	r2, [r3, #28]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f022 0204 	bic.w	r2, r2, #4
 8006a6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	69d9      	ldr	r1, [r3, #28]
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	691a      	ldr	r2, [r3, #16]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	61da      	str	r2, [r3, #28]
      break;
 8006a80:	e064      	b.n	8006b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68b9      	ldr	r1, [r7, #8]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 fb8d 	bl	80071a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69da      	ldr	r2, [r3, #28]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	69da      	ldr	r2, [r3, #28]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	69d9      	ldr	r1, [r3, #28]
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	021a      	lsls	r2, r3, #8
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	61da      	str	r2, [r3, #28]
      break;
 8006ac2:	e043      	b.n	8006b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68b9      	ldr	r1, [r7, #8]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f000 fbd6 	bl	800727c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f042 0208 	orr.w	r2, r2, #8
 8006ade:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 0204 	bic.w	r2, r2, #4
 8006aee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	691a      	ldr	r2, [r3, #16]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b02:	e023      	b.n	8006b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68b9      	ldr	r1, [r7, #8]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 fc1a 	bl	8007344 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	021a      	lsls	r2, r3, #8
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	430a      	orrs	r2, r1
 8006b42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b44:	e002      	b.n	8006b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	75fb      	strb	r3, [r7, #23]
      break;
 8006b4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop

08006b60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d101      	bne.n	8006b7c <HAL_TIM_ConfigClockSource+0x1c>
 8006b78:	2302      	movs	r3, #2
 8006b7a:	e0b6      	b.n	8006cea <HAL_TIM_ConfigClockSource+0x18a>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ba6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bb8:	d03e      	beq.n	8006c38 <HAL_TIM_ConfigClockSource+0xd8>
 8006bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bbe:	f200 8087 	bhi.w	8006cd0 <HAL_TIM_ConfigClockSource+0x170>
 8006bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc6:	f000 8086 	beq.w	8006cd6 <HAL_TIM_ConfigClockSource+0x176>
 8006bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bce:	d87f      	bhi.n	8006cd0 <HAL_TIM_ConfigClockSource+0x170>
 8006bd0:	2b70      	cmp	r3, #112	; 0x70
 8006bd2:	d01a      	beq.n	8006c0a <HAL_TIM_ConfigClockSource+0xaa>
 8006bd4:	2b70      	cmp	r3, #112	; 0x70
 8006bd6:	d87b      	bhi.n	8006cd0 <HAL_TIM_ConfigClockSource+0x170>
 8006bd8:	2b60      	cmp	r3, #96	; 0x60
 8006bda:	d050      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0x11e>
 8006bdc:	2b60      	cmp	r3, #96	; 0x60
 8006bde:	d877      	bhi.n	8006cd0 <HAL_TIM_ConfigClockSource+0x170>
 8006be0:	2b50      	cmp	r3, #80	; 0x50
 8006be2:	d03c      	beq.n	8006c5e <HAL_TIM_ConfigClockSource+0xfe>
 8006be4:	2b50      	cmp	r3, #80	; 0x50
 8006be6:	d873      	bhi.n	8006cd0 <HAL_TIM_ConfigClockSource+0x170>
 8006be8:	2b40      	cmp	r3, #64	; 0x40
 8006bea:	d058      	beq.n	8006c9e <HAL_TIM_ConfigClockSource+0x13e>
 8006bec:	2b40      	cmp	r3, #64	; 0x40
 8006bee:	d86f      	bhi.n	8006cd0 <HAL_TIM_ConfigClockSource+0x170>
 8006bf0:	2b30      	cmp	r3, #48	; 0x30
 8006bf2:	d064      	beq.n	8006cbe <HAL_TIM_ConfigClockSource+0x15e>
 8006bf4:	2b30      	cmp	r3, #48	; 0x30
 8006bf6:	d86b      	bhi.n	8006cd0 <HAL_TIM_ConfigClockSource+0x170>
 8006bf8:	2b20      	cmp	r3, #32
 8006bfa:	d060      	beq.n	8006cbe <HAL_TIM_ConfigClockSource+0x15e>
 8006bfc:	2b20      	cmp	r3, #32
 8006bfe:	d867      	bhi.n	8006cd0 <HAL_TIM_ConfigClockSource+0x170>
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d05c      	beq.n	8006cbe <HAL_TIM_ConfigClockSource+0x15e>
 8006c04:	2b10      	cmp	r3, #16
 8006c06:	d05a      	beq.n	8006cbe <HAL_TIM_ConfigClockSource+0x15e>
 8006c08:	e062      	b.n	8006cd0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6818      	ldr	r0, [r3, #0]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	6899      	ldr	r1, [r3, #8]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f000 fc73 	bl	8007504 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	609a      	str	r2, [r3, #8]
      break;
 8006c36:	e04f      	b.n	8006cd8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6818      	ldr	r0, [r3, #0]
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	6899      	ldr	r1, [r3, #8]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	f000 fc5c 	bl	8007504 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689a      	ldr	r2, [r3, #8]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c5a:	609a      	str	r2, [r3, #8]
      break;
 8006c5c:	e03c      	b.n	8006cd8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6818      	ldr	r0, [r3, #0]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	6859      	ldr	r1, [r3, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f000 fbd0 	bl	8007410 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2150      	movs	r1, #80	; 0x50
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 fc29 	bl	80074ce <TIM_ITRx_SetConfig>
      break;
 8006c7c:	e02c      	b.n	8006cd8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6818      	ldr	r0, [r3, #0]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	6859      	ldr	r1, [r3, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f000 fbef 	bl	800746e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2160      	movs	r1, #96	; 0x60
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 fc19 	bl	80074ce <TIM_ITRx_SetConfig>
      break;
 8006c9c:	e01c      	b.n	8006cd8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6818      	ldr	r0, [r3, #0]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	6859      	ldr	r1, [r3, #4]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	461a      	mov	r2, r3
 8006cac:	f000 fbb0 	bl	8007410 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2140      	movs	r1, #64	; 0x40
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 fc09 	bl	80074ce <TIM_ITRx_SetConfig>
      break;
 8006cbc:	e00c      	b.n	8006cd8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	4610      	mov	r0, r2
 8006cca:	f000 fc00 	bl	80074ce <TIM_ITRx_SetConfig>
      break;
 8006cce:	e003      	b.n	8006cd8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006cd4:	e000      	b.n	8006cd8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006cd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cfa:	bf00      	nop
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b083      	sub	sp, #12
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d0e:	bf00      	nop
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d22:	bf00      	nop
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d36:	bf00      	nop
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
	...

08006d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a3c      	ldr	r2, [pc, #240]	; (8006e48 <TIM_Base_SetConfig+0x104>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d00f      	beq.n	8006d7c <TIM_Base_SetConfig+0x38>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d62:	d00b      	beq.n	8006d7c <TIM_Base_SetConfig+0x38>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a39      	ldr	r2, [pc, #228]	; (8006e4c <TIM_Base_SetConfig+0x108>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d007      	beq.n	8006d7c <TIM_Base_SetConfig+0x38>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a38      	ldr	r2, [pc, #224]	; (8006e50 <TIM_Base_SetConfig+0x10c>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d003      	beq.n	8006d7c <TIM_Base_SetConfig+0x38>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a37      	ldr	r2, [pc, #220]	; (8006e54 <TIM_Base_SetConfig+0x110>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d108      	bne.n	8006d8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a2d      	ldr	r2, [pc, #180]	; (8006e48 <TIM_Base_SetConfig+0x104>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d01b      	beq.n	8006dce <TIM_Base_SetConfig+0x8a>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d9c:	d017      	beq.n	8006dce <TIM_Base_SetConfig+0x8a>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a2a      	ldr	r2, [pc, #168]	; (8006e4c <TIM_Base_SetConfig+0x108>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d013      	beq.n	8006dce <TIM_Base_SetConfig+0x8a>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a29      	ldr	r2, [pc, #164]	; (8006e50 <TIM_Base_SetConfig+0x10c>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d00f      	beq.n	8006dce <TIM_Base_SetConfig+0x8a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a28      	ldr	r2, [pc, #160]	; (8006e54 <TIM_Base_SetConfig+0x110>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d00b      	beq.n	8006dce <TIM_Base_SetConfig+0x8a>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a27      	ldr	r2, [pc, #156]	; (8006e58 <TIM_Base_SetConfig+0x114>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d007      	beq.n	8006dce <TIM_Base_SetConfig+0x8a>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a26      	ldr	r2, [pc, #152]	; (8006e5c <TIM_Base_SetConfig+0x118>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d003      	beq.n	8006dce <TIM_Base_SetConfig+0x8a>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a25      	ldr	r2, [pc, #148]	; (8006e60 <TIM_Base_SetConfig+0x11c>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d108      	bne.n	8006de0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a10      	ldr	r2, [pc, #64]	; (8006e48 <TIM_Base_SetConfig+0x104>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00f      	beq.n	8006e2c <TIM_Base_SetConfig+0xe8>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a11      	ldr	r2, [pc, #68]	; (8006e54 <TIM_Base_SetConfig+0x110>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d00b      	beq.n	8006e2c <TIM_Base_SetConfig+0xe8>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a10      	ldr	r2, [pc, #64]	; (8006e58 <TIM_Base_SetConfig+0x114>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d007      	beq.n	8006e2c <TIM_Base_SetConfig+0xe8>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a0f      	ldr	r2, [pc, #60]	; (8006e5c <TIM_Base_SetConfig+0x118>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d003      	beq.n	8006e2c <TIM_Base_SetConfig+0xe8>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a0e      	ldr	r2, [pc, #56]	; (8006e60 <TIM_Base_SetConfig+0x11c>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d103      	bne.n	8006e34 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	691a      	ldr	r2, [r3, #16]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	615a      	str	r2, [r3, #20]
}
 8006e3a:	bf00      	nop
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	40012c00 	.word	0x40012c00
 8006e4c:	40000400 	.word	0x40000400
 8006e50:	40000800 	.word	0x40000800
 8006e54:	40013400 	.word	0x40013400
 8006e58:	40014000 	.word	0x40014000
 8006e5c:	40014400 	.word	0x40014400
 8006e60:	40014800 	.word	0x40014800

08006e64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b087      	sub	sp, #28
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	f023 0201 	bic.w	r2, r3, #1
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 0303 	bic.w	r3, r3, #3
 8006e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f023 0302 	bic.w	r3, r3, #2
 8006eb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a2c      	ldr	r2, [pc, #176]	; (8006f70 <TIM_OC1_SetConfig+0x10c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d00f      	beq.n	8006ee4 <TIM_OC1_SetConfig+0x80>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a2b      	ldr	r2, [pc, #172]	; (8006f74 <TIM_OC1_SetConfig+0x110>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d00b      	beq.n	8006ee4 <TIM_OC1_SetConfig+0x80>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a2a      	ldr	r2, [pc, #168]	; (8006f78 <TIM_OC1_SetConfig+0x114>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d007      	beq.n	8006ee4 <TIM_OC1_SetConfig+0x80>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a29      	ldr	r2, [pc, #164]	; (8006f7c <TIM_OC1_SetConfig+0x118>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d003      	beq.n	8006ee4 <TIM_OC1_SetConfig+0x80>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a28      	ldr	r2, [pc, #160]	; (8006f80 <TIM_OC1_SetConfig+0x11c>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d10c      	bne.n	8006efe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f023 0308 	bic.w	r3, r3, #8
 8006eea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	697a      	ldr	r2, [r7, #20]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f023 0304 	bic.w	r3, r3, #4
 8006efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a1b      	ldr	r2, [pc, #108]	; (8006f70 <TIM_OC1_SetConfig+0x10c>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d00f      	beq.n	8006f26 <TIM_OC1_SetConfig+0xc2>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a1a      	ldr	r2, [pc, #104]	; (8006f74 <TIM_OC1_SetConfig+0x110>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d00b      	beq.n	8006f26 <TIM_OC1_SetConfig+0xc2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a19      	ldr	r2, [pc, #100]	; (8006f78 <TIM_OC1_SetConfig+0x114>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d007      	beq.n	8006f26 <TIM_OC1_SetConfig+0xc2>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a18      	ldr	r2, [pc, #96]	; (8006f7c <TIM_OC1_SetConfig+0x118>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d003      	beq.n	8006f26 <TIM_OC1_SetConfig+0xc2>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a17      	ldr	r2, [pc, #92]	; (8006f80 <TIM_OC1_SetConfig+0x11c>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d111      	bne.n	8006f4a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	621a      	str	r2, [r3, #32]
}
 8006f64:	bf00      	nop
 8006f66:	371c      	adds	r7, #28
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	40012c00 	.word	0x40012c00
 8006f74:	40013400 	.word	0x40013400
 8006f78:	40014000 	.word	0x40014000
 8006f7c:	40014400 	.word	0x40014400
 8006f80:	40014800 	.word	0x40014800

08006f84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	f023 0210 	bic.w	r2, r3, #16
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	021b      	lsls	r3, r3, #8
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f023 0320 	bic.w	r3, r3, #32
 8006fd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	011b      	lsls	r3, r3, #4
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a28      	ldr	r2, [pc, #160]	; (8007084 <TIM_OC2_SetConfig+0x100>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d003      	beq.n	8006ff0 <TIM_OC2_SetConfig+0x6c>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a27      	ldr	r2, [pc, #156]	; (8007088 <TIM_OC2_SetConfig+0x104>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d10d      	bne.n	800700c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	011b      	lsls	r3, r3, #4
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	4313      	orrs	r3, r2
 8007002:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800700a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a1d      	ldr	r2, [pc, #116]	; (8007084 <TIM_OC2_SetConfig+0x100>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d00f      	beq.n	8007034 <TIM_OC2_SetConfig+0xb0>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a1c      	ldr	r2, [pc, #112]	; (8007088 <TIM_OC2_SetConfig+0x104>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d00b      	beq.n	8007034 <TIM_OC2_SetConfig+0xb0>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a1b      	ldr	r2, [pc, #108]	; (800708c <TIM_OC2_SetConfig+0x108>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d007      	beq.n	8007034 <TIM_OC2_SetConfig+0xb0>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a1a      	ldr	r2, [pc, #104]	; (8007090 <TIM_OC2_SetConfig+0x10c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d003      	beq.n	8007034 <TIM_OC2_SetConfig+0xb0>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a19      	ldr	r2, [pc, #100]	; (8007094 <TIM_OC2_SetConfig+0x110>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d113      	bne.n	800705c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800703a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007042:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	4313      	orrs	r3, r2
 800704e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	4313      	orrs	r3, r2
 800705a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	621a      	str	r2, [r3, #32]
}
 8007076:	bf00      	nop
 8007078:	371c      	adds	r7, #28
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	40012c00 	.word	0x40012c00
 8007088:	40013400 	.word	0x40013400
 800708c:	40014000 	.word	0x40014000
 8007090:	40014400 	.word	0x40014400
 8007094:	40014800 	.word	0x40014800

08007098 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007098:	b480      	push	{r7}
 800709a:	b087      	sub	sp, #28
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	69db      	ldr	r3, [r3, #28]
 80070be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f023 0303 	bic.w	r3, r3, #3
 80070d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	4313      	orrs	r3, r2
 80070dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	021b      	lsls	r3, r3, #8
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a27      	ldr	r2, [pc, #156]	; (8007194 <TIM_OC3_SetConfig+0xfc>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d003      	beq.n	8007102 <TIM_OC3_SetConfig+0x6a>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a26      	ldr	r2, [pc, #152]	; (8007198 <TIM_OC3_SetConfig+0x100>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d10d      	bne.n	800711e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007108:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	021b      	lsls	r3, r3, #8
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	4313      	orrs	r3, r2
 8007114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800711c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a1c      	ldr	r2, [pc, #112]	; (8007194 <TIM_OC3_SetConfig+0xfc>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d00f      	beq.n	8007146 <TIM_OC3_SetConfig+0xae>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a1b      	ldr	r2, [pc, #108]	; (8007198 <TIM_OC3_SetConfig+0x100>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d00b      	beq.n	8007146 <TIM_OC3_SetConfig+0xae>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a1a      	ldr	r2, [pc, #104]	; (800719c <TIM_OC3_SetConfig+0x104>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d007      	beq.n	8007146 <TIM_OC3_SetConfig+0xae>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a19      	ldr	r2, [pc, #100]	; (80071a0 <TIM_OC3_SetConfig+0x108>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d003      	beq.n	8007146 <TIM_OC3_SetConfig+0xae>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a18      	ldr	r2, [pc, #96]	; (80071a4 <TIM_OC3_SetConfig+0x10c>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d113      	bne.n	800716e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800714c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	011b      	lsls	r3, r3, #4
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	4313      	orrs	r3, r2
 8007160:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	011b      	lsls	r3, r3, #4
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	4313      	orrs	r3, r2
 800716c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	685a      	ldr	r2, [r3, #4]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	621a      	str	r2, [r3, #32]
}
 8007188:	bf00      	nop
 800718a:	371c      	adds	r7, #28
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	40012c00 	.word	0x40012c00
 8007198:	40013400 	.word	0x40013400
 800719c:	40014000 	.word	0x40014000
 80071a0:	40014400 	.word	0x40014400
 80071a4:	40014800 	.word	0x40014800

080071a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b087      	sub	sp, #28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	021b      	lsls	r3, r3, #8
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	031b      	lsls	r3, r3, #12
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	4313      	orrs	r3, r2
 8007202:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a18      	ldr	r2, [pc, #96]	; (8007268 <TIM_OC4_SetConfig+0xc0>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d00f      	beq.n	800722c <TIM_OC4_SetConfig+0x84>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a17      	ldr	r2, [pc, #92]	; (800726c <TIM_OC4_SetConfig+0xc4>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d00b      	beq.n	800722c <TIM_OC4_SetConfig+0x84>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a16      	ldr	r2, [pc, #88]	; (8007270 <TIM_OC4_SetConfig+0xc8>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d007      	beq.n	800722c <TIM_OC4_SetConfig+0x84>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a15      	ldr	r2, [pc, #84]	; (8007274 <TIM_OC4_SetConfig+0xcc>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d003      	beq.n	800722c <TIM_OC4_SetConfig+0x84>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a14      	ldr	r2, [pc, #80]	; (8007278 <TIM_OC4_SetConfig+0xd0>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d109      	bne.n	8007240 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007232:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	695b      	ldr	r3, [r3, #20]
 8007238:	019b      	lsls	r3, r3, #6
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	4313      	orrs	r3, r2
 800723e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	621a      	str	r2, [r3, #32]
}
 800725a:	bf00      	nop
 800725c:	371c      	adds	r7, #28
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	40012c00 	.word	0x40012c00
 800726c:	40013400 	.word	0x40013400
 8007270:	40014000 	.word	0x40014000
 8007274:	40014400 	.word	0x40014400
 8007278:	40014800 	.word	0x40014800

0800727c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800727c:	b480      	push	{r7}
 800727e:	b087      	sub	sp, #28
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80072c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	041b      	lsls	r3, r3, #16
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a17      	ldr	r2, [pc, #92]	; (8007330 <TIM_OC5_SetConfig+0xb4>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d00f      	beq.n	80072f6 <TIM_OC5_SetConfig+0x7a>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a16      	ldr	r2, [pc, #88]	; (8007334 <TIM_OC5_SetConfig+0xb8>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d00b      	beq.n	80072f6 <TIM_OC5_SetConfig+0x7a>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a15      	ldr	r2, [pc, #84]	; (8007338 <TIM_OC5_SetConfig+0xbc>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d007      	beq.n	80072f6 <TIM_OC5_SetConfig+0x7a>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a14      	ldr	r2, [pc, #80]	; (800733c <TIM_OC5_SetConfig+0xc0>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d003      	beq.n	80072f6 <TIM_OC5_SetConfig+0x7a>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a13      	ldr	r2, [pc, #76]	; (8007340 <TIM_OC5_SetConfig+0xc4>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d109      	bne.n	800730a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	695b      	ldr	r3, [r3, #20]
 8007302:	021b      	lsls	r3, r3, #8
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	4313      	orrs	r3, r2
 8007308:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	621a      	str	r2, [r3, #32]
}
 8007324:	bf00      	nop
 8007326:	371c      	adds	r7, #28
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr
 8007330:	40012c00 	.word	0x40012c00
 8007334:	40013400 	.word	0x40013400
 8007338:	40014000 	.word	0x40014000
 800733c:	40014400 	.word	0x40014400
 8007340:	40014800 	.word	0x40014800

08007344 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007344:	b480      	push	{r7}
 8007346:	b087      	sub	sp, #28
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	021b      	lsls	r3, r3, #8
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	4313      	orrs	r3, r2
 8007382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800738a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	051b      	lsls	r3, r3, #20
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	4313      	orrs	r3, r2
 8007396:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a18      	ldr	r2, [pc, #96]	; (80073fc <TIM_OC6_SetConfig+0xb8>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d00f      	beq.n	80073c0 <TIM_OC6_SetConfig+0x7c>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a17      	ldr	r2, [pc, #92]	; (8007400 <TIM_OC6_SetConfig+0xbc>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d00b      	beq.n	80073c0 <TIM_OC6_SetConfig+0x7c>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a16      	ldr	r2, [pc, #88]	; (8007404 <TIM_OC6_SetConfig+0xc0>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d007      	beq.n	80073c0 <TIM_OC6_SetConfig+0x7c>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a15      	ldr	r2, [pc, #84]	; (8007408 <TIM_OC6_SetConfig+0xc4>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d003      	beq.n	80073c0 <TIM_OC6_SetConfig+0x7c>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a14      	ldr	r2, [pc, #80]	; (800740c <TIM_OC6_SetConfig+0xc8>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d109      	bne.n	80073d4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	029b      	lsls	r3, r3, #10
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	693a      	ldr	r2, [r7, #16]
 80073ec:	621a      	str	r2, [r3, #32]
}
 80073ee:	bf00      	nop
 80073f0:	371c      	adds	r7, #28
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	40012c00 	.word	0x40012c00
 8007400:	40013400 	.word	0x40013400
 8007404:	40014000 	.word	0x40014000
 8007408:	40014400 	.word	0x40014400
 800740c:	40014800 	.word	0x40014800

08007410 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007410:	b480      	push	{r7}
 8007412:	b087      	sub	sp, #28
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6a1b      	ldr	r3, [r3, #32]
 8007420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	f023 0201 	bic.w	r2, r3, #1
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800743a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	011b      	lsls	r3, r3, #4
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	4313      	orrs	r3, r2
 8007444:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	f023 030a 	bic.w	r3, r3, #10
 800744c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	4313      	orrs	r3, r2
 8007454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	621a      	str	r2, [r3, #32]
}
 8007462:	bf00      	nop
 8007464:	371c      	adds	r7, #28
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800746e:	b480      	push	{r7}
 8007470:	b087      	sub	sp, #28
 8007472:	af00      	add	r7, sp, #0
 8007474:	60f8      	str	r0, [r7, #12]
 8007476:	60b9      	str	r1, [r7, #8]
 8007478:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	f023 0210 	bic.w	r2, r3, #16
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6a1b      	ldr	r3, [r3, #32]
 8007490:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007498:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	031b      	lsls	r3, r3, #12
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	011b      	lsls	r3, r3, #4
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	697a      	ldr	r2, [r7, #20]
 80074ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	621a      	str	r2, [r3, #32]
}
 80074c2:	bf00      	nop
 80074c4:	371c      	adds	r7, #28
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b085      	sub	sp, #20
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
 80074d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074e6:	683a      	ldr	r2, [r7, #0]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	f043 0307 	orr.w	r3, r3, #7
 80074f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	609a      	str	r2, [r3, #8]
}
 80074f8:	bf00      	nop
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007504:	b480      	push	{r7}
 8007506:	b087      	sub	sp, #28
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
 8007510:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800751e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	021a      	lsls	r2, r3, #8
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	431a      	orrs	r2, r3
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	4313      	orrs	r3, r2
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	4313      	orrs	r3, r2
 8007530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	609a      	str	r2, [r3, #8]
}
 8007538:	bf00      	nop
 800753a:	371c      	adds	r7, #28
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007544:	b480      	push	{r7}
 8007546:	b087      	sub	sp, #28
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	f003 031f 	and.w	r3, r3, #31
 8007556:	2201      	movs	r2, #1
 8007558:	fa02 f303 	lsl.w	r3, r2, r3
 800755c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6a1a      	ldr	r2, [r3, #32]
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	43db      	mvns	r3, r3
 8007566:	401a      	ands	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6a1a      	ldr	r2, [r3, #32]
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	f003 031f 	and.w	r3, r3, #31
 8007576:	6879      	ldr	r1, [r7, #4]
 8007578:	fa01 f303 	lsl.w	r3, r1, r3
 800757c:	431a      	orrs	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	621a      	str	r2, [r3, #32]
}
 8007582:	bf00      	nop
 8007584:	371c      	adds	r7, #28
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
	...

08007590 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d101      	bne.n	80075a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075a4:	2302      	movs	r3, #2
 80075a6:	e063      	b.n	8007670 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a2b      	ldr	r2, [pc, #172]	; (800767c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d004      	beq.n	80075dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a2a      	ldr	r2, [pc, #168]	; (8007680 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d108      	bne.n	80075ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80075e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a1b      	ldr	r2, [pc, #108]	; (800767c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d018      	beq.n	8007644 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800761a:	d013      	beq.n	8007644 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a18      	ldr	r2, [pc, #96]	; (8007684 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d00e      	beq.n	8007644 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a17      	ldr	r2, [pc, #92]	; (8007688 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d009      	beq.n	8007644 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a12      	ldr	r2, [pc, #72]	; (8007680 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d004      	beq.n	8007644 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a13      	ldr	r2, [pc, #76]	; (800768c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d10c      	bne.n	800765e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800764a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	4313      	orrs	r3, r2
 8007654:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	40012c00 	.word	0x40012c00
 8007680:	40013400 	.word	0x40013400
 8007684:	40000400 	.word	0x40000400
 8007688:	40000800 	.word	0x40000800
 800768c:	40014000 	.word	0x40014000

08007690 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d101      	bne.n	80076de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e040      	b.n	8007760 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d106      	bne.n	80076f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7fa fc30 	bl	8001f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2224      	movs	r2, #36	; 0x24
 80076f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f022 0201 	bic.w	r2, r2, #1
 8007708:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fbd4 	bl	8007eb8 <UART_SetConfig>
 8007710:	4603      	mov	r3, r0
 8007712:	2b01      	cmp	r3, #1
 8007714:	d101      	bne.n	800771a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e022      	b.n	8007760 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771e:	2b00      	cmp	r3, #0
 8007720:	d002      	beq.n	8007728 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fd9c 	bl	8008260 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007736:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689a      	ldr	r2, [r3, #8]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007746:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f042 0201 	orr.w	r2, r2, #1
 8007756:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fe23 	bl	80083a4 <UART_CheckIdleState>
 800775e:	4603      	mov	r3, r0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007768:	b480      	push	{r7}
 800776a:	b08b      	sub	sp, #44	; 0x2c
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	4613      	mov	r3, r2
 8007774:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800777a:	2b20      	cmp	r3, #32
 800777c:	d147      	bne.n	800780e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d002      	beq.n	800778a <HAL_UART_Transmit_IT+0x22>
 8007784:	88fb      	ldrh	r3, [r7, #6]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d101      	bne.n	800778e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e040      	b.n	8007810 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	88fa      	ldrh	r2, [r7, #6]
 8007798:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	88fa      	ldrh	r2, [r7, #6]
 80077a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2221      	movs	r2, #33	; 0x21
 80077b6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c0:	d107      	bne.n	80077d2 <HAL_UART_Transmit_IT+0x6a>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d103      	bne.n	80077d2 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	4a13      	ldr	r2, [pc, #76]	; (800781c <HAL_UART_Transmit_IT+0xb4>)
 80077ce:	66da      	str	r2, [r3, #108]	; 0x6c
 80077d0:	e002      	b.n	80077d8 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	4a12      	ldr	r2, [pc, #72]	; (8007820 <HAL_UART_Transmit_IT+0xb8>)
 80077d6:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	e853 3f00 	ldrex	r3, [r3]
 80077e4:	613b      	str	r3, [r7, #16]
   return(result);
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ec:	627b      	str	r3, [r7, #36]	; 0x24
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	461a      	mov	r2, r3
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	623b      	str	r3, [r7, #32]
 80077f8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fa:	69f9      	ldr	r1, [r7, #28]
 80077fc:	6a3a      	ldr	r2, [r7, #32]
 80077fe:	e841 2300 	strex	r3, r2, [r1]
 8007802:	61bb      	str	r3, [r7, #24]
   return(result);
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1e6      	bne.n	80077d8 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800780a:	2300      	movs	r3, #0
 800780c:	e000      	b.n	8007810 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800780e:	2302      	movs	r3, #2
  }
}
 8007810:	4618      	mov	r0, r3
 8007812:	372c      	adds	r7, #44	; 0x2c
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	080088d9 	.word	0x080088d9
 8007820:	08008821 	.word	0x08008821

08007824 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b08a      	sub	sp, #40	; 0x28
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	4613      	mov	r3, r2
 8007830:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007838:	2b20      	cmp	r3, #32
 800783a:	d132      	bne.n	80078a2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d002      	beq.n	8007848 <HAL_UART_Receive_IT+0x24>
 8007842:	88fb      	ldrh	r3, [r7, #6]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e02b      	b.n	80078a4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d018      	beq.n	8007892 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	e853 3f00 	ldrex	r3, [r3]
 800786c:	613b      	str	r3, [r7, #16]
   return(result);
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007874:	627b      	str	r3, [r7, #36]	; 0x24
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	461a      	mov	r2, r3
 800787c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787e:	623b      	str	r3, [r7, #32]
 8007880:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007882:	69f9      	ldr	r1, [r7, #28]
 8007884:	6a3a      	ldr	r2, [r7, #32]
 8007886:	e841 2300 	strex	r3, r2, [r1]
 800788a:	61bb      	str	r3, [r7, #24]
   return(result);
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1e6      	bne.n	8007860 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007892:	88fb      	ldrh	r3, [r7, #6]
 8007894:	461a      	mov	r2, r3
 8007896:	68b9      	ldr	r1, [r7, #8]
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 fe93 	bl	80085c4 <UART_Start_Receive_IT>
 800789e:	4603      	mov	r3, r0
 80078a0:	e000      	b.n	80078a4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80078a2:	2302      	movs	r3, #2
  }
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3728      	adds	r7, #40	; 0x28
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b0ba      	sub	sp, #232	; 0xe8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	69db      	ldr	r3, [r3, #28]
 80078ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80078d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80078d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80078da:	4013      	ands	r3, r2
 80078dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80078e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d115      	bne.n	8007914 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80078e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ec:	f003 0320 	and.w	r3, r3, #32
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00f      	beq.n	8007914 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80078f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078f8:	f003 0320 	and.w	r3, r3, #32
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d009      	beq.n	8007914 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 82ab 	beq.w	8007e60 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	4798      	blx	r3
      }
      return;
 8007912:	e2a5      	b.n	8007e60 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007914:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 8117 	beq.w	8007b4c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800791e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	2b00      	cmp	r3, #0
 8007928:	d106      	bne.n	8007938 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800792a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800792e:	4b85      	ldr	r3, [pc, #532]	; (8007b44 <HAL_UART_IRQHandler+0x298>)
 8007930:	4013      	ands	r3, r2
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 810a 	beq.w	8007b4c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800793c:	f003 0301 	and.w	r3, r3, #1
 8007940:	2b00      	cmp	r3, #0
 8007942:	d011      	beq.n	8007968 <HAL_UART_IRQHandler+0xbc>
 8007944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00b      	beq.n	8007968 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2201      	movs	r2, #1
 8007956:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800795e:	f043 0201 	orr.w	r2, r3, #1
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800796c:	f003 0302 	and.w	r3, r3, #2
 8007970:	2b00      	cmp	r3, #0
 8007972:	d011      	beq.n	8007998 <HAL_UART_IRQHandler+0xec>
 8007974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007978:	f003 0301 	and.w	r3, r3, #1
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00b      	beq.n	8007998 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2202      	movs	r2, #2
 8007986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800798e:	f043 0204 	orr.w	r2, r3, #4
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800799c:	f003 0304 	and.w	r3, r3, #4
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d011      	beq.n	80079c8 <HAL_UART_IRQHandler+0x11c>
 80079a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00b      	beq.n	80079c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2204      	movs	r2, #4
 80079b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079be:	f043 0202 	orr.w	r2, r3, #2
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80079c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079cc:	f003 0308 	and.w	r3, r3, #8
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d017      	beq.n	8007a04 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079d8:	f003 0320 	and.w	r3, r3, #32
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d105      	bne.n	80079ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80079e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00b      	beq.n	8007a04 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2208      	movs	r2, #8
 80079f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079fa:	f043 0208 	orr.w	r2, r3, #8
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d012      	beq.n	8007a36 <HAL_UART_IRQHandler+0x18a>
 8007a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00c      	beq.n	8007a36 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a2c:	f043 0220 	orr.w	r2, r3, #32
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f000 8211 	beq.w	8007e64 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a46:	f003 0320 	and.w	r3, r3, #32
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00d      	beq.n	8007a6a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a52:	f003 0320 	and.w	r3, r3, #32
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d007      	beq.n	8007a6a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d003      	beq.n	8007a6a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a7e:	2b40      	cmp	r3, #64	; 0x40
 8007a80:	d005      	beq.n	8007a8e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a86:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d04f      	beq.n	8007b2e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fe4c 	bl	800872c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a9e:	2b40      	cmp	r3, #64	; 0x40
 8007aa0:	d141      	bne.n	8007b26 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ab0:	e853 3f00 	ldrex	r3, [r3]
 8007ab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ab8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ac0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3308      	adds	r3, #8
 8007aca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007ace:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007ad2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007ada:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007ade:	e841 2300 	strex	r3, r2, [r1]
 8007ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007ae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1d9      	bne.n	8007aa2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d013      	beq.n	8007b1e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007afa:	4a13      	ldr	r2, [pc, #76]	; (8007b48 <HAL_UART_IRQHandler+0x29c>)
 8007afc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7fc fb0e 	bl	8004124 <HAL_DMA_Abort_IT>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d017      	beq.n	8007b3e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007b18:	4610      	mov	r0, r2
 8007b1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b1c:	e00f      	b.n	8007b3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f9b4 	bl	8007e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b24:	e00b      	b.n	8007b3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f9b0 	bl	8007e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b2c:	e007      	b.n	8007b3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f9ac 	bl	8007e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007b3c:	e192      	b.n	8007e64 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b3e:	bf00      	nop
    return;
 8007b40:	e190      	b.n	8007e64 <HAL_UART_IRQHandler+0x5b8>
 8007b42:	bf00      	nop
 8007b44:	04000120 	.word	0x04000120
 8007b48:	080087f5 	.word	0x080087f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	f040 814b 	bne.w	8007dec <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b5a:	f003 0310 	and.w	r3, r3, #16
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f000 8144 	beq.w	8007dec <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b68:	f003 0310 	and.w	r3, r3, #16
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 813d 	beq.w	8007dec <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2210      	movs	r2, #16
 8007b78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b84:	2b40      	cmp	r3, #64	; 0x40
 8007b86:	f040 80b5 	bne.w	8007cf4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b96:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f000 8164 	beq.w	8007e68 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007ba6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007baa:	429a      	cmp	r2, r3
 8007bac:	f080 815c 	bcs.w	8007e68 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	2b20      	cmp	r3, #32
 8007bc2:	f000 8086 	beq.w	8007cd2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007bd2:	e853 3f00 	ldrex	r3, [r3]
 8007bd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007bda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007be2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	461a      	mov	r2, r3
 8007bec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bf0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007bf4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007bfc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c00:	e841 2300 	strex	r3, r2, [r1]
 8007c04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1da      	bne.n	8007bc6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	3308      	adds	r3, #8
 8007c16:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c1a:	e853 3f00 	ldrex	r3, [r3]
 8007c1e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c22:	f023 0301 	bic.w	r3, r3, #1
 8007c26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	3308      	adds	r3, #8
 8007c30:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c34:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c38:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c40:	e841 2300 	strex	r3, r2, [r1]
 8007c44:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1e1      	bne.n	8007c10 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	3308      	adds	r3, #8
 8007c52:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c56:	e853 3f00 	ldrex	r3, [r3]
 8007c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3308      	adds	r3, #8
 8007c6c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007c70:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c74:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007c76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c78:	e841 2300 	strex	r3, r2, [r1]
 8007c7c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007c7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1e3      	bne.n	8007c4c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2220      	movs	r2, #32
 8007c88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c9a:	e853 3f00 	ldrex	r3, [r3]
 8007c9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ca2:	f023 0310 	bic.w	r3, r3, #16
 8007ca6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cb6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cbc:	e841 2300 	strex	r3, r2, [r1]
 8007cc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1e4      	bne.n	8007c92 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7fc f9f0 	bl	80040b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 f8d7 	bl	8007ea0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cf2:	e0b9      	b.n	8007e68 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f000 80ab 	beq.w	8007e6c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007d16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 80a6 	beq.w	8007e6c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d28:	e853 3f00 	ldrex	r3, [r3]
 8007d2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d42:	647b      	str	r3, [r7, #68]	; 0x44
 8007d44:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d4a:	e841 2300 	strex	r3, r2, [r1]
 8007d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1e4      	bne.n	8007d20 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3308      	adds	r3, #8
 8007d5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d60:	e853 3f00 	ldrex	r3, [r3]
 8007d64:	623b      	str	r3, [r7, #32]
   return(result);
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	f023 0301 	bic.w	r3, r3, #1
 8007d6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3308      	adds	r3, #8
 8007d76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007d7a:	633a      	str	r2, [r7, #48]	; 0x30
 8007d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d82:	e841 2300 	strex	r3, r2, [r1]
 8007d86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1e3      	bne.n	8007d56 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2220      	movs	r2, #32
 8007d92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	e853 3f00 	ldrex	r3, [r3]
 8007dae:	60fb      	str	r3, [r7, #12]
   return(result);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f023 0310 	bic.w	r3, r3, #16
 8007db6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007dc4:	61fb      	str	r3, [r7, #28]
 8007dc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc8:	69b9      	ldr	r1, [r7, #24]
 8007dca:	69fa      	ldr	r2, [r7, #28]
 8007dcc:	e841 2300 	strex	r3, r2, [r1]
 8007dd0:	617b      	str	r3, [r7, #20]
   return(result);
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1e4      	bne.n	8007da2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2202      	movs	r2, #2
 8007ddc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007dde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f85b 	bl	8007ea0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007dea:	e03f      	b.n	8007e6c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00e      	beq.n	8007e16 <HAL_UART_IRQHandler+0x56a>
 8007df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d008      	beq.n	8007e16 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007e0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 ff94 	bl	8008d3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e14:	e02d      	b.n	8007e72 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00e      	beq.n	8007e40 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d008      	beq.n	8007e40 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d01c      	beq.n	8007e70 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	4798      	blx	r3
    }
    return;
 8007e3e:	e017      	b.n	8007e70 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d012      	beq.n	8007e72 <HAL_UART_IRQHandler+0x5c6>
 8007e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00c      	beq.n	8007e72 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 fd9d 	bl	8008998 <UART_EndTransmit_IT>
    return;
 8007e5e:	e008      	b.n	8007e72 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007e60:	bf00      	nop
 8007e62:	e006      	b.n	8007e72 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007e64:	bf00      	nop
 8007e66:	e004      	b.n	8007e72 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007e68:	bf00      	nop
 8007e6a:	e002      	b.n	8007e72 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007e6c:	bf00      	nop
 8007e6e:	e000      	b.n	8007e72 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007e70:	bf00      	nop
  }

}
 8007e72:	37e8      	adds	r7, #232	; 0xe8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b088      	sub	sp, #32
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	689a      	ldr	r2, [r3, #8]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	431a      	orrs	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	695b      	ldr	r3, [r3, #20]
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	69db      	ldr	r3, [r3, #28]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007ee6:	f023 030c 	bic.w	r3, r3, #12
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	6812      	ldr	r2, [r2, #0]
 8007eee:	6979      	ldr	r1, [r7, #20]
 8007ef0:	430b      	orrs	r3, r1
 8007ef2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68da      	ldr	r2, [r3, #12]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a1b      	ldr	r3, [r3, #32]
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	430a      	orrs	r2, r1
 8007f2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4aa7      	ldr	r2, [pc, #668]	; (80081d0 <UART_SetConfig+0x318>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d120      	bne.n	8007f7a <UART_SetConfig+0xc2>
 8007f38:	4ba6      	ldr	r3, [pc, #664]	; (80081d4 <UART_SetConfig+0x31c>)
 8007f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3c:	f003 0303 	and.w	r3, r3, #3
 8007f40:	2b03      	cmp	r3, #3
 8007f42:	d817      	bhi.n	8007f74 <UART_SetConfig+0xbc>
 8007f44:	a201      	add	r2, pc, #4	; (adr r2, 8007f4c <UART_SetConfig+0x94>)
 8007f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4a:	bf00      	nop
 8007f4c:	08007f5d 	.word	0x08007f5d
 8007f50:	08007f69 	.word	0x08007f69
 8007f54:	08007f6f 	.word	0x08007f6f
 8007f58:	08007f63 	.word	0x08007f63
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	77fb      	strb	r3, [r7, #31]
 8007f60:	e0b5      	b.n	80080ce <UART_SetConfig+0x216>
 8007f62:	2302      	movs	r3, #2
 8007f64:	77fb      	strb	r3, [r7, #31]
 8007f66:	e0b2      	b.n	80080ce <UART_SetConfig+0x216>
 8007f68:	2304      	movs	r3, #4
 8007f6a:	77fb      	strb	r3, [r7, #31]
 8007f6c:	e0af      	b.n	80080ce <UART_SetConfig+0x216>
 8007f6e:	2308      	movs	r3, #8
 8007f70:	77fb      	strb	r3, [r7, #31]
 8007f72:	e0ac      	b.n	80080ce <UART_SetConfig+0x216>
 8007f74:	2310      	movs	r3, #16
 8007f76:	77fb      	strb	r3, [r7, #31]
 8007f78:	e0a9      	b.n	80080ce <UART_SetConfig+0x216>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a96      	ldr	r2, [pc, #600]	; (80081d8 <UART_SetConfig+0x320>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d124      	bne.n	8007fce <UART_SetConfig+0x116>
 8007f84:	4b93      	ldr	r3, [pc, #588]	; (80081d4 <UART_SetConfig+0x31c>)
 8007f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f90:	d011      	beq.n	8007fb6 <UART_SetConfig+0xfe>
 8007f92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f96:	d817      	bhi.n	8007fc8 <UART_SetConfig+0x110>
 8007f98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f9c:	d011      	beq.n	8007fc2 <UART_SetConfig+0x10a>
 8007f9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fa2:	d811      	bhi.n	8007fc8 <UART_SetConfig+0x110>
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d003      	beq.n	8007fb0 <UART_SetConfig+0xf8>
 8007fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fac:	d006      	beq.n	8007fbc <UART_SetConfig+0x104>
 8007fae:	e00b      	b.n	8007fc8 <UART_SetConfig+0x110>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	77fb      	strb	r3, [r7, #31]
 8007fb4:	e08b      	b.n	80080ce <UART_SetConfig+0x216>
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	77fb      	strb	r3, [r7, #31]
 8007fba:	e088      	b.n	80080ce <UART_SetConfig+0x216>
 8007fbc:	2304      	movs	r3, #4
 8007fbe:	77fb      	strb	r3, [r7, #31]
 8007fc0:	e085      	b.n	80080ce <UART_SetConfig+0x216>
 8007fc2:	2308      	movs	r3, #8
 8007fc4:	77fb      	strb	r3, [r7, #31]
 8007fc6:	e082      	b.n	80080ce <UART_SetConfig+0x216>
 8007fc8:	2310      	movs	r3, #16
 8007fca:	77fb      	strb	r3, [r7, #31]
 8007fcc:	e07f      	b.n	80080ce <UART_SetConfig+0x216>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a82      	ldr	r2, [pc, #520]	; (80081dc <UART_SetConfig+0x324>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d124      	bne.n	8008022 <UART_SetConfig+0x16a>
 8007fd8:	4b7e      	ldr	r3, [pc, #504]	; (80081d4 <UART_SetConfig+0x31c>)
 8007fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fdc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007fe0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007fe4:	d011      	beq.n	800800a <UART_SetConfig+0x152>
 8007fe6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007fea:	d817      	bhi.n	800801c <UART_SetConfig+0x164>
 8007fec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007ff0:	d011      	beq.n	8008016 <UART_SetConfig+0x15e>
 8007ff2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007ff6:	d811      	bhi.n	800801c <UART_SetConfig+0x164>
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d003      	beq.n	8008004 <UART_SetConfig+0x14c>
 8007ffc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008000:	d006      	beq.n	8008010 <UART_SetConfig+0x158>
 8008002:	e00b      	b.n	800801c <UART_SetConfig+0x164>
 8008004:	2300      	movs	r3, #0
 8008006:	77fb      	strb	r3, [r7, #31]
 8008008:	e061      	b.n	80080ce <UART_SetConfig+0x216>
 800800a:	2302      	movs	r3, #2
 800800c:	77fb      	strb	r3, [r7, #31]
 800800e:	e05e      	b.n	80080ce <UART_SetConfig+0x216>
 8008010:	2304      	movs	r3, #4
 8008012:	77fb      	strb	r3, [r7, #31]
 8008014:	e05b      	b.n	80080ce <UART_SetConfig+0x216>
 8008016:	2308      	movs	r3, #8
 8008018:	77fb      	strb	r3, [r7, #31]
 800801a:	e058      	b.n	80080ce <UART_SetConfig+0x216>
 800801c:	2310      	movs	r3, #16
 800801e:	77fb      	strb	r3, [r7, #31]
 8008020:	e055      	b.n	80080ce <UART_SetConfig+0x216>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a6e      	ldr	r2, [pc, #440]	; (80081e0 <UART_SetConfig+0x328>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d124      	bne.n	8008076 <UART_SetConfig+0x1be>
 800802c:	4b69      	ldr	r3, [pc, #420]	; (80081d4 <UART_SetConfig+0x31c>)
 800802e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008030:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008034:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008038:	d011      	beq.n	800805e <UART_SetConfig+0x1a6>
 800803a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800803e:	d817      	bhi.n	8008070 <UART_SetConfig+0x1b8>
 8008040:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008044:	d011      	beq.n	800806a <UART_SetConfig+0x1b2>
 8008046:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800804a:	d811      	bhi.n	8008070 <UART_SetConfig+0x1b8>
 800804c:	2b00      	cmp	r3, #0
 800804e:	d003      	beq.n	8008058 <UART_SetConfig+0x1a0>
 8008050:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008054:	d006      	beq.n	8008064 <UART_SetConfig+0x1ac>
 8008056:	e00b      	b.n	8008070 <UART_SetConfig+0x1b8>
 8008058:	2300      	movs	r3, #0
 800805a:	77fb      	strb	r3, [r7, #31]
 800805c:	e037      	b.n	80080ce <UART_SetConfig+0x216>
 800805e:	2302      	movs	r3, #2
 8008060:	77fb      	strb	r3, [r7, #31]
 8008062:	e034      	b.n	80080ce <UART_SetConfig+0x216>
 8008064:	2304      	movs	r3, #4
 8008066:	77fb      	strb	r3, [r7, #31]
 8008068:	e031      	b.n	80080ce <UART_SetConfig+0x216>
 800806a:	2308      	movs	r3, #8
 800806c:	77fb      	strb	r3, [r7, #31]
 800806e:	e02e      	b.n	80080ce <UART_SetConfig+0x216>
 8008070:	2310      	movs	r3, #16
 8008072:	77fb      	strb	r3, [r7, #31]
 8008074:	e02b      	b.n	80080ce <UART_SetConfig+0x216>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a5a      	ldr	r2, [pc, #360]	; (80081e4 <UART_SetConfig+0x32c>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d124      	bne.n	80080ca <UART_SetConfig+0x212>
 8008080:	4b54      	ldr	r3, [pc, #336]	; (80081d4 <UART_SetConfig+0x31c>)
 8008082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008084:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008088:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800808c:	d011      	beq.n	80080b2 <UART_SetConfig+0x1fa>
 800808e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008092:	d817      	bhi.n	80080c4 <UART_SetConfig+0x20c>
 8008094:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008098:	d011      	beq.n	80080be <UART_SetConfig+0x206>
 800809a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800809e:	d811      	bhi.n	80080c4 <UART_SetConfig+0x20c>
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d003      	beq.n	80080ac <UART_SetConfig+0x1f4>
 80080a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080a8:	d006      	beq.n	80080b8 <UART_SetConfig+0x200>
 80080aa:	e00b      	b.n	80080c4 <UART_SetConfig+0x20c>
 80080ac:	2300      	movs	r3, #0
 80080ae:	77fb      	strb	r3, [r7, #31]
 80080b0:	e00d      	b.n	80080ce <UART_SetConfig+0x216>
 80080b2:	2302      	movs	r3, #2
 80080b4:	77fb      	strb	r3, [r7, #31]
 80080b6:	e00a      	b.n	80080ce <UART_SetConfig+0x216>
 80080b8:	2304      	movs	r3, #4
 80080ba:	77fb      	strb	r3, [r7, #31]
 80080bc:	e007      	b.n	80080ce <UART_SetConfig+0x216>
 80080be:	2308      	movs	r3, #8
 80080c0:	77fb      	strb	r3, [r7, #31]
 80080c2:	e004      	b.n	80080ce <UART_SetConfig+0x216>
 80080c4:	2310      	movs	r3, #16
 80080c6:	77fb      	strb	r3, [r7, #31]
 80080c8:	e001      	b.n	80080ce <UART_SetConfig+0x216>
 80080ca:	2310      	movs	r3, #16
 80080cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080d6:	d15b      	bne.n	8008190 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80080d8:	7ffb      	ldrb	r3, [r7, #31]
 80080da:	2b08      	cmp	r3, #8
 80080dc:	d827      	bhi.n	800812e <UART_SetConfig+0x276>
 80080de:	a201      	add	r2, pc, #4	; (adr r2, 80080e4 <UART_SetConfig+0x22c>)
 80080e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e4:	08008109 	.word	0x08008109
 80080e8:	08008111 	.word	0x08008111
 80080ec:	08008119 	.word	0x08008119
 80080f0:	0800812f 	.word	0x0800812f
 80080f4:	0800811f 	.word	0x0800811f
 80080f8:	0800812f 	.word	0x0800812f
 80080fc:	0800812f 	.word	0x0800812f
 8008100:	0800812f 	.word	0x0800812f
 8008104:	08008127 	.word	0x08008127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008108:	f7fd fe34 	bl	8005d74 <HAL_RCC_GetPCLK1Freq>
 800810c:	61b8      	str	r0, [r7, #24]
        break;
 800810e:	e013      	b.n	8008138 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008110:	f7fd fe52 	bl	8005db8 <HAL_RCC_GetPCLK2Freq>
 8008114:	61b8      	str	r0, [r7, #24]
        break;
 8008116:	e00f      	b.n	8008138 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008118:	4b33      	ldr	r3, [pc, #204]	; (80081e8 <UART_SetConfig+0x330>)
 800811a:	61bb      	str	r3, [r7, #24]
        break;
 800811c:	e00c      	b.n	8008138 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800811e:	f7fd fdb3 	bl	8005c88 <HAL_RCC_GetSysClockFreq>
 8008122:	61b8      	str	r0, [r7, #24]
        break;
 8008124:	e008      	b.n	8008138 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800812a:	61bb      	str	r3, [r7, #24]
        break;
 800812c:	e004      	b.n	8008138 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800812e:	2300      	movs	r3, #0
 8008130:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	77bb      	strb	r3, [r7, #30]
        break;
 8008136:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	2b00      	cmp	r3, #0
 800813c:	f000 8082 	beq.w	8008244 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	005a      	lsls	r2, r3, #1
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	085b      	lsrs	r3, r3, #1
 800814a:	441a      	add	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	fbb2 f3f3 	udiv	r3, r2, r3
 8008154:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	2b0f      	cmp	r3, #15
 800815a:	d916      	bls.n	800818a <UART_SetConfig+0x2d2>
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008162:	d212      	bcs.n	800818a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	b29b      	uxth	r3, r3
 8008168:	f023 030f 	bic.w	r3, r3, #15
 800816c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	085b      	lsrs	r3, r3, #1
 8008172:	b29b      	uxth	r3, r3
 8008174:	f003 0307 	and.w	r3, r3, #7
 8008178:	b29a      	uxth	r2, r3
 800817a:	89fb      	ldrh	r3, [r7, #14]
 800817c:	4313      	orrs	r3, r2
 800817e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	89fa      	ldrh	r2, [r7, #14]
 8008186:	60da      	str	r2, [r3, #12]
 8008188:	e05c      	b.n	8008244 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	77bb      	strb	r3, [r7, #30]
 800818e:	e059      	b.n	8008244 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008190:	7ffb      	ldrb	r3, [r7, #31]
 8008192:	2b08      	cmp	r3, #8
 8008194:	d835      	bhi.n	8008202 <UART_SetConfig+0x34a>
 8008196:	a201      	add	r2, pc, #4	; (adr r2, 800819c <UART_SetConfig+0x2e4>)
 8008198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819c:	080081c1 	.word	0x080081c1
 80081a0:	080081c9 	.word	0x080081c9
 80081a4:	080081ed 	.word	0x080081ed
 80081a8:	08008203 	.word	0x08008203
 80081ac:	080081f3 	.word	0x080081f3
 80081b0:	08008203 	.word	0x08008203
 80081b4:	08008203 	.word	0x08008203
 80081b8:	08008203 	.word	0x08008203
 80081bc:	080081fb 	.word	0x080081fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081c0:	f7fd fdd8 	bl	8005d74 <HAL_RCC_GetPCLK1Freq>
 80081c4:	61b8      	str	r0, [r7, #24]
        break;
 80081c6:	e021      	b.n	800820c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081c8:	f7fd fdf6 	bl	8005db8 <HAL_RCC_GetPCLK2Freq>
 80081cc:	61b8      	str	r0, [r7, #24]
        break;
 80081ce:	e01d      	b.n	800820c <UART_SetConfig+0x354>
 80081d0:	40013800 	.word	0x40013800
 80081d4:	40021000 	.word	0x40021000
 80081d8:	40004400 	.word	0x40004400
 80081dc:	40004800 	.word	0x40004800
 80081e0:	40004c00 	.word	0x40004c00
 80081e4:	40005000 	.word	0x40005000
 80081e8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081ec:	4b1b      	ldr	r3, [pc, #108]	; (800825c <UART_SetConfig+0x3a4>)
 80081ee:	61bb      	str	r3, [r7, #24]
        break;
 80081f0:	e00c      	b.n	800820c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081f2:	f7fd fd49 	bl	8005c88 <HAL_RCC_GetSysClockFreq>
 80081f6:	61b8      	str	r0, [r7, #24]
        break;
 80081f8:	e008      	b.n	800820c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081fe:	61bb      	str	r3, [r7, #24]
        break;
 8008200:	e004      	b.n	800820c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8008202:	2300      	movs	r3, #0
 8008204:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	77bb      	strb	r3, [r7, #30]
        break;
 800820a:	bf00      	nop
    }

    if (pclk != 0U)
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d018      	beq.n	8008244 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	085a      	lsrs	r2, r3, #1
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	441a      	add	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	fbb2 f3f3 	udiv	r3, r2, r3
 8008224:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	2b0f      	cmp	r3, #15
 800822a:	d909      	bls.n	8008240 <UART_SetConfig+0x388>
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008232:	d205      	bcs.n	8008240 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	b29a      	uxth	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	60da      	str	r2, [r3, #12]
 800823e:	e001      	b.n	8008244 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008250:	7fbb      	ldrb	r3, [r7, #30]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3720      	adds	r7, #32
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	007a1200 	.word	0x007a1200

08008260 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826c:	f003 0301 	and.w	r3, r3, #1
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00a      	beq.n	800828a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	430a      	orrs	r2, r1
 8008288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828e:	f003 0302 	and.w	r3, r3, #2
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00a      	beq.n	80082ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	430a      	orrs	r2, r1
 80082aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	f003 0304 	and.w	r3, r3, #4
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00a      	beq.n	80082ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	430a      	orrs	r2, r1
 80082cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d2:	f003 0308 	and.w	r3, r3, #8
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00a      	beq.n	80082f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	430a      	orrs	r2, r1
 80082ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f4:	f003 0310 	and.w	r3, r3, #16
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00a      	beq.n	8008312 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	430a      	orrs	r2, r1
 8008310:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008316:	f003 0320 	and.w	r3, r3, #32
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00a      	beq.n	8008334 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	430a      	orrs	r2, r1
 8008332:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833c:	2b00      	cmp	r3, #0
 800833e:	d01a      	beq.n	8008376 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	430a      	orrs	r2, r1
 8008354:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800835e:	d10a      	bne.n	8008376 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	430a      	orrs	r2, r1
 8008374:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00a      	beq.n	8008398 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	430a      	orrs	r2, r1
 8008396:	605a      	str	r2, [r3, #4]
  }
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b098      	sub	sp, #96	; 0x60
 80083a8:	af02      	add	r7, sp, #8
 80083aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083b4:	f7fa f976 	bl	80026a4 <HAL_GetTick>
 80083b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0308 	and.w	r3, r3, #8
 80083c4:	2b08      	cmp	r3, #8
 80083c6:	d12e      	bne.n	8008426 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083d0:	2200      	movs	r2, #0
 80083d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f88c 	bl	80084f4 <UART_WaitOnFlagUntilTimeout>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d021      	beq.n	8008426 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ea:	e853 3f00 	ldrex	r3, [r3]
 80083ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083f6:	653b      	str	r3, [r7, #80]	; 0x50
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	461a      	mov	r2, r3
 80083fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008400:	647b      	str	r3, [r7, #68]	; 0x44
 8008402:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008404:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008406:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008408:	e841 2300 	strex	r3, r2, [r1]
 800840c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800840e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008410:	2b00      	cmp	r3, #0
 8008412:	d1e6      	bne.n	80083e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2220      	movs	r2, #32
 8008418:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e062      	b.n	80084ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 0304 	and.w	r3, r3, #4
 8008430:	2b04      	cmp	r3, #4
 8008432:	d149      	bne.n	80084c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008434:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800843c:	2200      	movs	r2, #0
 800843e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f856 	bl	80084f4 <UART_WaitOnFlagUntilTimeout>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d03c      	beq.n	80084c8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008456:	e853 3f00 	ldrex	r3, [r3]
 800845a:	623b      	str	r3, [r7, #32]
   return(result);
 800845c:	6a3b      	ldr	r3, [r7, #32]
 800845e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	461a      	mov	r2, r3
 800846a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800846c:	633b      	str	r3, [r7, #48]	; 0x30
 800846e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008470:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008474:	e841 2300 	strex	r3, r2, [r1]
 8008478:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800847a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847c:	2b00      	cmp	r3, #0
 800847e:	d1e6      	bne.n	800844e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3308      	adds	r3, #8
 8008486:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	e853 3f00 	ldrex	r3, [r3]
 800848e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f023 0301 	bic.w	r3, r3, #1
 8008496:	64bb      	str	r3, [r7, #72]	; 0x48
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3308      	adds	r3, #8
 800849e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084a0:	61fa      	str	r2, [r7, #28]
 80084a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a4:	69b9      	ldr	r1, [r7, #24]
 80084a6:	69fa      	ldr	r2, [r7, #28]
 80084a8:	e841 2300 	strex	r3, r2, [r1]
 80084ac:	617b      	str	r3, [r7, #20]
   return(result);
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1e5      	bne.n	8008480 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2220      	movs	r2, #32
 80084b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084c4:	2303      	movs	r3, #3
 80084c6:	e011      	b.n	80084ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2220      	movs	r2, #32
 80084cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2220      	movs	r2, #32
 80084d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3758      	adds	r7, #88	; 0x58
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	603b      	str	r3, [r7, #0]
 8008500:	4613      	mov	r3, r2
 8008502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008504:	e049      	b.n	800859a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850c:	d045      	beq.n	800859a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800850e:	f7fa f8c9 	bl	80026a4 <HAL_GetTick>
 8008512:	4602      	mov	r2, r0
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	69ba      	ldr	r2, [r7, #24]
 800851a:	429a      	cmp	r2, r3
 800851c:	d302      	bcc.n	8008524 <UART_WaitOnFlagUntilTimeout+0x30>
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d101      	bne.n	8008528 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008524:	2303      	movs	r3, #3
 8008526:	e048      	b.n	80085ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 0304 	and.w	r3, r3, #4
 8008532:	2b00      	cmp	r3, #0
 8008534:	d031      	beq.n	800859a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	69db      	ldr	r3, [r3, #28]
 800853c:	f003 0308 	and.w	r3, r3, #8
 8008540:	2b08      	cmp	r3, #8
 8008542:	d110      	bne.n	8008566 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2208      	movs	r2, #8
 800854a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f000 f8ed 	bl	800872c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2208      	movs	r2, #8
 8008556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	e029      	b.n	80085ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	69db      	ldr	r3, [r3, #28]
 800856c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008574:	d111      	bne.n	800859a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800857e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f000 f8d3 	bl	800872c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2220      	movs	r2, #32
 800858a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008596:	2303      	movs	r3, #3
 8008598:	e00f      	b.n	80085ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	69da      	ldr	r2, [r3, #28]
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	4013      	ands	r3, r2
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	bf0c      	ite	eq
 80085aa:	2301      	moveq	r3, #1
 80085ac:	2300      	movne	r3, #0
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	461a      	mov	r2, r3
 80085b2:	79fb      	ldrb	r3, [r7, #7]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d0a6      	beq.n	8008506 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
	...

080085c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b097      	sub	sp, #92	; 0x5c
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	4613      	mov	r3, r2
 80085d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	88fa      	ldrh	r2, [r7, #6]
 80085dc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	88fa      	ldrh	r2, [r7, #6]
 80085e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085f6:	d10e      	bne.n	8008616 <UART_Start_Receive_IT+0x52>
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d105      	bne.n	800860c <UART_Start_Receive_IT+0x48>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008606:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800860a:	e01a      	b.n	8008642 <UART_Start_Receive_IT+0x7e>
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	22ff      	movs	r2, #255	; 0xff
 8008610:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008614:	e015      	b.n	8008642 <UART_Start_Receive_IT+0x7e>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10d      	bne.n	800863a <UART_Start_Receive_IT+0x76>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d104      	bne.n	8008630 <UART_Start_Receive_IT+0x6c>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	22ff      	movs	r2, #255	; 0xff
 800862a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800862e:	e008      	b.n	8008642 <UART_Start_Receive_IT+0x7e>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	227f      	movs	r2, #127	; 0x7f
 8008634:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008638:	e003      	b.n	8008642 <UART_Start_Receive_IT+0x7e>
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2200      	movs	r2, #0
 8008646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2222      	movs	r2, #34	; 0x22
 800864e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	3308      	adds	r3, #8
 8008658:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800865c:	e853 3f00 	ldrex	r3, [r3]
 8008660:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008664:	f043 0301 	orr.w	r3, r3, #1
 8008668:	657b      	str	r3, [r7, #84]	; 0x54
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	3308      	adds	r3, #8
 8008670:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008672:	64ba      	str	r2, [r7, #72]	; 0x48
 8008674:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008676:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008678:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800867a:	e841 2300 	strex	r3, r2, [r1]
 800867e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1e5      	bne.n	8008652 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800868e:	d107      	bne.n	80086a0 <UART_Start_Receive_IT+0xdc>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d103      	bne.n	80086a0 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	4a22      	ldr	r2, [pc, #136]	; (8008724 <UART_Start_Receive_IT+0x160>)
 800869c:	669a      	str	r2, [r3, #104]	; 0x68
 800869e:	e002      	b.n	80086a6 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	4a21      	ldr	r2, [pc, #132]	; (8008728 <UART_Start_Receive_IT+0x164>)
 80086a4:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d019      	beq.n	80086e2 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b6:	e853 3f00 	ldrex	r3, [r3]
 80086ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086be:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80086c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	461a      	mov	r2, r3
 80086ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086cc:	637b      	str	r3, [r7, #52]	; 0x34
 80086ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086d4:	e841 2300 	strex	r3, r2, [r1]
 80086d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1e6      	bne.n	80086ae <UART_Start_Receive_IT+0xea>
 80086e0:	e018      	b.n	8008714 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	e853 3f00 	ldrex	r3, [r3]
 80086ee:	613b      	str	r3, [r7, #16]
   return(result);
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	f043 0320 	orr.w	r3, r3, #32
 80086f6:	653b      	str	r3, [r7, #80]	; 0x50
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	461a      	mov	r2, r3
 80086fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008700:	623b      	str	r3, [r7, #32]
 8008702:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008704:	69f9      	ldr	r1, [r7, #28]
 8008706:	6a3a      	ldr	r2, [r7, #32]
 8008708:	e841 2300 	strex	r3, r2, [r1]
 800870c:	61bb      	str	r3, [r7, #24]
   return(result);
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1e6      	bne.n	80086e2 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	375c      	adds	r7, #92	; 0x5c
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	08008b95 	.word	0x08008b95
 8008728:	080089ed 	.word	0x080089ed

0800872c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800872c:	b480      	push	{r7}
 800872e:	b095      	sub	sp, #84	; 0x54
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800873c:	e853 3f00 	ldrex	r3, [r3]
 8008740:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008748:	64fb      	str	r3, [r7, #76]	; 0x4c
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	461a      	mov	r2, r3
 8008750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008752:	643b      	str	r3, [r7, #64]	; 0x40
 8008754:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008756:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008758:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800875a:	e841 2300 	strex	r3, r2, [r1]
 800875e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1e6      	bne.n	8008734 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	3308      	adds	r3, #8
 800876c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876e:	6a3b      	ldr	r3, [r7, #32]
 8008770:	e853 3f00 	ldrex	r3, [r3]
 8008774:	61fb      	str	r3, [r7, #28]
   return(result);
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	f023 0301 	bic.w	r3, r3, #1
 800877c:	64bb      	str	r3, [r7, #72]	; 0x48
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	3308      	adds	r3, #8
 8008784:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008786:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008788:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800878c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800878e:	e841 2300 	strex	r3, r2, [r1]
 8008792:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1e5      	bne.n	8008766 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d118      	bne.n	80087d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	e853 3f00 	ldrex	r3, [r3]
 80087ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	f023 0310 	bic.w	r3, r3, #16
 80087b6:	647b      	str	r3, [r7, #68]	; 0x44
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	461a      	mov	r2, r3
 80087be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087c0:	61bb      	str	r3, [r7, #24]
 80087c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c4:	6979      	ldr	r1, [r7, #20]
 80087c6:	69ba      	ldr	r2, [r7, #24]
 80087c8:	e841 2300 	strex	r3, r2, [r1]
 80087cc:	613b      	str	r3, [r7, #16]
   return(result);
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1e6      	bne.n	80087a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2220      	movs	r2, #32
 80087d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80087e8:	bf00      	nop
 80087ea:	3754      	adds	r7, #84	; 0x54
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008800:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f7ff fb3a 	bl	8007e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008818:	bf00      	nop
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008820:	b480      	push	{r7}
 8008822:	b08f      	sub	sp, #60	; 0x3c
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800882c:	2b21      	cmp	r3, #33	; 0x21
 800882e:	d14d      	bne.n	80088cc <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008836:	b29b      	uxth	r3, r3
 8008838:	2b00      	cmp	r3, #0
 800883a:	d132      	bne.n	80088a2 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008842:	6a3b      	ldr	r3, [r7, #32]
 8008844:	e853 3f00 	ldrex	r3, [r3]
 8008848:	61fb      	str	r3, [r7, #28]
   return(result);
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008850:	637b      	str	r3, [r7, #52]	; 0x34
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	461a      	mov	r2, r3
 8008858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800885a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800885c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008862:	e841 2300 	strex	r3, r2, [r1]
 8008866:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1e6      	bne.n	800883c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	e853 3f00 	ldrex	r3, [r3]
 800887a:	60bb      	str	r3, [r7, #8]
   return(result);
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008882:	633b      	str	r3, [r7, #48]	; 0x30
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	461a      	mov	r2, r3
 800888a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888c:	61bb      	str	r3, [r7, #24]
 800888e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008890:	6979      	ldr	r1, [r7, #20]
 8008892:	69ba      	ldr	r2, [r7, #24]
 8008894:	e841 2300 	strex	r3, r2, [r1]
 8008898:	613b      	str	r3, [r7, #16]
   return(result);
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1e6      	bne.n	800886e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80088a0:	e014      	b.n	80088cc <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088a6:	781a      	ldrb	r2, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	b292      	uxth	r2, r2
 80088ae:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088b4:	1c5a      	adds	r2, r3, #1
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	3b01      	subs	r3, #1
 80088c4:	b29a      	uxth	r2, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80088cc:	bf00      	nop
 80088ce:	373c      	adds	r7, #60	; 0x3c
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80088d8:	b480      	push	{r7}
 80088da:	b091      	sub	sp, #68	; 0x44
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088e4:	2b21      	cmp	r3, #33	; 0x21
 80088e6:	d151      	bne.n	800898c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d132      	bne.n	800895a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fc:	e853 3f00 	ldrex	r3, [r3]
 8008900:	623b      	str	r3, [r7, #32]
   return(result);
 8008902:	6a3b      	ldr	r3, [r7, #32]
 8008904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008908:	63bb      	str	r3, [r7, #56]	; 0x38
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	461a      	mov	r2, r3
 8008910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008912:	633b      	str	r3, [r7, #48]	; 0x30
 8008914:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008916:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800891a:	e841 2300 	strex	r3, r2, [r1]
 800891e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1e6      	bne.n	80088f4 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	e853 3f00 	ldrex	r3, [r3]
 8008932:	60fb      	str	r3, [r7, #12]
   return(result);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800893a:	637b      	str	r3, [r7, #52]	; 0x34
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	461a      	mov	r2, r3
 8008942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008944:	61fb      	str	r3, [r7, #28]
 8008946:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008948:	69b9      	ldr	r1, [r7, #24]
 800894a:	69fa      	ldr	r2, [r7, #28]
 800894c:	e841 2300 	strex	r3, r2, [r1]
 8008950:	617b      	str	r3, [r7, #20]
   return(result);
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1e6      	bne.n	8008926 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008958:	e018      	b.n	800898c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800895e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008962:	881a      	ldrh	r2, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800896c:	b292      	uxth	r2, r2
 800896e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008974:	1c9a      	adds	r2, r3, #2
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008980:	b29b      	uxth	r3, r3
 8008982:	3b01      	subs	r3, #1
 8008984:	b29a      	uxth	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800898c:	bf00      	nop
 800898e:	3744      	adds	r7, #68	; 0x44
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b088      	sub	sp, #32
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	e853 3f00 	ldrex	r3, [r3]
 80089ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089b4:	61fb      	str	r3, [r7, #28]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	461a      	mov	r2, r3
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	61bb      	str	r3, [r7, #24]
 80089c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c2:	6979      	ldr	r1, [r7, #20]
 80089c4:	69ba      	ldr	r2, [r7, #24]
 80089c6:	e841 2300 	strex	r3, r2, [r1]
 80089ca:	613b      	str	r3, [r7, #16]
   return(result);
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1e6      	bne.n	80089a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2220      	movs	r2, #32
 80089d6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f7ff fa4a 	bl	8007e78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089e4:	bf00      	nop
 80089e6:	3720      	adds	r7, #32
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b09c      	sub	sp, #112	; 0x70
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80089fa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a04:	2b22      	cmp	r3, #34	; 0x22
 8008a06:	f040 80b9 	bne.w	8008b7c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008a10:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a14:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008a18:	b2d9      	uxtb	r1, r3
 8008a1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a24:	400a      	ands	r2, r1
 8008a26:	b2d2      	uxtb	r2, r2
 8008a28:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a2e:	1c5a      	adds	r2, r3, #1
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f040 809c 	bne.w	8008b8c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a5c:	e853 3f00 	ldrex	r3, [r3]
 8008a60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a68:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	461a      	mov	r2, r3
 8008a70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a72:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a74:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a7a:	e841 2300 	strex	r3, r2, [r1]
 8008a7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1e6      	bne.n	8008a54 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3308      	adds	r3, #8
 8008a8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a90:	e853 3f00 	ldrex	r3, [r3]
 8008a94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a98:	f023 0301 	bic.w	r3, r3, #1
 8008a9c:	667b      	str	r3, [r7, #100]	; 0x64
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3308      	adds	r3, #8
 8008aa4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008aa6:	647a      	str	r2, [r7, #68]	; 0x44
 8008aa8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aaa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008aac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008aae:	e841 2300 	strex	r3, r2, [r1]
 8008ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1e5      	bne.n	8008a86 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2220      	movs	r2, #32
 8008abe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d018      	beq.n	8008b0e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	e853 3f00 	ldrex	r3, [r3]
 8008ae8:	623b      	str	r3, [r7, #32]
   return(result);
 8008aea:	6a3b      	ldr	r3, [r7, #32]
 8008aec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008af0:	663b      	str	r3, [r7, #96]	; 0x60
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	461a      	mov	r2, r3
 8008af8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008afa:	633b      	str	r3, [r7, #48]	; 0x30
 8008afc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b02:	e841 2300 	strex	r3, r2, [r1]
 8008b06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1e6      	bne.n	8008adc <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d12e      	bne.n	8008b74 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	e853 3f00 	ldrex	r3, [r3]
 8008b28:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f023 0310 	bic.w	r3, r3, #16
 8008b30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	461a      	mov	r2, r3
 8008b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b3a:	61fb      	str	r3, [r7, #28]
 8008b3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3e:	69b9      	ldr	r1, [r7, #24]
 8008b40:	69fa      	ldr	r2, [r7, #28]
 8008b42:	e841 2300 	strex	r3, r2, [r1]
 8008b46:	617b      	str	r3, [r7, #20]
   return(result);
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1e6      	bne.n	8008b1c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	69db      	ldr	r3, [r3, #28]
 8008b54:	f003 0310 	and.w	r3, r3, #16
 8008b58:	2b10      	cmp	r3, #16
 8008b5a:	d103      	bne.n	8008b64 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2210      	movs	r2, #16
 8008b62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f7ff f997 	bl	8007ea0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b72:	e00b      	b.n	8008b8c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f7f8 f833 	bl	8000be0 <HAL_UART_RxCpltCallback>
}
 8008b7a:	e007      	b.n	8008b8c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	699a      	ldr	r2, [r3, #24]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f042 0208 	orr.w	r2, r2, #8
 8008b8a:	619a      	str	r2, [r3, #24]
}
 8008b8c:	bf00      	nop
 8008b8e:	3770      	adds	r7, #112	; 0x70
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b09c      	sub	sp, #112	; 0x70
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ba2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bac:	2b22      	cmp	r3, #34	; 0x22
 8008bae:	f040 80b9 	bne.w	8008d24 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008bb8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008bc2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008bc6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008bca:	4013      	ands	r3, r2
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008bd0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bd6:	1c9a      	adds	r2, r3, #2
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	3b01      	subs	r3, #1
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f040 809c 	bne.w	8008d34 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c04:	e853 3f00 	ldrex	r3, [r3]
 8008c08:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c10:	667b      	str	r3, [r7, #100]	; 0x64
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	461a      	mov	r2, r3
 8008c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c1a:	657b      	str	r3, [r7, #84]	; 0x54
 8008c1c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c22:	e841 2300 	strex	r3, r2, [r1]
 8008c26:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1e6      	bne.n	8008bfc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	3308      	adds	r3, #8
 8008c34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c38:	e853 3f00 	ldrex	r3, [r3]
 8008c3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c40:	f023 0301 	bic.w	r3, r3, #1
 8008c44:	663b      	str	r3, [r7, #96]	; 0x60
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	3308      	adds	r3, #8
 8008c4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c4e:	643a      	str	r2, [r7, #64]	; 0x40
 8008c50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c56:	e841 2300 	strex	r3, r2, [r1]
 8008c5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1e5      	bne.n	8008c2e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2220      	movs	r2, #32
 8008c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d018      	beq.n	8008cb6 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8a:	6a3b      	ldr	r3, [r7, #32]
 8008c8c:	e853 3f00 	ldrex	r3, [r3]
 8008c90:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ca4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008caa:	e841 2300 	strex	r3, r2, [r1]
 8008cae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1e6      	bne.n	8008c84 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d12e      	bne.n	8008d1c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	e853 3f00 	ldrex	r3, [r3]
 8008cd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	f023 0310 	bic.w	r3, r3, #16
 8008cd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ce2:	61bb      	str	r3, [r7, #24]
 8008ce4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce6:	6979      	ldr	r1, [r7, #20]
 8008ce8:	69ba      	ldr	r2, [r7, #24]
 8008cea:	e841 2300 	strex	r3, r2, [r1]
 8008cee:	613b      	str	r3, [r7, #16]
   return(result);
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1e6      	bne.n	8008cc4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	69db      	ldr	r3, [r3, #28]
 8008cfc:	f003 0310 	and.w	r3, r3, #16
 8008d00:	2b10      	cmp	r3, #16
 8008d02:	d103      	bne.n	8008d0c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2210      	movs	r2, #16
 8008d0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008d12:	4619      	mov	r1, r3
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f7ff f8c3 	bl	8007ea0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d1a:	e00b      	b.n	8008d34 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f7f7 ff5f 	bl	8000be0 <HAL_UART_RxCpltCallback>
}
 8008d22:	e007      	b.n	8008d34 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	699a      	ldr	r2, [r3, #24]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f042 0208 	orr.w	r2, r2, #8
 8008d32:	619a      	str	r2, [r3, #24]
}
 8008d34:	bf00      	nop
 8008d36:	3770      	adds	r7, #112	; 0x70
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008d58:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008d5c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008d64:	b29a      	uxth	r2, r3
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	43db      	mvns	r3, r3
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	4013      	ands	r3, r2
 8008d70:	b29a      	uxth	r2, r3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008d86:	b084      	sub	sp, #16
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	f107 0014 	add.w	r0, r7, #20
 8008d94:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	370c      	adds	r7, #12
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	b004      	add	sp, #16
 8008dc6:	4770      	bx	lr

08008dc8 <__errno>:
 8008dc8:	4b01      	ldr	r3, [pc, #4]	; (8008dd0 <__errno+0x8>)
 8008dca:	6818      	ldr	r0, [r3, #0]
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	20000034 	.word	0x20000034

08008dd4 <__libc_init_array>:
 8008dd4:	b570      	push	{r4, r5, r6, lr}
 8008dd6:	4d0d      	ldr	r5, [pc, #52]	; (8008e0c <__libc_init_array+0x38>)
 8008dd8:	4c0d      	ldr	r4, [pc, #52]	; (8008e10 <__libc_init_array+0x3c>)
 8008dda:	1b64      	subs	r4, r4, r5
 8008ddc:	10a4      	asrs	r4, r4, #2
 8008dde:	2600      	movs	r6, #0
 8008de0:	42a6      	cmp	r6, r4
 8008de2:	d109      	bne.n	8008df8 <__libc_init_array+0x24>
 8008de4:	4d0b      	ldr	r5, [pc, #44]	; (8008e14 <__libc_init_array+0x40>)
 8008de6:	4c0c      	ldr	r4, [pc, #48]	; (8008e18 <__libc_init_array+0x44>)
 8008de8:	f001 fa94 	bl	800a314 <_init>
 8008dec:	1b64      	subs	r4, r4, r5
 8008dee:	10a4      	asrs	r4, r4, #2
 8008df0:	2600      	movs	r6, #0
 8008df2:	42a6      	cmp	r6, r4
 8008df4:	d105      	bne.n	8008e02 <__libc_init_array+0x2e>
 8008df6:	bd70      	pop	{r4, r5, r6, pc}
 8008df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dfc:	4798      	blx	r3
 8008dfe:	3601      	adds	r6, #1
 8008e00:	e7ee      	b.n	8008de0 <__libc_init_array+0xc>
 8008e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e06:	4798      	blx	r3
 8008e08:	3601      	adds	r6, #1
 8008e0a:	e7f2      	b.n	8008df2 <__libc_init_array+0x1e>
 8008e0c:	0800d9a0 	.word	0x0800d9a0
 8008e10:	0800d9a0 	.word	0x0800d9a0
 8008e14:	0800d9a0 	.word	0x0800d9a0
 8008e18:	0800d9a4 	.word	0x0800d9a4

08008e1c <malloc>:
 8008e1c:	4b02      	ldr	r3, [pc, #8]	; (8008e28 <malloc+0xc>)
 8008e1e:	4601      	mov	r1, r0
 8008e20:	6818      	ldr	r0, [r3, #0]
 8008e22:	f000 b885 	b.w	8008f30 <_malloc_r>
 8008e26:	bf00      	nop
 8008e28:	20000034 	.word	0x20000034

08008e2c <memcpy>:
 8008e2c:	440a      	add	r2, r1
 8008e2e:	4291      	cmp	r1, r2
 8008e30:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e34:	d100      	bne.n	8008e38 <memcpy+0xc>
 8008e36:	4770      	bx	lr
 8008e38:	b510      	push	{r4, lr}
 8008e3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e42:	4291      	cmp	r1, r2
 8008e44:	d1f9      	bne.n	8008e3a <memcpy+0xe>
 8008e46:	bd10      	pop	{r4, pc}

08008e48 <memset>:
 8008e48:	4402      	add	r2, r0
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d100      	bne.n	8008e52 <memset+0xa>
 8008e50:	4770      	bx	lr
 8008e52:	f803 1b01 	strb.w	r1, [r3], #1
 8008e56:	e7f9      	b.n	8008e4c <memset+0x4>

08008e58 <_free_r>:
 8008e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e5a:	2900      	cmp	r1, #0
 8008e5c:	d044      	beq.n	8008ee8 <_free_r+0x90>
 8008e5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e62:	9001      	str	r0, [sp, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f1a1 0404 	sub.w	r4, r1, #4
 8008e6a:	bfb8      	it	lt
 8008e6c:	18e4      	addlt	r4, r4, r3
 8008e6e:	f000 f9d1 	bl	8009214 <__malloc_lock>
 8008e72:	4a1e      	ldr	r2, [pc, #120]	; (8008eec <_free_r+0x94>)
 8008e74:	9801      	ldr	r0, [sp, #4]
 8008e76:	6813      	ldr	r3, [r2, #0]
 8008e78:	b933      	cbnz	r3, 8008e88 <_free_r+0x30>
 8008e7a:	6063      	str	r3, [r4, #4]
 8008e7c:	6014      	str	r4, [r2, #0]
 8008e7e:	b003      	add	sp, #12
 8008e80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e84:	f000 b9cc 	b.w	8009220 <__malloc_unlock>
 8008e88:	42a3      	cmp	r3, r4
 8008e8a:	d908      	bls.n	8008e9e <_free_r+0x46>
 8008e8c:	6825      	ldr	r5, [r4, #0]
 8008e8e:	1961      	adds	r1, r4, r5
 8008e90:	428b      	cmp	r3, r1
 8008e92:	bf01      	itttt	eq
 8008e94:	6819      	ldreq	r1, [r3, #0]
 8008e96:	685b      	ldreq	r3, [r3, #4]
 8008e98:	1949      	addeq	r1, r1, r5
 8008e9a:	6021      	streq	r1, [r4, #0]
 8008e9c:	e7ed      	b.n	8008e7a <_free_r+0x22>
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	b10b      	cbz	r3, 8008ea8 <_free_r+0x50>
 8008ea4:	42a3      	cmp	r3, r4
 8008ea6:	d9fa      	bls.n	8008e9e <_free_r+0x46>
 8008ea8:	6811      	ldr	r1, [r2, #0]
 8008eaa:	1855      	adds	r5, r2, r1
 8008eac:	42a5      	cmp	r5, r4
 8008eae:	d10b      	bne.n	8008ec8 <_free_r+0x70>
 8008eb0:	6824      	ldr	r4, [r4, #0]
 8008eb2:	4421      	add	r1, r4
 8008eb4:	1854      	adds	r4, r2, r1
 8008eb6:	42a3      	cmp	r3, r4
 8008eb8:	6011      	str	r1, [r2, #0]
 8008eba:	d1e0      	bne.n	8008e7e <_free_r+0x26>
 8008ebc:	681c      	ldr	r4, [r3, #0]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	6053      	str	r3, [r2, #4]
 8008ec2:	4421      	add	r1, r4
 8008ec4:	6011      	str	r1, [r2, #0]
 8008ec6:	e7da      	b.n	8008e7e <_free_r+0x26>
 8008ec8:	d902      	bls.n	8008ed0 <_free_r+0x78>
 8008eca:	230c      	movs	r3, #12
 8008ecc:	6003      	str	r3, [r0, #0]
 8008ece:	e7d6      	b.n	8008e7e <_free_r+0x26>
 8008ed0:	6825      	ldr	r5, [r4, #0]
 8008ed2:	1961      	adds	r1, r4, r5
 8008ed4:	428b      	cmp	r3, r1
 8008ed6:	bf04      	itt	eq
 8008ed8:	6819      	ldreq	r1, [r3, #0]
 8008eda:	685b      	ldreq	r3, [r3, #4]
 8008edc:	6063      	str	r3, [r4, #4]
 8008ede:	bf04      	itt	eq
 8008ee0:	1949      	addeq	r1, r1, r5
 8008ee2:	6021      	streq	r1, [r4, #0]
 8008ee4:	6054      	str	r4, [r2, #4]
 8008ee6:	e7ca      	b.n	8008e7e <_free_r+0x26>
 8008ee8:	b003      	add	sp, #12
 8008eea:	bd30      	pop	{r4, r5, pc}
 8008eec:	200007b4 	.word	0x200007b4

08008ef0 <sbrk_aligned>:
 8008ef0:	b570      	push	{r4, r5, r6, lr}
 8008ef2:	4e0e      	ldr	r6, [pc, #56]	; (8008f2c <sbrk_aligned+0x3c>)
 8008ef4:	460c      	mov	r4, r1
 8008ef6:	6831      	ldr	r1, [r6, #0]
 8008ef8:	4605      	mov	r5, r0
 8008efa:	b911      	cbnz	r1, 8008f02 <sbrk_aligned+0x12>
 8008efc:	f000 f8f8 	bl	80090f0 <_sbrk_r>
 8008f00:	6030      	str	r0, [r6, #0]
 8008f02:	4621      	mov	r1, r4
 8008f04:	4628      	mov	r0, r5
 8008f06:	f000 f8f3 	bl	80090f0 <_sbrk_r>
 8008f0a:	1c43      	adds	r3, r0, #1
 8008f0c:	d00a      	beq.n	8008f24 <sbrk_aligned+0x34>
 8008f0e:	1cc4      	adds	r4, r0, #3
 8008f10:	f024 0403 	bic.w	r4, r4, #3
 8008f14:	42a0      	cmp	r0, r4
 8008f16:	d007      	beq.n	8008f28 <sbrk_aligned+0x38>
 8008f18:	1a21      	subs	r1, r4, r0
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	f000 f8e8 	bl	80090f0 <_sbrk_r>
 8008f20:	3001      	adds	r0, #1
 8008f22:	d101      	bne.n	8008f28 <sbrk_aligned+0x38>
 8008f24:	f04f 34ff 	mov.w	r4, #4294967295
 8008f28:	4620      	mov	r0, r4
 8008f2a:	bd70      	pop	{r4, r5, r6, pc}
 8008f2c:	200007b8 	.word	0x200007b8

08008f30 <_malloc_r>:
 8008f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f34:	1ccd      	adds	r5, r1, #3
 8008f36:	f025 0503 	bic.w	r5, r5, #3
 8008f3a:	3508      	adds	r5, #8
 8008f3c:	2d0c      	cmp	r5, #12
 8008f3e:	bf38      	it	cc
 8008f40:	250c      	movcc	r5, #12
 8008f42:	2d00      	cmp	r5, #0
 8008f44:	4607      	mov	r7, r0
 8008f46:	db01      	blt.n	8008f4c <_malloc_r+0x1c>
 8008f48:	42a9      	cmp	r1, r5
 8008f4a:	d905      	bls.n	8008f58 <_malloc_r+0x28>
 8008f4c:	230c      	movs	r3, #12
 8008f4e:	603b      	str	r3, [r7, #0]
 8008f50:	2600      	movs	r6, #0
 8008f52:	4630      	mov	r0, r6
 8008f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f58:	4e2e      	ldr	r6, [pc, #184]	; (8009014 <_malloc_r+0xe4>)
 8008f5a:	f000 f95b 	bl	8009214 <__malloc_lock>
 8008f5e:	6833      	ldr	r3, [r6, #0]
 8008f60:	461c      	mov	r4, r3
 8008f62:	bb34      	cbnz	r4, 8008fb2 <_malloc_r+0x82>
 8008f64:	4629      	mov	r1, r5
 8008f66:	4638      	mov	r0, r7
 8008f68:	f7ff ffc2 	bl	8008ef0 <sbrk_aligned>
 8008f6c:	1c43      	adds	r3, r0, #1
 8008f6e:	4604      	mov	r4, r0
 8008f70:	d14d      	bne.n	800900e <_malloc_r+0xde>
 8008f72:	6834      	ldr	r4, [r6, #0]
 8008f74:	4626      	mov	r6, r4
 8008f76:	2e00      	cmp	r6, #0
 8008f78:	d140      	bne.n	8008ffc <_malloc_r+0xcc>
 8008f7a:	6823      	ldr	r3, [r4, #0]
 8008f7c:	4631      	mov	r1, r6
 8008f7e:	4638      	mov	r0, r7
 8008f80:	eb04 0803 	add.w	r8, r4, r3
 8008f84:	f000 f8b4 	bl	80090f0 <_sbrk_r>
 8008f88:	4580      	cmp	r8, r0
 8008f8a:	d13a      	bne.n	8009002 <_malloc_r+0xd2>
 8008f8c:	6821      	ldr	r1, [r4, #0]
 8008f8e:	3503      	adds	r5, #3
 8008f90:	1a6d      	subs	r5, r5, r1
 8008f92:	f025 0503 	bic.w	r5, r5, #3
 8008f96:	3508      	adds	r5, #8
 8008f98:	2d0c      	cmp	r5, #12
 8008f9a:	bf38      	it	cc
 8008f9c:	250c      	movcc	r5, #12
 8008f9e:	4629      	mov	r1, r5
 8008fa0:	4638      	mov	r0, r7
 8008fa2:	f7ff ffa5 	bl	8008ef0 <sbrk_aligned>
 8008fa6:	3001      	adds	r0, #1
 8008fa8:	d02b      	beq.n	8009002 <_malloc_r+0xd2>
 8008faa:	6823      	ldr	r3, [r4, #0]
 8008fac:	442b      	add	r3, r5
 8008fae:	6023      	str	r3, [r4, #0]
 8008fb0:	e00e      	b.n	8008fd0 <_malloc_r+0xa0>
 8008fb2:	6822      	ldr	r2, [r4, #0]
 8008fb4:	1b52      	subs	r2, r2, r5
 8008fb6:	d41e      	bmi.n	8008ff6 <_malloc_r+0xc6>
 8008fb8:	2a0b      	cmp	r2, #11
 8008fba:	d916      	bls.n	8008fea <_malloc_r+0xba>
 8008fbc:	1961      	adds	r1, r4, r5
 8008fbe:	42a3      	cmp	r3, r4
 8008fc0:	6025      	str	r5, [r4, #0]
 8008fc2:	bf18      	it	ne
 8008fc4:	6059      	strne	r1, [r3, #4]
 8008fc6:	6863      	ldr	r3, [r4, #4]
 8008fc8:	bf08      	it	eq
 8008fca:	6031      	streq	r1, [r6, #0]
 8008fcc:	5162      	str	r2, [r4, r5]
 8008fce:	604b      	str	r3, [r1, #4]
 8008fd0:	4638      	mov	r0, r7
 8008fd2:	f104 060b 	add.w	r6, r4, #11
 8008fd6:	f000 f923 	bl	8009220 <__malloc_unlock>
 8008fda:	f026 0607 	bic.w	r6, r6, #7
 8008fde:	1d23      	adds	r3, r4, #4
 8008fe0:	1af2      	subs	r2, r6, r3
 8008fe2:	d0b6      	beq.n	8008f52 <_malloc_r+0x22>
 8008fe4:	1b9b      	subs	r3, r3, r6
 8008fe6:	50a3      	str	r3, [r4, r2]
 8008fe8:	e7b3      	b.n	8008f52 <_malloc_r+0x22>
 8008fea:	6862      	ldr	r2, [r4, #4]
 8008fec:	42a3      	cmp	r3, r4
 8008fee:	bf0c      	ite	eq
 8008ff0:	6032      	streq	r2, [r6, #0]
 8008ff2:	605a      	strne	r2, [r3, #4]
 8008ff4:	e7ec      	b.n	8008fd0 <_malloc_r+0xa0>
 8008ff6:	4623      	mov	r3, r4
 8008ff8:	6864      	ldr	r4, [r4, #4]
 8008ffa:	e7b2      	b.n	8008f62 <_malloc_r+0x32>
 8008ffc:	4634      	mov	r4, r6
 8008ffe:	6876      	ldr	r6, [r6, #4]
 8009000:	e7b9      	b.n	8008f76 <_malloc_r+0x46>
 8009002:	230c      	movs	r3, #12
 8009004:	603b      	str	r3, [r7, #0]
 8009006:	4638      	mov	r0, r7
 8009008:	f000 f90a 	bl	8009220 <__malloc_unlock>
 800900c:	e7a1      	b.n	8008f52 <_malloc_r+0x22>
 800900e:	6025      	str	r5, [r4, #0]
 8009010:	e7de      	b.n	8008fd0 <_malloc_r+0xa0>
 8009012:	bf00      	nop
 8009014:	200007b4 	.word	0x200007b4

08009018 <srand>:
 8009018:	b538      	push	{r3, r4, r5, lr}
 800901a:	4b10      	ldr	r3, [pc, #64]	; (800905c <srand+0x44>)
 800901c:	681d      	ldr	r5, [r3, #0]
 800901e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009020:	4604      	mov	r4, r0
 8009022:	b9b3      	cbnz	r3, 8009052 <srand+0x3a>
 8009024:	2018      	movs	r0, #24
 8009026:	f7ff fef9 	bl	8008e1c <malloc>
 800902a:	4602      	mov	r2, r0
 800902c:	63a8      	str	r0, [r5, #56]	; 0x38
 800902e:	b920      	cbnz	r0, 800903a <srand+0x22>
 8009030:	4b0b      	ldr	r3, [pc, #44]	; (8009060 <srand+0x48>)
 8009032:	480c      	ldr	r0, [pc, #48]	; (8009064 <srand+0x4c>)
 8009034:	2142      	movs	r1, #66	; 0x42
 8009036:	f000 f8bd 	bl	80091b4 <__assert_func>
 800903a:	490b      	ldr	r1, [pc, #44]	; (8009068 <srand+0x50>)
 800903c:	4b0b      	ldr	r3, [pc, #44]	; (800906c <srand+0x54>)
 800903e:	e9c0 1300 	strd	r1, r3, [r0]
 8009042:	4b0b      	ldr	r3, [pc, #44]	; (8009070 <srand+0x58>)
 8009044:	6083      	str	r3, [r0, #8]
 8009046:	230b      	movs	r3, #11
 8009048:	8183      	strh	r3, [r0, #12]
 800904a:	2100      	movs	r1, #0
 800904c:	2001      	movs	r0, #1
 800904e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009052:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009054:	2200      	movs	r2, #0
 8009056:	611c      	str	r4, [r3, #16]
 8009058:	615a      	str	r2, [r3, #20]
 800905a:	bd38      	pop	{r3, r4, r5, pc}
 800905c:	20000034 	.word	0x20000034
 8009060:	0800d85c 	.word	0x0800d85c
 8009064:	0800d873 	.word	0x0800d873
 8009068:	abcd330e 	.word	0xabcd330e
 800906c:	e66d1234 	.word	0xe66d1234
 8009070:	0005deec 	.word	0x0005deec

08009074 <rand>:
 8009074:	4b16      	ldr	r3, [pc, #88]	; (80090d0 <rand+0x5c>)
 8009076:	b510      	push	{r4, lr}
 8009078:	681c      	ldr	r4, [r3, #0]
 800907a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800907c:	b9b3      	cbnz	r3, 80090ac <rand+0x38>
 800907e:	2018      	movs	r0, #24
 8009080:	f7ff fecc 	bl	8008e1c <malloc>
 8009084:	63a0      	str	r0, [r4, #56]	; 0x38
 8009086:	b928      	cbnz	r0, 8009094 <rand+0x20>
 8009088:	4602      	mov	r2, r0
 800908a:	4b12      	ldr	r3, [pc, #72]	; (80090d4 <rand+0x60>)
 800908c:	4812      	ldr	r0, [pc, #72]	; (80090d8 <rand+0x64>)
 800908e:	214e      	movs	r1, #78	; 0x4e
 8009090:	f000 f890 	bl	80091b4 <__assert_func>
 8009094:	4a11      	ldr	r2, [pc, #68]	; (80090dc <rand+0x68>)
 8009096:	4b12      	ldr	r3, [pc, #72]	; (80090e0 <rand+0x6c>)
 8009098:	e9c0 2300 	strd	r2, r3, [r0]
 800909c:	4b11      	ldr	r3, [pc, #68]	; (80090e4 <rand+0x70>)
 800909e:	6083      	str	r3, [r0, #8]
 80090a0:	230b      	movs	r3, #11
 80090a2:	8183      	strh	r3, [r0, #12]
 80090a4:	2201      	movs	r2, #1
 80090a6:	2300      	movs	r3, #0
 80090a8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80090ac:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80090ae:	4a0e      	ldr	r2, [pc, #56]	; (80090e8 <rand+0x74>)
 80090b0:	6920      	ldr	r0, [r4, #16]
 80090b2:	6963      	ldr	r3, [r4, #20]
 80090b4:	490d      	ldr	r1, [pc, #52]	; (80090ec <rand+0x78>)
 80090b6:	4342      	muls	r2, r0
 80090b8:	fb01 2203 	mla	r2, r1, r3, r2
 80090bc:	fba0 0101 	umull	r0, r1, r0, r1
 80090c0:	1c43      	adds	r3, r0, #1
 80090c2:	eb42 0001 	adc.w	r0, r2, r1
 80090c6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80090ca:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80090ce:	bd10      	pop	{r4, pc}
 80090d0:	20000034 	.word	0x20000034
 80090d4:	0800d85c 	.word	0x0800d85c
 80090d8:	0800d873 	.word	0x0800d873
 80090dc:	abcd330e 	.word	0xabcd330e
 80090e0:	e66d1234 	.word	0xe66d1234
 80090e4:	0005deec 	.word	0x0005deec
 80090e8:	5851f42d 	.word	0x5851f42d
 80090ec:	4c957f2d 	.word	0x4c957f2d

080090f0 <_sbrk_r>:
 80090f0:	b538      	push	{r3, r4, r5, lr}
 80090f2:	4d06      	ldr	r5, [pc, #24]	; (800910c <_sbrk_r+0x1c>)
 80090f4:	2300      	movs	r3, #0
 80090f6:	4604      	mov	r4, r0
 80090f8:	4608      	mov	r0, r1
 80090fa:	602b      	str	r3, [r5, #0]
 80090fc:	f7f9 fa06 	bl	800250c <_sbrk>
 8009100:	1c43      	adds	r3, r0, #1
 8009102:	d102      	bne.n	800910a <_sbrk_r+0x1a>
 8009104:	682b      	ldr	r3, [r5, #0]
 8009106:	b103      	cbz	r3, 800910a <_sbrk_r+0x1a>
 8009108:	6023      	str	r3, [r4, #0]
 800910a:	bd38      	pop	{r3, r4, r5, pc}
 800910c:	200007bc 	.word	0x200007bc

08009110 <sniprintf>:
 8009110:	b40c      	push	{r2, r3}
 8009112:	b530      	push	{r4, r5, lr}
 8009114:	4b17      	ldr	r3, [pc, #92]	; (8009174 <sniprintf+0x64>)
 8009116:	1e0c      	subs	r4, r1, #0
 8009118:	681d      	ldr	r5, [r3, #0]
 800911a:	b09d      	sub	sp, #116	; 0x74
 800911c:	da08      	bge.n	8009130 <sniprintf+0x20>
 800911e:	238b      	movs	r3, #139	; 0x8b
 8009120:	602b      	str	r3, [r5, #0]
 8009122:	f04f 30ff 	mov.w	r0, #4294967295
 8009126:	b01d      	add	sp, #116	; 0x74
 8009128:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800912c:	b002      	add	sp, #8
 800912e:	4770      	bx	lr
 8009130:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009134:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009138:	bf14      	ite	ne
 800913a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800913e:	4623      	moveq	r3, r4
 8009140:	9304      	str	r3, [sp, #16]
 8009142:	9307      	str	r3, [sp, #28]
 8009144:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009148:	9002      	str	r0, [sp, #8]
 800914a:	9006      	str	r0, [sp, #24]
 800914c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009150:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009152:	ab21      	add	r3, sp, #132	; 0x84
 8009154:	a902      	add	r1, sp, #8
 8009156:	4628      	mov	r0, r5
 8009158:	9301      	str	r3, [sp, #4]
 800915a:	f000 f8c3 	bl	80092e4 <_svfiprintf_r>
 800915e:	1c43      	adds	r3, r0, #1
 8009160:	bfbc      	itt	lt
 8009162:	238b      	movlt	r3, #139	; 0x8b
 8009164:	602b      	strlt	r3, [r5, #0]
 8009166:	2c00      	cmp	r4, #0
 8009168:	d0dd      	beq.n	8009126 <sniprintf+0x16>
 800916a:	9b02      	ldr	r3, [sp, #8]
 800916c:	2200      	movs	r2, #0
 800916e:	701a      	strb	r2, [r3, #0]
 8009170:	e7d9      	b.n	8009126 <sniprintf+0x16>
 8009172:	bf00      	nop
 8009174:	20000034 	.word	0x20000034

08009178 <strdup>:
 8009178:	4b02      	ldr	r3, [pc, #8]	; (8009184 <strdup+0xc>)
 800917a:	4601      	mov	r1, r0
 800917c:	6818      	ldr	r0, [r3, #0]
 800917e:	f000 b803 	b.w	8009188 <_strdup_r>
 8009182:	bf00      	nop
 8009184:	20000034 	.word	0x20000034

08009188 <_strdup_r>:
 8009188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800918a:	4604      	mov	r4, r0
 800918c:	4608      	mov	r0, r1
 800918e:	460d      	mov	r5, r1
 8009190:	f7f7 f828 	bl	80001e4 <strlen>
 8009194:	1c42      	adds	r2, r0, #1
 8009196:	4611      	mov	r1, r2
 8009198:	4620      	mov	r0, r4
 800919a:	9201      	str	r2, [sp, #4]
 800919c:	f7ff fec8 	bl	8008f30 <_malloc_r>
 80091a0:	4604      	mov	r4, r0
 80091a2:	b118      	cbz	r0, 80091ac <_strdup_r+0x24>
 80091a4:	9a01      	ldr	r2, [sp, #4]
 80091a6:	4629      	mov	r1, r5
 80091a8:	f7ff fe40 	bl	8008e2c <memcpy>
 80091ac:	4620      	mov	r0, r4
 80091ae:	b003      	add	sp, #12
 80091b0:	bd30      	pop	{r4, r5, pc}
	...

080091b4 <__assert_func>:
 80091b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091b6:	4614      	mov	r4, r2
 80091b8:	461a      	mov	r2, r3
 80091ba:	4b09      	ldr	r3, [pc, #36]	; (80091e0 <__assert_func+0x2c>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4605      	mov	r5, r0
 80091c0:	68d8      	ldr	r0, [r3, #12]
 80091c2:	b14c      	cbz	r4, 80091d8 <__assert_func+0x24>
 80091c4:	4b07      	ldr	r3, [pc, #28]	; (80091e4 <__assert_func+0x30>)
 80091c6:	9100      	str	r1, [sp, #0]
 80091c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091cc:	4906      	ldr	r1, [pc, #24]	; (80091e8 <__assert_func+0x34>)
 80091ce:	462b      	mov	r3, r5
 80091d0:	f000 f80e 	bl	80091f0 <fiprintf>
 80091d4:	f000 fd34 	bl	8009c40 <abort>
 80091d8:	4b04      	ldr	r3, [pc, #16]	; (80091ec <__assert_func+0x38>)
 80091da:	461c      	mov	r4, r3
 80091dc:	e7f3      	b.n	80091c6 <__assert_func+0x12>
 80091de:	bf00      	nop
 80091e0:	20000034 	.word	0x20000034
 80091e4:	0800d8ce 	.word	0x0800d8ce
 80091e8:	0800d8db 	.word	0x0800d8db
 80091ec:	0800d909 	.word	0x0800d909

080091f0 <fiprintf>:
 80091f0:	b40e      	push	{r1, r2, r3}
 80091f2:	b503      	push	{r0, r1, lr}
 80091f4:	4601      	mov	r1, r0
 80091f6:	ab03      	add	r3, sp, #12
 80091f8:	4805      	ldr	r0, [pc, #20]	; (8009210 <fiprintf+0x20>)
 80091fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80091fe:	6800      	ldr	r0, [r0, #0]
 8009200:	9301      	str	r3, [sp, #4]
 8009202:	f000 f999 	bl	8009538 <_vfiprintf_r>
 8009206:	b002      	add	sp, #8
 8009208:	f85d eb04 	ldr.w	lr, [sp], #4
 800920c:	b003      	add	sp, #12
 800920e:	4770      	bx	lr
 8009210:	20000034 	.word	0x20000034

08009214 <__malloc_lock>:
 8009214:	4801      	ldr	r0, [pc, #4]	; (800921c <__malloc_lock+0x8>)
 8009216:	f000 bed3 	b.w	8009fc0 <__retarget_lock_acquire_recursive>
 800921a:	bf00      	nop
 800921c:	200007c0 	.word	0x200007c0

08009220 <__malloc_unlock>:
 8009220:	4801      	ldr	r0, [pc, #4]	; (8009228 <__malloc_unlock+0x8>)
 8009222:	f000 bece 	b.w	8009fc2 <__retarget_lock_release_recursive>
 8009226:	bf00      	nop
 8009228:	200007c0 	.word	0x200007c0

0800922c <__ssputs_r>:
 800922c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009230:	688e      	ldr	r6, [r1, #8]
 8009232:	429e      	cmp	r6, r3
 8009234:	4682      	mov	sl, r0
 8009236:	460c      	mov	r4, r1
 8009238:	4690      	mov	r8, r2
 800923a:	461f      	mov	r7, r3
 800923c:	d838      	bhi.n	80092b0 <__ssputs_r+0x84>
 800923e:	898a      	ldrh	r2, [r1, #12]
 8009240:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009244:	d032      	beq.n	80092ac <__ssputs_r+0x80>
 8009246:	6825      	ldr	r5, [r4, #0]
 8009248:	6909      	ldr	r1, [r1, #16]
 800924a:	eba5 0901 	sub.w	r9, r5, r1
 800924e:	6965      	ldr	r5, [r4, #20]
 8009250:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009254:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009258:	3301      	adds	r3, #1
 800925a:	444b      	add	r3, r9
 800925c:	106d      	asrs	r5, r5, #1
 800925e:	429d      	cmp	r5, r3
 8009260:	bf38      	it	cc
 8009262:	461d      	movcc	r5, r3
 8009264:	0553      	lsls	r3, r2, #21
 8009266:	d531      	bpl.n	80092cc <__ssputs_r+0xa0>
 8009268:	4629      	mov	r1, r5
 800926a:	f7ff fe61 	bl	8008f30 <_malloc_r>
 800926e:	4606      	mov	r6, r0
 8009270:	b950      	cbnz	r0, 8009288 <__ssputs_r+0x5c>
 8009272:	230c      	movs	r3, #12
 8009274:	f8ca 3000 	str.w	r3, [sl]
 8009278:	89a3      	ldrh	r3, [r4, #12]
 800927a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800927e:	81a3      	strh	r3, [r4, #12]
 8009280:	f04f 30ff 	mov.w	r0, #4294967295
 8009284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009288:	6921      	ldr	r1, [r4, #16]
 800928a:	464a      	mov	r2, r9
 800928c:	f7ff fdce 	bl	8008e2c <memcpy>
 8009290:	89a3      	ldrh	r3, [r4, #12]
 8009292:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800929a:	81a3      	strh	r3, [r4, #12]
 800929c:	6126      	str	r6, [r4, #16]
 800929e:	6165      	str	r5, [r4, #20]
 80092a0:	444e      	add	r6, r9
 80092a2:	eba5 0509 	sub.w	r5, r5, r9
 80092a6:	6026      	str	r6, [r4, #0]
 80092a8:	60a5      	str	r5, [r4, #8]
 80092aa:	463e      	mov	r6, r7
 80092ac:	42be      	cmp	r6, r7
 80092ae:	d900      	bls.n	80092b2 <__ssputs_r+0x86>
 80092b0:	463e      	mov	r6, r7
 80092b2:	6820      	ldr	r0, [r4, #0]
 80092b4:	4632      	mov	r2, r6
 80092b6:	4641      	mov	r1, r8
 80092b8:	f000 feea 	bl	800a090 <memmove>
 80092bc:	68a3      	ldr	r3, [r4, #8]
 80092be:	1b9b      	subs	r3, r3, r6
 80092c0:	60a3      	str	r3, [r4, #8]
 80092c2:	6823      	ldr	r3, [r4, #0]
 80092c4:	4433      	add	r3, r6
 80092c6:	6023      	str	r3, [r4, #0]
 80092c8:	2000      	movs	r0, #0
 80092ca:	e7db      	b.n	8009284 <__ssputs_r+0x58>
 80092cc:	462a      	mov	r2, r5
 80092ce:	f000 fef9 	bl	800a0c4 <_realloc_r>
 80092d2:	4606      	mov	r6, r0
 80092d4:	2800      	cmp	r0, #0
 80092d6:	d1e1      	bne.n	800929c <__ssputs_r+0x70>
 80092d8:	6921      	ldr	r1, [r4, #16]
 80092da:	4650      	mov	r0, sl
 80092dc:	f7ff fdbc 	bl	8008e58 <_free_r>
 80092e0:	e7c7      	b.n	8009272 <__ssputs_r+0x46>
	...

080092e4 <_svfiprintf_r>:
 80092e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e8:	4698      	mov	r8, r3
 80092ea:	898b      	ldrh	r3, [r1, #12]
 80092ec:	061b      	lsls	r3, r3, #24
 80092ee:	b09d      	sub	sp, #116	; 0x74
 80092f0:	4607      	mov	r7, r0
 80092f2:	460d      	mov	r5, r1
 80092f4:	4614      	mov	r4, r2
 80092f6:	d50e      	bpl.n	8009316 <_svfiprintf_r+0x32>
 80092f8:	690b      	ldr	r3, [r1, #16]
 80092fa:	b963      	cbnz	r3, 8009316 <_svfiprintf_r+0x32>
 80092fc:	2140      	movs	r1, #64	; 0x40
 80092fe:	f7ff fe17 	bl	8008f30 <_malloc_r>
 8009302:	6028      	str	r0, [r5, #0]
 8009304:	6128      	str	r0, [r5, #16]
 8009306:	b920      	cbnz	r0, 8009312 <_svfiprintf_r+0x2e>
 8009308:	230c      	movs	r3, #12
 800930a:	603b      	str	r3, [r7, #0]
 800930c:	f04f 30ff 	mov.w	r0, #4294967295
 8009310:	e0d1      	b.n	80094b6 <_svfiprintf_r+0x1d2>
 8009312:	2340      	movs	r3, #64	; 0x40
 8009314:	616b      	str	r3, [r5, #20]
 8009316:	2300      	movs	r3, #0
 8009318:	9309      	str	r3, [sp, #36]	; 0x24
 800931a:	2320      	movs	r3, #32
 800931c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009320:	f8cd 800c 	str.w	r8, [sp, #12]
 8009324:	2330      	movs	r3, #48	; 0x30
 8009326:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80094d0 <_svfiprintf_r+0x1ec>
 800932a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800932e:	f04f 0901 	mov.w	r9, #1
 8009332:	4623      	mov	r3, r4
 8009334:	469a      	mov	sl, r3
 8009336:	f813 2b01 	ldrb.w	r2, [r3], #1
 800933a:	b10a      	cbz	r2, 8009340 <_svfiprintf_r+0x5c>
 800933c:	2a25      	cmp	r2, #37	; 0x25
 800933e:	d1f9      	bne.n	8009334 <_svfiprintf_r+0x50>
 8009340:	ebba 0b04 	subs.w	fp, sl, r4
 8009344:	d00b      	beq.n	800935e <_svfiprintf_r+0x7a>
 8009346:	465b      	mov	r3, fp
 8009348:	4622      	mov	r2, r4
 800934a:	4629      	mov	r1, r5
 800934c:	4638      	mov	r0, r7
 800934e:	f7ff ff6d 	bl	800922c <__ssputs_r>
 8009352:	3001      	adds	r0, #1
 8009354:	f000 80aa 	beq.w	80094ac <_svfiprintf_r+0x1c8>
 8009358:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800935a:	445a      	add	r2, fp
 800935c:	9209      	str	r2, [sp, #36]	; 0x24
 800935e:	f89a 3000 	ldrb.w	r3, [sl]
 8009362:	2b00      	cmp	r3, #0
 8009364:	f000 80a2 	beq.w	80094ac <_svfiprintf_r+0x1c8>
 8009368:	2300      	movs	r3, #0
 800936a:	f04f 32ff 	mov.w	r2, #4294967295
 800936e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009372:	f10a 0a01 	add.w	sl, sl, #1
 8009376:	9304      	str	r3, [sp, #16]
 8009378:	9307      	str	r3, [sp, #28]
 800937a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800937e:	931a      	str	r3, [sp, #104]	; 0x68
 8009380:	4654      	mov	r4, sl
 8009382:	2205      	movs	r2, #5
 8009384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009388:	4851      	ldr	r0, [pc, #324]	; (80094d0 <_svfiprintf_r+0x1ec>)
 800938a:	f7f6 ff39 	bl	8000200 <memchr>
 800938e:	9a04      	ldr	r2, [sp, #16]
 8009390:	b9d8      	cbnz	r0, 80093ca <_svfiprintf_r+0xe6>
 8009392:	06d0      	lsls	r0, r2, #27
 8009394:	bf44      	itt	mi
 8009396:	2320      	movmi	r3, #32
 8009398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800939c:	0711      	lsls	r1, r2, #28
 800939e:	bf44      	itt	mi
 80093a0:	232b      	movmi	r3, #43	; 0x2b
 80093a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093a6:	f89a 3000 	ldrb.w	r3, [sl]
 80093aa:	2b2a      	cmp	r3, #42	; 0x2a
 80093ac:	d015      	beq.n	80093da <_svfiprintf_r+0xf6>
 80093ae:	9a07      	ldr	r2, [sp, #28]
 80093b0:	4654      	mov	r4, sl
 80093b2:	2000      	movs	r0, #0
 80093b4:	f04f 0c0a 	mov.w	ip, #10
 80093b8:	4621      	mov	r1, r4
 80093ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093be:	3b30      	subs	r3, #48	; 0x30
 80093c0:	2b09      	cmp	r3, #9
 80093c2:	d94e      	bls.n	8009462 <_svfiprintf_r+0x17e>
 80093c4:	b1b0      	cbz	r0, 80093f4 <_svfiprintf_r+0x110>
 80093c6:	9207      	str	r2, [sp, #28]
 80093c8:	e014      	b.n	80093f4 <_svfiprintf_r+0x110>
 80093ca:	eba0 0308 	sub.w	r3, r0, r8
 80093ce:	fa09 f303 	lsl.w	r3, r9, r3
 80093d2:	4313      	orrs	r3, r2
 80093d4:	9304      	str	r3, [sp, #16]
 80093d6:	46a2      	mov	sl, r4
 80093d8:	e7d2      	b.n	8009380 <_svfiprintf_r+0x9c>
 80093da:	9b03      	ldr	r3, [sp, #12]
 80093dc:	1d19      	adds	r1, r3, #4
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	9103      	str	r1, [sp, #12]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	bfbb      	ittet	lt
 80093e6:	425b      	neglt	r3, r3
 80093e8:	f042 0202 	orrlt.w	r2, r2, #2
 80093ec:	9307      	strge	r3, [sp, #28]
 80093ee:	9307      	strlt	r3, [sp, #28]
 80093f0:	bfb8      	it	lt
 80093f2:	9204      	strlt	r2, [sp, #16]
 80093f4:	7823      	ldrb	r3, [r4, #0]
 80093f6:	2b2e      	cmp	r3, #46	; 0x2e
 80093f8:	d10c      	bne.n	8009414 <_svfiprintf_r+0x130>
 80093fa:	7863      	ldrb	r3, [r4, #1]
 80093fc:	2b2a      	cmp	r3, #42	; 0x2a
 80093fe:	d135      	bne.n	800946c <_svfiprintf_r+0x188>
 8009400:	9b03      	ldr	r3, [sp, #12]
 8009402:	1d1a      	adds	r2, r3, #4
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	9203      	str	r2, [sp, #12]
 8009408:	2b00      	cmp	r3, #0
 800940a:	bfb8      	it	lt
 800940c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009410:	3402      	adds	r4, #2
 8009412:	9305      	str	r3, [sp, #20]
 8009414:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80094e0 <_svfiprintf_r+0x1fc>
 8009418:	7821      	ldrb	r1, [r4, #0]
 800941a:	2203      	movs	r2, #3
 800941c:	4650      	mov	r0, sl
 800941e:	f7f6 feef 	bl	8000200 <memchr>
 8009422:	b140      	cbz	r0, 8009436 <_svfiprintf_r+0x152>
 8009424:	2340      	movs	r3, #64	; 0x40
 8009426:	eba0 000a 	sub.w	r0, r0, sl
 800942a:	fa03 f000 	lsl.w	r0, r3, r0
 800942e:	9b04      	ldr	r3, [sp, #16]
 8009430:	4303      	orrs	r3, r0
 8009432:	3401      	adds	r4, #1
 8009434:	9304      	str	r3, [sp, #16]
 8009436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800943a:	4826      	ldr	r0, [pc, #152]	; (80094d4 <_svfiprintf_r+0x1f0>)
 800943c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009440:	2206      	movs	r2, #6
 8009442:	f7f6 fedd 	bl	8000200 <memchr>
 8009446:	2800      	cmp	r0, #0
 8009448:	d038      	beq.n	80094bc <_svfiprintf_r+0x1d8>
 800944a:	4b23      	ldr	r3, [pc, #140]	; (80094d8 <_svfiprintf_r+0x1f4>)
 800944c:	bb1b      	cbnz	r3, 8009496 <_svfiprintf_r+0x1b2>
 800944e:	9b03      	ldr	r3, [sp, #12]
 8009450:	3307      	adds	r3, #7
 8009452:	f023 0307 	bic.w	r3, r3, #7
 8009456:	3308      	adds	r3, #8
 8009458:	9303      	str	r3, [sp, #12]
 800945a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800945c:	4433      	add	r3, r6
 800945e:	9309      	str	r3, [sp, #36]	; 0x24
 8009460:	e767      	b.n	8009332 <_svfiprintf_r+0x4e>
 8009462:	fb0c 3202 	mla	r2, ip, r2, r3
 8009466:	460c      	mov	r4, r1
 8009468:	2001      	movs	r0, #1
 800946a:	e7a5      	b.n	80093b8 <_svfiprintf_r+0xd4>
 800946c:	2300      	movs	r3, #0
 800946e:	3401      	adds	r4, #1
 8009470:	9305      	str	r3, [sp, #20]
 8009472:	4619      	mov	r1, r3
 8009474:	f04f 0c0a 	mov.w	ip, #10
 8009478:	4620      	mov	r0, r4
 800947a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800947e:	3a30      	subs	r2, #48	; 0x30
 8009480:	2a09      	cmp	r2, #9
 8009482:	d903      	bls.n	800948c <_svfiprintf_r+0x1a8>
 8009484:	2b00      	cmp	r3, #0
 8009486:	d0c5      	beq.n	8009414 <_svfiprintf_r+0x130>
 8009488:	9105      	str	r1, [sp, #20]
 800948a:	e7c3      	b.n	8009414 <_svfiprintf_r+0x130>
 800948c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009490:	4604      	mov	r4, r0
 8009492:	2301      	movs	r3, #1
 8009494:	e7f0      	b.n	8009478 <_svfiprintf_r+0x194>
 8009496:	ab03      	add	r3, sp, #12
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	462a      	mov	r2, r5
 800949c:	4b0f      	ldr	r3, [pc, #60]	; (80094dc <_svfiprintf_r+0x1f8>)
 800949e:	a904      	add	r1, sp, #16
 80094a0:	4638      	mov	r0, r7
 80094a2:	f3af 8000 	nop.w
 80094a6:	1c42      	adds	r2, r0, #1
 80094a8:	4606      	mov	r6, r0
 80094aa:	d1d6      	bne.n	800945a <_svfiprintf_r+0x176>
 80094ac:	89ab      	ldrh	r3, [r5, #12]
 80094ae:	065b      	lsls	r3, r3, #25
 80094b0:	f53f af2c 	bmi.w	800930c <_svfiprintf_r+0x28>
 80094b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094b6:	b01d      	add	sp, #116	; 0x74
 80094b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094bc:	ab03      	add	r3, sp, #12
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	462a      	mov	r2, r5
 80094c2:	4b06      	ldr	r3, [pc, #24]	; (80094dc <_svfiprintf_r+0x1f8>)
 80094c4:	a904      	add	r1, sp, #16
 80094c6:	4638      	mov	r0, r7
 80094c8:	f000 f9d4 	bl	8009874 <_printf_i>
 80094cc:	e7eb      	b.n	80094a6 <_svfiprintf_r+0x1c2>
 80094ce:	bf00      	nop
 80094d0:	0800d90a 	.word	0x0800d90a
 80094d4:	0800d914 	.word	0x0800d914
 80094d8:	00000000 	.word	0x00000000
 80094dc:	0800922d 	.word	0x0800922d
 80094e0:	0800d910 	.word	0x0800d910

080094e4 <__sfputc_r>:
 80094e4:	6893      	ldr	r3, [r2, #8]
 80094e6:	3b01      	subs	r3, #1
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	b410      	push	{r4}
 80094ec:	6093      	str	r3, [r2, #8]
 80094ee:	da08      	bge.n	8009502 <__sfputc_r+0x1e>
 80094f0:	6994      	ldr	r4, [r2, #24]
 80094f2:	42a3      	cmp	r3, r4
 80094f4:	db01      	blt.n	80094fa <__sfputc_r+0x16>
 80094f6:	290a      	cmp	r1, #10
 80094f8:	d103      	bne.n	8009502 <__sfputc_r+0x1e>
 80094fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094fe:	f000 badf 	b.w	8009ac0 <__swbuf_r>
 8009502:	6813      	ldr	r3, [r2, #0]
 8009504:	1c58      	adds	r0, r3, #1
 8009506:	6010      	str	r0, [r2, #0]
 8009508:	7019      	strb	r1, [r3, #0]
 800950a:	4608      	mov	r0, r1
 800950c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009510:	4770      	bx	lr

08009512 <__sfputs_r>:
 8009512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009514:	4606      	mov	r6, r0
 8009516:	460f      	mov	r7, r1
 8009518:	4614      	mov	r4, r2
 800951a:	18d5      	adds	r5, r2, r3
 800951c:	42ac      	cmp	r4, r5
 800951e:	d101      	bne.n	8009524 <__sfputs_r+0x12>
 8009520:	2000      	movs	r0, #0
 8009522:	e007      	b.n	8009534 <__sfputs_r+0x22>
 8009524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009528:	463a      	mov	r2, r7
 800952a:	4630      	mov	r0, r6
 800952c:	f7ff ffda 	bl	80094e4 <__sfputc_r>
 8009530:	1c43      	adds	r3, r0, #1
 8009532:	d1f3      	bne.n	800951c <__sfputs_r+0xa>
 8009534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009538 <_vfiprintf_r>:
 8009538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800953c:	460d      	mov	r5, r1
 800953e:	b09d      	sub	sp, #116	; 0x74
 8009540:	4614      	mov	r4, r2
 8009542:	4698      	mov	r8, r3
 8009544:	4606      	mov	r6, r0
 8009546:	b118      	cbz	r0, 8009550 <_vfiprintf_r+0x18>
 8009548:	6983      	ldr	r3, [r0, #24]
 800954a:	b90b      	cbnz	r3, 8009550 <_vfiprintf_r+0x18>
 800954c:	f000 fc9a 	bl	8009e84 <__sinit>
 8009550:	4b89      	ldr	r3, [pc, #548]	; (8009778 <_vfiprintf_r+0x240>)
 8009552:	429d      	cmp	r5, r3
 8009554:	d11b      	bne.n	800958e <_vfiprintf_r+0x56>
 8009556:	6875      	ldr	r5, [r6, #4]
 8009558:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800955a:	07d9      	lsls	r1, r3, #31
 800955c:	d405      	bmi.n	800956a <_vfiprintf_r+0x32>
 800955e:	89ab      	ldrh	r3, [r5, #12]
 8009560:	059a      	lsls	r2, r3, #22
 8009562:	d402      	bmi.n	800956a <_vfiprintf_r+0x32>
 8009564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009566:	f000 fd2b 	bl	8009fc0 <__retarget_lock_acquire_recursive>
 800956a:	89ab      	ldrh	r3, [r5, #12]
 800956c:	071b      	lsls	r3, r3, #28
 800956e:	d501      	bpl.n	8009574 <_vfiprintf_r+0x3c>
 8009570:	692b      	ldr	r3, [r5, #16]
 8009572:	b9eb      	cbnz	r3, 80095b0 <_vfiprintf_r+0x78>
 8009574:	4629      	mov	r1, r5
 8009576:	4630      	mov	r0, r6
 8009578:	f000 faf4 	bl	8009b64 <__swsetup_r>
 800957c:	b1c0      	cbz	r0, 80095b0 <_vfiprintf_r+0x78>
 800957e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009580:	07dc      	lsls	r4, r3, #31
 8009582:	d50e      	bpl.n	80095a2 <_vfiprintf_r+0x6a>
 8009584:	f04f 30ff 	mov.w	r0, #4294967295
 8009588:	b01d      	add	sp, #116	; 0x74
 800958a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800958e:	4b7b      	ldr	r3, [pc, #492]	; (800977c <_vfiprintf_r+0x244>)
 8009590:	429d      	cmp	r5, r3
 8009592:	d101      	bne.n	8009598 <_vfiprintf_r+0x60>
 8009594:	68b5      	ldr	r5, [r6, #8]
 8009596:	e7df      	b.n	8009558 <_vfiprintf_r+0x20>
 8009598:	4b79      	ldr	r3, [pc, #484]	; (8009780 <_vfiprintf_r+0x248>)
 800959a:	429d      	cmp	r5, r3
 800959c:	bf08      	it	eq
 800959e:	68f5      	ldreq	r5, [r6, #12]
 80095a0:	e7da      	b.n	8009558 <_vfiprintf_r+0x20>
 80095a2:	89ab      	ldrh	r3, [r5, #12]
 80095a4:	0598      	lsls	r0, r3, #22
 80095a6:	d4ed      	bmi.n	8009584 <_vfiprintf_r+0x4c>
 80095a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095aa:	f000 fd0a 	bl	8009fc2 <__retarget_lock_release_recursive>
 80095ae:	e7e9      	b.n	8009584 <_vfiprintf_r+0x4c>
 80095b0:	2300      	movs	r3, #0
 80095b2:	9309      	str	r3, [sp, #36]	; 0x24
 80095b4:	2320      	movs	r3, #32
 80095b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80095be:	2330      	movs	r3, #48	; 0x30
 80095c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009784 <_vfiprintf_r+0x24c>
 80095c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095c8:	f04f 0901 	mov.w	r9, #1
 80095cc:	4623      	mov	r3, r4
 80095ce:	469a      	mov	sl, r3
 80095d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095d4:	b10a      	cbz	r2, 80095da <_vfiprintf_r+0xa2>
 80095d6:	2a25      	cmp	r2, #37	; 0x25
 80095d8:	d1f9      	bne.n	80095ce <_vfiprintf_r+0x96>
 80095da:	ebba 0b04 	subs.w	fp, sl, r4
 80095de:	d00b      	beq.n	80095f8 <_vfiprintf_r+0xc0>
 80095e0:	465b      	mov	r3, fp
 80095e2:	4622      	mov	r2, r4
 80095e4:	4629      	mov	r1, r5
 80095e6:	4630      	mov	r0, r6
 80095e8:	f7ff ff93 	bl	8009512 <__sfputs_r>
 80095ec:	3001      	adds	r0, #1
 80095ee:	f000 80aa 	beq.w	8009746 <_vfiprintf_r+0x20e>
 80095f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095f4:	445a      	add	r2, fp
 80095f6:	9209      	str	r2, [sp, #36]	; 0x24
 80095f8:	f89a 3000 	ldrb.w	r3, [sl]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	f000 80a2 	beq.w	8009746 <_vfiprintf_r+0x20e>
 8009602:	2300      	movs	r3, #0
 8009604:	f04f 32ff 	mov.w	r2, #4294967295
 8009608:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800960c:	f10a 0a01 	add.w	sl, sl, #1
 8009610:	9304      	str	r3, [sp, #16]
 8009612:	9307      	str	r3, [sp, #28]
 8009614:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009618:	931a      	str	r3, [sp, #104]	; 0x68
 800961a:	4654      	mov	r4, sl
 800961c:	2205      	movs	r2, #5
 800961e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009622:	4858      	ldr	r0, [pc, #352]	; (8009784 <_vfiprintf_r+0x24c>)
 8009624:	f7f6 fdec 	bl	8000200 <memchr>
 8009628:	9a04      	ldr	r2, [sp, #16]
 800962a:	b9d8      	cbnz	r0, 8009664 <_vfiprintf_r+0x12c>
 800962c:	06d1      	lsls	r1, r2, #27
 800962e:	bf44      	itt	mi
 8009630:	2320      	movmi	r3, #32
 8009632:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009636:	0713      	lsls	r3, r2, #28
 8009638:	bf44      	itt	mi
 800963a:	232b      	movmi	r3, #43	; 0x2b
 800963c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009640:	f89a 3000 	ldrb.w	r3, [sl]
 8009644:	2b2a      	cmp	r3, #42	; 0x2a
 8009646:	d015      	beq.n	8009674 <_vfiprintf_r+0x13c>
 8009648:	9a07      	ldr	r2, [sp, #28]
 800964a:	4654      	mov	r4, sl
 800964c:	2000      	movs	r0, #0
 800964e:	f04f 0c0a 	mov.w	ip, #10
 8009652:	4621      	mov	r1, r4
 8009654:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009658:	3b30      	subs	r3, #48	; 0x30
 800965a:	2b09      	cmp	r3, #9
 800965c:	d94e      	bls.n	80096fc <_vfiprintf_r+0x1c4>
 800965e:	b1b0      	cbz	r0, 800968e <_vfiprintf_r+0x156>
 8009660:	9207      	str	r2, [sp, #28]
 8009662:	e014      	b.n	800968e <_vfiprintf_r+0x156>
 8009664:	eba0 0308 	sub.w	r3, r0, r8
 8009668:	fa09 f303 	lsl.w	r3, r9, r3
 800966c:	4313      	orrs	r3, r2
 800966e:	9304      	str	r3, [sp, #16]
 8009670:	46a2      	mov	sl, r4
 8009672:	e7d2      	b.n	800961a <_vfiprintf_r+0xe2>
 8009674:	9b03      	ldr	r3, [sp, #12]
 8009676:	1d19      	adds	r1, r3, #4
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	9103      	str	r1, [sp, #12]
 800967c:	2b00      	cmp	r3, #0
 800967e:	bfbb      	ittet	lt
 8009680:	425b      	neglt	r3, r3
 8009682:	f042 0202 	orrlt.w	r2, r2, #2
 8009686:	9307      	strge	r3, [sp, #28]
 8009688:	9307      	strlt	r3, [sp, #28]
 800968a:	bfb8      	it	lt
 800968c:	9204      	strlt	r2, [sp, #16]
 800968e:	7823      	ldrb	r3, [r4, #0]
 8009690:	2b2e      	cmp	r3, #46	; 0x2e
 8009692:	d10c      	bne.n	80096ae <_vfiprintf_r+0x176>
 8009694:	7863      	ldrb	r3, [r4, #1]
 8009696:	2b2a      	cmp	r3, #42	; 0x2a
 8009698:	d135      	bne.n	8009706 <_vfiprintf_r+0x1ce>
 800969a:	9b03      	ldr	r3, [sp, #12]
 800969c:	1d1a      	adds	r2, r3, #4
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	9203      	str	r2, [sp, #12]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	bfb8      	it	lt
 80096a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80096aa:	3402      	adds	r4, #2
 80096ac:	9305      	str	r3, [sp, #20]
 80096ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009794 <_vfiprintf_r+0x25c>
 80096b2:	7821      	ldrb	r1, [r4, #0]
 80096b4:	2203      	movs	r2, #3
 80096b6:	4650      	mov	r0, sl
 80096b8:	f7f6 fda2 	bl	8000200 <memchr>
 80096bc:	b140      	cbz	r0, 80096d0 <_vfiprintf_r+0x198>
 80096be:	2340      	movs	r3, #64	; 0x40
 80096c0:	eba0 000a 	sub.w	r0, r0, sl
 80096c4:	fa03 f000 	lsl.w	r0, r3, r0
 80096c8:	9b04      	ldr	r3, [sp, #16]
 80096ca:	4303      	orrs	r3, r0
 80096cc:	3401      	adds	r4, #1
 80096ce:	9304      	str	r3, [sp, #16]
 80096d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096d4:	482c      	ldr	r0, [pc, #176]	; (8009788 <_vfiprintf_r+0x250>)
 80096d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096da:	2206      	movs	r2, #6
 80096dc:	f7f6 fd90 	bl	8000200 <memchr>
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d03f      	beq.n	8009764 <_vfiprintf_r+0x22c>
 80096e4:	4b29      	ldr	r3, [pc, #164]	; (800978c <_vfiprintf_r+0x254>)
 80096e6:	bb1b      	cbnz	r3, 8009730 <_vfiprintf_r+0x1f8>
 80096e8:	9b03      	ldr	r3, [sp, #12]
 80096ea:	3307      	adds	r3, #7
 80096ec:	f023 0307 	bic.w	r3, r3, #7
 80096f0:	3308      	adds	r3, #8
 80096f2:	9303      	str	r3, [sp, #12]
 80096f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096f6:	443b      	add	r3, r7
 80096f8:	9309      	str	r3, [sp, #36]	; 0x24
 80096fa:	e767      	b.n	80095cc <_vfiprintf_r+0x94>
 80096fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009700:	460c      	mov	r4, r1
 8009702:	2001      	movs	r0, #1
 8009704:	e7a5      	b.n	8009652 <_vfiprintf_r+0x11a>
 8009706:	2300      	movs	r3, #0
 8009708:	3401      	adds	r4, #1
 800970a:	9305      	str	r3, [sp, #20]
 800970c:	4619      	mov	r1, r3
 800970e:	f04f 0c0a 	mov.w	ip, #10
 8009712:	4620      	mov	r0, r4
 8009714:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009718:	3a30      	subs	r2, #48	; 0x30
 800971a:	2a09      	cmp	r2, #9
 800971c:	d903      	bls.n	8009726 <_vfiprintf_r+0x1ee>
 800971e:	2b00      	cmp	r3, #0
 8009720:	d0c5      	beq.n	80096ae <_vfiprintf_r+0x176>
 8009722:	9105      	str	r1, [sp, #20]
 8009724:	e7c3      	b.n	80096ae <_vfiprintf_r+0x176>
 8009726:	fb0c 2101 	mla	r1, ip, r1, r2
 800972a:	4604      	mov	r4, r0
 800972c:	2301      	movs	r3, #1
 800972e:	e7f0      	b.n	8009712 <_vfiprintf_r+0x1da>
 8009730:	ab03      	add	r3, sp, #12
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	462a      	mov	r2, r5
 8009736:	4b16      	ldr	r3, [pc, #88]	; (8009790 <_vfiprintf_r+0x258>)
 8009738:	a904      	add	r1, sp, #16
 800973a:	4630      	mov	r0, r6
 800973c:	f3af 8000 	nop.w
 8009740:	4607      	mov	r7, r0
 8009742:	1c78      	adds	r0, r7, #1
 8009744:	d1d6      	bne.n	80096f4 <_vfiprintf_r+0x1bc>
 8009746:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009748:	07d9      	lsls	r1, r3, #31
 800974a:	d405      	bmi.n	8009758 <_vfiprintf_r+0x220>
 800974c:	89ab      	ldrh	r3, [r5, #12]
 800974e:	059a      	lsls	r2, r3, #22
 8009750:	d402      	bmi.n	8009758 <_vfiprintf_r+0x220>
 8009752:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009754:	f000 fc35 	bl	8009fc2 <__retarget_lock_release_recursive>
 8009758:	89ab      	ldrh	r3, [r5, #12]
 800975a:	065b      	lsls	r3, r3, #25
 800975c:	f53f af12 	bmi.w	8009584 <_vfiprintf_r+0x4c>
 8009760:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009762:	e711      	b.n	8009588 <_vfiprintf_r+0x50>
 8009764:	ab03      	add	r3, sp, #12
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	462a      	mov	r2, r5
 800976a:	4b09      	ldr	r3, [pc, #36]	; (8009790 <_vfiprintf_r+0x258>)
 800976c:	a904      	add	r1, sp, #16
 800976e:	4630      	mov	r0, r6
 8009770:	f000 f880 	bl	8009874 <_printf_i>
 8009774:	e7e4      	b.n	8009740 <_vfiprintf_r+0x208>
 8009776:	bf00      	nop
 8009778:	0800d960 	.word	0x0800d960
 800977c:	0800d980 	.word	0x0800d980
 8009780:	0800d940 	.word	0x0800d940
 8009784:	0800d90a 	.word	0x0800d90a
 8009788:	0800d914 	.word	0x0800d914
 800978c:	00000000 	.word	0x00000000
 8009790:	08009513 	.word	0x08009513
 8009794:	0800d910 	.word	0x0800d910

08009798 <_printf_common>:
 8009798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800979c:	4616      	mov	r6, r2
 800979e:	4699      	mov	r9, r3
 80097a0:	688a      	ldr	r2, [r1, #8]
 80097a2:	690b      	ldr	r3, [r1, #16]
 80097a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097a8:	4293      	cmp	r3, r2
 80097aa:	bfb8      	it	lt
 80097ac:	4613      	movlt	r3, r2
 80097ae:	6033      	str	r3, [r6, #0]
 80097b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097b4:	4607      	mov	r7, r0
 80097b6:	460c      	mov	r4, r1
 80097b8:	b10a      	cbz	r2, 80097be <_printf_common+0x26>
 80097ba:	3301      	adds	r3, #1
 80097bc:	6033      	str	r3, [r6, #0]
 80097be:	6823      	ldr	r3, [r4, #0]
 80097c0:	0699      	lsls	r1, r3, #26
 80097c2:	bf42      	ittt	mi
 80097c4:	6833      	ldrmi	r3, [r6, #0]
 80097c6:	3302      	addmi	r3, #2
 80097c8:	6033      	strmi	r3, [r6, #0]
 80097ca:	6825      	ldr	r5, [r4, #0]
 80097cc:	f015 0506 	ands.w	r5, r5, #6
 80097d0:	d106      	bne.n	80097e0 <_printf_common+0x48>
 80097d2:	f104 0a19 	add.w	sl, r4, #25
 80097d6:	68e3      	ldr	r3, [r4, #12]
 80097d8:	6832      	ldr	r2, [r6, #0]
 80097da:	1a9b      	subs	r3, r3, r2
 80097dc:	42ab      	cmp	r3, r5
 80097de:	dc26      	bgt.n	800982e <_printf_common+0x96>
 80097e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80097e4:	1e13      	subs	r3, r2, #0
 80097e6:	6822      	ldr	r2, [r4, #0]
 80097e8:	bf18      	it	ne
 80097ea:	2301      	movne	r3, #1
 80097ec:	0692      	lsls	r2, r2, #26
 80097ee:	d42b      	bmi.n	8009848 <_printf_common+0xb0>
 80097f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097f4:	4649      	mov	r1, r9
 80097f6:	4638      	mov	r0, r7
 80097f8:	47c0      	blx	r8
 80097fa:	3001      	adds	r0, #1
 80097fc:	d01e      	beq.n	800983c <_printf_common+0xa4>
 80097fe:	6823      	ldr	r3, [r4, #0]
 8009800:	68e5      	ldr	r5, [r4, #12]
 8009802:	6832      	ldr	r2, [r6, #0]
 8009804:	f003 0306 	and.w	r3, r3, #6
 8009808:	2b04      	cmp	r3, #4
 800980a:	bf08      	it	eq
 800980c:	1aad      	subeq	r5, r5, r2
 800980e:	68a3      	ldr	r3, [r4, #8]
 8009810:	6922      	ldr	r2, [r4, #16]
 8009812:	bf0c      	ite	eq
 8009814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009818:	2500      	movne	r5, #0
 800981a:	4293      	cmp	r3, r2
 800981c:	bfc4      	itt	gt
 800981e:	1a9b      	subgt	r3, r3, r2
 8009820:	18ed      	addgt	r5, r5, r3
 8009822:	2600      	movs	r6, #0
 8009824:	341a      	adds	r4, #26
 8009826:	42b5      	cmp	r5, r6
 8009828:	d11a      	bne.n	8009860 <_printf_common+0xc8>
 800982a:	2000      	movs	r0, #0
 800982c:	e008      	b.n	8009840 <_printf_common+0xa8>
 800982e:	2301      	movs	r3, #1
 8009830:	4652      	mov	r2, sl
 8009832:	4649      	mov	r1, r9
 8009834:	4638      	mov	r0, r7
 8009836:	47c0      	blx	r8
 8009838:	3001      	adds	r0, #1
 800983a:	d103      	bne.n	8009844 <_printf_common+0xac>
 800983c:	f04f 30ff 	mov.w	r0, #4294967295
 8009840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009844:	3501      	adds	r5, #1
 8009846:	e7c6      	b.n	80097d6 <_printf_common+0x3e>
 8009848:	18e1      	adds	r1, r4, r3
 800984a:	1c5a      	adds	r2, r3, #1
 800984c:	2030      	movs	r0, #48	; 0x30
 800984e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009852:	4422      	add	r2, r4
 8009854:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009858:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800985c:	3302      	adds	r3, #2
 800985e:	e7c7      	b.n	80097f0 <_printf_common+0x58>
 8009860:	2301      	movs	r3, #1
 8009862:	4622      	mov	r2, r4
 8009864:	4649      	mov	r1, r9
 8009866:	4638      	mov	r0, r7
 8009868:	47c0      	blx	r8
 800986a:	3001      	adds	r0, #1
 800986c:	d0e6      	beq.n	800983c <_printf_common+0xa4>
 800986e:	3601      	adds	r6, #1
 8009870:	e7d9      	b.n	8009826 <_printf_common+0x8e>
	...

08009874 <_printf_i>:
 8009874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009878:	7e0f      	ldrb	r7, [r1, #24]
 800987a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800987c:	2f78      	cmp	r7, #120	; 0x78
 800987e:	4691      	mov	r9, r2
 8009880:	4680      	mov	r8, r0
 8009882:	460c      	mov	r4, r1
 8009884:	469a      	mov	sl, r3
 8009886:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800988a:	d807      	bhi.n	800989c <_printf_i+0x28>
 800988c:	2f62      	cmp	r7, #98	; 0x62
 800988e:	d80a      	bhi.n	80098a6 <_printf_i+0x32>
 8009890:	2f00      	cmp	r7, #0
 8009892:	f000 80d8 	beq.w	8009a46 <_printf_i+0x1d2>
 8009896:	2f58      	cmp	r7, #88	; 0x58
 8009898:	f000 80a3 	beq.w	80099e2 <_printf_i+0x16e>
 800989c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098a4:	e03a      	b.n	800991c <_printf_i+0xa8>
 80098a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098aa:	2b15      	cmp	r3, #21
 80098ac:	d8f6      	bhi.n	800989c <_printf_i+0x28>
 80098ae:	a101      	add	r1, pc, #4	; (adr r1, 80098b4 <_printf_i+0x40>)
 80098b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098b4:	0800990d 	.word	0x0800990d
 80098b8:	08009921 	.word	0x08009921
 80098bc:	0800989d 	.word	0x0800989d
 80098c0:	0800989d 	.word	0x0800989d
 80098c4:	0800989d 	.word	0x0800989d
 80098c8:	0800989d 	.word	0x0800989d
 80098cc:	08009921 	.word	0x08009921
 80098d0:	0800989d 	.word	0x0800989d
 80098d4:	0800989d 	.word	0x0800989d
 80098d8:	0800989d 	.word	0x0800989d
 80098dc:	0800989d 	.word	0x0800989d
 80098e0:	08009a2d 	.word	0x08009a2d
 80098e4:	08009951 	.word	0x08009951
 80098e8:	08009a0f 	.word	0x08009a0f
 80098ec:	0800989d 	.word	0x0800989d
 80098f0:	0800989d 	.word	0x0800989d
 80098f4:	08009a4f 	.word	0x08009a4f
 80098f8:	0800989d 	.word	0x0800989d
 80098fc:	08009951 	.word	0x08009951
 8009900:	0800989d 	.word	0x0800989d
 8009904:	0800989d 	.word	0x0800989d
 8009908:	08009a17 	.word	0x08009a17
 800990c:	682b      	ldr	r3, [r5, #0]
 800990e:	1d1a      	adds	r2, r3, #4
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	602a      	str	r2, [r5, #0]
 8009914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800991c:	2301      	movs	r3, #1
 800991e:	e0a3      	b.n	8009a68 <_printf_i+0x1f4>
 8009920:	6820      	ldr	r0, [r4, #0]
 8009922:	6829      	ldr	r1, [r5, #0]
 8009924:	0606      	lsls	r6, r0, #24
 8009926:	f101 0304 	add.w	r3, r1, #4
 800992a:	d50a      	bpl.n	8009942 <_printf_i+0xce>
 800992c:	680e      	ldr	r6, [r1, #0]
 800992e:	602b      	str	r3, [r5, #0]
 8009930:	2e00      	cmp	r6, #0
 8009932:	da03      	bge.n	800993c <_printf_i+0xc8>
 8009934:	232d      	movs	r3, #45	; 0x2d
 8009936:	4276      	negs	r6, r6
 8009938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800993c:	485e      	ldr	r0, [pc, #376]	; (8009ab8 <_printf_i+0x244>)
 800993e:	230a      	movs	r3, #10
 8009940:	e019      	b.n	8009976 <_printf_i+0x102>
 8009942:	680e      	ldr	r6, [r1, #0]
 8009944:	602b      	str	r3, [r5, #0]
 8009946:	f010 0f40 	tst.w	r0, #64	; 0x40
 800994a:	bf18      	it	ne
 800994c:	b236      	sxthne	r6, r6
 800994e:	e7ef      	b.n	8009930 <_printf_i+0xbc>
 8009950:	682b      	ldr	r3, [r5, #0]
 8009952:	6820      	ldr	r0, [r4, #0]
 8009954:	1d19      	adds	r1, r3, #4
 8009956:	6029      	str	r1, [r5, #0]
 8009958:	0601      	lsls	r1, r0, #24
 800995a:	d501      	bpl.n	8009960 <_printf_i+0xec>
 800995c:	681e      	ldr	r6, [r3, #0]
 800995e:	e002      	b.n	8009966 <_printf_i+0xf2>
 8009960:	0646      	lsls	r6, r0, #25
 8009962:	d5fb      	bpl.n	800995c <_printf_i+0xe8>
 8009964:	881e      	ldrh	r6, [r3, #0]
 8009966:	4854      	ldr	r0, [pc, #336]	; (8009ab8 <_printf_i+0x244>)
 8009968:	2f6f      	cmp	r7, #111	; 0x6f
 800996a:	bf0c      	ite	eq
 800996c:	2308      	moveq	r3, #8
 800996e:	230a      	movne	r3, #10
 8009970:	2100      	movs	r1, #0
 8009972:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009976:	6865      	ldr	r5, [r4, #4]
 8009978:	60a5      	str	r5, [r4, #8]
 800997a:	2d00      	cmp	r5, #0
 800997c:	bfa2      	ittt	ge
 800997e:	6821      	ldrge	r1, [r4, #0]
 8009980:	f021 0104 	bicge.w	r1, r1, #4
 8009984:	6021      	strge	r1, [r4, #0]
 8009986:	b90e      	cbnz	r6, 800998c <_printf_i+0x118>
 8009988:	2d00      	cmp	r5, #0
 800998a:	d04d      	beq.n	8009a28 <_printf_i+0x1b4>
 800998c:	4615      	mov	r5, r2
 800998e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009992:	fb03 6711 	mls	r7, r3, r1, r6
 8009996:	5dc7      	ldrb	r7, [r0, r7]
 8009998:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800999c:	4637      	mov	r7, r6
 800999e:	42bb      	cmp	r3, r7
 80099a0:	460e      	mov	r6, r1
 80099a2:	d9f4      	bls.n	800998e <_printf_i+0x11a>
 80099a4:	2b08      	cmp	r3, #8
 80099a6:	d10b      	bne.n	80099c0 <_printf_i+0x14c>
 80099a8:	6823      	ldr	r3, [r4, #0]
 80099aa:	07de      	lsls	r6, r3, #31
 80099ac:	d508      	bpl.n	80099c0 <_printf_i+0x14c>
 80099ae:	6923      	ldr	r3, [r4, #16]
 80099b0:	6861      	ldr	r1, [r4, #4]
 80099b2:	4299      	cmp	r1, r3
 80099b4:	bfde      	ittt	le
 80099b6:	2330      	movle	r3, #48	; 0x30
 80099b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80099c0:	1b52      	subs	r2, r2, r5
 80099c2:	6122      	str	r2, [r4, #16]
 80099c4:	f8cd a000 	str.w	sl, [sp]
 80099c8:	464b      	mov	r3, r9
 80099ca:	aa03      	add	r2, sp, #12
 80099cc:	4621      	mov	r1, r4
 80099ce:	4640      	mov	r0, r8
 80099d0:	f7ff fee2 	bl	8009798 <_printf_common>
 80099d4:	3001      	adds	r0, #1
 80099d6:	d14c      	bne.n	8009a72 <_printf_i+0x1fe>
 80099d8:	f04f 30ff 	mov.w	r0, #4294967295
 80099dc:	b004      	add	sp, #16
 80099de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099e2:	4835      	ldr	r0, [pc, #212]	; (8009ab8 <_printf_i+0x244>)
 80099e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80099e8:	6829      	ldr	r1, [r5, #0]
 80099ea:	6823      	ldr	r3, [r4, #0]
 80099ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80099f0:	6029      	str	r1, [r5, #0]
 80099f2:	061d      	lsls	r5, r3, #24
 80099f4:	d514      	bpl.n	8009a20 <_printf_i+0x1ac>
 80099f6:	07df      	lsls	r7, r3, #31
 80099f8:	bf44      	itt	mi
 80099fa:	f043 0320 	orrmi.w	r3, r3, #32
 80099fe:	6023      	strmi	r3, [r4, #0]
 8009a00:	b91e      	cbnz	r6, 8009a0a <_printf_i+0x196>
 8009a02:	6823      	ldr	r3, [r4, #0]
 8009a04:	f023 0320 	bic.w	r3, r3, #32
 8009a08:	6023      	str	r3, [r4, #0]
 8009a0a:	2310      	movs	r3, #16
 8009a0c:	e7b0      	b.n	8009970 <_printf_i+0xfc>
 8009a0e:	6823      	ldr	r3, [r4, #0]
 8009a10:	f043 0320 	orr.w	r3, r3, #32
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	2378      	movs	r3, #120	; 0x78
 8009a18:	4828      	ldr	r0, [pc, #160]	; (8009abc <_printf_i+0x248>)
 8009a1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a1e:	e7e3      	b.n	80099e8 <_printf_i+0x174>
 8009a20:	0659      	lsls	r1, r3, #25
 8009a22:	bf48      	it	mi
 8009a24:	b2b6      	uxthmi	r6, r6
 8009a26:	e7e6      	b.n	80099f6 <_printf_i+0x182>
 8009a28:	4615      	mov	r5, r2
 8009a2a:	e7bb      	b.n	80099a4 <_printf_i+0x130>
 8009a2c:	682b      	ldr	r3, [r5, #0]
 8009a2e:	6826      	ldr	r6, [r4, #0]
 8009a30:	6961      	ldr	r1, [r4, #20]
 8009a32:	1d18      	adds	r0, r3, #4
 8009a34:	6028      	str	r0, [r5, #0]
 8009a36:	0635      	lsls	r5, r6, #24
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	d501      	bpl.n	8009a40 <_printf_i+0x1cc>
 8009a3c:	6019      	str	r1, [r3, #0]
 8009a3e:	e002      	b.n	8009a46 <_printf_i+0x1d2>
 8009a40:	0670      	lsls	r0, r6, #25
 8009a42:	d5fb      	bpl.n	8009a3c <_printf_i+0x1c8>
 8009a44:	8019      	strh	r1, [r3, #0]
 8009a46:	2300      	movs	r3, #0
 8009a48:	6123      	str	r3, [r4, #16]
 8009a4a:	4615      	mov	r5, r2
 8009a4c:	e7ba      	b.n	80099c4 <_printf_i+0x150>
 8009a4e:	682b      	ldr	r3, [r5, #0]
 8009a50:	1d1a      	adds	r2, r3, #4
 8009a52:	602a      	str	r2, [r5, #0]
 8009a54:	681d      	ldr	r5, [r3, #0]
 8009a56:	6862      	ldr	r2, [r4, #4]
 8009a58:	2100      	movs	r1, #0
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	f7f6 fbd0 	bl	8000200 <memchr>
 8009a60:	b108      	cbz	r0, 8009a66 <_printf_i+0x1f2>
 8009a62:	1b40      	subs	r0, r0, r5
 8009a64:	6060      	str	r0, [r4, #4]
 8009a66:	6863      	ldr	r3, [r4, #4]
 8009a68:	6123      	str	r3, [r4, #16]
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a70:	e7a8      	b.n	80099c4 <_printf_i+0x150>
 8009a72:	6923      	ldr	r3, [r4, #16]
 8009a74:	462a      	mov	r2, r5
 8009a76:	4649      	mov	r1, r9
 8009a78:	4640      	mov	r0, r8
 8009a7a:	47d0      	blx	sl
 8009a7c:	3001      	adds	r0, #1
 8009a7e:	d0ab      	beq.n	80099d8 <_printf_i+0x164>
 8009a80:	6823      	ldr	r3, [r4, #0]
 8009a82:	079b      	lsls	r3, r3, #30
 8009a84:	d413      	bmi.n	8009aae <_printf_i+0x23a>
 8009a86:	68e0      	ldr	r0, [r4, #12]
 8009a88:	9b03      	ldr	r3, [sp, #12]
 8009a8a:	4298      	cmp	r0, r3
 8009a8c:	bfb8      	it	lt
 8009a8e:	4618      	movlt	r0, r3
 8009a90:	e7a4      	b.n	80099dc <_printf_i+0x168>
 8009a92:	2301      	movs	r3, #1
 8009a94:	4632      	mov	r2, r6
 8009a96:	4649      	mov	r1, r9
 8009a98:	4640      	mov	r0, r8
 8009a9a:	47d0      	blx	sl
 8009a9c:	3001      	adds	r0, #1
 8009a9e:	d09b      	beq.n	80099d8 <_printf_i+0x164>
 8009aa0:	3501      	adds	r5, #1
 8009aa2:	68e3      	ldr	r3, [r4, #12]
 8009aa4:	9903      	ldr	r1, [sp, #12]
 8009aa6:	1a5b      	subs	r3, r3, r1
 8009aa8:	42ab      	cmp	r3, r5
 8009aaa:	dcf2      	bgt.n	8009a92 <_printf_i+0x21e>
 8009aac:	e7eb      	b.n	8009a86 <_printf_i+0x212>
 8009aae:	2500      	movs	r5, #0
 8009ab0:	f104 0619 	add.w	r6, r4, #25
 8009ab4:	e7f5      	b.n	8009aa2 <_printf_i+0x22e>
 8009ab6:	bf00      	nop
 8009ab8:	0800d91b 	.word	0x0800d91b
 8009abc:	0800d92c 	.word	0x0800d92c

08009ac0 <__swbuf_r>:
 8009ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac2:	460e      	mov	r6, r1
 8009ac4:	4614      	mov	r4, r2
 8009ac6:	4605      	mov	r5, r0
 8009ac8:	b118      	cbz	r0, 8009ad2 <__swbuf_r+0x12>
 8009aca:	6983      	ldr	r3, [r0, #24]
 8009acc:	b90b      	cbnz	r3, 8009ad2 <__swbuf_r+0x12>
 8009ace:	f000 f9d9 	bl	8009e84 <__sinit>
 8009ad2:	4b21      	ldr	r3, [pc, #132]	; (8009b58 <__swbuf_r+0x98>)
 8009ad4:	429c      	cmp	r4, r3
 8009ad6:	d12b      	bne.n	8009b30 <__swbuf_r+0x70>
 8009ad8:	686c      	ldr	r4, [r5, #4]
 8009ada:	69a3      	ldr	r3, [r4, #24]
 8009adc:	60a3      	str	r3, [r4, #8]
 8009ade:	89a3      	ldrh	r3, [r4, #12]
 8009ae0:	071a      	lsls	r2, r3, #28
 8009ae2:	d52f      	bpl.n	8009b44 <__swbuf_r+0x84>
 8009ae4:	6923      	ldr	r3, [r4, #16]
 8009ae6:	b36b      	cbz	r3, 8009b44 <__swbuf_r+0x84>
 8009ae8:	6923      	ldr	r3, [r4, #16]
 8009aea:	6820      	ldr	r0, [r4, #0]
 8009aec:	1ac0      	subs	r0, r0, r3
 8009aee:	6963      	ldr	r3, [r4, #20]
 8009af0:	b2f6      	uxtb	r6, r6
 8009af2:	4283      	cmp	r3, r0
 8009af4:	4637      	mov	r7, r6
 8009af6:	dc04      	bgt.n	8009b02 <__swbuf_r+0x42>
 8009af8:	4621      	mov	r1, r4
 8009afa:	4628      	mov	r0, r5
 8009afc:	f000 f92e 	bl	8009d5c <_fflush_r>
 8009b00:	bb30      	cbnz	r0, 8009b50 <__swbuf_r+0x90>
 8009b02:	68a3      	ldr	r3, [r4, #8]
 8009b04:	3b01      	subs	r3, #1
 8009b06:	60a3      	str	r3, [r4, #8]
 8009b08:	6823      	ldr	r3, [r4, #0]
 8009b0a:	1c5a      	adds	r2, r3, #1
 8009b0c:	6022      	str	r2, [r4, #0]
 8009b0e:	701e      	strb	r6, [r3, #0]
 8009b10:	6963      	ldr	r3, [r4, #20]
 8009b12:	3001      	adds	r0, #1
 8009b14:	4283      	cmp	r3, r0
 8009b16:	d004      	beq.n	8009b22 <__swbuf_r+0x62>
 8009b18:	89a3      	ldrh	r3, [r4, #12]
 8009b1a:	07db      	lsls	r3, r3, #31
 8009b1c:	d506      	bpl.n	8009b2c <__swbuf_r+0x6c>
 8009b1e:	2e0a      	cmp	r6, #10
 8009b20:	d104      	bne.n	8009b2c <__swbuf_r+0x6c>
 8009b22:	4621      	mov	r1, r4
 8009b24:	4628      	mov	r0, r5
 8009b26:	f000 f919 	bl	8009d5c <_fflush_r>
 8009b2a:	b988      	cbnz	r0, 8009b50 <__swbuf_r+0x90>
 8009b2c:	4638      	mov	r0, r7
 8009b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b30:	4b0a      	ldr	r3, [pc, #40]	; (8009b5c <__swbuf_r+0x9c>)
 8009b32:	429c      	cmp	r4, r3
 8009b34:	d101      	bne.n	8009b3a <__swbuf_r+0x7a>
 8009b36:	68ac      	ldr	r4, [r5, #8]
 8009b38:	e7cf      	b.n	8009ada <__swbuf_r+0x1a>
 8009b3a:	4b09      	ldr	r3, [pc, #36]	; (8009b60 <__swbuf_r+0xa0>)
 8009b3c:	429c      	cmp	r4, r3
 8009b3e:	bf08      	it	eq
 8009b40:	68ec      	ldreq	r4, [r5, #12]
 8009b42:	e7ca      	b.n	8009ada <__swbuf_r+0x1a>
 8009b44:	4621      	mov	r1, r4
 8009b46:	4628      	mov	r0, r5
 8009b48:	f000 f80c 	bl	8009b64 <__swsetup_r>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d0cb      	beq.n	8009ae8 <__swbuf_r+0x28>
 8009b50:	f04f 37ff 	mov.w	r7, #4294967295
 8009b54:	e7ea      	b.n	8009b2c <__swbuf_r+0x6c>
 8009b56:	bf00      	nop
 8009b58:	0800d960 	.word	0x0800d960
 8009b5c:	0800d980 	.word	0x0800d980
 8009b60:	0800d940 	.word	0x0800d940

08009b64 <__swsetup_r>:
 8009b64:	4b32      	ldr	r3, [pc, #200]	; (8009c30 <__swsetup_r+0xcc>)
 8009b66:	b570      	push	{r4, r5, r6, lr}
 8009b68:	681d      	ldr	r5, [r3, #0]
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	460c      	mov	r4, r1
 8009b6e:	b125      	cbz	r5, 8009b7a <__swsetup_r+0x16>
 8009b70:	69ab      	ldr	r3, [r5, #24]
 8009b72:	b913      	cbnz	r3, 8009b7a <__swsetup_r+0x16>
 8009b74:	4628      	mov	r0, r5
 8009b76:	f000 f985 	bl	8009e84 <__sinit>
 8009b7a:	4b2e      	ldr	r3, [pc, #184]	; (8009c34 <__swsetup_r+0xd0>)
 8009b7c:	429c      	cmp	r4, r3
 8009b7e:	d10f      	bne.n	8009ba0 <__swsetup_r+0x3c>
 8009b80:	686c      	ldr	r4, [r5, #4]
 8009b82:	89a3      	ldrh	r3, [r4, #12]
 8009b84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b88:	0719      	lsls	r1, r3, #28
 8009b8a:	d42c      	bmi.n	8009be6 <__swsetup_r+0x82>
 8009b8c:	06dd      	lsls	r5, r3, #27
 8009b8e:	d411      	bmi.n	8009bb4 <__swsetup_r+0x50>
 8009b90:	2309      	movs	r3, #9
 8009b92:	6033      	str	r3, [r6, #0]
 8009b94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b98:	81a3      	strh	r3, [r4, #12]
 8009b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b9e:	e03e      	b.n	8009c1e <__swsetup_r+0xba>
 8009ba0:	4b25      	ldr	r3, [pc, #148]	; (8009c38 <__swsetup_r+0xd4>)
 8009ba2:	429c      	cmp	r4, r3
 8009ba4:	d101      	bne.n	8009baa <__swsetup_r+0x46>
 8009ba6:	68ac      	ldr	r4, [r5, #8]
 8009ba8:	e7eb      	b.n	8009b82 <__swsetup_r+0x1e>
 8009baa:	4b24      	ldr	r3, [pc, #144]	; (8009c3c <__swsetup_r+0xd8>)
 8009bac:	429c      	cmp	r4, r3
 8009bae:	bf08      	it	eq
 8009bb0:	68ec      	ldreq	r4, [r5, #12]
 8009bb2:	e7e6      	b.n	8009b82 <__swsetup_r+0x1e>
 8009bb4:	0758      	lsls	r0, r3, #29
 8009bb6:	d512      	bpl.n	8009bde <__swsetup_r+0x7a>
 8009bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bba:	b141      	cbz	r1, 8009bce <__swsetup_r+0x6a>
 8009bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bc0:	4299      	cmp	r1, r3
 8009bc2:	d002      	beq.n	8009bca <__swsetup_r+0x66>
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f7ff f947 	bl	8008e58 <_free_r>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	6363      	str	r3, [r4, #52]	; 0x34
 8009bce:	89a3      	ldrh	r3, [r4, #12]
 8009bd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009bd4:	81a3      	strh	r3, [r4, #12]
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	6063      	str	r3, [r4, #4]
 8009bda:	6923      	ldr	r3, [r4, #16]
 8009bdc:	6023      	str	r3, [r4, #0]
 8009bde:	89a3      	ldrh	r3, [r4, #12]
 8009be0:	f043 0308 	orr.w	r3, r3, #8
 8009be4:	81a3      	strh	r3, [r4, #12]
 8009be6:	6923      	ldr	r3, [r4, #16]
 8009be8:	b94b      	cbnz	r3, 8009bfe <__swsetup_r+0x9a>
 8009bea:	89a3      	ldrh	r3, [r4, #12]
 8009bec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bf4:	d003      	beq.n	8009bfe <__swsetup_r+0x9a>
 8009bf6:	4621      	mov	r1, r4
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	f000 fa09 	bl	800a010 <__smakebuf_r>
 8009bfe:	89a0      	ldrh	r0, [r4, #12]
 8009c00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c04:	f010 0301 	ands.w	r3, r0, #1
 8009c08:	d00a      	beq.n	8009c20 <__swsetup_r+0xbc>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	60a3      	str	r3, [r4, #8]
 8009c0e:	6963      	ldr	r3, [r4, #20]
 8009c10:	425b      	negs	r3, r3
 8009c12:	61a3      	str	r3, [r4, #24]
 8009c14:	6923      	ldr	r3, [r4, #16]
 8009c16:	b943      	cbnz	r3, 8009c2a <__swsetup_r+0xc6>
 8009c18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c1c:	d1ba      	bne.n	8009b94 <__swsetup_r+0x30>
 8009c1e:	bd70      	pop	{r4, r5, r6, pc}
 8009c20:	0781      	lsls	r1, r0, #30
 8009c22:	bf58      	it	pl
 8009c24:	6963      	ldrpl	r3, [r4, #20]
 8009c26:	60a3      	str	r3, [r4, #8]
 8009c28:	e7f4      	b.n	8009c14 <__swsetup_r+0xb0>
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	e7f7      	b.n	8009c1e <__swsetup_r+0xba>
 8009c2e:	bf00      	nop
 8009c30:	20000034 	.word	0x20000034
 8009c34:	0800d960 	.word	0x0800d960
 8009c38:	0800d980 	.word	0x0800d980
 8009c3c:	0800d940 	.word	0x0800d940

08009c40 <abort>:
 8009c40:	b508      	push	{r3, lr}
 8009c42:	2006      	movs	r0, #6
 8009c44:	f000 fa96 	bl	800a174 <raise>
 8009c48:	2001      	movs	r0, #1
 8009c4a:	f7f8 fbe7 	bl	800241c <_exit>
	...

08009c50 <__sflush_r>:
 8009c50:	898a      	ldrh	r2, [r1, #12]
 8009c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c56:	4605      	mov	r5, r0
 8009c58:	0710      	lsls	r0, r2, #28
 8009c5a:	460c      	mov	r4, r1
 8009c5c:	d458      	bmi.n	8009d10 <__sflush_r+0xc0>
 8009c5e:	684b      	ldr	r3, [r1, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	dc05      	bgt.n	8009c70 <__sflush_r+0x20>
 8009c64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	dc02      	bgt.n	8009c70 <__sflush_r+0x20>
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c72:	2e00      	cmp	r6, #0
 8009c74:	d0f9      	beq.n	8009c6a <__sflush_r+0x1a>
 8009c76:	2300      	movs	r3, #0
 8009c78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c7c:	682f      	ldr	r7, [r5, #0]
 8009c7e:	602b      	str	r3, [r5, #0]
 8009c80:	d032      	beq.n	8009ce8 <__sflush_r+0x98>
 8009c82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c84:	89a3      	ldrh	r3, [r4, #12]
 8009c86:	075a      	lsls	r2, r3, #29
 8009c88:	d505      	bpl.n	8009c96 <__sflush_r+0x46>
 8009c8a:	6863      	ldr	r3, [r4, #4]
 8009c8c:	1ac0      	subs	r0, r0, r3
 8009c8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c90:	b10b      	cbz	r3, 8009c96 <__sflush_r+0x46>
 8009c92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c94:	1ac0      	subs	r0, r0, r3
 8009c96:	2300      	movs	r3, #0
 8009c98:	4602      	mov	r2, r0
 8009c9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c9c:	6a21      	ldr	r1, [r4, #32]
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	47b0      	blx	r6
 8009ca2:	1c43      	adds	r3, r0, #1
 8009ca4:	89a3      	ldrh	r3, [r4, #12]
 8009ca6:	d106      	bne.n	8009cb6 <__sflush_r+0x66>
 8009ca8:	6829      	ldr	r1, [r5, #0]
 8009caa:	291d      	cmp	r1, #29
 8009cac:	d82c      	bhi.n	8009d08 <__sflush_r+0xb8>
 8009cae:	4a2a      	ldr	r2, [pc, #168]	; (8009d58 <__sflush_r+0x108>)
 8009cb0:	40ca      	lsrs	r2, r1
 8009cb2:	07d6      	lsls	r6, r2, #31
 8009cb4:	d528      	bpl.n	8009d08 <__sflush_r+0xb8>
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	6062      	str	r2, [r4, #4]
 8009cba:	04d9      	lsls	r1, r3, #19
 8009cbc:	6922      	ldr	r2, [r4, #16]
 8009cbe:	6022      	str	r2, [r4, #0]
 8009cc0:	d504      	bpl.n	8009ccc <__sflush_r+0x7c>
 8009cc2:	1c42      	adds	r2, r0, #1
 8009cc4:	d101      	bne.n	8009cca <__sflush_r+0x7a>
 8009cc6:	682b      	ldr	r3, [r5, #0]
 8009cc8:	b903      	cbnz	r3, 8009ccc <__sflush_r+0x7c>
 8009cca:	6560      	str	r0, [r4, #84]	; 0x54
 8009ccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cce:	602f      	str	r7, [r5, #0]
 8009cd0:	2900      	cmp	r1, #0
 8009cd2:	d0ca      	beq.n	8009c6a <__sflush_r+0x1a>
 8009cd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cd8:	4299      	cmp	r1, r3
 8009cda:	d002      	beq.n	8009ce2 <__sflush_r+0x92>
 8009cdc:	4628      	mov	r0, r5
 8009cde:	f7ff f8bb 	bl	8008e58 <_free_r>
 8009ce2:	2000      	movs	r0, #0
 8009ce4:	6360      	str	r0, [r4, #52]	; 0x34
 8009ce6:	e7c1      	b.n	8009c6c <__sflush_r+0x1c>
 8009ce8:	6a21      	ldr	r1, [r4, #32]
 8009cea:	2301      	movs	r3, #1
 8009cec:	4628      	mov	r0, r5
 8009cee:	47b0      	blx	r6
 8009cf0:	1c41      	adds	r1, r0, #1
 8009cf2:	d1c7      	bne.n	8009c84 <__sflush_r+0x34>
 8009cf4:	682b      	ldr	r3, [r5, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d0c4      	beq.n	8009c84 <__sflush_r+0x34>
 8009cfa:	2b1d      	cmp	r3, #29
 8009cfc:	d001      	beq.n	8009d02 <__sflush_r+0xb2>
 8009cfe:	2b16      	cmp	r3, #22
 8009d00:	d101      	bne.n	8009d06 <__sflush_r+0xb6>
 8009d02:	602f      	str	r7, [r5, #0]
 8009d04:	e7b1      	b.n	8009c6a <__sflush_r+0x1a>
 8009d06:	89a3      	ldrh	r3, [r4, #12]
 8009d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d0c:	81a3      	strh	r3, [r4, #12]
 8009d0e:	e7ad      	b.n	8009c6c <__sflush_r+0x1c>
 8009d10:	690f      	ldr	r7, [r1, #16]
 8009d12:	2f00      	cmp	r7, #0
 8009d14:	d0a9      	beq.n	8009c6a <__sflush_r+0x1a>
 8009d16:	0793      	lsls	r3, r2, #30
 8009d18:	680e      	ldr	r6, [r1, #0]
 8009d1a:	bf08      	it	eq
 8009d1c:	694b      	ldreq	r3, [r1, #20]
 8009d1e:	600f      	str	r7, [r1, #0]
 8009d20:	bf18      	it	ne
 8009d22:	2300      	movne	r3, #0
 8009d24:	eba6 0807 	sub.w	r8, r6, r7
 8009d28:	608b      	str	r3, [r1, #8]
 8009d2a:	f1b8 0f00 	cmp.w	r8, #0
 8009d2e:	dd9c      	ble.n	8009c6a <__sflush_r+0x1a>
 8009d30:	6a21      	ldr	r1, [r4, #32]
 8009d32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d34:	4643      	mov	r3, r8
 8009d36:	463a      	mov	r2, r7
 8009d38:	4628      	mov	r0, r5
 8009d3a:	47b0      	blx	r6
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	dc06      	bgt.n	8009d4e <__sflush_r+0xfe>
 8009d40:	89a3      	ldrh	r3, [r4, #12]
 8009d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d46:	81a3      	strh	r3, [r4, #12]
 8009d48:	f04f 30ff 	mov.w	r0, #4294967295
 8009d4c:	e78e      	b.n	8009c6c <__sflush_r+0x1c>
 8009d4e:	4407      	add	r7, r0
 8009d50:	eba8 0800 	sub.w	r8, r8, r0
 8009d54:	e7e9      	b.n	8009d2a <__sflush_r+0xda>
 8009d56:	bf00      	nop
 8009d58:	20400001 	.word	0x20400001

08009d5c <_fflush_r>:
 8009d5c:	b538      	push	{r3, r4, r5, lr}
 8009d5e:	690b      	ldr	r3, [r1, #16]
 8009d60:	4605      	mov	r5, r0
 8009d62:	460c      	mov	r4, r1
 8009d64:	b913      	cbnz	r3, 8009d6c <_fflush_r+0x10>
 8009d66:	2500      	movs	r5, #0
 8009d68:	4628      	mov	r0, r5
 8009d6a:	bd38      	pop	{r3, r4, r5, pc}
 8009d6c:	b118      	cbz	r0, 8009d76 <_fflush_r+0x1a>
 8009d6e:	6983      	ldr	r3, [r0, #24]
 8009d70:	b90b      	cbnz	r3, 8009d76 <_fflush_r+0x1a>
 8009d72:	f000 f887 	bl	8009e84 <__sinit>
 8009d76:	4b14      	ldr	r3, [pc, #80]	; (8009dc8 <_fflush_r+0x6c>)
 8009d78:	429c      	cmp	r4, r3
 8009d7a:	d11b      	bne.n	8009db4 <_fflush_r+0x58>
 8009d7c:	686c      	ldr	r4, [r5, #4]
 8009d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d0ef      	beq.n	8009d66 <_fflush_r+0xa>
 8009d86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d88:	07d0      	lsls	r0, r2, #31
 8009d8a:	d404      	bmi.n	8009d96 <_fflush_r+0x3a>
 8009d8c:	0599      	lsls	r1, r3, #22
 8009d8e:	d402      	bmi.n	8009d96 <_fflush_r+0x3a>
 8009d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d92:	f000 f915 	bl	8009fc0 <__retarget_lock_acquire_recursive>
 8009d96:	4628      	mov	r0, r5
 8009d98:	4621      	mov	r1, r4
 8009d9a:	f7ff ff59 	bl	8009c50 <__sflush_r>
 8009d9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009da0:	07da      	lsls	r2, r3, #31
 8009da2:	4605      	mov	r5, r0
 8009da4:	d4e0      	bmi.n	8009d68 <_fflush_r+0xc>
 8009da6:	89a3      	ldrh	r3, [r4, #12]
 8009da8:	059b      	lsls	r3, r3, #22
 8009daa:	d4dd      	bmi.n	8009d68 <_fflush_r+0xc>
 8009dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dae:	f000 f908 	bl	8009fc2 <__retarget_lock_release_recursive>
 8009db2:	e7d9      	b.n	8009d68 <_fflush_r+0xc>
 8009db4:	4b05      	ldr	r3, [pc, #20]	; (8009dcc <_fflush_r+0x70>)
 8009db6:	429c      	cmp	r4, r3
 8009db8:	d101      	bne.n	8009dbe <_fflush_r+0x62>
 8009dba:	68ac      	ldr	r4, [r5, #8]
 8009dbc:	e7df      	b.n	8009d7e <_fflush_r+0x22>
 8009dbe:	4b04      	ldr	r3, [pc, #16]	; (8009dd0 <_fflush_r+0x74>)
 8009dc0:	429c      	cmp	r4, r3
 8009dc2:	bf08      	it	eq
 8009dc4:	68ec      	ldreq	r4, [r5, #12]
 8009dc6:	e7da      	b.n	8009d7e <_fflush_r+0x22>
 8009dc8:	0800d960 	.word	0x0800d960
 8009dcc:	0800d980 	.word	0x0800d980
 8009dd0:	0800d940 	.word	0x0800d940

08009dd4 <std>:
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	b510      	push	{r4, lr}
 8009dd8:	4604      	mov	r4, r0
 8009dda:	e9c0 3300 	strd	r3, r3, [r0]
 8009dde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009de2:	6083      	str	r3, [r0, #8]
 8009de4:	8181      	strh	r1, [r0, #12]
 8009de6:	6643      	str	r3, [r0, #100]	; 0x64
 8009de8:	81c2      	strh	r2, [r0, #14]
 8009dea:	6183      	str	r3, [r0, #24]
 8009dec:	4619      	mov	r1, r3
 8009dee:	2208      	movs	r2, #8
 8009df0:	305c      	adds	r0, #92	; 0x5c
 8009df2:	f7ff f829 	bl	8008e48 <memset>
 8009df6:	4b05      	ldr	r3, [pc, #20]	; (8009e0c <std+0x38>)
 8009df8:	6263      	str	r3, [r4, #36]	; 0x24
 8009dfa:	4b05      	ldr	r3, [pc, #20]	; (8009e10 <std+0x3c>)
 8009dfc:	62a3      	str	r3, [r4, #40]	; 0x28
 8009dfe:	4b05      	ldr	r3, [pc, #20]	; (8009e14 <std+0x40>)
 8009e00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e02:	4b05      	ldr	r3, [pc, #20]	; (8009e18 <std+0x44>)
 8009e04:	6224      	str	r4, [r4, #32]
 8009e06:	6323      	str	r3, [r4, #48]	; 0x30
 8009e08:	bd10      	pop	{r4, pc}
 8009e0a:	bf00      	nop
 8009e0c:	0800a1ad 	.word	0x0800a1ad
 8009e10:	0800a1cf 	.word	0x0800a1cf
 8009e14:	0800a207 	.word	0x0800a207
 8009e18:	0800a22b 	.word	0x0800a22b

08009e1c <_cleanup_r>:
 8009e1c:	4901      	ldr	r1, [pc, #4]	; (8009e24 <_cleanup_r+0x8>)
 8009e1e:	f000 b8af 	b.w	8009f80 <_fwalk_reent>
 8009e22:	bf00      	nop
 8009e24:	08009d5d 	.word	0x08009d5d

08009e28 <__sfmoreglue>:
 8009e28:	b570      	push	{r4, r5, r6, lr}
 8009e2a:	2268      	movs	r2, #104	; 0x68
 8009e2c:	1e4d      	subs	r5, r1, #1
 8009e2e:	4355      	muls	r5, r2
 8009e30:	460e      	mov	r6, r1
 8009e32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e36:	f7ff f87b 	bl	8008f30 <_malloc_r>
 8009e3a:	4604      	mov	r4, r0
 8009e3c:	b140      	cbz	r0, 8009e50 <__sfmoreglue+0x28>
 8009e3e:	2100      	movs	r1, #0
 8009e40:	e9c0 1600 	strd	r1, r6, [r0]
 8009e44:	300c      	adds	r0, #12
 8009e46:	60a0      	str	r0, [r4, #8]
 8009e48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e4c:	f7fe fffc 	bl	8008e48 <memset>
 8009e50:	4620      	mov	r0, r4
 8009e52:	bd70      	pop	{r4, r5, r6, pc}

08009e54 <__sfp_lock_acquire>:
 8009e54:	4801      	ldr	r0, [pc, #4]	; (8009e5c <__sfp_lock_acquire+0x8>)
 8009e56:	f000 b8b3 	b.w	8009fc0 <__retarget_lock_acquire_recursive>
 8009e5a:	bf00      	nop
 8009e5c:	200007c1 	.word	0x200007c1

08009e60 <__sfp_lock_release>:
 8009e60:	4801      	ldr	r0, [pc, #4]	; (8009e68 <__sfp_lock_release+0x8>)
 8009e62:	f000 b8ae 	b.w	8009fc2 <__retarget_lock_release_recursive>
 8009e66:	bf00      	nop
 8009e68:	200007c1 	.word	0x200007c1

08009e6c <__sinit_lock_acquire>:
 8009e6c:	4801      	ldr	r0, [pc, #4]	; (8009e74 <__sinit_lock_acquire+0x8>)
 8009e6e:	f000 b8a7 	b.w	8009fc0 <__retarget_lock_acquire_recursive>
 8009e72:	bf00      	nop
 8009e74:	200007c2 	.word	0x200007c2

08009e78 <__sinit_lock_release>:
 8009e78:	4801      	ldr	r0, [pc, #4]	; (8009e80 <__sinit_lock_release+0x8>)
 8009e7a:	f000 b8a2 	b.w	8009fc2 <__retarget_lock_release_recursive>
 8009e7e:	bf00      	nop
 8009e80:	200007c2 	.word	0x200007c2

08009e84 <__sinit>:
 8009e84:	b510      	push	{r4, lr}
 8009e86:	4604      	mov	r4, r0
 8009e88:	f7ff fff0 	bl	8009e6c <__sinit_lock_acquire>
 8009e8c:	69a3      	ldr	r3, [r4, #24]
 8009e8e:	b11b      	cbz	r3, 8009e98 <__sinit+0x14>
 8009e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e94:	f7ff bff0 	b.w	8009e78 <__sinit_lock_release>
 8009e98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009e9c:	6523      	str	r3, [r4, #80]	; 0x50
 8009e9e:	4b13      	ldr	r3, [pc, #76]	; (8009eec <__sinit+0x68>)
 8009ea0:	4a13      	ldr	r2, [pc, #76]	; (8009ef0 <__sinit+0x6c>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009ea6:	42a3      	cmp	r3, r4
 8009ea8:	bf04      	itt	eq
 8009eaa:	2301      	moveq	r3, #1
 8009eac:	61a3      	streq	r3, [r4, #24]
 8009eae:	4620      	mov	r0, r4
 8009eb0:	f000 f820 	bl	8009ef4 <__sfp>
 8009eb4:	6060      	str	r0, [r4, #4]
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	f000 f81c 	bl	8009ef4 <__sfp>
 8009ebc:	60a0      	str	r0, [r4, #8]
 8009ebe:	4620      	mov	r0, r4
 8009ec0:	f000 f818 	bl	8009ef4 <__sfp>
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	60e0      	str	r0, [r4, #12]
 8009ec8:	2104      	movs	r1, #4
 8009eca:	6860      	ldr	r0, [r4, #4]
 8009ecc:	f7ff ff82 	bl	8009dd4 <std>
 8009ed0:	68a0      	ldr	r0, [r4, #8]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	2109      	movs	r1, #9
 8009ed6:	f7ff ff7d 	bl	8009dd4 <std>
 8009eda:	68e0      	ldr	r0, [r4, #12]
 8009edc:	2202      	movs	r2, #2
 8009ede:	2112      	movs	r1, #18
 8009ee0:	f7ff ff78 	bl	8009dd4 <std>
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	61a3      	str	r3, [r4, #24]
 8009ee8:	e7d2      	b.n	8009e90 <__sinit+0xc>
 8009eea:	bf00      	nop
 8009eec:	0800d858 	.word	0x0800d858
 8009ef0:	08009e1d 	.word	0x08009e1d

08009ef4 <__sfp>:
 8009ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef6:	4607      	mov	r7, r0
 8009ef8:	f7ff ffac 	bl	8009e54 <__sfp_lock_acquire>
 8009efc:	4b1e      	ldr	r3, [pc, #120]	; (8009f78 <__sfp+0x84>)
 8009efe:	681e      	ldr	r6, [r3, #0]
 8009f00:	69b3      	ldr	r3, [r6, #24]
 8009f02:	b913      	cbnz	r3, 8009f0a <__sfp+0x16>
 8009f04:	4630      	mov	r0, r6
 8009f06:	f7ff ffbd 	bl	8009e84 <__sinit>
 8009f0a:	3648      	adds	r6, #72	; 0x48
 8009f0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f10:	3b01      	subs	r3, #1
 8009f12:	d503      	bpl.n	8009f1c <__sfp+0x28>
 8009f14:	6833      	ldr	r3, [r6, #0]
 8009f16:	b30b      	cbz	r3, 8009f5c <__sfp+0x68>
 8009f18:	6836      	ldr	r6, [r6, #0]
 8009f1a:	e7f7      	b.n	8009f0c <__sfp+0x18>
 8009f1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f20:	b9d5      	cbnz	r5, 8009f58 <__sfp+0x64>
 8009f22:	4b16      	ldr	r3, [pc, #88]	; (8009f7c <__sfp+0x88>)
 8009f24:	60e3      	str	r3, [r4, #12]
 8009f26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f2a:	6665      	str	r5, [r4, #100]	; 0x64
 8009f2c:	f000 f847 	bl	8009fbe <__retarget_lock_init_recursive>
 8009f30:	f7ff ff96 	bl	8009e60 <__sfp_lock_release>
 8009f34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009f38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009f3c:	6025      	str	r5, [r4, #0]
 8009f3e:	61a5      	str	r5, [r4, #24]
 8009f40:	2208      	movs	r2, #8
 8009f42:	4629      	mov	r1, r5
 8009f44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f48:	f7fe ff7e 	bl	8008e48 <memset>
 8009f4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009f50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009f54:	4620      	mov	r0, r4
 8009f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f58:	3468      	adds	r4, #104	; 0x68
 8009f5a:	e7d9      	b.n	8009f10 <__sfp+0x1c>
 8009f5c:	2104      	movs	r1, #4
 8009f5e:	4638      	mov	r0, r7
 8009f60:	f7ff ff62 	bl	8009e28 <__sfmoreglue>
 8009f64:	4604      	mov	r4, r0
 8009f66:	6030      	str	r0, [r6, #0]
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	d1d5      	bne.n	8009f18 <__sfp+0x24>
 8009f6c:	f7ff ff78 	bl	8009e60 <__sfp_lock_release>
 8009f70:	230c      	movs	r3, #12
 8009f72:	603b      	str	r3, [r7, #0]
 8009f74:	e7ee      	b.n	8009f54 <__sfp+0x60>
 8009f76:	bf00      	nop
 8009f78:	0800d858 	.word	0x0800d858
 8009f7c:	ffff0001 	.word	0xffff0001

08009f80 <_fwalk_reent>:
 8009f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f84:	4606      	mov	r6, r0
 8009f86:	4688      	mov	r8, r1
 8009f88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f8c:	2700      	movs	r7, #0
 8009f8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f92:	f1b9 0901 	subs.w	r9, r9, #1
 8009f96:	d505      	bpl.n	8009fa4 <_fwalk_reent+0x24>
 8009f98:	6824      	ldr	r4, [r4, #0]
 8009f9a:	2c00      	cmp	r4, #0
 8009f9c:	d1f7      	bne.n	8009f8e <_fwalk_reent+0xe>
 8009f9e:	4638      	mov	r0, r7
 8009fa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fa4:	89ab      	ldrh	r3, [r5, #12]
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d907      	bls.n	8009fba <_fwalk_reent+0x3a>
 8009faa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009fae:	3301      	adds	r3, #1
 8009fb0:	d003      	beq.n	8009fba <_fwalk_reent+0x3a>
 8009fb2:	4629      	mov	r1, r5
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	47c0      	blx	r8
 8009fb8:	4307      	orrs	r7, r0
 8009fba:	3568      	adds	r5, #104	; 0x68
 8009fbc:	e7e9      	b.n	8009f92 <_fwalk_reent+0x12>

08009fbe <__retarget_lock_init_recursive>:
 8009fbe:	4770      	bx	lr

08009fc0 <__retarget_lock_acquire_recursive>:
 8009fc0:	4770      	bx	lr

08009fc2 <__retarget_lock_release_recursive>:
 8009fc2:	4770      	bx	lr

08009fc4 <__swhatbuf_r>:
 8009fc4:	b570      	push	{r4, r5, r6, lr}
 8009fc6:	460e      	mov	r6, r1
 8009fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fcc:	2900      	cmp	r1, #0
 8009fce:	b096      	sub	sp, #88	; 0x58
 8009fd0:	4614      	mov	r4, r2
 8009fd2:	461d      	mov	r5, r3
 8009fd4:	da08      	bge.n	8009fe8 <__swhatbuf_r+0x24>
 8009fd6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	602a      	str	r2, [r5, #0]
 8009fde:	061a      	lsls	r2, r3, #24
 8009fe0:	d410      	bmi.n	800a004 <__swhatbuf_r+0x40>
 8009fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fe6:	e00e      	b.n	800a006 <__swhatbuf_r+0x42>
 8009fe8:	466a      	mov	r2, sp
 8009fea:	f000 f945 	bl	800a278 <_fstat_r>
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	dbf1      	blt.n	8009fd6 <__swhatbuf_r+0x12>
 8009ff2:	9a01      	ldr	r2, [sp, #4]
 8009ff4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ff8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ffc:	425a      	negs	r2, r3
 8009ffe:	415a      	adcs	r2, r3
 800a000:	602a      	str	r2, [r5, #0]
 800a002:	e7ee      	b.n	8009fe2 <__swhatbuf_r+0x1e>
 800a004:	2340      	movs	r3, #64	; 0x40
 800a006:	2000      	movs	r0, #0
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	b016      	add	sp, #88	; 0x58
 800a00c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a010 <__smakebuf_r>:
 800a010:	898b      	ldrh	r3, [r1, #12]
 800a012:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a014:	079d      	lsls	r5, r3, #30
 800a016:	4606      	mov	r6, r0
 800a018:	460c      	mov	r4, r1
 800a01a:	d507      	bpl.n	800a02c <__smakebuf_r+0x1c>
 800a01c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a020:	6023      	str	r3, [r4, #0]
 800a022:	6123      	str	r3, [r4, #16]
 800a024:	2301      	movs	r3, #1
 800a026:	6163      	str	r3, [r4, #20]
 800a028:	b002      	add	sp, #8
 800a02a:	bd70      	pop	{r4, r5, r6, pc}
 800a02c:	ab01      	add	r3, sp, #4
 800a02e:	466a      	mov	r2, sp
 800a030:	f7ff ffc8 	bl	8009fc4 <__swhatbuf_r>
 800a034:	9900      	ldr	r1, [sp, #0]
 800a036:	4605      	mov	r5, r0
 800a038:	4630      	mov	r0, r6
 800a03a:	f7fe ff79 	bl	8008f30 <_malloc_r>
 800a03e:	b948      	cbnz	r0, 800a054 <__smakebuf_r+0x44>
 800a040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a044:	059a      	lsls	r2, r3, #22
 800a046:	d4ef      	bmi.n	800a028 <__smakebuf_r+0x18>
 800a048:	f023 0303 	bic.w	r3, r3, #3
 800a04c:	f043 0302 	orr.w	r3, r3, #2
 800a050:	81a3      	strh	r3, [r4, #12]
 800a052:	e7e3      	b.n	800a01c <__smakebuf_r+0xc>
 800a054:	4b0d      	ldr	r3, [pc, #52]	; (800a08c <__smakebuf_r+0x7c>)
 800a056:	62b3      	str	r3, [r6, #40]	; 0x28
 800a058:	89a3      	ldrh	r3, [r4, #12]
 800a05a:	6020      	str	r0, [r4, #0]
 800a05c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a060:	81a3      	strh	r3, [r4, #12]
 800a062:	9b00      	ldr	r3, [sp, #0]
 800a064:	6163      	str	r3, [r4, #20]
 800a066:	9b01      	ldr	r3, [sp, #4]
 800a068:	6120      	str	r0, [r4, #16]
 800a06a:	b15b      	cbz	r3, 800a084 <__smakebuf_r+0x74>
 800a06c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a070:	4630      	mov	r0, r6
 800a072:	f000 f913 	bl	800a29c <_isatty_r>
 800a076:	b128      	cbz	r0, 800a084 <__smakebuf_r+0x74>
 800a078:	89a3      	ldrh	r3, [r4, #12]
 800a07a:	f023 0303 	bic.w	r3, r3, #3
 800a07e:	f043 0301 	orr.w	r3, r3, #1
 800a082:	81a3      	strh	r3, [r4, #12]
 800a084:	89a0      	ldrh	r0, [r4, #12]
 800a086:	4305      	orrs	r5, r0
 800a088:	81a5      	strh	r5, [r4, #12]
 800a08a:	e7cd      	b.n	800a028 <__smakebuf_r+0x18>
 800a08c:	08009e1d 	.word	0x08009e1d

0800a090 <memmove>:
 800a090:	4288      	cmp	r0, r1
 800a092:	b510      	push	{r4, lr}
 800a094:	eb01 0402 	add.w	r4, r1, r2
 800a098:	d902      	bls.n	800a0a0 <memmove+0x10>
 800a09a:	4284      	cmp	r4, r0
 800a09c:	4623      	mov	r3, r4
 800a09e:	d807      	bhi.n	800a0b0 <memmove+0x20>
 800a0a0:	1e43      	subs	r3, r0, #1
 800a0a2:	42a1      	cmp	r1, r4
 800a0a4:	d008      	beq.n	800a0b8 <memmove+0x28>
 800a0a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0ae:	e7f8      	b.n	800a0a2 <memmove+0x12>
 800a0b0:	4402      	add	r2, r0
 800a0b2:	4601      	mov	r1, r0
 800a0b4:	428a      	cmp	r2, r1
 800a0b6:	d100      	bne.n	800a0ba <memmove+0x2a>
 800a0b8:	bd10      	pop	{r4, pc}
 800a0ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0c2:	e7f7      	b.n	800a0b4 <memmove+0x24>

0800a0c4 <_realloc_r>:
 800a0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0c8:	4680      	mov	r8, r0
 800a0ca:	4614      	mov	r4, r2
 800a0cc:	460e      	mov	r6, r1
 800a0ce:	b921      	cbnz	r1, 800a0da <_realloc_r+0x16>
 800a0d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0d4:	4611      	mov	r1, r2
 800a0d6:	f7fe bf2b 	b.w	8008f30 <_malloc_r>
 800a0da:	b92a      	cbnz	r2, 800a0e8 <_realloc_r+0x24>
 800a0dc:	f7fe febc 	bl	8008e58 <_free_r>
 800a0e0:	4625      	mov	r5, r4
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0e8:	f000 f8fa 	bl	800a2e0 <_malloc_usable_size_r>
 800a0ec:	4284      	cmp	r4, r0
 800a0ee:	4607      	mov	r7, r0
 800a0f0:	d802      	bhi.n	800a0f8 <_realloc_r+0x34>
 800a0f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a0f6:	d812      	bhi.n	800a11e <_realloc_r+0x5a>
 800a0f8:	4621      	mov	r1, r4
 800a0fa:	4640      	mov	r0, r8
 800a0fc:	f7fe ff18 	bl	8008f30 <_malloc_r>
 800a100:	4605      	mov	r5, r0
 800a102:	2800      	cmp	r0, #0
 800a104:	d0ed      	beq.n	800a0e2 <_realloc_r+0x1e>
 800a106:	42bc      	cmp	r4, r7
 800a108:	4622      	mov	r2, r4
 800a10a:	4631      	mov	r1, r6
 800a10c:	bf28      	it	cs
 800a10e:	463a      	movcs	r2, r7
 800a110:	f7fe fe8c 	bl	8008e2c <memcpy>
 800a114:	4631      	mov	r1, r6
 800a116:	4640      	mov	r0, r8
 800a118:	f7fe fe9e 	bl	8008e58 <_free_r>
 800a11c:	e7e1      	b.n	800a0e2 <_realloc_r+0x1e>
 800a11e:	4635      	mov	r5, r6
 800a120:	e7df      	b.n	800a0e2 <_realloc_r+0x1e>

0800a122 <_raise_r>:
 800a122:	291f      	cmp	r1, #31
 800a124:	b538      	push	{r3, r4, r5, lr}
 800a126:	4604      	mov	r4, r0
 800a128:	460d      	mov	r5, r1
 800a12a:	d904      	bls.n	800a136 <_raise_r+0x14>
 800a12c:	2316      	movs	r3, #22
 800a12e:	6003      	str	r3, [r0, #0]
 800a130:	f04f 30ff 	mov.w	r0, #4294967295
 800a134:	bd38      	pop	{r3, r4, r5, pc}
 800a136:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a138:	b112      	cbz	r2, 800a140 <_raise_r+0x1e>
 800a13a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a13e:	b94b      	cbnz	r3, 800a154 <_raise_r+0x32>
 800a140:	4620      	mov	r0, r4
 800a142:	f000 f831 	bl	800a1a8 <_getpid_r>
 800a146:	462a      	mov	r2, r5
 800a148:	4601      	mov	r1, r0
 800a14a:	4620      	mov	r0, r4
 800a14c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a150:	f000 b818 	b.w	800a184 <_kill_r>
 800a154:	2b01      	cmp	r3, #1
 800a156:	d00a      	beq.n	800a16e <_raise_r+0x4c>
 800a158:	1c59      	adds	r1, r3, #1
 800a15a:	d103      	bne.n	800a164 <_raise_r+0x42>
 800a15c:	2316      	movs	r3, #22
 800a15e:	6003      	str	r3, [r0, #0]
 800a160:	2001      	movs	r0, #1
 800a162:	e7e7      	b.n	800a134 <_raise_r+0x12>
 800a164:	2400      	movs	r4, #0
 800a166:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a16a:	4628      	mov	r0, r5
 800a16c:	4798      	blx	r3
 800a16e:	2000      	movs	r0, #0
 800a170:	e7e0      	b.n	800a134 <_raise_r+0x12>
	...

0800a174 <raise>:
 800a174:	4b02      	ldr	r3, [pc, #8]	; (800a180 <raise+0xc>)
 800a176:	4601      	mov	r1, r0
 800a178:	6818      	ldr	r0, [r3, #0]
 800a17a:	f7ff bfd2 	b.w	800a122 <_raise_r>
 800a17e:	bf00      	nop
 800a180:	20000034 	.word	0x20000034

0800a184 <_kill_r>:
 800a184:	b538      	push	{r3, r4, r5, lr}
 800a186:	4d07      	ldr	r5, [pc, #28]	; (800a1a4 <_kill_r+0x20>)
 800a188:	2300      	movs	r3, #0
 800a18a:	4604      	mov	r4, r0
 800a18c:	4608      	mov	r0, r1
 800a18e:	4611      	mov	r1, r2
 800a190:	602b      	str	r3, [r5, #0]
 800a192:	f7f8 f933 	bl	80023fc <_kill>
 800a196:	1c43      	adds	r3, r0, #1
 800a198:	d102      	bne.n	800a1a0 <_kill_r+0x1c>
 800a19a:	682b      	ldr	r3, [r5, #0]
 800a19c:	b103      	cbz	r3, 800a1a0 <_kill_r+0x1c>
 800a19e:	6023      	str	r3, [r4, #0]
 800a1a0:	bd38      	pop	{r3, r4, r5, pc}
 800a1a2:	bf00      	nop
 800a1a4:	200007bc 	.word	0x200007bc

0800a1a8 <_getpid_r>:
 800a1a8:	f7f8 b920 	b.w	80023ec <_getpid>

0800a1ac <__sread>:
 800a1ac:	b510      	push	{r4, lr}
 800a1ae:	460c      	mov	r4, r1
 800a1b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1b4:	f000 f89c 	bl	800a2f0 <_read_r>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	bfab      	itete	ge
 800a1bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1be:	89a3      	ldrhlt	r3, [r4, #12]
 800a1c0:	181b      	addge	r3, r3, r0
 800a1c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1c6:	bfac      	ite	ge
 800a1c8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1ca:	81a3      	strhlt	r3, [r4, #12]
 800a1cc:	bd10      	pop	{r4, pc}

0800a1ce <__swrite>:
 800a1ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1d2:	461f      	mov	r7, r3
 800a1d4:	898b      	ldrh	r3, [r1, #12]
 800a1d6:	05db      	lsls	r3, r3, #23
 800a1d8:	4605      	mov	r5, r0
 800a1da:	460c      	mov	r4, r1
 800a1dc:	4616      	mov	r6, r2
 800a1de:	d505      	bpl.n	800a1ec <__swrite+0x1e>
 800a1e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1e4:	2302      	movs	r3, #2
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f000 f868 	bl	800a2bc <_lseek_r>
 800a1ec:	89a3      	ldrh	r3, [r4, #12]
 800a1ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1f6:	81a3      	strh	r3, [r4, #12]
 800a1f8:	4632      	mov	r2, r6
 800a1fa:	463b      	mov	r3, r7
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a202:	f000 b817 	b.w	800a234 <_write_r>

0800a206 <__sseek>:
 800a206:	b510      	push	{r4, lr}
 800a208:	460c      	mov	r4, r1
 800a20a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a20e:	f000 f855 	bl	800a2bc <_lseek_r>
 800a212:	1c43      	adds	r3, r0, #1
 800a214:	89a3      	ldrh	r3, [r4, #12]
 800a216:	bf15      	itete	ne
 800a218:	6560      	strne	r0, [r4, #84]	; 0x54
 800a21a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a21e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a222:	81a3      	strheq	r3, [r4, #12]
 800a224:	bf18      	it	ne
 800a226:	81a3      	strhne	r3, [r4, #12]
 800a228:	bd10      	pop	{r4, pc}

0800a22a <__sclose>:
 800a22a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a22e:	f000 b813 	b.w	800a258 <_close_r>
	...

0800a234 <_write_r>:
 800a234:	b538      	push	{r3, r4, r5, lr}
 800a236:	4d07      	ldr	r5, [pc, #28]	; (800a254 <_write_r+0x20>)
 800a238:	4604      	mov	r4, r0
 800a23a:	4608      	mov	r0, r1
 800a23c:	4611      	mov	r1, r2
 800a23e:	2200      	movs	r2, #0
 800a240:	602a      	str	r2, [r5, #0]
 800a242:	461a      	mov	r2, r3
 800a244:	f7f8 f911 	bl	800246a <_write>
 800a248:	1c43      	adds	r3, r0, #1
 800a24a:	d102      	bne.n	800a252 <_write_r+0x1e>
 800a24c:	682b      	ldr	r3, [r5, #0]
 800a24e:	b103      	cbz	r3, 800a252 <_write_r+0x1e>
 800a250:	6023      	str	r3, [r4, #0]
 800a252:	bd38      	pop	{r3, r4, r5, pc}
 800a254:	200007bc 	.word	0x200007bc

0800a258 <_close_r>:
 800a258:	b538      	push	{r3, r4, r5, lr}
 800a25a:	4d06      	ldr	r5, [pc, #24]	; (800a274 <_close_r+0x1c>)
 800a25c:	2300      	movs	r3, #0
 800a25e:	4604      	mov	r4, r0
 800a260:	4608      	mov	r0, r1
 800a262:	602b      	str	r3, [r5, #0]
 800a264:	f7f8 f91d 	bl	80024a2 <_close>
 800a268:	1c43      	adds	r3, r0, #1
 800a26a:	d102      	bne.n	800a272 <_close_r+0x1a>
 800a26c:	682b      	ldr	r3, [r5, #0]
 800a26e:	b103      	cbz	r3, 800a272 <_close_r+0x1a>
 800a270:	6023      	str	r3, [r4, #0]
 800a272:	bd38      	pop	{r3, r4, r5, pc}
 800a274:	200007bc 	.word	0x200007bc

0800a278 <_fstat_r>:
 800a278:	b538      	push	{r3, r4, r5, lr}
 800a27a:	4d07      	ldr	r5, [pc, #28]	; (800a298 <_fstat_r+0x20>)
 800a27c:	2300      	movs	r3, #0
 800a27e:	4604      	mov	r4, r0
 800a280:	4608      	mov	r0, r1
 800a282:	4611      	mov	r1, r2
 800a284:	602b      	str	r3, [r5, #0]
 800a286:	f7f8 f918 	bl	80024ba <_fstat>
 800a28a:	1c43      	adds	r3, r0, #1
 800a28c:	d102      	bne.n	800a294 <_fstat_r+0x1c>
 800a28e:	682b      	ldr	r3, [r5, #0]
 800a290:	b103      	cbz	r3, 800a294 <_fstat_r+0x1c>
 800a292:	6023      	str	r3, [r4, #0]
 800a294:	bd38      	pop	{r3, r4, r5, pc}
 800a296:	bf00      	nop
 800a298:	200007bc 	.word	0x200007bc

0800a29c <_isatty_r>:
 800a29c:	b538      	push	{r3, r4, r5, lr}
 800a29e:	4d06      	ldr	r5, [pc, #24]	; (800a2b8 <_isatty_r+0x1c>)
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	4604      	mov	r4, r0
 800a2a4:	4608      	mov	r0, r1
 800a2a6:	602b      	str	r3, [r5, #0]
 800a2a8:	f7f8 f917 	bl	80024da <_isatty>
 800a2ac:	1c43      	adds	r3, r0, #1
 800a2ae:	d102      	bne.n	800a2b6 <_isatty_r+0x1a>
 800a2b0:	682b      	ldr	r3, [r5, #0]
 800a2b2:	b103      	cbz	r3, 800a2b6 <_isatty_r+0x1a>
 800a2b4:	6023      	str	r3, [r4, #0]
 800a2b6:	bd38      	pop	{r3, r4, r5, pc}
 800a2b8:	200007bc 	.word	0x200007bc

0800a2bc <_lseek_r>:
 800a2bc:	b538      	push	{r3, r4, r5, lr}
 800a2be:	4d07      	ldr	r5, [pc, #28]	; (800a2dc <_lseek_r+0x20>)
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	4608      	mov	r0, r1
 800a2c4:	4611      	mov	r1, r2
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	602a      	str	r2, [r5, #0]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	f7f8 f910 	bl	80024f0 <_lseek>
 800a2d0:	1c43      	adds	r3, r0, #1
 800a2d2:	d102      	bne.n	800a2da <_lseek_r+0x1e>
 800a2d4:	682b      	ldr	r3, [r5, #0]
 800a2d6:	b103      	cbz	r3, 800a2da <_lseek_r+0x1e>
 800a2d8:	6023      	str	r3, [r4, #0]
 800a2da:	bd38      	pop	{r3, r4, r5, pc}
 800a2dc:	200007bc 	.word	0x200007bc

0800a2e0 <_malloc_usable_size_r>:
 800a2e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2e4:	1f18      	subs	r0, r3, #4
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	bfbc      	itt	lt
 800a2ea:	580b      	ldrlt	r3, [r1, r0]
 800a2ec:	18c0      	addlt	r0, r0, r3
 800a2ee:	4770      	bx	lr

0800a2f0 <_read_r>:
 800a2f0:	b538      	push	{r3, r4, r5, lr}
 800a2f2:	4d07      	ldr	r5, [pc, #28]	; (800a310 <_read_r+0x20>)
 800a2f4:	4604      	mov	r4, r0
 800a2f6:	4608      	mov	r0, r1
 800a2f8:	4611      	mov	r1, r2
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	602a      	str	r2, [r5, #0]
 800a2fe:	461a      	mov	r2, r3
 800a300:	f7f8 f896 	bl	8002430 <_read>
 800a304:	1c43      	adds	r3, r0, #1
 800a306:	d102      	bne.n	800a30e <_read_r+0x1e>
 800a308:	682b      	ldr	r3, [r5, #0]
 800a30a:	b103      	cbz	r3, 800a30e <_read_r+0x1e>
 800a30c:	6023      	str	r3, [r4, #0]
 800a30e:	bd38      	pop	{r3, r4, r5, pc}
 800a310:	200007bc 	.word	0x200007bc

0800a314 <_init>:
 800a314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a316:	bf00      	nop
 800a318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a31a:	bc08      	pop	{r3}
 800a31c:	469e      	mov	lr, r3
 800a31e:	4770      	bx	lr

0800a320 <_fini>:
 800a320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a322:	bf00      	nop
 800a324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a326:	bc08      	pop	{r3}
 800a328:	469e      	mov	lr, r3
 800a32a:	4770      	bx	lr
