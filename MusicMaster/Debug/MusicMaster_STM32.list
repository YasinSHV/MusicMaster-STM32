
MusicMaster_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000705c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001264  080071e4  080071e4  000171e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008448  08008448  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  08008448  08008448  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008448  08008448  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008448  08008448  00018448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800844c  0800844c  0001844c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08008450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          0000060c  20000100  20000100  00020100  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000070c  2000070c  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001991c  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f9c  00000000  00000000  00039a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d0  00000000  00000000  0003c9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001410  00000000  00000000  0003deb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fd36  00000000  00000000  0003f2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a120  00000000  00000000  0005effe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bea49  00000000  00000000  0007911e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00137b67  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c78  00000000  00000000  00137bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000100 	.word	0x20000100
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080071cc 	.word	0x080071cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000104 	.word	0x20000104
 80001c4:	080071cc 	.word	0x080071cc

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_d2uiz>:
 8000564:	004a      	lsls	r2, r1, #1
 8000566:	d211      	bcs.n	800058c <__aeabi_d2uiz+0x28>
 8000568:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800056c:	d211      	bcs.n	8000592 <__aeabi_d2uiz+0x2e>
 800056e:	d50d      	bpl.n	800058c <__aeabi_d2uiz+0x28>
 8000570:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000574:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000578:	d40e      	bmi.n	8000598 <__aeabi_d2uiz+0x34>
 800057a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800057e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000582:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000586:	fa23 f002 	lsr.w	r0, r3, r2
 800058a:	4770      	bx	lr
 800058c:	f04f 0000 	mov.w	r0, #0
 8000590:	4770      	bx	lr
 8000592:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000596:	d102      	bne.n	800059e <__aeabi_d2uiz+0x3a>
 8000598:	f04f 30ff 	mov.w	r0, #4294967295
 800059c:	4770      	bx	lr
 800059e:	f04f 0000 	mov.w	r0, #0
 80005a2:	4770      	bx	lr

080005a4 <hashString>:
    struct DictionaryNode **buckets;
    int size;
};

// Hash function for string keys
unsigned int hashString(const char *key, int size) {
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
    unsigned int hash = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
    while (*key) {
 80005b2:	e007      	b.n	80005c4 <hashString+0x20>
        hash = (hash << 5) + *key++;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	015a      	lsls	r2, r3, #5
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	1c59      	adds	r1, r3, #1
 80005bc:	6079      	str	r1, [r7, #4]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	4413      	add	r3, r2
 80005c2:	60fb      	str	r3, [r7, #12]
    while (*key) {
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d1f3      	bne.n	80005b4 <hashString+0x10>
    }
    return hash % size;
 80005cc:	683a      	ldr	r2, [r7, #0]
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80005d4:	fb01 f202 	mul.w	r2, r1, r2
 80005d8:	1a9b      	subs	r3, r3, r2
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr

080005e6 <hashNumeric>:

// Hash function for numeric keys
unsigned int hashNumeric(int key, int size) {
 80005e6:	b480      	push	{r7}
 80005e8:	b083      	sub	sp, #12
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
 80005ee:	6039      	str	r1, [r7, #0]
    return key % size;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	683a      	ldr	r2, [r7, #0]
 80005f4:	fb93 f2f2 	sdiv	r2, r3, r2
 80005f8:	6839      	ldr	r1, [r7, #0]
 80005fa:	fb01 f202 	mul.w	r2, r1, r2
 80005fe:	1a9b      	subs	r3, r3, r2
}
 8000600:	4618      	mov	r0, r3
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <initDictionary>:

// Initialize dictionary
Dictionary *initDictionary(int size) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    Dictionary *dict = malloc(sizeof(Dictionary));
 8000614:	2008      	movs	r0, #8
 8000616:	f006 fceb 	bl	8006ff0 <malloc>
 800061a:	4603      	mov	r3, r0
 800061c:	60bb      	str	r3, [r7, #8]
    dict->buckets = malloc(size * sizeof(struct DictionaryNode *));
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	4618      	mov	r0, r3
 8000624:	f006 fce4 	bl	8006ff0 <malloc>
 8000628:	4603      	mov	r3, r0
 800062a:	461a      	mov	r2, r3
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	601a      	str	r2, [r3, #0]
    dict->size = size;
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < size; i++) {
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	e009      	b.n	8000650 <initDictionary+0x44>
        dict->buckets[i] = NULL;
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	4413      	add	r3, r2
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	3301      	adds	r3, #1
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fa      	ldr	r2, [r7, #12]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	429a      	cmp	r2, r3
 8000656:	dbf1      	blt.n	800063c <initDictionary+0x30>
    }
    return dict;
 8000658:	68bb      	ldr	r3, [r7, #8]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <insert>:

// Insert key-value pair into dictionary
void insert(Dictionary *dict, const char *stringKey, int numericKey, struct Tone *tones, int numTones) {
 8000662:	b580      	push	{r7, lr}
 8000664:	b086      	sub	sp, #24
 8000666:	af00      	add	r7, sp, #0
 8000668:	60f8      	str	r0, [r7, #12]
 800066a:	60b9      	str	r1, [r7, #8]
 800066c:	607a      	str	r2, [r7, #4]
 800066e:	603b      	str	r3, [r7, #0]
    unsigned int index;
    struct DictionaryNode *newNode = malloc(sizeof(struct DictionaryNode));
 8000670:	2014      	movs	r0, #20
 8000672:	f006 fcbd 	bl	8006ff0 <malloc>
 8000676:	4603      	mov	r3, r0
 8000678:	613b      	str	r3, [r7, #16]
    newNode->stringKey = strdup(stringKey);
 800067a:	68b8      	ldr	r0, [r7, #8]
 800067c:	f006 fd7a 	bl	8007174 <strdup>
 8000680:	4603      	mov	r3, r0
 8000682:	461a      	mov	r2, r3
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	601a      	str	r2, [r3, #0]
    newNode->numericKey = numericKey;
 8000688:	693b      	ldr	r3, [r7, #16]
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	605a      	str	r2, [r3, #4]
    newNode->tones = malloc(numTones * sizeof(struct Tone));
 800068e:	6a3b      	ldr	r3, [r7, #32]
 8000690:	00db      	lsls	r3, r3, #3
 8000692:	4618      	mov	r0, r3
 8000694:	f006 fcac 	bl	8006ff0 <malloc>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	693b      	ldr	r3, [r7, #16]
 800069e:	609a      	str	r2, [r3, #8]
    memcpy(newNode->tones, tones, numTones * sizeof(struct Tone));
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	6898      	ldr	r0, [r3, #8]
 80006a4:	6a3b      	ldr	r3, [r7, #32]
 80006a6:	00db      	lsls	r3, r3, #3
 80006a8:	461a      	mov	r2, r3
 80006aa:	6839      	ldr	r1, [r7, #0]
 80006ac:	f006 fca8 	bl	8007000 <memcpy>
    newNode->numTones = numTones;
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	6a3a      	ldr	r2, [r7, #32]
 80006b4:	60da      	str	r2, [r3, #12]

    if (stringKey != NULL) {
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d007      	beq.n	80006cc <insert+0x6a>
        index = hashString(stringKey, dict->size);
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	4619      	mov	r1, r3
 80006c2:	68b8      	ldr	r0, [r7, #8]
 80006c4:	f7ff ff6e 	bl	80005a4 <hashString>
 80006c8:	6178      	str	r0, [r7, #20]
 80006ca:	e006      	b.n	80006da <insert+0x78>
    } else {
        index = hashNumeric(numericKey, dict->size);
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	4619      	mov	r1, r3
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f7ff ff87 	bl	80005e6 <hashNumeric>
 80006d8:	6178      	str	r0, [r7, #20]
    }

    newNode->next = dict->buckets[index];
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	4413      	add	r3, r2
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	611a      	str	r2, [r3, #16]
    dict->buckets[index] = newNode;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	4413      	add	r3, r2
 80006f4:	693a      	ldr	r2, [r7, #16]
 80006f6:	601a      	str	r2, [r3, #0]
}
 80006f8:	bf00      	nop
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <lookup>:

// Lookup value by key
struct Tone *lookup(Dictionary *dict, const char *stringKey, int numericKey, int *numTones) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
 800070c:	603b      	str	r3, [r7, #0]
    unsigned int index;
    struct DictionaryNode *current;

    if (stringKey != NULL) {
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d029      	beq.n	8000768 <lookup+0x68>
        index = hashString(stringKey, dict->size);
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	4619      	mov	r1, r3
 800071a:	68b8      	ldr	r0, [r7, #8]
 800071c:	f7ff ff42 	bl	80005a4 <hashString>
 8000720:	6138      	str	r0, [r7, #16]
        current = dict->buckets[index];
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	4413      	add	r3, r2
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	617b      	str	r3, [r7, #20]
        while (current) {
 8000730:	e016      	b.n	8000760 <lookup+0x60>
            if (current->stringKey && strcmp(current->stringKey, stringKey) == 0) {
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d00f      	beq.n	800075a <lookup+0x5a>
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	68b9      	ldr	r1, [r7, #8]
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fd41 	bl	80001c8 <strcmp>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d106      	bne.n	800075a <lookup+0x5a>
                *numTones = current->numTones;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	68da      	ldr	r2, [r3, #12]
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	601a      	str	r2, [r3, #0]
                return current->tones;
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	e02b      	b.n	80007b2 <lookup+0xb2>
            }
            current = current->next;
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	691b      	ldr	r3, [r3, #16]
 800075e:	617b      	str	r3, [r7, #20]
        while (current) {
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d1e5      	bne.n	8000732 <lookup+0x32>
 8000766:	e020      	b.n	80007aa <lookup+0xaa>
        }
    } else {
        index = hashNumeric(numericKey, dict->size);
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	4619      	mov	r1, r3
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ff39 	bl	80005e6 <hashNumeric>
 8000774:	6138      	str	r0, [r7, #16]
        current = dict->buckets[index];
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4413      	add	r3, r2
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	617b      	str	r3, [r7, #20]
        while (current) {
 8000784:	e00e      	b.n	80007a4 <lookup+0xa4>
            if (current->numericKey == numericKey) {
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	429a      	cmp	r2, r3
 800078e:	d106      	bne.n	800079e <lookup+0x9e>
                *numTones = current->numTones;
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	68da      	ldr	r2, [r3, #12]
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	601a      	str	r2, [r3, #0]
                return current->tones;
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	e009      	b.n	80007b2 <lookup+0xb2>
            }
            current = current->next;
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	691b      	ldr	r3, [r3, #16]
 80007a2:	617b      	str	r3, [r7, #20]
        while (current) {
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d1ed      	bne.n	8000786 <lookup+0x86>
        }
    }

    *numTones = 0;
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
    return NULL;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3718      	adds	r7, #24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <extractNumber>:
////}
//PWM END

//UART BEGIN

void extractNumber(const uint8_t *data) {
 80007bc:	b5b0      	push	{r4, r5, r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	isCorrect = -1;
 80007c4:	4b3d      	ldr	r3, [pc, #244]	; (80008bc <extractNumber+0x100>)
 80007c6:	f04f 32ff 	mov.w	r2, #4294967295
 80007ca:	601a      	str	r2, [r3, #0]
	// Extract the first four characters and convert them to integers
	char pass[19] = "PASS_CHANGED(XXXX)\n";
 80007cc:	4b3c      	ldr	r3, [pc, #240]	; (80008c0 <extractNumber+0x104>)
 80007ce:	f107 0408 	add.w	r4, r7, #8
 80007d2:	461d      	mov	r5, r3
 80007d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d8:	682b      	ldr	r3, [r5, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	8022      	strh	r2, [r4, #0]
 80007de:	3402      	adds	r4, #2
 80007e0:	0c1b      	lsrs	r3, r3, #16
 80007e2:	7023      	strb	r3, [r4, #0]
	pass[13] = data[9];
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3309      	adds	r3, #9
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	757b      	strb	r3, [r7, #21]
	pass[14] = data[10];
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	330a      	adds	r3, #10
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	75bb      	strb	r3, [r7, #22]
	pass[15] = data[11];
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	330b      	adds	r3, #11
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	75fb      	strb	r3, [r7, #23]
	pass[16] = data[12];
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	330c      	adds	r3, #12
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	763b      	strb	r3, [r7, #24]

	for (int i = 9; i < 13; i++) {
 8000804:	2309      	movs	r3, #9
 8000806:	61fb      	str	r3, [r7, #28]
 8000808:	e037      	b.n	800087a <extractNumber+0xbe>
		if (data[i] <= '9' && data[i] >= '0') {
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	4413      	add	r3, r2
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b39      	cmp	r3, #57	; 0x39
 8000814:	d814      	bhi.n	8000840 <extractNumber+0x84>
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	4413      	add	r3, r2
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b2f      	cmp	r3, #47	; 0x2f
 8000820:	d90e      	bls.n	8000840 <extractNumber+0x84>
			password[i - 9] = data[i] - '0';
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	4413      	add	r3, r2
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	461a      	mov	r2, r3
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	3b09      	subs	r3, #9
 8000830:	3a30      	subs	r2, #48	; 0x30
 8000832:	4924      	ldr	r1, [pc, #144]	; (80008c4 <extractNumber+0x108>)
 8000834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 9; i < 13; i++) {
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	3301      	adds	r3, #1
 800083c:	61fb      	str	r3, [r7, #28]
 800083e:	e01c      	b.n	800087a <extractNumber+0xbe>
		} else {
			if (logStatus) {
 8000840:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <extractNumber+0x10c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d004      	beq.n	8000852 <extractNumber+0x96>
				HAL_UART_Transmit_IT(&huart1, "ERROR(INCORRECT FORMAT)\n", 24);
 8000848:	2218      	movs	r2, #24
 800084a:	4920      	ldr	r1, [pc, #128]	; (80008cc <extractNumber+0x110>)
 800084c:	4820      	ldr	r0, [pc, #128]	; (80008d0 <extractNumber+0x114>)
 800084e:	f005 f875 	bl	800593c <HAL_UART_Transmit_IT>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2101      	movs	r1, #1
 8000856:	481f      	ldr	r0, [pc, #124]	; (80008d4 <extractNumber+0x118>)
 8000858:	f001 ff1e 	bl	8002698 <HAL_GPIO_WritePin>
			buzzer_flag = WrongInput;
 800085c:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <extractNumber+0x11c>)
 800085e:	2201      	movs	r2, #1
 8000860:	701a      	strb	r2, [r3, #0]
			buzzerEnterTime = HAL_GetTick();
 8000862:	f001 fc0b 	bl	800207c <HAL_GetTick>
 8000866:	4603      	mov	r3, r0
 8000868:	4a1c      	ldr	r2, [pc, #112]	; (80008dc <extractNumber+0x120>)
 800086a:	6013      	str	r3, [r2, #0]
			if (alertStatus)
 800086c:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <extractNumber+0x124>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d01f      	beq.n	80008b4 <extractNumber+0xf8>
				PWM_Start();
 8000874:	f001 f9a6 	bl	8001bc4 <PWM_Start>
 8000878:	e01d      	b.n	80008b6 <extractNumber+0xfa>
	for (int i = 9; i < 13; i++) {
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	2b0c      	cmp	r3, #12
 800087e:	ddc4      	ble.n	800080a <extractNumber+0x4e>
			return;
		}
	}
	if (logStatus) {
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <extractNumber+0x10c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d016      	beq.n	80008b6 <extractNumber+0xfa>
		HAL_UART_Transmit_IT(&huart1, pass, 19);
 8000888:	f107 0308 	add.w	r3, r7, #8
 800088c:	2213      	movs	r2, #19
 800088e:	4619      	mov	r1, r3
 8000890:	480f      	ldr	r0, [pc, #60]	; (80008d0 <extractNumber+0x114>)
 8000892:	f005 f853 	bl	800593c <HAL_UART_Transmit_IT>
		buzzer_flag = CorrectInput;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <extractNumber+0x11c>)
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
		buzzerEnterTime = HAL_GetTick();
 800089c:	f001 fbee 	bl	800207c <HAL_GetTick>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <extractNumber+0x120>)
 80008a4:	6013      	str	r3, [r2, #0]
		if (alertStatus)
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <extractNumber+0x124>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d003      	beq.n	80008b6 <extractNumber+0xfa>
			PWM_Start();
 80008ae:	f001 f989 	bl	8001bc4 <PWM_Start>
 80008b2:	e000      	b.n	80008b6 <extractNumber+0xfa>
			return;
 80008b4:	bf00      	nop
	}
}
 80008b6:	3720      	adds	r7, #32
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bdb0      	pop	{r4, r5, r7, pc}
 80008bc:	20000040 	.word	0x20000040
 80008c0:	08007200 	.word	0x08007200
 80008c4:	20000000 	.word	0x20000000
 80008c8:	20000038 	.word	0x20000038
 80008cc:	080071e4 	.word	0x080071e4
 80008d0:	2000026c 	.word	0x2000026c
 80008d4:	48000800 	.word	0x48000800
 80008d8:	20000048 	.word	0x20000048
 80008dc:	20000620 	.word	0x20000620
 80008e0:	2000003c 	.word	0x2000003c

080008e4 <compareStrings>:

int compareStrings(const char *str1, const uint8_t *str2, int n) {
 80008e4:	b480      	push	{r7}
 80008e6:	b087      	sub	sp, #28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < n; i++) {
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	e00e      	b.n	8000914 <compareStrings+0x30>
		if (str1[i] != str2[i]) {
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	68fa      	ldr	r2, [r7, #12]
 80008fa:	4413      	add	r3, r2
 80008fc:	781a      	ldrb	r2, [r3, #0]
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	68b9      	ldr	r1, [r7, #8]
 8000902:	440b      	add	r3, r1
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	429a      	cmp	r2, r3
 8000908:	d001      	beq.n	800090e <compareStrings+0x2a>
			return 0;
 800090a:	2300      	movs	r3, #0
 800090c:	e007      	b.n	800091e <compareStrings+0x3a>
	for (int i = 0; i < n; i++) {
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	3301      	adds	r3, #1
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	697a      	ldr	r2, [r7, #20]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	429a      	cmp	r2, r3
 800091a:	dbec      	blt.n	80008f6 <compareStrings+0x12>
		}
	}
	return 1;
 800091c:	2301      	movs	r3, #1
}
 800091e:	4618      	mov	r0, r3
 8000920:	371c      	adds	r7, #28
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
	...

0800092c <HAL_UART_RxCpltCallback>:

uint8_t data[100];
uint8_t d;
uint8_t i;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800092c:	b5b0      	push	{r4, r5, r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a72      	ldr	r2, [pc, #456]	; (8000b04 <HAL_UART_RxCpltCallback+0x1d8>)
 800093a:	4293      	cmp	r3, r2
 800093c:	f040 80de 	bne.w	8000afc <HAL_UART_RxCpltCallback+0x1d0>
		HAL_UART_Receive_IT(&huart1, &d, 1);
 8000940:	2201      	movs	r2, #1
 8000942:	4971      	ldr	r1, [pc, #452]	; (8000b08 <HAL_UART_RxCpltCallback+0x1dc>)
 8000944:	4871      	ldr	r0, [pc, #452]	; (8000b0c <HAL_UART_RxCpltCallback+0x1e0>)
 8000946:	f005 f857 	bl	80059f8 <HAL_UART_Receive_IT>
		data[i++] = d;
 800094a:	4b71      	ldr	r3, [pc, #452]	; (8000b10 <HAL_UART_RxCpltCallback+0x1e4>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	1c5a      	adds	r2, r3, #1
 8000950:	b2d1      	uxtb	r1, r2
 8000952:	4a6f      	ldr	r2, [pc, #444]	; (8000b10 <HAL_UART_RxCpltCallback+0x1e4>)
 8000954:	7011      	strb	r1, [r2, #0]
 8000956:	461a      	mov	r2, r3
 8000958:	4b6b      	ldr	r3, [pc, #428]	; (8000b08 <HAL_UART_RxCpltCallback+0x1dc>)
 800095a:	7819      	ldrb	r1, [r3, #0]
 800095c:	4b6d      	ldr	r3, [pc, #436]	; (8000b14 <HAL_UART_RxCpltCallback+0x1e8>)
 800095e:	5499      	strb	r1, [r3, r2]
		if (d == '\n') {
 8000960:	4b69      	ldr	r3, [pc, #420]	; (8000b08 <HAL_UART_RxCpltCallback+0x1dc>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b0a      	cmp	r3, #10
 8000966:	f040 80c9 	bne.w	8000afc <HAL_UART_RxCpltCallback+0x1d0>
			if ((i == 15 && compareStrings(setPass, data, 9) == 1)
 800096a:	4b69      	ldr	r3, [pc, #420]	; (8000b10 <HAL_UART_RxCpltCallback+0x1e4>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b0f      	cmp	r3, #15
 8000970:	d11a      	bne.n	80009a8 <HAL_UART_RxCpltCallback+0x7c>
 8000972:	2209      	movs	r2, #9
 8000974:	4967      	ldr	r1, [pc, #412]	; (8000b14 <HAL_UART_RxCpltCallback+0x1e8>)
 8000976:	4868      	ldr	r0, [pc, #416]	; (8000b18 <HAL_UART_RxCpltCallback+0x1ec>)
 8000978:	f7ff ffb4 	bl	80008e4 <compareStrings>
 800097c:	4603      	mov	r3, r0
 800097e:	2b01      	cmp	r3, #1
 8000980:	d112      	bne.n	80009a8 <HAL_UART_RxCpltCallback+0x7c>
					&& isCorrect == -1) {
 8000982:	4b66      	ldr	r3, [pc, #408]	; (8000b1c <HAL_UART_RxCpltCallback+0x1f0>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800098a:	d10d      	bne.n	80009a8 <HAL_UART_RxCpltCallback+0x7c>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 800098c:	2201      	movs	r2, #1
 800098e:	2101      	movs	r1, #1
 8000990:	4863      	ldr	r0, [pc, #396]	; (8000b20 <HAL_UART_RxCpltCallback+0x1f4>)
 8000992:	f001 fe81 	bl	8002698 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2104      	movs	r1, #4
 800099a:	4861      	ldr	r0, [pc, #388]	; (8000b20 <HAL_UART_RxCpltCallback+0x1f4>)
 800099c:	f001 fe7c 	bl	8002698 <HAL_GPIO_WritePin>
				extractNumber(data);
 80009a0:	485c      	ldr	r0, [pc, #368]	; (8000b14 <HAL_UART_RxCpltCallback+0x1e8>)
 80009a2:	f7ff ff0b 	bl	80007bc <extractNumber>
 80009a6:	e0a6      	b.n	8000af6 <HAL_UART_RxCpltCallback+0x1ca>
			} else if (i == 7) {
 80009a8:	4b59      	ldr	r3, [pc, #356]	; (8000b10 <HAL_UART_RxCpltCallback+0x1e4>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b07      	cmp	r3, #7
 80009ae:	d111      	bne.n	80009d4 <HAL_UART_RxCpltCallback+0xa8>
				if (compareStrings(logON, data, 6) == 1) {
 80009b0:	2206      	movs	r2, #6
 80009b2:	4958      	ldr	r1, [pc, #352]	; (8000b14 <HAL_UART_RxCpltCallback+0x1e8>)
 80009b4:	485b      	ldr	r0, [pc, #364]	; (8000b24 <HAL_UART_RxCpltCallback+0x1f8>)
 80009b6:	f7ff ff95 	bl	80008e4 <compareStrings>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b01      	cmp	r3, #1
 80009be:	f040 809a 	bne.w	8000af6 <HAL_UART_RxCpltCallback+0x1ca>
					logStatus = 1;
 80009c2:	4b59      	ldr	r3, [pc, #356]	; (8000b28 <HAL_UART_RxCpltCallback+0x1fc>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Log Turned ON\n",
 80009c8:	2216      	movs	r2, #22
 80009ca:	4958      	ldr	r1, [pc, #352]	; (8000b2c <HAL_UART_RxCpltCallback+0x200>)
 80009cc:	484f      	ldr	r0, [pc, #316]	; (8000b0c <HAL_UART_RxCpltCallback+0x1e0>)
 80009ce:	f004 ffb5 	bl	800593c <HAL_UART_Transmit_IT>
 80009d2:	e090      	b.n	8000af6 <HAL_UART_RxCpltCallback+0x1ca>
							22);
				}
			} else if (i == 8) {
 80009d4:	4b4e      	ldr	r3, [pc, #312]	; (8000b10 <HAL_UART_RxCpltCallback+0x1e4>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b08      	cmp	r3, #8
 80009da:	d111      	bne.n	8000a00 <HAL_UART_RxCpltCallback+0xd4>
				if (compareStrings(logOFF, data, 7) == 1) {
 80009dc:	2207      	movs	r2, #7
 80009de:	494d      	ldr	r1, [pc, #308]	; (8000b14 <HAL_UART_RxCpltCallback+0x1e8>)
 80009e0:	4853      	ldr	r0, [pc, #332]	; (8000b30 <HAL_UART_RxCpltCallback+0x204>)
 80009e2:	f7ff ff7f 	bl	80008e4 <compareStrings>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	f040 8084 	bne.w	8000af6 <HAL_UART_RxCpltCallback+0x1ca>
					logStatus = 0;
 80009ee:	4b4e      	ldr	r3, [pc, #312]	; (8000b28 <HAL_UART_RxCpltCallback+0x1fc>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Log Turned OFF\n",
 80009f4:	2217      	movs	r2, #23
 80009f6:	494f      	ldr	r1, [pc, #316]	; (8000b34 <HAL_UART_RxCpltCallback+0x208>)
 80009f8:	4844      	ldr	r0, [pc, #272]	; (8000b0c <HAL_UART_RxCpltCallback+0x1e0>)
 80009fa:	f004 ff9f 	bl	800593c <HAL_UART_Transmit_IT>
 80009fe:	e07a      	b.n	8000af6 <HAL_UART_RxCpltCallback+0x1ca>
							23);
				}
			} else if (i == 9) {
 8000a00:	4b43      	ldr	r3, [pc, #268]	; (8000b10 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b09      	cmp	r3, #9
 8000a06:	d11a      	bne.n	8000a3e <HAL_UART_RxCpltCallback+0x112>
				if (compareStrings(alertON, data, 8) == 1) {
 8000a08:	2208      	movs	r2, #8
 8000a0a:	4942      	ldr	r1, [pc, #264]	; (8000b14 <HAL_UART_RxCpltCallback+0x1e8>)
 8000a0c:	484a      	ldr	r0, [pc, #296]	; (8000b38 <HAL_UART_RxCpltCallback+0x20c>)
 8000a0e:	f7ff ff69 	bl	80008e4 <compareStrings>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d16e      	bne.n	8000af6 <HAL_UART_RxCpltCallback+0x1ca>
					alertStatus = 1;
 8000a18:	4b48      	ldr	r3, [pc, #288]	; (8000b3c <HAL_UART_RxCpltCallback+0x210>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Alerts Turned ON\n",
 8000a1e:	2219      	movs	r2, #25
 8000a20:	4947      	ldr	r1, [pc, #284]	; (8000b40 <HAL_UART_RxCpltCallback+0x214>)
 8000a22:	483a      	ldr	r0, [pc, #232]	; (8000b0c <HAL_UART_RxCpltCallback+0x1e0>)
 8000a24:	f004 ff8a 	bl	800593c <HAL_UART_Transmit_IT>
							25);
					buzzer_flag = CorrectInput;
 8000a28:	4b46      	ldr	r3, [pc, #280]	; (8000b44 <HAL_UART_RxCpltCallback+0x218>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
					buzzerEnterTime = HAL_GetTick();
 8000a2e:	f001 fb25 	bl	800207c <HAL_GetTick>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4a44      	ldr	r2, [pc, #272]	; (8000b48 <HAL_UART_RxCpltCallback+0x21c>)
 8000a36:	6013      	str	r3, [r2, #0]
					PWM_Start();
 8000a38:	f001 f8c4 	bl	8001bc4 <PWM_Start>
 8000a3c:	e05b      	b.n	8000af6 <HAL_UART_RxCpltCallback+0x1ca>
				}
			} else if (i == 10) {
 8000a3e:	4b34      	ldr	r3, [pc, #208]	; (8000b10 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b0a      	cmp	r3, #10
 8000a44:	d110      	bne.n	8000a68 <HAL_UART_RxCpltCallback+0x13c>
				if (compareStrings(alertOFF, data, 9) == 1) {
 8000a46:	2209      	movs	r2, #9
 8000a48:	4932      	ldr	r1, [pc, #200]	; (8000b14 <HAL_UART_RxCpltCallback+0x1e8>)
 8000a4a:	4840      	ldr	r0, [pc, #256]	; (8000b4c <HAL_UART_RxCpltCallback+0x220>)
 8000a4c:	f7ff ff4a 	bl	80008e4 <compareStrings>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d14f      	bne.n	8000af6 <HAL_UART_RxCpltCallback+0x1ca>
					alertStatus = 0;
 8000a56:	4b39      	ldr	r3, [pc, #228]	; (8000b3c <HAL_UART_RxCpltCallback+0x210>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Alerts Turned OFF\n",
 8000a5c:	221a      	movs	r2, #26
 8000a5e:	493c      	ldr	r1, [pc, #240]	; (8000b50 <HAL_UART_RxCpltCallback+0x224>)
 8000a60:	482a      	ldr	r0, [pc, #168]	; (8000b0c <HAL_UART_RxCpltCallback+0x1e0>)
 8000a62:	f004 ff6b 	bl	800593c <HAL_UART_Transmit_IT>
 8000a66:	e046      	b.n	8000af6 <HAL_UART_RxCpltCallback+0x1ca>
							26);
				}
			} else if (i == 14 && (data[11] - '0') < 6
 8000a68:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b0e      	cmp	r3, #14
 8000a6e:	d12d      	bne.n	8000acc <HAL_UART_RxCpltCallback+0x1a0>
 8000a70:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <HAL_UART_RxCpltCallback+0x1e8>)
 8000a72:	7adb      	ldrb	r3, [r3, #11]
 8000a74:	2b35      	cmp	r3, #53	; 0x35
 8000a76:	d829      	bhi.n	8000acc <HAL_UART_RxCpltCallback+0x1a0>
					&& (data[11] - '0') > -1) {
 8000a78:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <HAL_UART_RxCpltCallback+0x1e8>)
 8000a7a:	7adb      	ldrb	r3, [r3, #11]
 8000a7c:	2b2f      	cmp	r3, #47	; 0x2f
 8000a7e:	d925      	bls.n	8000acc <HAL_UART_RxCpltCallback+0x1a0>
				if (compareStrings(setVolume, data, 11) == 1
 8000a80:	220b      	movs	r2, #11
 8000a82:	4924      	ldr	r1, [pc, #144]	; (8000b14 <HAL_UART_RxCpltCallback+0x1e8>)
 8000a84:	4833      	ldr	r0, [pc, #204]	; (8000b54 <HAL_UART_RxCpltCallback+0x228>)
 8000a86:	f7ff ff2d 	bl	80008e4 <compareStrings>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d131      	bne.n	8000af4 <HAL_UART_RxCpltCallback+0x1c8>
						&& data[12] == ')') {
 8000a90:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <HAL_UART_RxCpltCallback+0x1e8>)
 8000a92:	7b1b      	ldrb	r3, [r3, #12]
 8000a94:	2b29      	cmp	r3, #41	; 0x29
 8000a96:	d12d      	bne.n	8000af4 <HAL_UART_RxCpltCallback+0x1c8>
					int v = data[11] - '0';
 8000a98:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <HAL_UART_RxCpltCallback+0x1e8>)
 8000a9a:	7adb      	ldrb	r3, [r3, #11]
 8000a9c:	3b30      	subs	r3, #48	; 0x30
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
//					_volume = v * 10;
					char massage[24] = "Program Volume Set To  \n";
 8000aa0:	4b2d      	ldr	r3, [pc, #180]	; (8000b58 <HAL_UART_RxCpltCallback+0x22c>)
 8000aa2:	f107 040c 	add.w	r4, r7, #12
 8000aa6:	461d      	mov	r5, r3
 8000aa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aac:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ab0:	e884 0003 	stmia.w	r4, {r0, r1}
					massage[22] = data[11];
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <HAL_UART_RxCpltCallback+0x1e8>)
 8000ab6:	7adb      	ldrb	r3, [r3, #11]
 8000ab8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					HAL_UART_Transmit_IT(&huart1, massage, 24);
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	2218      	movs	r2, #24
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4811      	ldr	r0, [pc, #68]	; (8000b0c <HAL_UART_RxCpltCallback+0x1e0>)
 8000ac6:	f004 ff39 	bl	800593c <HAL_UART_Transmit_IT>
				if (compareStrings(setVolume, data, 11) == 1
 8000aca:	e013      	b.n	8000af4 <HAL_UART_RxCpltCallback+0x1c8>
				}
			} else {
				HAL_UART_Transmit_IT(&huart1, "INVALID INPUT\n", 14);
 8000acc:	220e      	movs	r2, #14
 8000ace:	4923      	ldr	r1, [pc, #140]	; (8000b5c <HAL_UART_RxCpltCallback+0x230>)
 8000ad0:	480e      	ldr	r0, [pc, #56]	; (8000b0c <HAL_UART_RxCpltCallback+0x1e0>)
 8000ad2:	f004 ff33 	bl	800593c <HAL_UART_Transmit_IT>
				buzzer_flag = WrongInput;
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <HAL_UART_RxCpltCallback+0x218>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	701a      	strb	r2, [r3, #0]
				buzzerEnterTime = HAL_GetTick();
 8000adc:	f001 face 	bl	800207c <HAL_GetTick>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	4a19      	ldr	r2, [pc, #100]	; (8000b48 <HAL_UART_RxCpltCallback+0x21c>)
 8000ae4:	6013      	str	r3, [r2, #0]
				if (alertStatus)
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <HAL_UART_RxCpltCallback+0x210>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d003      	beq.n	8000af6 <HAL_UART_RxCpltCallback+0x1ca>
					PWM_Start();
 8000aee:	f001 f869 	bl	8001bc4 <PWM_Start>
 8000af2:	e000      	b.n	8000af6 <HAL_UART_RxCpltCallback+0x1ca>
				if (compareStrings(setVolume, data, 11) == 1
 8000af4:	bf00      	nop
			}

			i = 0;
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_UART_RxCpltCallback+0x1e4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8000afc:	bf00      	nop
 8000afe:	3728      	adds	r7, #40	; 0x28
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bdb0      	pop	{r4, r5, r7, pc}
 8000b04:	40013800 	.word	0x40013800
 8000b08:	200006dc 	.word	0x200006dc
 8000b0c:	2000026c 	.word	0x2000026c
 8000b10:	200006dd 	.word	0x200006dd
 8000b14:	20000678 	.word	0x20000678
 8000b18:	2000004c 	.word	0x2000004c
 8000b1c:	20000040 	.word	0x20000040
 8000b20:	48000800 	.word	0x48000800
 8000b24:	20000058 	.word	0x20000058
 8000b28:	20000038 	.word	0x20000038
 8000b2c:	08007214 	.word	0x08007214
 8000b30:	20000060 	.word	0x20000060
 8000b34:	0800722c 	.word	0x0800722c
 8000b38:	20000068 	.word	0x20000068
 8000b3c:	2000003c 	.word	0x2000003c
 8000b40:	08007244 	.word	0x08007244
 8000b44:	20000048 	.word	0x20000048
 8000b48:	20000620 	.word	0x20000620
 8000b4c:	20000070 	.word	0x20000070
 8000b50:	08007260 	.word	0x08007260
 8000b54:	2000007c 	.word	0x2000007c
 8000b58:	0800728c 	.word	0x0800728c
 8000b5c:	0800727c 	.word	0x0800727c

08000b60 <display_number>:

//UART END

void display_number(int led_flag, int _number) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOD,
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	211e      	movs	r1, #30
 8000b6e:	4813      	ldr	r0, [pc, #76]	; (8000bbc <display_number+0x5c>)
 8000b70:	f001 fd92 	bl	8002698 <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOD, led[led_flag], DISPLAY_ON);
 8000b74:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <display_number+0x60>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480e      	ldr	r0, [pc, #56]	; (8000bbc <display_number+0x5c>)
 8000b82:	f001 fd89 	bl	8002698 <HAL_GPIO_WritePin>
	if (_number != 0) {
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d009      	beq.n	8000ba0 <display_number+0x40>
		HAL_GPIO_WritePin(GPIOD, digits[_number].pattern, GPIO_PIN_SET);
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	; (8000bc4 <display_number+0x64>)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	4413      	add	r3, r2
 8000b94:	889b      	ldrh	r3, [r3, #4]
 8000b96:	2201      	movs	r2, #1
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4808      	ldr	r0, [pc, #32]	; (8000bbc <display_number+0x5c>)
 8000b9c:	f001 fd7c 	bl	8002698 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(GPIOD, digits[_number].anti_pattern, GPIO_PIN_RESET);
 8000ba0:	4a08      	ldr	r2, [pc, #32]	; (8000bc4 <display_number+0x64>)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	4413      	add	r3, r2
 8000ba8:	88db      	ldrh	r3, [r3, #6]
 8000baa:	2200      	movs	r2, #0
 8000bac:	4619      	mov	r1, r3
 8000bae:	4803      	ldr	r0, [pc, #12]	; (8000bbc <display_number+0x5c>)
 8000bb0:	f001 fd72 	bl	8002698 <HAL_GPIO_WritePin>
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	48000c00 	.word	0x48000c00
 8000bc0:	200005e8 	.word	0x200005e8
 8000bc4:	20000628 	.word	0x20000628

08000bc8 <increase>:

void increase(int _head) {
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	carrier[_head] += 1;
 8000bd0:	4a0c      	ldr	r2, [pc, #48]	; (8000c04 <increase+0x3c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd8:	1c5a      	adds	r2, r3, #1
 8000bda:	490a      	ldr	r1, [pc, #40]	; (8000c04 <increase+0x3c>)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (carrier[_head] == 10) {
 8000be2:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <increase+0x3c>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bea:	2b0a      	cmp	r3, #10
 8000bec:	d104      	bne.n	8000bf8 <increase+0x30>
		carrier[_head] = 0;
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <increase+0x3c>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	200005f0 	.word	0x200005f0

08000c08 <init_display>:

void init_display() {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	211e      	movs	r1, #30
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <init_display+0x14>)
 8000c12:	f001 fd41 	bl	8002698 <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	48000c00 	.word	0x48000c00

08000c20 <initTonesDictionary>:

void initTonesDictionary() {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	f5ad 5d88 	sub.w	sp, sp, #4352	; 0x1100
 8000c26:	b086      	sub	sp, #24
 8000c28:	af02      	add	r7, sp, #8
    playlist = initDictionary(10);
 8000c2a:	200a      	movs	r0, #10
 8000c2c:	f7ff fcee 	bl	800060c <initDictionary>
 8000c30:	4603      	mov	r3, r0
 8000c32:	4a28      	ldr	r2, [pc, #160]	; (8000cd4 <initTonesDictionary+0xb4>)
 8000c34:	6013      	str	r3, [r2, #0]

    // Example tones
    struct Tone super_mario_bros[]={{2637,306},{0,153},{2637,153},{0,153},{2093,153},{2637,153},{0,153},{3136,153},{0,459},{1586,153},{0,459},{2093,153},{0,306},{1586,153},{0,306},{1319,153},{0,306},{1760,153},{0,153},{1976,153},{0,153},{1865,153},{1760,153},{0,153},{1586,204},{2637,204},{3136,204},{3520,153},{0,153},{2794,153},{3136,153},{0,153},{2637,153},{0,153},{2093,153},{2349,153},{1976,153},{0,306},{2093,153},{0,306},{1586,153},{0,306},{1319,153},{0,306},{1760,153},{0,153},{1976,153},{0,153},{1865,153},{1760,153},{0,153},{1586,204},{2637,204},{3136,204},{3520,153},{0,153},{2794,153},{3136,153},{0,153},{2637,153},{0,153},{2093,153},{2349,153},{1976,153},{0,0}};
 8000c36:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000c3a:	f103 0310 	add.w	r3, r3, #16
 8000c3e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000c42:	4a25      	ldr	r2, [pc, #148]	; (8000cd8 <initTonesDictionary+0xb8>)
 8000c44:	4618      	mov	r0, r3
 8000c46:	4611      	mov	r1, r2
 8000c48:	f44f 7302 	mov.w	r3, #520	; 0x208
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	f006 f9d7 	bl	8007000 <memcpy>
    struct Tone hedwig_theme[]={{REST,750},{NOTE_D4,374},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_G4,750},{NOTE_D5,374},{NOTE_C5,1124},{NOTE_A4,1124},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_F4,750},{NOTE_GS4,374},{NOTE_D4,2249},{NOTE_D4,374},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_G4,750},{NOTE_D5,374},{NOTE_F5,750},{NOTE_E5,374},{NOTE_DS5,750},{NOTE_B4,374},{NOTE_DS5,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_B4,374},{NOTE_G4,2249},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_DS5,750},{NOTE_D5,374},{NOTE_CS5,750},{NOTE_A4,374},{NOTE_AS4,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_D4,374},{NOTE_D5,1700},{REST,150},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_F5,750},{NOTE_E5,374},{NOTE_DS5,750},{NOTE_B4,374},{NOTE_DS5,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_AS4,374},{NOTE_G4,2249},{0,0}};
 8000c52:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000c56:	f103 0310 	add.w	r3, r3, #16
 8000c5a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000c5e:	4a1f      	ldr	r2, [pc, #124]	; (8000cdc <initTonesDictionary+0xbc>)
 8000c60:	4618      	mov	r0, r3
 8000c62:	4611      	mov	r1, r2
 8000c64:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000c68:	461a      	mov	r2, r3
 8000c6a:	f006 f9c9 	bl	8007000 <memcpy>
    struct Tone doom[]={{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_FS3,67},{NOTE_D3,67},{NOTE_B2,67},{NOTE_A3,67},{NOTE_FS3,67},{NOTE_B2,67},{NOTE_D3,67},{NOTE_FS3,67},{NOTE_A3,67},{NOTE_FS3,67},{NOTE_D3,67},{NOTE_B2,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B3,67},{NOTE_G3,67},{NOTE_E3,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_B3,67},{NOTE_G4,67},{NOTE_B4,67},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_E3,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,534},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_E3,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_C4,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_CS4,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_B3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_A3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_G3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_GS3,133},{NOTE_A3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_B3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_A3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_G3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_F3,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B3,67},{NOTE_G3,67},{NOTE_E3,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_B3,67},{NOTE_G4,67},{NOTE_B4,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{0,0}};
 8000c6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c72:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000c76:	4a1a      	ldr	r2, [pc, #104]	; (8000ce0 <initTonesDictionary+0xc0>)
 8000c78:	4618      	mov	r0, r3
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	f44f 6351 	mov.w	r3, #3344	; 0xd10
 8000c80:	461a      	mov	r2, r3
 8000c82:	f006 f9bd 	bl	8007000 <memcpy>

    // Insert tones into dictionary
    insert(playlist, "super_mario_bros", 0, super_mario_bros, sizeof(super_mario_bros) / sizeof(struct Tone));
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <initTonesDictionary+0xb4>)
 8000c88:	6818      	ldr	r0, [r3, #0]
 8000c8a:	f607 7308 	addw	r3, r7, #3848	; 0xf08
 8000c8e:	2241      	movs	r2, #65	; 0x41
 8000c90:	9200      	str	r2, [sp, #0]
 8000c92:	2200      	movs	r2, #0
 8000c94:	4913      	ldr	r1, [pc, #76]	; (8000ce4 <initTonesDictionary+0xc4>)
 8000c96:	f7ff fce4 	bl	8000662 <insert>
    insert(playlist, "hedwig_theme", 0, hedwig_theme, sizeof(hedwig_theme) / sizeof(struct Tone));
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <initTonesDictionary+0xb4>)
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000ca2:	223f      	movs	r2, #63	; 0x3f
 8000ca4:	9200      	str	r2, [sp, #0]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	490f      	ldr	r1, [pc, #60]	; (8000ce8 <initTonesDictionary+0xc8>)
 8000caa:	f7ff fcda 	bl	8000662 <insert>
    insert(playlist, "doom", 0, doom, sizeof(doom) / sizeof(struct Tone));
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <initTonesDictionary+0xb4>)
 8000cb0:	6818      	ldr	r0, [r3, #0]
 8000cb2:	f107 0310 	add.w	r3, r7, #16
 8000cb6:	3b10      	subs	r3, #16
 8000cb8:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 8000cbc:	9200      	str	r2, [sp, #0]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	490a      	ldr	r1, [pc, #40]	; (8000cec <initTonesDictionary+0xcc>)
 8000cc2:	f7ff fcce 	bl	8000662 <insert>




}
 8000cc6:	bf00      	nop
 8000cc8:	f507 5788 	add.w	r7, r7, #4352	; 0x1100
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200005e0 	.word	0x200005e0
 8000cd8:	080072d0 	.word	0x080072d0
 8000cdc:	080074d8 	.word	0x080074d8
 8000ce0:	080076d0 	.word	0x080076d0
 8000ce4:	080072a4 	.word	0x080072a4
 8000ce8:	080072b8 	.word	0x080072b8
 8000cec:	080072c8 	.word	0x080072c8

08000cf0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b096      	sub	sp, #88	; 0x58
 8000cf4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	struct digit _digits[10];
	_digits[0].number = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
	_digits[0].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
 8000cfa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000cfe:	817b      	strh	r3, [r7, #10]
			| GPIO_PIN_15;

	_digits[1].number = 1;
 8000d00:	2301      	movs	r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
	_digits[1].pattern = GPIO_PIN_12;
 8000d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d08:	823b      	strh	r3, [r7, #16]
	_digits[1].anti_pattern = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000d0a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d0e:	827b      	strh	r3, [r7, #18]

	_digits[2].number = 2;
 8000d10:	2302      	movs	r3, #2
 8000d12:	617b      	str	r3, [r7, #20]
	_digits[2].pattern = GPIO_PIN_13;
 8000d14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d18:	833b      	strh	r3, [r7, #24]
	_digits[2].anti_pattern = GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15;
 8000d1a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000d1e:	837b      	strh	r3, [r7, #26]

	_digits[3].number = 3;
 8000d20:	2303      	movs	r3, #3
 8000d22:	61fb      	str	r3, [r7, #28]
	_digits[3].pattern = GPIO_PIN_12 | GPIO_PIN_13;
 8000d24:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d28:	843b      	strh	r3, [r7, #32]
	_digits[3].anti_pattern = GPIO_PIN_14 | GPIO_PIN_15;
 8000d2a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000d2e:	847b      	strh	r3, [r7, #34]	; 0x22

	_digits[4].number = 4;
 8000d30:	2304      	movs	r3, #4
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
	_digits[4].pattern = GPIO_PIN_14;
 8000d34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d38:	853b      	strh	r3, [r7, #40]	; 0x28
	_digits[4].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15;
 8000d3a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000d3e:	857b      	strh	r3, [r7, #42]	; 0x2a

	_digits[5].number = 5;
 8000d40:	2305      	movs	r3, #5
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
	_digits[5].pattern = GPIO_PIN_12 | GPIO_PIN_14;
 8000d44:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000d48:	863b      	strh	r3, [r7, #48]	; 0x30
	_digits[5].anti_pattern = GPIO_PIN_13 | GPIO_PIN_15;
 8000d4a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000d4e:	867b      	strh	r3, [r7, #50]	; 0x32

	_digits[6].number = 6;
 8000d50:	2306      	movs	r3, #6
 8000d52:	637b      	str	r3, [r7, #52]	; 0x34
	_digits[6].pattern = GPIO_PIN_13 | GPIO_PIN_14;
 8000d54:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d58:	873b      	strh	r3, [r7, #56]	; 0x38
	_digits[6].anti_pattern = GPIO_PIN_12 | GPIO_PIN_15;
 8000d5a:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000d5e:	877b      	strh	r3, [r7, #58]	; 0x3a

	_digits[7].number = 7;
 8000d60:	2307      	movs	r3, #7
 8000d62:	63fb      	str	r3, [r7, #60]	; 0x3c
	_digits[7].pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 8000d64:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000d68:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	_digits[7].anti_pattern = GPIO_PIN_15;
 8000d6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d70:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	_digits[8].number = 8;
 8000d74:	2308      	movs	r3, #8
 8000d76:	647b      	str	r3, [r7, #68]	; 0x44
	_digits[8].pattern = GPIO_PIN_15;
 8000d78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d7c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	_digits[8].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 8000d80:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000d84:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	_digits[9].number = 9;
 8000d88:	2309      	movs	r3, #9
 8000d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
	_digits[9].pattern = GPIO_PIN_12 | GPIO_PIN_15;
 8000d8c:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000d90:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	_digits[9].anti_pattern = GPIO_PIN_13 | GPIO_PIN_14;
 8000d94:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d98:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	//initialize Global digits structure
	for (int i = 0; i < 10; i++) {
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	657b      	str	r3, [r7, #84]	; 0x54
 8000da0:	e00f      	b.n	8000dc2 <main+0xd2>
		digits[i] = _digits[i];
 8000da2:	492a      	ldr	r1, [pc, #168]	; (8000e4c <main+0x15c>)
 8000da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000da6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000da8:	00d2      	lsls	r2, r2, #3
 8000daa:	3258      	adds	r2, #88	; 0x58
 8000dac:	443a      	add	r2, r7
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	440b      	add	r3, r1
 8000db2:	3a54      	subs	r2, #84	; 0x54
 8000db4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000db8:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 0; i < 10; i++) {
 8000dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	657b      	str	r3, [r7, #84]	; 0x54
 8000dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dc4:	2b09      	cmp	r3, #9
 8000dc6:	ddec      	ble.n	8000da2 <main+0xb2>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000dc8:	f001 f8fe 	bl	8001fc8 <HAL_Init>

	/* USER CODE BEGIN Init */

	//Set 7-segment PINS
	led[0] = GPIO_PIN_1;
 8000dcc:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <main+0x160>)
 8000dce:	2202      	movs	r2, #2
 8000dd0:	801a      	strh	r2, [r3, #0]
	led[1] = GPIO_PIN_2;
 8000dd2:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <main+0x160>)
 8000dd4:	2204      	movs	r2, #4
 8000dd6:	805a      	strh	r2, [r3, #2]
	led[2] = GPIO_PIN_3;
 8000dd8:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <main+0x160>)
 8000dda:	2208      	movs	r2, #8
 8000ddc:	809a      	strh	r2, [r3, #4]
	led[3] = GPIO_PIN_4;
 8000dde:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <main+0x160>)
 8000de0:	2210      	movs	r2, #16
 8000de2:	80da      	strh	r2, [r3, #6]

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000de4:	f000 f844 	bl	8000e70 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000de8:	f000 fa42 	bl	8001270 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000dec:	f000 f8a6 	bl	8000f3c <MX_I2C1_Init>
	MX_SPI1_Init();
 8000df0:	f000 f8e4 	bl	8000fbc <MX_SPI1_Init>
	MX_USB_PCD_Init();
 8000df4:	f000 fa1a 	bl	800122c <MX_USB_PCD_Init>
	MX_TIM1_Init();
 8000df8:	f000 f91e 	bl	8001038 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 8000dfc:	f000 f9e6 	bl	80011cc <MX_USART1_UART_Init>
	MX_TIM2_Init();
 8000e00:	f000 f96e 	bl	80010e0 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8000e04:	4813      	ldr	r0, [pc, #76]	; (8000e54 <main+0x164>)
 8000e06:	f003 fb95 	bl	8004534 <HAL_TIM_Base_Start_IT>
	HAL_UART_Transmit_IT(&huart1,
 8000e0a:	222c      	movs	r2, #44	; 0x2c
 8000e0c:	4912      	ldr	r1, [pc, #72]	; (8000e58 <main+0x168>)
 8000e0e:	4813      	ldr	r0, [pc, #76]	; (8000e5c <main+0x16c>)
 8000e10:	f004 fd94 	bl	800593c <HAL_UART_Transmit_IT>
			"=============\nProgram Running\n=============\n", 44);
	HAL_UART_Receive_IT(&huart1, &d, 1);
 8000e14:	2201      	movs	r2, #1
 8000e16:	4912      	ldr	r1, [pc, #72]	; (8000e60 <main+0x170>)
 8000e18:	4810      	ldr	r0, [pc, #64]	; (8000e5c <main+0x16c>)
 8000e1a:	f004 fded 	bl	80059f8 <HAL_UART_Receive_IT>
	initTonesDictionary();
 8000e1e:	f7ff feff 	bl	8000c20 <initTonesDictionary>
	PWM_Start();
 8000e22:	f000 fecf 	bl	8001bc4 <PWM_Start>
	 int toneCount;
	 melody = lookup(playlist, "doom", 0, &toneCount);;
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <main+0x174>)
 8000e28:	6818      	ldr	r0, [r3, #0]
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	490e      	ldr	r1, [pc, #56]	; (8000e68 <main+0x178>)
 8000e30:	f7ff fc66 	bl	8000700 <lookup>
 8000e34:	4603      	mov	r3, r0
 8000e36:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <main+0x17c>)
 8000e38:	6013      	str	r3, [r2, #0]
	 Change_Melody(melody, toneCount);
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <main+0x17c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 ff82 	bl	8001d4c <Change_Melody>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000e48:	e7fe      	b.n	8000e48 <main+0x158>
 8000e4a:	bf00      	nop
 8000e4c:	20000628 	.word	0x20000628
 8000e50:	200005e8 	.word	0x200005e8
 8000e54:	200001d4 	.word	0x200001d4
 8000e58:	080083e0 	.word	0x080083e0
 8000e5c:	2000026c 	.word	0x2000026c
 8000e60:	200006dc 	.word	0x200006dc
 8000e64:	200005e0 	.word	0x200005e0
 8000e68:	080072c8 	.word	0x080072c8
 8000e6c:	200005e4 	.word	0x200005e4

08000e70 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b09e      	sub	sp, #120	; 0x78
 8000e74:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e7a:	2228      	movs	r2, #40	; 0x28
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f006 f8cc 	bl	800701c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000e94:	463b      	mov	r3, r7
 8000e96:	223c      	movs	r2, #60	; 0x3c
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f006 f8be 	bl	800701c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	653b      	str	r3, [r7, #80]	; 0x50
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ea4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ea8:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb2:	2310      	movs	r3, #16
 8000eb4:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ebe:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ec0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ec4:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ec6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f001 fe0c 	bl	8002ae8 <HAL_RCC_OscConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SystemClock_Config+0x6a>
		Error_Handler();
 8000ed6:	f000 fcc7 	bl	8001868 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000eda:	230f      	movs	r3, #15
 8000edc:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eea:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000ef0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f002 fe34 	bl	8003b64 <HAL_RCC_ClockConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0x96>
		Error_Handler();
 8000f02:	f000 fcb1 	bl	8001868 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <SystemClock_Config+0xc8>)
 8000f08:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_TIM1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f16:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f003 f856 	bl	8003fd0 <HAL_RCCEx_PeriphCLKConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0xbe>
		Error_Handler();
 8000f2a:	f000 fc9d 	bl	8001868 <Error_Handler>
	}
}
 8000f2e:	bf00      	nop
 8000f30:	3778      	adds	r7, #120	; 0x78
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	00021021 	.word	0x00021021

08000f3c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f42:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <MX_I2C1_Init+0x78>)
 8000f44:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f48:	4a1b      	ldr	r2, [pc, #108]	; (8000fb8 <MX_I2C1_Init+0x7c>)
 8000f4a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000f4c:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000f76:	480e      	ldr	r0, [pc, #56]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f78:	f001 fbbe 	bl	80026f8 <HAL_I2C_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000f82:	f000 fc71 	bl	8001868 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000f86:	2100      	movs	r1, #0
 8000f88:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f8a:	f001 fc44 	bl	8002816 <HAL_I2CEx_ConfigAnalogFilter>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000f94:	f000 fc68 	bl	8001868 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f9c:	f001 fc86 	bl	80028ac <HAL_I2CEx_ConfigDigitalFilter>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000fa6:	f000 fc5f 	bl	8001868 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2000011c 	.word	0x2000011c
 8000fb4:	40005400 	.word	0x40005400
 8000fb8:	2000090e 	.word	0x2000090e

08000fbc <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <MX_SPI1_Init+0x74>)
 8000fc2:	4a1c      	ldr	r2, [pc, #112]	; (8001034 <MX_SPI1_Init+0x78>)
 8000fc4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <MX_SPI1_Init+0x74>)
 8000fc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fcc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <MX_SPI1_Init+0x74>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <MX_SPI1_Init+0x74>)
 8000fd6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000fda:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <MX_SPI1_Init+0x74>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <MX_SPI1_Init+0x74>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <MX_SPI1_Init+0x74>)
 8000fea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fee:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <MX_SPI1_Init+0x74>)
 8000ff2:	2208      	movs	r2, #8
 8000ff4:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <MX_SPI1_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <MX_SPI1_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <MX_SPI1_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_SPI1_Init+0x74>)
 800100a:	2207      	movs	r2, #7
 800100c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800100e:	4b08      	ldr	r3, [pc, #32]	; (8001030 <MX_SPI1_Init+0x74>)
 8001010:	2200      	movs	r2, #0
 8001012:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <MX_SPI1_Init+0x74>)
 8001016:	2208      	movs	r2, #8
 8001018:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <MX_SPI1_Init+0x74>)
 800101c:	f003 f988 	bl	8004330 <HAL_SPI_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_SPI1_Init+0x6e>
		Error_Handler();
 8001026:	f000 fc1f 	bl	8001868 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000170 	.word	0x20000170
 8001034:	40013000 	.word	0x40013000

08001038 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800103e:	f107 0310 	add.w	r3, r7, #16
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001056:	4b20      	ldr	r3, [pc, #128]	; (80010d8 <MX_TIM1_Init+0xa0>)
 8001058:	4a20      	ldr	r2, [pc, #128]	; (80010dc <MX_TIM1_Init+0xa4>)
 800105a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 4800 - 1;
 800105c:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <MX_TIM1_Init+0xa0>)
 800105e:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001062:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <MX_TIM1_Init+0xa0>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 5 - 1;
 800106a:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <MX_TIM1_Init+0xa0>)
 800106c:	2204      	movs	r2, #4
 800106e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001070:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <MX_TIM1_Init+0xa0>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <MX_TIM1_Init+0xa0>)
 8001078:	2200      	movs	r2, #0
 800107a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_TIM1_Init+0xa0>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001082:	4815      	ldr	r0, [pc, #84]	; (80010d8 <MX_TIM1_Init+0xa0>)
 8001084:	f003 f9ff 	bl	8004486 <HAL_TIM_Base_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM1_Init+0x5a>
		Error_Handler();
 800108e:	f000 fbeb 	bl	8001868 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001096:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4619      	mov	r1, r3
 800109e:	480e      	ldr	r0, [pc, #56]	; (80010d8 <MX_TIM1_Init+0xa0>)
 80010a0:	f003 fe48 	bl	8004d34 <HAL_TIM_ConfigClockSource>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM1_Init+0x76>
		Error_Handler();
 80010aa:	f000 fbdd 	bl	8001868 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	4619      	mov	r1, r3
 80010be:	4806      	ldr	r0, [pc, #24]	; (80010d8 <MX_TIM1_Init+0xa0>)
 80010c0:	f004 fb50 	bl	8005764 <HAL_TIMEx_MasterConfigSynchronization>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 80010ca:	f000 fbcd 	bl	8001868 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	3720      	adds	r7, #32
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	200001d4 	.word	0x200001d4
 80010dc:	40012c00 	.word	0x40012c00

080010e0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08e      	sub	sp, #56	; 0x38
 80010e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80010e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001100:	463b      	mov	r3, r7
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]
 800110e:	615a      	str	r2, [r3, #20]
 8001110:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001112:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <MX_TIM2_Init+0xe8>)
 8001114:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001118:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800111a:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <MX_TIM2_Init+0xe8>)
 800111c:	2200      	movs	r2, #0
 800111e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001120:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <MX_TIM2_Init+0xe8>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001126:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <MX_TIM2_Init+0xe8>)
 8001128:	f04f 32ff 	mov.w	r2, #4294967295
 800112c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112e:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <MX_TIM2_Init+0xe8>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001134:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <MX_TIM2_Init+0xe8>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800113a:	4823      	ldr	r0, [pc, #140]	; (80011c8 <MX_TIM2_Init+0xe8>)
 800113c:	f003 f9a3 	bl	8004486 <HAL_TIM_Base_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM2_Init+0x6a>
		Error_Handler();
 8001146:	f000 fb8f 	bl	8001868 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001150:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001154:	4619      	mov	r1, r3
 8001156:	481c      	ldr	r0, [pc, #112]	; (80011c8 <MX_TIM2_Init+0xe8>)
 8001158:	f003 fdec 	bl	8004d34 <HAL_TIM_ConfigClockSource>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM2_Init+0x86>
		Error_Handler();
 8001162:	f000 fb81 	bl	8001868 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001166:	4818      	ldr	r0, [pc, #96]	; (80011c8 <MX_TIM2_Init+0xe8>)
 8001168:	f003 fa4e 	bl	8004608 <HAL_TIM_PWM_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM2_Init+0x96>
		Error_Handler();
 8001172:	f000 fb79 	bl	8001868 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	4619      	mov	r1, r3
 8001184:	4810      	ldr	r0, [pc, #64]	; (80011c8 <MX_TIM2_Init+0xe8>)
 8001186:	f004 faed 	bl	8005764 <HAL_TIMEx_MasterConfigSynchronization>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8001190:	f000 fb6a 	bl	8001868 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001194:	2360      	movs	r3, #96	; 0x60
 8001196:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80011a4:	463b      	mov	r3, r7
 80011a6:	2200      	movs	r2, #0
 80011a8:	4619      	mov	r1, r3
 80011aa:	4807      	ldr	r0, [pc, #28]	; (80011c8 <MX_TIM2_Init+0xe8>)
 80011ac:	f003 fcae 	bl	8004b0c <HAL_TIM_PWM_ConfigChannel>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 80011b6:	f000 fb57 	bl	8001868 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80011ba:	4803      	ldr	r0, [pc, #12]	; (80011c8 <MX_TIM2_Init+0xe8>)
 80011bc:	f000 fc3c 	bl	8001a38 <HAL_TIM_MspPostInit>

}
 80011c0:	bf00      	nop
 80011c2:	3738      	adds	r7, #56	; 0x38
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000220 	.word	0x20000220

080011cc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_USART1_UART_Init+0x58>)
 80011d2:	4a15      	ldr	r2, [pc, #84]	; (8001228 <MX_USART1_UART_Init+0x5c>)
 80011d4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <MX_USART1_UART_Init+0x58>)
 80011d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011dc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_USART1_UART_Init+0x58>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_USART1_UART_Init+0x58>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_USART1_UART_Init+0x58>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_USART1_UART_Init+0x58>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <MX_USART1_UART_Init+0x58>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_USART1_UART_Init+0x58>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <MX_USART1_UART_Init+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_USART1_UART_Init+0x58>)
 800120a:	2200      	movs	r2, #0
 800120c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_USART1_UART_Init+0x58>)
 8001210:	f004 fb46 	bl	80058a0 <HAL_UART_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_USART1_UART_Init+0x52>
		Error_Handler();
 800121a:	f000 fb25 	bl	8001868 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000026c 	.word	0x2000026c
 8001228:	40013800 	.word	0x40013800

0800122c <MX_USB_PCD_Init>:
/**
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void) {
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 8001230:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <MX_USB_PCD_Init+0x3c>)
 8001232:	4a0e      	ldr	r2, [pc, #56]	; (800126c <MX_USB_PCD_Init+0x40>)
 8001234:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_USB_PCD_Init+0x3c>)
 8001238:	2208      	movs	r2, #8
 800123a:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <MX_USB_PCD_Init+0x3c>)
 800123e:	2202      	movs	r2, #2
 8001240:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_USB_PCD_Init+0x3c>)
 8001244:	2202      	movs	r2, #2
 8001246:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001248:	4b07      	ldr	r3, [pc, #28]	; (8001268 <MX_USB_PCD_Init+0x3c>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_USB_PCD_Init+0x3c>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK) {
 8001254:	4804      	ldr	r0, [pc, #16]	; (8001268 <MX_USB_PCD_Init+0x3c>)
 8001256:	f001 fb75 	bl	8002944 <HAL_PCD_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_USB_PCD_Init+0x38>
		Error_Handler();
 8001260:	f000 fb02 	bl	8001868 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	200002f4 	.word	0x200002f4
 800126c:	40005c00 	.word	0x40005c00

08001270 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b08c      	sub	sp, #48	; 0x30
 8001274:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001276:	f107 031c 	add.w	r3, r7, #28
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001286:	4b5d      	ldr	r3, [pc, #372]	; (80013fc <MX_GPIO_Init+0x18c>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	4a5c      	ldr	r2, [pc, #368]	; (80013fc <MX_GPIO_Init+0x18c>)
 800128c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001290:	6153      	str	r3, [r2, #20]
 8001292:	4b5a      	ldr	r3, [pc, #360]	; (80013fc <MX_GPIO_Init+0x18c>)
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800129e:	4b57      	ldr	r3, [pc, #348]	; (80013fc <MX_GPIO_Init+0x18c>)
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	4a56      	ldr	r2, [pc, #344]	; (80013fc <MX_GPIO_Init+0x18c>)
 80012a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012a8:	6153      	str	r3, [r2, #20]
 80012aa:	4b54      	ldr	r3, [pc, #336]	; (80013fc <MX_GPIO_Init+0x18c>)
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80012b6:	4b51      	ldr	r3, [pc, #324]	; (80013fc <MX_GPIO_Init+0x18c>)
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	4a50      	ldr	r2, [pc, #320]	; (80013fc <MX_GPIO_Init+0x18c>)
 80012bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012c0:	6153      	str	r3, [r2, #20]
 80012c2:	4b4e      	ldr	r3, [pc, #312]	; (80013fc <MX_GPIO_Init+0x18c>)
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	4b4b      	ldr	r3, [pc, #300]	; (80013fc <MX_GPIO_Init+0x18c>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	4a4a      	ldr	r2, [pc, #296]	; (80013fc <MX_GPIO_Init+0x18c>)
 80012d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d8:	6153      	str	r3, [r2, #20]
 80012da:	4b48      	ldr	r3, [pc, #288]	; (80013fc <MX_GPIO_Init+0x18c>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80012e6:	4b45      	ldr	r3, [pc, #276]	; (80013fc <MX_GPIO_Init+0x18c>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	4a44      	ldr	r2, [pc, #272]	; (80013fc <MX_GPIO_Init+0x18c>)
 80012ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012f0:	6153      	str	r3, [r2, #20]
 80012f2:	4b42      	ldr	r3, [pc, #264]	; (80013fc <MX_GPIO_Init+0x18c>)
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	4b3f      	ldr	r3, [pc, #252]	; (80013fc <MX_GPIO_Init+0x18c>)
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	4a3e      	ldr	r2, [pc, #248]	; (80013fc <MX_GPIO_Init+0x18c>)
 8001304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001308:	6153      	str	r3, [r2, #20]
 800130a:	4b3c      	ldr	r3, [pc, #240]	; (80013fc <MX_GPIO_Init+0x18c>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	2108      	movs	r1, #8
 800131a:	4839      	ldr	r0, [pc, #228]	; (8001400 <MX_GPIO_Init+0x190>)
 800131c:	f001 f9bc 	bl	8002698 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2,
 8001320:	2200      	movs	r2, #0
 8001322:	2107      	movs	r1, #7
 8001324:	4837      	ldr	r0, [pc, #220]	; (8001404 <MX_GPIO_Init+0x194>)
 8001326:	f001 f9b7 	bl	8002698 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 800132a:	2200      	movs	r2, #0
 800132c:	f24f 011e 	movw	r1, #61470	; 0xf01e
 8001330:	4835      	ldr	r0, [pc, #212]	; (8001408 <MX_GPIO_Init+0x198>)
 8001332:	f001 f9b1 	bl	8002698 <HAL_GPIO_WritePin>
			GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_1
					| GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET);


	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001336:	2308      	movs	r3, #8
 8001338:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133a:	2301      	movs	r3, #1
 800133c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	4619      	mov	r1, r3
 800134c:	482c      	ldr	r0, [pc, #176]	; (8001400 <MX_GPIO_Init+0x190>)
 800134e:	f001 f829 	bl	80023a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC0 PC1 PC2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 8001352:	2307      	movs	r3, #7
 8001354:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	4826      	ldr	r0, [pc, #152]	; (8001404 <MX_GPIO_Init+0x194>)
 800136a:	f001 f81b 	bl	80023a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800136e:	2301      	movs	r3, #1
 8001370:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001372:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001376:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001386:	f001 f80d 	bl	80023a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_3;
 800138a:	230a      	movs	r3, #10
 800138c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800138e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001392:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001394:	2302      	movs	r3, #2
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	4619      	mov	r1, r3
 800139e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a2:	f000 ffff 	bl	80023a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15
	 PD1 PD2 PD3 PD4 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15
 80013a6:	f24f 031e 	movw	r3, #61470	; 0xf01e
 80013aa:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	4812      	ldr	r0, [pc, #72]	; (8001408 <MX_GPIO_Init+0x198>)
 80013c0:	f000 fff0 	bl	80023a4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2100      	movs	r1, #0
 80013c8:	2006      	movs	r0, #6
 80013ca:	f000 ff3e 	bl	800224a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013ce:	2006      	movs	r0, #6
 80013d0:	f000 ff57 	bl	8002282 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2100      	movs	r1, #0
 80013d8:	2007      	movs	r0, #7
 80013da:	f000 ff36 	bl	800224a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80013de:	2007      	movs	r0, #7
 80013e0:	f000 ff4f 	bl	8002282 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2100      	movs	r1, #0
 80013e8:	2009      	movs	r0, #9
 80013ea:	f000 ff2e 	bl	800224a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80013ee:	2009      	movs	r0, #9
 80013f0:	f000 ff47 	bl	8002282 <HAL_NVIC_EnableIRQ>

}
 80013f4:	bf00      	nop
 80013f6:	3730      	adds	r7, #48	; 0x30
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40021000 	.word	0x40021000
 8001400:	48001000 	.word	0x48001000
 8001404:	48000800 	.word	0x48000800
 8001408:	48000c00 	.word	0x48000c00
 800140c:	00000000 	.word	0x00000000

08001410 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 800141a:	f000 fe2f 	bl	800207c <HAL_GetTick>
 800141e:	4603      	mov	r3, r0
 8001420:	4a81      	ldr	r2, [pc, #516]	; (8001628 <HAL_GPIO_EXTI_Callback+0x218>)
 8001422:	6013      	str	r3, [r2, #0]
	if ((GPIO_Pin == GPIO_PIN_1) && LED != 4) {
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	2b02      	cmp	r3, #2
 8001428:	d12b      	bne.n	8001482 <HAL_GPIO_EXTI_Callback+0x72>
 800142a:	4b80      	ldr	r3, [pc, #512]	; (800162c <HAL_GPIO_EXTI_Callback+0x21c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b04      	cmp	r3, #4
 8001430:	d027      	beq.n	8001482 <HAL_GPIO_EXTI_Callback+0x72>

		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 8001432:	4b7d      	ldr	r3, [pc, #500]	; (8001628 <HAL_GPIO_EXTI_Callback+0x218>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	4b7e      	ldr	r3, [pc, #504]	; (8001630 <HAL_GPIO_EXTI_Callback+0x220>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001440:	f240 817e 	bls.w	8001740 <HAL_GPIO_EXTI_Callback+0x330>
			volume-=0.2;
 8001444:	4b7b      	ldr	r3, [pc, #492]	; (8001634 <HAL_GPIO_EXTI_Callback+0x224>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	b29b      	uxth	r3, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f820 	bl	8000490 <__aeabi_i2d>
 8001450:	a373      	add	r3, pc, #460	; (adr r3, 8001620 <HAL_GPIO_EXTI_Callback+0x210>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	f7fe fecd 	bl	80001f4 <__aeabi_dsub>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f7ff f87f 	bl	8000564 <__aeabi_d2uiz>
 8001466:	4603      	mov	r3, r0
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b72      	ldr	r3, [pc, #456]	; (8001634 <HAL_GPIO_EXTI_Callback+0x224>)
 800146c:	801a      	strh	r2, [r3, #0]
//			counterInside++;
			increase(LED);
 800146e:	4b6f      	ldr	r3, [pc, #444]	; (800162c <HAL_GPIO_EXTI_Callback+0x21c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fba8 	bl	8000bc8 <increase>
			previousMillis = currentMillis;
 8001478:	4b6b      	ldr	r3, [pc, #428]	; (8001628 <HAL_GPIO_EXTI_Callback+0x218>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a6c      	ldr	r2, [pc, #432]	; (8001630 <HAL_GPIO_EXTI_Callback+0x220>)
 800147e:	6013      	str	r3, [r2, #0]
		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 8001480:	e15e      	b.n	8001740 <HAL_GPIO_EXTI_Callback+0x330>
		}
	} else if ((GPIO_Pin == GPIO_PIN_3)) {
 8001482:	88fb      	ldrh	r3, [r7, #6]
 8001484:	2b08      	cmp	r3, #8
 8001486:	f040 8143 	bne.w	8001710 <HAL_GPIO_EXTI_Callback+0x300>

		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 800148a:	4b67      	ldr	r3, [pc, #412]	; (8001628 <HAL_GPIO_EXTI_Callback+0x218>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4b68      	ldr	r3, [pc, #416]	; (8001630 <HAL_GPIO_EXTI_Callback+0x220>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001498:	f240 8152 	bls.w	8001740 <HAL_GPIO_EXTI_Callback+0x330>
			volume+=0.2;
 800149c:	4b65      	ldr	r3, [pc, #404]	; (8001634 <HAL_GPIO_EXTI_Callback+0x224>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7fe fff4 	bl	8000490 <__aeabi_i2d>
 80014a8:	a35d      	add	r3, pc, #372	; (adr r3, 8001620 <HAL_GPIO_EXTI_Callback+0x210>)
 80014aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ae:	f7fe fea3 	bl	80001f8 <__adddf3>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	f7ff f853 	bl	8000564 <__aeabi_d2uiz>
 80014be:	4603      	mov	r3, r0
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	4b5c      	ldr	r3, [pc, #368]	; (8001634 <HAL_GPIO_EXTI_Callback+0x224>)
 80014c4:	801a      	strh	r2, [r3, #0]
			if (nextTurn < 6)
 80014c6:	4b5c      	ldr	r3, [pc, #368]	; (8001638 <HAL_GPIO_EXTI_Callback+0x228>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	dc04      	bgt.n	80014d8 <HAL_GPIO_EXTI_Callback+0xc8>
				nextTurn++;
 80014ce:	4b5a      	ldr	r3, [pc, #360]	; (8001638 <HAL_GPIO_EXTI_Callback+0x228>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	3301      	adds	r3, #1
 80014d4:	4a58      	ldr	r2, [pc, #352]	; (8001638 <HAL_GPIO_EXTI_Callback+0x228>)
 80014d6:	6013      	str	r3, [r2, #0]
			if ((isCorrect == -1) && nextTurn == 6) {
 80014d8:	4b58      	ldr	r3, [pc, #352]	; (800163c <HAL_GPIO_EXTI_Callback+0x22c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e0:	d126      	bne.n	8001530 <HAL_GPIO_EXTI_Callback+0x120>
 80014e2:	4b55      	ldr	r3, [pc, #340]	; (8001638 <HAL_GPIO_EXTI_Callback+0x228>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d122      	bne.n	8001530 <HAL_GPIO_EXTI_Callback+0x120>
				for (int i = 0; i < 4; i++) {
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	e007      	b.n	8001500 <HAL_GPIO_EXTI_Callback+0xf0>
					carrier[i] = 0;
 80014f0:	4a53      	ldr	r2, [pc, #332]	; (8001640 <HAL_GPIO_EXTI_Callback+0x230>)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	2100      	movs	r1, #0
 80014f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int i = 0; i < 4; i++) {
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	3301      	adds	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	2b03      	cmp	r3, #3
 8001504:	ddf4      	ble.n	80014f0 <HAL_GPIO_EXTI_Callback+0xe0>
				    //password[i] = 0;
				}
				//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2102      	movs	r1, #2
 800150a:	484e      	ldr	r0, [pc, #312]	; (8001644 <HAL_GPIO_EXTI_Callback+0x234>)
 800150c:	f001 f8c4 	bl	8002698 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2104      	movs	r1, #4
 8001514:	484b      	ldr	r0, [pc, #300]	; (8001644 <HAL_GPIO_EXTI_Callback+0x234>)
 8001516:	f001 f8bf 	bl	8002698 <HAL_GPIO_WritePin>
				LED = -1;
 800151a:	4b44      	ldr	r3, [pc, #272]	; (800162c <HAL_GPIO_EXTI_Callback+0x21c>)
 800151c:	f04f 32ff 	mov.w	r2, #4294967295
 8001520:	601a      	str	r2, [r3, #0]
				nextTurn = 0;
 8001522:	4b45      	ldr	r3, [pc, #276]	; (8001638 <HAL_GPIO_EXTI_Callback+0x228>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
				blink = 1;
 8001528:	4b47      	ldr	r3, [pc, #284]	; (8001648 <HAL_GPIO_EXTI_Callback+0x238>)
 800152a:	2201      	movs	r2, #1
 800152c:	601a      	str	r2, [r3, #0]
				return;
 800152e:	e107      	b.n	8001740 <HAL_GPIO_EXTI_Callback+0x330>
			} else if ((isCorrect != 0 && isCorrect != 1)) {
 8001530:	4b42      	ldr	r3, [pc, #264]	; (800163c <HAL_GPIO_EXTI_Callback+0x22c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 80e6 	beq.w	8001706 <HAL_GPIO_EXTI_Callback+0x2f6>
 800153a:	4b40      	ldr	r3, [pc, #256]	; (800163c <HAL_GPIO_EXTI_Callback+0x22c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	f000 80e1 	beq.w	8001706 <HAL_GPIO_EXTI_Callback+0x2f6>

				LED += 1;
 8001544:	4b39      	ldr	r3, [pc, #228]	; (800162c <HAL_GPIO_EXTI_Callback+0x21c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	3301      	adds	r3, #1
 800154a:	4a38      	ldr	r2, [pc, #224]	; (800162c <HAL_GPIO_EXTI_Callback+0x21c>)
 800154c:	6013      	str	r3, [r2, #0]
				if (LED == 4) {
 800154e:	4b37      	ldr	r3, [pc, #220]	; (800162c <HAL_GPIO_EXTI_Callback+0x21c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b04      	cmp	r3, #4
 8001554:	f040 80d7 	bne.w	8001706 <HAL_GPIO_EXTI_Callback+0x2f6>
					int bool = 1;
 8001558:	2301      	movs	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
					for (int i = 0; i < 4; i++) {
 800155c:	2300      	movs	r3, #0
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	e08b      	b.n	800167a <HAL_GPIO_EXTI_Callback+0x26a>
						if (password[i] != carrier[i]) {
 8001562:	4a3a      	ldr	r2, [pc, #232]	; (800164c <HAL_GPIO_EXTI_Callback+0x23c>)
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800156a:	4935      	ldr	r1, [pc, #212]	; (8001640 <HAL_GPIO_EXTI_Callback+0x230>)
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001572:	429a      	cmp	r2, r3
 8001574:	d07e      	beq.n	8001674 <HAL_GPIO_EXTI_Callback+0x264>
							bool = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
							logFailed[4] = carrier[0] + '0';
 800157a:	4b31      	ldr	r3, [pc, #196]	; (8001640 <HAL_GPIO_EXTI_Callback+0x230>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	3330      	adds	r3, #48	; 0x30
 8001582:	b2da      	uxtb	r2, r3
 8001584:	4b32      	ldr	r3, [pc, #200]	; (8001650 <HAL_GPIO_EXTI_Callback+0x240>)
 8001586:	711a      	strb	r2, [r3, #4]
							logFailed[5] = carrier[1] + '0';
 8001588:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <HAL_GPIO_EXTI_Callback+0x230>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	3330      	adds	r3, #48	; 0x30
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <HAL_GPIO_EXTI_Callback+0x240>)
 8001594:	715a      	strb	r2, [r3, #5]
							logFailed[6] = carrier[2] + '0';
 8001596:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <HAL_GPIO_EXTI_Callback+0x230>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	3330      	adds	r3, #48	; 0x30
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b2b      	ldr	r3, [pc, #172]	; (8001650 <HAL_GPIO_EXTI_Callback+0x240>)
 80015a2:	719a      	strb	r2, [r3, #6]
							logFailed[7] = carrier[3] + '0';
 80015a4:	4b26      	ldr	r3, [pc, #152]	; (8001640 <HAL_GPIO_EXTI_Callback+0x230>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	3330      	adds	r3, #48	; 0x30
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4b28      	ldr	r3, [pc, #160]	; (8001650 <HAL_GPIO_EXTI_Callback+0x240>)
 80015b0:	71da      	strb	r2, [r3, #7]
							isCorrect = 0;
 80015b2:	4b22      	ldr	r3, [pc, #136]	; (800163c <HAL_GPIO_EXTI_Callback+0x22c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
							if (logStatus)
 80015b8:	4b26      	ldr	r3, [pc, #152]	; (8001654 <HAL_GPIO_EXTI_Callback+0x244>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d004      	beq.n	80015ca <HAL_GPIO_EXTI_Callback+0x1ba>
								HAL_UART_Transmit_IT(&huart1, logFailed, 18);
 80015c0:	2212      	movs	r2, #18
 80015c2:	4923      	ldr	r1, [pc, #140]	; (8001650 <HAL_GPIO_EXTI_Callback+0x240>)
 80015c4:	4824      	ldr	r0, [pc, #144]	; (8001658 <HAL_GPIO_EXTI_Callback+0x248>)
 80015c6:	f004 f9b9 	bl	800593c <HAL_UART_Transmit_IT>
							prevEnterTime = HAL_GetTick();
 80015ca:	f000 fd57 	bl	800207c <HAL_GetTick>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4a22      	ldr	r2, [pc, #136]	; (800165c <HAL_GPIO_EXTI_Callback+0x24c>)
 80015d2:	6013      	str	r3, [r2, #0]
							wrongPassCounter++;
 80015d4:	4b22      	ldr	r3, [pc, #136]	; (8001660 <HAL_GPIO_EXTI_Callback+0x250>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	4a21      	ldr	r2, [pc, #132]	; (8001660 <HAL_GPIO_EXTI_Callback+0x250>)
 80015dc:	6013      	str	r3, [r2, #0]
							if (wrongPassCounter % 3 == 0)
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <HAL_GPIO_EXTI_Callback+0x250>)
 80015e0:	6819      	ldr	r1, [r3, #0]
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <HAL_GPIO_EXTI_Callback+0x254>)
 80015e4:	fb83 3201 	smull	r3, r2, r3, r1
 80015e8:	17cb      	asrs	r3, r1, #31
 80015ea:	1ad2      	subs	r2, r2, r3
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	1aca      	subs	r2, r1, r3
 80015f4:	2a00      	cmp	r2, #0
 80015f6:	d103      	bne.n	8001600 <HAL_GPIO_EXTI_Callback+0x1f0>
								buzzer_flag = SuperWrongPass;
 80015f8:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <HAL_GPIO_EXTI_Callback+0x258>)
 80015fa:	2204      	movs	r2, #4
 80015fc:	701a      	strb	r2, [r3, #0]
 80015fe:	e002      	b.n	8001606 <HAL_GPIO_EXTI_Callback+0x1f6>
							else
								buzzer_flag = WrongPass;
 8001600:	4b19      	ldr	r3, [pc, #100]	; (8001668 <HAL_GPIO_EXTI_Callback+0x258>)
 8001602:	2203      	movs	r2, #3
 8001604:	701a      	strb	r2, [r3, #0]
							buzzerEnterTime = HAL_GetTick();
 8001606:	f000 fd39 	bl	800207c <HAL_GetTick>
 800160a:	4603      	mov	r3, r0
 800160c:	4a17      	ldr	r2, [pc, #92]	; (800166c <HAL_GPIO_EXTI_Callback+0x25c>)
 800160e:	6013      	str	r3, [r2, #0]
							if (alertStatus)
 8001610:	4b17      	ldr	r3, [pc, #92]	; (8001670 <HAL_GPIO_EXTI_Callback+0x260>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 8092 	beq.w	800173e <HAL_GPIO_EXTI_Callback+0x32e>
								PWM_Start();
 800161a:	f000 fad3 	bl	8001bc4 <PWM_Start>
							return;
 800161e:	e08e      	b.n	800173e <HAL_GPIO_EXTI_Callback+0x32e>
 8001620:	9999999a 	.word	0x9999999a
 8001624:	3fc99999 	.word	0x3fc99999
 8001628:	20000608 	.word	0x20000608
 800162c:	20000624 	.word	0x20000624
 8001630:	20000604 	.word	0x20000604
 8001634:	2000008c 	.word	0x2000008c
 8001638:	20000614 	.word	0x20000614
 800163c:	20000040 	.word	0x20000040
 8001640:	200005f0 	.word	0x200005f0
 8001644:	48000800 	.word	0x48000800
 8001648:	20000044 	.word	0x20000044
 800164c:	20000000 	.word	0x20000000
 8001650:	20000024 	.word	0x20000024
 8001654:	20000038 	.word	0x20000038
 8001658:	2000026c 	.word	0x2000026c
 800165c:	2000061c 	.word	0x2000061c
 8001660:	20000600 	.word	0x20000600
 8001664:	55555556 	.word	0x55555556
 8001668:	20000048 	.word	0x20000048
 800166c:	20000620 	.word	0x20000620
 8001670:	2000003c 	.word	0x2000003c
					for (int i = 0; i < 4; i++) {
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	3301      	adds	r3, #1
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	2b03      	cmp	r3, #3
 800167e:	f77f af70 	ble.w	8001562 <HAL_GPIO_EXTI_Callback+0x152>
						}
					}
					if (bool) {
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d03e      	beq.n	8001706 <HAL_GPIO_EXTI_Callback+0x2f6>
						logCorrect[4] = carrier[0] + '0';
 8001688:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <HAL_GPIO_EXTI_Callback+0x338>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	3330      	adds	r3, #48	; 0x30
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4b2e      	ldr	r3, [pc, #184]	; (800174c <HAL_GPIO_EXTI_Callback+0x33c>)
 8001694:	711a      	strb	r2, [r3, #4]
						logCorrect[5] = carrier[1] + '0';
 8001696:	4b2c      	ldr	r3, [pc, #176]	; (8001748 <HAL_GPIO_EXTI_Callback+0x338>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	3330      	adds	r3, #48	; 0x30
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	4b2a      	ldr	r3, [pc, #168]	; (800174c <HAL_GPIO_EXTI_Callback+0x33c>)
 80016a2:	715a      	strb	r2, [r3, #5]
						logCorrect[6] = carrier[2] + '0';
 80016a4:	4b28      	ldr	r3, [pc, #160]	; (8001748 <HAL_GPIO_EXTI_Callback+0x338>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	3330      	adds	r3, #48	; 0x30
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4b27      	ldr	r3, [pc, #156]	; (800174c <HAL_GPIO_EXTI_Callback+0x33c>)
 80016b0:	719a      	strb	r2, [r3, #6]
						logCorrect[7] = carrier[3] + '0';
 80016b2:	4b25      	ldr	r3, [pc, #148]	; (8001748 <HAL_GPIO_EXTI_Callback+0x338>)
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	3330      	adds	r3, #48	; 0x30
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	4b23      	ldr	r3, [pc, #140]	; (800174c <HAL_GPIO_EXTI_Callback+0x33c>)
 80016be:	71da      	strb	r2, [r3, #7]
						isCorrect = 1;
 80016c0:	4b23      	ldr	r3, [pc, #140]	; (8001750 <HAL_GPIO_EXTI_Callback+0x340>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	601a      	str	r2, [r3, #0]
						if (logStatus)
 80016c6:	4b23      	ldr	r3, [pc, #140]	; (8001754 <HAL_GPIO_EXTI_Callback+0x344>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d004      	beq.n	80016d8 <HAL_GPIO_EXTI_Callback+0x2c8>
							HAL_UART_Transmit_IT(&huart1, logCorrect, 19);
 80016ce:	2213      	movs	r2, #19
 80016d0:	491e      	ldr	r1, [pc, #120]	; (800174c <HAL_GPIO_EXTI_Callback+0x33c>)
 80016d2:	4821      	ldr	r0, [pc, #132]	; (8001758 <HAL_GPIO_EXTI_Callback+0x348>)
 80016d4:	f004 f932 	bl	800593c <HAL_UART_Transmit_IT>
						prevEnterTime = HAL_GetTick();
 80016d8:	f000 fcd0 	bl	800207c <HAL_GetTick>
 80016dc:	4603      	mov	r3, r0
 80016de:	4a1f      	ldr	r2, [pc, #124]	; (800175c <HAL_GPIO_EXTI_Callback+0x34c>)
 80016e0:	6013      	str	r3, [r2, #0]
						buzzer_flag = CorrectPass;
 80016e2:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <HAL_GPIO_EXTI_Callback+0x350>)
 80016e4:	2202      	movs	r2, #2
 80016e6:	701a      	strb	r2, [r3, #0]
						buzzerEnterTime = HAL_GetTick();
 80016e8:	f000 fcc8 	bl	800207c <HAL_GetTick>
 80016ec:	4603      	mov	r3, r0
 80016ee:	4a1d      	ldr	r2, [pc, #116]	; (8001764 <HAL_GPIO_EXTI_Callback+0x354>)
 80016f0:	6013      	str	r3, [r2, #0]
						if (alertStatus)
 80016f2:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <HAL_GPIO_EXTI_Callback+0x358>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_GPIO_EXTI_Callback+0x2ee>
							PWM_Start();
 80016fa:	f000 fa63 	bl	8001bc4 <PWM_Start>
						wrongPassCounter = 0;
 80016fe:	4b1b      	ldr	r3, [pc, #108]	; (800176c <HAL_GPIO_EXTI_Callback+0x35c>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
						return;
 8001704:	e01c      	b.n	8001740 <HAL_GPIO_EXTI_Callback+0x330>
					}
				}
			}
			previousMillis = currentMillis;
 8001706:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <HAL_GPIO_EXTI_Callback+0x360>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a1a      	ldr	r2, [pc, #104]	; (8001774 <HAL_GPIO_EXTI_Callback+0x364>)
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	e017      	b.n	8001740 <HAL_GPIO_EXTI_Callback+0x330>
		}

	} else if (GPIO_Pin == GPIO_PIN_0 && isCorrect == 0) {
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d114      	bne.n	8001740 <HAL_GPIO_EXTI_Callback+0x330>
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <HAL_GPIO_EXTI_Callback+0x340>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d110      	bne.n	8001740 <HAL_GPIO_EXTI_Callback+0x330>
		blink = 0;
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <HAL_GPIO_EXTI_Callback+0x368>)
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
		isCorrect = -1;
 8001724:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_GPIO_EXTI_Callback+0x340>)
 8001726:	f04f 32ff 	mov.w	r2, #4294967295
 800172a:	601a      	str	r2, [r3, #0]
		prevEnterTime = HAL_GetTick();
 800172c:	f000 fca6 	bl	800207c <HAL_GetTick>
 8001730:	4603      	mov	r3, r0
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <HAL_GPIO_EXTI_Callback+0x34c>)
 8001734:	6013      	str	r3, [r2, #0]
//		PWM_Stop();
		buzzer_flag = NONE;
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_GPIO_EXTI_Callback+0x350>)
 8001738:	2205      	movs	r2, #5
 800173a:	701a      	strb	r2, [r3, #0]
 800173c:	e000      	b.n	8001740 <HAL_GPIO_EXTI_Callback+0x330>
							return;
 800173e:	bf00      	nop
	}
}
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200005f0 	.word	0x200005f0
 800174c:	20000010 	.word	0x20000010
 8001750:	20000040 	.word	0x20000040
 8001754:	20000038 	.word	0x20000038
 8001758:	2000026c 	.word	0x2000026c
 800175c:	2000061c 	.word	0x2000061c
 8001760:	20000048 	.word	0x20000048
 8001764:	20000620 	.word	0x20000620
 8001768:	2000003c 	.word	0x2000003c
 800176c:	20000600 	.word	0x20000600
 8001770:	20000608 	.word	0x20000608
 8001774:	20000604 	.word	0x20000604
 8001778:	20000044 	.word	0x20000044

0800177c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a31      	ldr	r2, [pc, #196]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d15c      	bne.n	8001848 <HAL_TIM_PeriodElapsedCallback+0xcc>
		if (index == LED && HAL_GetTick() - prevTime < 400) {
 800178e:	4b31      	ldr	r3, [pc, #196]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	4b31      	ldr	r3, [pc, #196]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d119      	bne.n	80017ce <HAL_TIM_PeriodElapsedCallback+0x52>
 800179a:	f000 fc6f 	bl	800207c <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	4b2e      	ldr	r3, [pc, #184]	; (800185c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80017aa:	d210      	bcs.n	80017ce <HAL_TIM_PeriodElapsedCallback+0x52>
			display_number(index, carrier[index]);
 80017ac:	4b29      	ldr	r3, [pc, #164]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b28      	ldr	r3, [pc, #160]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	492a      	ldr	r1, [pc, #168]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80017b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017ba:	4619      	mov	r1, r3
 80017bc:	4610      	mov	r0, r2
 80017be:	f7ff f9cf 	bl	8000b60 <display_number>
			coolDownTimer = HAL_GetTick();
 80017c2:	f000 fc5b 	bl	800207c <HAL_GetTick>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4a26      	ldr	r2, [pc, #152]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	e02d      	b.n	800182a <HAL_TIM_PeriodElapsedCallback+0xae>
		} else if (index == LED && HAL_GetTick() - prevTime > 900) {
 80017ce:	4b21      	ldr	r3, [pc, #132]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d116      	bne.n	8001808 <HAL_TIM_PeriodElapsedCallback+0x8c>
 80017da:	f000 fc4f 	bl	800207c <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	4b1e      	ldr	r3, [pc, #120]	; (800185c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80017ea:	d90d      	bls.n	8001808 <HAL_TIM_PeriodElapsedCallback+0x8c>
			//coolDown
			if (HAL_GetTick() - coolDownTimer > 100) {
 80017ec:	f000 fc46 	bl	800207c <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b64      	cmp	r3, #100	; 0x64
 80017fa:	d916      	bls.n	800182a <HAL_TIM_PeriodElapsedCallback+0xae>
				prevTime = HAL_GetTick();
 80017fc:	f000 fc3e 	bl	800207c <HAL_GetTick>
 8001800:	4603      	mov	r3, r0
 8001802:	4a16      	ldr	r2, [pc, #88]	; (800185c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001804:	6013      	str	r3, [r2, #0]
			if (HAL_GetTick() - coolDownTimer > 100) {
 8001806:	e010      	b.n	800182a <HAL_TIM_PeriodElapsedCallback+0xae>
			}
		} else if (index != LED) {
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d00a      	beq.n	800182a <HAL_TIM_PeriodElapsedCallback+0xae>
			display_number(index, carrier[index]);
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4910      	ldr	r1, [pc, #64]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800181e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001822:	4619      	mov	r1, r3
 8001824:	4610      	mov	r0, r2
 8001826:	f7ff f99b 	bl	8000b60 <display_number>
		}
		if (index == 4) {
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b04      	cmp	r3, #4
 8001830:	d105      	bne.n	800183e <HAL_TIM_PeriodElapsedCallback+0xc2>
			index = 0;
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
			init_display();
 8001838:	f7ff f9e6 	bl	8000c08 <init_display>
//		case SuperWrongPass:
//			PWM_Change_Tone(1000, _volume);
//			break;
//		}
	}
}
 800183c:	e004      	b.n	8001848 <HAL_TIM_PeriodElapsedCallback+0xcc>
			++index;
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	3301      	adds	r3, #1
 8001844:	4a03      	ldr	r2, [pc, #12]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001846:	6013      	str	r3, [r2, #0]
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40012c00 	.word	0x40012c00
 8001854:	20000618 	.word	0x20000618
 8001858:	20000624 	.word	0x20000624
 800185c:	2000060c 	.word	0x2000060c
 8001860:	200005f0 	.word	0x200005f0
 8001864:	20000610 	.word	0x20000610

08001868 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800186c:	b672      	cpsid	i
}
 800186e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001870:	e7fe      	b.n	8001870 <Error_Handler+0x8>
	...

08001874 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_MspInit+0x44>)
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <HAL_MspInit+0x44>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6193      	str	r3, [r2, #24]
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_MspInit+0x44>)
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_MspInit+0x44>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	4a08      	ldr	r2, [pc, #32]	; (80018b8 <HAL_MspInit+0x44>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189c:	61d3      	str	r3, [r2, #28]
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_MspInit+0x44>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018aa:	2007      	movs	r0, #7
 80018ac:	f000 fcc2 	bl	8002234 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40021000 	.word	0x40021000

080018bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a17      	ldr	r2, [pc, #92]	; (8001938 <HAL_I2C_MspInit+0x7c>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d127      	bne.n	800192e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <HAL_I2C_MspInit+0x80>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	4a16      	ldr	r2, [pc, #88]	; (800193c <HAL_I2C_MspInit+0x80>)
 80018e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e8:	6153      	str	r3, [r2, #20]
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <HAL_I2C_MspInit+0x80>)
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80018f6:	23c0      	movs	r3, #192	; 0xc0
 80018f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018fa:	2312      	movs	r3, #18
 80018fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018fe:	2301      	movs	r3, #1
 8001900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001902:	2303      	movs	r3, #3
 8001904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001906:	2304      	movs	r3, #4
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	480b      	ldr	r0, [pc, #44]	; (8001940 <HAL_I2C_MspInit+0x84>)
 8001912:	f000 fd47 	bl	80023a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_I2C_MspInit+0x80>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	4a08      	ldr	r2, [pc, #32]	; (800193c <HAL_I2C_MspInit+0x80>)
 800191c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001920:	61d3      	str	r3, [r2, #28]
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_I2C_MspInit+0x80>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800192e:	bf00      	nop
 8001930:	3728      	adds	r7, #40	; 0x28
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40005400 	.word	0x40005400
 800193c:	40021000 	.word	0x40021000
 8001940:	48000400 	.word	0x48000400

08001944 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a17      	ldr	r2, [pc, #92]	; (80019c0 <HAL_SPI_MspInit+0x7c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d128      	bne.n	80019b8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001966:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <HAL_SPI_MspInit+0x80>)
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	4a16      	ldr	r2, [pc, #88]	; (80019c4 <HAL_SPI_MspInit+0x80>)
 800196c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001970:	6193      	str	r3, [r2, #24]
 8001972:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <HAL_SPI_MspInit+0x80>)
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HAL_SPI_MspInit+0x80>)
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	4a10      	ldr	r2, [pc, #64]	; (80019c4 <HAL_SPI_MspInit+0x80>)
 8001984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001988:	6153      	str	r3, [r2, #20]
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <HAL_SPI_MspInit+0x80>)
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001996:	23e0      	movs	r3, #224	; 0xe0
 8001998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019a6:	2305      	movs	r3, #5
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	4619      	mov	r1, r3
 80019b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b4:	f000 fcf6 	bl	80023a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019b8:	bf00      	nop
 80019ba:	3728      	adds	r7, #40	; 0x28
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40013000 	.word	0x40013000
 80019c4:	40021000 	.word	0x40021000

080019c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a16      	ldr	r2, [pc, #88]	; (8001a30 <HAL_TIM_Base_MspInit+0x68>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d114      	bne.n	8001a04 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019da:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <HAL_TIM_Base_MspInit+0x6c>)
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	4a15      	ldr	r2, [pc, #84]	; (8001a34 <HAL_TIM_Base_MspInit+0x6c>)
 80019e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019e4:	6193      	str	r3, [r2, #24]
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <HAL_TIM_Base_MspInit+0x6c>)
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	2019      	movs	r0, #25
 80019f8:	f000 fc27 	bl	800224a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80019fc:	2019      	movs	r0, #25
 80019fe:	f000 fc40 	bl	8002282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a02:	e010      	b.n	8001a26 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a0c:	d10b      	bne.n	8001a26 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_TIM_Base_MspInit+0x6c>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	4a08      	ldr	r2, [pc, #32]	; (8001a34 <HAL_TIM_Base_MspInit+0x6c>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	61d3      	str	r3, [r2, #28]
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_TIM_Base_MspInit+0x6c>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
}
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40012c00 	.word	0x40012c00
 8001a34:	40021000 	.word	0x40021000

08001a38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a58:	d11d      	bne.n	8001a96 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <HAL_TIM_MspPostInit+0x68>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	4a10      	ldr	r2, [pc, #64]	; (8001aa0 <HAL_TIM_MspPostInit+0x68>)
 8001a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a64:	6153      	str	r3, [r2, #20]
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <HAL_TIM_MspPostInit+0x68>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a84:	2301      	movs	r3, #1
 8001a86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a88:	f107 030c 	add.w	r3, r7, #12
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a92:	f000 fc87 	bl	80023a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a96:	bf00      	nop
 8001a98:	3720      	adds	r7, #32
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a1b      	ldr	r2, [pc, #108]	; (8001b30 <HAL_UART_MspInit+0x8c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d12f      	bne.n	8001b26 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ac6:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <HAL_UART_MspInit+0x90>)
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	4a1a      	ldr	r2, [pc, #104]	; (8001b34 <HAL_UART_MspInit+0x90>)
 8001acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad0:	6193      	str	r3, [r2, #24]
 8001ad2:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <HAL_UART_MspInit+0x90>)
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <HAL_UART_MspInit+0x90>)
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	4a14      	ldr	r2, [pc, #80]	; (8001b34 <HAL_UART_MspInit+0x90>)
 8001ae4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ae8:	6153      	str	r3, [r2, #20]
 8001aea:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_UART_MspInit+0x90>)
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001af6:	2330      	movs	r3, #48	; 0x30
 8001af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	2302      	movs	r3, #2
 8001afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b02:	2303      	movs	r3, #3
 8001b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b06:	2307      	movs	r3, #7
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4809      	ldr	r0, [pc, #36]	; (8001b38 <HAL_UART_MspInit+0x94>)
 8001b12:	f000 fc47 	bl	80023a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	2025      	movs	r0, #37	; 0x25
 8001b1c:	f000 fb95 	bl	800224a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b20:	2025      	movs	r0, #37	; 0x25
 8001b22:	f000 fbae 	bl	8002282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b26:	bf00      	nop
 8001b28:	3728      	adds	r7, #40	; 0x28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40013800 	.word	0x40013800
 8001b34:	40021000 	.word	0x40021000
 8001b38:	48000800 	.word	0x48000800

08001b3c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	; 0x28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a18      	ldr	r2, [pc, #96]	; (8001bbc <HAL_PCD_MspInit+0x80>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d129      	bne.n	8001bb2 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <HAL_PCD_MspInit+0x84>)
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	4a17      	ldr	r2, [pc, #92]	; (8001bc0 <HAL_PCD_MspInit+0x84>)
 8001b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b68:	6153      	str	r3, [r2, #20]
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <HAL_PCD_MspInit+0x84>)
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001b76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b84:	2303      	movs	r3, #3
 8001b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001b88:	230e      	movs	r3, #14
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4619      	mov	r1, r3
 8001b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b96:	f000 fc05 	bl	80023a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_PCD_MspInit+0x84>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	4a08      	ldr	r2, [pc, #32]	; (8001bc0 <HAL_PCD_MspInit+0x84>)
 8001ba0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ba4:	61d3      	str	r3, [r2, #28]
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_PCD_MspInit+0x84>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001bb2:	bf00      	nop
 8001bb4:	3728      	adds	r7, #40	; 0x28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40005c00 	.word	0x40005c00
 8001bc0:	40021000 	.word	0x40021000

08001bc4 <PWM_Start>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PWM_Start()
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <PWM_Start+0x18>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <PWM_Start+0x1c>)
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f002 fd7a 	bl	80046cc <HAL_TIM_PWM_Start>
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000088 	.word	0x20000088
 8001be0:	200006e0 	.word	0x200006e0

08001be4 <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	460a      	mov	r2, r1
 8001bee:	80fb      	strh	r3, [r7, #6]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	80bb      	strh	r3, [r7, #4]
    if (pwm_freq == 0 || pwm_freq > 20000)
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d004      	beq.n	8001c04 <PWM_Change_Tone+0x20>
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d937      	bls.n	8001c74 <PWM_Change_Tone+0x90>
    {
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 8001c04:	4b4e      	ldr	r3, [pc, #312]	; (8001d40 <PWM_Change_Tone+0x15c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d105      	bne.n	8001c18 <PWM_Change_Tone+0x34>
 8001c0c:	4b4d      	ldr	r3, [pc, #308]	; (8001d44 <PWM_Change_Tone+0x160>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2200      	movs	r2, #0
 8001c14:	635a      	str	r2, [r3, #52]	; 0x34
 8001c16:	e08e      	b.n	8001d36 <PWM_Change_Tone+0x152>
 8001c18:	4b49      	ldr	r3, [pc, #292]	; (8001d40 <PWM_Change_Tone+0x15c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d105      	bne.n	8001c2c <PWM_Change_Tone+0x48>
 8001c20:	4b48      	ldr	r3, [pc, #288]	; (8001d44 <PWM_Change_Tone+0x160>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	2300      	movs	r3, #0
 8001c28:	6393      	str	r3, [r2, #56]	; 0x38
 8001c2a:	e084      	b.n	8001d36 <PWM_Change_Tone+0x152>
 8001c2c:	4b44      	ldr	r3, [pc, #272]	; (8001d40 <PWM_Change_Tone+0x15c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d105      	bne.n	8001c40 <PWM_Change_Tone+0x5c>
 8001c34:	4b43      	ldr	r3, [pc, #268]	; (8001d44 <PWM_Change_Tone+0x160>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001c3e:	e07a      	b.n	8001d36 <PWM_Change_Tone+0x152>
 8001c40:	4b3f      	ldr	r3, [pc, #252]	; (8001d40 <PWM_Change_Tone+0x15c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b0c      	cmp	r3, #12
 8001c46:	d105      	bne.n	8001c54 <PWM_Change_Tone+0x70>
 8001c48:	4b3e      	ldr	r3, [pc, #248]	; (8001d44 <PWM_Change_Tone+0x160>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	6413      	str	r3, [r2, #64]	; 0x40
 8001c52:	e070      	b.n	8001d36 <PWM_Change_Tone+0x152>
 8001c54:	4b3a      	ldr	r3, [pc, #232]	; (8001d40 <PWM_Change_Tone+0x15c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b10      	cmp	r3, #16
 8001c5a:	d105      	bne.n	8001c68 <PWM_Change_Tone+0x84>
 8001c5c:	4b39      	ldr	r3, [pc, #228]	; (8001d44 <PWM_Change_Tone+0x160>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	2300      	movs	r3, #0
 8001c64:	6593      	str	r3, [r2, #88]	; 0x58
 8001c66:	e066      	b.n	8001d36 <PWM_Change_Tone+0x152>
 8001c68:	4b36      	ldr	r3, [pc, #216]	; (8001d44 <PWM_Change_Tone+0x160>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001c72:	e060      	b.n	8001d36 <PWM_Change_Tone+0x152>
    }
    else
    {
        const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 8001c74:	f002 f8f2 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 8001c78:	61f8      	str	r0, [r7, #28]
        const uint16_t prescaler = 1;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	837b      	strh	r3, [r7, #26]
        const uint32_t timer_clock = internal_clock_freq / prescaler;
 8001c7e:	8b7b      	ldrh	r3, [r7, #26]
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c86:	617b      	str	r3, [r7, #20]
        const uint32_t period_cycles = timer_clock / pwm_freq;
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c90:	613b      	str	r3, [r7, #16]
        const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 8001c92:	88bb      	ldrh	r3, [r7, #4]
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	4a2b      	ldr	r2, [pc, #172]	; (8001d48 <PWM_Change_Tone+0x164>)
 8001c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca0:	09db      	lsrs	r3, r3, #7
 8001ca2:	60fb      	str	r3, [r7, #12]

        pwm_timer->Instance->PSC = prescaler - 1;
 8001ca4:	8b7b      	ldrh	r3, [r7, #26]
 8001ca6:	1e5a      	subs	r2, r3, #1
 8001ca8:	4b26      	ldr	r3, [pc, #152]	; (8001d44 <PWM_Change_Tone+0x160>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28
        pwm_timer->Instance->ARR = period_cycles - 1;
 8001cb0:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <PWM_Change_Tone+0x160>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	3a01      	subs	r2, #1
 8001cba:	62da      	str	r2, [r3, #44]	; 0x2c
        pwm_timer->Instance->EGR = TIM_EGR_UG;
 8001cbc:	4b21      	ldr	r3, [pc, #132]	; (8001d44 <PWM_Change_Tone+0x160>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001cc6:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <PWM_Change_Tone+0x15c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d105      	bne.n	8001cda <PWM_Change_Tone+0xf6>
 8001cce:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <PWM_Change_Tone+0x160>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
 8001cd8:	e02d      	b.n	8001d36 <PWM_Change_Tone+0x152>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001cda:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <PWM_Change_Tone+0x15c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d105      	bne.n	8001cee <PWM_Change_Tone+0x10a>
 8001ce2:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <PWM_Change_Tone+0x160>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001cec:	e023      	b.n	8001d36 <PWM_Change_Tone+0x152>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001cee:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <PWM_Change_Tone+0x15c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d105      	bne.n	8001d02 <PWM_Change_Tone+0x11e>
 8001cf6:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <PWM_Change_Tone+0x160>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001d00:	e019      	b.n	8001d36 <PWM_Change_Tone+0x152>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <PWM_Change_Tone+0x15c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2b0c      	cmp	r3, #12
 8001d08:	d105      	bne.n	8001d16 <PWM_Change_Tone+0x132>
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <PWM_Change_Tone+0x160>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001d14:	e00f      	b.n	8001d36 <PWM_Change_Tone+0x152>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001d16:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <PWM_Change_Tone+0x15c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b10      	cmp	r3, #16
 8001d1c:	d105      	bne.n	8001d2a <PWM_Change_Tone+0x146>
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <PWM_Change_Tone+0x160>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001d28:	e005      	b.n	8001d36 <PWM_Change_Tone+0x152>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <PWM_Change_Tone+0x160>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001d34:	e7ff      	b.n	8001d36 <PWM_Change_Tone+0x152>
 8001d36:	bf00      	nop
 8001d38:	3720      	adds	r7, #32
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200006e0 	.word	0x200006e0
 8001d44:	20000088 	.word	0x20000088
 8001d48:	10624dd3 	.word	0x10624dd3

08001d4c <Change_Melody>:

void Change_Melody(const struct Tone *melody, uint16_t tone_count)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	807b      	strh	r3, [r7, #2]
    melody_ptr = melody;
 8001d58:	4a07      	ldr	r2, [pc, #28]	; (8001d78 <Change_Melody+0x2c>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6013      	str	r3, [r2, #0]
    melody_tone_count = tone_count;
 8001d5e:	4a07      	ldr	r2, [pc, #28]	; (8001d7c <Change_Melody+0x30>)
 8001d60:	887b      	ldrh	r3, [r7, #2]
 8001d62:	8013      	strh	r3, [r2, #0]
    current_tone_number = 0;
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <Change_Melody+0x34>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	801a      	strh	r2, [r3, #0]
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	200006e4 	.word	0x200006e4
 8001d7c:	200006e8 	.word	0x200006e8
 8001d80:	200006ea 	.word	0x200006ea

08001d84 <Update_Melody>:

void Update_Melody()
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
    if ((HAL_GetTick() > current_tone_end) && (current_tone_number < melody_tone_count))
 8001d8a:	f000 f977 	bl	800207c <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <Update_Melody+0x74>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d92a      	bls.n	8001dee <Update_Melody+0x6a>
 8001d98:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <Update_Melody+0x78>)
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <Update_Melody+0x7c>)
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d222      	bcs.n	8001dee <Update_Melody+0x6a>
    {
        const struct Tone active_tone = *(melody_ptr + current_tone_number);
 8001da8:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <Update_Melody+0x80>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <Update_Melody+0x78>)
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	441a      	add	r2, r3
 8001db6:	463b      	mov	r3, r7
 8001db8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dbc:	e883 0003 	stmia.w	r3, {r0, r1}
        PWM_Change_Tone(active_tone.frequency, volume);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	4a10      	ldr	r2, [pc, #64]	; (8001e08 <Update_Melody+0x84>)
 8001dc6:	8812      	ldrh	r2, [r2, #0]
 8001dc8:	b292      	uxth	r2, r2
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff09 	bl	8001be4 <PWM_Change_Tone>
        current_tone_end = HAL_GetTick() + active_tone.duration;
 8001dd2:	f000 f953 	bl	800207c <HAL_GetTick>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a06      	ldr	r2, [pc, #24]	; (8001df8 <Update_Melody+0x74>)
 8001dde:	6013      	str	r3, [r2, #0]
        current_tone_number++;
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <Update_Melody+0x78>)
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	3301      	adds	r3, #1
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <Update_Melody+0x78>)
 8001dec:	801a      	strh	r2, [r3, #0]
    }
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200006ec 	.word	0x200006ec
 8001dfc:	200006ea 	.word	0x200006ea
 8001e00:	200006e8 	.word	0x200006e8
 8001e04:	200006e4 	.word	0x200006e4
 8001e08:	2000008c 	.word	0x2000008c

08001e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <NMI_Handler+0x4>

08001e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e16:	e7fe      	b.n	8001e16 <HardFault_Handler+0x4>

08001e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <MemManage_Handler+0x4>

08001e1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e22:	e7fe      	b.n	8001e22 <BusFault_Handler+0x4>

08001e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <UsageFault_Handler+0x4>

08001e2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e58:	f000 f8fc 	bl	8002054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Update_Melody();
 8001e5c:	f7ff ff92 	bl	8001d84 <Update_Melody>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001e68:	2001      	movs	r0, #1
 8001e6a:	f000 fc2d 	bl	80026c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  if(HAL_GetTick() > last_button_press + 200)
 8001e6e:	f000 f905 	bl	800207c <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <EXTI0_IRQHandler+0x28>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	33c8      	adds	r3, #200	; 0xc8
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d904      	bls.n	8001e88 <EXTI0_IRQHandler+0x24>
  {
	  last_button_press = HAL_GetTick();
 8001e7e:	f000 f8fd 	bl	800207c <HAL_GetTick>
 8001e82:	4603      	mov	r3, r0
 8001e84:	4a01      	ldr	r2, [pc, #4]	; (8001e8c <EXTI0_IRQHandler+0x28>)
 8001e86:	6013      	str	r3, [r2, #0]

  }
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	200006f0 	.word	0x200006f0

08001e90 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001e94:	2002      	movs	r0, #2
 8001e96:	f000 fc17 	bl	80026c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001ea2:	2004      	movs	r0, #4
 8001ea4:	f000 fc10 	bl	80026c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001eb0:	2008      	movs	r0, #8
 8001eb2:	f000 fc09 	bl	80026c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001ec2:	f002 fd03 	bl	80048cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200001d4 	.word	0x200001d4

08001ed0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <USART1_IRQHandler+0x10>)
 8001ed6:	f003 fdd3 	bl	8005a80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	2000026c 	.word	0x2000026c

08001ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eec:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <_sbrk+0x5c>)
 8001eee:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <_sbrk+0x60>)
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ef8:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <_sbrk+0x64>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d102      	bne.n	8001f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <_sbrk+0x64>)
 8001f02:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <_sbrk+0x68>)
 8001f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <_sbrk+0x64>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d207      	bcs.n	8001f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f14:	f005 f842 	bl	8006f9c <__errno>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f22:	e009      	b.n	8001f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <_sbrk+0x64>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <_sbrk+0x64>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	4a05      	ldr	r2, [pc, #20]	; (8001f48 <_sbrk+0x64>)
 8001f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f36:	68fb      	ldr	r3, [r7, #12]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	2000a000 	.word	0x2000a000
 8001f44:	00000400 	.word	0x00000400
 8001f48:	200006f4 	.word	0x200006f4
 8001f4c:	20000710 	.word	0x20000710

08001f50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <SystemInit+0x20>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5a:	4a05      	ldr	r2, [pc, #20]	; (8001f70 <SystemInit+0x20>)
 8001f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f78:	f7ff ffea 	bl	8001f50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f7c:	480c      	ldr	r0, [pc, #48]	; (8001fb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f7e:	490d      	ldr	r1, [pc, #52]	; (8001fb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f80:	4a0d      	ldr	r2, [pc, #52]	; (8001fb8 <LoopForever+0xe>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f84:	e002      	b.n	8001f8c <LoopCopyDataInit>

08001f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f8a:	3304      	adds	r3, #4

08001f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f90:	d3f9      	bcc.n	8001f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f92:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f94:	4c0a      	ldr	r4, [pc, #40]	; (8001fc0 <LoopForever+0x16>)
  movs r3, #0
 8001f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f98:	e001      	b.n	8001f9e <LoopFillZerobss>

08001f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f9c:	3204      	adds	r2, #4

08001f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa0:	d3fb      	bcc.n	8001f9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fa2:	f005 f801 	bl	8006fa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fa6:	f7fe fea3 	bl	8000cf0 <main>

08001faa <LoopForever>:

LoopForever:
    b LoopForever
 8001faa:	e7fe      	b.n	8001faa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fac:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb4:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001fb8:	08008450 	.word	0x08008450
  ldr r2, =_sbss
 8001fbc:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001fc0:	2000070c 	.word	0x2000070c

08001fc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fc4:	e7fe      	b.n	8001fc4 <ADC1_2_IRQHandler>
	...

08001fc8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fcc:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <HAL_Init+0x28>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a07      	ldr	r2, [pc, #28]	; (8001ff0 <HAL_Init+0x28>)
 8001fd2:	f043 0310 	orr.w	r3, r3, #16
 8001fd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd8:	2003      	movs	r0, #3
 8001fda:	f000 f92b 	bl	8002234 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f000 f808 	bl	8001ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fe4:	f7ff fc46 	bl	8001874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40022000 	.word	0x40022000

08001ff4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ffc:	4b12      	ldr	r3, [pc, #72]	; (8002048 <HAL_InitTick+0x54>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_InitTick+0x58>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	4619      	mov	r1, r3
 8002006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800200a:	fbb3 f3f1 	udiv	r3, r3, r1
 800200e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002012:	4618      	mov	r0, r3
 8002014:	f000 f943 	bl	800229e <HAL_SYSTICK_Config>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e00e      	b.n	8002040 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b0f      	cmp	r3, #15
 8002026:	d80a      	bhi.n	800203e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002028:	2200      	movs	r2, #0
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	f04f 30ff 	mov.w	r0, #4294967295
 8002030:	f000 f90b 	bl	800224a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002034:	4a06      	ldr	r2, [pc, #24]	; (8002050 <HAL_InitTick+0x5c>)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800203a:	2300      	movs	r3, #0
 800203c:	e000      	b.n	8002040 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20000090 	.word	0x20000090
 800204c:	20000098 	.word	0x20000098
 8002050:	20000094 	.word	0x20000094

08002054 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_IncTick+0x20>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	461a      	mov	r2, r3
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_IncTick+0x24>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4413      	add	r3, r2
 8002064:	4a04      	ldr	r2, [pc, #16]	; (8002078 <HAL_IncTick+0x24>)
 8002066:	6013      	str	r3, [r2, #0]
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20000098 	.word	0x20000098
 8002078:	200006f8 	.word	0x200006f8

0800207c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002080:	4b03      	ldr	r3, [pc, #12]	; (8002090 <HAL_GetTick+0x14>)
 8002082:	681b      	ldr	r3, [r3, #0]
}
 8002084:	4618      	mov	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	200006f8 	.word	0x200006f8

08002094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020b0:	4013      	ands	r3, r2
 80020b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c6:	4a04      	ldr	r2, [pc, #16]	; (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	60d3      	str	r3, [r2, #12]
}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <__NVIC_GetPriorityGrouping+0x18>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	0a1b      	lsrs	r3, r3, #8
 80020e6:	f003 0307 	and.w	r3, r3, #7
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	2b00      	cmp	r3, #0
 8002108:	db0b      	blt.n	8002122 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	f003 021f 	and.w	r2, r3, #31
 8002110:	4907      	ldr	r1, [pc, #28]	; (8002130 <__NVIC_EnableIRQ+0x38>)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	2001      	movs	r0, #1
 800211a:	fa00 f202 	lsl.w	r2, r0, r2
 800211e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000e100 	.word	0xe000e100

08002134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	6039      	str	r1, [r7, #0]
 800213e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002144:	2b00      	cmp	r3, #0
 8002146:	db0a      	blt.n	800215e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	b2da      	uxtb	r2, r3
 800214c:	490c      	ldr	r1, [pc, #48]	; (8002180 <__NVIC_SetPriority+0x4c>)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	0112      	lsls	r2, r2, #4
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	440b      	add	r3, r1
 8002158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800215c:	e00a      	b.n	8002174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	b2da      	uxtb	r2, r3
 8002162:	4908      	ldr	r1, [pc, #32]	; (8002184 <__NVIC_SetPriority+0x50>)
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	3b04      	subs	r3, #4
 800216c:	0112      	lsls	r2, r2, #4
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	440b      	add	r3, r1
 8002172:	761a      	strb	r2, [r3, #24]
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000e100 	.word	0xe000e100
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002188:	b480      	push	{r7}
 800218a:	b089      	sub	sp, #36	; 0x24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f1c3 0307 	rsb	r3, r3, #7
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	bf28      	it	cs
 80021a6:	2304      	movcs	r3, #4
 80021a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3304      	adds	r3, #4
 80021ae:	2b06      	cmp	r3, #6
 80021b0:	d902      	bls.n	80021b8 <NVIC_EncodePriority+0x30>
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3b03      	subs	r3, #3
 80021b6:	e000      	b.n	80021ba <NVIC_EncodePriority+0x32>
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021bc:	f04f 32ff 	mov.w	r2, #4294967295
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43da      	mvns	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	401a      	ands	r2, r3
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d0:	f04f 31ff 	mov.w	r1, #4294967295
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	fa01 f303 	lsl.w	r3, r1, r3
 80021da:	43d9      	mvns	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e0:	4313      	orrs	r3, r2
         );
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3724      	adds	r7, #36	; 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002200:	d301      	bcc.n	8002206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002202:	2301      	movs	r3, #1
 8002204:	e00f      	b.n	8002226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002206:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <SysTick_Config+0x40>)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800220e:	210f      	movs	r1, #15
 8002210:	f04f 30ff 	mov.w	r0, #4294967295
 8002214:	f7ff ff8e 	bl	8002134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <SysTick_Config+0x40>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800221e:	4b04      	ldr	r3, [pc, #16]	; (8002230 <SysTick_Config+0x40>)
 8002220:	2207      	movs	r2, #7
 8002222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	e000e010 	.word	0xe000e010

08002234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff ff29 	bl	8002094 <__NVIC_SetPriorityGrouping>
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b086      	sub	sp, #24
 800224e:	af00      	add	r7, sp, #0
 8002250:	4603      	mov	r3, r0
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
 8002256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800225c:	f7ff ff3e 	bl	80020dc <__NVIC_GetPriorityGrouping>
 8002260:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	6978      	ldr	r0, [r7, #20]
 8002268:	f7ff ff8e 	bl	8002188 <NVIC_EncodePriority>
 800226c:	4602      	mov	r2, r0
 800226e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff5d 	bl	8002134 <__NVIC_SetPriority>
}
 800227a:	bf00      	nop
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	4603      	mov	r3, r0
 800228a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800228c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff31 	bl	80020f8 <__NVIC_EnableIRQ>
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ffa2 	bl	80021f0 <SysTick_Config>
 80022ac:	4603      	mov	r3, r0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d008      	beq.n	80022da <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2204      	movs	r2, #4
 80022cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e020      	b.n	800231c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 020e 	bic.w	r2, r2, #14
 80022e8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0201 	bic.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002302:	2101      	movs	r1, #1
 8002304:	fa01 f202 	lsl.w	r2, r1, r2
 8002308:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800233a:	2b02      	cmp	r3, #2
 800233c:	d005      	beq.n	800234a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2204      	movs	r2, #4
 8002342:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	e027      	b.n	800239a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 020e 	bic.w	r2, r2, #14
 8002358:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0201 	bic.w	r2, r2, #1
 8002368:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002372:	2101      	movs	r1, #1
 8002374:	fa01 f202 	lsl.w	r2, r1, r2
 8002378:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	4798      	blx	r3
    } 
  }
  return status;
 800239a:	7bfb      	ldrb	r3, [r7, #15]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b2:	e154      	b.n	800265e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	2101      	movs	r1, #1
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	fa01 f303 	lsl.w	r3, r1, r3
 80023c0:	4013      	ands	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 8146 	beq.w	8002658 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d005      	beq.n	80023e4 <HAL_GPIO_Init+0x40>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d130      	bne.n	8002446 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	2203      	movs	r2, #3
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4313      	orrs	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800241a:	2201      	movs	r2, #1
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	091b      	lsrs	r3, r3, #4
 8002430:	f003 0201 	and.w	r2, r3, #1
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b03      	cmp	r3, #3
 8002450:	d017      	beq.n	8002482 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	2203      	movs	r2, #3
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d123      	bne.n	80024d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	08da      	lsrs	r2, r3, #3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3208      	adds	r2, #8
 8002496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800249a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	220f      	movs	r2, #15
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	08da      	lsrs	r2, r3, #3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3208      	adds	r2, #8
 80024d0:	6939      	ldr	r1, [r7, #16]
 80024d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	2203      	movs	r2, #3
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4013      	ands	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 0203 	and.w	r2, r3, #3
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 80a0 	beq.w	8002658 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002518:	4b58      	ldr	r3, [pc, #352]	; (800267c <HAL_GPIO_Init+0x2d8>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	4a57      	ldr	r2, [pc, #348]	; (800267c <HAL_GPIO_Init+0x2d8>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6193      	str	r3, [r2, #24]
 8002524:	4b55      	ldr	r3, [pc, #340]	; (800267c <HAL_GPIO_Init+0x2d8>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002530:	4a53      	ldr	r2, [pc, #332]	; (8002680 <HAL_GPIO_Init+0x2dc>)
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	089b      	lsrs	r3, r3, #2
 8002536:	3302      	adds	r3, #2
 8002538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800253c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	220f      	movs	r2, #15
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4013      	ands	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800255a:	d019      	beq.n	8002590 <HAL_GPIO_Init+0x1ec>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a49      	ldr	r2, [pc, #292]	; (8002684 <HAL_GPIO_Init+0x2e0>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d013      	beq.n	800258c <HAL_GPIO_Init+0x1e8>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a48      	ldr	r2, [pc, #288]	; (8002688 <HAL_GPIO_Init+0x2e4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d00d      	beq.n	8002588 <HAL_GPIO_Init+0x1e4>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a47      	ldr	r2, [pc, #284]	; (800268c <HAL_GPIO_Init+0x2e8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d007      	beq.n	8002584 <HAL_GPIO_Init+0x1e0>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a46      	ldr	r2, [pc, #280]	; (8002690 <HAL_GPIO_Init+0x2ec>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d101      	bne.n	8002580 <HAL_GPIO_Init+0x1dc>
 800257c:	2304      	movs	r3, #4
 800257e:	e008      	b.n	8002592 <HAL_GPIO_Init+0x1ee>
 8002580:	2305      	movs	r3, #5
 8002582:	e006      	b.n	8002592 <HAL_GPIO_Init+0x1ee>
 8002584:	2303      	movs	r3, #3
 8002586:	e004      	b.n	8002592 <HAL_GPIO_Init+0x1ee>
 8002588:	2302      	movs	r3, #2
 800258a:	e002      	b.n	8002592 <HAL_GPIO_Init+0x1ee>
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <HAL_GPIO_Init+0x1ee>
 8002590:	2300      	movs	r3, #0
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	f002 0203 	and.w	r2, r2, #3
 8002598:	0092      	lsls	r2, r2, #2
 800259a:	4093      	lsls	r3, r2
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4313      	orrs	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025a2:	4937      	ldr	r1, [pc, #220]	; (8002680 <HAL_GPIO_Init+0x2dc>)
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	089b      	lsrs	r3, r3, #2
 80025a8:	3302      	adds	r3, #2
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025b0:	4b38      	ldr	r3, [pc, #224]	; (8002694 <HAL_GPIO_Init+0x2f0>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025d4:	4a2f      	ldr	r2, [pc, #188]	; (8002694 <HAL_GPIO_Init+0x2f0>)
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025da:	4b2e      	ldr	r3, [pc, #184]	; (8002694 <HAL_GPIO_Init+0x2f0>)
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4013      	ands	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025fe:	4a25      	ldr	r2, [pc, #148]	; (8002694 <HAL_GPIO_Init+0x2f0>)
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002604:	4b23      	ldr	r3, [pc, #140]	; (8002694 <HAL_GPIO_Init+0x2f0>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	43db      	mvns	r3, r3
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4313      	orrs	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002628:	4a1a      	ldr	r2, [pc, #104]	; (8002694 <HAL_GPIO_Init+0x2f0>)
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800262e:	4b19      	ldr	r3, [pc, #100]	; (8002694 <HAL_GPIO_Init+0x2f0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	43db      	mvns	r3, r3
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	4013      	ands	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4313      	orrs	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002652:	4a10      	ldr	r2, [pc, #64]	; (8002694 <HAL_GPIO_Init+0x2f0>)
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	3301      	adds	r3, #1
 800265c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	fa22 f303 	lsr.w	r3, r2, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	f47f aea3 	bne.w	80023b4 <HAL_GPIO_Init+0x10>
  }
}
 800266e:	bf00      	nop
 8002670:	bf00      	nop
 8002672:	371c      	adds	r7, #28
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	40021000 	.word	0x40021000
 8002680:	40010000 	.word	0x40010000
 8002684:	48000400 	.word	0x48000400
 8002688:	48000800 	.word	0x48000800
 800268c:	48000c00 	.word	0x48000c00
 8002690:	48001000 	.word	0x48001000
 8002694:	40010400 	.word	0x40010400

08002698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	807b      	strh	r3, [r7, #2]
 80026a4:	4613      	mov	r3, r2
 80026a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026a8:	787b      	ldrb	r3, [r7, #1]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026ae:	887a      	ldrh	r2, [r7, #2]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026b4:	e002      	b.n	80026bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026b6:	887a      	ldrh	r2, [r7, #2]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026d2:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	88fb      	ldrh	r3, [r7, #6]
 80026d8:	4013      	ands	r3, r2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d006      	beq.n	80026ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026de:	4a05      	ldr	r2, [pc, #20]	; (80026f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026e0:	88fb      	ldrh	r3, [r7, #6]
 80026e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026e4:	88fb      	ldrh	r3, [r7, #6]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe fe92 	bl	8001410 <HAL_GPIO_EXTI_Callback>
  }
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40010400 	.word	0x40010400

080026f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e081      	b.n	800280e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff f8cc 	bl	80018bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2224      	movs	r2, #36	; 0x24
 8002728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0201 	bic.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002748:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002758:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d107      	bne.n	8002772 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	e006      	b.n	8002780 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800277e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d104      	bne.n	8002792 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002790:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691a      	ldr	r2, [r3, #16]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69d9      	ldr	r1, [r3, #28]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1a      	ldr	r2, [r3, #32]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2220      	movs	r2, #32
 80027fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b20      	cmp	r3, #32
 800282a:	d138      	bne.n	800289e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002836:	2302      	movs	r3, #2
 8002838:	e032      	b.n	80028a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2224      	movs	r2, #36	; 0x24
 8002846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0201 	bic.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002868:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6819      	ldr	r1, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f042 0201 	orr.w	r2, r2, #1
 8002888:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2220      	movs	r2, #32
 800288e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	e000      	b.n	80028a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800289e:	2302      	movs	r3, #2
  }
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b20      	cmp	r3, #32
 80028c0:	d139      	bne.n	8002936 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e033      	b.n	8002938 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2224      	movs	r2, #36	; 0x24
 80028dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0201 	bic.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0201 	orr.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	e000      	b.n	8002938 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002936:	2302      	movs	r3, #2
  }
}
 8002938:	4618      	mov	r0, r3
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002946:	b08b      	sub	sp, #44	; 0x2c
 8002948:	af06      	add	r7, sp, #24
 800294a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e0c4      	b.n	8002ae0 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff f8e6 	bl	8001b3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2203      	movs	r2, #3
 8002974:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f004 fad1 	bl	8006f24 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002982:	2300      	movs	r3, #0
 8002984:	73fb      	strb	r3, [r7, #15]
 8002986:	e040      	b.n	8002a0a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	440b      	add	r3, r1
 8002998:	3301      	adds	r3, #1
 800299a:	2201      	movs	r2, #1
 800299c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	440b      	add	r3, r1
 80029ae:	7bfa      	ldrb	r2, [r7, #15]
 80029b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	440b      	add	r3, r1
 80029c2:	3303      	adds	r3, #3
 80029c4:	2200      	movs	r2, #0
 80029c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029c8:	7bfa      	ldrb	r2, [r7, #15]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	440b      	add	r3, r1
 80029d6:	3338      	adds	r3, #56	; 0x38
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	440b      	add	r3, r1
 80029ea:	333c      	adds	r3, #60	; 0x3c
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029f0:	7bfa      	ldrb	r2, [r7, #15]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	440b      	add	r3, r1
 80029fe:	3340      	adds	r3, #64	; 0x40
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	3301      	adds	r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
 8002a0a:	7bfa      	ldrb	r2, [r7, #15]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d3b9      	bcc.n	8002988 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a14:	2300      	movs	r3, #0
 8002a16:	73fb      	strb	r3, [r7, #15]
 8002a18:	e044      	b.n	8002aa4 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a1a:	7bfa      	ldrb	r2, [r7, #15]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	440b      	add	r3, r1
 8002a28:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a30:	7bfa      	ldrb	r2, [r7, #15]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	440b      	add	r3, r1
 8002a3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a42:	7bfa      	ldrb	r2, [r7, #15]
 8002a44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a46:	7bfa      	ldrb	r2, [r7, #15]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	440b      	add	r3, r1
 8002a54:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a5c:	7bfa      	ldrb	r2, [r7, #15]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	440b      	add	r3, r1
 8002a6a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a72:	7bfa      	ldrb	r2, [r7, #15]
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	440b      	add	r3, r1
 8002a80:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a88:	7bfa      	ldrb	r2, [r7, #15]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	440b      	add	r3, r1
 8002a96:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
 8002aa4:	7bfa      	ldrb	r2, [r7, #15]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d3b5      	bcc.n	8002a1a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	687e      	ldr	r6, [r7, #4]
 8002ab6:	466d      	mov	r5, sp
 8002ab8:	f106 0410 	add.w	r4, r6, #16
 8002abc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002abe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	602b      	str	r3, [r5, #0]
 8002ac4:	1d33      	adds	r3, r6, #4
 8002ac6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ac8:	6838      	ldr	r0, [r7, #0]
 8002aca:	f004 fa46 	bl	8006f5a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ae8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d102      	bne.n	8002b0e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	f001 b823 	b.w	8003b54 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 817d 	beq.w	8002e1e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b24:	4bbc      	ldr	r3, [pc, #752]	; (8002e18 <HAL_RCC_OscConfig+0x330>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d00c      	beq.n	8002b4a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b30:	4bb9      	ldr	r3, [pc, #740]	; (8002e18 <HAL_RCC_OscConfig+0x330>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d15c      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x10e>
 8002b3c:	4bb6      	ldr	r3, [pc, #728]	; (8002e18 <HAL_RCC_OscConfig+0x330>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b48:	d155      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x10e>
 8002b4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b4e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002b56:	fa93 f3a3 	rbit	r3, r3
 8002b5a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b5e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b62:	fab3 f383 	clz	r3, r3
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	095b      	lsrs	r3, r3, #5
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d102      	bne.n	8002b7c <HAL_RCC_OscConfig+0x94>
 8002b76:	4ba8      	ldr	r3, [pc, #672]	; (8002e18 <HAL_RCC_OscConfig+0x330>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	e015      	b.n	8002ba8 <HAL_RCC_OscConfig+0xc0>
 8002b7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b80:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002b88:	fa93 f3a3 	rbit	r3, r3
 8002b8c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002b90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b94:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002b98:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002ba4:	4b9c      	ldr	r3, [pc, #624]	; (8002e18 <HAL_RCC_OscConfig+0x330>)
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bac:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002bb0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002bb4:	fa92 f2a2 	rbit	r2, r2
 8002bb8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002bbc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002bc0:	fab2 f282 	clz	r2, r2
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	f042 0220 	orr.w	r2, r2, #32
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	f002 021f 	and.w	r2, r2, #31
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 811f 	beq.w	8002e1c <HAL_RCC_OscConfig+0x334>
 8002bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f040 8116 	bne.w	8002e1c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	f000 bfaf 	b.w	8003b54 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c06:	d106      	bne.n	8002c16 <HAL_RCC_OscConfig+0x12e>
 8002c08:	4b83      	ldr	r3, [pc, #524]	; (8002e18 <HAL_RCC_OscConfig+0x330>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a82      	ldr	r2, [pc, #520]	; (8002e18 <HAL_RCC_OscConfig+0x330>)
 8002c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	e036      	b.n	8002c84 <HAL_RCC_OscConfig+0x19c>
 8002c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x158>
 8002c26:	4b7c      	ldr	r3, [pc, #496]	; (8002e18 <HAL_RCC_OscConfig+0x330>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a7b      	ldr	r2, [pc, #492]	; (8002e18 <HAL_RCC_OscConfig+0x330>)
 8002c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	4b79      	ldr	r3, [pc, #484]	; (8002e18 <HAL_RCC_OscConfig+0x330>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a78      	ldr	r2, [pc, #480]	; (8002e18 <HAL_RCC_OscConfig+0x330>)
 8002c38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	e021      	b.n	8002c84 <HAL_RCC_OscConfig+0x19c>
 8002c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x184>
 8002c52:	4b71      	ldr	r3, [pc, #452]	; (8002e18 <HAL_RCC_OscConfig+0x330>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a70      	ldr	r2, [pc, #448]	; (8002e18 <HAL_RCC_OscConfig+0x330>)
 8002c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4b6e      	ldr	r3, [pc, #440]	; (8002e18 <HAL_RCC_OscConfig+0x330>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a6d      	ldr	r2, [pc, #436]	; (8002e18 <HAL_RCC_OscConfig+0x330>)
 8002c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	e00b      	b.n	8002c84 <HAL_RCC_OscConfig+0x19c>
 8002c6c:	4b6a      	ldr	r3, [pc, #424]	; (8002e18 <HAL_RCC_OscConfig+0x330>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a69      	ldr	r2, [pc, #420]	; (8002e18 <HAL_RCC_OscConfig+0x330>)
 8002c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	4b67      	ldr	r3, [pc, #412]	; (8002e18 <HAL_RCC_OscConfig+0x330>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a66      	ldr	r2, [pc, #408]	; (8002e18 <HAL_RCC_OscConfig+0x330>)
 8002c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c82:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c84:	4b64      	ldr	r3, [pc, #400]	; (8002e18 <HAL_RCC_OscConfig+0x330>)
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	f023 020f 	bic.w	r2, r3, #15
 8002c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	495f      	ldr	r1, [pc, #380]	; (8002e18 <HAL_RCC_OscConfig+0x330>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d059      	beq.n	8002d62 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cae:	f7ff f9e5 	bl	800207c <HAL_GetTick>
 8002cb2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb6:	e00a      	b.n	8002cce <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7ff f9e0 	bl	800207c <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b64      	cmp	r3, #100	; 0x64
 8002cc6:	d902      	bls.n	8002cce <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	f000 bf43 	b.w	8003b54 <HAL_RCC_OscConfig+0x106c>
 8002cce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cd2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002cda:	fa93 f3a3 	rbit	r3, r3
 8002cde:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002ce2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	095b      	lsrs	r3, r3, #5
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d102      	bne.n	8002d00 <HAL_RCC_OscConfig+0x218>
 8002cfa:	4b47      	ldr	r3, [pc, #284]	; (8002e18 <HAL_RCC_OscConfig+0x330>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	e015      	b.n	8002d2c <HAL_RCC_OscConfig+0x244>
 8002d00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d04:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d08:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002d0c:	fa93 f3a3 	rbit	r3, r3
 8002d10:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002d14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d18:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002d1c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002d20:	fa93 f3a3 	rbit	r3, r3
 8002d24:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002d28:	4b3b      	ldr	r3, [pc, #236]	; (8002e18 <HAL_RCC_OscConfig+0x330>)
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d30:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002d34:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002d38:	fa92 f2a2 	rbit	r2, r2
 8002d3c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002d40:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002d44:	fab2 f282 	clz	r2, r2
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	f042 0220 	orr.w	r2, r2, #32
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	f002 021f 	and.w	r2, r2, #31
 8002d54:	2101      	movs	r1, #1
 8002d56:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0ab      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x1d0>
 8002d60:	e05d      	b.n	8002e1e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d62:	f7ff f98b 	bl	800207c <HAL_GetTick>
 8002d66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6a:	e00a      	b.n	8002d82 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d6c:	f7ff f986 	bl	800207c <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b64      	cmp	r3, #100	; 0x64
 8002d7a:	d902      	bls.n	8002d82 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	f000 bee9 	b.w	8003b54 <HAL_RCC_OscConfig+0x106c>
 8002d82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d86:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002d96:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9a:	fab3 f383 	clz	r3, r3
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	095b      	lsrs	r3, r3, #5
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d102      	bne.n	8002db4 <HAL_RCC_OscConfig+0x2cc>
 8002dae:	4b1a      	ldr	r3, [pc, #104]	; (8002e18 <HAL_RCC_OscConfig+0x330>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	e015      	b.n	8002de0 <HAL_RCC_OscConfig+0x2f8>
 8002db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002db8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002dc0:	fa93 f3a3 	rbit	r3, r3
 8002dc4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dcc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002dd0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002dd4:	fa93 f3a3 	rbit	r3, r3
 8002dd8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002ddc:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <HAL_RCC_OscConfig+0x330>)
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002de4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002de8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002dec:	fa92 f2a2 	rbit	r2, r2
 8002df0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002df4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002df8:	fab2 f282 	clz	r2, r2
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	f042 0220 	orr.w	r2, r2, #32
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	f002 021f 	and.w	r2, r2, #31
 8002e08:	2101      	movs	r1, #1
 8002e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1ab      	bne.n	8002d6c <HAL_RCC_OscConfig+0x284>
 8002e14:	e003      	b.n	8002e1e <HAL_RCC_OscConfig+0x336>
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 817d 	beq.w	800312e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e34:	4ba6      	ldr	r3, [pc, #664]	; (80030d0 <HAL_RCC_OscConfig+0x5e8>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 030c 	and.w	r3, r3, #12
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00b      	beq.n	8002e58 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e40:	4ba3      	ldr	r3, [pc, #652]	; (80030d0 <HAL_RCC_OscConfig+0x5e8>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 030c 	and.w	r3, r3, #12
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d172      	bne.n	8002f32 <HAL_RCC_OscConfig+0x44a>
 8002e4c:	4ba0      	ldr	r3, [pc, #640]	; (80030d0 <HAL_RCC_OscConfig+0x5e8>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d16c      	bne.n	8002f32 <HAL_RCC_OscConfig+0x44a>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002e6a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6e:	fab3 f383 	clz	r3, r3
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	095b      	lsrs	r3, r3, #5
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d102      	bne.n	8002e88 <HAL_RCC_OscConfig+0x3a0>
 8002e82:	4b93      	ldr	r3, [pc, #588]	; (80030d0 <HAL_RCC_OscConfig+0x5e8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	e013      	b.n	8002eb0 <HAL_RCC_OscConfig+0x3c8>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002e92:	fa93 f3a3 	rbit	r3, r3
 8002e96:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002ea0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ea4:	fa93 f3a3 	rbit	r3, r3
 8002ea8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002eac:	4b88      	ldr	r3, [pc, #544]	; (80030d0 <HAL_RCC_OscConfig+0x5e8>)
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002eb6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002eba:	fa92 f2a2 	rbit	r2, r2
 8002ebe:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002ec2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002ec6:	fab2 f282 	clz	r2, r2
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	f042 0220 	orr.w	r2, r2, #32
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	f002 021f 	and.w	r2, r2, #31
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x410>
 8002ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d002      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	f000 be2e 	b.w	8003b54 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef8:	4b75      	ldr	r3, [pc, #468]	; (80030d0 <HAL_RCC_OscConfig+0x5e8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	21f8      	movs	r1, #248	; 0xf8
 8002f0e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002f16:	fa91 f1a1 	rbit	r1, r1
 8002f1a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002f1e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002f22:	fab1 f181 	clz	r1, r1
 8002f26:	b2c9      	uxtb	r1, r1
 8002f28:	408b      	lsls	r3, r1
 8002f2a:	4969      	ldr	r1, [pc, #420]	; (80030d0 <HAL_RCC_OscConfig+0x5e8>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f30:	e0fd      	b.n	800312e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8088 	beq.w	8003054 <HAL_RCC_OscConfig+0x56c>
 8002f44:	2301      	movs	r3, #1
 8002f46:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002f4e:	fa93 f3a3 	rbit	r3, r3
 8002f52:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002f56:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f5a:	fab3 f383 	clz	r3, r3
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f70:	f7ff f884 	bl	800207c <HAL_GetTick>
 8002f74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f78:	e00a      	b.n	8002f90 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f7a:	f7ff f87f 	bl	800207c <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d902      	bls.n	8002f90 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	f000 bde2 	b.w	8003b54 <HAL_RCC_OscConfig+0x106c>
 8002f90:	2302      	movs	r3, #2
 8002f92:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f96:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002f9a:	fa93 f3a3 	rbit	r3, r3
 8002f9e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002fa2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa6:	fab3 f383 	clz	r3, r3
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	095b      	lsrs	r3, r3, #5
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d102      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x4d8>
 8002fba:	4b45      	ldr	r3, [pc, #276]	; (80030d0 <HAL_RCC_OscConfig+0x5e8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	e013      	b.n	8002fe8 <HAL_RCC_OscConfig+0x500>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002fca:	fa93 f3a3 	rbit	r3, r3
 8002fce:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002fd8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002fdc:	fa93 f3a3 	rbit	r3, r3
 8002fe0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002fe4:	4b3a      	ldr	r3, [pc, #232]	; (80030d0 <HAL_RCC_OscConfig+0x5e8>)
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	2202      	movs	r2, #2
 8002fea:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002fee:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002ff2:	fa92 f2a2 	rbit	r2, r2
 8002ff6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002ffa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002ffe:	fab2 f282 	clz	r2, r2
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	f042 0220 	orr.w	r2, r2, #32
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	f002 021f 	and.w	r2, r2, #31
 800300e:	2101      	movs	r1, #1
 8003010:	fa01 f202 	lsl.w	r2, r1, r2
 8003014:	4013      	ands	r3, r2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0af      	beq.n	8002f7a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301a:	4b2d      	ldr	r3, [pc, #180]	; (80030d0 <HAL_RCC_OscConfig+0x5e8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003026:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	21f8      	movs	r1, #248	; 0xf8
 8003030:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003034:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003038:	fa91 f1a1 	rbit	r1, r1
 800303c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003040:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003044:	fab1 f181 	clz	r1, r1
 8003048:	b2c9      	uxtb	r1, r1
 800304a:	408b      	lsls	r3, r1
 800304c:	4920      	ldr	r1, [pc, #128]	; (80030d0 <HAL_RCC_OscConfig+0x5e8>)
 800304e:	4313      	orrs	r3, r2
 8003050:	600b      	str	r3, [r1, #0]
 8003052:	e06c      	b.n	800312e <HAL_RCC_OscConfig+0x646>
 8003054:	2301      	movs	r3, #1
 8003056:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800305e:	fa93 f3a3 	rbit	r3, r3
 8003062:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003066:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800306a:	fab3 f383 	clz	r3, r3
 800306e:	b2db      	uxtb	r3, r3
 8003070:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003074:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	461a      	mov	r2, r3
 800307c:	2300      	movs	r3, #0
 800307e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003080:	f7fe fffc 	bl	800207c <HAL_GetTick>
 8003084:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003088:	e00a      	b.n	80030a0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800308a:	f7fe fff7 	bl	800207c <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d902      	bls.n	80030a0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	f000 bd5a 	b.w	8003b54 <HAL_RCC_OscConfig+0x106c>
 80030a0:	2302      	movs	r3, #2
 80030a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80030aa:	fa93 f3a3 	rbit	r3, r3
 80030ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80030b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b6:	fab3 f383 	clz	r3, r3
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	095b      	lsrs	r3, r3, #5
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d104      	bne.n	80030d4 <HAL_RCC_OscConfig+0x5ec>
 80030ca:	4b01      	ldr	r3, [pc, #4]	; (80030d0 <HAL_RCC_OscConfig+0x5e8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	e015      	b.n	80030fc <HAL_RCC_OscConfig+0x614>
 80030d0:	40021000 	.word	0x40021000
 80030d4:	2302      	movs	r3, #2
 80030d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80030de:	fa93 f3a3 	rbit	r3, r3
 80030e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80030e6:	2302      	movs	r3, #2
 80030e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80030ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80030f0:	fa93 f3a3 	rbit	r3, r3
 80030f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80030f8:	4bc8      	ldr	r3, [pc, #800]	; (800341c <HAL_RCC_OscConfig+0x934>)
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	2202      	movs	r2, #2
 80030fe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003102:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003106:	fa92 f2a2 	rbit	r2, r2
 800310a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800310e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003112:	fab2 f282 	clz	r2, r2
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	f042 0220 	orr.w	r2, r2, #32
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	f002 021f 	and.w	r2, r2, #31
 8003122:	2101      	movs	r1, #1
 8003124:	fa01 f202 	lsl.w	r2, r1, r2
 8003128:	4013      	ands	r3, r2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1ad      	bne.n	800308a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800312e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003132:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 8110 	beq.w	8003364 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003148:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d079      	beq.n	8003248 <HAL_RCC_OscConfig+0x760>
 8003154:	2301      	movs	r3, #1
 8003156:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800315e:	fa93 f3a3 	rbit	r3, r3
 8003162:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003166:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800316a:	fab3 f383 	clz	r3, r3
 800316e:	b2db      	uxtb	r3, r3
 8003170:	461a      	mov	r2, r3
 8003172:	4bab      	ldr	r3, [pc, #684]	; (8003420 <HAL_RCC_OscConfig+0x938>)
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	461a      	mov	r2, r3
 800317a:	2301      	movs	r3, #1
 800317c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317e:	f7fe ff7d 	bl	800207c <HAL_GetTick>
 8003182:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003186:	e00a      	b.n	800319e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003188:	f7fe ff78 	bl	800207c <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d902      	bls.n	800319e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	f000 bcdb 	b.w	8003b54 <HAL_RCC_OscConfig+0x106c>
 800319e:	2302      	movs	r3, #2
 80031a0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80031a8:	fa93 f3a3 	rbit	r3, r3
 80031ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80031b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80031b8:	2202      	movs	r2, #2
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	fa93 f2a3 	rbit	r2, r3
 80031ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80031dc:	2202      	movs	r2, #2
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	fa93 f2a3 	rbit	r2, r3
 80031ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80031f6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f8:	4b88      	ldr	r3, [pc, #544]	; (800341c <HAL_RCC_OscConfig+0x934>)
 80031fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003200:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003204:	2102      	movs	r1, #2
 8003206:	6019      	str	r1, [r3, #0]
 8003208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	fa93 f1a3 	rbit	r1, r3
 8003216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800321e:	6019      	str	r1, [r3, #0]
  return result;
 8003220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003224:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	fab3 f383 	clz	r3, r3
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003234:	b2db      	uxtb	r3, r3
 8003236:	f003 031f 	and.w	r3, r3, #31
 800323a:	2101      	movs	r1, #1
 800323c:	fa01 f303 	lsl.w	r3, r1, r3
 8003240:	4013      	ands	r3, r2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0a0      	beq.n	8003188 <HAL_RCC_OscConfig+0x6a0>
 8003246:	e08d      	b.n	8003364 <HAL_RCC_OscConfig+0x87c>
 8003248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003250:	2201      	movs	r2, #1
 8003252:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003258:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	fa93 f2a3 	rbit	r2, r3
 8003262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003266:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800326a:	601a      	str	r2, [r3, #0]
  return result;
 800326c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003270:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003274:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003276:	fab3 f383 	clz	r3, r3
 800327a:	b2db      	uxtb	r3, r3
 800327c:	461a      	mov	r2, r3
 800327e:	4b68      	ldr	r3, [pc, #416]	; (8003420 <HAL_RCC_OscConfig+0x938>)
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	461a      	mov	r2, r3
 8003286:	2300      	movs	r3, #0
 8003288:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328a:	f7fe fef7 	bl	800207c <HAL_GetTick>
 800328e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003292:	e00a      	b.n	80032aa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003294:	f7fe fef2 	bl	800207c <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d902      	bls.n	80032aa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	f000 bc55 	b.w	8003b54 <HAL_RCC_OscConfig+0x106c>
 80032aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80032b2:	2202      	movs	r2, #2
 80032b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	fa93 f2a3 	rbit	r2, r3
 80032c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80032d6:	2202      	movs	r2, #2
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	fa93 f2a3 	rbit	r2, r3
 80032e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80032fa:	2202      	movs	r2, #2
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003302:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	fa93 f2a3 	rbit	r2, r3
 800330c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003310:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003314:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003316:	4b41      	ldr	r3, [pc, #260]	; (800341c <HAL_RCC_OscConfig+0x934>)
 8003318:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800331a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003322:	2102      	movs	r1, #2
 8003324:	6019      	str	r1, [r3, #0]
 8003326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	fa93 f1a3 	rbit	r1, r3
 8003334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003338:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800333c:	6019      	str	r1, [r3, #0]
  return result;
 800333e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003342:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	fab3 f383 	clz	r3, r3
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003352:	b2db      	uxtb	r3, r3
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	2101      	movs	r1, #1
 800335a:	fa01 f303 	lsl.w	r3, r1, r3
 800335e:	4013      	ands	r3, r2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d197      	bne.n	8003294 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003368:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 81a1 	beq.w	80036bc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800337a:	2300      	movs	r3, #0
 800337c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003380:	4b26      	ldr	r3, [pc, #152]	; (800341c <HAL_RCC_OscConfig+0x934>)
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d116      	bne.n	80033ba <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800338c:	4b23      	ldr	r3, [pc, #140]	; (800341c <HAL_RCC_OscConfig+0x934>)
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	4a22      	ldr	r2, [pc, #136]	; (800341c <HAL_RCC_OscConfig+0x934>)
 8003392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003396:	61d3      	str	r3, [r2, #28]
 8003398:	4b20      	ldr	r3, [pc, #128]	; (800341c <HAL_RCC_OscConfig+0x934>)
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80033a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ae:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80033b2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80033b4:	2301      	movs	r3, #1
 80033b6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ba:	4b1a      	ldr	r3, [pc, #104]	; (8003424 <HAL_RCC_OscConfig+0x93c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d11a      	bne.n	80033fc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033c6:	4b17      	ldr	r3, [pc, #92]	; (8003424 <HAL_RCC_OscConfig+0x93c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a16      	ldr	r2, [pc, #88]	; (8003424 <HAL_RCC_OscConfig+0x93c>)
 80033cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d2:	f7fe fe53 	bl	800207c <HAL_GetTick>
 80033d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033da:	e009      	b.n	80033f0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033dc:	f7fe fe4e 	bl	800207c <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b64      	cmp	r3, #100	; 0x64
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e3b1      	b.n	8003b54 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f0:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <HAL_RCC_OscConfig+0x93c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0ef      	beq.n	80033dc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003400:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d10d      	bne.n	8003428 <HAL_RCC_OscConfig+0x940>
 800340c:	4b03      	ldr	r3, [pc, #12]	; (800341c <HAL_RCC_OscConfig+0x934>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	4a02      	ldr	r2, [pc, #8]	; (800341c <HAL_RCC_OscConfig+0x934>)
 8003412:	f043 0301 	orr.w	r3, r3, #1
 8003416:	6213      	str	r3, [r2, #32]
 8003418:	e03c      	b.n	8003494 <HAL_RCC_OscConfig+0x9ac>
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000
 8003420:	10908120 	.word	0x10908120
 8003424:	40007000 	.word	0x40007000
 8003428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10c      	bne.n	8003452 <HAL_RCC_OscConfig+0x96a>
 8003438:	4bc1      	ldr	r3, [pc, #772]	; (8003740 <HAL_RCC_OscConfig+0xc58>)
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	4ac0      	ldr	r2, [pc, #768]	; (8003740 <HAL_RCC_OscConfig+0xc58>)
 800343e:	f023 0301 	bic.w	r3, r3, #1
 8003442:	6213      	str	r3, [r2, #32]
 8003444:	4bbe      	ldr	r3, [pc, #760]	; (8003740 <HAL_RCC_OscConfig+0xc58>)
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	4abd      	ldr	r2, [pc, #756]	; (8003740 <HAL_RCC_OscConfig+0xc58>)
 800344a:	f023 0304 	bic.w	r3, r3, #4
 800344e:	6213      	str	r3, [r2, #32]
 8003450:	e020      	b.n	8003494 <HAL_RCC_OscConfig+0x9ac>
 8003452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003456:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	2b05      	cmp	r3, #5
 8003460:	d10c      	bne.n	800347c <HAL_RCC_OscConfig+0x994>
 8003462:	4bb7      	ldr	r3, [pc, #732]	; (8003740 <HAL_RCC_OscConfig+0xc58>)
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	4ab6      	ldr	r2, [pc, #728]	; (8003740 <HAL_RCC_OscConfig+0xc58>)
 8003468:	f043 0304 	orr.w	r3, r3, #4
 800346c:	6213      	str	r3, [r2, #32]
 800346e:	4bb4      	ldr	r3, [pc, #720]	; (8003740 <HAL_RCC_OscConfig+0xc58>)
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	4ab3      	ldr	r2, [pc, #716]	; (8003740 <HAL_RCC_OscConfig+0xc58>)
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	6213      	str	r3, [r2, #32]
 800347a:	e00b      	b.n	8003494 <HAL_RCC_OscConfig+0x9ac>
 800347c:	4bb0      	ldr	r3, [pc, #704]	; (8003740 <HAL_RCC_OscConfig+0xc58>)
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	4aaf      	ldr	r2, [pc, #700]	; (8003740 <HAL_RCC_OscConfig+0xc58>)
 8003482:	f023 0301 	bic.w	r3, r3, #1
 8003486:	6213      	str	r3, [r2, #32]
 8003488:	4bad      	ldr	r3, [pc, #692]	; (8003740 <HAL_RCC_OscConfig+0xc58>)
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	4aac      	ldr	r2, [pc, #688]	; (8003740 <HAL_RCC_OscConfig+0xc58>)
 800348e:	f023 0304 	bic.w	r3, r3, #4
 8003492:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003498:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 8081 	beq.w	80035a8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a6:	f7fe fde9 	bl	800207c <HAL_GetTick>
 80034aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ae:	e00b      	b.n	80034c8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034b0:	f7fe fde4 	bl	800207c <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e345      	b.n	8003b54 <HAL_RCC_OscConfig+0x106c>
 80034c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034cc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80034d0:	2202      	movs	r2, #2
 80034d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	fa93 f2a3 	rbit	r2, r3
 80034e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80034f4:	2202      	movs	r2, #2
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	fa93 f2a3 	rbit	r2, r3
 8003506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800350e:	601a      	str	r2, [r3, #0]
  return result;
 8003510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003514:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003518:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351a:	fab3 f383 	clz	r3, r3
 800351e:	b2db      	uxtb	r3, r3
 8003520:	095b      	lsrs	r3, r3, #5
 8003522:	b2db      	uxtb	r3, r3
 8003524:	f043 0302 	orr.w	r3, r3, #2
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d102      	bne.n	8003534 <HAL_RCC_OscConfig+0xa4c>
 800352e:	4b84      	ldr	r3, [pc, #528]	; (8003740 <HAL_RCC_OscConfig+0xc58>)
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	e013      	b.n	800355c <HAL_RCC_OscConfig+0xa74>
 8003534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003538:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800353c:	2202      	movs	r2, #2
 800353e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003544:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	fa93 f2a3 	rbit	r2, r3
 800354e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003552:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	4b79      	ldr	r3, [pc, #484]	; (8003740 <HAL_RCC_OscConfig+0xc58>)
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003560:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003564:	2102      	movs	r1, #2
 8003566:	6011      	str	r1, [r2, #0]
 8003568:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800356c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003570:	6812      	ldr	r2, [r2, #0]
 8003572:	fa92 f1a2 	rbit	r1, r2
 8003576:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800357a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800357e:	6011      	str	r1, [r2, #0]
  return result;
 8003580:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003584:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	fab2 f282 	clz	r2, r2
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	f002 021f 	and.w	r2, r2, #31
 800359a:	2101      	movs	r1, #1
 800359c:	fa01 f202 	lsl.w	r2, r1, r2
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d084      	beq.n	80034b0 <HAL_RCC_OscConfig+0x9c8>
 80035a6:	e07f      	b.n	80036a8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a8:	f7fe fd68 	bl	800207c <HAL_GetTick>
 80035ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b0:	e00b      	b.n	80035ca <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035b2:	f7fe fd63 	bl	800207c <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e2c4      	b.n	8003b54 <HAL_RCC_OscConfig+0x106c>
 80035ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ce:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80035d2:	2202      	movs	r2, #2
 80035d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035da:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	fa93 f2a3 	rbit	r2, r3
 80035e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80035f6:	2202      	movs	r2, #2
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	fa93 f2a3 	rbit	r2, r3
 8003608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800360c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003610:	601a      	str	r2, [r3, #0]
  return result;
 8003612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003616:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800361a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361c:	fab3 f383 	clz	r3, r3
 8003620:	b2db      	uxtb	r3, r3
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	b2db      	uxtb	r3, r3
 8003626:	f043 0302 	orr.w	r3, r3, #2
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d102      	bne.n	8003636 <HAL_RCC_OscConfig+0xb4e>
 8003630:	4b43      	ldr	r3, [pc, #268]	; (8003740 <HAL_RCC_OscConfig+0xc58>)
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	e013      	b.n	800365e <HAL_RCC_OscConfig+0xb76>
 8003636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800363e:	2202      	movs	r2, #2
 8003640:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003646:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	fa93 f2a3 	rbit	r2, r3
 8003650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003654:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	4b39      	ldr	r3, [pc, #228]	; (8003740 <HAL_RCC_OscConfig+0xc58>)
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003662:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003666:	2102      	movs	r1, #2
 8003668:	6011      	str	r1, [r2, #0]
 800366a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800366e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	fa92 f1a2 	rbit	r1, r2
 8003678:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800367c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003680:	6011      	str	r1, [r2, #0]
  return result;
 8003682:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003686:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	fab2 f282 	clz	r2, r2
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	f002 021f 	and.w	r2, r2, #31
 800369c:	2101      	movs	r1, #1
 800369e:	fa01 f202 	lsl.w	r2, r1, r2
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d184      	bne.n	80035b2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036a8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d105      	bne.n	80036bc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b0:	4b23      	ldr	r3, [pc, #140]	; (8003740 <HAL_RCC_OscConfig+0xc58>)
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	4a22      	ldr	r2, [pc, #136]	; (8003740 <HAL_RCC_OscConfig+0xc58>)
 80036b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 8242 	beq.w	8003b52 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036ce:	4b1c      	ldr	r3, [pc, #112]	; (8003740 <HAL_RCC_OscConfig+0xc58>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	f000 8213 	beq.w	8003b02 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	f040 8162 	bne.w	80039b2 <HAL_RCC_OscConfig+0xeca>
 80036ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80036f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003700:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	fa93 f2a3 	rbit	r2, r3
 800370a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003712:	601a      	str	r2, [r3, #0]
  return result;
 8003714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003718:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800371c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371e:	fab3 f383 	clz	r3, r3
 8003722:	b2db      	uxtb	r3, r3
 8003724:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003728:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	461a      	mov	r2, r3
 8003730:	2300      	movs	r3, #0
 8003732:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7fe fca2 	bl	800207c <HAL_GetTick>
 8003738:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800373c:	e00c      	b.n	8003758 <HAL_RCC_OscConfig+0xc70>
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003744:	f7fe fc9a 	bl	800207c <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e1fd      	b.n	8003b54 <HAL_RCC_OscConfig+0x106c>
 8003758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003760:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003764:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	fa93 f2a3 	rbit	r2, r3
 8003774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003778:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800377c:	601a      	str	r2, [r3, #0]
  return result;
 800377e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003782:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003786:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003788:	fab3 f383 	clz	r3, r3
 800378c:	b2db      	uxtb	r3, r3
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	b2db      	uxtb	r3, r3
 8003792:	f043 0301 	orr.w	r3, r3, #1
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b01      	cmp	r3, #1
 800379a:	d102      	bne.n	80037a2 <HAL_RCC_OscConfig+0xcba>
 800379c:	4bb0      	ldr	r3, [pc, #704]	; (8003a60 <HAL_RCC_OscConfig+0xf78>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	e027      	b.n	80037f2 <HAL_RCC_OscConfig+0xd0a>
 80037a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	fa93 f2a3 	rbit	r2, r3
 80037be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037cc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80037d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037da:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	fa93 f2a3 	rbit	r2, r3
 80037e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	4b9c      	ldr	r3, [pc, #624]	; (8003a60 <HAL_RCC_OscConfig+0xf78>)
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037f6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80037fa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037fe:	6011      	str	r1, [r2, #0]
 8003800:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003804:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003808:	6812      	ldr	r2, [r2, #0]
 800380a:	fa92 f1a2 	rbit	r1, r2
 800380e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003812:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003816:	6011      	str	r1, [r2, #0]
  return result;
 8003818:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800381c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003820:	6812      	ldr	r2, [r2, #0]
 8003822:	fab2 f282 	clz	r2, r2
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	f042 0220 	orr.w	r2, r2, #32
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	f002 021f 	and.w	r2, r2, #31
 8003832:	2101      	movs	r1, #1
 8003834:	fa01 f202 	lsl.w	r2, r1, r2
 8003838:	4013      	ands	r3, r2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d182      	bne.n	8003744 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800383e:	4b88      	ldr	r3, [pc, #544]	; (8003a60 <HAL_RCC_OscConfig+0xf78>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003856:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	430b      	orrs	r3, r1
 8003860:	497f      	ldr	r1, [pc, #508]	; (8003a60 <HAL_RCC_OscConfig+0xf78>)
 8003862:	4313      	orrs	r3, r2
 8003864:	604b      	str	r3, [r1, #4]
 8003866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800386e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003872:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003878:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	fa93 f2a3 	rbit	r2, r3
 8003882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003886:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800388a:	601a      	str	r2, [r3, #0]
  return result;
 800388c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003890:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003894:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003896:	fab3 f383 	clz	r3, r3
 800389a:	b2db      	uxtb	r3, r3
 800389c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	461a      	mov	r2, r3
 80038a8:	2301      	movs	r3, #1
 80038aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ac:	f7fe fbe6 	bl	800207c <HAL_GetTick>
 80038b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038b4:	e009      	b.n	80038ca <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b6:	f7fe fbe1 	bl	800207c <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e144      	b.n	8003b54 <HAL_RCC_OscConfig+0x106c>
 80038ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ce:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80038d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038dc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	fa93 f2a3 	rbit	r2, r3
 80038e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ea:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80038ee:	601a      	str	r2, [r3, #0]
  return result;
 80038f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80038f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038fa:	fab3 f383 	clz	r3, r3
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	095b      	lsrs	r3, r3, #5
 8003902:	b2db      	uxtb	r3, r3
 8003904:	f043 0301 	orr.w	r3, r3, #1
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b01      	cmp	r3, #1
 800390c:	d102      	bne.n	8003914 <HAL_RCC_OscConfig+0xe2c>
 800390e:	4b54      	ldr	r3, [pc, #336]	; (8003a60 <HAL_RCC_OscConfig+0xf78>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	e027      	b.n	8003964 <HAL_RCC_OscConfig+0xe7c>
 8003914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003918:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800391c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003920:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003926:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	fa93 f2a3 	rbit	r2, r3
 8003930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003934:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003942:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800394c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	fa93 f2a3 	rbit	r2, r3
 8003956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800395a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	4b3f      	ldr	r3, [pc, #252]	; (8003a60 <HAL_RCC_OscConfig+0xf78>)
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003968:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800396c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003970:	6011      	str	r1, [r2, #0]
 8003972:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003976:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800397a:	6812      	ldr	r2, [r2, #0]
 800397c:	fa92 f1a2 	rbit	r1, r2
 8003980:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003984:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003988:	6011      	str	r1, [r2, #0]
  return result;
 800398a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800398e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003992:	6812      	ldr	r2, [r2, #0]
 8003994:	fab2 f282 	clz	r2, r2
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	f042 0220 	orr.w	r2, r2, #32
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	f002 021f 	and.w	r2, r2, #31
 80039a4:	2101      	movs	r1, #1
 80039a6:	fa01 f202 	lsl.w	r2, r1, r2
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d082      	beq.n	80038b6 <HAL_RCC_OscConfig+0xdce>
 80039b0:	e0cf      	b.n	8003b52 <HAL_RCC_OscConfig+0x106a>
 80039b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80039ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	fa93 f2a3 	rbit	r2, r3
 80039ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80039d6:	601a      	str	r2, [r3, #0]
  return result;
 80039d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039dc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80039e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e2:	fab3 f383 	clz	r3, r3
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	461a      	mov	r2, r3
 80039f4:	2300      	movs	r3, #0
 80039f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f8:	f7fe fb40 	bl	800207c <HAL_GetTick>
 80039fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a00:	e009      	b.n	8003a16 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a02:	f7fe fb3b 	bl	800207c <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e09e      	b.n	8003b54 <HAL_RCC_OscConfig+0x106c>
 8003a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a1a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003a1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a28:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	fa93 f2a3 	rbit	r2, r3
 8003a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a36:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a3a:	601a      	str	r2, [r3, #0]
  return result;
 8003a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a40:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a44:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a46:	fab3 f383 	clz	r3, r3
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	095b      	lsrs	r3, r3, #5
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d104      	bne.n	8003a64 <HAL_RCC_OscConfig+0xf7c>
 8003a5a:	4b01      	ldr	r3, [pc, #4]	; (8003a60 <HAL_RCC_OscConfig+0xf78>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	e029      	b.n	8003ab4 <HAL_RCC_OscConfig+0xfcc>
 8003a60:	40021000 	.word	0x40021000
 8003a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a68:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a76:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	fa93 f2a3 	rbit	r2, r3
 8003a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a84:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a8e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a9c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	fa93 f2a3 	rbit	r2, r3
 8003aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aaa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	4b2b      	ldr	r3, [pc, #172]	; (8003b60 <HAL_RCC_OscConfig+0x1078>)
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ab8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003abc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ac0:	6011      	str	r1, [r2, #0]
 8003ac2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ac6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003aca:	6812      	ldr	r2, [r2, #0]
 8003acc:	fa92 f1a2 	rbit	r1, r2
 8003ad0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ad4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003ad8:	6011      	str	r1, [r2, #0]
  return result;
 8003ada:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ade:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	fab2 f282 	clz	r2, r2
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	f042 0220 	orr.w	r2, r2, #32
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	f002 021f 	and.w	r2, r2, #31
 8003af4:	2101      	movs	r1, #1
 8003af6:	fa01 f202 	lsl.w	r2, r1, r2
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d180      	bne.n	8003a02 <HAL_RCC_OscConfig+0xf1a>
 8003b00:	e027      	b.n	8003b52 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d101      	bne.n	8003b16 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e01e      	b.n	8003b54 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b16:	4b12      	ldr	r3, [pc, #72]	; (8003b60 <HAL_RCC_OscConfig+0x1078>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b1e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003b22:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d10b      	bne.n	8003b4e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003b36:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003b3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d001      	beq.n	8003b52 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000

08003b64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b09e      	sub	sp, #120	; 0x78
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e162      	b.n	8003e42 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b7c:	4b90      	ldr	r3, [pc, #576]	; (8003dc0 <HAL_RCC_ClockConfig+0x25c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d910      	bls.n	8003bac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8a:	4b8d      	ldr	r3, [pc, #564]	; (8003dc0 <HAL_RCC_ClockConfig+0x25c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f023 0207 	bic.w	r2, r3, #7
 8003b92:	498b      	ldr	r1, [pc, #556]	; (8003dc0 <HAL_RCC_ClockConfig+0x25c>)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9a:	4b89      	ldr	r3, [pc, #548]	; (8003dc0 <HAL_RCC_ClockConfig+0x25c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d001      	beq.n	8003bac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e14a      	b.n	8003e42 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d008      	beq.n	8003bca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb8:	4b82      	ldr	r3, [pc, #520]	; (8003dc4 <HAL_RCC_ClockConfig+0x260>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	497f      	ldr	r1, [pc, #508]	; (8003dc4 <HAL_RCC_ClockConfig+0x260>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 80dc 	beq.w	8003d90 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d13c      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xf6>
 8003be0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003be4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003be8:	fa93 f3a3 	rbit	r3, r3
 8003bec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf0:	fab3 f383 	clz	r3, r3
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d102      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xa6>
 8003c04:	4b6f      	ldr	r3, [pc, #444]	; (8003dc4 <HAL_RCC_ClockConfig+0x260>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	e00f      	b.n	8003c2a <HAL_RCC_ClockConfig+0xc6>
 8003c0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c12:	fa93 f3a3 	rbit	r3, r3
 8003c16:	667b      	str	r3, [r7, #100]	; 0x64
 8003c18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c1c:	663b      	str	r3, [r7, #96]	; 0x60
 8003c1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c20:	fa93 f3a3 	rbit	r3, r3
 8003c24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c26:	4b67      	ldr	r3, [pc, #412]	; (8003dc4 <HAL_RCC_ClockConfig+0x260>)
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c2e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c32:	fa92 f2a2 	rbit	r2, r2
 8003c36:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003c38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c3a:	fab2 f282 	clz	r2, r2
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	f042 0220 	orr.w	r2, r2, #32
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	f002 021f 	and.w	r2, r2, #31
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c50:	4013      	ands	r3, r2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d17b      	bne.n	8003d4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e0f3      	b.n	8003e42 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d13c      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x178>
 8003c62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c66:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c6a:	fa93 f3a3 	rbit	r3, r3
 8003c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c72:	fab3 f383 	clz	r3, r3
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	095b      	lsrs	r3, r3, #5
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d102      	bne.n	8003c8c <HAL_RCC_ClockConfig+0x128>
 8003c86:	4b4f      	ldr	r3, [pc, #316]	; (8003dc4 <HAL_RCC_ClockConfig+0x260>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	e00f      	b.n	8003cac <HAL_RCC_ClockConfig+0x148>
 8003c8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c90:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c94:	fa93 f3a3 	rbit	r3, r3
 8003c98:	647b      	str	r3, [r7, #68]	; 0x44
 8003c9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c9e:	643b      	str	r3, [r7, #64]	; 0x40
 8003ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca2:	fa93 f3a3 	rbit	r3, r3
 8003ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ca8:	4b46      	ldr	r3, [pc, #280]	; (8003dc4 <HAL_RCC_ClockConfig+0x260>)
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cb0:	63ba      	str	r2, [r7, #56]	; 0x38
 8003cb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cb4:	fa92 f2a2 	rbit	r2, r2
 8003cb8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cbc:	fab2 f282 	clz	r2, r2
 8003cc0:	b2d2      	uxtb	r2, r2
 8003cc2:	f042 0220 	orr.w	r2, r2, #32
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	f002 021f 	and.w	r2, r2, #31
 8003ccc:	2101      	movs	r1, #1
 8003cce:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d13a      	bne.n	8003d4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0b2      	b.n	8003e42 <HAL_RCC_ClockConfig+0x2de>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce2:	fa93 f3a3 	rbit	r3, r3
 8003ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cea:	fab3 f383 	clz	r3, r3
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	095b      	lsrs	r3, r3, #5
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	f043 0301 	orr.w	r3, r3, #1
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d102      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x1a0>
 8003cfe:	4b31      	ldr	r3, [pc, #196]	; (8003dc4 <HAL_RCC_ClockConfig+0x260>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	e00d      	b.n	8003d20 <HAL_RCC_ClockConfig+0x1bc>
 8003d04:	2302      	movs	r3, #2
 8003d06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0a:	fa93 f3a3 	rbit	r3, r3
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d10:	2302      	movs	r3, #2
 8003d12:	623b      	str	r3, [r7, #32]
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	fa93 f3a3 	rbit	r3, r3
 8003d1a:	61fb      	str	r3, [r7, #28]
 8003d1c:	4b29      	ldr	r3, [pc, #164]	; (8003dc4 <HAL_RCC_ClockConfig+0x260>)
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	2202      	movs	r2, #2
 8003d22:	61ba      	str	r2, [r7, #24]
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	fa92 f2a2 	rbit	r2, r2
 8003d2a:	617a      	str	r2, [r7, #20]
  return result;
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	fab2 f282 	clz	r2, r2
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	f042 0220 	orr.w	r2, r2, #32
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	f002 021f 	and.w	r2, r2, #31
 8003d3e:	2101      	movs	r1, #1
 8003d40:	fa01 f202 	lsl.w	r2, r1, r2
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e079      	b.n	8003e42 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d4e:	4b1d      	ldr	r3, [pc, #116]	; (8003dc4 <HAL_RCC_ClockConfig+0x260>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f023 0203 	bic.w	r2, r3, #3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	491a      	ldr	r1, [pc, #104]	; (8003dc4 <HAL_RCC_ClockConfig+0x260>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d60:	f7fe f98c 	bl	800207c <HAL_GetTick>
 8003d64:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d66:	e00a      	b.n	8003d7e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d68:	f7fe f988 	bl	800207c <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e061      	b.n	8003e42 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7e:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <HAL_RCC_ClockConfig+0x260>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f003 020c 	and.w	r2, r3, #12
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d1eb      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d90:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <HAL_RCC_ClockConfig+0x25c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d214      	bcs.n	8003dc8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9e:	4b08      	ldr	r3, [pc, #32]	; (8003dc0 <HAL_RCC_ClockConfig+0x25c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f023 0207 	bic.w	r2, r3, #7
 8003da6:	4906      	ldr	r1, [pc, #24]	; (8003dc0 <HAL_RCC_ClockConfig+0x25c>)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dae:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <HAL_RCC_ClockConfig+0x25c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d005      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e040      	b.n	8003e42 <HAL_RCC_ClockConfig+0x2de>
 8003dc0:	40022000 	.word	0x40022000
 8003dc4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d008      	beq.n	8003de6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd4:	4b1d      	ldr	r3, [pc, #116]	; (8003e4c <HAL_RCC_ClockConfig+0x2e8>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	491a      	ldr	r1, [pc, #104]	; (8003e4c <HAL_RCC_ClockConfig+0x2e8>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d009      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003df2:	4b16      	ldr	r3, [pc, #88]	; (8003e4c <HAL_RCC_ClockConfig+0x2e8>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4912      	ldr	r1, [pc, #72]	; (8003e4c <HAL_RCC_ClockConfig+0x2e8>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e06:	f000 f829 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 8003e0a:	4601      	mov	r1, r0
 8003e0c:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <HAL_RCC_ClockConfig+0x2e8>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e14:	22f0      	movs	r2, #240	; 0xf0
 8003e16:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	fa92 f2a2 	rbit	r2, r2
 8003e1e:	60fa      	str	r2, [r7, #12]
  return result;
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	fab2 f282 	clz	r2, r2
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	40d3      	lsrs	r3, r2
 8003e2a:	4a09      	ldr	r2, [pc, #36]	; (8003e50 <HAL_RCC_ClockConfig+0x2ec>)
 8003e2c:	5cd3      	ldrb	r3, [r2, r3]
 8003e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8003e32:	4a08      	ldr	r2, [pc, #32]	; (8003e54 <HAL_RCC_ClockConfig+0x2f0>)
 8003e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003e36:	4b08      	ldr	r3, [pc, #32]	; (8003e58 <HAL_RCC_ClockConfig+0x2f4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fe f8da 	bl	8001ff4 <HAL_InitTick>
  
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3778      	adds	r7, #120	; 0x78
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	08008410 	.word	0x08008410
 8003e54:	20000090 	.word	0x20000090
 8003e58:	20000094 	.word	0x20000094

08003e5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b08b      	sub	sp, #44	; 0x2c
 8003e60:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]
 8003e66:	2300      	movs	r3, #0
 8003e68:	61bb      	str	r3, [r7, #24]
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6e:	2300      	movs	r3, #0
 8003e70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003e76:	4b29      	ldr	r3, [pc, #164]	; (8003f1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	f003 030c 	and.w	r3, r3, #12
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d002      	beq.n	8003e8c <HAL_RCC_GetSysClockFreq+0x30>
 8003e86:	2b08      	cmp	r3, #8
 8003e88:	d003      	beq.n	8003e92 <HAL_RCC_GetSysClockFreq+0x36>
 8003e8a:	e03c      	b.n	8003f06 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e8c:	4b24      	ldr	r3, [pc, #144]	; (8003f20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e8e:	623b      	str	r3, [r7, #32]
      break;
 8003e90:	e03c      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e98:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003e9c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	fa92 f2a2 	rbit	r2, r2
 8003ea4:	607a      	str	r2, [r7, #4]
  return result;
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	fab2 f282 	clz	r2, r2
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	40d3      	lsrs	r3, r2
 8003eb0:	4a1c      	ldr	r2, [pc, #112]	; (8003f24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003eb2:	5cd3      	ldrb	r3, [r2, r3]
 8003eb4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003eb6:	4b19      	ldr	r3, [pc, #100]	; (8003f1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	220f      	movs	r2, #15
 8003ec0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	fa92 f2a2 	rbit	r2, r2
 8003ec8:	60fa      	str	r2, [r7, #12]
  return result;
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	fab2 f282 	clz	r2, r2
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	40d3      	lsrs	r3, r2
 8003ed4:	4a14      	ldr	r2, [pc, #80]	; (8003f28 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ed6:	5cd3      	ldrb	r3, [r2, r3]
 8003ed8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d008      	beq.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ee4:	4a0e      	ldr	r2, [pc, #56]	; (8003f20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	fb02 f303 	mul.w	r3, r2, r3
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef4:	e004      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	4a0c      	ldr	r2, [pc, #48]	; (8003f2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003efa:	fb02 f303 	mul.w	r3, r2, r3
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	623b      	str	r3, [r7, #32]
      break;
 8003f04:	e002      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f06:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f08:	623b      	str	r3, [r7, #32]
      break;
 8003f0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	372c      	adds	r7, #44	; 0x2c
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	007a1200 	.word	0x007a1200
 8003f24:	08008428 	.word	0x08008428
 8003f28:	08008438 	.word	0x08008438
 8003f2c:	003d0900 	.word	0x003d0900

08003f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f34:	4b03      	ldr	r3, [pc, #12]	; (8003f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f36:	681b      	ldr	r3, [r3, #0]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	20000090 	.word	0x20000090

08003f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003f4e:	f7ff ffef 	bl	8003f30 <HAL_RCC_GetHCLKFreq>
 8003f52:	4601      	mov	r1, r0
 8003f54:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f5c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003f60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	fa92 f2a2 	rbit	r2, r2
 8003f68:	603a      	str	r2, [r7, #0]
  return result;
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	fab2 f282 	clz	r2, r2
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	40d3      	lsrs	r3, r2
 8003f74:	4a04      	ldr	r2, [pc, #16]	; (8003f88 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003f76:	5cd3      	ldrb	r3, [r2, r3]
 8003f78:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40021000 	.word	0x40021000
 8003f88:	08008420 	.word	0x08008420

08003f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003f92:	f7ff ffcd 	bl	8003f30 <HAL_RCC_GetHCLKFreq>
 8003f96:	4601      	mov	r1, r0
 8003f98:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003fa0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003fa4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	fa92 f2a2 	rbit	r2, r2
 8003fac:	603a      	str	r2, [r7, #0]
  return result;
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	fab2 f282 	clz	r2, r2
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	40d3      	lsrs	r3, r2
 8003fb8:	4a04      	ldr	r2, [pc, #16]	; (8003fcc <HAL_RCC_GetPCLK2Freq+0x40>)
 8003fba:	5cd3      	ldrb	r3, [r2, r3]
 8003fbc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	08008420 	.word	0x08008420

08003fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b092      	sub	sp, #72	; 0x48
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 80d4 	beq.w	800419c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ff4:	4b4e      	ldr	r3, [pc, #312]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10e      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004000:	4b4b      	ldr	r3, [pc, #300]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	4a4a      	ldr	r2, [pc, #296]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800400a:	61d3      	str	r3, [r2, #28]
 800400c:	4b48      	ldr	r3, [pc, #288]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004014:	60bb      	str	r3, [r7, #8]
 8004016:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004018:	2301      	movs	r3, #1
 800401a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800401e:	4b45      	ldr	r3, [pc, #276]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004026:	2b00      	cmp	r3, #0
 8004028:	d118      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800402a:	4b42      	ldr	r3, [pc, #264]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a41      	ldr	r2, [pc, #260]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004034:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004036:	f7fe f821 	bl	800207c <HAL_GetTick>
 800403a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800403c:	e008      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800403e:	f7fe f81d 	bl	800207c <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b64      	cmp	r3, #100	; 0x64
 800404a:	d901      	bls.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e169      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004050:	4b38      	ldr	r3, [pc, #224]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0f0      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800405c:	4b34      	ldr	r3, [pc, #208]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004064:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 8084 	beq.w	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004076:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004078:	429a      	cmp	r2, r3
 800407a:	d07c      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800407c:	4b2c      	ldr	r3, [pc, #176]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004084:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004086:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800408a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408e:	fa93 f3a3 	rbit	r3, r3
 8004092:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004096:	fab3 f383 	clz	r3, r3
 800409a:	b2db      	uxtb	r3, r3
 800409c:	461a      	mov	r2, r3
 800409e:	4b26      	ldr	r3, [pc, #152]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	461a      	mov	r2, r3
 80040a6:	2301      	movs	r3, #1
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b2:	fa93 f3a3 	rbit	r3, r3
 80040b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80040b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040ba:	fab3 f383 	clz	r3, r3
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	461a      	mov	r2, r3
 80040c2:	4b1d      	ldr	r3, [pc, #116]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040c4:	4413      	add	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	461a      	mov	r2, r3
 80040ca:	2300      	movs	r3, #0
 80040cc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040ce:	4a18      	ldr	r2, [pc, #96]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040d2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d04b      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040de:	f7fd ffcd 	bl	800207c <HAL_GetTick>
 80040e2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e4:	e00a      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e6:	f7fd ffc9 	bl	800207c <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d901      	bls.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e113      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80040fc:	2302      	movs	r3, #2
 80040fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004102:	fa93 f3a3 	rbit	r3, r3
 8004106:	627b      	str	r3, [r7, #36]	; 0x24
 8004108:	2302      	movs	r3, #2
 800410a:	623b      	str	r3, [r7, #32]
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	fa93 f3a3 	rbit	r3, r3
 8004112:	61fb      	str	r3, [r7, #28]
  return result;
 8004114:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004116:	fab3 f383 	clz	r3, r3
 800411a:	b2db      	uxtb	r3, r3
 800411c:	095b      	lsrs	r3, r3, #5
 800411e:	b2db      	uxtb	r3, r3
 8004120:	f043 0302 	orr.w	r3, r3, #2
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d108      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800412a:	4b01      	ldr	r3, [pc, #4]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	e00d      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004130:	40021000 	.word	0x40021000
 8004134:	40007000 	.word	0x40007000
 8004138:	10908100 	.word	0x10908100
 800413c:	2302      	movs	r3, #2
 800413e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	fa93 f3a3 	rbit	r3, r3
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	4b78      	ldr	r3, [pc, #480]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	2202      	movs	r2, #2
 800414e:	613a      	str	r2, [r7, #16]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	fa92 f2a2 	rbit	r2, r2
 8004156:	60fa      	str	r2, [r7, #12]
  return result;
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	fab2 f282 	clz	r2, r2
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	f002 021f 	and.w	r2, r2, #31
 800416a:	2101      	movs	r1, #1
 800416c:	fa01 f202 	lsl.w	r2, r1, r2
 8004170:	4013      	ands	r3, r2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0b7      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004176:	4b6d      	ldr	r3, [pc, #436]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	496a      	ldr	r1, [pc, #424]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004184:	4313      	orrs	r3, r2
 8004186:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004188:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800418c:	2b01      	cmp	r3, #1
 800418e:	d105      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004190:	4b66      	ldr	r3, [pc, #408]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	4a65      	ldr	r2, [pc, #404]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800419a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d008      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041a8:	4b60      	ldr	r3, [pc, #384]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ac:	f023 0203 	bic.w	r2, r3, #3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	495d      	ldr	r1, [pc, #372]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d008      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041c6:	4b59      	ldr	r3, [pc, #356]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	4956      	ldr	r1, [pc, #344]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d008      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041e4:	4b51      	ldr	r3, [pc, #324]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	494e      	ldr	r1, [pc, #312]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0320 	and.w	r3, r3, #32
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d008      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004202:	4b4a      	ldr	r3, [pc, #296]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	f023 0210 	bic.w	r2, r3, #16
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	4947      	ldr	r1, [pc, #284]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004210:	4313      	orrs	r3, r2
 8004212:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004220:	4b42      	ldr	r3, [pc, #264]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422c:	493f      	ldr	r1, [pc, #252]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800422e:	4313      	orrs	r3, r2
 8004230:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423a:	2b00      	cmp	r3, #0
 800423c:	d008      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800423e:	4b3b      	ldr	r3, [pc, #236]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	f023 0220 	bic.w	r2, r3, #32
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	4938      	ldr	r1, [pc, #224]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800424c:	4313      	orrs	r3, r2
 800424e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0308 	and.w	r3, r3, #8
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800425c:	4b33      	ldr	r3, [pc, #204]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	4930      	ldr	r1, [pc, #192]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800426a:	4313      	orrs	r3, r2
 800426c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0310 	and.w	r3, r3, #16
 8004276:	2b00      	cmp	r3, #0
 8004278:	d008      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800427a:	4b2c      	ldr	r3, [pc, #176]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	4929      	ldr	r1, [pc, #164]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004288:	4313      	orrs	r3, r2
 800428a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004298:	4b24      	ldr	r3, [pc, #144]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	4921      	ldr	r1, [pc, #132]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d008      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80042b6:	4b1d      	ldr	r3, [pc, #116]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ba:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	491a      	ldr	r1, [pc, #104]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d008      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80042d4:	4b15      	ldr	r3, [pc, #84]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	4912      	ldr	r1, [pc, #72]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d008      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80042f2:	4b0e      	ldr	r3, [pc, #56]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fe:	490b      	ldr	r1, [pc, #44]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004300:	4313      	orrs	r3, r2
 8004302:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d008      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004310:	4b06      	ldr	r3, [pc, #24]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004314:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431c:	4903      	ldr	r1, [pc, #12]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800431e:	4313      	orrs	r3, r2
 8004320:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3748      	adds	r7, #72	; 0x48
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40021000 	.word	0x40021000

08004330 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e09d      	b.n	800447e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	2b00      	cmp	r3, #0
 8004348:	d108      	bne.n	800435c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004352:	d009      	beq.n	8004368 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	61da      	str	r2, [r3, #28]
 800435a:	e005      	b.n	8004368 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d106      	bne.n	8004388 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7fd fade 	bl	8001944 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800439e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043a8:	d902      	bls.n	80043b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	e002      	b.n	80043b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80043be:	d007      	beq.n	80043d0 <HAL_SPI_Init+0xa0>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043c8:	d002      	beq.n	80043d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	431a      	orrs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004408:	431a      	orrs	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004412:	ea42 0103 	orr.w	r1, r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	0c1b      	lsrs	r3, r3, #16
 800442c:	f003 0204 	and.w	r2, r3, #4
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	431a      	orrs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800444c:	ea42 0103 	orr.w	r1, r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69da      	ldr	r2, [r3, #28]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800446c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e049      	b.n	800452c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d106      	bne.n	80044b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7fd fa8b 	bl	80019c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2202      	movs	r2, #2
 80044b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3304      	adds	r3, #4
 80044c2:	4619      	mov	r1, r3
 80044c4:	4610      	mov	r0, r2
 80044c6:	f000 fd27 	bl	8004f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b01      	cmp	r3, #1
 8004546:	d001      	beq.n	800454c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e04a      	b.n	80045e2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68da      	ldr	r2, [r3, #12]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0201 	orr.w	r2, r2, #1
 8004562:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a21      	ldr	r2, [pc, #132]	; (80045f0 <HAL_TIM_Base_Start_IT+0xbc>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d018      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x6c>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004576:	d013      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x6c>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a1d      	ldr	r2, [pc, #116]	; (80045f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00e      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x6c>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a1c      	ldr	r2, [pc, #112]	; (80045f8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d009      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x6c>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a1a      	ldr	r2, [pc, #104]	; (80045fc <HAL_TIM_Base_Start_IT+0xc8>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d004      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x6c>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a19      	ldr	r2, [pc, #100]	; (8004600 <HAL_TIM_Base_Start_IT+0xcc>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d115      	bne.n	80045cc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689a      	ldr	r2, [r3, #8]
 80045a6:	4b17      	ldr	r3, [pc, #92]	; (8004604 <HAL_TIM_Base_Start_IT+0xd0>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2b06      	cmp	r3, #6
 80045b0:	d015      	beq.n	80045de <HAL_TIM_Base_Start_IT+0xaa>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b8:	d011      	beq.n	80045de <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0201 	orr.w	r2, r2, #1
 80045c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ca:	e008      	b.n	80045de <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	e000      	b.n	80045e0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40012c00 	.word	0x40012c00
 80045f4:	40000400 	.word	0x40000400
 80045f8:	40000800 	.word	0x40000800
 80045fc:	40013400 	.word	0x40013400
 8004600:	40014000 	.word	0x40014000
 8004604:	00010007 	.word	0x00010007

08004608 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e049      	b.n	80046ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f841 	bl	80046b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3304      	adds	r3, #4
 8004644:	4619      	mov	r1, r3
 8004646:	4610      	mov	r0, r2
 8004648:	f000 fc66 	bl	8004f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
	...

080046cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d109      	bne.n	80046f0 <HAL_TIM_PWM_Start+0x24>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	bf14      	ite	ne
 80046e8:	2301      	movne	r3, #1
 80046ea:	2300      	moveq	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	e03c      	b.n	800476a <HAL_TIM_PWM_Start+0x9e>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d109      	bne.n	800470a <HAL_TIM_PWM_Start+0x3e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b01      	cmp	r3, #1
 8004700:	bf14      	ite	ne
 8004702:	2301      	movne	r3, #1
 8004704:	2300      	moveq	r3, #0
 8004706:	b2db      	uxtb	r3, r3
 8004708:	e02f      	b.n	800476a <HAL_TIM_PWM_Start+0x9e>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b08      	cmp	r3, #8
 800470e:	d109      	bne.n	8004724 <HAL_TIM_PWM_Start+0x58>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b01      	cmp	r3, #1
 800471a:	bf14      	ite	ne
 800471c:	2301      	movne	r3, #1
 800471e:	2300      	moveq	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	e022      	b.n	800476a <HAL_TIM_PWM_Start+0x9e>
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b0c      	cmp	r3, #12
 8004728:	d109      	bne.n	800473e <HAL_TIM_PWM_Start+0x72>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b01      	cmp	r3, #1
 8004734:	bf14      	ite	ne
 8004736:	2301      	movne	r3, #1
 8004738:	2300      	moveq	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	e015      	b.n	800476a <HAL_TIM_PWM_Start+0x9e>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b10      	cmp	r3, #16
 8004742:	d109      	bne.n	8004758 <HAL_TIM_PWM_Start+0x8c>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b01      	cmp	r3, #1
 800474e:	bf14      	ite	ne
 8004750:	2301      	movne	r3, #1
 8004752:	2300      	moveq	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	e008      	b.n	800476a <HAL_TIM_PWM_Start+0x9e>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b01      	cmp	r3, #1
 8004762:	bf14      	ite	ne
 8004764:	2301      	movne	r3, #1
 8004766:	2300      	moveq	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e097      	b.n	80048a2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d104      	bne.n	8004782 <HAL_TIM_PWM_Start+0xb6>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004780:	e023      	b.n	80047ca <HAL_TIM_PWM_Start+0xfe>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b04      	cmp	r3, #4
 8004786:	d104      	bne.n	8004792 <HAL_TIM_PWM_Start+0xc6>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004790:	e01b      	b.n	80047ca <HAL_TIM_PWM_Start+0xfe>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b08      	cmp	r3, #8
 8004796:	d104      	bne.n	80047a2 <HAL_TIM_PWM_Start+0xd6>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047a0:	e013      	b.n	80047ca <HAL_TIM_PWM_Start+0xfe>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b0c      	cmp	r3, #12
 80047a6:	d104      	bne.n	80047b2 <HAL_TIM_PWM_Start+0xe6>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047b0:	e00b      	b.n	80047ca <HAL_TIM_PWM_Start+0xfe>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b10      	cmp	r3, #16
 80047b6:	d104      	bne.n	80047c2 <HAL_TIM_PWM_Start+0xf6>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047c0:	e003      	b.n	80047ca <HAL_TIM_PWM_Start+0xfe>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2202      	movs	r2, #2
 80047c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2201      	movs	r2, #1
 80047d0:	6839      	ldr	r1, [r7, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 ffa0 	bl	8005718 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a33      	ldr	r2, [pc, #204]	; (80048ac <HAL_TIM_PWM_Start+0x1e0>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d013      	beq.n	800480a <HAL_TIM_PWM_Start+0x13e>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a32      	ldr	r2, [pc, #200]	; (80048b0 <HAL_TIM_PWM_Start+0x1e4>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d00e      	beq.n	800480a <HAL_TIM_PWM_Start+0x13e>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a30      	ldr	r2, [pc, #192]	; (80048b4 <HAL_TIM_PWM_Start+0x1e8>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d009      	beq.n	800480a <HAL_TIM_PWM_Start+0x13e>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a2f      	ldr	r2, [pc, #188]	; (80048b8 <HAL_TIM_PWM_Start+0x1ec>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d004      	beq.n	800480a <HAL_TIM_PWM_Start+0x13e>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a2d      	ldr	r2, [pc, #180]	; (80048bc <HAL_TIM_PWM_Start+0x1f0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d101      	bne.n	800480e <HAL_TIM_PWM_Start+0x142>
 800480a:	2301      	movs	r3, #1
 800480c:	e000      	b.n	8004810 <HAL_TIM_PWM_Start+0x144>
 800480e:	2300      	movs	r3, #0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004822:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a20      	ldr	r2, [pc, #128]	; (80048ac <HAL_TIM_PWM_Start+0x1e0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d018      	beq.n	8004860 <HAL_TIM_PWM_Start+0x194>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004836:	d013      	beq.n	8004860 <HAL_TIM_PWM_Start+0x194>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a20      	ldr	r2, [pc, #128]	; (80048c0 <HAL_TIM_PWM_Start+0x1f4>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d00e      	beq.n	8004860 <HAL_TIM_PWM_Start+0x194>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a1f      	ldr	r2, [pc, #124]	; (80048c4 <HAL_TIM_PWM_Start+0x1f8>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d009      	beq.n	8004860 <HAL_TIM_PWM_Start+0x194>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a17      	ldr	r2, [pc, #92]	; (80048b0 <HAL_TIM_PWM_Start+0x1e4>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d004      	beq.n	8004860 <HAL_TIM_PWM_Start+0x194>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a16      	ldr	r2, [pc, #88]	; (80048b4 <HAL_TIM_PWM_Start+0x1e8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d115      	bne.n	800488c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	4b18      	ldr	r3, [pc, #96]	; (80048c8 <HAL_TIM_PWM_Start+0x1fc>)
 8004868:	4013      	ands	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2b06      	cmp	r3, #6
 8004870:	d015      	beq.n	800489e <HAL_TIM_PWM_Start+0x1d2>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004878:	d011      	beq.n	800489e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f042 0201 	orr.w	r2, r2, #1
 8004888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488a:	e008      	b.n	800489e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0201 	orr.w	r2, r2, #1
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	e000      	b.n	80048a0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	40012c00 	.word	0x40012c00
 80048b0:	40013400 	.word	0x40013400
 80048b4:	40014000 	.word	0x40014000
 80048b8:	40014400 	.word	0x40014400
 80048bc:	40014800 	.word	0x40014800
 80048c0:	40000400 	.word	0x40000400
 80048c4:	40000800 	.word	0x40000800
 80048c8:	00010007 	.word	0x00010007

080048cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d122      	bne.n	8004928 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d11b      	bne.n	8004928 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0202 	mvn.w	r2, #2
 80048f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fae3 	bl	8004eda <HAL_TIM_IC_CaptureCallback>
 8004914:	e005      	b.n	8004922 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fad5 	bl	8004ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 fae6 	bl	8004eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	2b04      	cmp	r3, #4
 8004934:	d122      	bne.n	800497c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b04      	cmp	r3, #4
 8004942:	d11b      	bne.n	800497c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0204 	mvn.w	r2, #4
 800494c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2202      	movs	r2, #2
 8004952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fab9 	bl	8004eda <HAL_TIM_IC_CaptureCallback>
 8004968:	e005      	b.n	8004976 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 faab 	bl	8004ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fabc 	bl	8004eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b08      	cmp	r3, #8
 8004988:	d122      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f003 0308 	and.w	r3, r3, #8
 8004994:	2b08      	cmp	r3, #8
 8004996:	d11b      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f06f 0208 	mvn.w	r2, #8
 80049a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2204      	movs	r2, #4
 80049a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fa8f 	bl	8004eda <HAL_TIM_IC_CaptureCallback>
 80049bc:	e005      	b.n	80049ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fa81 	bl	8004ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 fa92 	bl	8004eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f003 0310 	and.w	r3, r3, #16
 80049da:	2b10      	cmp	r3, #16
 80049dc:	d122      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f003 0310 	and.w	r3, r3, #16
 80049e8:	2b10      	cmp	r3, #16
 80049ea:	d11b      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0210 	mvn.w	r2, #16
 80049f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2208      	movs	r2, #8
 80049fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fa65 	bl	8004eda <HAL_TIM_IC_CaptureCallback>
 8004a10:	e005      	b.n	8004a1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fa57 	bl	8004ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 fa68 	bl	8004eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d10e      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d107      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0201 	mvn.w	r2, #1
 8004a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fc fe96 	bl	800177c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5a:	2b80      	cmp	r3, #128	; 0x80
 8004a5c:	d10e      	bne.n	8004a7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a68:	2b80      	cmp	r3, #128	; 0x80
 8004a6a:	d107      	bne.n	8004a7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fefe 	bl	8005878 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a8a:	d10e      	bne.n	8004aaa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a96:	2b80      	cmp	r3, #128	; 0x80
 8004a98:	d107      	bne.n	8004aaa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fef1 	bl	800588c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab4:	2b40      	cmp	r3, #64	; 0x40
 8004ab6:	d10e      	bne.n	8004ad6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac2:	2b40      	cmp	r3, #64	; 0x40
 8004ac4:	d107      	bne.n	8004ad6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 fa16 	bl	8004f02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b20      	cmp	r3, #32
 8004ae2:	d10e      	bne.n	8004b02 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f003 0320 	and.w	r3, r3, #32
 8004aee:	2b20      	cmp	r3, #32
 8004af0:	d107      	bne.n	8004b02 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f06f 0220 	mvn.w	r2, #32
 8004afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 feb1 	bl	8005864 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b02:	bf00      	nop
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
	...

08004b0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d101      	bne.n	8004b2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b26:	2302      	movs	r3, #2
 8004b28:	e0ff      	b.n	8004d2a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b14      	cmp	r3, #20
 8004b36:	f200 80f0 	bhi.w	8004d1a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b3a:	a201      	add	r2, pc, #4	; (adr r2, 8004b40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b40:	08004b95 	.word	0x08004b95
 8004b44:	08004d1b 	.word	0x08004d1b
 8004b48:	08004d1b 	.word	0x08004d1b
 8004b4c:	08004d1b 	.word	0x08004d1b
 8004b50:	08004bd5 	.word	0x08004bd5
 8004b54:	08004d1b 	.word	0x08004d1b
 8004b58:	08004d1b 	.word	0x08004d1b
 8004b5c:	08004d1b 	.word	0x08004d1b
 8004b60:	08004c17 	.word	0x08004c17
 8004b64:	08004d1b 	.word	0x08004d1b
 8004b68:	08004d1b 	.word	0x08004d1b
 8004b6c:	08004d1b 	.word	0x08004d1b
 8004b70:	08004c57 	.word	0x08004c57
 8004b74:	08004d1b 	.word	0x08004d1b
 8004b78:	08004d1b 	.word	0x08004d1b
 8004b7c:	08004d1b 	.word	0x08004d1b
 8004b80:	08004c99 	.word	0x08004c99
 8004b84:	08004d1b 	.word	0x08004d1b
 8004b88:	08004d1b 	.word	0x08004d1b
 8004b8c:	08004d1b 	.word	0x08004d1b
 8004b90:	08004cd9 	.word	0x08004cd9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68b9      	ldr	r1, [r7, #8]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 fa4c 	bl	8005038 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699a      	ldr	r2, [r3, #24]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0208 	orr.w	r2, r2, #8
 8004bae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699a      	ldr	r2, [r3, #24]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0204 	bic.w	r2, r2, #4
 8004bbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6999      	ldr	r1, [r3, #24]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	691a      	ldr	r2, [r3, #16]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	619a      	str	r2, [r3, #24]
      break;
 8004bd2:	e0a5      	b.n	8004d20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 fabc 	bl	8005158 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699a      	ldr	r2, [r3, #24]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699a      	ldr	r2, [r3, #24]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6999      	ldr	r1, [r3, #24]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	021a      	lsls	r2, r3, #8
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	619a      	str	r2, [r3, #24]
      break;
 8004c14:	e084      	b.n	8004d20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68b9      	ldr	r1, [r7, #8]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 fb25 	bl	800526c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69da      	ldr	r2, [r3, #28]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f042 0208 	orr.w	r2, r2, #8
 8004c30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	69da      	ldr	r2, [r3, #28]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0204 	bic.w	r2, r2, #4
 8004c40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	69d9      	ldr	r1, [r3, #28]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	691a      	ldr	r2, [r3, #16]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	61da      	str	r2, [r3, #28]
      break;
 8004c54:	e064      	b.n	8004d20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68b9      	ldr	r1, [r7, #8]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f000 fb8d 	bl	800537c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	69da      	ldr	r2, [r3, #28]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69da      	ldr	r2, [r3, #28]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69d9      	ldr	r1, [r3, #28]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	021a      	lsls	r2, r3, #8
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	61da      	str	r2, [r3, #28]
      break;
 8004c96:	e043      	b.n	8004d20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fbd6 	bl	8005450 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0208 	orr.w	r2, r2, #8
 8004cb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0204 	bic.w	r2, r2, #4
 8004cc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	691a      	ldr	r2, [r3, #16]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004cd6:	e023      	b.n	8004d20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68b9      	ldr	r1, [r7, #8]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fc1a 	bl	8005518 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cf2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	021a      	lsls	r2, r3, #8
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d18:	e002      	b.n	8004d20 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop

08004d34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_TIM_ConfigClockSource+0x1c>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e0b6      	b.n	8004ebe <HAL_TIM_ConfigClockSource+0x18a>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d8c:	d03e      	beq.n	8004e0c <HAL_TIM_ConfigClockSource+0xd8>
 8004d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d92:	f200 8087 	bhi.w	8004ea4 <HAL_TIM_ConfigClockSource+0x170>
 8004d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d9a:	f000 8086 	beq.w	8004eaa <HAL_TIM_ConfigClockSource+0x176>
 8004d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da2:	d87f      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x170>
 8004da4:	2b70      	cmp	r3, #112	; 0x70
 8004da6:	d01a      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0xaa>
 8004da8:	2b70      	cmp	r3, #112	; 0x70
 8004daa:	d87b      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x170>
 8004dac:	2b60      	cmp	r3, #96	; 0x60
 8004dae:	d050      	beq.n	8004e52 <HAL_TIM_ConfigClockSource+0x11e>
 8004db0:	2b60      	cmp	r3, #96	; 0x60
 8004db2:	d877      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x170>
 8004db4:	2b50      	cmp	r3, #80	; 0x50
 8004db6:	d03c      	beq.n	8004e32 <HAL_TIM_ConfigClockSource+0xfe>
 8004db8:	2b50      	cmp	r3, #80	; 0x50
 8004dba:	d873      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x170>
 8004dbc:	2b40      	cmp	r3, #64	; 0x40
 8004dbe:	d058      	beq.n	8004e72 <HAL_TIM_ConfigClockSource+0x13e>
 8004dc0:	2b40      	cmp	r3, #64	; 0x40
 8004dc2:	d86f      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x170>
 8004dc4:	2b30      	cmp	r3, #48	; 0x30
 8004dc6:	d064      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x15e>
 8004dc8:	2b30      	cmp	r3, #48	; 0x30
 8004dca:	d86b      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x170>
 8004dcc:	2b20      	cmp	r3, #32
 8004dce:	d060      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x15e>
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d867      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x170>
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d05c      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x15e>
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	d05a      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x15e>
 8004ddc:	e062      	b.n	8004ea4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6818      	ldr	r0, [r3, #0]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	6899      	ldr	r1, [r3, #8]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f000 fc73 	bl	80056d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	609a      	str	r2, [r3, #8]
      break;
 8004e0a:	e04f      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6818      	ldr	r0, [r3, #0]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	6899      	ldr	r1, [r3, #8]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f000 fc5c 	bl	80056d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e2e:	609a      	str	r2, [r3, #8]
      break;
 8004e30:	e03c      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6818      	ldr	r0, [r3, #0]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	6859      	ldr	r1, [r3, #4]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f000 fbd0 	bl	80055e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2150      	movs	r1, #80	; 0x50
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 fc29 	bl	80056a2 <TIM_ITRx_SetConfig>
      break;
 8004e50:	e02c      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6818      	ldr	r0, [r3, #0]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	6859      	ldr	r1, [r3, #4]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	f000 fbef 	bl	8005642 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2160      	movs	r1, #96	; 0x60
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 fc19 	bl	80056a2 <TIM_ITRx_SetConfig>
      break;
 8004e70:	e01c      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6818      	ldr	r0, [r3, #0]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	6859      	ldr	r1, [r3, #4]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f000 fbb0 	bl	80055e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2140      	movs	r1, #64	; 0x40
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fc09 	bl	80056a2 <TIM_ITRx_SetConfig>
      break;
 8004e90:	e00c      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	f000 fc00 	bl	80056a2 <TIM_ITRx_SetConfig>
      break;
 8004ea2:	e003      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ea8:	e000      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004eaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
	...

08004f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a3c      	ldr	r2, [pc, #240]	; (800501c <TIM_Base_SetConfig+0x104>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00f      	beq.n	8004f50 <TIM_Base_SetConfig+0x38>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f36:	d00b      	beq.n	8004f50 <TIM_Base_SetConfig+0x38>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a39      	ldr	r2, [pc, #228]	; (8005020 <TIM_Base_SetConfig+0x108>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d007      	beq.n	8004f50 <TIM_Base_SetConfig+0x38>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a38      	ldr	r2, [pc, #224]	; (8005024 <TIM_Base_SetConfig+0x10c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d003      	beq.n	8004f50 <TIM_Base_SetConfig+0x38>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a37      	ldr	r2, [pc, #220]	; (8005028 <TIM_Base_SetConfig+0x110>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d108      	bne.n	8004f62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a2d      	ldr	r2, [pc, #180]	; (800501c <TIM_Base_SetConfig+0x104>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d01b      	beq.n	8004fa2 <TIM_Base_SetConfig+0x8a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f70:	d017      	beq.n	8004fa2 <TIM_Base_SetConfig+0x8a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a2a      	ldr	r2, [pc, #168]	; (8005020 <TIM_Base_SetConfig+0x108>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d013      	beq.n	8004fa2 <TIM_Base_SetConfig+0x8a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a29      	ldr	r2, [pc, #164]	; (8005024 <TIM_Base_SetConfig+0x10c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00f      	beq.n	8004fa2 <TIM_Base_SetConfig+0x8a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a28      	ldr	r2, [pc, #160]	; (8005028 <TIM_Base_SetConfig+0x110>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00b      	beq.n	8004fa2 <TIM_Base_SetConfig+0x8a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a27      	ldr	r2, [pc, #156]	; (800502c <TIM_Base_SetConfig+0x114>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d007      	beq.n	8004fa2 <TIM_Base_SetConfig+0x8a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a26      	ldr	r2, [pc, #152]	; (8005030 <TIM_Base_SetConfig+0x118>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d003      	beq.n	8004fa2 <TIM_Base_SetConfig+0x8a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a25      	ldr	r2, [pc, #148]	; (8005034 <TIM_Base_SetConfig+0x11c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d108      	bne.n	8004fb4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a10      	ldr	r2, [pc, #64]	; (800501c <TIM_Base_SetConfig+0x104>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d00f      	beq.n	8005000 <TIM_Base_SetConfig+0xe8>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a11      	ldr	r2, [pc, #68]	; (8005028 <TIM_Base_SetConfig+0x110>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d00b      	beq.n	8005000 <TIM_Base_SetConfig+0xe8>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a10      	ldr	r2, [pc, #64]	; (800502c <TIM_Base_SetConfig+0x114>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d007      	beq.n	8005000 <TIM_Base_SetConfig+0xe8>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a0f      	ldr	r2, [pc, #60]	; (8005030 <TIM_Base_SetConfig+0x118>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d003      	beq.n	8005000 <TIM_Base_SetConfig+0xe8>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a0e      	ldr	r2, [pc, #56]	; (8005034 <TIM_Base_SetConfig+0x11c>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d103      	bne.n	8005008 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	691a      	ldr	r2, [r3, #16]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	615a      	str	r2, [r3, #20]
}
 800500e:	bf00      	nop
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40012c00 	.word	0x40012c00
 8005020:	40000400 	.word	0x40000400
 8005024:	40000800 	.word	0x40000800
 8005028:	40013400 	.word	0x40013400
 800502c:	40014000 	.word	0x40014000
 8005030:	40014400 	.word	0x40014400
 8005034:	40014800 	.word	0x40014800

08005038 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005038:	b480      	push	{r7}
 800503a:	b087      	sub	sp, #28
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	f023 0201 	bic.w	r2, r3, #1
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 0303 	bic.w	r3, r3, #3
 8005072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f023 0302 	bic.w	r3, r3, #2
 8005084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a2c      	ldr	r2, [pc, #176]	; (8005144 <TIM_OC1_SetConfig+0x10c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d00f      	beq.n	80050b8 <TIM_OC1_SetConfig+0x80>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a2b      	ldr	r2, [pc, #172]	; (8005148 <TIM_OC1_SetConfig+0x110>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00b      	beq.n	80050b8 <TIM_OC1_SetConfig+0x80>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a2a      	ldr	r2, [pc, #168]	; (800514c <TIM_OC1_SetConfig+0x114>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d007      	beq.n	80050b8 <TIM_OC1_SetConfig+0x80>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a29      	ldr	r2, [pc, #164]	; (8005150 <TIM_OC1_SetConfig+0x118>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d003      	beq.n	80050b8 <TIM_OC1_SetConfig+0x80>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a28      	ldr	r2, [pc, #160]	; (8005154 <TIM_OC1_SetConfig+0x11c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d10c      	bne.n	80050d2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f023 0308 	bic.w	r3, r3, #8
 80050be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f023 0304 	bic.w	r3, r3, #4
 80050d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a1b      	ldr	r2, [pc, #108]	; (8005144 <TIM_OC1_SetConfig+0x10c>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00f      	beq.n	80050fa <TIM_OC1_SetConfig+0xc2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a1a      	ldr	r2, [pc, #104]	; (8005148 <TIM_OC1_SetConfig+0x110>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d00b      	beq.n	80050fa <TIM_OC1_SetConfig+0xc2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a19      	ldr	r2, [pc, #100]	; (800514c <TIM_OC1_SetConfig+0x114>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d007      	beq.n	80050fa <TIM_OC1_SetConfig+0xc2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a18      	ldr	r2, [pc, #96]	; (8005150 <TIM_OC1_SetConfig+0x118>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d003      	beq.n	80050fa <TIM_OC1_SetConfig+0xc2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a17      	ldr	r2, [pc, #92]	; (8005154 <TIM_OC1_SetConfig+0x11c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d111      	bne.n	800511e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	4313      	orrs	r3, r2
 8005112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	4313      	orrs	r3, r2
 800511c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	621a      	str	r2, [r3, #32]
}
 8005138:	bf00      	nop
 800513a:	371c      	adds	r7, #28
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	40012c00 	.word	0x40012c00
 8005148:	40013400 	.word	0x40013400
 800514c:	40014000 	.word	0x40014000
 8005150:	40014400 	.word	0x40014400
 8005154:	40014800 	.word	0x40014800

08005158 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	f023 0210 	bic.w	r2, r3, #16
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800518a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	021b      	lsls	r3, r3, #8
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	4313      	orrs	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f023 0320 	bic.w	r3, r3, #32
 80051a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a28      	ldr	r2, [pc, #160]	; (8005258 <TIM_OC2_SetConfig+0x100>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d003      	beq.n	80051c4 <TIM_OC2_SetConfig+0x6c>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a27      	ldr	r2, [pc, #156]	; (800525c <TIM_OC2_SetConfig+0x104>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d10d      	bne.n	80051e0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a1d      	ldr	r2, [pc, #116]	; (8005258 <TIM_OC2_SetConfig+0x100>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d00f      	beq.n	8005208 <TIM_OC2_SetConfig+0xb0>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a1c      	ldr	r2, [pc, #112]	; (800525c <TIM_OC2_SetConfig+0x104>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00b      	beq.n	8005208 <TIM_OC2_SetConfig+0xb0>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a1b      	ldr	r2, [pc, #108]	; (8005260 <TIM_OC2_SetConfig+0x108>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d007      	beq.n	8005208 <TIM_OC2_SetConfig+0xb0>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a1a      	ldr	r2, [pc, #104]	; (8005264 <TIM_OC2_SetConfig+0x10c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d003      	beq.n	8005208 <TIM_OC2_SetConfig+0xb0>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a19      	ldr	r2, [pc, #100]	; (8005268 <TIM_OC2_SetConfig+0x110>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d113      	bne.n	8005230 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800520e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005216:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	621a      	str	r2, [r3, #32]
}
 800524a:	bf00      	nop
 800524c:	371c      	adds	r7, #28
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40012c00 	.word	0x40012c00
 800525c:	40013400 	.word	0x40013400
 8005260:	40014000 	.word	0x40014000
 8005264:	40014400 	.word	0x40014400
 8005268:	40014800 	.word	0x40014800

0800526c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800529a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 0303 	bic.w	r3, r3, #3
 80052a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a27      	ldr	r2, [pc, #156]	; (8005368 <TIM_OC3_SetConfig+0xfc>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d003      	beq.n	80052d6 <TIM_OC3_SetConfig+0x6a>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a26      	ldr	r2, [pc, #152]	; (800536c <TIM_OC3_SetConfig+0x100>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d10d      	bne.n	80052f2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	021b      	lsls	r3, r3, #8
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052f0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a1c      	ldr	r2, [pc, #112]	; (8005368 <TIM_OC3_SetConfig+0xfc>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d00f      	beq.n	800531a <TIM_OC3_SetConfig+0xae>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a1b      	ldr	r2, [pc, #108]	; (800536c <TIM_OC3_SetConfig+0x100>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d00b      	beq.n	800531a <TIM_OC3_SetConfig+0xae>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a1a      	ldr	r2, [pc, #104]	; (8005370 <TIM_OC3_SetConfig+0x104>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d007      	beq.n	800531a <TIM_OC3_SetConfig+0xae>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a19      	ldr	r2, [pc, #100]	; (8005374 <TIM_OC3_SetConfig+0x108>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d003      	beq.n	800531a <TIM_OC3_SetConfig+0xae>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a18      	ldr	r2, [pc, #96]	; (8005378 <TIM_OC3_SetConfig+0x10c>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d113      	bne.n	8005342 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	4313      	orrs	r3, r2
 8005334:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	011b      	lsls	r3, r3, #4
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	621a      	str	r2, [r3, #32]
}
 800535c:	bf00      	nop
 800535e:	371c      	adds	r7, #28
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	40012c00 	.word	0x40012c00
 800536c:	40013400 	.word	0x40013400
 8005370:	40014000 	.word	0x40014000
 8005374:	40014400 	.word	0x40014400
 8005378:	40014800 	.word	0x40014800

0800537c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	021b      	lsls	r3, r3, #8
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	031b      	lsls	r3, r3, #12
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a18      	ldr	r2, [pc, #96]	; (800543c <TIM_OC4_SetConfig+0xc0>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d00f      	beq.n	8005400 <TIM_OC4_SetConfig+0x84>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a17      	ldr	r2, [pc, #92]	; (8005440 <TIM_OC4_SetConfig+0xc4>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00b      	beq.n	8005400 <TIM_OC4_SetConfig+0x84>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a16      	ldr	r2, [pc, #88]	; (8005444 <TIM_OC4_SetConfig+0xc8>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d007      	beq.n	8005400 <TIM_OC4_SetConfig+0x84>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a15      	ldr	r2, [pc, #84]	; (8005448 <TIM_OC4_SetConfig+0xcc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d003      	beq.n	8005400 <TIM_OC4_SetConfig+0x84>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a14      	ldr	r2, [pc, #80]	; (800544c <TIM_OC4_SetConfig+0xd0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d109      	bne.n	8005414 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005406:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	019b      	lsls	r3, r3, #6
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	621a      	str	r2, [r3, #32]
}
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	40012c00 	.word	0x40012c00
 8005440:	40013400 	.word	0x40013400
 8005444:	40014000 	.word	0x40014000
 8005448:	40014400 	.word	0x40014400
 800544c:	40014800 	.word	0x40014800

08005450 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800547e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005494:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	041b      	lsls	r3, r3, #16
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	4313      	orrs	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a17      	ldr	r2, [pc, #92]	; (8005504 <TIM_OC5_SetConfig+0xb4>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d00f      	beq.n	80054ca <TIM_OC5_SetConfig+0x7a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a16      	ldr	r2, [pc, #88]	; (8005508 <TIM_OC5_SetConfig+0xb8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d00b      	beq.n	80054ca <TIM_OC5_SetConfig+0x7a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a15      	ldr	r2, [pc, #84]	; (800550c <TIM_OC5_SetConfig+0xbc>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d007      	beq.n	80054ca <TIM_OC5_SetConfig+0x7a>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a14      	ldr	r2, [pc, #80]	; (8005510 <TIM_OC5_SetConfig+0xc0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d003      	beq.n	80054ca <TIM_OC5_SetConfig+0x7a>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a13      	ldr	r2, [pc, #76]	; (8005514 <TIM_OC5_SetConfig+0xc4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d109      	bne.n	80054de <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	021b      	lsls	r3, r3, #8
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	4313      	orrs	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	621a      	str	r2, [r3, #32]
}
 80054f8:	bf00      	nop
 80054fa:	371c      	adds	r7, #28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	40012c00 	.word	0x40012c00
 8005508:	40013400 	.word	0x40013400
 800550c:	40014000 	.word	0x40014000
 8005510:	40014400 	.word	0x40014400
 8005514:	40014800 	.word	0x40014800

08005518 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	021b      	lsls	r3, r3, #8
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4313      	orrs	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800555e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	051b      	lsls	r3, r3, #20
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	4313      	orrs	r3, r2
 800556a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a18      	ldr	r2, [pc, #96]	; (80055d0 <TIM_OC6_SetConfig+0xb8>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d00f      	beq.n	8005594 <TIM_OC6_SetConfig+0x7c>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a17      	ldr	r2, [pc, #92]	; (80055d4 <TIM_OC6_SetConfig+0xbc>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00b      	beq.n	8005594 <TIM_OC6_SetConfig+0x7c>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a16      	ldr	r2, [pc, #88]	; (80055d8 <TIM_OC6_SetConfig+0xc0>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d007      	beq.n	8005594 <TIM_OC6_SetConfig+0x7c>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a15      	ldr	r2, [pc, #84]	; (80055dc <TIM_OC6_SetConfig+0xc4>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d003      	beq.n	8005594 <TIM_OC6_SetConfig+0x7c>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a14      	ldr	r2, [pc, #80]	; (80055e0 <TIM_OC6_SetConfig+0xc8>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d109      	bne.n	80055a8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800559a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	029b      	lsls	r3, r3, #10
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	621a      	str	r2, [r3, #32]
}
 80055c2:	bf00      	nop
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	40012c00 	.word	0x40012c00
 80055d4:	40013400 	.word	0x40013400
 80055d8:	40014000 	.word	0x40014000
 80055dc:	40014400 	.word	0x40014400
 80055e0:	40014800 	.word	0x40014800

080055e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	f023 0201 	bic.w	r2, r3, #1
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800560e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f023 030a 	bic.w	r3, r3, #10
 8005620:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	621a      	str	r2, [r3, #32]
}
 8005636:	bf00      	nop
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005642:	b480      	push	{r7}
 8005644:	b087      	sub	sp, #28
 8005646:	af00      	add	r7, sp, #0
 8005648:	60f8      	str	r0, [r7, #12]
 800564a:	60b9      	str	r1, [r7, #8]
 800564c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	f023 0210 	bic.w	r2, r3, #16
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800566c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	031b      	lsls	r3, r3, #12
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	4313      	orrs	r3, r2
 8005676:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800567e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	4313      	orrs	r3, r2
 8005688:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	621a      	str	r2, [r3, #32]
}
 8005696:	bf00      	nop
 8005698:	371c      	adds	r7, #28
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b085      	sub	sp, #20
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4313      	orrs	r3, r2
 80056c0:	f043 0307 	orr.w	r3, r3, #7
 80056c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	609a      	str	r2, [r3, #8]
}
 80056cc:	bf00      	nop
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056d8:	b480      	push	{r7}
 80056da:	b087      	sub	sp, #28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	021a      	lsls	r2, r3, #8
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	431a      	orrs	r2, r3
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4313      	orrs	r3, r2
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	4313      	orrs	r3, r2
 8005704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	609a      	str	r2, [r3, #8]
}
 800570c:	bf00      	nop
 800570e:	371c      	adds	r7, #28
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f003 031f 	and.w	r3, r3, #31
 800572a:	2201      	movs	r2, #1
 800572c:	fa02 f303 	lsl.w	r3, r2, r3
 8005730:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6a1a      	ldr	r2, [r3, #32]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	43db      	mvns	r3, r3
 800573a:	401a      	ands	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6a1a      	ldr	r2, [r3, #32]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f003 031f 	and.w	r3, r3, #31
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	fa01 f303 	lsl.w	r3, r1, r3
 8005750:	431a      	orrs	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	621a      	str	r2, [r3, #32]
}
 8005756:	bf00      	nop
 8005758:	371c      	adds	r7, #28
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
	...

08005764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005778:	2302      	movs	r3, #2
 800577a:	e063      	b.n	8005844 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a2b      	ldr	r2, [pc, #172]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d004      	beq.n	80057b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a2a      	ldr	r2, [pc, #168]	; (8005854 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d108      	bne.n	80057c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a1b      	ldr	r2, [pc, #108]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d018      	beq.n	8005818 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ee:	d013      	beq.n	8005818 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a18      	ldr	r2, [pc, #96]	; (8005858 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00e      	beq.n	8005818 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a17      	ldr	r2, [pc, #92]	; (800585c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d009      	beq.n	8005818 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a12      	ldr	r2, [pc, #72]	; (8005854 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d004      	beq.n	8005818 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a13      	ldr	r2, [pc, #76]	; (8005860 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d10c      	bne.n	8005832 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800581e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	4313      	orrs	r3, r2
 8005828:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	40012c00 	.word	0x40012c00
 8005854:	40013400 	.word	0x40013400
 8005858:	40000400 	.word	0x40000400
 800585c:	40000800 	.word	0x40000800
 8005860:	40014000 	.word	0x40014000

08005864 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e040      	b.n	8005934 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d106      	bne.n	80058c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7fc f8ee 	bl	8001aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2224      	movs	r2, #36	; 0x24
 80058cc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0201 	bic.w	r2, r2, #1
 80058dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fbd4 	bl	800608c <UART_SetConfig>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d101      	bne.n	80058ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e022      	b.n	8005934 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fd9c 	bl	8006434 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800590a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800591a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0201 	orr.w	r2, r2, #1
 800592a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fe23 	bl	8006578 <UART_CheckIdleState>
 8005932:	4603      	mov	r3, r0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800593c:	b480      	push	{r7}
 800593e:	b08b      	sub	sp, #44	; 0x2c
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	4613      	mov	r3, r2
 8005948:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800594e:	2b20      	cmp	r3, #32
 8005950:	d147      	bne.n	80059e2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d002      	beq.n	800595e <HAL_UART_Transmit_IT+0x22>
 8005958:	88fb      	ldrh	r3, [r7, #6]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e040      	b.n	80059e4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	88fa      	ldrh	r2, [r7, #6]
 800596c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	88fa      	ldrh	r2, [r7, #6]
 8005974:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2221      	movs	r2, #33	; 0x21
 800598a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005994:	d107      	bne.n	80059a6 <HAL_UART_Transmit_IT+0x6a>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d103      	bne.n	80059a6 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4a13      	ldr	r2, [pc, #76]	; (80059f0 <HAL_UART_Transmit_IT+0xb4>)
 80059a2:	66da      	str	r2, [r3, #108]	; 0x6c
 80059a4:	e002      	b.n	80059ac <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4a12      	ldr	r2, [pc, #72]	; (80059f4 <HAL_UART_Transmit_IT+0xb8>)
 80059aa:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	e853 3f00 	ldrex	r3, [r3]
 80059b8:	613b      	str	r3, [r7, #16]
   return(result);
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	623b      	str	r3, [r7, #32]
 80059cc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ce:	69f9      	ldr	r1, [r7, #28]
 80059d0:	6a3a      	ldr	r2, [r7, #32]
 80059d2:	e841 2300 	strex	r3, r2, [r1]
 80059d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1e6      	bne.n	80059ac <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80059de:	2300      	movs	r3, #0
 80059e0:	e000      	b.n	80059e4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80059e2:	2302      	movs	r3, #2
  }
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	372c      	adds	r7, #44	; 0x2c
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	08006aad 	.word	0x08006aad
 80059f4:	080069f5 	.word	0x080069f5

080059f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08a      	sub	sp, #40	; 0x28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	4613      	mov	r3, r2
 8005a04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a0c:	2b20      	cmp	r3, #32
 8005a0e:	d132      	bne.n	8005a76 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d002      	beq.n	8005a1c <HAL_UART_Receive_IT+0x24>
 8005a16:	88fb      	ldrh	r3, [r7, #6]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e02b      	b.n	8005a78 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d018      	beq.n	8005a66 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	e853 3f00 	ldrex	r3, [r3]
 8005a40:	613b      	str	r3, [r7, #16]
   return(result);
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a48:	627b      	str	r3, [r7, #36]	; 0x24
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	623b      	str	r3, [r7, #32]
 8005a54:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a56:	69f9      	ldr	r1, [r7, #28]
 8005a58:	6a3a      	ldr	r2, [r7, #32]
 8005a5a:	e841 2300 	strex	r3, r2, [r1]
 8005a5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1e6      	bne.n	8005a34 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a66:	88fb      	ldrh	r3, [r7, #6]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	68b9      	ldr	r1, [r7, #8]
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 fe93 	bl	8006798 <UART_Start_Receive_IT>
 8005a72:	4603      	mov	r3, r0
 8005a74:	e000      	b.n	8005a78 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005a76:	2302      	movs	r3, #2
  }
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3728      	adds	r7, #40	; 0x28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b0ba      	sub	sp, #232	; 0xe8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005aa6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005aaa:	f640 030f 	movw	r3, #2063	; 0x80f
 8005aae:	4013      	ands	r3, r2
 8005ab0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005ab4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d115      	bne.n	8005ae8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac0:	f003 0320 	and.w	r3, r3, #32
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00f      	beq.n	8005ae8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005acc:	f003 0320 	and.w	r3, r3, #32
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d009      	beq.n	8005ae8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 82ab 	beq.w	8006034 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	4798      	blx	r3
      }
      return;
 8005ae6:	e2a5      	b.n	8006034 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ae8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 8117 	beq.w	8005d20 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d106      	bne.n	8005b0c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005afe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005b02:	4b85      	ldr	r3, [pc, #532]	; (8005d18 <HAL_UART_IRQHandler+0x298>)
 8005b04:	4013      	ands	r3, r2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 810a 	beq.w	8005d20 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d011      	beq.n	8005b3c <HAL_UART_IRQHandler+0xbc>
 8005b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00b      	beq.n	8005b3c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b32:	f043 0201 	orr.w	r2, r3, #1
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d011      	beq.n	8005b6c <HAL_UART_IRQHandler+0xec>
 8005b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00b      	beq.n	8005b6c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2202      	movs	r2, #2
 8005b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b62:	f043 0204 	orr.w	r2, r3, #4
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d011      	beq.n	8005b9c <HAL_UART_IRQHandler+0x11c>
 8005b78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00b      	beq.n	8005b9c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2204      	movs	r2, #4
 8005b8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b92:	f043 0202 	orr.w	r2, r3, #2
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba0:	f003 0308 	and.w	r3, r3, #8
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d017      	beq.n	8005bd8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bac:	f003 0320 	and.w	r3, r3, #32
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d105      	bne.n	8005bc0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bb8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00b      	beq.n	8005bd8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2208      	movs	r2, #8
 8005bc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bce:	f043 0208 	orr.w	r2, r3, #8
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d012      	beq.n	8005c0a <HAL_UART_IRQHandler+0x18a>
 8005be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005be8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00c      	beq.n	8005c0a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c00:	f043 0220 	orr.w	r2, r3, #32
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 8211 	beq.w	8006038 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00d      	beq.n	8005c3e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c26:	f003 0320 	and.w	r3, r3, #32
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d007      	beq.n	8005c3e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c52:	2b40      	cmp	r3, #64	; 0x40
 8005c54:	d005      	beq.n	8005c62 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d04f      	beq.n	8005d02 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fe4c 	bl	8006900 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c72:	2b40      	cmp	r3, #64	; 0x40
 8005c74:	d141      	bne.n	8005cfa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	3308      	adds	r3, #8
 8005c7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c84:	e853 3f00 	ldrex	r3, [r3]
 8005c88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ca2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005caa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005cae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005cb2:	e841 2300 	strex	r3, r2, [r1]
 8005cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005cba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1d9      	bne.n	8005c76 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d013      	beq.n	8005cf2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cce:	4a13      	ldr	r2, [pc, #76]	; (8005d1c <HAL_UART_IRQHandler+0x29c>)
 8005cd0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fc fb26 	bl	8002328 <HAL_DMA_Abort_IT>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d017      	beq.n	8005d12 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005cec:	4610      	mov	r0, r2
 8005cee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf0:	e00f      	b.n	8005d12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f9b4 	bl	8006060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf8:	e00b      	b.n	8005d12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f9b0 	bl	8006060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d00:	e007      	b.n	8005d12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f9ac 	bl	8006060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005d10:	e192      	b.n	8006038 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d12:	bf00      	nop
    return;
 8005d14:	e190      	b.n	8006038 <HAL_UART_IRQHandler+0x5b8>
 8005d16:	bf00      	nop
 8005d18:	04000120 	.word	0x04000120
 8005d1c:	080069c9 	.word	0x080069c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	f040 814b 	bne.w	8005fc0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d2e:	f003 0310 	and.w	r3, r3, #16
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 8144 	beq.w	8005fc0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d3c:	f003 0310 	and.w	r3, r3, #16
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 813d 	beq.w	8005fc0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2210      	movs	r2, #16
 8005d4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d58:	2b40      	cmp	r3, #64	; 0x40
 8005d5a:	f040 80b5 	bne.w	8005ec8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d6a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 8164 	beq.w	800603c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	f080 815c 	bcs.w	800603c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	2b20      	cmp	r3, #32
 8005d96:	f000 8086 	beq.w	8005ea6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005da6:	e853 3f00 	ldrex	r3, [r3]
 8005daa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005dae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005db2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005db6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005dc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005dc8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dcc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005dd0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005dd4:	e841 2300 	strex	r3, r2, [r1]
 8005dd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ddc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1da      	bne.n	8005d9a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3308      	adds	r3, #8
 8005dea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dee:	e853 3f00 	ldrex	r3, [r3]
 8005df2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005df4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005df6:	f023 0301 	bic.w	r3, r3, #1
 8005dfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3308      	adds	r3, #8
 8005e04:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e08:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e0c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e10:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e14:	e841 2300 	strex	r3, r2, [r1]
 8005e18:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1e1      	bne.n	8005de4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3308      	adds	r3, #8
 8005e26:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e2a:	e853 3f00 	ldrex	r3, [r3]
 8005e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3308      	adds	r3, #8
 8005e40:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e44:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e48:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e4a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e4c:	e841 2300 	strex	r3, r2, [r1]
 8005e50:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1e3      	bne.n	8005e20 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e6e:	e853 3f00 	ldrex	r3, [r3]
 8005e72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e76:	f023 0310 	bic.w	r3, r3, #16
 8005e7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	461a      	mov	r2, r3
 8005e84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e88:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e8a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e90:	e841 2300 	strex	r3, r2, [r1]
 8005e94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1e4      	bne.n	8005e66 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fc fa08 	bl	80022b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f8d7 	bl	8006074 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ec6:	e0b9      	b.n	800603c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 80ab 	beq.w	8006040 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005eea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 80a6 	beq.w	8006040 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efc:	e853 3f00 	ldrex	r3, [r3]
 8005f00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	461a      	mov	r2, r3
 8005f12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f16:	647b      	str	r3, [r7, #68]	; 0x44
 8005f18:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f1e:	e841 2300 	strex	r3, r2, [r1]
 8005f22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1e4      	bne.n	8005ef4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3308      	adds	r3, #8
 8005f30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	e853 3f00 	ldrex	r3, [r3]
 8005f38:	623b      	str	r3, [r7, #32]
   return(result);
 8005f3a:	6a3b      	ldr	r3, [r7, #32]
 8005f3c:	f023 0301 	bic.w	r3, r3, #1
 8005f40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3308      	adds	r3, #8
 8005f4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f4e:	633a      	str	r2, [r7, #48]	; 0x30
 8005f50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f56:	e841 2300 	strex	r3, r2, [r1]
 8005f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1e3      	bne.n	8005f2a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2220      	movs	r2, #32
 8005f66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	e853 3f00 	ldrex	r3, [r3]
 8005f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0310 	bic.w	r3, r3, #16
 8005f8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f98:	61fb      	str	r3, [r7, #28]
 8005f9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9c:	69b9      	ldr	r1, [r7, #24]
 8005f9e:	69fa      	ldr	r2, [r7, #28]
 8005fa0:	e841 2300 	strex	r3, r2, [r1]
 8005fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1e4      	bne.n	8005f76 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f85b 	bl	8006074 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005fbe:	e03f      	b.n	8006040 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00e      	beq.n	8005fea <HAL_UART_IRQHandler+0x56a>
 8005fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d008      	beq.n	8005fea <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005fe0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 ff94 	bl	8006f10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005fe8:	e02d      	b.n	8006046 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00e      	beq.n	8006014 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d008      	beq.n	8006014 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006006:	2b00      	cmp	r3, #0
 8006008:	d01c      	beq.n	8006044 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	4798      	blx	r3
    }
    return;
 8006012:	e017      	b.n	8006044 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601c:	2b00      	cmp	r3, #0
 800601e:	d012      	beq.n	8006046 <HAL_UART_IRQHandler+0x5c6>
 8006020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00c      	beq.n	8006046 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 fd9d 	bl	8006b6c <UART_EndTransmit_IT>
    return;
 8006032:	e008      	b.n	8006046 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006034:	bf00      	nop
 8006036:	e006      	b.n	8006046 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006038:	bf00      	nop
 800603a:	e004      	b.n	8006046 <HAL_UART_IRQHandler+0x5c6>
      return;
 800603c:	bf00      	nop
 800603e:	e002      	b.n	8006046 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006040:	bf00      	nop
 8006042:	e000      	b.n	8006046 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006044:	bf00      	nop
  }

}
 8006046:	37e8      	adds	r7, #232	; 0xe8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	460b      	mov	r3, r1
 800607e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b088      	sub	sp, #32
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006094:	2300      	movs	r3, #0
 8006096:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689a      	ldr	r2, [r3, #8]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	431a      	orrs	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	431a      	orrs	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80060ba:	f023 030c 	bic.w	r3, r3, #12
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	6812      	ldr	r2, [r2, #0]
 80060c2:	6979      	ldr	r1, [r7, #20]
 80060c4:	430b      	orrs	r3, r1
 80060c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68da      	ldr	r2, [r3, #12]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	430a      	orrs	r2, r1
 8006100:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4aa7      	ldr	r2, [pc, #668]	; (80063a4 <UART_SetConfig+0x318>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d120      	bne.n	800614e <UART_SetConfig+0xc2>
 800610c:	4ba6      	ldr	r3, [pc, #664]	; (80063a8 <UART_SetConfig+0x31c>)
 800610e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006110:	f003 0303 	and.w	r3, r3, #3
 8006114:	2b03      	cmp	r3, #3
 8006116:	d817      	bhi.n	8006148 <UART_SetConfig+0xbc>
 8006118:	a201      	add	r2, pc, #4	; (adr r2, 8006120 <UART_SetConfig+0x94>)
 800611a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611e:	bf00      	nop
 8006120:	08006131 	.word	0x08006131
 8006124:	0800613d 	.word	0x0800613d
 8006128:	08006143 	.word	0x08006143
 800612c:	08006137 	.word	0x08006137
 8006130:	2301      	movs	r3, #1
 8006132:	77fb      	strb	r3, [r7, #31]
 8006134:	e0b5      	b.n	80062a2 <UART_SetConfig+0x216>
 8006136:	2302      	movs	r3, #2
 8006138:	77fb      	strb	r3, [r7, #31]
 800613a:	e0b2      	b.n	80062a2 <UART_SetConfig+0x216>
 800613c:	2304      	movs	r3, #4
 800613e:	77fb      	strb	r3, [r7, #31]
 8006140:	e0af      	b.n	80062a2 <UART_SetConfig+0x216>
 8006142:	2308      	movs	r3, #8
 8006144:	77fb      	strb	r3, [r7, #31]
 8006146:	e0ac      	b.n	80062a2 <UART_SetConfig+0x216>
 8006148:	2310      	movs	r3, #16
 800614a:	77fb      	strb	r3, [r7, #31]
 800614c:	e0a9      	b.n	80062a2 <UART_SetConfig+0x216>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a96      	ldr	r2, [pc, #600]	; (80063ac <UART_SetConfig+0x320>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d124      	bne.n	80061a2 <UART_SetConfig+0x116>
 8006158:	4b93      	ldr	r3, [pc, #588]	; (80063a8 <UART_SetConfig+0x31c>)
 800615a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006160:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006164:	d011      	beq.n	800618a <UART_SetConfig+0xfe>
 8006166:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800616a:	d817      	bhi.n	800619c <UART_SetConfig+0x110>
 800616c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006170:	d011      	beq.n	8006196 <UART_SetConfig+0x10a>
 8006172:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006176:	d811      	bhi.n	800619c <UART_SetConfig+0x110>
 8006178:	2b00      	cmp	r3, #0
 800617a:	d003      	beq.n	8006184 <UART_SetConfig+0xf8>
 800617c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006180:	d006      	beq.n	8006190 <UART_SetConfig+0x104>
 8006182:	e00b      	b.n	800619c <UART_SetConfig+0x110>
 8006184:	2300      	movs	r3, #0
 8006186:	77fb      	strb	r3, [r7, #31]
 8006188:	e08b      	b.n	80062a2 <UART_SetConfig+0x216>
 800618a:	2302      	movs	r3, #2
 800618c:	77fb      	strb	r3, [r7, #31]
 800618e:	e088      	b.n	80062a2 <UART_SetConfig+0x216>
 8006190:	2304      	movs	r3, #4
 8006192:	77fb      	strb	r3, [r7, #31]
 8006194:	e085      	b.n	80062a2 <UART_SetConfig+0x216>
 8006196:	2308      	movs	r3, #8
 8006198:	77fb      	strb	r3, [r7, #31]
 800619a:	e082      	b.n	80062a2 <UART_SetConfig+0x216>
 800619c:	2310      	movs	r3, #16
 800619e:	77fb      	strb	r3, [r7, #31]
 80061a0:	e07f      	b.n	80062a2 <UART_SetConfig+0x216>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a82      	ldr	r2, [pc, #520]	; (80063b0 <UART_SetConfig+0x324>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d124      	bne.n	80061f6 <UART_SetConfig+0x16a>
 80061ac:	4b7e      	ldr	r3, [pc, #504]	; (80063a8 <UART_SetConfig+0x31c>)
 80061ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80061b4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80061b8:	d011      	beq.n	80061de <UART_SetConfig+0x152>
 80061ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80061be:	d817      	bhi.n	80061f0 <UART_SetConfig+0x164>
 80061c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061c4:	d011      	beq.n	80061ea <UART_SetConfig+0x15e>
 80061c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061ca:	d811      	bhi.n	80061f0 <UART_SetConfig+0x164>
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d003      	beq.n	80061d8 <UART_SetConfig+0x14c>
 80061d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80061d4:	d006      	beq.n	80061e4 <UART_SetConfig+0x158>
 80061d6:	e00b      	b.n	80061f0 <UART_SetConfig+0x164>
 80061d8:	2300      	movs	r3, #0
 80061da:	77fb      	strb	r3, [r7, #31]
 80061dc:	e061      	b.n	80062a2 <UART_SetConfig+0x216>
 80061de:	2302      	movs	r3, #2
 80061e0:	77fb      	strb	r3, [r7, #31]
 80061e2:	e05e      	b.n	80062a2 <UART_SetConfig+0x216>
 80061e4:	2304      	movs	r3, #4
 80061e6:	77fb      	strb	r3, [r7, #31]
 80061e8:	e05b      	b.n	80062a2 <UART_SetConfig+0x216>
 80061ea:	2308      	movs	r3, #8
 80061ec:	77fb      	strb	r3, [r7, #31]
 80061ee:	e058      	b.n	80062a2 <UART_SetConfig+0x216>
 80061f0:	2310      	movs	r3, #16
 80061f2:	77fb      	strb	r3, [r7, #31]
 80061f4:	e055      	b.n	80062a2 <UART_SetConfig+0x216>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a6e      	ldr	r2, [pc, #440]	; (80063b4 <UART_SetConfig+0x328>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d124      	bne.n	800624a <UART_SetConfig+0x1be>
 8006200:	4b69      	ldr	r3, [pc, #420]	; (80063a8 <UART_SetConfig+0x31c>)
 8006202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006204:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006208:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800620c:	d011      	beq.n	8006232 <UART_SetConfig+0x1a6>
 800620e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006212:	d817      	bhi.n	8006244 <UART_SetConfig+0x1b8>
 8006214:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006218:	d011      	beq.n	800623e <UART_SetConfig+0x1b2>
 800621a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800621e:	d811      	bhi.n	8006244 <UART_SetConfig+0x1b8>
 8006220:	2b00      	cmp	r3, #0
 8006222:	d003      	beq.n	800622c <UART_SetConfig+0x1a0>
 8006224:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006228:	d006      	beq.n	8006238 <UART_SetConfig+0x1ac>
 800622a:	e00b      	b.n	8006244 <UART_SetConfig+0x1b8>
 800622c:	2300      	movs	r3, #0
 800622e:	77fb      	strb	r3, [r7, #31]
 8006230:	e037      	b.n	80062a2 <UART_SetConfig+0x216>
 8006232:	2302      	movs	r3, #2
 8006234:	77fb      	strb	r3, [r7, #31]
 8006236:	e034      	b.n	80062a2 <UART_SetConfig+0x216>
 8006238:	2304      	movs	r3, #4
 800623a:	77fb      	strb	r3, [r7, #31]
 800623c:	e031      	b.n	80062a2 <UART_SetConfig+0x216>
 800623e:	2308      	movs	r3, #8
 8006240:	77fb      	strb	r3, [r7, #31]
 8006242:	e02e      	b.n	80062a2 <UART_SetConfig+0x216>
 8006244:	2310      	movs	r3, #16
 8006246:	77fb      	strb	r3, [r7, #31]
 8006248:	e02b      	b.n	80062a2 <UART_SetConfig+0x216>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a5a      	ldr	r2, [pc, #360]	; (80063b8 <UART_SetConfig+0x32c>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d124      	bne.n	800629e <UART_SetConfig+0x212>
 8006254:	4b54      	ldr	r3, [pc, #336]	; (80063a8 <UART_SetConfig+0x31c>)
 8006256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006258:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800625c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006260:	d011      	beq.n	8006286 <UART_SetConfig+0x1fa>
 8006262:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006266:	d817      	bhi.n	8006298 <UART_SetConfig+0x20c>
 8006268:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800626c:	d011      	beq.n	8006292 <UART_SetConfig+0x206>
 800626e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006272:	d811      	bhi.n	8006298 <UART_SetConfig+0x20c>
 8006274:	2b00      	cmp	r3, #0
 8006276:	d003      	beq.n	8006280 <UART_SetConfig+0x1f4>
 8006278:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800627c:	d006      	beq.n	800628c <UART_SetConfig+0x200>
 800627e:	e00b      	b.n	8006298 <UART_SetConfig+0x20c>
 8006280:	2300      	movs	r3, #0
 8006282:	77fb      	strb	r3, [r7, #31]
 8006284:	e00d      	b.n	80062a2 <UART_SetConfig+0x216>
 8006286:	2302      	movs	r3, #2
 8006288:	77fb      	strb	r3, [r7, #31]
 800628a:	e00a      	b.n	80062a2 <UART_SetConfig+0x216>
 800628c:	2304      	movs	r3, #4
 800628e:	77fb      	strb	r3, [r7, #31]
 8006290:	e007      	b.n	80062a2 <UART_SetConfig+0x216>
 8006292:	2308      	movs	r3, #8
 8006294:	77fb      	strb	r3, [r7, #31]
 8006296:	e004      	b.n	80062a2 <UART_SetConfig+0x216>
 8006298:	2310      	movs	r3, #16
 800629a:	77fb      	strb	r3, [r7, #31]
 800629c:	e001      	b.n	80062a2 <UART_SetConfig+0x216>
 800629e:	2310      	movs	r3, #16
 80062a0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062aa:	d15b      	bne.n	8006364 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80062ac:	7ffb      	ldrb	r3, [r7, #31]
 80062ae:	2b08      	cmp	r3, #8
 80062b0:	d827      	bhi.n	8006302 <UART_SetConfig+0x276>
 80062b2:	a201      	add	r2, pc, #4	; (adr r2, 80062b8 <UART_SetConfig+0x22c>)
 80062b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b8:	080062dd 	.word	0x080062dd
 80062bc:	080062e5 	.word	0x080062e5
 80062c0:	080062ed 	.word	0x080062ed
 80062c4:	08006303 	.word	0x08006303
 80062c8:	080062f3 	.word	0x080062f3
 80062cc:	08006303 	.word	0x08006303
 80062d0:	08006303 	.word	0x08006303
 80062d4:	08006303 	.word	0x08006303
 80062d8:	080062fb 	.word	0x080062fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062dc:	f7fd fe34 	bl	8003f48 <HAL_RCC_GetPCLK1Freq>
 80062e0:	61b8      	str	r0, [r7, #24]
        break;
 80062e2:	e013      	b.n	800630c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062e4:	f7fd fe52 	bl	8003f8c <HAL_RCC_GetPCLK2Freq>
 80062e8:	61b8      	str	r0, [r7, #24]
        break;
 80062ea:	e00f      	b.n	800630c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062ec:	4b33      	ldr	r3, [pc, #204]	; (80063bc <UART_SetConfig+0x330>)
 80062ee:	61bb      	str	r3, [r7, #24]
        break;
 80062f0:	e00c      	b.n	800630c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062f2:	f7fd fdb3 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 80062f6:	61b8      	str	r0, [r7, #24]
        break;
 80062f8:	e008      	b.n	800630c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062fe:	61bb      	str	r3, [r7, #24]
        break;
 8006300:	e004      	b.n	800630c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	77bb      	strb	r3, [r7, #30]
        break;
 800630a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	2b00      	cmp	r3, #0
 8006310:	f000 8082 	beq.w	8006418 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	005a      	lsls	r2, r3, #1
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	085b      	lsrs	r3, r3, #1
 800631e:	441a      	add	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	fbb2 f3f3 	udiv	r3, r2, r3
 8006328:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	2b0f      	cmp	r3, #15
 800632e:	d916      	bls.n	800635e <UART_SetConfig+0x2d2>
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006336:	d212      	bcs.n	800635e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	b29b      	uxth	r3, r3
 800633c:	f023 030f 	bic.w	r3, r3, #15
 8006340:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	085b      	lsrs	r3, r3, #1
 8006346:	b29b      	uxth	r3, r3
 8006348:	f003 0307 	and.w	r3, r3, #7
 800634c:	b29a      	uxth	r2, r3
 800634e:	89fb      	ldrh	r3, [r7, #14]
 8006350:	4313      	orrs	r3, r2
 8006352:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	89fa      	ldrh	r2, [r7, #14]
 800635a:	60da      	str	r2, [r3, #12]
 800635c:	e05c      	b.n	8006418 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	77bb      	strb	r3, [r7, #30]
 8006362:	e059      	b.n	8006418 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006364:	7ffb      	ldrb	r3, [r7, #31]
 8006366:	2b08      	cmp	r3, #8
 8006368:	d835      	bhi.n	80063d6 <UART_SetConfig+0x34a>
 800636a:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <UART_SetConfig+0x2e4>)
 800636c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006370:	08006395 	.word	0x08006395
 8006374:	0800639d 	.word	0x0800639d
 8006378:	080063c1 	.word	0x080063c1
 800637c:	080063d7 	.word	0x080063d7
 8006380:	080063c7 	.word	0x080063c7
 8006384:	080063d7 	.word	0x080063d7
 8006388:	080063d7 	.word	0x080063d7
 800638c:	080063d7 	.word	0x080063d7
 8006390:	080063cf 	.word	0x080063cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006394:	f7fd fdd8 	bl	8003f48 <HAL_RCC_GetPCLK1Freq>
 8006398:	61b8      	str	r0, [r7, #24]
        break;
 800639a:	e021      	b.n	80063e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800639c:	f7fd fdf6 	bl	8003f8c <HAL_RCC_GetPCLK2Freq>
 80063a0:	61b8      	str	r0, [r7, #24]
        break;
 80063a2:	e01d      	b.n	80063e0 <UART_SetConfig+0x354>
 80063a4:	40013800 	.word	0x40013800
 80063a8:	40021000 	.word	0x40021000
 80063ac:	40004400 	.word	0x40004400
 80063b0:	40004800 	.word	0x40004800
 80063b4:	40004c00 	.word	0x40004c00
 80063b8:	40005000 	.word	0x40005000
 80063bc:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063c0:	4b1b      	ldr	r3, [pc, #108]	; (8006430 <UART_SetConfig+0x3a4>)
 80063c2:	61bb      	str	r3, [r7, #24]
        break;
 80063c4:	e00c      	b.n	80063e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063c6:	f7fd fd49 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 80063ca:	61b8      	str	r0, [r7, #24]
        break;
 80063cc:	e008      	b.n	80063e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063d2:	61bb      	str	r3, [r7, #24]
        break;
 80063d4:	e004      	b.n	80063e0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	77bb      	strb	r3, [r7, #30]
        break;
 80063de:	bf00      	nop
    }

    if (pclk != 0U)
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d018      	beq.n	8006418 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	085a      	lsrs	r2, r3, #1
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	441a      	add	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	2b0f      	cmp	r3, #15
 80063fe:	d909      	bls.n	8006414 <UART_SetConfig+0x388>
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006406:	d205      	bcs.n	8006414 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	b29a      	uxth	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	60da      	str	r2, [r3, #12]
 8006412:	e001      	b.n	8006418 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006424:	7fbb      	ldrb	r3, [r7, #30]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3720      	adds	r7, #32
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	007a1200 	.word	0x007a1200

08006434 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00a      	beq.n	800645e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	430a      	orrs	r2, r1
 800645c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00a      	beq.n	8006480 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	430a      	orrs	r2, r1
 800647e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00a      	beq.n	80064a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	f003 0308 	and.w	r3, r3, #8
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c8:	f003 0310 	and.w	r3, r3, #16
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00a      	beq.n	80064e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	430a      	orrs	r2, r1
 80064e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ea:	f003 0320 	and.w	r3, r3, #32
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00a      	beq.n	8006508 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	430a      	orrs	r2, r1
 8006506:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006510:	2b00      	cmp	r3, #0
 8006512:	d01a      	beq.n	800654a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006532:	d10a      	bne.n	800654a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	430a      	orrs	r2, r1
 8006548:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00a      	beq.n	800656c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	430a      	orrs	r2, r1
 800656a:	605a      	str	r2, [r3, #4]
  }
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b098      	sub	sp, #96	; 0x60
 800657c:	af02      	add	r7, sp, #8
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006588:	f7fb fd78 	bl	800207c <HAL_GetTick>
 800658c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b08      	cmp	r3, #8
 800659a:	d12e      	bne.n	80065fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800659c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065a4:	2200      	movs	r2, #0
 80065a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f88c 	bl	80066c8 <UART_WaitOnFlagUntilTimeout>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d021      	beq.n	80065fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065be:	e853 3f00 	ldrex	r3, [r3]
 80065c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065ca:	653b      	str	r3, [r7, #80]	; 0x50
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	461a      	mov	r2, r3
 80065d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d4:	647b      	str	r3, [r7, #68]	; 0x44
 80065d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065dc:	e841 2300 	strex	r3, r2, [r1]
 80065e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1e6      	bne.n	80065b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2220      	movs	r2, #32
 80065ec:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e062      	b.n	80066c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	2b04      	cmp	r3, #4
 8006606:	d149      	bne.n	800669c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006608:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006610:	2200      	movs	r2, #0
 8006612:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f856 	bl	80066c8 <UART_WaitOnFlagUntilTimeout>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d03c      	beq.n	800669c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	e853 3f00 	ldrex	r3, [r3]
 800662e:	623b      	str	r3, [r7, #32]
   return(result);
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	461a      	mov	r2, r3
 800663e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006640:	633b      	str	r3, [r7, #48]	; 0x30
 8006642:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006644:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006648:	e841 2300 	strex	r3, r2, [r1]
 800664c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800664e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1e6      	bne.n	8006622 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3308      	adds	r3, #8
 800665a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	e853 3f00 	ldrex	r3, [r3]
 8006662:	60fb      	str	r3, [r7, #12]
   return(result);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 0301 	bic.w	r3, r3, #1
 800666a:	64bb      	str	r3, [r7, #72]	; 0x48
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3308      	adds	r3, #8
 8006672:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006674:	61fa      	str	r2, [r7, #28]
 8006676:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006678:	69b9      	ldr	r1, [r7, #24]
 800667a:	69fa      	ldr	r2, [r7, #28]
 800667c:	e841 2300 	strex	r3, r2, [r1]
 8006680:	617b      	str	r3, [r7, #20]
   return(result);
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1e5      	bne.n	8006654 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2220      	movs	r2, #32
 800668c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e011      	b.n	80066c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2220      	movs	r2, #32
 80066a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2220      	movs	r2, #32
 80066a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3758      	adds	r7, #88	; 0x58
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	603b      	str	r3, [r7, #0]
 80066d4:	4613      	mov	r3, r2
 80066d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066d8:	e049      	b.n	800676e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e0:	d045      	beq.n	800676e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066e2:	f7fb fccb 	bl	800207c <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d302      	bcc.n	80066f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e048      	b.n	800678e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0304 	and.w	r3, r3, #4
 8006706:	2b00      	cmp	r3, #0
 8006708:	d031      	beq.n	800676e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	69db      	ldr	r3, [r3, #28]
 8006710:	f003 0308 	and.w	r3, r3, #8
 8006714:	2b08      	cmp	r3, #8
 8006716:	d110      	bne.n	800673a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2208      	movs	r2, #8
 800671e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 f8ed 	bl	8006900 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2208      	movs	r2, #8
 800672a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e029      	b.n	800678e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006744:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006748:	d111      	bne.n	800676e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006752:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 f8d3 	bl	8006900 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2220      	movs	r2, #32
 800675e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e00f      	b.n	800678e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	69da      	ldr	r2, [r3, #28]
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	4013      	ands	r3, r2
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	429a      	cmp	r2, r3
 800677c:	bf0c      	ite	eq
 800677e:	2301      	moveq	r3, #1
 8006780:	2300      	movne	r3, #0
 8006782:	b2db      	uxtb	r3, r3
 8006784:	461a      	mov	r2, r3
 8006786:	79fb      	ldrb	r3, [r7, #7]
 8006788:	429a      	cmp	r2, r3
 800678a:	d0a6      	beq.n	80066da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
	...

08006798 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006798:	b480      	push	{r7}
 800679a:	b097      	sub	sp, #92	; 0x5c
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	4613      	mov	r3, r2
 80067a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	88fa      	ldrh	r2, [r7, #6]
 80067b0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	88fa      	ldrh	r2, [r7, #6]
 80067b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ca:	d10e      	bne.n	80067ea <UART_Start_Receive_IT+0x52>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d105      	bne.n	80067e0 <UART_Start_Receive_IT+0x48>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80067da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067de:	e01a      	b.n	8006816 <UART_Start_Receive_IT+0x7e>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	22ff      	movs	r2, #255	; 0xff
 80067e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067e8:	e015      	b.n	8006816 <UART_Start_Receive_IT+0x7e>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10d      	bne.n	800680e <UART_Start_Receive_IT+0x76>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d104      	bne.n	8006804 <UART_Start_Receive_IT+0x6c>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	22ff      	movs	r2, #255	; 0xff
 80067fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006802:	e008      	b.n	8006816 <UART_Start_Receive_IT+0x7e>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	227f      	movs	r2, #127	; 0x7f
 8006808:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800680c:	e003      	b.n	8006816 <UART_Start_Receive_IT+0x7e>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2222      	movs	r2, #34	; 0x22
 8006822:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	3308      	adds	r3, #8
 800682c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006830:	e853 3f00 	ldrex	r3, [r3]
 8006834:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006838:	f043 0301 	orr.w	r3, r3, #1
 800683c:	657b      	str	r3, [r7, #84]	; 0x54
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3308      	adds	r3, #8
 8006844:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006846:	64ba      	str	r2, [r7, #72]	; 0x48
 8006848:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800684c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800684e:	e841 2300 	strex	r3, r2, [r1]
 8006852:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1e5      	bne.n	8006826 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006862:	d107      	bne.n	8006874 <UART_Start_Receive_IT+0xdc>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d103      	bne.n	8006874 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	4a22      	ldr	r2, [pc, #136]	; (80068f8 <UART_Start_Receive_IT+0x160>)
 8006870:	669a      	str	r2, [r3, #104]	; 0x68
 8006872:	e002      	b.n	800687a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	4a21      	ldr	r2, [pc, #132]	; (80068fc <UART_Start_Receive_IT+0x164>)
 8006878:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d019      	beq.n	80068b6 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688a:	e853 3f00 	ldrex	r3, [r3]
 800688e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	461a      	mov	r2, r3
 800689e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a0:	637b      	str	r3, [r7, #52]	; 0x34
 80068a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068a8:	e841 2300 	strex	r3, r2, [r1]
 80068ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1e6      	bne.n	8006882 <UART_Start_Receive_IT+0xea>
 80068b4:	e018      	b.n	80068e8 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	e853 3f00 	ldrex	r3, [r3]
 80068c2:	613b      	str	r3, [r7, #16]
   return(result);
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	f043 0320 	orr.w	r3, r3, #32
 80068ca:	653b      	str	r3, [r7, #80]	; 0x50
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	461a      	mov	r2, r3
 80068d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068d4:	623b      	str	r3, [r7, #32]
 80068d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d8:	69f9      	ldr	r1, [r7, #28]
 80068da:	6a3a      	ldr	r2, [r7, #32]
 80068dc:	e841 2300 	strex	r3, r2, [r1]
 80068e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1e6      	bne.n	80068b6 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	375c      	adds	r7, #92	; 0x5c
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	08006d69 	.word	0x08006d69
 80068fc:	08006bc1 	.word	0x08006bc1

08006900 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006900:	b480      	push	{r7}
 8006902:	b095      	sub	sp, #84	; 0x54
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006910:	e853 3f00 	ldrex	r3, [r3]
 8006914:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006918:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800691c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006926:	643b      	str	r3, [r7, #64]	; 0x40
 8006928:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800692c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800692e:	e841 2300 	strex	r3, r2, [r1]
 8006932:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1e6      	bne.n	8006908 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3308      	adds	r3, #8
 8006940:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	e853 3f00 	ldrex	r3, [r3]
 8006948:	61fb      	str	r3, [r7, #28]
   return(result);
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	f023 0301 	bic.w	r3, r3, #1
 8006950:	64bb      	str	r3, [r7, #72]	; 0x48
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	3308      	adds	r3, #8
 8006958:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800695a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800695c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006962:	e841 2300 	strex	r3, r2, [r1]
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1e5      	bne.n	800693a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006972:	2b01      	cmp	r3, #1
 8006974:	d118      	bne.n	80069a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	e853 3f00 	ldrex	r3, [r3]
 8006982:	60bb      	str	r3, [r7, #8]
   return(result);
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f023 0310 	bic.w	r3, r3, #16
 800698a:	647b      	str	r3, [r7, #68]	; 0x44
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	461a      	mov	r2, r3
 8006992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006994:	61bb      	str	r3, [r7, #24]
 8006996:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006998:	6979      	ldr	r1, [r7, #20]
 800699a:	69ba      	ldr	r2, [r7, #24]
 800699c:	e841 2300 	strex	r3, r2, [r1]
 80069a0:	613b      	str	r3, [r7, #16]
   return(result);
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1e6      	bne.n	8006976 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2220      	movs	r2, #32
 80069ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	669a      	str	r2, [r3, #104]	; 0x68
}
 80069bc:	bf00      	nop
 80069be:	3754      	adds	r7, #84	; 0x54
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f7ff fb3a 	bl	8006060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069ec:	bf00      	nop
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b08f      	sub	sp, #60	; 0x3c
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a00:	2b21      	cmp	r3, #33	; 0x21
 8006a02:	d14d      	bne.n	8006aa0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d132      	bne.n	8006a76 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a24:	637b      	str	r3, [r7, #52]	; 0x34
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a30:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e6      	bne.n	8006a10 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	e853 3f00 	ldrex	r3, [r3]
 8006a4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a56:	633b      	str	r3, [r7, #48]	; 0x30
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	61bb      	str	r3, [r7, #24]
 8006a62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a64:	6979      	ldr	r1, [r7, #20]
 8006a66:	69ba      	ldr	r2, [r7, #24]
 8006a68:	e841 2300 	strex	r3, r2, [r1]
 8006a6c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1e6      	bne.n	8006a42 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006a74:	e014      	b.n	8006aa0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a7a:	781a      	ldrb	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	b292      	uxth	r2, r2
 8006a82:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	3b01      	subs	r3, #1
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006aa0:	bf00      	nop
 8006aa2:	373c      	adds	r7, #60	; 0x3c
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b091      	sub	sp, #68	; 0x44
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ab8:	2b21      	cmp	r3, #33	; 0x21
 8006aba:	d151      	bne.n	8006b60 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d132      	bne.n	8006b2e <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad0:	e853 3f00 	ldrex	r3, [r3]
 8006ad4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ad6:	6a3b      	ldr	r3, [r7, #32]
 8006ad8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006adc:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae6:	633b      	str	r3, [r7, #48]	; 0x30
 8006ae8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aee:	e841 2300 	strex	r3, r2, [r1]
 8006af2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1e6      	bne.n	8006ac8 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	e853 3f00 	ldrex	r3, [r3]
 8006b06:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	461a      	mov	r2, r3
 8006b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b18:	61fb      	str	r3, [r7, #28]
 8006b1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	69b9      	ldr	r1, [r7, #24]
 8006b1e:	69fa      	ldr	r2, [r7, #28]
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	617b      	str	r3, [r7, #20]
   return(result);
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e6      	bne.n	8006afa <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006b2c:	e018      	b.n	8006b60 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b32:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b36:	881a      	ldrh	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b40:	b292      	uxth	r2, r2
 8006b42:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b48:	1c9a      	adds	r2, r3, #2
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	3b01      	subs	r3, #1
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006b60:	bf00      	nop
 8006b62:	3744      	adds	r7, #68	; 0x44
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b088      	sub	sp, #32
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b88:	61fb      	str	r3, [r7, #28]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	61bb      	str	r3, [r7, #24]
 8006b94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b96:	6979      	ldr	r1, [r7, #20]
 8006b98:	69ba      	ldr	r2, [r7, #24]
 8006b9a:	e841 2300 	strex	r3, r2, [r1]
 8006b9e:	613b      	str	r3, [r7, #16]
   return(result);
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1e6      	bne.n	8006b74 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7ff fa4a 	bl	800604c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bb8:	bf00      	nop
 8006bba:	3720      	adds	r7, #32
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b09c      	sub	sp, #112	; 0x70
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006bce:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bd8:	2b22      	cmp	r3, #34	; 0x22
 8006bda:	f040 80b9 	bne.w	8006d50 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006be4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006be8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006bec:	b2d9      	uxtb	r1, r3
 8006bee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf8:	400a      	ands	r2, r1
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f040 809c 	bne.w	8006d60 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c30:	e853 3f00 	ldrex	r3, [r3]
 8006c34:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	461a      	mov	r2, r3
 8006c44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c46:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c48:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c4e:	e841 2300 	strex	r3, r2, [r1]
 8006c52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1e6      	bne.n	8006c28 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	3308      	adds	r3, #8
 8006c60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c64:	e853 3f00 	ldrex	r3, [r3]
 8006c68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c6c:	f023 0301 	bic.w	r3, r3, #1
 8006c70:	667b      	str	r3, [r7, #100]	; 0x64
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	3308      	adds	r3, #8
 8006c78:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006c7a:	647a      	str	r2, [r7, #68]	; 0x44
 8006c7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c82:	e841 2300 	strex	r3, r2, [r1]
 8006c86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1e5      	bne.n	8006c5a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d018      	beq.n	8006ce2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	e853 3f00 	ldrex	r3, [r3]
 8006cbc:	623b      	str	r3, [r7, #32]
   return(result);
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cc4:	663b      	str	r3, [r7, #96]	; 0x60
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cce:	633b      	str	r3, [r7, #48]	; 0x30
 8006cd0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cd6:	e841 2300 	strex	r3, r2, [r1]
 8006cda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1e6      	bne.n	8006cb0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d12e      	bne.n	8006d48 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	e853 3f00 	ldrex	r3, [r3]
 8006cfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f023 0310 	bic.w	r3, r3, #16
 8006d04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d0e:	61fb      	str	r3, [r7, #28]
 8006d10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d12:	69b9      	ldr	r1, [r7, #24]
 8006d14:	69fa      	ldr	r2, [r7, #28]
 8006d16:	e841 2300 	strex	r3, r2, [r1]
 8006d1a:	617b      	str	r3, [r7, #20]
   return(result);
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1e6      	bne.n	8006cf0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	f003 0310 	and.w	r3, r3, #16
 8006d2c:	2b10      	cmp	r3, #16
 8006d2e:	d103      	bne.n	8006d38 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2210      	movs	r2, #16
 8006d36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d3e:	4619      	mov	r1, r3
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f7ff f997 	bl	8006074 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d46:	e00b      	b.n	8006d60 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7f9 fdef 	bl	800092c <HAL_UART_RxCpltCallback>
}
 8006d4e:	e007      	b.n	8006d60 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	699a      	ldr	r2, [r3, #24]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f042 0208 	orr.w	r2, r2, #8
 8006d5e:	619a      	str	r2, [r3, #24]
}
 8006d60:	bf00      	nop
 8006d62:	3770      	adds	r7, #112	; 0x70
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b09c      	sub	sp, #112	; 0x70
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d76:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d80:	2b22      	cmp	r3, #34	; 0x22
 8006d82:	f040 80b9 	bne.w	8006ef8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006d8c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d94:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006d96:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006d9a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006d9e:	4013      	ands	r3, r2
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006da4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006daa:	1c9a      	adds	r2, r3, #2
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f040 809c 	bne.w	8006f08 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dd8:	e853 3f00 	ldrex	r3, [r3]
 8006ddc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006de0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006de4:	667b      	str	r3, [r7, #100]	; 0x64
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	461a      	mov	r2, r3
 8006dec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dee:	657b      	str	r3, [r7, #84]	; 0x54
 8006df0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006df4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006df6:	e841 2300 	strex	r3, r2, [r1]
 8006dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1e6      	bne.n	8006dd0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	3308      	adds	r3, #8
 8006e08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e0c:	e853 3f00 	ldrex	r3, [r3]
 8006e10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e14:	f023 0301 	bic.w	r3, r3, #1
 8006e18:	663b      	str	r3, [r7, #96]	; 0x60
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3308      	adds	r3, #8
 8006e20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e22:	643a      	str	r2, [r7, #64]	; 0x40
 8006e24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e2a:	e841 2300 	strex	r3, r2, [r1]
 8006e2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1e5      	bne.n	8006e02 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2220      	movs	r2, #32
 8006e3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d018      	beq.n	8006e8a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5e:	6a3b      	ldr	r3, [r7, #32]
 8006e60:	e853 3f00 	ldrex	r3, [r3]
 8006e64:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	461a      	mov	r2, r3
 8006e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e78:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e7e:	e841 2300 	strex	r3, r2, [r1]
 8006e82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1e6      	bne.n	8006e58 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d12e      	bne.n	8006ef0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	f023 0310 	bic.w	r3, r3, #16
 8006eac:	65bb      	str	r3, [r7, #88]	; 0x58
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006eb6:	61bb      	str	r3, [r7, #24]
 8006eb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	6979      	ldr	r1, [r7, #20]
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e6      	bne.n	8006e98 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	f003 0310 	and.w	r3, r3, #16
 8006ed4:	2b10      	cmp	r3, #16
 8006ed6:	d103      	bne.n	8006ee0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2210      	movs	r2, #16
 8006ede:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7ff f8c3 	bl	8006074 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006eee:	e00b      	b.n	8006f08 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f7f9 fd1b 	bl	800092c <HAL_UART_RxCpltCallback>
}
 8006ef6:	e007      	b.n	8006f08 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	699a      	ldr	r2, [r3, #24]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f042 0208 	orr.w	r2, r2, #8
 8006f06:	619a      	str	r2, [r3, #24]
}
 8006f08:	bf00      	nop
 8006f0a:	3770      	adds	r7, #112	; 0x70
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006f2c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006f30:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	43db      	mvns	r3, r3
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	4013      	ands	r3, r2
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	f107 0014 	add.w	r0, r7, #20
 8006f68:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	370c      	adds	r7, #12
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	b004      	add	sp, #16
 8006f9a:	4770      	bx	lr

08006f9c <__errno>:
 8006f9c:	4b01      	ldr	r3, [pc, #4]	; (8006fa4 <__errno+0x8>)
 8006f9e:	6818      	ldr	r0, [r3, #0]
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	2000009c 	.word	0x2000009c

08006fa8 <__libc_init_array>:
 8006fa8:	b570      	push	{r4, r5, r6, lr}
 8006faa:	4d0d      	ldr	r5, [pc, #52]	; (8006fe0 <__libc_init_array+0x38>)
 8006fac:	4c0d      	ldr	r4, [pc, #52]	; (8006fe4 <__libc_init_array+0x3c>)
 8006fae:	1b64      	subs	r4, r4, r5
 8006fb0:	10a4      	asrs	r4, r4, #2
 8006fb2:	2600      	movs	r6, #0
 8006fb4:	42a6      	cmp	r6, r4
 8006fb6:	d109      	bne.n	8006fcc <__libc_init_array+0x24>
 8006fb8:	4d0b      	ldr	r5, [pc, #44]	; (8006fe8 <__libc_init_array+0x40>)
 8006fba:	4c0c      	ldr	r4, [pc, #48]	; (8006fec <__libc_init_array+0x44>)
 8006fbc:	f000 f906 	bl	80071cc <_init>
 8006fc0:	1b64      	subs	r4, r4, r5
 8006fc2:	10a4      	asrs	r4, r4, #2
 8006fc4:	2600      	movs	r6, #0
 8006fc6:	42a6      	cmp	r6, r4
 8006fc8:	d105      	bne.n	8006fd6 <__libc_init_array+0x2e>
 8006fca:	bd70      	pop	{r4, r5, r6, pc}
 8006fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fd0:	4798      	blx	r3
 8006fd2:	3601      	adds	r6, #1
 8006fd4:	e7ee      	b.n	8006fb4 <__libc_init_array+0xc>
 8006fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fda:	4798      	blx	r3
 8006fdc:	3601      	adds	r6, #1
 8006fde:	e7f2      	b.n	8006fc6 <__libc_init_array+0x1e>
 8006fe0:	08008448 	.word	0x08008448
 8006fe4:	08008448 	.word	0x08008448
 8006fe8:	08008448 	.word	0x08008448
 8006fec:	0800844c 	.word	0x0800844c

08006ff0 <malloc>:
 8006ff0:	4b02      	ldr	r3, [pc, #8]	; (8006ffc <malloc+0xc>)
 8006ff2:	4601      	mov	r1, r0
 8006ff4:	6818      	ldr	r0, [r3, #0]
 8006ff6:	f000 b839 	b.w	800706c <_malloc_r>
 8006ffa:	bf00      	nop
 8006ffc:	2000009c 	.word	0x2000009c

08007000 <memcpy>:
 8007000:	440a      	add	r2, r1
 8007002:	4291      	cmp	r1, r2
 8007004:	f100 33ff 	add.w	r3, r0, #4294967295
 8007008:	d100      	bne.n	800700c <memcpy+0xc>
 800700a:	4770      	bx	lr
 800700c:	b510      	push	{r4, lr}
 800700e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007012:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007016:	4291      	cmp	r1, r2
 8007018:	d1f9      	bne.n	800700e <memcpy+0xe>
 800701a:	bd10      	pop	{r4, pc}

0800701c <memset>:
 800701c:	4402      	add	r2, r0
 800701e:	4603      	mov	r3, r0
 8007020:	4293      	cmp	r3, r2
 8007022:	d100      	bne.n	8007026 <memset+0xa>
 8007024:	4770      	bx	lr
 8007026:	f803 1b01 	strb.w	r1, [r3], #1
 800702a:	e7f9      	b.n	8007020 <memset+0x4>

0800702c <sbrk_aligned>:
 800702c:	b570      	push	{r4, r5, r6, lr}
 800702e:	4e0e      	ldr	r6, [pc, #56]	; (8007068 <sbrk_aligned+0x3c>)
 8007030:	460c      	mov	r4, r1
 8007032:	6831      	ldr	r1, [r6, #0]
 8007034:	4605      	mov	r5, r0
 8007036:	b911      	cbnz	r1, 800703e <sbrk_aligned+0x12>
 8007038:	f000 f88c 	bl	8007154 <_sbrk_r>
 800703c:	6030      	str	r0, [r6, #0]
 800703e:	4621      	mov	r1, r4
 8007040:	4628      	mov	r0, r5
 8007042:	f000 f887 	bl	8007154 <_sbrk_r>
 8007046:	1c43      	adds	r3, r0, #1
 8007048:	d00a      	beq.n	8007060 <sbrk_aligned+0x34>
 800704a:	1cc4      	adds	r4, r0, #3
 800704c:	f024 0403 	bic.w	r4, r4, #3
 8007050:	42a0      	cmp	r0, r4
 8007052:	d007      	beq.n	8007064 <sbrk_aligned+0x38>
 8007054:	1a21      	subs	r1, r4, r0
 8007056:	4628      	mov	r0, r5
 8007058:	f000 f87c 	bl	8007154 <_sbrk_r>
 800705c:	3001      	adds	r0, #1
 800705e:	d101      	bne.n	8007064 <sbrk_aligned+0x38>
 8007060:	f04f 34ff 	mov.w	r4, #4294967295
 8007064:	4620      	mov	r0, r4
 8007066:	bd70      	pop	{r4, r5, r6, pc}
 8007068:	20000700 	.word	0x20000700

0800706c <_malloc_r>:
 800706c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007070:	1ccd      	adds	r5, r1, #3
 8007072:	f025 0503 	bic.w	r5, r5, #3
 8007076:	3508      	adds	r5, #8
 8007078:	2d0c      	cmp	r5, #12
 800707a:	bf38      	it	cc
 800707c:	250c      	movcc	r5, #12
 800707e:	2d00      	cmp	r5, #0
 8007080:	4607      	mov	r7, r0
 8007082:	db01      	blt.n	8007088 <_malloc_r+0x1c>
 8007084:	42a9      	cmp	r1, r5
 8007086:	d905      	bls.n	8007094 <_malloc_r+0x28>
 8007088:	230c      	movs	r3, #12
 800708a:	603b      	str	r3, [r7, #0]
 800708c:	2600      	movs	r6, #0
 800708e:	4630      	mov	r0, r6
 8007090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007094:	4e2e      	ldr	r6, [pc, #184]	; (8007150 <_malloc_r+0xe4>)
 8007096:	f000 f88b 	bl	80071b0 <__malloc_lock>
 800709a:	6833      	ldr	r3, [r6, #0]
 800709c:	461c      	mov	r4, r3
 800709e:	bb34      	cbnz	r4, 80070ee <_malloc_r+0x82>
 80070a0:	4629      	mov	r1, r5
 80070a2:	4638      	mov	r0, r7
 80070a4:	f7ff ffc2 	bl	800702c <sbrk_aligned>
 80070a8:	1c43      	adds	r3, r0, #1
 80070aa:	4604      	mov	r4, r0
 80070ac:	d14d      	bne.n	800714a <_malloc_r+0xde>
 80070ae:	6834      	ldr	r4, [r6, #0]
 80070b0:	4626      	mov	r6, r4
 80070b2:	2e00      	cmp	r6, #0
 80070b4:	d140      	bne.n	8007138 <_malloc_r+0xcc>
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	4631      	mov	r1, r6
 80070ba:	4638      	mov	r0, r7
 80070bc:	eb04 0803 	add.w	r8, r4, r3
 80070c0:	f000 f848 	bl	8007154 <_sbrk_r>
 80070c4:	4580      	cmp	r8, r0
 80070c6:	d13a      	bne.n	800713e <_malloc_r+0xd2>
 80070c8:	6821      	ldr	r1, [r4, #0]
 80070ca:	3503      	adds	r5, #3
 80070cc:	1a6d      	subs	r5, r5, r1
 80070ce:	f025 0503 	bic.w	r5, r5, #3
 80070d2:	3508      	adds	r5, #8
 80070d4:	2d0c      	cmp	r5, #12
 80070d6:	bf38      	it	cc
 80070d8:	250c      	movcc	r5, #12
 80070da:	4629      	mov	r1, r5
 80070dc:	4638      	mov	r0, r7
 80070de:	f7ff ffa5 	bl	800702c <sbrk_aligned>
 80070e2:	3001      	adds	r0, #1
 80070e4:	d02b      	beq.n	800713e <_malloc_r+0xd2>
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	442b      	add	r3, r5
 80070ea:	6023      	str	r3, [r4, #0]
 80070ec:	e00e      	b.n	800710c <_malloc_r+0xa0>
 80070ee:	6822      	ldr	r2, [r4, #0]
 80070f0:	1b52      	subs	r2, r2, r5
 80070f2:	d41e      	bmi.n	8007132 <_malloc_r+0xc6>
 80070f4:	2a0b      	cmp	r2, #11
 80070f6:	d916      	bls.n	8007126 <_malloc_r+0xba>
 80070f8:	1961      	adds	r1, r4, r5
 80070fa:	42a3      	cmp	r3, r4
 80070fc:	6025      	str	r5, [r4, #0]
 80070fe:	bf18      	it	ne
 8007100:	6059      	strne	r1, [r3, #4]
 8007102:	6863      	ldr	r3, [r4, #4]
 8007104:	bf08      	it	eq
 8007106:	6031      	streq	r1, [r6, #0]
 8007108:	5162      	str	r2, [r4, r5]
 800710a:	604b      	str	r3, [r1, #4]
 800710c:	4638      	mov	r0, r7
 800710e:	f104 060b 	add.w	r6, r4, #11
 8007112:	f000 f853 	bl	80071bc <__malloc_unlock>
 8007116:	f026 0607 	bic.w	r6, r6, #7
 800711a:	1d23      	adds	r3, r4, #4
 800711c:	1af2      	subs	r2, r6, r3
 800711e:	d0b6      	beq.n	800708e <_malloc_r+0x22>
 8007120:	1b9b      	subs	r3, r3, r6
 8007122:	50a3      	str	r3, [r4, r2]
 8007124:	e7b3      	b.n	800708e <_malloc_r+0x22>
 8007126:	6862      	ldr	r2, [r4, #4]
 8007128:	42a3      	cmp	r3, r4
 800712a:	bf0c      	ite	eq
 800712c:	6032      	streq	r2, [r6, #0]
 800712e:	605a      	strne	r2, [r3, #4]
 8007130:	e7ec      	b.n	800710c <_malloc_r+0xa0>
 8007132:	4623      	mov	r3, r4
 8007134:	6864      	ldr	r4, [r4, #4]
 8007136:	e7b2      	b.n	800709e <_malloc_r+0x32>
 8007138:	4634      	mov	r4, r6
 800713a:	6876      	ldr	r6, [r6, #4]
 800713c:	e7b9      	b.n	80070b2 <_malloc_r+0x46>
 800713e:	230c      	movs	r3, #12
 8007140:	603b      	str	r3, [r7, #0]
 8007142:	4638      	mov	r0, r7
 8007144:	f000 f83a 	bl	80071bc <__malloc_unlock>
 8007148:	e7a1      	b.n	800708e <_malloc_r+0x22>
 800714a:	6025      	str	r5, [r4, #0]
 800714c:	e7de      	b.n	800710c <_malloc_r+0xa0>
 800714e:	bf00      	nop
 8007150:	200006fc 	.word	0x200006fc

08007154 <_sbrk_r>:
 8007154:	b538      	push	{r3, r4, r5, lr}
 8007156:	4d06      	ldr	r5, [pc, #24]	; (8007170 <_sbrk_r+0x1c>)
 8007158:	2300      	movs	r3, #0
 800715a:	4604      	mov	r4, r0
 800715c:	4608      	mov	r0, r1
 800715e:	602b      	str	r3, [r5, #0]
 8007160:	f7fa fec0 	bl	8001ee4 <_sbrk>
 8007164:	1c43      	adds	r3, r0, #1
 8007166:	d102      	bne.n	800716e <_sbrk_r+0x1a>
 8007168:	682b      	ldr	r3, [r5, #0]
 800716a:	b103      	cbz	r3, 800716e <_sbrk_r+0x1a>
 800716c:	6023      	str	r3, [r4, #0]
 800716e:	bd38      	pop	{r3, r4, r5, pc}
 8007170:	20000704 	.word	0x20000704

08007174 <strdup>:
 8007174:	4b02      	ldr	r3, [pc, #8]	; (8007180 <strdup+0xc>)
 8007176:	4601      	mov	r1, r0
 8007178:	6818      	ldr	r0, [r3, #0]
 800717a:	f000 b803 	b.w	8007184 <_strdup_r>
 800717e:	bf00      	nop
 8007180:	2000009c 	.word	0x2000009c

08007184 <_strdup_r>:
 8007184:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007186:	4604      	mov	r4, r0
 8007188:	4608      	mov	r0, r1
 800718a:	460d      	mov	r5, r1
 800718c:	f7f9 f826 	bl	80001dc <strlen>
 8007190:	1c42      	adds	r2, r0, #1
 8007192:	4611      	mov	r1, r2
 8007194:	4620      	mov	r0, r4
 8007196:	9201      	str	r2, [sp, #4]
 8007198:	f7ff ff68 	bl	800706c <_malloc_r>
 800719c:	4604      	mov	r4, r0
 800719e:	b118      	cbz	r0, 80071a8 <_strdup_r+0x24>
 80071a0:	9a01      	ldr	r2, [sp, #4]
 80071a2:	4629      	mov	r1, r5
 80071a4:	f7ff ff2c 	bl	8007000 <memcpy>
 80071a8:	4620      	mov	r0, r4
 80071aa:	b003      	add	sp, #12
 80071ac:	bd30      	pop	{r4, r5, pc}
	...

080071b0 <__malloc_lock>:
 80071b0:	4801      	ldr	r0, [pc, #4]	; (80071b8 <__malloc_lock+0x8>)
 80071b2:	f000 b809 	b.w	80071c8 <__retarget_lock_acquire_recursive>
 80071b6:	bf00      	nop
 80071b8:	20000708 	.word	0x20000708

080071bc <__malloc_unlock>:
 80071bc:	4801      	ldr	r0, [pc, #4]	; (80071c4 <__malloc_unlock+0x8>)
 80071be:	f000 b804 	b.w	80071ca <__retarget_lock_release_recursive>
 80071c2:	bf00      	nop
 80071c4:	20000708 	.word	0x20000708

080071c8 <__retarget_lock_acquire_recursive>:
 80071c8:	4770      	bx	lr

080071ca <__retarget_lock_release_recursive>:
 80071ca:	4770      	bx	lr

080071cc <_init>:
 80071cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ce:	bf00      	nop
 80071d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071d2:	bc08      	pop	{r3}
 80071d4:	469e      	mov	lr, r3
 80071d6:	4770      	bx	lr

080071d8 <_fini>:
 80071d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071da:	bf00      	nop
 80071dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071de:	bc08      	pop	{r3}
 80071e0:	469e      	mov	lr, r3
 80071e2:	4770      	bx	lr
