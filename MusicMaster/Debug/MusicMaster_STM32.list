
MusicMaster_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002584  08008de8  08008de8  00018de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b36c  0800b36c  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  0800b36c  0800b36c  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b36c  0800b36c  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b36c  0800b36c  0001b36c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b370  0800b370  0001b370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800b374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          0000065c  20000100  20000100  00020100  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000075c  2000075c  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c99b  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033e0  00000000  00000000  0003cacb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001728  00000000  00000000  0003feb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001648  00000000  00000000  000415d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020db2  00000000  00000000  00042c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d708  00000000  00000000  000639d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c760c  00000000  00000000  000810da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001486e6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006830  00000000  00000000  00148738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008dd0 	.word	0x08008dd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	08008dd0 	.word	0x08008dd0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <hashString>:
    struct DictionaryNode **buckets;
    int size;
};

// Hash function for string keys
unsigned int hashString(const char *key, int size) {
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
    unsigned int hash = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	60fb      	str	r3, [r7, #12]
    while (*key) {
 80002ae:	e007      	b.n	80002c0 <hashString+0x20>
        hash = (hash << 5) + *key++;
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	015a      	lsls	r2, r3, #5
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	1c59      	adds	r1, r3, #1
 80002b8:	6079      	str	r1, [r7, #4]
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	4413      	add	r3, r2
 80002be:	60fb      	str	r3, [r7, #12]
    while (*key) {
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d1f3      	bne.n	80002b0 <hashString+0x10>
    }
    return hash % size;
 80002c8:	683a      	ldr	r2, [r7, #0]
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80002d0:	fb01 f202 	mul.w	r2, r1, r2
 80002d4:	1a9b      	subs	r3, r3, r2
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr

080002e2 <hashNumeric>:

// Hash function for numeric keys
unsigned int hashNumeric(int key, int size) {
 80002e2:	b480      	push	{r7}
 80002e4:	b083      	sub	sp, #12
 80002e6:	af00      	add	r7, sp, #0
 80002e8:	6078      	str	r0, [r7, #4]
 80002ea:	6039      	str	r1, [r7, #0]
    return key % size;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	683a      	ldr	r2, [r7, #0]
 80002f0:	fb93 f2f2 	sdiv	r2, r3, r2
 80002f4:	6839      	ldr	r1, [r7, #0]
 80002f6:	fb01 f202 	mul.w	r2, r1, r2
 80002fa:	1a9b      	subs	r3, r3, r2
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr

08000308 <initDictionary>:

// Initialize dictionary
Dictionary *initDictionary(int size) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
    Dictionary *dict = malloc(sizeof(Dictionary));
 8000310:	2008      	movs	r0, #8
 8000312:	f008 f8c1 	bl	8008498 <malloc>
 8000316:	4603      	mov	r3, r0
 8000318:	60bb      	str	r3, [r7, #8]
    dict->buckets = malloc(size * sizeof(struct DictionaryNode *));
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	4618      	mov	r0, r3
 8000320:	f008 f8ba 	bl	8008498 <malloc>
 8000324:	4603      	mov	r3, r0
 8000326:	461a      	mov	r2, r3
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	601a      	str	r2, [r3, #0]
    dict->size = size;
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	687a      	ldr	r2, [r7, #4]
 8000330:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < size; i++) {
 8000332:	2300      	movs	r3, #0
 8000334:	60fb      	str	r3, [r7, #12]
 8000336:	e009      	b.n	800034c <initDictionary+0x44>
        dict->buckets[i] = NULL;
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	681a      	ldr	r2, [r3, #0]
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	009b      	lsls	r3, r3, #2
 8000340:	4413      	add	r3, r2
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	3301      	adds	r3, #1
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	68fa      	ldr	r2, [r7, #12]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	429a      	cmp	r2, r3
 8000352:	dbf1      	blt.n	8000338 <initDictionary+0x30>
    }
    return dict;
 8000354:	68bb      	ldr	r3, [r7, #8]
}
 8000356:	4618      	mov	r0, r3
 8000358:	3710      	adds	r7, #16
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}

0800035e <insert>:

// Insert key-value pair into dictionary
void insert(Dictionary *dict, const char *stringKey, int numericKey, struct Tone *tones, int numTones) {
 800035e:	b580      	push	{r7, lr}
 8000360:	b086      	sub	sp, #24
 8000362:	af00      	add	r7, sp, #0
 8000364:	60f8      	str	r0, [r7, #12]
 8000366:	60b9      	str	r1, [r7, #8]
 8000368:	607a      	str	r2, [r7, #4]
 800036a:	603b      	str	r3, [r7, #0]
    unsigned int index;
    struct DictionaryNode *newNode = malloc(sizeof(struct DictionaryNode));
 800036c:	2014      	movs	r0, #20
 800036e:	f008 f893 	bl	8008498 <malloc>
 8000372:	4603      	mov	r3, r0
 8000374:	613b      	str	r3, [r7, #16]
    newNode->stringKey = strdup(stringKey);
 8000376:	68b8      	ldr	r0, [r7, #8]
 8000378:	f008 f9bc 	bl	80086f4 <strdup>
 800037c:	4603      	mov	r3, r0
 800037e:	461a      	mov	r2, r3
 8000380:	693b      	ldr	r3, [r7, #16]
 8000382:	601a      	str	r2, [r3, #0]
    newNode->numericKey = numericKey;
 8000384:	693b      	ldr	r3, [r7, #16]
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	605a      	str	r2, [r3, #4]
    newNode->tones = malloc(numTones * sizeof(struct Tone));
 800038a:	6a3b      	ldr	r3, [r7, #32]
 800038c:	00db      	lsls	r3, r3, #3
 800038e:	4618      	mov	r0, r3
 8000390:	f008 f882 	bl	8008498 <malloc>
 8000394:	4603      	mov	r3, r0
 8000396:	461a      	mov	r2, r3
 8000398:	693b      	ldr	r3, [r7, #16]
 800039a:	609a      	str	r2, [r3, #8]
    memcpy(newNode->tones, tones, numTones * sizeof(struct Tone));
 800039c:	693b      	ldr	r3, [r7, #16]
 800039e:	6898      	ldr	r0, [r3, #8]
 80003a0:	6a3b      	ldr	r3, [r7, #32]
 80003a2:	00db      	lsls	r3, r3, #3
 80003a4:	461a      	mov	r2, r3
 80003a6:	6839      	ldr	r1, [r7, #0]
 80003a8:	f008 f87e 	bl	80084a8 <memcpy>
    newNode->numTones = numTones;
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	6a3a      	ldr	r2, [r7, #32]
 80003b0:	60da      	str	r2, [r3, #12]

    if (stringKey != NULL) {
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d007      	beq.n	80003c8 <insert+0x6a>
        index = hashString(stringKey, dict->size);
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	685b      	ldr	r3, [r3, #4]
 80003bc:	4619      	mov	r1, r3
 80003be:	68b8      	ldr	r0, [r7, #8]
 80003c0:	f7ff ff6e 	bl	80002a0 <hashString>
 80003c4:	6178      	str	r0, [r7, #20]
 80003c6:	e006      	b.n	80003d6 <insert+0x78>
    } else {
        index = hashNumeric(numericKey, dict->size);
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	4619      	mov	r1, r3
 80003ce:	6878      	ldr	r0, [r7, #4]
 80003d0:	f7ff ff87 	bl	80002e2 <hashNumeric>
 80003d4:	6178      	str	r0, [r7, #20]
    }

    newNode->next = dict->buckets[index];
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	4413      	add	r3, r2
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	693b      	ldr	r3, [r7, #16]
 80003e4:	611a      	str	r2, [r3, #16]
    dict->buckets[index] = newNode;
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	681a      	ldr	r2, [r3, #0]
 80003ea:	697b      	ldr	r3, [r7, #20]
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	4413      	add	r3, r2
 80003f0:	693a      	ldr	r2, [r7, #16]
 80003f2:	601a      	str	r2, [r3, #0]
}
 80003f4:	bf00      	nop
 80003f6:	3718      	adds	r7, #24
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <lookup>:

// Lookup value by key
struct Tone *lookup(Dictionary *dict, const char *stringKey, int numericKey, int *numTones) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b086      	sub	sp, #24
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	607a      	str	r2, [r7, #4]
 8000408:	603b      	str	r3, [r7, #0]
    unsigned int index;
    struct DictionaryNode *current;

    if (stringKey != NULL) {
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d029      	beq.n	8000464 <lookup+0x68>
        index = hashString(stringKey, dict->size);
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	685b      	ldr	r3, [r3, #4]
 8000414:	4619      	mov	r1, r3
 8000416:	68b8      	ldr	r0, [r7, #8]
 8000418:	f7ff ff42 	bl	80002a0 <hashString>
 800041c:	6138      	str	r0, [r7, #16]
        current = dict->buckets[index];
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	693b      	ldr	r3, [r7, #16]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	617b      	str	r3, [r7, #20]
        while (current) {
 800042c:	e016      	b.n	800045c <lookup+0x60>
            if (current->stringKey && strcmp(current->stringKey, stringKey) == 0) {
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d00f      	beq.n	8000456 <lookup+0x5a>
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	68b9      	ldr	r1, [r7, #8]
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff fec7 	bl	80001d0 <strcmp>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d106      	bne.n	8000456 <lookup+0x5a>
                *numTones = current->numTones;
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	68da      	ldr	r2, [r3, #12]
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	601a      	str	r2, [r3, #0]
                return current->tones;
 8000450:	697b      	ldr	r3, [r7, #20]
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	e02b      	b.n	80004ae <lookup+0xb2>
            }
            current = current->next;
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	691b      	ldr	r3, [r3, #16]
 800045a:	617b      	str	r3, [r7, #20]
        while (current) {
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d1e5      	bne.n	800042e <lookup+0x32>
 8000462:	e020      	b.n	80004a6 <lookup+0xaa>
        }
    } else {
        index = hashNumeric(numericKey, dict->size);
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	685b      	ldr	r3, [r3, #4]
 8000468:	4619      	mov	r1, r3
 800046a:	6878      	ldr	r0, [r7, #4]
 800046c:	f7ff ff39 	bl	80002e2 <hashNumeric>
 8000470:	6138      	str	r0, [r7, #16]
        current = dict->buckets[index];
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	693b      	ldr	r3, [r7, #16]
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	4413      	add	r3, r2
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	617b      	str	r3, [r7, #20]
        while (current) {
 8000480:	e00e      	b.n	80004a0 <lookup+0xa4>
            if (current->numericKey == numericKey) {
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	429a      	cmp	r2, r3
 800048a:	d106      	bne.n	800049a <lookup+0x9e>
                *numTones = current->numTones;
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	68da      	ldr	r2, [r3, #12]
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	601a      	str	r2, [r3, #0]
                return current->tones;
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	689b      	ldr	r3, [r3, #8]
 8000498:	e009      	b.n	80004ae <lookup+0xb2>
            }
            current = current->next;
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	691b      	ldr	r3, [r3, #16]
 800049e:	617b      	str	r3, [r7, #20]
        while (current) {
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d1ed      	bne.n	8000482 <lookup+0x86>
        }
    }

    *numTones = 0;
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
    return NULL;
 80004ac:	2300      	movs	r3, #0
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3718      	adds	r7, #24
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
	...

080004b8 <extractNumber>:
////}
//PWM END

//UART BEGIN

void extractNumber(const uint8_t *data) {
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	isCorrect = -1;
 80004c0:	4b3d      	ldr	r3, [pc, #244]	; (80005b8 <extractNumber+0x100>)
 80004c2:	f04f 32ff 	mov.w	r2, #4294967295
 80004c6:	601a      	str	r2, [r3, #0]
	// Extract the first four characters and convert them to integers
	char pass[19] = "PASS_CHANGED(XXXX)\n";
 80004c8:	4b3c      	ldr	r3, [pc, #240]	; (80005bc <extractNumber+0x104>)
 80004ca:	f107 0408 	add.w	r4, r7, #8
 80004ce:	461d      	mov	r5, r3
 80004d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004d4:	682b      	ldr	r3, [r5, #0]
 80004d6:	461a      	mov	r2, r3
 80004d8:	8022      	strh	r2, [r4, #0]
 80004da:	3402      	adds	r4, #2
 80004dc:	0c1b      	lsrs	r3, r3, #16
 80004de:	7023      	strb	r3, [r4, #0]
	pass[13] = data[9];
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	3309      	adds	r3, #9
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	757b      	strb	r3, [r7, #21]
	pass[14] = data[10];
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	330a      	adds	r3, #10
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	75bb      	strb	r3, [r7, #22]
	pass[15] = data[11];
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	330b      	adds	r3, #11
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	75fb      	strb	r3, [r7, #23]
	pass[16] = data[12];
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	330c      	adds	r3, #12
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	763b      	strb	r3, [r7, #24]

	for (int i = 9; i < 13; i++) {
 8000500:	2309      	movs	r3, #9
 8000502:	61fb      	str	r3, [r7, #28]
 8000504:	e037      	b.n	8000576 <extractNumber+0xbe>
		if (data[i] <= '9' && data[i] >= '0') {
 8000506:	69fb      	ldr	r3, [r7, #28]
 8000508:	687a      	ldr	r2, [r7, #4]
 800050a:	4413      	add	r3, r2
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b39      	cmp	r3, #57	; 0x39
 8000510:	d814      	bhi.n	800053c <extractNumber+0x84>
 8000512:	69fb      	ldr	r3, [r7, #28]
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	4413      	add	r3, r2
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b2f      	cmp	r3, #47	; 0x2f
 800051c:	d90e      	bls.n	800053c <extractNumber+0x84>
			password[i - 9] = data[i] - '0';
 800051e:	69fb      	ldr	r3, [r7, #28]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	4413      	add	r3, r2
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	461a      	mov	r2, r3
 8000528:	69fb      	ldr	r3, [r7, #28]
 800052a:	3b09      	subs	r3, #9
 800052c:	3a30      	subs	r2, #48	; 0x30
 800052e:	4924      	ldr	r1, [pc, #144]	; (80005c0 <extractNumber+0x108>)
 8000530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 9; i < 13; i++) {
 8000534:	69fb      	ldr	r3, [r7, #28]
 8000536:	3301      	adds	r3, #1
 8000538:	61fb      	str	r3, [r7, #28]
 800053a:	e01c      	b.n	8000576 <extractNumber+0xbe>
		} else {
			if (logStatus) {
 800053c:	4b21      	ldr	r3, [pc, #132]	; (80005c4 <extractNumber+0x10c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d004      	beq.n	800054e <extractNumber+0x96>
				HAL_UART_Transmit_IT(&huart1, "ERROR(INCORRECT FORMAT)\n", 24);
 8000544:	2218      	movs	r2, #24
 8000546:	4920      	ldr	r1, [pc, #128]	; (80005c8 <extractNumber+0x110>)
 8000548:	4820      	ldr	r0, [pc, #128]	; (80005cc <extractNumber+0x114>)
 800054a:	f006 fc4b 	bl	8006de4 <HAL_UART_Transmit_IT>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2101      	movs	r1, #1
 8000552:	481f      	ldr	r0, [pc, #124]	; (80005d0 <extractNumber+0x118>)
 8000554:	f003 faf4 	bl	8003b40 <HAL_GPIO_WritePin>
			buzzer_flag = WrongInput;
 8000558:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <extractNumber+0x11c>)
 800055a:	2201      	movs	r2, #1
 800055c:	701a      	strb	r2, [r3, #0]
			buzzerEnterTime = HAL_GetTick();
 800055e:	f001 fce9 	bl	8001f34 <HAL_GetTick>
 8000562:	4603      	mov	r3, r0
 8000564:	4a1c      	ldr	r2, [pc, #112]	; (80005d8 <extractNumber+0x120>)
 8000566:	6013      	str	r3, [r2, #0]
			if (alertStatus)
 8000568:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <extractNumber+0x124>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d01f      	beq.n	80005b0 <extractNumber+0xf8>
				PWM_Start();
 8000570:	f001 fa70 	bl	8001a54 <PWM_Start>
 8000574:	e01d      	b.n	80005b2 <extractNumber+0xfa>
	for (int i = 9; i < 13; i++) {
 8000576:	69fb      	ldr	r3, [r7, #28]
 8000578:	2b0c      	cmp	r3, #12
 800057a:	ddc4      	ble.n	8000506 <extractNumber+0x4e>
			return;
		}
	}
	if (logStatus) {
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <extractNumber+0x10c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d016      	beq.n	80005b2 <extractNumber+0xfa>
		HAL_UART_Transmit_IT(&huart1, pass, 19);
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	2213      	movs	r2, #19
 800058a:	4619      	mov	r1, r3
 800058c:	480f      	ldr	r0, [pc, #60]	; (80005cc <extractNumber+0x114>)
 800058e:	f006 fc29 	bl	8006de4 <HAL_UART_Transmit_IT>
		buzzer_flag = CorrectInput;
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <extractNumber+0x11c>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
		buzzerEnterTime = HAL_GetTick();
 8000598:	f001 fccc 	bl	8001f34 <HAL_GetTick>
 800059c:	4603      	mov	r3, r0
 800059e:	4a0e      	ldr	r2, [pc, #56]	; (80005d8 <extractNumber+0x120>)
 80005a0:	6013      	str	r3, [r2, #0]
		if (alertStatus)
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <extractNumber+0x124>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d003      	beq.n	80005b2 <extractNumber+0xfa>
			PWM_Start();
 80005aa:	f001 fa53 	bl	8001a54 <PWM_Start>
 80005ae:	e000      	b.n	80005b2 <extractNumber+0xfa>
			return;
 80005b0:	bf00      	nop
	}
}
 80005b2:	3720      	adds	r7, #32
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bdb0      	pop	{r4, r5, r7, pc}
 80005b8:	20000040 	.word	0x20000040
 80005bc:	08008e04 	.word	0x08008e04
 80005c0:	20000000 	.word	0x20000000
 80005c4:	20000038 	.word	0x20000038
 80005c8:	08008de8 	.word	0x08008de8
 80005cc:	200002bc 	.word	0x200002bc
 80005d0:	48000800 	.word	0x48000800
 80005d4:	20000048 	.word	0x20000048
 80005d8:	20000670 	.word	0x20000670
 80005dc:	2000003c 	.word	0x2000003c

080005e0 <compareStrings>:

int compareStrings(const char *str1, const uint8_t *str2, int n) {
 80005e0:	b480      	push	{r7}
 80005e2:	b087      	sub	sp, #28
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < n; i++) {
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	e00e      	b.n	8000610 <compareStrings+0x30>
		if (str1[i] != str2[i]) {
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	4413      	add	r3, r2
 80005f8:	781a      	ldrb	r2, [r3, #0]
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	68b9      	ldr	r1, [r7, #8]
 80005fe:	440b      	add	r3, r1
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	429a      	cmp	r2, r3
 8000604:	d001      	beq.n	800060a <compareStrings+0x2a>
			return 0;
 8000606:	2300      	movs	r3, #0
 8000608:	e007      	b.n	800061a <compareStrings+0x3a>
	for (int i = 0; i < n; i++) {
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	3301      	adds	r3, #1
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	697a      	ldr	r2, [r7, #20]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	429a      	cmp	r2, r3
 8000616:	dbec      	blt.n	80005f2 <compareStrings+0x12>
		}
	}
	return 1;
 8000618:	2301      	movs	r3, #1
}
 800061a:	4618      	mov	r0, r3
 800061c:	371c      	adds	r7, #28
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <HAL_UART_RxCpltCallback>:

uint8_t data[100];
uint8_t d;
uint8_t i;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000628:	b5b0      	push	{r4, r5, r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a72      	ldr	r2, [pc, #456]	; (8000800 <HAL_UART_RxCpltCallback+0x1d8>)
 8000636:	4293      	cmp	r3, r2
 8000638:	f040 80de 	bne.w	80007f8 <HAL_UART_RxCpltCallback+0x1d0>
		HAL_UART_Receive_IT(&huart1, &d, 1);
 800063c:	2201      	movs	r2, #1
 800063e:	4971      	ldr	r1, [pc, #452]	; (8000804 <HAL_UART_RxCpltCallback+0x1dc>)
 8000640:	4871      	ldr	r0, [pc, #452]	; (8000808 <HAL_UART_RxCpltCallback+0x1e0>)
 8000642:	f006 fc2d 	bl	8006ea0 <HAL_UART_Receive_IT>
		data[i++] = d;
 8000646:	4b71      	ldr	r3, [pc, #452]	; (800080c <HAL_UART_RxCpltCallback+0x1e4>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	1c5a      	adds	r2, r3, #1
 800064c:	b2d1      	uxtb	r1, r2
 800064e:	4a6f      	ldr	r2, [pc, #444]	; (800080c <HAL_UART_RxCpltCallback+0x1e4>)
 8000650:	7011      	strb	r1, [r2, #0]
 8000652:	461a      	mov	r2, r3
 8000654:	4b6b      	ldr	r3, [pc, #428]	; (8000804 <HAL_UART_RxCpltCallback+0x1dc>)
 8000656:	7819      	ldrb	r1, [r3, #0]
 8000658:	4b6d      	ldr	r3, [pc, #436]	; (8000810 <HAL_UART_RxCpltCallback+0x1e8>)
 800065a:	5499      	strb	r1, [r3, r2]
		if (d == '\n') {
 800065c:	4b69      	ldr	r3, [pc, #420]	; (8000804 <HAL_UART_RxCpltCallback+0x1dc>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b0a      	cmp	r3, #10
 8000662:	f040 80c9 	bne.w	80007f8 <HAL_UART_RxCpltCallback+0x1d0>
			if ((i == 15 && compareStrings(setPass, data, 9) == 1)
 8000666:	4b69      	ldr	r3, [pc, #420]	; (800080c <HAL_UART_RxCpltCallback+0x1e4>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b0f      	cmp	r3, #15
 800066c:	d11a      	bne.n	80006a4 <HAL_UART_RxCpltCallback+0x7c>
 800066e:	2209      	movs	r2, #9
 8000670:	4967      	ldr	r1, [pc, #412]	; (8000810 <HAL_UART_RxCpltCallback+0x1e8>)
 8000672:	4868      	ldr	r0, [pc, #416]	; (8000814 <HAL_UART_RxCpltCallback+0x1ec>)
 8000674:	f7ff ffb4 	bl	80005e0 <compareStrings>
 8000678:	4603      	mov	r3, r0
 800067a:	2b01      	cmp	r3, #1
 800067c:	d112      	bne.n	80006a4 <HAL_UART_RxCpltCallback+0x7c>
					&& isCorrect == -1) {
 800067e:	4b66      	ldr	r3, [pc, #408]	; (8000818 <HAL_UART_RxCpltCallback+0x1f0>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000686:	d10d      	bne.n	80006a4 <HAL_UART_RxCpltCallback+0x7c>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8000688:	2201      	movs	r2, #1
 800068a:	2101      	movs	r1, #1
 800068c:	4863      	ldr	r0, [pc, #396]	; (800081c <HAL_UART_RxCpltCallback+0x1f4>)
 800068e:	f003 fa57 	bl	8003b40 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2104      	movs	r1, #4
 8000696:	4861      	ldr	r0, [pc, #388]	; (800081c <HAL_UART_RxCpltCallback+0x1f4>)
 8000698:	f003 fa52 	bl	8003b40 <HAL_GPIO_WritePin>
				extractNumber(data);
 800069c:	485c      	ldr	r0, [pc, #368]	; (8000810 <HAL_UART_RxCpltCallback+0x1e8>)
 800069e:	f7ff ff0b 	bl	80004b8 <extractNumber>
 80006a2:	e0a6      	b.n	80007f2 <HAL_UART_RxCpltCallback+0x1ca>
			} else if (i == 7) {
 80006a4:	4b59      	ldr	r3, [pc, #356]	; (800080c <HAL_UART_RxCpltCallback+0x1e4>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b07      	cmp	r3, #7
 80006aa:	d111      	bne.n	80006d0 <HAL_UART_RxCpltCallback+0xa8>
				if (compareStrings(logON, data, 6) == 1) {
 80006ac:	2206      	movs	r2, #6
 80006ae:	4958      	ldr	r1, [pc, #352]	; (8000810 <HAL_UART_RxCpltCallback+0x1e8>)
 80006b0:	485b      	ldr	r0, [pc, #364]	; (8000820 <HAL_UART_RxCpltCallback+0x1f8>)
 80006b2:	f7ff ff95 	bl	80005e0 <compareStrings>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	f040 809a 	bne.w	80007f2 <HAL_UART_RxCpltCallback+0x1ca>
					logStatus = 1;
 80006be:	4b59      	ldr	r3, [pc, #356]	; (8000824 <HAL_UART_RxCpltCallback+0x1fc>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Log Turned ON\n",
 80006c4:	2216      	movs	r2, #22
 80006c6:	4958      	ldr	r1, [pc, #352]	; (8000828 <HAL_UART_RxCpltCallback+0x200>)
 80006c8:	484f      	ldr	r0, [pc, #316]	; (8000808 <HAL_UART_RxCpltCallback+0x1e0>)
 80006ca:	f006 fb8b 	bl	8006de4 <HAL_UART_Transmit_IT>
 80006ce:	e090      	b.n	80007f2 <HAL_UART_RxCpltCallback+0x1ca>
							22);
				}
			} else if (i == 8) {
 80006d0:	4b4e      	ldr	r3, [pc, #312]	; (800080c <HAL_UART_RxCpltCallback+0x1e4>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b08      	cmp	r3, #8
 80006d6:	d111      	bne.n	80006fc <HAL_UART_RxCpltCallback+0xd4>
				if (compareStrings(logOFF, data, 7) == 1) {
 80006d8:	2207      	movs	r2, #7
 80006da:	494d      	ldr	r1, [pc, #308]	; (8000810 <HAL_UART_RxCpltCallback+0x1e8>)
 80006dc:	4853      	ldr	r0, [pc, #332]	; (800082c <HAL_UART_RxCpltCallback+0x204>)
 80006de:	f7ff ff7f 	bl	80005e0 <compareStrings>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	f040 8084 	bne.w	80007f2 <HAL_UART_RxCpltCallback+0x1ca>
					logStatus = 0;
 80006ea:	4b4e      	ldr	r3, [pc, #312]	; (8000824 <HAL_UART_RxCpltCallback+0x1fc>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Log Turned OFF\n",
 80006f0:	2217      	movs	r2, #23
 80006f2:	494f      	ldr	r1, [pc, #316]	; (8000830 <HAL_UART_RxCpltCallback+0x208>)
 80006f4:	4844      	ldr	r0, [pc, #272]	; (8000808 <HAL_UART_RxCpltCallback+0x1e0>)
 80006f6:	f006 fb75 	bl	8006de4 <HAL_UART_Transmit_IT>
 80006fa:	e07a      	b.n	80007f2 <HAL_UART_RxCpltCallback+0x1ca>
							23);
				}
			} else if (i == 9) {
 80006fc:	4b43      	ldr	r3, [pc, #268]	; (800080c <HAL_UART_RxCpltCallback+0x1e4>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b09      	cmp	r3, #9
 8000702:	d11a      	bne.n	800073a <HAL_UART_RxCpltCallback+0x112>
				if (compareStrings(alertON, data, 8) == 1) {
 8000704:	2208      	movs	r2, #8
 8000706:	4942      	ldr	r1, [pc, #264]	; (8000810 <HAL_UART_RxCpltCallback+0x1e8>)
 8000708:	484a      	ldr	r0, [pc, #296]	; (8000834 <HAL_UART_RxCpltCallback+0x20c>)
 800070a:	f7ff ff69 	bl	80005e0 <compareStrings>
 800070e:	4603      	mov	r3, r0
 8000710:	2b01      	cmp	r3, #1
 8000712:	d16e      	bne.n	80007f2 <HAL_UART_RxCpltCallback+0x1ca>
					alertStatus = 1;
 8000714:	4b48      	ldr	r3, [pc, #288]	; (8000838 <HAL_UART_RxCpltCallback+0x210>)
 8000716:	2201      	movs	r2, #1
 8000718:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Alerts Turned ON\n",
 800071a:	2219      	movs	r2, #25
 800071c:	4947      	ldr	r1, [pc, #284]	; (800083c <HAL_UART_RxCpltCallback+0x214>)
 800071e:	483a      	ldr	r0, [pc, #232]	; (8000808 <HAL_UART_RxCpltCallback+0x1e0>)
 8000720:	f006 fb60 	bl	8006de4 <HAL_UART_Transmit_IT>
							25);
					buzzer_flag = CorrectInput;
 8000724:	4b46      	ldr	r3, [pc, #280]	; (8000840 <HAL_UART_RxCpltCallback+0x218>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
					buzzerEnterTime = HAL_GetTick();
 800072a:	f001 fc03 	bl	8001f34 <HAL_GetTick>
 800072e:	4603      	mov	r3, r0
 8000730:	4a44      	ldr	r2, [pc, #272]	; (8000844 <HAL_UART_RxCpltCallback+0x21c>)
 8000732:	6013      	str	r3, [r2, #0]
					PWM_Start();
 8000734:	f001 f98e 	bl	8001a54 <PWM_Start>
 8000738:	e05b      	b.n	80007f2 <HAL_UART_RxCpltCallback+0x1ca>
				}
			} else if (i == 10) {
 800073a:	4b34      	ldr	r3, [pc, #208]	; (800080c <HAL_UART_RxCpltCallback+0x1e4>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b0a      	cmp	r3, #10
 8000740:	d110      	bne.n	8000764 <HAL_UART_RxCpltCallback+0x13c>
				if (compareStrings(alertOFF, data, 9) == 1) {
 8000742:	2209      	movs	r2, #9
 8000744:	4932      	ldr	r1, [pc, #200]	; (8000810 <HAL_UART_RxCpltCallback+0x1e8>)
 8000746:	4840      	ldr	r0, [pc, #256]	; (8000848 <HAL_UART_RxCpltCallback+0x220>)
 8000748:	f7ff ff4a 	bl	80005e0 <compareStrings>
 800074c:	4603      	mov	r3, r0
 800074e:	2b01      	cmp	r3, #1
 8000750:	d14f      	bne.n	80007f2 <HAL_UART_RxCpltCallback+0x1ca>
					alertStatus = 0;
 8000752:	4b39      	ldr	r3, [pc, #228]	; (8000838 <HAL_UART_RxCpltCallback+0x210>)
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Alerts Turned OFF\n",
 8000758:	221a      	movs	r2, #26
 800075a:	493c      	ldr	r1, [pc, #240]	; (800084c <HAL_UART_RxCpltCallback+0x224>)
 800075c:	482a      	ldr	r0, [pc, #168]	; (8000808 <HAL_UART_RxCpltCallback+0x1e0>)
 800075e:	f006 fb41 	bl	8006de4 <HAL_UART_Transmit_IT>
 8000762:	e046      	b.n	80007f2 <HAL_UART_RxCpltCallback+0x1ca>
							26);
				}
			} else if (i == 14 && (data[11] - '0') < 6
 8000764:	4b29      	ldr	r3, [pc, #164]	; (800080c <HAL_UART_RxCpltCallback+0x1e4>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b0e      	cmp	r3, #14
 800076a:	d12d      	bne.n	80007c8 <HAL_UART_RxCpltCallback+0x1a0>
 800076c:	4b28      	ldr	r3, [pc, #160]	; (8000810 <HAL_UART_RxCpltCallback+0x1e8>)
 800076e:	7adb      	ldrb	r3, [r3, #11]
 8000770:	2b35      	cmp	r3, #53	; 0x35
 8000772:	d829      	bhi.n	80007c8 <HAL_UART_RxCpltCallback+0x1a0>
					&& (data[11] - '0') > -1) {
 8000774:	4b26      	ldr	r3, [pc, #152]	; (8000810 <HAL_UART_RxCpltCallback+0x1e8>)
 8000776:	7adb      	ldrb	r3, [r3, #11]
 8000778:	2b2f      	cmp	r3, #47	; 0x2f
 800077a:	d925      	bls.n	80007c8 <HAL_UART_RxCpltCallback+0x1a0>
				if (compareStrings(setVolume, data, 11) == 1
 800077c:	220b      	movs	r2, #11
 800077e:	4924      	ldr	r1, [pc, #144]	; (8000810 <HAL_UART_RxCpltCallback+0x1e8>)
 8000780:	4833      	ldr	r0, [pc, #204]	; (8000850 <HAL_UART_RxCpltCallback+0x228>)
 8000782:	f7ff ff2d 	bl	80005e0 <compareStrings>
 8000786:	4603      	mov	r3, r0
 8000788:	2b01      	cmp	r3, #1
 800078a:	d131      	bne.n	80007f0 <HAL_UART_RxCpltCallback+0x1c8>
						&& data[12] == ')') {
 800078c:	4b20      	ldr	r3, [pc, #128]	; (8000810 <HAL_UART_RxCpltCallback+0x1e8>)
 800078e:	7b1b      	ldrb	r3, [r3, #12]
 8000790:	2b29      	cmp	r3, #41	; 0x29
 8000792:	d12d      	bne.n	80007f0 <HAL_UART_RxCpltCallback+0x1c8>
					int v = data[11] - '0';
 8000794:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <HAL_UART_RxCpltCallback+0x1e8>)
 8000796:	7adb      	ldrb	r3, [r3, #11]
 8000798:	3b30      	subs	r3, #48	; 0x30
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
//					_volume = v * 10;
					char massage[24] = "Program Volume Set To  \n";
 800079c:	4b2d      	ldr	r3, [pc, #180]	; (8000854 <HAL_UART_RxCpltCallback+0x22c>)
 800079e:	f107 040c 	add.w	r4, r7, #12
 80007a2:	461d      	mov	r5, r3
 80007a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007ac:	e884 0003 	stmia.w	r4, {r0, r1}
					massage[22] = data[11];
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <HAL_UART_RxCpltCallback+0x1e8>)
 80007b2:	7adb      	ldrb	r3, [r3, #11]
 80007b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					HAL_UART_Transmit_IT(&huart1, massage, 24);
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	2218      	movs	r2, #24
 80007be:	4619      	mov	r1, r3
 80007c0:	4811      	ldr	r0, [pc, #68]	; (8000808 <HAL_UART_RxCpltCallback+0x1e0>)
 80007c2:	f006 fb0f 	bl	8006de4 <HAL_UART_Transmit_IT>
				if (compareStrings(setVolume, data, 11) == 1
 80007c6:	e013      	b.n	80007f0 <HAL_UART_RxCpltCallback+0x1c8>
				}
			} else {
				HAL_UART_Transmit_IT(&huart1, "INVALID INPUT\n", 14);
 80007c8:	220e      	movs	r2, #14
 80007ca:	4923      	ldr	r1, [pc, #140]	; (8000858 <HAL_UART_RxCpltCallback+0x230>)
 80007cc:	480e      	ldr	r0, [pc, #56]	; (8000808 <HAL_UART_RxCpltCallback+0x1e0>)
 80007ce:	f006 fb09 	bl	8006de4 <HAL_UART_Transmit_IT>
				buzzer_flag = WrongInput;
 80007d2:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <HAL_UART_RxCpltCallback+0x218>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	701a      	strb	r2, [r3, #0]
				buzzerEnterTime = HAL_GetTick();
 80007d8:	f001 fbac 	bl	8001f34 <HAL_GetTick>
 80007dc:	4603      	mov	r3, r0
 80007de:	4a19      	ldr	r2, [pc, #100]	; (8000844 <HAL_UART_RxCpltCallback+0x21c>)
 80007e0:	6013      	str	r3, [r2, #0]
				if (alertStatus)
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <HAL_UART_RxCpltCallback+0x210>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d003      	beq.n	80007f2 <HAL_UART_RxCpltCallback+0x1ca>
					PWM_Start();
 80007ea:	f001 f933 	bl	8001a54 <PWM_Start>
 80007ee:	e000      	b.n	80007f2 <HAL_UART_RxCpltCallback+0x1ca>
				if (compareStrings(setVolume, data, 11) == 1
 80007f0:	bf00      	nop
			}

			i = 0;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_UART_RxCpltCallback+0x1e4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	701a      	strb	r2, [r3, #0]
		}

	}
}
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	; 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bdb0      	pop	{r4, r5, r7, pc}
 8000800:	40013800 	.word	0x40013800
 8000804:	2000072c 	.word	0x2000072c
 8000808:	200002bc 	.word	0x200002bc
 800080c:	2000072d 	.word	0x2000072d
 8000810:	200006c8 	.word	0x200006c8
 8000814:	2000004c 	.word	0x2000004c
 8000818:	20000040 	.word	0x20000040
 800081c:	48000800 	.word	0x48000800
 8000820:	20000058 	.word	0x20000058
 8000824:	20000038 	.word	0x20000038
 8000828:	08008e18 	.word	0x08008e18
 800082c:	20000060 	.word	0x20000060
 8000830:	08008e30 	.word	0x08008e30
 8000834:	20000068 	.word	0x20000068
 8000838:	2000003c 	.word	0x2000003c
 800083c:	08008e48 	.word	0x08008e48
 8000840:	20000048 	.word	0x20000048
 8000844:	20000670 	.word	0x20000670
 8000848:	20000070 	.word	0x20000070
 800084c:	08008e64 	.word	0x08008e64
 8000850:	2000007c 	.word	0x2000007c
 8000854:	08008e90 	.word	0x08008e90
 8000858:	08008e80 	.word	0x08008e80

0800085c <HAL_ADC_ConvCpltCallback>:
//UART END

//ADC Begin

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b09c      	sub	sp, #112	; 0x70
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800086c:	d117      	bne.n	800089e <HAL_ADC_ConvCpltCallback+0x42>
	{
		uint32_t value;
		value = HAL_ADC_GetValue(hadc);
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f001 fea0 	bl	80025b4 <HAL_ADC_GetValue>
 8000874:	66f8      	str	r0, [r7, #108]	; 0x6c
		char str[100];
		sprintf(str, "%lu\n",value);
 8000876:	f107 0308 	add.w	r3, r7, #8
 800087a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800087c:	490a      	ldr	r1, [pc, #40]	; (80008a8 <HAL_ADC_ConvCpltCallback+0x4c>)
 800087e:	4618      	mov	r0, r3
 8000880:	f007 ff18 	bl	80086b4 <siprintf>
		HAL_UART_Transmit_IT(&huart1, str, strlen(str));
 8000884:	f107 0308 	add.w	r3, r7, #8
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fcab 	bl	80001e4 <strlen>
 800088e:	4603      	mov	r3, r0
 8000890:	b29a      	uxth	r2, r3
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	4619      	mov	r1, r3
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <HAL_ADC_ConvCpltCallback+0x50>)
 800089a:	f006 faa3 	bl	8006de4 <HAL_UART_Transmit_IT>
	}
}
 800089e:	bf00      	nop
 80008a0:	3770      	adds	r7, #112	; 0x70
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	08008ea8 	.word	0x08008ea8
 80008ac:	200002bc 	.word	0x200002bc

080008b0 <display_number>:
//ADC End

void display_number(int led_flag, int _number) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOD,
 80008ba:	2201      	movs	r2, #1
 80008bc:	211e      	movs	r1, #30
 80008be:	4813      	ldr	r0, [pc, #76]	; (800090c <display_number+0x5c>)
 80008c0:	f003 f93e 	bl	8003b40 <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOD, led[led_flag], DISPLAY_ON);
 80008c4:	4a12      	ldr	r2, [pc, #72]	; (8000910 <display_number+0x60>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008cc:	2200      	movs	r2, #0
 80008ce:	4619      	mov	r1, r3
 80008d0:	480e      	ldr	r0, [pc, #56]	; (800090c <display_number+0x5c>)
 80008d2:	f003 f935 	bl	8003b40 <HAL_GPIO_WritePin>
	if (_number != 0) {
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d009      	beq.n	80008f0 <display_number+0x40>
		HAL_GPIO_WritePin(GPIOD, digits[_number].pattern, GPIO_PIN_SET);
 80008dc:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <display_number+0x64>)
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	4413      	add	r3, r2
 80008e4:	889b      	ldrh	r3, [r3, #4]
 80008e6:	2201      	movs	r2, #1
 80008e8:	4619      	mov	r1, r3
 80008ea:	4808      	ldr	r0, [pc, #32]	; (800090c <display_number+0x5c>)
 80008ec:	f003 f928 	bl	8003b40 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(GPIOD, digits[_number].anti_pattern, GPIO_PIN_RESET);
 80008f0:	4a08      	ldr	r2, [pc, #32]	; (8000914 <display_number+0x64>)
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	4413      	add	r3, r2
 80008f8:	88db      	ldrh	r3, [r3, #6]
 80008fa:	2200      	movs	r2, #0
 80008fc:	4619      	mov	r1, r3
 80008fe:	4803      	ldr	r0, [pc, #12]	; (800090c <display_number+0x5c>)
 8000900:	f003 f91e 	bl	8003b40 <HAL_GPIO_WritePin>
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	48000c00 	.word	0x48000c00
 8000910:	20000638 	.word	0x20000638
 8000914:	20000678 	.word	0x20000678

08000918 <increase>:

void increase(int _head) {
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	carrier[_head] += 1;
 8000920:	4a0c      	ldr	r2, [pc, #48]	; (8000954 <increase+0x3c>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000928:	1c5a      	adds	r2, r3, #1
 800092a:	490a      	ldr	r1, [pc, #40]	; (8000954 <increase+0x3c>)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (carrier[_head] == 10) {
 8000932:	4a08      	ldr	r2, [pc, #32]	; (8000954 <increase+0x3c>)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800093a:	2b0a      	cmp	r3, #10
 800093c:	d104      	bne.n	8000948 <increase+0x30>
		carrier[_head] = 0;
 800093e:	4a05      	ldr	r2, [pc, #20]	; (8000954 <increase+0x3c>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2100      	movs	r1, #0
 8000944:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	20000640 	.word	0x20000640

08000958 <init_display>:

void init_display() {
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,
 800095c:	2201      	movs	r2, #1
 800095e:	211e      	movs	r1, #30
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <init_display+0x14>)
 8000962:	f003 f8ed 	bl	8003b40 <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	48000c00 	.word	0x48000c00

08000970 <initTonesDictionary>:

void initTonesDictionary() {
 8000970:	b580      	push	{r7, lr}
 8000972:	f5ad 5d0f 	sub.w	sp, sp, #9152	; 0x23c0
 8000976:	b08c      	sub	sp, #48	; 0x30
 8000978:	af02      	add	r7, sp, #8
    playlist = initDictionary(10);
 800097a:	200a      	movs	r0, #10
 800097c:	f7ff fcc4 	bl	8000308 <initDictionary>
 8000980:	4603      	mov	r3, r0
 8000982:	4a38      	ldr	r2, [pc, #224]	; (8000a64 <initTonesDictionary+0xf4>)
 8000984:	6013      	str	r3, [r2, #0]

    // Example tones
    struct Tone super_mario_bros[]={{2637,306},{0,153},{2637,153},{0,153},{2093,153},{2637,153},{0,153},{3136,153},{0,459},{1586,153},{0,459},{2093,153},{0,306},{1586,153},{0,306},{1319,153},{0,306},{1760,153},{0,153},{1976,153},{0,153},{1865,153},{1760,153},{0,153},{1586,204},{2637,204},{3136,204},{3520,153},{0,153},{2794,153},{3136,153},{0,153},{2637,153},{0,153},{2093,153},{2349,153},{1976,153},{0,306},{2093,153},{0,306},{1586,153},{0,306},{1319,153},{0,306},{1760,153},{0,153},{1976,153},{0,153},{1865,153},{1760,153},{0,153},{1586,204},{2637,204},{3136,204},{3520,153},{0,153},{2794,153},{3136,153},{0,153},{2637,153},{0,153},{2093,153},{2349,153},{1976,153},{0,0}};
 8000986:	f507 530f 	add.w	r3, r7, #9152	; 0x23c0
 800098a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800098e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000992:	4a35      	ldr	r2, [pc, #212]	; (8000a68 <initTonesDictionary+0xf8>)
 8000994:	4618      	mov	r0, r3
 8000996:	4611      	mov	r1, r2
 8000998:	f44f 7302 	mov.w	r3, #520	; 0x208
 800099c:	461a      	mov	r2, r3
 800099e:	f007 fd83 	bl	80084a8 <memcpy>
    struct Tone hedwig_theme[]={{REST,750},{NOTE_D4,374},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_G4,750},{NOTE_D5,374},{NOTE_C5,1124},{NOTE_A4,1124},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_F4,750},{NOTE_GS4,374},{NOTE_D4,2249},{NOTE_D4,374},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_G4,750},{NOTE_D5,374},{NOTE_F5,750},{NOTE_E5,374},{NOTE_DS5,750},{NOTE_B4,374},{NOTE_DS5,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_B4,374},{NOTE_G4,2249},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_DS5,750},{NOTE_D5,374},{NOTE_CS5,750},{NOTE_A4,374},{NOTE_AS4,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_D4,374},{NOTE_D5,1700},{REST,150},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_F5,750},{NOTE_E5,374},{NOTE_DS5,750},{NOTE_B4,374},{NOTE_DS5,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_AS4,374},{NOTE_G4,2249},{0,0}};
 80009a2:	f507 530f 	add.w	r3, r7, #9152	; 0x23c0
 80009a6:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80009aa:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80009ae:	4a2f      	ldr	r2, [pc, #188]	; (8000a6c <initTonesDictionary+0xfc>)
 80009b0:	4618      	mov	r0, r3
 80009b2:	4611      	mov	r1, r2
 80009b4:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80009b8:	461a      	mov	r2, r3
 80009ba:	f007 fd75 	bl	80084a8 <memcpy>
    struct Tone doom[]={{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_FS3,67},{NOTE_D3,67},{NOTE_B2,67},{NOTE_A3,67},{NOTE_FS3,67},{NOTE_B2,67},{NOTE_D3,67},{NOTE_FS3,67},{NOTE_A3,67},{NOTE_FS3,67},{NOTE_D3,67},{NOTE_B2,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B3,67},{NOTE_G3,67},{NOTE_E3,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_B3,67},{NOTE_G4,67},{NOTE_B4,67},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_E3,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,534},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_E3,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_C4,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_CS4,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_B3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_A3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_G3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_GS3,133},{NOTE_A3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_B3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_A3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_G3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_F3,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B3,67},{NOTE_G3,67},{NOTE_E3,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_B3,67},{NOTE_G4,67},{NOTE_B4,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{0,0}};
 80009be:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80009c2:	f103 0308 	add.w	r3, r3, #8
 80009c6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80009ca:	4a29      	ldr	r2, [pc, #164]	; (8000a70 <initTonesDictionary+0x100>)
 80009cc:	4618      	mov	r0, r3
 80009ce:	4611      	mov	r1, r2
 80009d0:	f44f 6351 	mov.w	r3, #3344	; 0xd10
 80009d4:	461a      	mov	r2, r3
 80009d6:	f007 fd67 	bl	80084a8 <memcpy>
    struct Tone fur_elise[] = {{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,750},{REST,250},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_C5,188},{NOTE_C5,188},{NOTE_C5,188},{NOTE_C5,750},{NOTE_F5,282},{NOTE_E5,94},{NOTE_E5,250},{NOTE_D5,250},{NOTE_AS5,282},{NOTE_A5,94},{NOTE_A5,188},{NOTE_G5,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_AS4,250},{NOTE_A4,250},{NOTE_A4,94},{NOTE_G4,94},{NOTE_A4,94},{NOTE_B4,94},{NOTE_C5,750},{NOTE_D5,188},{NOTE_DS5,188},{NOTE_E5,375},{NOTE_E5,188},{NOTE_F5,188},{NOTE_A4,188},{NOTE_C5,750},{NOTE_D5,282},{NOTE_B4,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_G4,94},{NOTE_G5,94},{NOTE_A4,94},{NOTE_G5,94},{NOTE_B4,94},{NOTE_G5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_E5,94},{NOTE_G5,94},{NOTE_C6,94},{NOTE_B5,94},{NOTE_A5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_D5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_G4,94},{NOTE_G5,94},{NOTE_A4,94},{NOTE_G5,94},{NOTE_B4,94},{NOTE_G5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_E5,94},{NOTE_G5,94},{NOTE_C6,94},{NOTE_B5,94},{NOTE_A5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_D5,94},{NOTE_E5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,94},{NOTE_B4,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,94},{NOTE_B4,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,375},{NOTE_B4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,375},{NOTE_B4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{REST,188},{REST,250},{NOTE_CS5,1125},{NOTE_D5,750},{NOTE_E5,188},{NOTE_F5,188},{NOTE_F5,750},{NOTE_F5,250},{NOTE_E5,1125},{NOTE_D5,750},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,750},{NOTE_A4,250},{NOTE_A4,250},{NOTE_C5,250},{NOTE_B4,250},{NOTE_A4,1125},{NOTE_CS5,1125},{NOTE_D5,750},{NOTE_E5,188},{NOTE_F5,188},{NOTE_F5,750},{NOTE_F5,250},{NOTE_F5,1125},{NOTE_DS5,750},{NOTE_D5,188},{NOTE_C5,188},{NOTE_AS4,750},{NOTE_A4,250},{NOTE_GS4,750},{NOTE_G4,250},{NOTE_A4,1125},{NOTE_B4,750},{REST,250},{NOTE_A3,141},{NOTE_C4,141},{NOTE_E4,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_D5,141},{NOTE_C5,141},{NOTE_B4,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_A5,141},{NOTE_C6,141},{NOTE_E6,141},{NOTE_D6,141},{NOTE_C6,141},{NOTE_B5,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_A5,141},{NOTE_C6,141},{NOTE_E6,141},{NOTE_D6,141},{NOTE_C6,141},{NOTE_B5,141},{NOTE_AS5,141},{NOTE_A5,141},{NOTE_GS5,141},{NOTE_G5,141},{NOTE_FS5,141},{NOTE_F5,141},{NOTE_E5,141},{NOTE_DS5,141},{NOTE_D5,141},{NOTE_CS5,141},{NOTE_C5,141},{NOTE_B4,141},{NOTE_AS4,141},{NOTE_A4,141},{NOTE_GS4,141},{NOTE_G4,141},{NOTE_FS4,141},{NOTE_F4,141},{NOTE_E4,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,375},{REST,375},{REST,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,750},{REST,250},{REST,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_E5,250},{NOTE_E5,250},{NOTE_E6,375},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,1125}};
 80009da:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80009de:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80009e2:	4a24      	ldr	r2, [pc, #144]	; (8000a74 <initTonesDictionary+0x104>)
 80009e4:	4618      	mov	r0, r3
 80009e6:	4611      	mov	r1, r2
 80009e8:	f241 23d8 	movw	r3, #4824	; 0x12d8
 80009ec:	461a      	mov	r2, r3
 80009ee:	f007 fd5b 	bl	80084a8 <memcpy>
    // Insert tones into dictionary
    insert(playlist, "super_mario_bros", 0, super_mario_bros, sizeof(super_mario_bros) / sizeof(struct Tone));
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <initTonesDictionary+0xf4>)
 80009f4:	6818      	ldr	r0, [r3, #0]
 80009f6:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80009fa:	f103 0320 	add.w	r3, r3, #32
 80009fe:	2241      	movs	r2, #65	; 0x41
 8000a00:	9200      	str	r2, [sp, #0]
 8000a02:	2200      	movs	r2, #0
 8000a04:	491c      	ldr	r1, [pc, #112]	; (8000a78 <initTonesDictionary+0x108>)
 8000a06:	f7ff fcaa 	bl	800035e <insert>
    insert(playlist, "hedwig_theme", 1, hedwig_theme, sizeof(hedwig_theme) / sizeof(struct Tone));
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <initTonesDictionary+0xf4>)
 8000a0c:	6818      	ldr	r0, [r3, #0]
 8000a0e:	f507 53ff 	add.w	r3, r7, #8160	; 0x1fe0
 8000a12:	f103 0308 	add.w	r3, r3, #8
 8000a16:	223f      	movs	r2, #63	; 0x3f
 8000a18:	9200      	str	r2, [sp, #0]
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	4917      	ldr	r1, [pc, #92]	; (8000a7c <initTonesDictionary+0x10c>)
 8000a1e:	f7ff fc9e 	bl	800035e <insert>
    insert(playlist, "doom", 2, doom, sizeof(doom) / sizeof(struct Tone));
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <initTonesDictionary+0xf4>)
 8000a24:	6818      	ldr	r0, [r3, #0]
 8000a26:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8000a2a:	f103 0308 	add.w	r3, r3, #8
 8000a2e:	3b10      	subs	r3, #16
 8000a30:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 8000a34:	9200      	str	r2, [sp, #0]
 8000a36:	2202      	movs	r2, #2
 8000a38:	4911      	ldr	r1, [pc, #68]	; (8000a80 <initTonesDictionary+0x110>)
 8000a3a:	f7ff fc90 	bl	800035e <insert>
    insert(playlist, "fur_elise", 3, fur_elise, sizeof(fur_elise) / sizeof(struct Tone));
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <initTonesDictionary+0xf4>)
 8000a40:	6818      	ldr	r0, [r3, #0]
 8000a42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a46:	3b28      	subs	r3, #40	; 0x28
 8000a48:	f240 225b 	movw	r2, #603	; 0x25b
 8000a4c:	9200      	str	r2, [sp, #0]
 8000a4e:	2203      	movs	r2, #3
 8000a50:	490c      	ldr	r1, [pc, #48]	; (8000a84 <initTonesDictionary+0x114>)
 8000a52:	f7ff fc84 	bl	800035e <insert>




}
 8000a56:	bf00      	nop
 8000a58:	f507 570f 	add.w	r7, r7, #9152	; 0x23c0
 8000a5c:	3728      	adds	r7, #40	; 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000630 	.word	0x20000630
 8000a68:	08008ee8 	.word	0x08008ee8
 8000a6c:	080090f0 	.word	0x080090f0
 8000a70:	080092e8 	.word	0x080092e8
 8000a74:	08009ff8 	.word	0x08009ff8
 8000a78:	08008eb0 	.word	0x08008eb0
 8000a7c:	08008ec4 	.word	0x08008ec4
 8000a80:	08008ed4 	.word	0x08008ed4
 8000a84:	08008edc 	.word	0x08008edc

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b096      	sub	sp, #88	; 0x58
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	struct digit _digits[10];
	_digits[0].number = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
	_digits[0].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
 8000a92:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a96:	817b      	strh	r3, [r7, #10]
			| GPIO_PIN_15;

	_digits[1].number = 1;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
	_digits[1].pattern = GPIO_PIN_12;
 8000a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa0:	823b      	strh	r3, [r7, #16]
	_digits[1].anti_pattern = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000aa2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000aa6:	827b      	strh	r3, [r7, #18]

	_digits[2].number = 2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	617b      	str	r3, [r7, #20]
	_digits[2].pattern = GPIO_PIN_13;
 8000aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab0:	833b      	strh	r3, [r7, #24]
	_digits[2].anti_pattern = GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15;
 8000ab2:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000ab6:	837b      	strh	r3, [r7, #26]

	_digits[3].number = 3;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	61fb      	str	r3, [r7, #28]
	_digits[3].pattern = GPIO_PIN_12 | GPIO_PIN_13;
 8000abc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ac0:	843b      	strh	r3, [r7, #32]
	_digits[3].anti_pattern = GPIO_PIN_14 | GPIO_PIN_15;
 8000ac2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ac6:	847b      	strh	r3, [r7, #34]	; 0x22

	_digits[4].number = 4;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
	_digits[4].pattern = GPIO_PIN_14;
 8000acc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ad0:	853b      	strh	r3, [r7, #40]	; 0x28
	_digits[4].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15;
 8000ad2:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000ad6:	857b      	strh	r3, [r7, #42]	; 0x2a

	_digits[5].number = 5;
 8000ad8:	2305      	movs	r3, #5
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
	_digits[5].pattern = GPIO_PIN_12 | GPIO_PIN_14;
 8000adc:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000ae0:	863b      	strh	r3, [r7, #48]	; 0x30
	_digits[5].anti_pattern = GPIO_PIN_13 | GPIO_PIN_15;
 8000ae2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000ae6:	867b      	strh	r3, [r7, #50]	; 0x32

	_digits[6].number = 6;
 8000ae8:	2306      	movs	r3, #6
 8000aea:	637b      	str	r3, [r7, #52]	; 0x34
	_digits[6].pattern = GPIO_PIN_13 | GPIO_PIN_14;
 8000aec:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000af0:	873b      	strh	r3, [r7, #56]	; 0x38
	_digits[6].anti_pattern = GPIO_PIN_12 | GPIO_PIN_15;
 8000af2:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000af6:	877b      	strh	r3, [r7, #58]	; 0x3a

	_digits[7].number = 7;
 8000af8:	2307      	movs	r3, #7
 8000afa:	63fb      	str	r3, [r7, #60]	; 0x3c
	_digits[7].pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 8000afc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000b00:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	_digits[7].anti_pattern = GPIO_PIN_15;
 8000b04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	_digits[8].number = 8;
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	647b      	str	r3, [r7, #68]	; 0x44
	_digits[8].pattern = GPIO_PIN_15;
 8000b10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b14:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	_digits[8].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 8000b18:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000b1c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	_digits[9].number = 9;
 8000b20:	2309      	movs	r3, #9
 8000b22:	64fb      	str	r3, [r7, #76]	; 0x4c
	_digits[9].pattern = GPIO_PIN_12 | GPIO_PIN_15;
 8000b24:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000b28:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	_digits[9].anti_pattern = GPIO_PIN_13 | GPIO_PIN_14;
 8000b2c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000b30:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	//initialize Global digits structure
	for (int i = 0; i < 10; i++) {
 8000b34:	2300      	movs	r3, #0
 8000b36:	657b      	str	r3, [r7, #84]	; 0x54
 8000b38:	e00f      	b.n	8000b5a <main+0xd2>
		digits[i] = _digits[i];
 8000b3a:	492c      	ldr	r1, [pc, #176]	; (8000bec <main+0x164>)
 8000b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b40:	00d2      	lsls	r2, r2, #3
 8000b42:	3258      	adds	r2, #88	; 0x58
 8000b44:	443a      	add	r2, r7
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	440b      	add	r3, r1
 8000b4a:	3a54      	subs	r2, #84	; 0x54
 8000b4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b50:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 0; i < 10; i++) {
 8000b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b56:	3301      	adds	r3, #1
 8000b58:	657b      	str	r3, [r7, #84]	; 0x54
 8000b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b5c:	2b09      	cmp	r3, #9
 8000b5e:	ddec      	ble.n	8000b3a <main+0xb2>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b60:	f001 f98e 	bl	8001e80 <HAL_Init>

  /* USER CODE BEGIN Init */

	//Set 7-segment PINS
	led[0] = GPIO_PIN_1;
 8000b64:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <main+0x168>)
 8000b66:	2202      	movs	r2, #2
 8000b68:	801a      	strh	r2, [r3, #0]
	led[1] = GPIO_PIN_2;
 8000b6a:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <main+0x168>)
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	805a      	strh	r2, [r3, #2]
	led[2] = GPIO_PIN_3;
 8000b70:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <main+0x168>)
 8000b72:	2208      	movs	r2, #8
 8000b74:	809a      	strh	r2, [r3, #4]
	led[3] = GPIO_PIN_4;
 8000b76:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <main+0x168>)
 8000b78:	2210      	movs	r2, #16
 8000b7a:	80da      	strh	r2, [r3, #6]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7c:	f000 f84a 	bl	8000c14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b80:	f000 faba 	bl	80010f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b84:	f000 f91e 	bl	8000dc4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000b88:	f000 f95c 	bl	8000e44 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000b8c:	f000 fa92 	bl	80010b4 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000b90:	f000 f996 	bl	8000ec0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b94:	f000 f9e8 	bl	8000f68 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000b98:	f000 fa5c 	bl	8001054 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000b9c:	f000 f8a2 	bl	8000ce4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8000ba0:	4814      	ldr	r0, [pc, #80]	; (8000bf4 <main+0x16c>)
 8000ba2:	f004 ff1b 	bl	80059dc <HAL_TIM_Base_Start_IT>
	HAL_UART_Transmit_IT(&huart1,
 8000ba6:	222c      	movs	r2, #44	; 0x2c
 8000ba8:	4913      	ldr	r1, [pc, #76]	; (8000bf8 <main+0x170>)
 8000baa:	4814      	ldr	r0, [pc, #80]	; (8000bfc <main+0x174>)
 8000bac:	f006 f91a 	bl	8006de4 <HAL_UART_Transmit_IT>
			"=============\nProgram Running\n=============\n", 44);
	HAL_UART_Receive_IT(&huart1, &d, 1);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	4913      	ldr	r1, [pc, #76]	; (8000c00 <main+0x178>)
 8000bb4:	4811      	ldr	r0, [pc, #68]	; (8000bfc <main+0x174>)
 8000bb6:	f006 f973 	bl	8006ea0 <HAL_UART_Receive_IT>
	initTonesDictionary();
 8000bba:	f7ff fed9 	bl	8000970 <initTonesDictionary>
	PWM_Start();
 8000bbe:	f000 ff49 	bl	8001a54 <PWM_Start>
	 int toneCount;
	 melody = lookup(playlist, "hedwig_theme", NULL, &toneCount);;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <main+0x17c>)
 8000bc4:	6818      	ldr	r0, [r3, #0]
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	2200      	movs	r2, #0
 8000bca:	490f      	ldr	r1, [pc, #60]	; (8000c08 <main+0x180>)
 8000bcc:	f7ff fc16 	bl	80003fc <lookup>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	4a0e      	ldr	r2, [pc, #56]	; (8000c0c <main+0x184>)
 8000bd4:	6013      	str	r3, [r2, #0]
	 Change_Melody(melody, toneCount);
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <main+0x184>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	683a      	ldr	r2, [r7, #0]
 8000bdc:	4611      	mov	r1, r2
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 fffc 	bl	8001bdc <Change_Melody>

	 HAL_ADC_Start_IT(&hadc1);
 8000be4:	480a      	ldr	r0, [pc, #40]	; (8000c10 <main+0x188>)
 8000be6:	f001 fba5 	bl	8002334 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000bea:	e7fe      	b.n	8000bea <main+0x162>
 8000bec:	20000678 	.word	0x20000678
 8000bf0:	20000638 	.word	0x20000638
 8000bf4:	20000224 	.word	0x20000224
 8000bf8:	0800b2d0 	.word	0x0800b2d0
 8000bfc:	200002bc 	.word	0x200002bc
 8000c00:	2000072c 	.word	0x2000072c
 8000c04:	20000630 	.word	0x20000630
 8000c08:	08008ec4 	.word	0x08008ec4
 8000c0c:	20000634 	.word	0x20000634
 8000c10:	2000011c 	.word	0x2000011c

08000c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b09e      	sub	sp, #120	; 0x78
 8000c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c1e:	2228      	movs	r2, #40	; 0x28
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f007 fc4e 	bl	80084c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c38:	463b      	mov	r3, r7
 8000c3a:	223c      	movs	r2, #60	; 0x3c
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f007 fc40 	bl	80084c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c44:	2303      	movs	r3, #3
 8000c46:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c48:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c4c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c52:	2301      	movs	r3, #1
 8000c54:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c56:	2310      	movs	r3, #16
 8000c58:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c62:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000c64:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c68:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f003 f98e 	bl	8003f90 <HAL_RCC_OscConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000c7a:	f000 fcf7 	bl	800166c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c7e:	230f      	movs	r3, #15
 8000c80:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c82:	2302      	movs	r3, #2
 8000c84:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c90:	2300      	movs	r3, #0
 8000c92:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c98:	2101      	movs	r1, #1
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f004 f9b6 	bl	800500c <HAL_RCC_ClockConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ca6:	f000 fce1 	bl	800166c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000caa:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <SystemClock_Config+0xcc>)
 8000cac:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000cb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000cbc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f004 fbd5 	bl	8005478 <HAL_RCCEx_PeriphCLKConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000cd4:	f000 fcca 	bl	800166c <Error_Handler>
  }
}
 8000cd8:	bf00      	nop
 8000cda:	3778      	adds	r7, #120	; 0x78
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	000210a1 	.word	0x000210a1

08000ce4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
 8000d04:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d06:	4b2e      	ldr	r3, [pc, #184]	; (8000dc0 <MX_ADC1_Init+0xdc>)
 8000d08:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d0c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d0e:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <MX_ADC1_Init+0xdc>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d14:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <MX_ADC1_Init+0xdc>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d1a:	4b29      	ldr	r3, [pc, #164]	; (8000dc0 <MX_ADC1_Init+0xdc>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d20:	4b27      	ldr	r3, [pc, #156]	; (8000dc0 <MX_ADC1_Init+0xdc>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d26:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <MX_ADC1_Init+0xdc>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d2e:	4b24      	ldr	r3, [pc, #144]	; (8000dc0 <MX_ADC1_Init+0xdc>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d34:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <MX_ADC1_Init+0xdc>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d3a:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <MX_ADC1_Init+0xdc>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d40:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <MX_ADC1_Init+0xdc>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d46:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <MX_ADC1_Init+0xdc>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <MX_ADC1_Init+0xdc>)
 8000d50:	2204      	movs	r2, #4
 8000d52:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d54:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <MX_ADC1_Init+0xdc>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <MX_ADC1_Init+0xdc>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d60:	4817      	ldr	r0, [pc, #92]	; (8000dc0 <MX_ADC1_Init+0xdc>)
 8000d62:	f001 f907 	bl	8001f74 <HAL_ADC_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000d6c:	f000 fc7e 	bl	800166c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4811      	ldr	r0, [pc, #68]	; (8000dc0 <MX_ADC1_Init+0xdc>)
 8000d7c:	f002 fa22 	bl	80031c4 <HAL_ADCEx_MultiModeConfigChannel>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000d86:	f000 fc71 	bl	800166c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d8a:	2305      	movs	r3, #5
 8000d8c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000d96:	2306      	movs	r3, #6
 8000d98:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	4619      	mov	r1, r3
 8000da6:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <MX_ADC1_Init+0xdc>)
 8000da8:	f001 ff20 	bl	8002bec <HAL_ADC_ConfigChannel>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000db2:	f000 fc5b 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	3728      	adds	r7, #40	; 0x28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2000011c 	.word	0x2000011c

08000dc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <MX_I2C1_Init+0x74>)
 8000dca:	4a1c      	ldr	r2, [pc, #112]	; (8000e3c <MX_I2C1_Init+0x78>)
 8000dcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <MX_I2C1_Init+0x74>)
 8000dd0:	4a1b      	ldr	r2, [pc, #108]	; (8000e40 <MX_I2C1_Init+0x7c>)
 8000dd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dd4:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_I2C1_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <MX_I2C1_Init+0x74>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <MX_I2C1_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <MX_I2C1_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <MX_I2C1_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_I2C1_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_I2C1_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dfe:	480e      	ldr	r0, [pc, #56]	; (8000e38 <MX_I2C1_Init+0x74>)
 8000e00:	f002 fece 	bl	8003ba0 <HAL_I2C_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e0a:	f000 fc2f 	bl	800166c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4809      	ldr	r0, [pc, #36]	; (8000e38 <MX_I2C1_Init+0x74>)
 8000e12:	f002 ff54 	bl	8003cbe <HAL_I2CEx_ConfigAnalogFilter>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e1c:	f000 fc26 	bl	800166c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e20:	2100      	movs	r1, #0
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_I2C1_Init+0x74>)
 8000e24:	f002 ff96 	bl	8003d54 <HAL_I2CEx_ConfigDigitalFilter>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e2e:	f000 fc1d 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	2000016c 	.word	0x2000016c
 8000e3c:	40005400 	.word	0x40005400
 8000e40:	2000090e 	.word	0x2000090e

08000e44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e4a:	4a1c      	ldr	r2, [pc, #112]	; (8000ebc <MX_SPI1_Init+0x78>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e5c:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e5e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e62:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e76:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e7a:	2208      	movs	r2, #8
 8000e7c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e92:	2207      	movs	r2, #7
 8000e94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e9e:	2208      	movs	r2, #8
 8000ea0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000ea4:	f004 fc98 	bl	80057d8 <HAL_SPI_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000eae:	f000 fbdd 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200001c0 	.word	0x200001c0
 8000ebc:	40013000 	.word	0x40013000

08000ec0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ede:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <MX_TIM1_Init+0xa0>)
 8000ee0:	4a20      	ldr	r2, [pc, #128]	; (8000f64 <MX_TIM1_Init+0xa4>)
 8000ee2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4800-1;
 8000ee4:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <MX_TIM1_Init+0xa0>)
 8000ee6:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000eea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eec:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <MX_TIM1_Init+0xa0>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5-1;
 8000ef2:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <MX_TIM1_Init+0xa0>)
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef8:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <MX_TIM1_Init+0xa0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <MX_TIM1_Init+0xa0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <MX_TIM1_Init+0xa0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f0a:	4815      	ldr	r0, [pc, #84]	; (8000f60 <MX_TIM1_Init+0xa0>)
 8000f0c:	f004 fd0f 	bl	800592e <HAL_TIM_Base_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000f16:	f000 fba9 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	4619      	mov	r1, r3
 8000f26:	480e      	ldr	r0, [pc, #56]	; (8000f60 <MX_TIM1_Init+0xa0>)
 8000f28:	f005 f958 	bl	80061dc <HAL_TIM_ConfigClockSource>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000f32:	f000 fb9b 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	4619      	mov	r1, r3
 8000f46:	4806      	ldr	r0, [pc, #24]	; (8000f60 <MX_TIM1_Init+0xa0>)
 8000f48:	f005 fe60 	bl	8006c0c <HAL_TIMEx_MasterConfigSynchronization>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f52:	f000 fb8b 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	3720      	adds	r7, #32
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000224 	.word	0x20000224
 8000f64:	40012c00 	.word	0x40012c00

08000f68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08e      	sub	sp, #56	; 0x38
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f88:	463b      	mov	r3, r7
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]
 8000f96:	615a      	str	r2, [r3, #20]
 8000f98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f9a:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <MX_TIM2_Init+0xe8>)
 8000f9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fa0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <MX_TIM2_Init+0xe8>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa8:	4b29      	ldr	r3, [pc, #164]	; (8001050 <MX_TIM2_Init+0xe8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000fae:	4b28      	ldr	r3, [pc, #160]	; (8001050 <MX_TIM2_Init+0xe8>)
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb6:	4b26      	ldr	r3, [pc, #152]	; (8001050 <MX_TIM2_Init+0xe8>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fbc:	4b24      	ldr	r3, [pc, #144]	; (8001050 <MX_TIM2_Init+0xe8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fc2:	4823      	ldr	r0, [pc, #140]	; (8001050 <MX_TIM2_Init+0xe8>)
 8000fc4:	f004 fcb3 	bl	800592e <HAL_TIM_Base_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000fce:	f000 fb4d 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fdc:	4619      	mov	r1, r3
 8000fde:	481c      	ldr	r0, [pc, #112]	; (8001050 <MX_TIM2_Init+0xe8>)
 8000fe0:	f005 f8fc 	bl	80061dc <HAL_TIM_ConfigClockSource>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000fea:	f000 fb3f 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fee:	4818      	ldr	r0, [pc, #96]	; (8001050 <MX_TIM2_Init+0xe8>)
 8000ff0:	f004 fd5e 	bl	8005ab0 <HAL_TIM_PWM_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000ffa:	f000 fb37 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	4619      	mov	r1, r3
 800100c:	4810      	ldr	r0, [pc, #64]	; (8001050 <MX_TIM2_Init+0xe8>)
 800100e:	f005 fdfd 	bl	8006c0c <HAL_TIMEx_MasterConfigSynchronization>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001018:	f000 fb28 	bl	800166c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800101c:	2360      	movs	r3, #96	; 0x60
 800101e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800102c:	463b      	mov	r3, r7
 800102e:	2200      	movs	r2, #0
 8001030:	4619      	mov	r1, r3
 8001032:	4807      	ldr	r0, [pc, #28]	; (8001050 <MX_TIM2_Init+0xe8>)
 8001034:	f004 ffbe 	bl	8005fb4 <HAL_TIM_PWM_ConfigChannel>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800103e:	f000 fb15 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001042:	4803      	ldr	r0, [pc, #12]	; (8001050 <MX_TIM2_Init+0xe8>)
 8001044:	f000 fc40 	bl	80018c8 <HAL_TIM_MspPostInit>

}
 8001048:	bf00      	nop
 800104a:	3738      	adds	r7, #56	; 0x38
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000270 	.word	0x20000270

08001054 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <MX_USART1_UART_Init+0x58>)
 800105a:	4a15      	ldr	r2, [pc, #84]	; (80010b0 <MX_USART1_UART_Init+0x5c>)
 800105c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <MX_USART1_UART_Init+0x58>)
 8001060:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001064:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_USART1_UART_Init+0x58>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MX_USART1_UART_Init+0x58>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_USART1_UART_Init+0x58>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <MX_USART1_UART_Init+0x58>)
 800107a:	220c      	movs	r2, #12
 800107c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <MX_USART1_UART_Init+0x58>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MX_USART1_UART_Init+0x58>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <MX_USART1_UART_Init+0x58>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MX_USART1_UART_Init+0x58>)
 8001092:	2200      	movs	r2, #0
 8001094:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001096:	4805      	ldr	r0, [pc, #20]	; (80010ac <MX_USART1_UART_Init+0x58>)
 8001098:	f005 fe56 	bl	8006d48 <HAL_UART_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80010a2:	f000 fae3 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200002bc 	.word	0x200002bc
 80010b0:	40013800 	.word	0x40013800

080010b4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80010b8:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <MX_USB_PCD_Init+0x3c>)
 80010ba:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <MX_USB_PCD_Init+0x40>)
 80010bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_USB_PCD_Init+0x3c>)
 80010c0:	2208      	movs	r2, #8
 80010c2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <MX_USB_PCD_Init+0x3c>)
 80010c6:	2202      	movs	r2, #2
 80010c8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_USB_PCD_Init+0x3c>)
 80010cc:	2202      	movs	r2, #2
 80010ce:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <MX_USB_PCD_Init+0x3c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MX_USB_PCD_Init+0x3c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80010dc:	4804      	ldr	r0, [pc, #16]	; (80010f0 <MX_USB_PCD_Init+0x3c>)
 80010de:	f002 fe85 	bl	8003dec <HAL_PCD_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80010e8:	f000 fac0 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000344 	.word	0x20000344
 80010f4:	40005c00 	.word	0x40005c00

080010f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08c      	sub	sp, #48	; 0x30
 80010fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fe:	f107 031c 	add.w	r3, r7, #28
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800110e:	4b5e      	ldr	r3, [pc, #376]	; (8001288 <MX_GPIO_Init+0x190>)
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	4a5d      	ldr	r2, [pc, #372]	; (8001288 <MX_GPIO_Init+0x190>)
 8001114:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001118:	6153      	str	r3, [r2, #20]
 800111a:	4b5b      	ldr	r3, [pc, #364]	; (8001288 <MX_GPIO_Init+0x190>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001126:	4b58      	ldr	r3, [pc, #352]	; (8001288 <MX_GPIO_Init+0x190>)
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	4a57      	ldr	r2, [pc, #348]	; (8001288 <MX_GPIO_Init+0x190>)
 800112c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001130:	6153      	str	r3, [r2, #20]
 8001132:	4b55      	ldr	r3, [pc, #340]	; (8001288 <MX_GPIO_Init+0x190>)
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800113e:	4b52      	ldr	r3, [pc, #328]	; (8001288 <MX_GPIO_Init+0x190>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	4a51      	ldr	r2, [pc, #324]	; (8001288 <MX_GPIO_Init+0x190>)
 8001144:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001148:	6153      	str	r3, [r2, #20]
 800114a:	4b4f      	ldr	r3, [pc, #316]	; (8001288 <MX_GPIO_Init+0x190>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	4b4c      	ldr	r3, [pc, #304]	; (8001288 <MX_GPIO_Init+0x190>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	4a4b      	ldr	r2, [pc, #300]	; (8001288 <MX_GPIO_Init+0x190>)
 800115c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001160:	6153      	str	r3, [r2, #20]
 8001162:	4b49      	ldr	r3, [pc, #292]	; (8001288 <MX_GPIO_Init+0x190>)
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800116e:	4b46      	ldr	r3, [pc, #280]	; (8001288 <MX_GPIO_Init+0x190>)
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	4a45      	ldr	r2, [pc, #276]	; (8001288 <MX_GPIO_Init+0x190>)
 8001174:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001178:	6153      	str	r3, [r2, #20]
 800117a:	4b43      	ldr	r3, [pc, #268]	; (8001288 <MX_GPIO_Init+0x190>)
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	4b40      	ldr	r3, [pc, #256]	; (8001288 <MX_GPIO_Init+0x190>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	4a3f      	ldr	r2, [pc, #252]	; (8001288 <MX_GPIO_Init+0x190>)
 800118c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001190:	6153      	str	r3, [r2, #20]
 8001192:	4b3d      	ldr	r3, [pc, #244]	; (8001288 <MX_GPIO_Init+0x190>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	2108      	movs	r1, #8
 80011a2:	483a      	ldr	r0, [pc, #232]	; (800128c <MX_GPIO_Init+0x194>)
 80011a4:	f002 fccc 	bl	8003b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80011a8:	2200      	movs	r2, #0
 80011aa:	f24f 011e 	movw	r1, #61470	; 0xf01e
 80011ae:	4838      	ldr	r0, [pc, #224]	; (8001290 <MX_GPIO_Init+0x198>)
 80011b0:	f002 fcc6 	bl	8003b40 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80011b4:	2308      	movs	r3, #8
 80011b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	4619      	mov	r1, r3
 80011ca:	4830      	ldr	r0, [pc, #192]	; (800128c <MX_GPIO_Init+0x194>)
 80011cc:	f002 fb3e 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT3_Pin MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT3_Pin|MEMS_INT4_Pin;
 80011d0:	2330      	movs	r3, #48	; 0x30
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011d4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80011d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	4619      	mov	r1, r3
 80011e4:	4829      	ldr	r0, [pc, #164]	; (800128c <MX_GPIO_Init+0x194>)
 80011e6:	f002 fb31 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80011ea:	2305      	movs	r3, #5
 80011ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80011ee:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80011f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001202:	f002 fb23 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001206:	230a      	movs	r3, #10
 8001208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800120a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800120e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001210:	2302      	movs	r3, #2
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	4619      	mov	r1, r3
 800121a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121e:	f002 fb15 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD1 PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001222:	f24f 031e 	movw	r3, #61470	; 0xf01e
 8001226:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001228:	2301      	movs	r3, #1
 800122a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	4619      	mov	r1, r3
 800123a:	4815      	ldr	r0, [pc, #84]	; (8001290 <MX_GPIO_Init+0x198>)
 800123c:	f002 fb06 	bl	800384c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001240:	2200      	movs	r2, #0
 8001242:	2100      	movs	r1, #0
 8001244:	2006      	movs	r0, #6
 8001246:	f002 fa54 	bl	80036f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800124a:	2006      	movs	r0, #6
 800124c:	f002 fa6d 	bl	800372a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	2100      	movs	r1, #0
 8001254:	2007      	movs	r0, #7
 8001256:	f002 fa4c 	bl	80036f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800125a:	2007      	movs	r0, #7
 800125c:	f002 fa65 	bl	800372a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8001260:	2200      	movs	r2, #0
 8001262:	2100      	movs	r1, #0
 8001264:	2008      	movs	r0, #8
 8001266:	f002 fa44 	bl	80036f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 800126a:	2008      	movs	r0, #8
 800126c:	f002 fa5d 	bl	800372a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	2100      	movs	r1, #0
 8001274:	2009      	movs	r0, #9
 8001276:	f002 fa3c 	bl	80036f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800127a:	2009      	movs	r0, #9
 800127c:	f002 fa55 	bl	800372a <HAL_NVIC_EnableIRQ>

}
 8001280:	bf00      	nop
 8001282:	3730      	adds	r7, #48	; 0x30
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40021000 	.word	0x40021000
 800128c:	48001000 	.word	0x48001000
 8001290:	48000c00 	.word	0x48000c00

08001294 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 800129e:	f000 fe49 	bl	8001f34 <HAL_GetTick>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4a91      	ldr	r2, [pc, #580]	; (80014ec <HAL_GPIO_EXTI_Callback+0x258>)
 80012a6:	6013      	str	r3, [r2, #0]
	if ((GPIO_Pin == GPIO_PIN_1) && LED != 4) {
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d116      	bne.n	80012dc <HAL_GPIO_EXTI_Callback+0x48>
 80012ae:	4b90      	ldr	r3, [pc, #576]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x25c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d012      	beq.n	80012dc <HAL_GPIO_EXTI_Callback+0x48>

		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 80012b6:	4b8d      	ldr	r3, [pc, #564]	; (80014ec <HAL_GPIO_EXTI_Callback+0x258>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b8e      	ldr	r3, [pc, #568]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x260>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80012c4:	f240 8150 	bls.w	8001568 <HAL_GPIO_EXTI_Callback+0x2d4>
//			counterInside++;
			increase(LED);
 80012c8:	4b89      	ldr	r3, [pc, #548]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x25c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fb23 	bl	8000918 <increase>
			previousMillis = currentMillis;
 80012d2:	4b86      	ldr	r3, [pc, #536]	; (80014ec <HAL_GPIO_EXTI_Callback+0x258>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a87      	ldr	r2, [pc, #540]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x260>)
 80012d8:	6013      	str	r3, [r2, #0]
		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 80012da:	e145      	b.n	8001568 <HAL_GPIO_EXTI_Callback+0x2d4>
		}
	} else if ((GPIO_Pin == GPIO_PIN_3)) {
 80012dc:	88fb      	ldrh	r3, [r7, #6]
 80012de:	2b08      	cmp	r3, #8
 80012e0:	f040 812a 	bne.w	8001538 <HAL_GPIO_EXTI_Callback+0x2a4>

		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 80012e4:	4b81      	ldr	r3, [pc, #516]	; (80014ec <HAL_GPIO_EXTI_Callback+0x258>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b82      	ldr	r3, [pc, #520]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x260>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80012f2:	f240 8139 	bls.w	8001568 <HAL_GPIO_EXTI_Callback+0x2d4>
			if (nextTurn < 6)
 80012f6:	4b80      	ldr	r3, [pc, #512]	; (80014f8 <HAL_GPIO_EXTI_Callback+0x264>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2b05      	cmp	r3, #5
 80012fc:	dc04      	bgt.n	8001308 <HAL_GPIO_EXTI_Callback+0x74>
				nextTurn++;
 80012fe:	4b7e      	ldr	r3, [pc, #504]	; (80014f8 <HAL_GPIO_EXTI_Callback+0x264>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	3301      	adds	r3, #1
 8001304:	4a7c      	ldr	r2, [pc, #496]	; (80014f8 <HAL_GPIO_EXTI_Callback+0x264>)
 8001306:	6013      	str	r3, [r2, #0]
			if ((isCorrect == -1) && nextTurn == 6) {
 8001308:	4b7c      	ldr	r3, [pc, #496]	; (80014fc <HAL_GPIO_EXTI_Callback+0x268>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001310:	d126      	bne.n	8001360 <HAL_GPIO_EXTI_Callback+0xcc>
 8001312:	4b79      	ldr	r3, [pc, #484]	; (80014f8 <HAL_GPIO_EXTI_Callback+0x264>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b06      	cmp	r3, #6
 8001318:	d122      	bne.n	8001360 <HAL_GPIO_EXTI_Callback+0xcc>
				for (int i = 0; i < 4; i++) {
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	e007      	b.n	8001330 <HAL_GPIO_EXTI_Callback+0x9c>
					carrier[i] = 0;
 8001320:	4a77      	ldr	r2, [pc, #476]	; (8001500 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	2100      	movs	r1, #0
 8001326:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int i = 0; i < 4; i++) {
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3301      	adds	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	2b03      	cmp	r3, #3
 8001334:	ddf4      	ble.n	8001320 <HAL_GPIO_EXTI_Callback+0x8c>
				    //password[i] = 0;
				}
				//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2102      	movs	r1, #2
 800133a:	4872      	ldr	r0, [pc, #456]	; (8001504 <HAL_GPIO_EXTI_Callback+0x270>)
 800133c:	f002 fc00 	bl	8003b40 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8001340:	2200      	movs	r2, #0
 8001342:	2104      	movs	r1, #4
 8001344:	486f      	ldr	r0, [pc, #444]	; (8001504 <HAL_GPIO_EXTI_Callback+0x270>)
 8001346:	f002 fbfb 	bl	8003b40 <HAL_GPIO_WritePin>
				LED = -1;
 800134a:	4b69      	ldr	r3, [pc, #420]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x25c>)
 800134c:	f04f 32ff 	mov.w	r2, #4294967295
 8001350:	601a      	str	r2, [r3, #0]
				nextTurn = 0;
 8001352:	4b69      	ldr	r3, [pc, #420]	; (80014f8 <HAL_GPIO_EXTI_Callback+0x264>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
				blink = 1;
 8001358:	4b6b      	ldr	r3, [pc, #428]	; (8001508 <HAL_GPIO_EXTI_Callback+0x274>)
 800135a:	2201      	movs	r2, #1
 800135c:	601a      	str	r2, [r3, #0]
				return;
 800135e:	e103      	b.n	8001568 <HAL_GPIO_EXTI_Callback+0x2d4>
			} else if ((isCorrect != 0 && isCorrect != 1)) {
 8001360:	4b66      	ldr	r3, [pc, #408]	; (80014fc <HAL_GPIO_EXTI_Callback+0x268>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80bb 	beq.w	80014e0 <HAL_GPIO_EXTI_Callback+0x24c>
 800136a:	4b64      	ldr	r3, [pc, #400]	; (80014fc <HAL_GPIO_EXTI_Callback+0x268>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b01      	cmp	r3, #1
 8001370:	f000 80b6 	beq.w	80014e0 <HAL_GPIO_EXTI_Callback+0x24c>

				LED += 1;
 8001374:	4b5e      	ldr	r3, [pc, #376]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	4a5d      	ldr	r2, [pc, #372]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x25c>)
 800137c:	6013      	str	r3, [r2, #0]
				if (LED == 4) {
 800137e:	4b5c      	ldr	r3, [pc, #368]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b04      	cmp	r3, #4
 8001384:	f040 80ac 	bne.w	80014e0 <HAL_GPIO_EXTI_Callback+0x24c>
					int bool = 1;
 8001388:	2301      	movs	r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
					for (int i = 0; i < 4; i++) {
 800138c:	2300      	movs	r3, #0
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	e061      	b.n	8001456 <HAL_GPIO_EXTI_Callback+0x1c2>
						if (password[i] != carrier[i]) {
 8001392:	4a5e      	ldr	r2, [pc, #376]	; (800150c <HAL_GPIO_EXTI_Callback+0x278>)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800139a:	4959      	ldr	r1, [pc, #356]	; (8001500 <HAL_GPIO_EXTI_Callback+0x26c>)
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d054      	beq.n	8001450 <HAL_GPIO_EXTI_Callback+0x1bc>
							bool = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
							logFailed[4] = carrier[0] + '0';
 80013aa:	4b55      	ldr	r3, [pc, #340]	; (8001500 <HAL_GPIO_EXTI_Callback+0x26c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	3330      	adds	r3, #48	; 0x30
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	4b56      	ldr	r3, [pc, #344]	; (8001510 <HAL_GPIO_EXTI_Callback+0x27c>)
 80013b6:	711a      	strb	r2, [r3, #4]
							logFailed[5] = carrier[1] + '0';
 80013b8:	4b51      	ldr	r3, [pc, #324]	; (8001500 <HAL_GPIO_EXTI_Callback+0x26c>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	3330      	adds	r3, #48	; 0x30
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4b53      	ldr	r3, [pc, #332]	; (8001510 <HAL_GPIO_EXTI_Callback+0x27c>)
 80013c4:	715a      	strb	r2, [r3, #5]
							logFailed[6] = carrier[2] + '0';
 80013c6:	4b4e      	ldr	r3, [pc, #312]	; (8001500 <HAL_GPIO_EXTI_Callback+0x26c>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	3330      	adds	r3, #48	; 0x30
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	4b4f      	ldr	r3, [pc, #316]	; (8001510 <HAL_GPIO_EXTI_Callback+0x27c>)
 80013d2:	719a      	strb	r2, [r3, #6]
							logFailed[7] = carrier[3] + '0';
 80013d4:	4b4a      	ldr	r3, [pc, #296]	; (8001500 <HAL_GPIO_EXTI_Callback+0x26c>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	3330      	adds	r3, #48	; 0x30
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4b4c      	ldr	r3, [pc, #304]	; (8001510 <HAL_GPIO_EXTI_Callback+0x27c>)
 80013e0:	71da      	strb	r2, [r3, #7]
							isCorrect = 0;
 80013e2:	4b46      	ldr	r3, [pc, #280]	; (80014fc <HAL_GPIO_EXTI_Callback+0x268>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
							if (logStatus)
 80013e8:	4b4a      	ldr	r3, [pc, #296]	; (8001514 <HAL_GPIO_EXTI_Callback+0x280>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d004      	beq.n	80013fa <HAL_GPIO_EXTI_Callback+0x166>
								HAL_UART_Transmit_IT(&huart1, logFailed, 18);
 80013f0:	2212      	movs	r2, #18
 80013f2:	4947      	ldr	r1, [pc, #284]	; (8001510 <HAL_GPIO_EXTI_Callback+0x27c>)
 80013f4:	4848      	ldr	r0, [pc, #288]	; (8001518 <HAL_GPIO_EXTI_Callback+0x284>)
 80013f6:	f005 fcf5 	bl	8006de4 <HAL_UART_Transmit_IT>
							prevEnterTime = HAL_GetTick();
 80013fa:	f000 fd9b 	bl	8001f34 <HAL_GetTick>
 80013fe:	4603      	mov	r3, r0
 8001400:	4a46      	ldr	r2, [pc, #280]	; (800151c <HAL_GPIO_EXTI_Callback+0x288>)
 8001402:	6013      	str	r3, [r2, #0]
							wrongPassCounter++;
 8001404:	4b46      	ldr	r3, [pc, #280]	; (8001520 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	3301      	adds	r3, #1
 800140a:	4a45      	ldr	r2, [pc, #276]	; (8001520 <HAL_GPIO_EXTI_Callback+0x28c>)
 800140c:	6013      	str	r3, [r2, #0]
							if (wrongPassCounter % 3 == 0)
 800140e:	4b44      	ldr	r3, [pc, #272]	; (8001520 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001410:	6819      	ldr	r1, [r3, #0]
 8001412:	4b44      	ldr	r3, [pc, #272]	; (8001524 <HAL_GPIO_EXTI_Callback+0x290>)
 8001414:	fb83 3201 	smull	r3, r2, r3, r1
 8001418:	17cb      	asrs	r3, r1, #31
 800141a:	1ad2      	subs	r2, r2, r3
 800141c:	4613      	mov	r3, r2
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4413      	add	r3, r2
 8001422:	1aca      	subs	r2, r1, r3
 8001424:	2a00      	cmp	r2, #0
 8001426:	d103      	bne.n	8001430 <HAL_GPIO_EXTI_Callback+0x19c>
								buzzer_flag = SuperWrongPass;
 8001428:	4b3f      	ldr	r3, [pc, #252]	; (8001528 <HAL_GPIO_EXTI_Callback+0x294>)
 800142a:	2204      	movs	r2, #4
 800142c:	701a      	strb	r2, [r3, #0]
 800142e:	e002      	b.n	8001436 <HAL_GPIO_EXTI_Callback+0x1a2>
							else
								buzzer_flag = WrongPass;
 8001430:	4b3d      	ldr	r3, [pc, #244]	; (8001528 <HAL_GPIO_EXTI_Callback+0x294>)
 8001432:	2203      	movs	r2, #3
 8001434:	701a      	strb	r2, [r3, #0]
							buzzerEnterTime = HAL_GetTick();
 8001436:	f000 fd7d 	bl	8001f34 <HAL_GetTick>
 800143a:	4603      	mov	r3, r0
 800143c:	4a3b      	ldr	r2, [pc, #236]	; (800152c <HAL_GPIO_EXTI_Callback+0x298>)
 800143e:	6013      	str	r3, [r2, #0]
							if (alertStatus)
 8001440:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 808e 	beq.w	8001566 <HAL_GPIO_EXTI_Callback+0x2d2>
								PWM_Start();
 800144a:	f000 fb03 	bl	8001a54 <PWM_Start>
							return;
 800144e:	e08a      	b.n	8001566 <HAL_GPIO_EXTI_Callback+0x2d2>
					for (int i = 0; i < 4; i++) {
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	3301      	adds	r3, #1
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	2b03      	cmp	r3, #3
 800145a:	dd9a      	ble.n	8001392 <HAL_GPIO_EXTI_Callback+0xfe>
						}
					}
					if (bool) {
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d03e      	beq.n	80014e0 <HAL_GPIO_EXTI_Callback+0x24c>
						logCorrect[4] = carrier[0] + '0';
 8001462:	4b27      	ldr	r3, [pc, #156]	; (8001500 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	3330      	adds	r3, #48	; 0x30
 800146a:	b2da      	uxtb	r2, r3
 800146c:	4b31      	ldr	r3, [pc, #196]	; (8001534 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800146e:	711a      	strb	r2, [r3, #4]
						logCorrect[5] = carrier[1] + '0';
 8001470:	4b23      	ldr	r3, [pc, #140]	; (8001500 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	3330      	adds	r3, #48	; 0x30
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4b2e      	ldr	r3, [pc, #184]	; (8001534 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800147c:	715a      	strb	r2, [r3, #5]
						logCorrect[6] = carrier[2] + '0';
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	3330      	adds	r3, #48	; 0x30
 8001486:	b2da      	uxtb	r2, r3
 8001488:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800148a:	719a      	strb	r2, [r3, #6]
						logCorrect[7] = carrier[3] + '0';
 800148c:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <HAL_GPIO_EXTI_Callback+0x26c>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	3330      	adds	r3, #48	; 0x30
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4b27      	ldr	r3, [pc, #156]	; (8001534 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001498:	71da      	strb	r2, [r3, #7]
						isCorrect = 1;
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_GPIO_EXTI_Callback+0x268>)
 800149c:	2201      	movs	r2, #1
 800149e:	601a      	str	r2, [r3, #0]
						if (logStatus)
 80014a0:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <HAL_GPIO_EXTI_Callback+0x280>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d004      	beq.n	80014b2 <HAL_GPIO_EXTI_Callback+0x21e>
							HAL_UART_Transmit_IT(&huart1, logCorrect, 19);
 80014a8:	2213      	movs	r2, #19
 80014aa:	4922      	ldr	r1, [pc, #136]	; (8001534 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80014ac:	481a      	ldr	r0, [pc, #104]	; (8001518 <HAL_GPIO_EXTI_Callback+0x284>)
 80014ae:	f005 fc99 	bl	8006de4 <HAL_UART_Transmit_IT>
						prevEnterTime = HAL_GetTick();
 80014b2:	f000 fd3f 	bl	8001f34 <HAL_GetTick>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4a18      	ldr	r2, [pc, #96]	; (800151c <HAL_GPIO_EXTI_Callback+0x288>)
 80014ba:	6013      	str	r3, [r2, #0]
						buzzer_flag = CorrectPass;
 80014bc:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <HAL_GPIO_EXTI_Callback+0x294>)
 80014be:	2202      	movs	r2, #2
 80014c0:	701a      	strb	r2, [r3, #0]
						buzzerEnterTime = HAL_GetTick();
 80014c2:	f000 fd37 	bl	8001f34 <HAL_GetTick>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4a18      	ldr	r2, [pc, #96]	; (800152c <HAL_GPIO_EXTI_Callback+0x298>)
 80014ca:	6013      	str	r3, [r2, #0]
						if (alertStatus)
 80014cc:	4b18      	ldr	r3, [pc, #96]	; (8001530 <HAL_GPIO_EXTI_Callback+0x29c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_GPIO_EXTI_Callback+0x244>
							PWM_Start();
 80014d4:	f000 fabe 	bl	8001a54 <PWM_Start>
						wrongPassCounter = 0;
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_GPIO_EXTI_Callback+0x28c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
						return;
 80014de:	e043      	b.n	8001568 <HAL_GPIO_EXTI_Callback+0x2d4>
					}
				}
			}
			previousMillis = currentMillis;
 80014e0:	4b02      	ldr	r3, [pc, #8]	; (80014ec <HAL_GPIO_EXTI_Callback+0x258>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a03      	ldr	r2, [pc, #12]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x260>)
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	e03e      	b.n	8001568 <HAL_GPIO_EXTI_Callback+0x2d4>
 80014ea:	bf00      	nop
 80014ec:	20000658 	.word	0x20000658
 80014f0:	20000674 	.word	0x20000674
 80014f4:	20000654 	.word	0x20000654
 80014f8:	20000664 	.word	0x20000664
 80014fc:	20000040 	.word	0x20000040
 8001500:	20000640 	.word	0x20000640
 8001504:	48000800 	.word	0x48000800
 8001508:	20000044 	.word	0x20000044
 800150c:	20000000 	.word	0x20000000
 8001510:	20000024 	.word	0x20000024
 8001514:	20000038 	.word	0x20000038
 8001518:	200002bc 	.word	0x200002bc
 800151c:	2000066c 	.word	0x2000066c
 8001520:	20000650 	.word	0x20000650
 8001524:	55555556 	.word	0x55555556
 8001528:	20000048 	.word	0x20000048
 800152c:	20000670 	.word	0x20000670
 8001530:	2000003c 	.word	0x2000003c
 8001534:	20000010 	.word	0x20000010
		}

	} else if (GPIO_Pin == GPIO_PIN_0 && isCorrect == 0) {
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d114      	bne.n	8001568 <HAL_GPIO_EXTI_Callback+0x2d4>
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d110      	bne.n	8001568 <HAL_GPIO_EXTI_Callback+0x2d4>
		blink = 0;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
		isCorrect = -1;
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_GPIO_EXTI_Callback+0x2dc>)
 800154e:	f04f 32ff 	mov.w	r2, #4294967295
 8001552:	601a      	str	r2, [r3, #0]
		prevEnterTime = HAL_GetTick();
 8001554:	f000 fcee 	bl	8001f34 <HAL_GetTick>
 8001558:	4603      	mov	r3, r0
 800155a:	4a07      	ldr	r2, [pc, #28]	; (8001578 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800155c:	6013      	str	r3, [r2, #0]
//		PWM_Stop();
		buzzer_flag = NONE;
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001560:	2205      	movs	r2, #5
 8001562:	701a      	strb	r2, [r3, #0]
 8001564:	e000      	b.n	8001568 <HAL_GPIO_EXTI_Callback+0x2d4>
							return;
 8001566:	bf00      	nop
	}
}
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000040 	.word	0x20000040
 8001574:	20000044 	.word	0x20000044
 8001578:	2000066c 	.word	0x2000066c
 800157c:	20000048 	.word	0x20000048

08001580 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a31      	ldr	r2, [pc, #196]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d15c      	bne.n	800164c <HAL_TIM_PeriodElapsedCallback+0xcc>
		if (index == LED && HAL_GetTick() - prevTime < 400) {
 8001592:	4b31      	ldr	r3, [pc, #196]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	4b31      	ldr	r3, [pc, #196]	; (800165c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d119      	bne.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0x52>
 800159e:	f000 fcc9 	bl	8001f34 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80015ae:	d210      	bcs.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0x52>
			display_number(index, carrier[index]);
 80015b0:	4b29      	ldr	r3, [pc, #164]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b28      	ldr	r3, [pc, #160]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	492a      	ldr	r1, [pc, #168]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80015ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015be:	4619      	mov	r1, r3
 80015c0:	4610      	mov	r0, r2
 80015c2:	f7ff f975 	bl	80008b0 <display_number>
			coolDownTimer = HAL_GetTick();
 80015c6:	f000 fcb5 	bl	8001f34 <HAL_GetTick>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4a26      	ldr	r2, [pc, #152]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	e02d      	b.n	800162e <HAL_TIM_PeriodElapsedCallback+0xae>
		} else if (index == LED && HAL_GetTick() - prevTime > 900) {
 80015d2:	4b21      	ldr	r3, [pc, #132]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	4b21      	ldr	r3, [pc, #132]	; (800165c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d116      	bne.n	800160c <HAL_TIM_PeriodElapsedCallback+0x8c>
 80015de:	f000 fca9 	bl	8001f34 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80015ee:	d90d      	bls.n	800160c <HAL_TIM_PeriodElapsedCallback+0x8c>
			//coolDown
			if (HAL_GetTick() - coolDownTimer > 100) {
 80015f0:	f000 fca0 	bl	8001f34 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b64      	cmp	r3, #100	; 0x64
 80015fe:	d916      	bls.n	800162e <HAL_TIM_PeriodElapsedCallback+0xae>
				prevTime = HAL_GetTick();
 8001600:	f000 fc98 	bl	8001f34 <HAL_GetTick>
 8001604:	4603      	mov	r3, r0
 8001606:	4a16      	ldr	r2, [pc, #88]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001608:	6013      	str	r3, [r2, #0]
			if (HAL_GetTick() - coolDownTimer > 100) {
 800160a:	e010      	b.n	800162e <HAL_TIM_PeriodElapsedCallback+0xae>
			}
		} else if (index != LED) {
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d00a      	beq.n	800162e <HAL_TIM_PeriodElapsedCallback+0xae>
			display_number(index, carrier[index]);
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4910      	ldr	r1, [pc, #64]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001622:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001626:	4619      	mov	r1, r3
 8001628:	4610      	mov	r0, r2
 800162a:	f7ff f941 	bl	80008b0 <display_number>
		}
		if (index == 4) {
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b04      	cmp	r3, #4
 8001634:	d105      	bne.n	8001642 <HAL_TIM_PeriodElapsedCallback+0xc2>
			index = 0;
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
			init_display();
 800163c:	f7ff f98c 	bl	8000958 <init_display>
//		case SuperWrongPass:
//			PWM_Change_Tone(1000, _volume);
//			break;
//		}
	}
}
 8001640:	e004      	b.n	800164c <HAL_TIM_PeriodElapsedCallback+0xcc>
			++index;
 8001642:	4b05      	ldr	r3, [pc, #20]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	3301      	adds	r3, #1
 8001648:	4a03      	ldr	r2, [pc, #12]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40012c00 	.word	0x40012c00
 8001658:	20000668 	.word	0x20000668
 800165c:	20000674 	.word	0x20000674
 8001660:	2000065c 	.word	0x2000065c
 8001664:	20000640 	.word	0x20000640
 8001668:	20000660 	.word	0x20000660

0800166c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
}
 8001672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001674:	e7fe      	b.n	8001674 <Error_Handler+0x8>
	...

08001678 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <HAL_MspInit+0x44>)
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <HAL_MspInit+0x44>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6193      	str	r3, [r2, #24]
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <HAL_MspInit+0x44>)
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_MspInit+0x44>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	4a08      	ldr	r2, [pc, #32]	; (80016bc <HAL_MspInit+0x44>)
 800169c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a0:	61d3      	str	r3, [r2, #28]
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_MspInit+0x44>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016ae:	2007      	movs	r0, #7
 80016b0:	f002 f814 	bl	80036dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40021000 	.word	0x40021000

080016c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	; 0x28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016e0:	d12b      	bne.n	800173a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <HAL_ADC_MspInit+0x84>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	4a17      	ldr	r2, [pc, #92]	; (8001744 <HAL_ADC_MspInit+0x84>)
 80016e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ec:	6153      	str	r3, [r2, #20]
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_ADC_MspInit+0x84>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_ADC_MspInit+0x84>)
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	4a11      	ldr	r2, [pc, #68]	; (8001744 <HAL_ADC_MspInit+0x84>)
 8001700:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001704:	6153      	str	r3, [r2, #20]
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <HAL_ADC_MspInit+0x84>)
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001712:	2310      	movs	r3, #16
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001716:	2303      	movs	r3, #3
 8001718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	4808      	ldr	r0, [pc, #32]	; (8001748 <HAL_ADC_MspInit+0x88>)
 8001726:	f002 f891 	bl	800384c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	2012      	movs	r0, #18
 8001730:	f001 ffdf 	bl	80036f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001734:	2012      	movs	r0, #18
 8001736:	f001 fff8 	bl	800372a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800173a:	bf00      	nop
 800173c:	3728      	adds	r7, #40	; 0x28
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000
 8001748:	48001400 	.word	0x48001400

0800174c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	; 0x28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a17      	ldr	r2, [pc, #92]	; (80017c8 <HAL_I2C_MspInit+0x7c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d127      	bne.n	80017be <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176e:	4b17      	ldr	r3, [pc, #92]	; (80017cc <HAL_I2C_MspInit+0x80>)
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	4a16      	ldr	r2, [pc, #88]	; (80017cc <HAL_I2C_MspInit+0x80>)
 8001774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001778:	6153      	str	r3, [r2, #20]
 800177a:	4b14      	ldr	r3, [pc, #80]	; (80017cc <HAL_I2C_MspInit+0x80>)
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001786:	23c0      	movs	r3, #192	; 0xc0
 8001788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800178a:	2312      	movs	r3, #18
 800178c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800178e:	2301      	movs	r3, #1
 8001790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001792:	2303      	movs	r3, #3
 8001794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001796:	2304      	movs	r3, #4
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	4619      	mov	r1, r3
 80017a0:	480b      	ldr	r0, [pc, #44]	; (80017d0 <HAL_I2C_MspInit+0x84>)
 80017a2:	f002 f853 	bl	800384c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_I2C_MspInit+0x80>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	4a08      	ldr	r2, [pc, #32]	; (80017cc <HAL_I2C_MspInit+0x80>)
 80017ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017b0:	61d3      	str	r3, [r2, #28]
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_I2C_MspInit+0x80>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017be:	bf00      	nop
 80017c0:	3728      	adds	r7, #40	; 0x28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40005400 	.word	0x40005400
 80017cc:	40021000 	.word	0x40021000
 80017d0:	48000400 	.word	0x48000400

080017d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a17      	ldr	r2, [pc, #92]	; (8001850 <HAL_SPI_MspInit+0x7c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d128      	bne.n	8001848 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017f6:	4b17      	ldr	r3, [pc, #92]	; (8001854 <HAL_SPI_MspInit+0x80>)
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	4a16      	ldr	r2, [pc, #88]	; (8001854 <HAL_SPI_MspInit+0x80>)
 80017fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001800:	6193      	str	r3, [r2, #24]
 8001802:	4b14      	ldr	r3, [pc, #80]	; (8001854 <HAL_SPI_MspInit+0x80>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <HAL_SPI_MspInit+0x80>)
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	4a10      	ldr	r2, [pc, #64]	; (8001854 <HAL_SPI_MspInit+0x80>)
 8001814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001818:	6153      	str	r3, [r2, #20]
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <HAL_SPI_MspInit+0x80>)
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001826:	23e0      	movs	r3, #224	; 0xe0
 8001828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001832:	2303      	movs	r3, #3
 8001834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001836:	2305      	movs	r3, #5
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001844:	f002 f802 	bl	800384c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001848:	bf00      	nop
 800184a:	3728      	adds	r7, #40	; 0x28
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40013000 	.word	0x40013000
 8001854:	40021000 	.word	0x40021000

08001858 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a16      	ldr	r2, [pc, #88]	; (80018c0 <HAL_TIM_Base_MspInit+0x68>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d114      	bne.n	8001894 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800186a:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <HAL_TIM_Base_MspInit+0x6c>)
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	4a15      	ldr	r2, [pc, #84]	; (80018c4 <HAL_TIM_Base_MspInit+0x6c>)
 8001870:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001874:	6193      	str	r3, [r2, #24]
 8001876:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <HAL_TIM_Base_MspInit+0x6c>)
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	2019      	movs	r0, #25
 8001888:	f001 ff33 	bl	80036f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800188c:	2019      	movs	r0, #25
 800188e:	f001 ff4c 	bl	800372a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001892:	e010      	b.n	80018b6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800189c:	d10b      	bne.n	80018b6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <HAL_TIM_Base_MspInit+0x6c>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	4a08      	ldr	r2, [pc, #32]	; (80018c4 <HAL_TIM_Base_MspInit+0x6c>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	61d3      	str	r3, [r2, #28]
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_TIM_Base_MspInit+0x6c>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40012c00 	.word	0x40012c00
 80018c4:	40021000 	.word	0x40021000

080018c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018e8:	d11d      	bne.n	8001926 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_TIM_MspPostInit+0x68>)
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	4a10      	ldr	r2, [pc, #64]	; (8001930 <HAL_TIM_MspPostInit+0x68>)
 80018f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f4:	6153      	str	r3, [r2, #20]
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <HAL_TIM_MspPostInit+0x68>)
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001906:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001910:	2300      	movs	r3, #0
 8001912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001914:	2301      	movs	r3, #1
 8001916:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	4619      	mov	r1, r3
 800191e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001922:	f001 ff93 	bl	800384c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001926:	bf00      	nop
 8001928:	3720      	adds	r7, #32
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000

08001934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	; 0x28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a1b      	ldr	r2, [pc, #108]	; (80019c0 <HAL_UART_MspInit+0x8c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d12f      	bne.n	80019b6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001956:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_UART_MspInit+0x90>)
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	4a1a      	ldr	r2, [pc, #104]	; (80019c4 <HAL_UART_MspInit+0x90>)
 800195c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001960:	6193      	str	r3, [r2, #24]
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_UART_MspInit+0x90>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_UART_MspInit+0x90>)
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <HAL_UART_MspInit+0x90>)
 8001974:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001978:	6153      	str	r3, [r2, #20]
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_UART_MspInit+0x90>)
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001986:	2330      	movs	r3, #48	; 0x30
 8001988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001992:	2303      	movs	r3, #3
 8001994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001996:	2307      	movs	r3, #7
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	4809      	ldr	r0, [pc, #36]	; (80019c8 <HAL_UART_MspInit+0x94>)
 80019a2:	f001 ff53 	bl	800384c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	2025      	movs	r0, #37	; 0x25
 80019ac:	f001 fea1 	bl	80036f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019b0:	2025      	movs	r0, #37	; 0x25
 80019b2:	f001 feba 	bl	800372a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019b6:	bf00      	nop
 80019b8:	3728      	adds	r7, #40	; 0x28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40013800 	.word	0x40013800
 80019c4:	40021000 	.word	0x40021000
 80019c8:	48000800 	.word	0x48000800

080019cc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a18      	ldr	r2, [pc, #96]	; (8001a4c <HAL_PCD_MspInit+0x80>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d129      	bne.n	8001a42 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <HAL_PCD_MspInit+0x84>)
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	4a17      	ldr	r2, [pc, #92]	; (8001a50 <HAL_PCD_MspInit+0x84>)
 80019f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f8:	6153      	str	r3, [r2, #20]
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <HAL_PCD_MspInit+0x84>)
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001a06:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001a18:	230e      	movs	r3, #14
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a26:	f001 ff11 	bl	800384c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_PCD_MspInit+0x84>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	4a08      	ldr	r2, [pc, #32]	; (8001a50 <HAL_PCD_MspInit+0x84>)
 8001a30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a34:	61d3      	str	r3, [r2, #28]
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_PCD_MspInit+0x84>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001a42:	bf00      	nop
 8001a44:	3728      	adds	r7, #40	; 0x28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40005c00 	.word	0x40005c00
 8001a50:	40021000 	.word	0x40021000

08001a54 <PWM_Start>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PWM_Start() {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 8001a58:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <PWM_Start+0x18>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <PWM_Start+0x1c>)
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f004 f886 	bl	8005b74 <HAL_TIM_PWM_Start>
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000088 	.word	0x20000088
 8001a70:	20000730 	.word	0x20000730

08001a74 <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	460a      	mov	r2, r1
 8001a7e:	80fb      	strh	r3, [r7, #6]
 8001a80:	4613      	mov	r3, r2
 8001a82:	80bb      	strh	r3, [r7, #4]
	if (pwm_freq == 0 || pwm_freq > 20000) {
 8001a84:	88fb      	ldrh	r3, [r7, #6]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d004      	beq.n	8001a94 <PWM_Change_Tone+0x20>
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d937      	bls.n	8001b04 <PWM_Change_Tone+0x90>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 8001a94:	4b4e      	ldr	r3, [pc, #312]	; (8001bd0 <PWM_Change_Tone+0x15c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d105      	bne.n	8001aa8 <PWM_Change_Tone+0x34>
 8001a9c:	4b4d      	ldr	r3, [pc, #308]	; (8001bd4 <PWM_Change_Tone+0x160>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	635a      	str	r2, [r3, #52]	; 0x34
 8001aa6:	e08e      	b.n	8001bc6 <PWM_Change_Tone+0x152>
 8001aa8:	4b49      	ldr	r3, [pc, #292]	; (8001bd0 <PWM_Change_Tone+0x15c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d105      	bne.n	8001abc <PWM_Change_Tone+0x48>
 8001ab0:	4b48      	ldr	r3, [pc, #288]	; (8001bd4 <PWM_Change_Tone+0x160>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	6393      	str	r3, [r2, #56]	; 0x38
 8001aba:	e084      	b.n	8001bc6 <PWM_Change_Tone+0x152>
 8001abc:	4b44      	ldr	r3, [pc, #272]	; (8001bd0 <PWM_Change_Tone+0x15c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d105      	bne.n	8001ad0 <PWM_Change_Tone+0x5c>
 8001ac4:	4b43      	ldr	r3, [pc, #268]	; (8001bd4 <PWM_Change_Tone+0x160>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	2300      	movs	r3, #0
 8001acc:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001ace:	e07a      	b.n	8001bc6 <PWM_Change_Tone+0x152>
 8001ad0:	4b3f      	ldr	r3, [pc, #252]	; (8001bd0 <PWM_Change_Tone+0x15c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b0c      	cmp	r3, #12
 8001ad6:	d105      	bne.n	8001ae4 <PWM_Change_Tone+0x70>
 8001ad8:	4b3e      	ldr	r3, [pc, #248]	; (8001bd4 <PWM_Change_Tone+0x160>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	e070      	b.n	8001bc6 <PWM_Change_Tone+0x152>
 8001ae4:	4b3a      	ldr	r3, [pc, #232]	; (8001bd0 <PWM_Change_Tone+0x15c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b10      	cmp	r3, #16
 8001aea:	d105      	bne.n	8001af8 <PWM_Change_Tone+0x84>
 8001aec:	4b39      	ldr	r3, [pc, #228]	; (8001bd4 <PWM_Change_Tone+0x160>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	2300      	movs	r3, #0
 8001af4:	6593      	str	r3, [r2, #88]	; 0x58
 8001af6:	e066      	b.n	8001bc6 <PWM_Change_Tone+0x152>
 8001af8:	4b36      	ldr	r3, [pc, #216]	; (8001bd4 <PWM_Change_Tone+0x160>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	2300      	movs	r3, #0
 8001b00:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001b02:	e060      	b.n	8001bc6 <PWM_Change_Tone+0x152>
	} else {
		const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 8001b04:	f003 fbfe 	bl	8005304 <HAL_RCC_GetSysClockFreq>
 8001b08:	61f8      	str	r0, [r7, #28]
		const uint16_t prescaler = 1;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	837b      	strh	r3, [r7, #26]
		const uint32_t timer_clock = internal_clock_freq / prescaler;
 8001b0e:	8b7b      	ldrh	r3, [r7, #26]
 8001b10:	69fa      	ldr	r2, [r7, #28]
 8001b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b16:	617b      	str	r3, [r7, #20]
		const uint32_t period_cycles = timer_clock / pwm_freq;
 8001b18:	88fb      	ldrh	r3, [r7, #6]
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b20:	613b      	str	r3, [r7, #16]
		const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 8001b22:	88bb      	ldrh	r3, [r7, #4]
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	fb02 f303 	mul.w	r3, r2, r3
 8001b2a:	4a2b      	ldr	r2, [pc, #172]	; (8001bd8 <PWM_Change_Tone+0x164>)
 8001b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b30:	09db      	lsrs	r3, r3, #7
 8001b32:	60fb      	str	r3, [r7, #12]

		pwm_timer->Instance->PSC = prescaler - 1;
 8001b34:	8b7b      	ldrh	r3, [r7, #26]
 8001b36:	1e5a      	subs	r2, r3, #1
 8001b38:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <PWM_Change_Tone+0x160>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	629a      	str	r2, [r3, #40]	; 0x28
		pwm_timer->Instance->ARR = period_cycles - 1;
 8001b40:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <PWM_Change_Tone+0x160>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	3a01      	subs	r2, #1
 8001b4a:	62da      	str	r2, [r3, #44]	; 0x2c
		pwm_timer->Instance->EGR = TIM_EGR_UG;
 8001b4c:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <PWM_Change_Tone+0x160>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2201      	movs	r2, #1
 8001b54:	615a      	str	r2, [r3, #20]
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001b56:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <PWM_Change_Tone+0x15c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d105      	bne.n	8001b6a <PWM_Change_Tone+0xf6>
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <PWM_Change_Tone+0x160>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8001b68:	e02d      	b.n	8001bc6 <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001b6a:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <PWM_Change_Tone+0x15c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d105      	bne.n	8001b7e <PWM_Change_Tone+0x10a>
 8001b72:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <PWM_Change_Tone+0x160>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001b7c:	e023      	b.n	8001bc6 <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001b7e:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <PWM_Change_Tone+0x15c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d105      	bne.n	8001b92 <PWM_Change_Tone+0x11e>
 8001b86:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <PWM_Change_Tone+0x160>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001b90:	e019      	b.n	8001bc6 <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001b92:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <PWM_Change_Tone+0x15c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b0c      	cmp	r3, #12
 8001b98:	d105      	bne.n	8001ba6 <PWM_Change_Tone+0x132>
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <PWM_Change_Tone+0x160>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001ba4:	e00f      	b.n	8001bc6 <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <PWM_Change_Tone+0x15c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b10      	cmp	r3, #16
 8001bac:	d105      	bne.n	8001bba <PWM_Change_Tone+0x146>
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <PWM_Change_Tone+0x160>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001bb8:	e005      	b.n	8001bc6 <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <PWM_Change_Tone+0x160>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001bc4:	e7ff      	b.n	8001bc6 <PWM_Change_Tone+0x152>
 8001bc6:	bf00      	nop
 8001bc8:	3720      	adds	r7, #32
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000730 	.word	0x20000730
 8001bd4:	20000088 	.word	0x20000088
 8001bd8:	10624dd3 	.word	0x10624dd3

08001bdc <Change_Melody>:

void Change_Melody(const struct Tone *melody, uint16_t tone_count) {
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	807b      	strh	r3, [r7, #2]
	melody_ptr = melody;
 8001be8:	4a07      	ldr	r2, [pc, #28]	; (8001c08 <Change_Melody+0x2c>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6013      	str	r3, [r2, #0]
	melody_tone_count = tone_count;
 8001bee:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <Change_Melody+0x30>)
 8001bf0:	887b      	ldrh	r3, [r7, #2]
 8001bf2:	8013      	strh	r3, [r2, #0]
	current_tone_number = 0;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <Change_Melody+0x34>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	801a      	strh	r2, [r3, #0]
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000734 	.word	0x20000734
 8001c0c:	20000738 	.word	0x20000738
 8001c10:	2000073a 	.word	0x2000073a

08001c14 <Update_Melody>:

void Update_Melody() {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
	if (programState != Paused && programState != IDLE) {
 8001c1a:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <Update_Melody+0x84>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d035      	beq.n	8001c8e <Update_Melody+0x7a>
 8001c22:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <Update_Melody+0x84>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d031      	beq.n	8001c8e <Update_Melody+0x7a>
		if ((HAL_GetTick() > current_tone_end)
 8001c2a:	f000 f983 	bl	8001f34 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <Update_Melody+0x88>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d92a      	bls.n	8001c8e <Update_Melody+0x7a>
				&& (current_tone_number < melody_tone_count)) {
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <Update_Melody+0x8c>)
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <Update_Melody+0x90>)
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d222      	bcs.n	8001c8e <Update_Melody+0x7a>
			const struct Tone active_tone = *(melody_ptr + current_tone_number);
 8001c48:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <Update_Melody+0x94>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <Update_Melody+0x8c>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	441a      	add	r2, r3
 8001c56:	463b      	mov	r3, r7
 8001c58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c5c:	e883 0003 	stmia.w	r3, {r0, r1}
			PWM_Change_Tone(active_tone.frequency, volume);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	4a11      	ldr	r2, [pc, #68]	; (8001cac <Update_Melody+0x98>)
 8001c66:	8812      	ldrh	r2, [r2, #0]
 8001c68:	b292      	uxth	r2, r2
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff01 	bl	8001a74 <PWM_Change_Tone>
			current_tone_end = HAL_GetTick() + active_tone.duration;
 8001c72:	f000 f95f 	bl	8001f34 <HAL_GetTick>
 8001c76:	4603      	mov	r3, r0
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	4a07      	ldr	r2, [pc, #28]	; (8001c9c <Update_Melody+0x88>)
 8001c7e:	6013      	str	r3, [r2, #0]
			current_tone_number++;
 8001c80:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <Update_Melody+0x8c>)
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	3301      	adds	r3, #1
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <Update_Melody+0x8c>)
 8001c8c:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000049 	.word	0x20000049
 8001c9c:	2000073c 	.word	0x2000073c
 8001ca0:	2000073a 	.word	0x2000073a
 8001ca4:	20000738 	.word	0x20000738
 8001ca8:	20000734 	.word	0x20000734
 8001cac:	2000008c 	.word	0x2000008c

08001cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001cb4:	e7fe      	b.n	8001cb4 <NMI_Handler+0x4>

08001cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cba:	e7fe      	b.n	8001cba <HardFault_Handler+0x4>

08001cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <MemManage_Handler+0x4>

08001cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <BusFault_Handler+0x4>

08001cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <UsageFault_Handler+0x4>

08001cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cfc:	f000 f906 	bl	8001f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	Update_Melody();
 8001d00:	f7ff ff88 	bl	8001c14 <Update_Melody>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f001 ff2f 	bl	8003b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	if (HAL_GetTick() > last_button_press + 200) {
 8001d12:	f000 f90f 	bl	8001f34 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <EXTI0_IRQHandler+0x28>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	33c8      	adds	r3, #200	; 0xc8
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d904      	bls.n	8001d2c <EXTI0_IRQHandler+0x24>
		last_button_press = HAL_GetTick();
 8001d22:	f000 f907 	bl	8001f34 <HAL_GetTick>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4a01      	ldr	r2, [pc, #4]	; (8001d30 <EXTI0_IRQHandler+0x28>)
 8001d2a:	6013      	str	r3, [r2, #0]

	}
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000740 	.word	0x20000740

08001d34 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001d38:	2002      	movs	r0, #2
 8001d3a:	f001 ff19 	bl	8003b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001d46:	2004      	movs	r0, #4
 8001d48:	f001 ff12 	bl	8003b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001d54:	2008      	movs	r0, #8
 8001d56:	f001 ff0b 	bl	8003b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <ADC1_2_IRQHandler+0x10>)
 8001d66:	f000 fc33 	bl	80025d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	2000011c 	.word	0x2000011c

08001d74 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d78:	4802      	ldr	r0, [pc, #8]	; (8001d84 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001d7a:	f003 fffb 	bl	8005d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000224 	.word	0x20000224

08001d88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <USART1_IRQHandler+0x10>)
 8001d8e:	f005 f8cb 	bl	8006f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200002bc 	.word	0x200002bc

08001d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da4:	4a14      	ldr	r2, [pc, #80]	; (8001df8 <_sbrk+0x5c>)
 8001da6:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <_sbrk+0x60>)
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <_sbrk+0x64>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d102      	bne.n	8001dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <_sbrk+0x64>)
 8001dba:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <_sbrk+0x68>)
 8001dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <_sbrk+0x64>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d207      	bcs.n	8001ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dcc:	f006 fb3a 	bl	8008444 <__errno>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dda:	e009      	b.n	8001df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <_sbrk+0x64>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <_sbrk+0x64>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <_sbrk+0x64>)
 8001dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dee:	68fb      	ldr	r3, [r7, #12]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	2000a000 	.word	0x2000a000
 8001dfc:	00000400 	.word	0x00000400
 8001e00:	20000744 	.word	0x20000744
 8001e04:	20000760 	.word	0x20000760

08001e08 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <SystemInit+0x20>)
 8001e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e12:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <SystemInit+0x20>)
 8001e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e64 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e30:	f7ff ffea 	bl	8001e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e34:	480c      	ldr	r0, [pc, #48]	; (8001e68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e36:	490d      	ldr	r1, [pc, #52]	; (8001e6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e38:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <LoopForever+0xe>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e3c:	e002      	b.n	8001e44 <LoopCopyDataInit>

08001e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e42:	3304      	adds	r3, #4

08001e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e48:	d3f9      	bcc.n	8001e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e4c:	4c0a      	ldr	r4, [pc, #40]	; (8001e78 <LoopForever+0x16>)
  movs r3, #0
 8001e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e50:	e001      	b.n	8001e56 <LoopFillZerobss>

08001e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e54:	3204      	adds	r2, #4

08001e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e58:	d3fb      	bcc.n	8001e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e5a:	f006 faf9 	bl	8008450 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e5e:	f7fe fe13 	bl	8000a88 <main>

08001e62 <LoopForever>:

LoopForever:
    b LoopForever
 8001e62:	e7fe      	b.n	8001e62 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e64:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e6c:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001e70:	0800b374 	.word	0x0800b374
  ldr r2, =_sbss
 8001e74:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001e78:	2000075c 	.word	0x2000075c

08001e7c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e7c:	e7fe      	b.n	8001e7c <ADC3_IRQHandler>
	...

08001e80 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <HAL_Init+0x28>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a07      	ldr	r2, [pc, #28]	; (8001ea8 <HAL_Init+0x28>)
 8001e8a:	f043 0310 	orr.w	r3, r3, #16
 8001e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e90:	2003      	movs	r0, #3
 8001e92:	f001 fc23 	bl	80036dc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e96:	2000      	movs	r0, #0
 8001e98:	f000 f808 	bl	8001eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e9c:	f7ff fbec 	bl	8001678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40022000 	.word	0x40022000

08001eac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_InitTick+0x54>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_InitTick+0x58>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f001 fc3b 	bl	8003746 <HAL_SYSTICK_Config>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e00e      	b.n	8001ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b0f      	cmp	r3, #15
 8001ede:	d80a      	bhi.n	8001ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee8:	f001 fc03 	bl	80036f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eec:	4a06      	ldr	r2, [pc, #24]	; (8001f08 <HAL_InitTick+0x5c>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e000      	b.n	8001ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000090 	.word	0x20000090
 8001f04:	20000098 	.word	0x20000098
 8001f08:	20000094 	.word	0x20000094

08001f0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_IncTick+0x20>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_IncTick+0x24>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <HAL_IncTick+0x24>)
 8001f1e:	6013      	str	r3, [r2, #0]
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000098 	.word	0x20000098
 8001f30:	20000748 	.word	0x20000748

08001f34 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return uwTick;  
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <HAL_GetTick+0x14>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000748 	.word	0x20000748

08001f4c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b09a      	sub	sp, #104	; 0x68
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e1c9      	b.n	8002328 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d176      	bne.n	8002094 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d152      	bne.n	8002054 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff fb79 	bl	80016c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d13b      	bne.n	8002054 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f001 fa47 	bl	8003470 <ADC_Disable>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d12f      	bne.n	8002054 <HAL_ADC_Init+0xe0>
 8001ff4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d12b      	bne.n	8002054 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002004:	f023 0302 	bic.w	r3, r3, #2
 8002008:	f043 0202 	orr.w	r2, r3, #2
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800201e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800202e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002030:	4b86      	ldr	r3, [pc, #536]	; (800224c <HAL_ADC_Init+0x2d8>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a86      	ldr	r2, [pc, #536]	; (8002250 <HAL_ADC_Init+0x2dc>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	0c9a      	lsrs	r2, r3, #18
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002046:	e002      	b.n	800204e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	3b01      	subs	r3, #1
 800204c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1f9      	bne.n	8002048 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d007      	beq.n	8002072 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800206c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002070:	d110      	bne.n	8002094 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f023 0312 	bic.w	r3, r3, #18
 800207a:	f043 0210 	orr.w	r2, r3, #16
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	f043 0201 	orr.w	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f003 0310 	and.w	r3, r3, #16
 800209c:	2b00      	cmp	r3, #0
 800209e:	f040 8136 	bne.w	800230e <HAL_ADC_Init+0x39a>
 80020a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f040 8131 	bne.w	800230e <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f040 8129 	bne.w	800230e <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020c4:	f043 0202 	orr.w	r2, r3, #2
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020d4:	d004      	beq.n	80020e0 <HAL_ADC_Init+0x16c>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a5e      	ldr	r2, [pc, #376]	; (8002254 <HAL_ADC_Init+0x2e0>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d101      	bne.n	80020e4 <HAL_ADC_Init+0x170>
 80020e0:	4b5d      	ldr	r3, [pc, #372]	; (8002258 <HAL_ADC_Init+0x2e4>)
 80020e2:	e000      	b.n	80020e6 <HAL_ADC_Init+0x172>
 80020e4:	4b5d      	ldr	r3, [pc, #372]	; (800225c <HAL_ADC_Init+0x2e8>)
 80020e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020f0:	d102      	bne.n	80020f8 <HAL_ADC_Init+0x184>
 80020f2:	4b58      	ldr	r3, [pc, #352]	; (8002254 <HAL_ADC_Init+0x2e0>)
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	e01a      	b.n	800212e <HAL_ADC_Init+0x1ba>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a55      	ldr	r2, [pc, #340]	; (8002254 <HAL_ADC_Init+0x2e0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d103      	bne.n	800210a <HAL_ADC_Init+0x196>
 8002102:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	e011      	b.n	800212e <HAL_ADC_Init+0x1ba>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a54      	ldr	r2, [pc, #336]	; (8002260 <HAL_ADC_Init+0x2ec>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d102      	bne.n	800211a <HAL_ADC_Init+0x1a6>
 8002114:	4b53      	ldr	r3, [pc, #332]	; (8002264 <HAL_ADC_Init+0x2f0>)
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	e009      	b.n	800212e <HAL_ADC_Init+0x1ba>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a51      	ldr	r2, [pc, #324]	; (8002264 <HAL_ADC_Init+0x2f0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d102      	bne.n	800212a <HAL_ADC_Init+0x1b6>
 8002124:	4b4e      	ldr	r3, [pc, #312]	; (8002260 <HAL_ADC_Init+0x2ec>)
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	e001      	b.n	800212e <HAL_ADC_Init+0x1ba>
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b01      	cmp	r3, #1
 800213a:	d108      	bne.n	800214e <HAL_ADC_Init+0x1da>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_ADC_Init+0x1da>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_ADC_Init+0x1dc>
 800214e:	2300      	movs	r3, #0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d11c      	bne.n	800218e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002154:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002156:	2b00      	cmp	r3, #0
 8002158:	d010      	beq.n	800217c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d107      	bne.n	8002176 <HAL_ADC_Init+0x202>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_ADC_Init+0x202>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <HAL_ADC_Init+0x204>
 8002176:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002178:	2b00      	cmp	r3, #0
 800217a:	d108      	bne.n	800218e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800217c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	431a      	orrs	r2, r3
 800218a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800218c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7e5b      	ldrb	r3, [r3, #25]
 8002192:	035b      	lsls	r3, r3, #13
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002198:	2a01      	cmp	r2, #1
 800219a:	d002      	beq.n	80021a2 <HAL_ADC_Init+0x22e>
 800219c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021a0:	e000      	b.n	80021a4 <HAL_ADC_Init+0x230>
 80021a2:	2200      	movs	r2, #0
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021b4:	4313      	orrs	r3, r2
 80021b6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d11b      	bne.n	80021fa <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	7e5b      	ldrb	r3, [r3, #25]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	3b01      	subs	r3, #1
 80021d0:	045a      	lsls	r2, r3, #17
 80021d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021da:	663b      	str	r3, [r7, #96]	; 0x60
 80021dc:	e00d      	b.n	80021fa <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80021e6:	f043 0220 	orr.w	r2, r3, #32
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	f043 0201 	orr.w	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d03a      	beq.n	8002278 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a16      	ldr	r2, [pc, #88]	; (8002260 <HAL_ADC_Init+0x2ec>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d004      	beq.n	8002216 <HAL_ADC_Init+0x2a2>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a14      	ldr	r2, [pc, #80]	; (8002264 <HAL_ADC_Init+0x2f0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d128      	bne.n	8002268 <HAL_ADC_Init+0x2f4>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800221e:	d012      	beq.n	8002246 <HAL_ADC_Init+0x2d2>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002228:	d00a      	beq.n	8002240 <HAL_ADC_Init+0x2cc>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002232:	d002      	beq.n	800223a <HAL_ADC_Init+0x2c6>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002238:	e018      	b.n	800226c <HAL_ADC_Init+0x2f8>
 800223a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800223e:	e015      	b.n	800226c <HAL_ADC_Init+0x2f8>
 8002240:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002244:	e012      	b.n	800226c <HAL_ADC_Init+0x2f8>
 8002246:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800224a:	e00f      	b.n	800226c <HAL_ADC_Init+0x2f8>
 800224c:	20000090 	.word	0x20000090
 8002250:	431bde83 	.word	0x431bde83
 8002254:	50000100 	.word	0x50000100
 8002258:	50000300 	.word	0x50000300
 800225c:	50000700 	.word	0x50000700
 8002260:	50000400 	.word	0x50000400
 8002264:	50000500 	.word	0x50000500
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002270:	4313      	orrs	r3, r2
 8002272:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002274:	4313      	orrs	r3, r2
 8002276:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b00      	cmp	r3, #0
 8002284:	d114      	bne.n	80022b0 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002294:	f023 0302 	bic.w	r3, r3, #2
 8002298:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	7e1b      	ldrb	r3, [r3, #24]
 800229e:	039a      	lsls	r2, r3, #14
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	4313      	orrs	r3, r2
 80022aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022ac:	4313      	orrs	r3, r2
 80022ae:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	4b1e      	ldr	r3, [pc, #120]	; (8002330 <HAL_ADC_Init+0x3bc>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80022c0:	430b      	orrs	r3, r1
 80022c2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d10c      	bne.n	80022e6 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f023 010f 	bic.w	r1, r3, #15
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	1e5a      	subs	r2, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	631a      	str	r2, [r3, #48]	; 0x30
 80022e4:	e007      	b.n	80022f6 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 020f 	bic.w	r2, r2, #15
 80022f4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	f023 0303 	bic.w	r3, r3, #3
 8002304:	f043 0201 	orr.w	r2, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	641a      	str	r2, [r3, #64]	; 0x40
 800230c:	e00a      	b.n	8002324 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f023 0312 	bic.w	r3, r3, #18
 8002316:	f043 0210 	orr.w	r2, r3, #16
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800231e:	2301      	movs	r3, #1
 8002320:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002324:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002328:	4618      	mov	r0, r3
 800232a:	3768      	adds	r7, #104	; 0x68
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	fff0c007 	.word	0xfff0c007

08002334 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b00      	cmp	r3, #0
 800234c:	f040 8123 	bne.w	8002596 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_ADC_Start_IT+0x2a>
 800235a:	2302      	movs	r3, #2
 800235c:	e11e      	b.n	800259c <HAL_ADC_Start_IT+0x268>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f001 f81e 	bl	80033a8 <ADC_Enable>
 800236c:	4603      	mov	r3, r0
 800236e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	2b00      	cmp	r3, #0
 8002374:	f040 810a 	bne.w	800258c <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002380:	f023 0301 	bic.w	r3, r3, #1
 8002384:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002394:	d004      	beq.n	80023a0 <HAL_ADC_Start_IT+0x6c>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a82      	ldr	r2, [pc, #520]	; (80025a4 <HAL_ADC_Start_IT+0x270>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d106      	bne.n	80023ae <HAL_ADC_Start_IT+0x7a>
 80023a0:	4b81      	ldr	r3, [pc, #516]	; (80025a8 <HAL_ADC_Start_IT+0x274>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d010      	beq.n	80023ce <HAL_ADC_Start_IT+0x9a>
 80023ac:	e005      	b.n	80023ba <HAL_ADC_Start_IT+0x86>
 80023ae:	4b7f      	ldr	r3, [pc, #508]	; (80025ac <HAL_ADC_Start_IT+0x278>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 031f 	and.w	r3, r3, #31
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d009      	beq.n	80023ce <HAL_ADC_Start_IT+0x9a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023c2:	d004      	beq.n	80023ce <HAL_ADC_Start_IT+0x9a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a79      	ldr	r2, [pc, #484]	; (80025b0 <HAL_ADC_Start_IT+0x27c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d115      	bne.n	80023fa <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d036      	beq.n	8002456 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80023f8:	e02d      	b.n	8002456 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800240e:	d004      	beq.n	800241a <HAL_ADC_Start_IT+0xe6>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a63      	ldr	r2, [pc, #396]	; (80025a4 <HAL_ADC_Start_IT+0x270>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d10a      	bne.n	8002430 <HAL_ADC_Start_IT+0xfc>
 800241a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002424:	2b00      	cmp	r3, #0
 8002426:	bf14      	ite	ne
 8002428:	2301      	movne	r3, #1
 800242a:	2300      	moveq	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	e008      	b.n	8002442 <HAL_ADC_Start_IT+0x10e>
 8002430:	4b5f      	ldr	r3, [pc, #380]	; (80025b0 <HAL_ADC_Start_IT+0x27c>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf14      	ite	ne
 800243c:	2301      	movne	r3, #1
 800243e:	2300      	moveq	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d007      	beq.n	8002456 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800244e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800245e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002462:	d106      	bne.n	8002472 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002468:	f023 0206 	bic.w	r2, r3, #6
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	645a      	str	r2, [r3, #68]	; 0x44
 8002470:	e002      	b.n	8002478 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	221c      	movs	r2, #28
 8002486:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	2b08      	cmp	r3, #8
 800248e:	d110      	bne.n	80024b2 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0204 	bic.w	r2, r2, #4
 800249e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0208 	orr.w	r2, r2, #8
 80024ae:	605a      	str	r2, [r3, #4]
          break;
 80024b0:	e008      	b.n	80024c4 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f042 020c 	orr.w	r2, r2, #12
 80024c0:	605a      	str	r2, [r3, #4]
          break;
 80024c2:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d107      	bne.n	80024dc <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0210 	bic.w	r2, r2, #16
 80024da:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024e4:	d004      	beq.n	80024f0 <HAL_ADC_Start_IT+0x1bc>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a2e      	ldr	r2, [pc, #184]	; (80025a4 <HAL_ADC_Start_IT+0x270>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d106      	bne.n	80024fe <HAL_ADC_Start_IT+0x1ca>
 80024f0:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <HAL_ADC_Start_IT+0x274>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d03e      	beq.n	800257a <HAL_ADC_Start_IT+0x246>
 80024fc:	e005      	b.n	800250a <HAL_ADC_Start_IT+0x1d6>
 80024fe:	4b2b      	ldr	r3, [pc, #172]	; (80025ac <HAL_ADC_Start_IT+0x278>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	2b00      	cmp	r3, #0
 8002508:	d037      	beq.n	800257a <HAL_ADC_Start_IT+0x246>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002512:	d004      	beq.n	800251e <HAL_ADC_Start_IT+0x1ea>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a22      	ldr	r2, [pc, #136]	; (80025a4 <HAL_ADC_Start_IT+0x270>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d106      	bne.n	800252c <HAL_ADC_Start_IT+0x1f8>
 800251e:	4b22      	ldr	r3, [pc, #136]	; (80025a8 <HAL_ADC_Start_IT+0x274>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 031f 	and.w	r3, r3, #31
 8002526:	2b05      	cmp	r3, #5
 8002528:	d027      	beq.n	800257a <HAL_ADC_Start_IT+0x246>
 800252a:	e005      	b.n	8002538 <HAL_ADC_Start_IT+0x204>
 800252c:	4b1f      	ldr	r3, [pc, #124]	; (80025ac <HAL_ADC_Start_IT+0x278>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 031f 	and.w	r3, r3, #31
 8002534:	2b05      	cmp	r3, #5
 8002536:	d020      	beq.n	800257a <HAL_ADC_Start_IT+0x246>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002540:	d004      	beq.n	800254c <HAL_ADC_Start_IT+0x218>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a17      	ldr	r2, [pc, #92]	; (80025a4 <HAL_ADC_Start_IT+0x270>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d106      	bne.n	800255a <HAL_ADC_Start_IT+0x226>
 800254c:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <HAL_ADC_Start_IT+0x274>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	2b09      	cmp	r3, #9
 8002556:	d010      	beq.n	800257a <HAL_ADC_Start_IT+0x246>
 8002558:	e005      	b.n	8002566 <HAL_ADC_Start_IT+0x232>
 800255a:	4b14      	ldr	r3, [pc, #80]	; (80025ac <HAL_ADC_Start_IT+0x278>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	2b09      	cmp	r3, #9
 8002564:	d009      	beq.n	800257a <HAL_ADC_Start_IT+0x246>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800256e:	d004      	beq.n	800257a <HAL_ADC_Start_IT+0x246>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a0e      	ldr	r2, [pc, #56]	; (80025b0 <HAL_ADC_Start_IT+0x27c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d10f      	bne.n	800259a <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 0204 	orr.w	r2, r2, #4
 8002588:	609a      	str	r2, [r3, #8]
 800258a:	e006      	b.n	800259a <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002594:	e001      	b.n	800259a <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002596:	2302      	movs	r3, #2
 8002598:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800259a:	7bfb      	ldrb	r3, [r7, #15]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	50000100 	.word	0x50000100
 80025a8:	50000300 	.word	0x50000300
 80025ac:	50000700 	.word	0x50000700
 80025b0:	50000400 	.word	0x50000400

080025b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80025d8:	2300      	movs	r3, #0
 80025da:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d004      	beq.n	8002608 <HAL_ADC_IRQHandler+0x38>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10b      	bne.n	8002620 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 80bc 	beq.w	800278c <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 80b6 	beq.w	800278c <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	2b00      	cmp	r3, #0
 800262a:	d105      	bne.n	8002638 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002640:	d004      	beq.n	800264c <HAL_ADC_IRQHandler+0x7c>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a90      	ldr	r2, [pc, #576]	; (8002888 <HAL_ADC_IRQHandler+0x2b8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d106      	bne.n	800265a <HAL_ADC_IRQHandler+0x8a>
 800264c:	4b8f      	ldr	r3, [pc, #572]	; (800288c <HAL_ADC_IRQHandler+0x2bc>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 031f 	and.w	r3, r3, #31
 8002654:	2b00      	cmp	r3, #0
 8002656:	d03e      	beq.n	80026d6 <HAL_ADC_IRQHandler+0x106>
 8002658:	e005      	b.n	8002666 <HAL_ADC_IRQHandler+0x96>
 800265a:	4b8d      	ldr	r3, [pc, #564]	; (8002890 <HAL_ADC_IRQHandler+0x2c0>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 031f 	and.w	r3, r3, #31
 8002662:	2b00      	cmp	r3, #0
 8002664:	d037      	beq.n	80026d6 <HAL_ADC_IRQHandler+0x106>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800266e:	d004      	beq.n	800267a <HAL_ADC_IRQHandler+0xaa>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a84      	ldr	r2, [pc, #528]	; (8002888 <HAL_ADC_IRQHandler+0x2b8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d106      	bne.n	8002688 <HAL_ADC_IRQHandler+0xb8>
 800267a:	4b84      	ldr	r3, [pc, #528]	; (800288c <HAL_ADC_IRQHandler+0x2bc>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 031f 	and.w	r3, r3, #31
 8002682:	2b05      	cmp	r3, #5
 8002684:	d027      	beq.n	80026d6 <HAL_ADC_IRQHandler+0x106>
 8002686:	e005      	b.n	8002694 <HAL_ADC_IRQHandler+0xc4>
 8002688:	4b81      	ldr	r3, [pc, #516]	; (8002890 <HAL_ADC_IRQHandler+0x2c0>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 031f 	and.w	r3, r3, #31
 8002690:	2b05      	cmp	r3, #5
 8002692:	d020      	beq.n	80026d6 <HAL_ADC_IRQHandler+0x106>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800269c:	d004      	beq.n	80026a8 <HAL_ADC_IRQHandler+0xd8>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a79      	ldr	r2, [pc, #484]	; (8002888 <HAL_ADC_IRQHandler+0x2b8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d106      	bne.n	80026b6 <HAL_ADC_IRQHandler+0xe6>
 80026a8:	4b78      	ldr	r3, [pc, #480]	; (800288c <HAL_ADC_IRQHandler+0x2bc>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	2b09      	cmp	r3, #9
 80026b2:	d010      	beq.n	80026d6 <HAL_ADC_IRQHandler+0x106>
 80026b4:	e005      	b.n	80026c2 <HAL_ADC_IRQHandler+0xf2>
 80026b6:	4b76      	ldr	r3, [pc, #472]	; (8002890 <HAL_ADC_IRQHandler+0x2c0>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	2b09      	cmp	r3, #9
 80026c0:	d009      	beq.n	80026d6 <HAL_ADC_IRQHandler+0x106>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026ca:	d004      	beq.n	80026d6 <HAL_ADC_IRQHandler+0x106>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a70      	ldr	r2, [pc, #448]	; (8002894 <HAL_ADC_IRQHandler+0x2c4>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d104      	bne.n	80026e0 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	e00f      	b.n	8002700 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026e8:	d004      	beq.n	80026f4 <HAL_ADC_IRQHandler+0x124>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a66      	ldr	r2, [pc, #408]	; (8002888 <HAL_ADC_IRQHandler+0x2b8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d102      	bne.n	80026fa <HAL_ADC_IRQHandler+0x12a>
 80026f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026f8:	e000      	b.n	80026fc <HAL_ADC_IRQHandler+0x12c>
 80026fa:	4b66      	ldr	r3, [pc, #408]	; (8002894 <HAL_ADC_IRQHandler+0x2c4>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800270a:	2b00      	cmp	r3, #0
 800270c:	d137      	bne.n	800277e <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002714:	2b00      	cmp	r3, #0
 8002716:	d132      	bne.n	800277e <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b00      	cmp	r3, #0
 8002720:	d02d      	beq.n	800277e <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d11a      	bne.n	8002766 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 020c 	bic.w	r2, r2, #12
 800273e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d112      	bne.n	800277e <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	f043 0201 	orr.w	r2, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	641a      	str	r2, [r3, #64]	; 0x40
 8002764:	e00b      	b.n	800277e <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f043 0210 	orr.w	r2, r3, #16
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	f043 0201 	orr.w	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe f86c 	bl	800085c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	220c      	movs	r2, #12
 800278a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	f003 0320 	and.w	r3, r3, #32
 8002792:	2b00      	cmp	r3, #0
 8002794:	d004      	beq.n	80027a0 <HAL_ADC_IRQHandler+0x1d0>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10b      	bne.n	80027b8 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 8138 	beq.w	8002a1c <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 8132 	beq.w	8002a1c <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027cc:	d004      	beq.n	80027d8 <HAL_ADC_IRQHandler+0x208>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a2d      	ldr	r2, [pc, #180]	; (8002888 <HAL_ADC_IRQHandler+0x2b8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d106      	bne.n	80027e6 <HAL_ADC_IRQHandler+0x216>
 80027d8:	4b2c      	ldr	r3, [pc, #176]	; (800288c <HAL_ADC_IRQHandler+0x2bc>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 031f 	and.w	r3, r3, #31
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d03e      	beq.n	8002862 <HAL_ADC_IRQHandler+0x292>
 80027e4:	e005      	b.n	80027f2 <HAL_ADC_IRQHandler+0x222>
 80027e6:	4b2a      	ldr	r3, [pc, #168]	; (8002890 <HAL_ADC_IRQHandler+0x2c0>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 031f 	and.w	r3, r3, #31
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d037      	beq.n	8002862 <HAL_ADC_IRQHandler+0x292>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027fa:	d004      	beq.n	8002806 <HAL_ADC_IRQHandler+0x236>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a21      	ldr	r2, [pc, #132]	; (8002888 <HAL_ADC_IRQHandler+0x2b8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d106      	bne.n	8002814 <HAL_ADC_IRQHandler+0x244>
 8002806:	4b21      	ldr	r3, [pc, #132]	; (800288c <HAL_ADC_IRQHandler+0x2bc>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 031f 	and.w	r3, r3, #31
 800280e:	2b05      	cmp	r3, #5
 8002810:	d027      	beq.n	8002862 <HAL_ADC_IRQHandler+0x292>
 8002812:	e005      	b.n	8002820 <HAL_ADC_IRQHandler+0x250>
 8002814:	4b1e      	ldr	r3, [pc, #120]	; (8002890 <HAL_ADC_IRQHandler+0x2c0>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 031f 	and.w	r3, r3, #31
 800281c:	2b05      	cmp	r3, #5
 800281e:	d020      	beq.n	8002862 <HAL_ADC_IRQHandler+0x292>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002828:	d004      	beq.n	8002834 <HAL_ADC_IRQHandler+0x264>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a16      	ldr	r2, [pc, #88]	; (8002888 <HAL_ADC_IRQHandler+0x2b8>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d106      	bne.n	8002842 <HAL_ADC_IRQHandler+0x272>
 8002834:	4b15      	ldr	r3, [pc, #84]	; (800288c <HAL_ADC_IRQHandler+0x2bc>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 031f 	and.w	r3, r3, #31
 800283c:	2b09      	cmp	r3, #9
 800283e:	d010      	beq.n	8002862 <HAL_ADC_IRQHandler+0x292>
 8002840:	e005      	b.n	800284e <HAL_ADC_IRQHandler+0x27e>
 8002842:	4b13      	ldr	r3, [pc, #76]	; (8002890 <HAL_ADC_IRQHandler+0x2c0>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 031f 	and.w	r3, r3, #31
 800284a:	2b09      	cmp	r3, #9
 800284c:	d009      	beq.n	8002862 <HAL_ADC_IRQHandler+0x292>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002856:	d004      	beq.n	8002862 <HAL_ADC_IRQHandler+0x292>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0d      	ldr	r2, [pc, #52]	; (8002894 <HAL_ADC_IRQHandler+0x2c4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d104      	bne.n	800286c <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	e018      	b.n	800289e <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002874:	d004      	beq.n	8002880 <HAL_ADC_IRQHandler+0x2b0>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a03      	ldr	r2, [pc, #12]	; (8002888 <HAL_ADC_IRQHandler+0x2b8>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d10b      	bne.n	8002898 <HAL_ADC_IRQHandler+0x2c8>
 8002880:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002884:	e009      	b.n	800289a <HAL_ADC_IRQHandler+0x2ca>
 8002886:	bf00      	nop
 8002888:	50000100 	.word	0x50000100
 800288c:	50000300 	.word	0x50000300
 8002890:	50000700 	.word	0x50000700
 8002894:	50000400 	.word	0x50000400
 8002898:	4b92      	ldr	r3, [pc, #584]	; (8002ae4 <HAL_ADC_IRQHandler+0x514>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f040 80b0 	bne.w	8002a0e <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00d      	beq.n	80028d4 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f040 80a3 	bne.w	8002a0e <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f040 809d 	bne.w	8002a0e <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 8097 	beq.w	8002a0e <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028e8:	d004      	beq.n	80028f4 <HAL_ADC_IRQHandler+0x324>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a7e      	ldr	r2, [pc, #504]	; (8002ae8 <HAL_ADC_IRQHandler+0x518>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d106      	bne.n	8002902 <HAL_ADC_IRQHandler+0x332>
 80028f4:	4b7d      	ldr	r3, [pc, #500]	; (8002aec <HAL_ADC_IRQHandler+0x51c>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d03e      	beq.n	800297e <HAL_ADC_IRQHandler+0x3ae>
 8002900:	e005      	b.n	800290e <HAL_ADC_IRQHandler+0x33e>
 8002902:	4b7b      	ldr	r3, [pc, #492]	; (8002af0 <HAL_ADC_IRQHandler+0x520>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 031f 	and.w	r3, r3, #31
 800290a:	2b00      	cmp	r3, #0
 800290c:	d037      	beq.n	800297e <HAL_ADC_IRQHandler+0x3ae>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002916:	d004      	beq.n	8002922 <HAL_ADC_IRQHandler+0x352>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a72      	ldr	r2, [pc, #456]	; (8002ae8 <HAL_ADC_IRQHandler+0x518>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d106      	bne.n	8002930 <HAL_ADC_IRQHandler+0x360>
 8002922:	4b72      	ldr	r3, [pc, #456]	; (8002aec <HAL_ADC_IRQHandler+0x51c>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 031f 	and.w	r3, r3, #31
 800292a:	2b06      	cmp	r3, #6
 800292c:	d027      	beq.n	800297e <HAL_ADC_IRQHandler+0x3ae>
 800292e:	e005      	b.n	800293c <HAL_ADC_IRQHandler+0x36c>
 8002930:	4b6f      	ldr	r3, [pc, #444]	; (8002af0 <HAL_ADC_IRQHandler+0x520>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 031f 	and.w	r3, r3, #31
 8002938:	2b06      	cmp	r3, #6
 800293a:	d020      	beq.n	800297e <HAL_ADC_IRQHandler+0x3ae>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002944:	d004      	beq.n	8002950 <HAL_ADC_IRQHandler+0x380>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a67      	ldr	r2, [pc, #412]	; (8002ae8 <HAL_ADC_IRQHandler+0x518>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d106      	bne.n	800295e <HAL_ADC_IRQHandler+0x38e>
 8002950:	4b66      	ldr	r3, [pc, #408]	; (8002aec <HAL_ADC_IRQHandler+0x51c>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 031f 	and.w	r3, r3, #31
 8002958:	2b07      	cmp	r3, #7
 800295a:	d010      	beq.n	800297e <HAL_ADC_IRQHandler+0x3ae>
 800295c:	e005      	b.n	800296a <HAL_ADC_IRQHandler+0x39a>
 800295e:	4b64      	ldr	r3, [pc, #400]	; (8002af0 <HAL_ADC_IRQHandler+0x520>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 031f 	and.w	r3, r3, #31
 8002966:	2b07      	cmp	r3, #7
 8002968:	d009      	beq.n	800297e <HAL_ADC_IRQHandler+0x3ae>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002972:	d004      	beq.n	800297e <HAL_ADC_IRQHandler+0x3ae>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a5a      	ldr	r2, [pc, #360]	; (8002ae4 <HAL_ADC_IRQHandler+0x514>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d104      	bne.n	8002988 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	e00f      	b.n	80029a8 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002990:	d004      	beq.n	800299c <HAL_ADC_IRQHandler+0x3cc>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a54      	ldr	r2, [pc, #336]	; (8002ae8 <HAL_ADC_IRQHandler+0x518>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d102      	bne.n	80029a2 <HAL_ADC_IRQHandler+0x3d2>
 800299c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029a0:	e000      	b.n	80029a4 <HAL_ADC_IRQHandler+0x3d4>
 80029a2:	4b50      	ldr	r3, [pc, #320]	; (8002ae4 <HAL_ADC_IRQHandler+0x514>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d12d      	bne.n	8002a0e <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d11a      	bne.n	80029f6 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029ce:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d112      	bne.n	8002a0e <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	f043 0201 	orr.w	r2, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	641a      	str	r2, [r3, #64]	; 0x40
 80029f4:	e00b      	b.n	8002a0e <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f043 0210 	orr.w	r2, r3, #16
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f043 0201 	orr.w	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f8c4 	bl	8002b9c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2260      	movs	r2, #96	; 0x60
 8002a1a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d011      	beq.n	8002a4a <HAL_ADC_IRQHandler+0x47a>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00c      	beq.n	8002a4a <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff fa85 	bl	8001f4c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2280      	movs	r2, #128	; 0x80
 8002a48:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d012      	beq.n	8002a7a <HAL_ADC_IRQHandler+0x4aa>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00d      	beq.n	8002a7a <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f8aa 	bl	8002bc4 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a78:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d012      	beq.n	8002aaa <HAL_ADC_IRQHandler+0x4da>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00d      	beq.n	8002aaa <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f89c 	bl	8002bd8 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f003 0310 	and.w	r3, r3, #16
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d04f      	beq.n	8002b54 <HAL_ADC_IRQHandler+0x584>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d04a      	beq.n	8002b54 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d102      	bne.n	8002acc <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	e02d      	b.n	8002b28 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ad4:	d004      	beq.n	8002ae0 <HAL_ADC_IRQHandler+0x510>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a03      	ldr	r2, [pc, #12]	; (8002ae8 <HAL_ADC_IRQHandler+0x518>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d109      	bne.n	8002af4 <HAL_ADC_IRQHandler+0x524>
 8002ae0:	4b02      	ldr	r3, [pc, #8]	; (8002aec <HAL_ADC_IRQHandler+0x51c>)
 8002ae2:	e008      	b.n	8002af6 <HAL_ADC_IRQHandler+0x526>
 8002ae4:	50000400 	.word	0x50000400
 8002ae8:	50000100 	.word	0x50000100
 8002aec:	50000300 	.word	0x50000300
 8002af0:	50000700 	.word	0x50000700
 8002af4:	4b28      	ldr	r3, [pc, #160]	; (8002b98 <HAL_ADC_IRQHandler+0x5c8>)
 8002af6:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d109      	bne.n	8002b18 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d10a      	bne.n	8002b28 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002b12:	2301      	movs	r3, #1
 8002b14:	61fb      	str	r3, [r7, #28]
 8002b16:	e007      	b.n	8002b28 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002b24:	2301      	movs	r3, #1
 8002b26:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d10e      	bne.n	8002b4c <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	f043 0202 	orr.w	r2, r3, #2
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff fa0a 	bl	8001f60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2210      	movs	r2, #16
 8002b52:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d018      	beq.n	8002b90 <HAL_ADC_IRQHandler+0x5c0>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d013      	beq.n	8002b90 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b78:	f043 0208 	orr.w	r2, r3, #8
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b88:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f810 	bl	8002bb0 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002b90:	bf00      	nop
 8002b92:	3720      	adds	r7, #32
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	50000700 	.word	0x50000700

08002b9c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b09b      	sub	sp, #108	; 0x6c
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x22>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e2ca      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x5b8>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f040 82ae 	bne.w	8003182 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d81c      	bhi.n	8002c68 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	4413      	add	r3, r2
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	461a      	mov	r2, r3
 8002c42:	231f      	movs	r3, #31
 8002c44:	4093      	lsls	r3, r2
 8002c46:	43db      	mvns	r3, r3
 8002c48:	4019      	ands	r1, r3
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	4413      	add	r3, r2
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	631a      	str	r2, [r3, #48]	; 0x30
 8002c66:	e063      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b09      	cmp	r3, #9
 8002c6e:	d81e      	bhi.n	8002cae <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	4413      	add	r3, r2
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	3b1e      	subs	r3, #30
 8002c84:	221f      	movs	r2, #31
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	4019      	ands	r1, r3
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4413      	add	r3, r2
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	3b1e      	subs	r3, #30
 8002ca0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	635a      	str	r2, [r3, #52]	; 0x34
 8002cac:	e040      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b0e      	cmp	r3, #14
 8002cb4:	d81e      	bhi.n	8002cf4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	4413      	add	r3, r2
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	3b3c      	subs	r3, #60	; 0x3c
 8002cca:	221f      	movs	r2, #31
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	4019      	ands	r1, r3
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	6818      	ldr	r0, [r3, #0]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	4413      	add	r3, r2
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	3b3c      	subs	r3, #60	; 0x3c
 8002ce6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	639a      	str	r2, [r3, #56]	; 0x38
 8002cf2:	e01d      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	4413      	add	r3, r2
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	3b5a      	subs	r3, #90	; 0x5a
 8002d08:	221f      	movs	r2, #31
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	4019      	ands	r1, r3
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	4413      	add	r3, r2
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	3b5a      	subs	r3, #90	; 0x5a
 8002d24:	fa00 f203 	lsl.w	r2, r0, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f040 80e5 	bne.w	8002f0a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b09      	cmp	r3, #9
 8002d46:	d91c      	bls.n	8002d82 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6999      	ldr	r1, [r3, #24]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	4613      	mov	r3, r2
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	4413      	add	r3, r2
 8002d58:	3b1e      	subs	r3, #30
 8002d5a:	2207      	movs	r2, #7
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	4019      	ands	r1, r3
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	6898      	ldr	r0, [r3, #8]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	4413      	add	r3, r2
 8002d72:	3b1e      	subs	r3, #30
 8002d74:	fa00 f203 	lsl.w	r2, r0, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	619a      	str	r2, [r3, #24]
 8002d80:	e019      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6959      	ldr	r1, [r3, #20]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4413      	add	r3, r2
 8002d92:	2207      	movs	r2, #7
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	4019      	ands	r1, r3
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	6898      	ldr	r0, [r3, #8]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	4613      	mov	r3, r2
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	4413      	add	r3, r2
 8002daa:	fa00 f203 	lsl.w	r2, r0, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	08db      	lsrs	r3, r3, #3
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d84f      	bhi.n	8002e78 <HAL_ADC_ConfigChannel+0x28c>
 8002dd8:	a201      	add	r2, pc, #4	; (adr r2, 8002de0 <HAL_ADC_ConfigChannel+0x1f4>)
 8002dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dde:	bf00      	nop
 8002de0:	08002df1 	.word	0x08002df1
 8002de4:	08002e13 	.word	0x08002e13
 8002de8:	08002e35 	.word	0x08002e35
 8002dec:	08002e57 	.word	0x08002e57
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002df6:	4b9a      	ldr	r3, [pc, #616]	; (8003060 <HAL_ADC_ConfigChannel+0x474>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	6812      	ldr	r2, [r2, #0]
 8002dfe:	0691      	lsls	r1, r2, #26
 8002e00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e02:	430a      	orrs	r2, r1
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e0e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e10:	e07e      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002e18:	4b91      	ldr	r3, [pc, #580]	; (8003060 <HAL_ADC_ConfigChannel+0x474>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	0691      	lsls	r1, r2, #26
 8002e22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e24:	430a      	orrs	r2, r1
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e30:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e32:	e06d      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e3a:	4b89      	ldr	r3, [pc, #548]	; (8003060 <HAL_ADC_ConfigChannel+0x474>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	0691      	lsls	r1, r2, #26
 8002e44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e46:	430a      	orrs	r2, r1
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e52:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e54:	e05c      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e5c:	4b80      	ldr	r3, [pc, #512]	; (8003060 <HAL_ADC_ConfigChannel+0x474>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	0691      	lsls	r1, r2, #26
 8002e66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e74:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e76:	e04b      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	069b      	lsls	r3, r3, #26
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d107      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e9a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ea2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	069b      	lsls	r3, r3, #26
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d107      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ebe:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ec6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	069b      	lsls	r3, r3, #26
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d107      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ee2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	069b      	lsls	r3, r3, #26
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d10a      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f06:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002f08:	e001      	b.n	8002f0e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002f0a:	bf00      	nop
 8002f0c:	e000      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002f0e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d108      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x344>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x344>
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e000      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x346>
 8002f30:	2300      	movs	r3, #0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f040 8130 	bne.w	8003198 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d00f      	beq.n	8002f60 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43da      	mvns	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	400a      	ands	r2, r1
 8002f5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002f5e:	e049      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b09      	cmp	r3, #9
 8002f80:	d91c      	bls.n	8002fbc <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6999      	ldr	r1, [r3, #24]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	4413      	add	r3, r2
 8002f92:	3b1b      	subs	r3, #27
 8002f94:	2207      	movs	r2, #7
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	4019      	ands	r1, r3
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	6898      	ldr	r0, [r3, #8]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	4413      	add	r3, r2
 8002fac:	3b1b      	subs	r3, #27
 8002fae:	fa00 f203 	lsl.w	r2, r0, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	619a      	str	r2, [r3, #24]
 8002fba:	e01b      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6959      	ldr	r1, [r3, #20]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	4613      	mov	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	2207      	movs	r2, #7
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	4019      	ands	r1, r3
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	6898      	ldr	r0, [r3, #8]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	4413      	add	r3, r2
 8002fe8:	fa00 f203 	lsl.w	r2, r0, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ffc:	d004      	beq.n	8003008 <HAL_ADC_ConfigChannel+0x41c>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a18      	ldr	r2, [pc, #96]	; (8003064 <HAL_ADC_ConfigChannel+0x478>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d101      	bne.n	800300c <HAL_ADC_ConfigChannel+0x420>
 8003008:	4b17      	ldr	r3, [pc, #92]	; (8003068 <HAL_ADC_ConfigChannel+0x47c>)
 800300a:	e000      	b.n	800300e <HAL_ADC_ConfigChannel+0x422>
 800300c:	4b17      	ldr	r3, [pc, #92]	; (800306c <HAL_ADC_ConfigChannel+0x480>)
 800300e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b10      	cmp	r3, #16
 8003016:	d105      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003018:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003020:	2b00      	cmp	r3, #0
 8003022:	d015      	beq.n	8003050 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003028:	2b11      	cmp	r3, #17
 800302a:	d105      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800302c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00b      	beq.n	8003050 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800303c:	2b12      	cmp	r3, #18
 800303e:	f040 80ab 	bne.w	8003198 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800304a:	2b00      	cmp	r3, #0
 800304c:	f040 80a4 	bne.w	8003198 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003058:	d10a      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x484>
 800305a:	4b02      	ldr	r3, [pc, #8]	; (8003064 <HAL_ADC_ConfigChannel+0x478>)
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	e022      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x4ba>
 8003060:	83fff000 	.word	0x83fff000
 8003064:	50000100 	.word	0x50000100
 8003068:	50000300 	.word	0x50000300
 800306c:	50000700 	.word	0x50000700
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a4e      	ldr	r2, [pc, #312]	; (80031b0 <HAL_ADC_ConfigChannel+0x5c4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d103      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x496>
 800307a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	e011      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x4ba>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a4b      	ldr	r2, [pc, #300]	; (80031b4 <HAL_ADC_ConfigChannel+0x5c8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d102      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x4a6>
 800308c:	4b4a      	ldr	r3, [pc, #296]	; (80031b8 <HAL_ADC_ConfigChannel+0x5cc>)
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	e009      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x4ba>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a48      	ldr	r2, [pc, #288]	; (80031b8 <HAL_ADC_ConfigChannel+0x5cc>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d102      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x4b6>
 800309c:	4b45      	ldr	r3, [pc, #276]	; (80031b4 <HAL_ADC_ConfigChannel+0x5c8>)
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	e001      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x4ba>
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d108      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x4da>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x4da>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x4dc>
 80030c6:	2300      	movs	r3, #0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d150      	bne.n	800316e <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80030cc:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d010      	beq.n	80030f4 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d107      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x502>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x502>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x504>
 80030ee:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d13c      	bne.n	800316e <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b10      	cmp	r3, #16
 80030fa:	d11d      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x54c>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003104:	d118      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800310e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003110:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003112:	4b2a      	ldr	r3, [pc, #168]	; (80031bc <HAL_ADC_ConfigChannel+0x5d0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a2a      	ldr	r2, [pc, #168]	; (80031c0 <HAL_ADC_ConfigChannel+0x5d4>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	0c9a      	lsrs	r2, r3, #18
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003128:	e002      	b.n	8003130 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	3b01      	subs	r3, #1
 800312e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f9      	bne.n	800312a <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003136:	e02e      	b.n	8003196 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b11      	cmp	r3, #17
 800313e:	d10b      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x56c>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003148:	d106      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800314a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003154:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003156:	e01e      	b.n	8003196 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b12      	cmp	r3, #18
 800315e:	d11a      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003160:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800316a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800316c:	e013      	b.n	8003196 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	f043 0220 	orr.w	r2, r3, #32
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003180:	e00a      	b.n	8003198 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f043 0220 	orr.w	r2, r3, #32
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003194:	e000      	b.n	8003198 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003196:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80031a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	376c      	adds	r7, #108	; 0x6c
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	50000100 	.word	0x50000100
 80031b4:	50000400 	.word	0x50000400
 80031b8:	50000500 	.word	0x50000500
 80031bc:	20000090 	.word	0x20000090
 80031c0:	431bde83 	.word	0x431bde83

080031c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b099      	sub	sp, #100	; 0x64
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031dc:	d102      	bne.n	80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80031de:	4b6d      	ldr	r3, [pc, #436]	; (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	e01a      	b.n	800321a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a6a      	ldr	r2, [pc, #424]	; (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d103      	bne.n	80031f6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80031ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031f2:	60bb      	str	r3, [r7, #8]
 80031f4:	e011      	b.n	800321a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a67      	ldr	r2, [pc, #412]	; (8003398 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d102      	bne.n	8003206 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003200:	4b66      	ldr	r3, [pc, #408]	; (800339c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	e009      	b.n	800321a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a64      	ldr	r2, [pc, #400]	; (800339c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d102      	bne.n	8003216 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003210:	4b61      	ldr	r3, [pc, #388]	; (8003398 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003212:	60bb      	str	r3, [r7, #8]
 8003214:	e001      	b.n	800321a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003216:	2300      	movs	r3, #0
 8003218:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0b0      	b.n	8003386 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800322e:	2302      	movs	r3, #2
 8003230:	e0a9      	b.n	8003386 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	f040 808d 	bne.w	8003364 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	f040 8086 	bne.w	8003364 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003260:	d004      	beq.n	800326c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a4b      	ldr	r2, [pc, #300]	; (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d101      	bne.n	8003270 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800326c:	4b4c      	ldr	r3, [pc, #304]	; (80033a0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800326e:	e000      	b.n	8003272 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003270:	4b4c      	ldr	r3, [pc, #304]	; (80033a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003272:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d040      	beq.n	80032fe <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800327c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	6859      	ldr	r1, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800328e:	035b      	lsls	r3, r3, #13
 8003290:	430b      	orrs	r3, r1
 8003292:	431a      	orrs	r2, r3
 8003294:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003296:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d108      	bne.n	80032b8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80032b4:	2301      	movs	r3, #1
 80032b6:	e000      	b.n	80032ba <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80032b8:	2300      	movs	r3, #0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d15c      	bne.n	8003378 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d107      	bne.n	80032da <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80032da:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d14b      	bne.n	8003378 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80032e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032e8:	f023 030f 	bic.w	r3, r3, #15
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	6811      	ldr	r1, [r2, #0]
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	6892      	ldr	r2, [r2, #8]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	431a      	orrs	r2, r3
 80032f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032fa:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80032fc:	e03c      	b.n	8003378 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80032fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003306:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003308:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 0303 	and.w	r3, r3, #3
 8003314:	2b01      	cmp	r3, #1
 8003316:	d108      	bne.n	800332a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800332a:	2300      	movs	r3, #0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d123      	bne.n	8003378 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	2b01      	cmp	r3, #1
 800333a:	d107      	bne.n	800334c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003348:	2301      	movs	r3, #1
 800334a:	e000      	b.n	800334e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800334c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800334e:	2b00      	cmp	r3, #0
 8003350:	d112      	bne.n	8003378 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003352:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800335a:	f023 030f 	bic.w	r3, r3, #15
 800335e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003360:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003362:	e009      	b.n	8003378 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	f043 0220 	orr.w	r2, r3, #32
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003376:	e000      	b.n	800337a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003378:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003382:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003386:	4618      	mov	r0, r3
 8003388:	3764      	adds	r7, #100	; 0x64
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	50000100 	.word	0x50000100
 8003398:	50000400 	.word	0x50000400
 800339c:	50000500 	.word	0x50000500
 80033a0:	50000300 	.word	0x50000300
 80033a4:	50000700 	.word	0x50000700

080033a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d108      	bne.n	80033d4 <ADC_Enable+0x2c>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <ADC_Enable+0x2c>
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <ADC_Enable+0x2e>
 80033d4:	2300      	movs	r3, #0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d143      	bne.n	8003462 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	4b22      	ldr	r3, [pc, #136]	; (800346c <ADC_Enable+0xc4>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00d      	beq.n	8003404 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	f043 0210 	orr.w	r2, r3, #16
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f8:	f043 0201 	orr.w	r2, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e02f      	b.n	8003464 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0201 	orr.w	r2, r2, #1
 8003412:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003414:	f7fe fd8e 	bl	8001f34 <HAL_GetTick>
 8003418:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800341a:	e01b      	b.n	8003454 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800341c:	f7fe fd8a 	bl	8001f34 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d914      	bls.n	8003454 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b01      	cmp	r3, #1
 8003436:	d00d      	beq.n	8003454 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	f043 0210 	orr.w	r2, r3, #16
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003448:	f043 0201 	orr.w	r2, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e007      	b.n	8003464 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b01      	cmp	r3, #1
 8003460:	d1dc      	bne.n	800341c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	8000003f 	.word	0x8000003f

08003470 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	2b01      	cmp	r3, #1
 8003488:	d108      	bne.n	800349c <ADC_Disable+0x2c>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <ADC_Disable+0x2c>
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <ADC_Disable+0x2e>
 800349c:	2300      	movs	r3, #0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d047      	beq.n	8003532 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 030d 	and.w	r3, r3, #13
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d10f      	bne.n	80034d0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0202 	orr.w	r2, r2, #2
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2203      	movs	r2, #3
 80034c6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80034c8:	f7fe fd34 	bl	8001f34 <HAL_GetTick>
 80034cc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80034ce:	e029      	b.n	8003524 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	f043 0210 	orr.w	r2, r3, #16
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e0:	f043 0201 	orr.w	r2, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e023      	b.n	8003534 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034ec:	f7fe fd22 	bl	8001f34 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d914      	bls.n	8003524 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b01      	cmp	r3, #1
 8003506:	d10d      	bne.n	8003524 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	f043 0210 	orr.w	r2, r3, #16
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003518:	f043 0201 	orr.w	r2, r3, #1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e007      	b.n	8003534 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b01      	cmp	r3, #1
 8003530:	d0dc      	beq.n	80034ec <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800354c:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <__NVIC_SetPriorityGrouping+0x44>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003558:	4013      	ands	r3, r2
 800355a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800356c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800356e:	4a04      	ldr	r2, [pc, #16]	; (8003580 <__NVIC_SetPriorityGrouping+0x44>)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	60d3      	str	r3, [r2, #12]
}
 8003574:	bf00      	nop
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	e000ed00 	.word	0xe000ed00

08003584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003588:	4b04      	ldr	r3, [pc, #16]	; (800359c <__NVIC_GetPriorityGrouping+0x18>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	0a1b      	lsrs	r3, r3, #8
 800358e:	f003 0307 	and.w	r3, r3, #7
}
 8003592:	4618      	mov	r0, r3
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	db0b      	blt.n	80035ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	f003 021f 	and.w	r2, r3, #31
 80035b8:	4907      	ldr	r1, [pc, #28]	; (80035d8 <__NVIC_EnableIRQ+0x38>)
 80035ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	2001      	movs	r0, #1
 80035c2:	fa00 f202 	lsl.w	r2, r0, r2
 80035c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	e000e100 	.word	0xe000e100

080035dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	6039      	str	r1, [r7, #0]
 80035e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	db0a      	blt.n	8003606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	490c      	ldr	r1, [pc, #48]	; (8003628 <__NVIC_SetPriority+0x4c>)
 80035f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fa:	0112      	lsls	r2, r2, #4
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	440b      	add	r3, r1
 8003600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003604:	e00a      	b.n	800361c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	b2da      	uxtb	r2, r3
 800360a:	4908      	ldr	r1, [pc, #32]	; (800362c <__NVIC_SetPriority+0x50>)
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	3b04      	subs	r3, #4
 8003614:	0112      	lsls	r2, r2, #4
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	440b      	add	r3, r1
 800361a:	761a      	strb	r2, [r3, #24]
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	e000e100 	.word	0xe000e100
 800362c:	e000ed00 	.word	0xe000ed00

08003630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003630:	b480      	push	{r7}
 8003632:	b089      	sub	sp, #36	; 0x24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f1c3 0307 	rsb	r3, r3, #7
 800364a:	2b04      	cmp	r3, #4
 800364c:	bf28      	it	cs
 800364e:	2304      	movcs	r3, #4
 8003650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	3304      	adds	r3, #4
 8003656:	2b06      	cmp	r3, #6
 8003658:	d902      	bls.n	8003660 <NVIC_EncodePriority+0x30>
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	3b03      	subs	r3, #3
 800365e:	e000      	b.n	8003662 <NVIC_EncodePriority+0x32>
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003664:	f04f 32ff 	mov.w	r2, #4294967295
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43da      	mvns	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	401a      	ands	r2, r3
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003678:	f04f 31ff 	mov.w	r1, #4294967295
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	fa01 f303 	lsl.w	r3, r1, r3
 8003682:	43d9      	mvns	r1, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003688:	4313      	orrs	r3, r2
         );
}
 800368a:	4618      	mov	r0, r3
 800368c:	3724      	adds	r7, #36	; 0x24
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
	...

08003698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036a8:	d301      	bcc.n	80036ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036aa:	2301      	movs	r3, #1
 80036ac:	e00f      	b.n	80036ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ae:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <SysTick_Config+0x40>)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036b6:	210f      	movs	r1, #15
 80036b8:	f04f 30ff 	mov.w	r0, #4294967295
 80036bc:	f7ff ff8e 	bl	80035dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036c0:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <SysTick_Config+0x40>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036c6:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <SysTick_Config+0x40>)
 80036c8:	2207      	movs	r2, #7
 80036ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	e000e010 	.word	0xe000e010

080036dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff ff29 	bl	800353c <__NVIC_SetPriorityGrouping>
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b086      	sub	sp, #24
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	4603      	mov	r3, r0
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	607a      	str	r2, [r7, #4]
 80036fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003704:	f7ff ff3e 	bl	8003584 <__NVIC_GetPriorityGrouping>
 8003708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	68b9      	ldr	r1, [r7, #8]
 800370e:	6978      	ldr	r0, [r7, #20]
 8003710:	f7ff ff8e 	bl	8003630 <NVIC_EncodePriority>
 8003714:	4602      	mov	r2, r0
 8003716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800371a:	4611      	mov	r1, r2
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff ff5d 	bl	80035dc <__NVIC_SetPriority>
}
 8003722:	bf00      	nop
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b082      	sub	sp, #8
 800372e:	af00      	add	r7, sp, #0
 8003730:	4603      	mov	r3, r0
 8003732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff ff31 	bl	80035a0 <__NVIC_EnableIRQ>
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff ffa2 	bl	8003698 <SysTick_Config>
 8003754:	4603      	mov	r3, r0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800376c:	2b02      	cmp	r3, #2
 800376e:	d008      	beq.n	8003782 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2204      	movs	r2, #4
 8003774:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e020      	b.n	80037c4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 020e 	bic.w	r2, r2, #14
 8003790:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0201 	bic.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037aa:	2101      	movs	r1, #1
 80037ac:	fa01 f202 	lsl.w	r2, r1, r2
 80037b0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d005      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2204      	movs	r2, #4
 80037ea:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	73fb      	strb	r3, [r7, #15]
 80037f0:	e027      	b.n	8003842 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 020e 	bic.w	r2, r2, #14
 8003800:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0201 	bic.w	r2, r2, #1
 8003810:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381a:	2101      	movs	r1, #1
 800381c:	fa01 f202 	lsl.w	r2, r1, r2
 8003820:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	4798      	blx	r3
    } 
  }
  return status;
 8003842:	7bfb      	ldrb	r3, [r7, #15]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800385a:	e154      	b.n	8003b06 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	2101      	movs	r1, #1
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	fa01 f303 	lsl.w	r3, r1, r3
 8003868:	4013      	ands	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 8146 	beq.w	8003b00 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	2b01      	cmp	r3, #1
 800387e:	d005      	beq.n	800388c <HAL_GPIO_Init+0x40>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 0303 	and.w	r3, r3, #3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d130      	bne.n	80038ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	2203      	movs	r2, #3
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	4013      	ands	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038c2:	2201      	movs	r2, #1
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43db      	mvns	r3, r3
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4013      	ands	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	091b      	lsrs	r3, r3, #4
 80038d8:	f003 0201 	and.w	r2, r3, #1
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d017      	beq.n	800392a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	2203      	movs	r2, #3
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43db      	mvns	r3, r3
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4013      	ands	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d123      	bne.n	800397e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	08da      	lsrs	r2, r3, #3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3208      	adds	r2, #8
 800393e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003942:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	220f      	movs	r2, #15
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	43db      	mvns	r3, r3
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4013      	ands	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	08da      	lsrs	r2, r3, #3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3208      	adds	r2, #8
 8003978:	6939      	ldr	r1, [r7, #16]
 800397a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	2203      	movs	r2, #3
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	43db      	mvns	r3, r3
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	4013      	ands	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f003 0203 	and.w	r2, r3, #3
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 80a0 	beq.w	8003b00 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039c0:	4b58      	ldr	r3, [pc, #352]	; (8003b24 <HAL_GPIO_Init+0x2d8>)
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	4a57      	ldr	r2, [pc, #348]	; (8003b24 <HAL_GPIO_Init+0x2d8>)
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	6193      	str	r3, [r2, #24]
 80039cc:	4b55      	ldr	r3, [pc, #340]	; (8003b24 <HAL_GPIO_Init+0x2d8>)
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	60bb      	str	r3, [r7, #8]
 80039d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039d8:	4a53      	ldr	r2, [pc, #332]	; (8003b28 <HAL_GPIO_Init+0x2dc>)
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	089b      	lsrs	r3, r3, #2
 80039de:	3302      	adds	r3, #2
 80039e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	220f      	movs	r2, #15
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4013      	ands	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a02:	d019      	beq.n	8003a38 <HAL_GPIO_Init+0x1ec>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a49      	ldr	r2, [pc, #292]	; (8003b2c <HAL_GPIO_Init+0x2e0>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d013      	beq.n	8003a34 <HAL_GPIO_Init+0x1e8>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a48      	ldr	r2, [pc, #288]	; (8003b30 <HAL_GPIO_Init+0x2e4>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d00d      	beq.n	8003a30 <HAL_GPIO_Init+0x1e4>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a47      	ldr	r2, [pc, #284]	; (8003b34 <HAL_GPIO_Init+0x2e8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d007      	beq.n	8003a2c <HAL_GPIO_Init+0x1e0>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a46      	ldr	r2, [pc, #280]	; (8003b38 <HAL_GPIO_Init+0x2ec>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d101      	bne.n	8003a28 <HAL_GPIO_Init+0x1dc>
 8003a24:	2304      	movs	r3, #4
 8003a26:	e008      	b.n	8003a3a <HAL_GPIO_Init+0x1ee>
 8003a28:	2305      	movs	r3, #5
 8003a2a:	e006      	b.n	8003a3a <HAL_GPIO_Init+0x1ee>
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e004      	b.n	8003a3a <HAL_GPIO_Init+0x1ee>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e002      	b.n	8003a3a <HAL_GPIO_Init+0x1ee>
 8003a34:	2301      	movs	r3, #1
 8003a36:	e000      	b.n	8003a3a <HAL_GPIO_Init+0x1ee>
 8003a38:	2300      	movs	r3, #0
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	f002 0203 	and.w	r2, r2, #3
 8003a40:	0092      	lsls	r2, r2, #2
 8003a42:	4093      	lsls	r3, r2
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a4a:	4937      	ldr	r1, [pc, #220]	; (8003b28 <HAL_GPIO_Init+0x2dc>)
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	089b      	lsrs	r3, r3, #2
 8003a50:	3302      	adds	r3, #2
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a58:	4b38      	ldr	r3, [pc, #224]	; (8003b3c <HAL_GPIO_Init+0x2f0>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	43db      	mvns	r3, r3
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4013      	ands	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a7c:	4a2f      	ldr	r2, [pc, #188]	; (8003b3c <HAL_GPIO_Init+0x2f0>)
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a82:	4b2e      	ldr	r3, [pc, #184]	; (8003b3c <HAL_GPIO_Init+0x2f0>)
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003aa6:	4a25      	ldr	r2, [pc, #148]	; (8003b3c <HAL_GPIO_Init+0x2f0>)
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003aac:	4b23      	ldr	r3, [pc, #140]	; (8003b3c <HAL_GPIO_Init+0x2f0>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003ad0:	4a1a      	ldr	r2, [pc, #104]	; (8003b3c <HAL_GPIO_Init+0x2f0>)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ad6:	4b19      	ldr	r3, [pc, #100]	; (8003b3c <HAL_GPIO_Init+0x2f0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003afa:	4a10      	ldr	r2, [pc, #64]	; (8003b3c <HAL_GPIO_Init+0x2f0>)
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	3301      	adds	r3, #1
 8003b04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f47f aea3 	bne.w	800385c <HAL_GPIO_Init+0x10>
  }
}
 8003b16:	bf00      	nop
 8003b18:	bf00      	nop
 8003b1a:	371c      	adds	r7, #28
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	40021000 	.word	0x40021000
 8003b28:	40010000 	.word	0x40010000
 8003b2c:	48000400 	.word	0x48000400
 8003b30:	48000800 	.word	0x48000800
 8003b34:	48000c00 	.word	0x48000c00
 8003b38:	48001000 	.word	0x48001000
 8003b3c:	40010400 	.word	0x40010400

08003b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	807b      	strh	r3, [r7, #2]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b50:	787b      	ldrb	r3, [r7, #1]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b56:	887a      	ldrh	r2, [r7, #2]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b5c:	e002      	b.n	8003b64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b5e:	887a      	ldrh	r2, [r7, #2]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b7a:	4b08      	ldr	r3, [pc, #32]	; (8003b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b7c:	695a      	ldr	r2, [r3, #20]
 8003b7e:	88fb      	ldrh	r3, [r7, #6]
 8003b80:	4013      	ands	r3, r2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d006      	beq.n	8003b94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b86:	4a05      	ldr	r2, [pc, #20]	; (8003b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b88:	88fb      	ldrh	r3, [r7, #6]
 8003b8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b8c:	88fb      	ldrh	r3, [r7, #6]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fd fb80 	bl	8001294 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b94:	bf00      	nop
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40010400 	.word	0x40010400

08003ba0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e081      	b.n	8003cb6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d106      	bne.n	8003bcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7fd fdc0 	bl	800174c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2224      	movs	r2, #36	; 0x24
 8003bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0201 	bic.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bf0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d107      	bne.n	8003c1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c16:	609a      	str	r2, [r3, #8]
 8003c18:	e006      	b.n	8003c28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689a      	ldr	r2, [r3, #8]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003c26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d104      	bne.n	8003c3a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6812      	ldr	r2, [r2, #0]
 8003c44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691a      	ldr	r2, [r3, #16]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	69d9      	ldr	r1, [r3, #28]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1a      	ldr	r2, [r3, #32]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	d138      	bne.n	8003d46 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e032      	b.n	8003d48 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2224      	movs	r2, #36	; 0x24
 8003cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0201 	bic.w	r2, r2, #1
 8003d00:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d10:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6819      	ldr	r1, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 0201 	orr.w	r2, r2, #1
 8003d30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	e000      	b.n	8003d48 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d46:	2302      	movs	r3, #2
  }
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	d139      	bne.n	8003dde <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e033      	b.n	8003de0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2224      	movs	r2, #36	; 0x24
 8003d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0201 	bic.w	r2, r2, #1
 8003d96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003da6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	021b      	lsls	r3, r3, #8
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0201 	orr.w	r2, r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e000      	b.n	8003de0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003dde:	2302      	movs	r3, #2
  }
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dee:	b08b      	sub	sp, #44	; 0x2c
 8003df0:	af06      	add	r7, sp, #24
 8003df2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e0c4      	b.n	8003f88 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d106      	bne.n	8003e18 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7fd fdda 	bl	80019cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f004 fad1 	bl	80083cc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	73fb      	strb	r3, [r7, #15]
 8003e2e:	e040      	b.n	8003eb2 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	4613      	mov	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	440b      	add	r3, r1
 8003e40:	3301      	adds	r3, #1
 8003e42:	2201      	movs	r2, #1
 8003e44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	440b      	add	r3, r1
 8003e56:	7bfa      	ldrb	r2, [r7, #15]
 8003e58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	4613      	mov	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	440b      	add	r3, r1
 8003e6a:	3303      	adds	r3, #3
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e70:	7bfa      	ldrb	r2, [r7, #15]
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	440b      	add	r3, r1
 8003e7e:	3338      	adds	r3, #56	; 0x38
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e84:	7bfa      	ldrb	r2, [r7, #15]
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	440b      	add	r3, r1
 8003e92:	333c      	adds	r3, #60	; 0x3c
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e98:	7bfa      	ldrb	r2, [r7, #15]
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	440b      	add	r3, r1
 8003ea6:	3340      	adds	r3, #64	; 0x40
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	73fb      	strb	r3, [r7, #15]
 8003eb2:	7bfa      	ldrb	r2, [r7, #15]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d3b9      	bcc.n	8003e30 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	73fb      	strb	r3, [r7, #15]
 8003ec0:	e044      	b.n	8003f4c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ec2:	7bfa      	ldrb	r2, [r7, #15]
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	440b      	add	r3, r1
 8003ed0:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ed8:	7bfa      	ldrb	r2, [r7, #15]
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	440b      	add	r3, r1
 8003ee6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003eea:	7bfa      	ldrb	r2, [r7, #15]
 8003eec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003eee:	7bfa      	ldrb	r2, [r7, #15]
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	440b      	add	r3, r1
 8003efc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003f00:	2200      	movs	r2, #0
 8003f02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f04:	7bfa      	ldrb	r2, [r7, #15]
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	440b      	add	r3, r1
 8003f12:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f1a:	7bfa      	ldrb	r2, [r7, #15]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	440b      	add	r3, r1
 8003f28:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f30:	7bfa      	ldrb	r2, [r7, #15]
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	4613      	mov	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	440b      	add	r3, r1
 8003f3e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
 8003f4c:	7bfa      	ldrb	r2, [r7, #15]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d3b5      	bcc.n	8003ec2 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	687e      	ldr	r6, [r7, #4]
 8003f5e:	466d      	mov	r5, sp
 8003f60:	f106 0410 	add.w	r4, r6, #16
 8003f64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	602b      	str	r3, [r5, #0]
 8003f6c:	1d33      	adds	r3, r6, #4
 8003f6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f70:	6838      	ldr	r0, [r7, #0]
 8003f72:	f004 fa46 	bl	8008402 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fa0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d102      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	f001 b823 	b.w	8004ffc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 817d 	beq.w	80042c6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003fcc:	4bbc      	ldr	r3, [pc, #752]	; (80042c0 <HAL_RCC_OscConfig+0x330>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f003 030c 	and.w	r3, r3, #12
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d00c      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fd8:	4bb9      	ldr	r3, [pc, #740]	; (80042c0 <HAL_RCC_OscConfig+0x330>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f003 030c 	and.w	r3, r3, #12
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d15c      	bne.n	800409e <HAL_RCC_OscConfig+0x10e>
 8003fe4:	4bb6      	ldr	r3, [pc, #728]	; (80042c0 <HAL_RCC_OscConfig+0x330>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff0:	d155      	bne.n	800409e <HAL_RCC_OscConfig+0x10e>
 8003ff2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ff6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003ffe:	fa93 f3a3 	rbit	r3, r3
 8004002:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004006:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800400a:	fab3 f383 	clz	r3, r3
 800400e:	b2db      	uxtb	r3, r3
 8004010:	095b      	lsrs	r3, r3, #5
 8004012:	b2db      	uxtb	r3, r3
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b01      	cmp	r3, #1
 800401c:	d102      	bne.n	8004024 <HAL_RCC_OscConfig+0x94>
 800401e:	4ba8      	ldr	r3, [pc, #672]	; (80042c0 <HAL_RCC_OscConfig+0x330>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	e015      	b.n	8004050 <HAL_RCC_OscConfig+0xc0>
 8004024:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004028:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004030:	fa93 f3a3 	rbit	r3, r3
 8004034:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004038:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800403c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004040:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004044:	fa93 f3a3 	rbit	r3, r3
 8004048:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800404c:	4b9c      	ldr	r3, [pc, #624]	; (80042c0 <HAL_RCC_OscConfig+0x330>)
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004054:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004058:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800405c:	fa92 f2a2 	rbit	r2, r2
 8004060:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004064:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004068:	fab2 f282 	clz	r2, r2
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	f042 0220 	orr.w	r2, r2, #32
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	f002 021f 	and.w	r2, r2, #31
 8004078:	2101      	movs	r1, #1
 800407a:	fa01 f202 	lsl.w	r2, r1, r2
 800407e:	4013      	ands	r3, r2
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 811f 	beq.w	80042c4 <HAL_RCC_OscConfig+0x334>
 8004086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800408a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	f040 8116 	bne.w	80042c4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	f000 bfaf 	b.w	8004ffc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800409e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ae:	d106      	bne.n	80040be <HAL_RCC_OscConfig+0x12e>
 80040b0:	4b83      	ldr	r3, [pc, #524]	; (80042c0 <HAL_RCC_OscConfig+0x330>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a82      	ldr	r2, [pc, #520]	; (80042c0 <HAL_RCC_OscConfig+0x330>)
 80040b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	e036      	b.n	800412c <HAL_RCC_OscConfig+0x19c>
 80040be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x158>
 80040ce:	4b7c      	ldr	r3, [pc, #496]	; (80042c0 <HAL_RCC_OscConfig+0x330>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a7b      	ldr	r2, [pc, #492]	; (80042c0 <HAL_RCC_OscConfig+0x330>)
 80040d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	4b79      	ldr	r3, [pc, #484]	; (80042c0 <HAL_RCC_OscConfig+0x330>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a78      	ldr	r2, [pc, #480]	; (80042c0 <HAL_RCC_OscConfig+0x330>)
 80040e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	e021      	b.n	800412c <HAL_RCC_OscConfig+0x19c>
 80040e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040f8:	d10c      	bne.n	8004114 <HAL_RCC_OscConfig+0x184>
 80040fa:	4b71      	ldr	r3, [pc, #452]	; (80042c0 <HAL_RCC_OscConfig+0x330>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a70      	ldr	r2, [pc, #448]	; (80042c0 <HAL_RCC_OscConfig+0x330>)
 8004100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	4b6e      	ldr	r3, [pc, #440]	; (80042c0 <HAL_RCC_OscConfig+0x330>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a6d      	ldr	r2, [pc, #436]	; (80042c0 <HAL_RCC_OscConfig+0x330>)
 800410c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	e00b      	b.n	800412c <HAL_RCC_OscConfig+0x19c>
 8004114:	4b6a      	ldr	r3, [pc, #424]	; (80042c0 <HAL_RCC_OscConfig+0x330>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a69      	ldr	r2, [pc, #420]	; (80042c0 <HAL_RCC_OscConfig+0x330>)
 800411a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	4b67      	ldr	r3, [pc, #412]	; (80042c0 <HAL_RCC_OscConfig+0x330>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a66      	ldr	r2, [pc, #408]	; (80042c0 <HAL_RCC_OscConfig+0x330>)
 8004126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800412a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800412c:	4b64      	ldr	r3, [pc, #400]	; (80042c0 <HAL_RCC_OscConfig+0x330>)
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	f023 020f 	bic.w	r2, r3, #15
 8004134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004138:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	495f      	ldr	r1, [pc, #380]	; (80042c0 <HAL_RCC_OscConfig+0x330>)
 8004142:	4313      	orrs	r3, r2
 8004144:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800414a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d059      	beq.n	800420a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004156:	f7fd feed 	bl	8001f34 <HAL_GetTick>
 800415a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415e:	e00a      	b.n	8004176 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004160:	f7fd fee8 	bl	8001f34 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b64      	cmp	r3, #100	; 0x64
 800416e:	d902      	bls.n	8004176 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	f000 bf43 	b.w	8004ffc <HAL_RCC_OscConfig+0x106c>
 8004176:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800417a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004182:	fa93 f3a3 	rbit	r3, r3
 8004186:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800418a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418e:	fab3 f383 	clz	r3, r3
 8004192:	b2db      	uxtb	r3, r3
 8004194:	095b      	lsrs	r3, r3, #5
 8004196:	b2db      	uxtb	r3, r3
 8004198:	f043 0301 	orr.w	r3, r3, #1
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d102      	bne.n	80041a8 <HAL_RCC_OscConfig+0x218>
 80041a2:	4b47      	ldr	r3, [pc, #284]	; (80042c0 <HAL_RCC_OscConfig+0x330>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	e015      	b.n	80041d4 <HAL_RCC_OscConfig+0x244>
 80041a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041ac:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80041b4:	fa93 f3a3 	rbit	r3, r3
 80041b8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80041bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041c0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80041c4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80041c8:	fa93 f3a3 	rbit	r3, r3
 80041cc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80041d0:	4b3b      	ldr	r3, [pc, #236]	; (80042c0 <HAL_RCC_OscConfig+0x330>)
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041d8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80041dc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80041e0:	fa92 f2a2 	rbit	r2, r2
 80041e4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80041e8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80041ec:	fab2 f282 	clz	r2, r2
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	f042 0220 	orr.w	r2, r2, #32
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	f002 021f 	and.w	r2, r2, #31
 80041fc:	2101      	movs	r1, #1
 80041fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004202:	4013      	ands	r3, r2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0ab      	beq.n	8004160 <HAL_RCC_OscConfig+0x1d0>
 8004208:	e05d      	b.n	80042c6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420a:	f7fd fe93 	bl	8001f34 <HAL_GetTick>
 800420e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004212:	e00a      	b.n	800422a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004214:	f7fd fe8e 	bl	8001f34 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b64      	cmp	r3, #100	; 0x64
 8004222:	d902      	bls.n	800422a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	f000 bee9 	b.w	8004ffc <HAL_RCC_OscConfig+0x106c>
 800422a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800422e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004232:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004236:	fa93 f3a3 	rbit	r3, r3
 800423a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800423e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004242:	fab3 f383 	clz	r3, r3
 8004246:	b2db      	uxtb	r3, r3
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	b2db      	uxtb	r3, r3
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b01      	cmp	r3, #1
 8004254:	d102      	bne.n	800425c <HAL_RCC_OscConfig+0x2cc>
 8004256:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <HAL_RCC_OscConfig+0x330>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	e015      	b.n	8004288 <HAL_RCC_OscConfig+0x2f8>
 800425c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004260:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004264:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004268:	fa93 f3a3 	rbit	r3, r3
 800426c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004270:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004274:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004278:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800427c:	fa93 f3a3 	rbit	r3, r3
 8004280:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004284:	4b0e      	ldr	r3, [pc, #56]	; (80042c0 <HAL_RCC_OscConfig+0x330>)
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800428c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004290:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004294:	fa92 f2a2 	rbit	r2, r2
 8004298:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800429c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80042a0:	fab2 f282 	clz	r2, r2
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	f042 0220 	orr.w	r2, r2, #32
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	f002 021f 	and.w	r2, r2, #31
 80042b0:	2101      	movs	r1, #1
 80042b2:	fa01 f202 	lsl.w	r2, r1, r2
 80042b6:	4013      	ands	r3, r2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1ab      	bne.n	8004214 <HAL_RCC_OscConfig+0x284>
 80042bc:	e003      	b.n	80042c6 <HAL_RCC_OscConfig+0x336>
 80042be:	bf00      	nop
 80042c0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 817d 	beq.w	80045d6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80042dc:	4ba6      	ldr	r3, [pc, #664]	; (8004578 <HAL_RCC_OscConfig+0x5e8>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f003 030c 	and.w	r3, r3, #12
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00b      	beq.n	8004300 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80042e8:	4ba3      	ldr	r3, [pc, #652]	; (8004578 <HAL_RCC_OscConfig+0x5e8>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f003 030c 	and.w	r3, r3, #12
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	d172      	bne.n	80043da <HAL_RCC_OscConfig+0x44a>
 80042f4:	4ba0      	ldr	r3, [pc, #640]	; (8004578 <HAL_RCC_OscConfig+0x5e8>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d16c      	bne.n	80043da <HAL_RCC_OscConfig+0x44a>
 8004300:	2302      	movs	r3, #2
 8004302:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004306:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800430a:	fa93 f3a3 	rbit	r3, r3
 800430e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004312:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004316:	fab3 f383 	clz	r3, r3
 800431a:	b2db      	uxtb	r3, r3
 800431c:	095b      	lsrs	r3, r3, #5
 800431e:	b2db      	uxtb	r3, r3
 8004320:	f043 0301 	orr.w	r3, r3, #1
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b01      	cmp	r3, #1
 8004328:	d102      	bne.n	8004330 <HAL_RCC_OscConfig+0x3a0>
 800432a:	4b93      	ldr	r3, [pc, #588]	; (8004578 <HAL_RCC_OscConfig+0x5e8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	e013      	b.n	8004358 <HAL_RCC_OscConfig+0x3c8>
 8004330:	2302      	movs	r3, #2
 8004332:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004336:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800433a:	fa93 f3a3 	rbit	r3, r3
 800433e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004342:	2302      	movs	r3, #2
 8004344:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004348:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800434c:	fa93 f3a3 	rbit	r3, r3
 8004350:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004354:	4b88      	ldr	r3, [pc, #544]	; (8004578 <HAL_RCC_OscConfig+0x5e8>)
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	2202      	movs	r2, #2
 800435a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800435e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004362:	fa92 f2a2 	rbit	r2, r2
 8004366:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800436a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800436e:	fab2 f282 	clz	r2, r2
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	f042 0220 	orr.w	r2, r2, #32
 8004378:	b2d2      	uxtb	r2, r2
 800437a:	f002 021f 	and.w	r2, r2, #31
 800437e:	2101      	movs	r1, #1
 8004380:	fa01 f202 	lsl.w	r2, r1, r2
 8004384:	4013      	ands	r3, r2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <HAL_RCC_OscConfig+0x410>
 800438a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800438e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d002      	beq.n	80043a0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	f000 be2e 	b.w	8004ffc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a0:	4b75      	ldr	r3, [pc, #468]	; (8004578 <HAL_RCC_OscConfig+0x5e8>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	21f8      	movs	r1, #248	; 0xf8
 80043b6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ba:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80043be:	fa91 f1a1 	rbit	r1, r1
 80043c2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80043c6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80043ca:	fab1 f181 	clz	r1, r1
 80043ce:	b2c9      	uxtb	r1, r1
 80043d0:	408b      	lsls	r3, r1
 80043d2:	4969      	ldr	r1, [pc, #420]	; (8004578 <HAL_RCC_OscConfig+0x5e8>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043d8:	e0fd      	b.n	80045d6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 8088 	beq.w	80044fc <HAL_RCC_OscConfig+0x56c>
 80043ec:	2301      	movs	r3, #1
 80043ee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80043f6:	fa93 f3a3 	rbit	r3, r3
 80043fa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80043fe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004402:	fab3 f383 	clz	r3, r3
 8004406:	b2db      	uxtb	r3, r3
 8004408:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800440c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	461a      	mov	r2, r3
 8004414:	2301      	movs	r3, #1
 8004416:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004418:	f7fd fd8c 	bl	8001f34 <HAL_GetTick>
 800441c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004420:	e00a      	b.n	8004438 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004422:	f7fd fd87 	bl	8001f34 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d902      	bls.n	8004438 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	f000 bde2 	b.w	8004ffc <HAL_RCC_OscConfig+0x106c>
 8004438:	2302      	movs	r3, #2
 800443a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004442:	fa93 f3a3 	rbit	r3, r3
 8004446:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800444a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800444e:	fab3 f383 	clz	r3, r3
 8004452:	b2db      	uxtb	r3, r3
 8004454:	095b      	lsrs	r3, r3, #5
 8004456:	b2db      	uxtb	r3, r3
 8004458:	f043 0301 	orr.w	r3, r3, #1
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b01      	cmp	r3, #1
 8004460:	d102      	bne.n	8004468 <HAL_RCC_OscConfig+0x4d8>
 8004462:	4b45      	ldr	r3, [pc, #276]	; (8004578 <HAL_RCC_OscConfig+0x5e8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	e013      	b.n	8004490 <HAL_RCC_OscConfig+0x500>
 8004468:	2302      	movs	r3, #2
 800446a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004472:	fa93 f3a3 	rbit	r3, r3
 8004476:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800447a:	2302      	movs	r3, #2
 800447c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004480:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004484:	fa93 f3a3 	rbit	r3, r3
 8004488:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800448c:	4b3a      	ldr	r3, [pc, #232]	; (8004578 <HAL_RCC_OscConfig+0x5e8>)
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	2202      	movs	r2, #2
 8004492:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004496:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800449a:	fa92 f2a2 	rbit	r2, r2
 800449e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80044a2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80044a6:	fab2 f282 	clz	r2, r2
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	f042 0220 	orr.w	r2, r2, #32
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	f002 021f 	and.w	r2, r2, #31
 80044b6:	2101      	movs	r1, #1
 80044b8:	fa01 f202 	lsl.w	r2, r1, r2
 80044bc:	4013      	ands	r3, r2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0af      	beq.n	8004422 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c2:	4b2d      	ldr	r3, [pc, #180]	; (8004578 <HAL_RCC_OscConfig+0x5e8>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	21f8      	movs	r1, #248	; 0xf8
 80044d8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044dc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80044e0:	fa91 f1a1 	rbit	r1, r1
 80044e4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80044e8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80044ec:	fab1 f181 	clz	r1, r1
 80044f0:	b2c9      	uxtb	r1, r1
 80044f2:	408b      	lsls	r3, r1
 80044f4:	4920      	ldr	r1, [pc, #128]	; (8004578 <HAL_RCC_OscConfig+0x5e8>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	600b      	str	r3, [r1, #0]
 80044fa:	e06c      	b.n	80045d6 <HAL_RCC_OscConfig+0x646>
 80044fc:	2301      	movs	r3, #1
 80044fe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004502:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004506:	fa93 f3a3 	rbit	r3, r3
 800450a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800450e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004512:	fab3 f383 	clz	r3, r3
 8004516:	b2db      	uxtb	r3, r3
 8004518:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800451c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	461a      	mov	r2, r3
 8004524:	2300      	movs	r3, #0
 8004526:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004528:	f7fd fd04 	bl	8001f34 <HAL_GetTick>
 800452c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004530:	e00a      	b.n	8004548 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004532:	f7fd fcff 	bl	8001f34 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d902      	bls.n	8004548 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	f000 bd5a 	b.w	8004ffc <HAL_RCC_OscConfig+0x106c>
 8004548:	2302      	movs	r3, #2
 800454a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004552:	fa93 f3a3 	rbit	r3, r3
 8004556:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800455a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800455e:	fab3 f383 	clz	r3, r3
 8004562:	b2db      	uxtb	r3, r3
 8004564:	095b      	lsrs	r3, r3, #5
 8004566:	b2db      	uxtb	r3, r3
 8004568:	f043 0301 	orr.w	r3, r3, #1
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b01      	cmp	r3, #1
 8004570:	d104      	bne.n	800457c <HAL_RCC_OscConfig+0x5ec>
 8004572:	4b01      	ldr	r3, [pc, #4]	; (8004578 <HAL_RCC_OscConfig+0x5e8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	e015      	b.n	80045a4 <HAL_RCC_OscConfig+0x614>
 8004578:	40021000 	.word	0x40021000
 800457c:	2302      	movs	r3, #2
 800457e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004582:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004586:	fa93 f3a3 	rbit	r3, r3
 800458a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800458e:	2302      	movs	r3, #2
 8004590:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004594:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004598:	fa93 f3a3 	rbit	r3, r3
 800459c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80045a0:	4bc8      	ldr	r3, [pc, #800]	; (80048c4 <HAL_RCC_OscConfig+0x934>)
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	2202      	movs	r2, #2
 80045a6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80045aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80045ae:	fa92 f2a2 	rbit	r2, r2
 80045b2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80045b6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80045ba:	fab2 f282 	clz	r2, r2
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	f042 0220 	orr.w	r2, r2, #32
 80045c4:	b2d2      	uxtb	r2, r2
 80045c6:	f002 021f 	and.w	r2, r2, #31
 80045ca:	2101      	movs	r1, #1
 80045cc:	fa01 f202 	lsl.w	r2, r1, r2
 80045d0:	4013      	ands	r3, r2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1ad      	bne.n	8004532 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 8110 	beq.w	800480c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d079      	beq.n	80046f0 <HAL_RCC_OscConfig+0x760>
 80045fc:	2301      	movs	r3, #1
 80045fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004602:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004606:	fa93 f3a3 	rbit	r3, r3
 800460a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800460e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004612:	fab3 f383 	clz	r3, r3
 8004616:	b2db      	uxtb	r3, r3
 8004618:	461a      	mov	r2, r3
 800461a:	4bab      	ldr	r3, [pc, #684]	; (80048c8 <HAL_RCC_OscConfig+0x938>)
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	461a      	mov	r2, r3
 8004622:	2301      	movs	r3, #1
 8004624:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004626:	f7fd fc85 	bl	8001f34 <HAL_GetTick>
 800462a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462e:	e00a      	b.n	8004646 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004630:	f7fd fc80 	bl	8001f34 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d902      	bls.n	8004646 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	f000 bcdb 	b.w	8004ffc <HAL_RCC_OscConfig+0x106c>
 8004646:	2302      	movs	r3, #2
 8004648:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004650:	fa93 f3a3 	rbit	r3, r3
 8004654:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800465c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004660:	2202      	movs	r2, #2
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004668:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	fa93 f2a3 	rbit	r2, r3
 8004672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004676:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004684:	2202      	movs	r2, #2
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800468c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	fa93 f2a3 	rbit	r2, r3
 8004696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800469a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800469e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046a0:	4b88      	ldr	r3, [pc, #544]	; (80048c4 <HAL_RCC_OscConfig+0x934>)
 80046a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80046ac:	2102      	movs	r1, #2
 80046ae:	6019      	str	r1, [r3, #0]
 80046b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	fa93 f1a3 	rbit	r1, r3
 80046be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80046c6:	6019      	str	r1, [r3, #0]
  return result;
 80046c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	fab3 f383 	clz	r3, r3
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	f003 031f 	and.w	r3, r3, #31
 80046e2:	2101      	movs	r1, #1
 80046e4:	fa01 f303 	lsl.w	r3, r1, r3
 80046e8:	4013      	ands	r3, r2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0a0      	beq.n	8004630 <HAL_RCC_OscConfig+0x6a0>
 80046ee:	e08d      	b.n	800480c <HAL_RCC_OscConfig+0x87c>
 80046f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80046f8:	2201      	movs	r2, #1
 80046fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004700:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	fa93 f2a3 	rbit	r2, r3
 800470a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800470e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004712:	601a      	str	r2, [r3, #0]
  return result;
 8004714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004718:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800471c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800471e:	fab3 f383 	clz	r3, r3
 8004722:	b2db      	uxtb	r3, r3
 8004724:	461a      	mov	r2, r3
 8004726:	4b68      	ldr	r3, [pc, #416]	; (80048c8 <HAL_RCC_OscConfig+0x938>)
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	461a      	mov	r2, r3
 800472e:	2300      	movs	r3, #0
 8004730:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004732:	f7fd fbff 	bl	8001f34 <HAL_GetTick>
 8004736:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800473a:	e00a      	b.n	8004752 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800473c:	f7fd fbfa 	bl	8001f34 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d902      	bls.n	8004752 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	f000 bc55 	b.w	8004ffc <HAL_RCC_OscConfig+0x106c>
 8004752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004756:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800475a:	2202      	movs	r2, #2
 800475c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004762:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	fa93 f2a3 	rbit	r2, r3
 800476c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004770:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800477a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800477e:	2202      	movs	r2, #2
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004786:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	fa93 f2a3 	rbit	r2, r3
 8004790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004794:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800479e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047a2:	2202      	movs	r2, #2
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	fa93 f2a3 	rbit	r2, r3
 80047b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80047bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047be:	4b41      	ldr	r3, [pc, #260]	; (80048c4 <HAL_RCC_OscConfig+0x934>)
 80047c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80047ca:	2102      	movs	r1, #2
 80047cc:	6019      	str	r1, [r3, #0]
 80047ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	fa93 f1a3 	rbit	r1, r3
 80047dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80047e4:	6019      	str	r1, [r3, #0]
  return result;
 80047e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ea:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	fab3 f383 	clz	r3, r3
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	f003 031f 	and.w	r3, r3, #31
 8004800:	2101      	movs	r1, #1
 8004802:	fa01 f303 	lsl.w	r3, r1, r3
 8004806:	4013      	ands	r3, r2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d197      	bne.n	800473c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800480c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004810:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 81a1 	beq.w	8004b64 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004822:	2300      	movs	r3, #0
 8004824:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004828:	4b26      	ldr	r3, [pc, #152]	; (80048c4 <HAL_RCC_OscConfig+0x934>)
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d116      	bne.n	8004862 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004834:	4b23      	ldr	r3, [pc, #140]	; (80048c4 <HAL_RCC_OscConfig+0x934>)
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	4a22      	ldr	r2, [pc, #136]	; (80048c4 <HAL_RCC_OscConfig+0x934>)
 800483a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800483e:	61d3      	str	r3, [r2, #28]
 8004840:	4b20      	ldr	r3, [pc, #128]	; (80048c4 <HAL_RCC_OscConfig+0x934>)
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800484c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004856:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800485a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800485c:	2301      	movs	r3, #1
 800485e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004862:	4b1a      	ldr	r3, [pc, #104]	; (80048cc <HAL_RCC_OscConfig+0x93c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486a:	2b00      	cmp	r3, #0
 800486c:	d11a      	bne.n	80048a4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800486e:	4b17      	ldr	r3, [pc, #92]	; (80048cc <HAL_RCC_OscConfig+0x93c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a16      	ldr	r2, [pc, #88]	; (80048cc <HAL_RCC_OscConfig+0x93c>)
 8004874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004878:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800487a:	f7fd fb5b 	bl	8001f34 <HAL_GetTick>
 800487e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004882:	e009      	b.n	8004898 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004884:	f7fd fb56 	bl	8001f34 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b64      	cmp	r3, #100	; 0x64
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e3b1      	b.n	8004ffc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004898:	4b0c      	ldr	r3, [pc, #48]	; (80048cc <HAL_RCC_OscConfig+0x93c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0ef      	beq.n	8004884 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d10d      	bne.n	80048d0 <HAL_RCC_OscConfig+0x940>
 80048b4:	4b03      	ldr	r3, [pc, #12]	; (80048c4 <HAL_RCC_OscConfig+0x934>)
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	4a02      	ldr	r2, [pc, #8]	; (80048c4 <HAL_RCC_OscConfig+0x934>)
 80048ba:	f043 0301 	orr.w	r3, r3, #1
 80048be:	6213      	str	r3, [r2, #32]
 80048c0:	e03c      	b.n	800493c <HAL_RCC_OscConfig+0x9ac>
 80048c2:	bf00      	nop
 80048c4:	40021000 	.word	0x40021000
 80048c8:	10908120 	.word	0x10908120
 80048cc:	40007000 	.word	0x40007000
 80048d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10c      	bne.n	80048fa <HAL_RCC_OscConfig+0x96a>
 80048e0:	4bc1      	ldr	r3, [pc, #772]	; (8004be8 <HAL_RCC_OscConfig+0xc58>)
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	4ac0      	ldr	r2, [pc, #768]	; (8004be8 <HAL_RCC_OscConfig+0xc58>)
 80048e6:	f023 0301 	bic.w	r3, r3, #1
 80048ea:	6213      	str	r3, [r2, #32]
 80048ec:	4bbe      	ldr	r3, [pc, #760]	; (8004be8 <HAL_RCC_OscConfig+0xc58>)
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	4abd      	ldr	r2, [pc, #756]	; (8004be8 <HAL_RCC_OscConfig+0xc58>)
 80048f2:	f023 0304 	bic.w	r3, r3, #4
 80048f6:	6213      	str	r3, [r2, #32]
 80048f8:	e020      	b.n	800493c <HAL_RCC_OscConfig+0x9ac>
 80048fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	2b05      	cmp	r3, #5
 8004908:	d10c      	bne.n	8004924 <HAL_RCC_OscConfig+0x994>
 800490a:	4bb7      	ldr	r3, [pc, #732]	; (8004be8 <HAL_RCC_OscConfig+0xc58>)
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	4ab6      	ldr	r2, [pc, #728]	; (8004be8 <HAL_RCC_OscConfig+0xc58>)
 8004910:	f043 0304 	orr.w	r3, r3, #4
 8004914:	6213      	str	r3, [r2, #32]
 8004916:	4bb4      	ldr	r3, [pc, #720]	; (8004be8 <HAL_RCC_OscConfig+0xc58>)
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	4ab3      	ldr	r2, [pc, #716]	; (8004be8 <HAL_RCC_OscConfig+0xc58>)
 800491c:	f043 0301 	orr.w	r3, r3, #1
 8004920:	6213      	str	r3, [r2, #32]
 8004922:	e00b      	b.n	800493c <HAL_RCC_OscConfig+0x9ac>
 8004924:	4bb0      	ldr	r3, [pc, #704]	; (8004be8 <HAL_RCC_OscConfig+0xc58>)
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	4aaf      	ldr	r2, [pc, #700]	; (8004be8 <HAL_RCC_OscConfig+0xc58>)
 800492a:	f023 0301 	bic.w	r3, r3, #1
 800492e:	6213      	str	r3, [r2, #32]
 8004930:	4bad      	ldr	r3, [pc, #692]	; (8004be8 <HAL_RCC_OscConfig+0xc58>)
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	4aac      	ldr	r2, [pc, #688]	; (8004be8 <HAL_RCC_OscConfig+0xc58>)
 8004936:	f023 0304 	bic.w	r3, r3, #4
 800493a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800493c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004940:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 8081 	beq.w	8004a50 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800494e:	f7fd faf1 	bl	8001f34 <HAL_GetTick>
 8004952:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004956:	e00b      	b.n	8004970 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004958:	f7fd faec 	bl	8001f34 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	f241 3288 	movw	r2, #5000	; 0x1388
 8004968:	4293      	cmp	r3, r2
 800496a:	d901      	bls.n	8004970 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e345      	b.n	8004ffc <HAL_RCC_OscConfig+0x106c>
 8004970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004974:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004978:	2202      	movs	r2, #2
 800497a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004980:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	fa93 f2a3 	rbit	r2, r3
 800498a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800498e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004998:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800499c:	2202      	movs	r2, #2
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	fa93 f2a3 	rbit	r2, r3
 80049ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049b2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80049b6:	601a      	str	r2, [r3, #0]
  return result;
 80049b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049bc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80049c0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c2:	fab3 f383 	clz	r3, r3
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	095b      	lsrs	r3, r3, #5
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	f043 0302 	orr.w	r3, r3, #2
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d102      	bne.n	80049dc <HAL_RCC_OscConfig+0xa4c>
 80049d6:	4b84      	ldr	r3, [pc, #528]	; (8004be8 <HAL_RCC_OscConfig+0xc58>)
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	e013      	b.n	8004a04 <HAL_RCC_OscConfig+0xa74>
 80049dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80049e4:	2202      	movs	r2, #2
 80049e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	fa93 f2a3 	rbit	r2, r3
 80049f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049fa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	4b79      	ldr	r3, [pc, #484]	; (8004be8 <HAL_RCC_OscConfig+0xc58>)
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a08:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004a0c:	2102      	movs	r1, #2
 8004a0e:	6011      	str	r1, [r2, #0]
 8004a10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a14:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004a18:	6812      	ldr	r2, [r2, #0]
 8004a1a:	fa92 f1a2 	rbit	r1, r2
 8004a1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a22:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004a26:	6011      	str	r1, [r2, #0]
  return result;
 8004a28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a2c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004a30:	6812      	ldr	r2, [r2, #0]
 8004a32:	fab2 f282 	clz	r2, r2
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	f002 021f 	and.w	r2, r2, #31
 8004a42:	2101      	movs	r1, #1
 8004a44:	fa01 f202 	lsl.w	r2, r1, r2
 8004a48:	4013      	ands	r3, r2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d084      	beq.n	8004958 <HAL_RCC_OscConfig+0x9c8>
 8004a4e:	e07f      	b.n	8004b50 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a50:	f7fd fa70 	bl	8001f34 <HAL_GetTick>
 8004a54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a58:	e00b      	b.n	8004a72 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a5a:	f7fd fa6b 	bl	8001f34 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e2c4      	b.n	8004ffc <HAL_RCC_OscConfig+0x106c>
 8004a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a76:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a82:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	fa93 f2a3 	rbit	r2, r3
 8004a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a90:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a9a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	fa93 f2a3 	rbit	r2, r3
 8004ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ab4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004ab8:	601a      	str	r2, [r3, #0]
  return result;
 8004aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004abe:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004ac2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ac4:	fab3 f383 	clz	r3, r3
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	f043 0302 	orr.w	r3, r3, #2
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d102      	bne.n	8004ade <HAL_RCC_OscConfig+0xb4e>
 8004ad8:	4b43      	ldr	r3, [pc, #268]	; (8004be8 <HAL_RCC_OscConfig+0xc58>)
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	e013      	b.n	8004b06 <HAL_RCC_OscConfig+0xb76>
 8004ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	fa93 f2a3 	rbit	r2, r3
 8004af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004afc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	4b39      	ldr	r3, [pc, #228]	; (8004be8 <HAL_RCC_OscConfig+0xc58>)
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b0a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004b0e:	2102      	movs	r1, #2
 8004b10:	6011      	str	r1, [r2, #0]
 8004b12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b16:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004b1a:	6812      	ldr	r2, [r2, #0]
 8004b1c:	fa92 f1a2 	rbit	r1, r2
 8004b20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b24:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004b28:	6011      	str	r1, [r2, #0]
  return result;
 8004b2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b2e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004b32:	6812      	ldr	r2, [r2, #0]
 8004b34:	fab2 f282 	clz	r2, r2
 8004b38:	b2d2      	uxtb	r2, r2
 8004b3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	f002 021f 	and.w	r2, r2, #31
 8004b44:	2101      	movs	r1, #1
 8004b46:	fa01 f202 	lsl.w	r2, r1, r2
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d184      	bne.n	8004a5a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b50:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d105      	bne.n	8004b64 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b58:	4b23      	ldr	r3, [pc, #140]	; (8004be8 <HAL_RCC_OscConfig+0xc58>)
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	4a22      	ldr	r2, [pc, #136]	; (8004be8 <HAL_RCC_OscConfig+0xc58>)
 8004b5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b62:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 8242 	beq.w	8004ffa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b76:	4b1c      	ldr	r3, [pc, #112]	; (8004be8 <HAL_RCC_OscConfig+0xc58>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f003 030c 	and.w	r3, r3, #12
 8004b7e:	2b08      	cmp	r3, #8
 8004b80:	f000 8213 	beq.w	8004faa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	f040 8162 	bne.w	8004e5a <HAL_RCC_OscConfig+0xeca>
 8004b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b9a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004b9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ba2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ba8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	fa93 f2a3 	rbit	r2, r3
 8004bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bb6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004bba:	601a      	str	r2, [r3, #0]
  return result;
 8004bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bc0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004bc4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc6:	fab3 f383 	clz	r3, r3
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004bd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	2300      	movs	r3, #0
 8004bda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bdc:	f7fd f9aa 	bl	8001f34 <HAL_GetTick>
 8004be0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004be4:	e00c      	b.n	8004c00 <HAL_RCC_OscConfig+0xc70>
 8004be6:	bf00      	nop
 8004be8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bec:	f7fd f9a2 	bl	8001f34 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e1fd      	b.n	8004ffc <HAL_RCC_OscConfig+0x106c>
 8004c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c04:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004c08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c12:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	fa93 f2a3 	rbit	r2, r3
 8004c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c20:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004c24:	601a      	str	r2, [r3, #0]
  return result;
 8004c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c2a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004c2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c30:	fab3 f383 	clz	r3, r3
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	095b      	lsrs	r3, r3, #5
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	f043 0301 	orr.w	r3, r3, #1
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d102      	bne.n	8004c4a <HAL_RCC_OscConfig+0xcba>
 8004c44:	4bb0      	ldr	r3, [pc, #704]	; (8004f08 <HAL_RCC_OscConfig+0xf78>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	e027      	b.n	8004c9a <HAL_RCC_OscConfig+0xd0a>
 8004c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c4e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004c52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c5c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	fa93 f2a3 	rbit	r2, r3
 8004c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c6a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c74:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004c78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c82:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	fa93 f2a3 	rbit	r2, r3
 8004c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c90:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	4b9c      	ldr	r3, [pc, #624]	; (8004f08 <HAL_RCC_OscConfig+0xf78>)
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c9e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004ca2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004ca6:	6011      	str	r1, [r2, #0]
 8004ca8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cac:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004cb0:	6812      	ldr	r2, [r2, #0]
 8004cb2:	fa92 f1a2 	rbit	r1, r2
 8004cb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cba:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004cbe:	6011      	str	r1, [r2, #0]
  return result;
 8004cc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cc4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004cc8:	6812      	ldr	r2, [r2, #0]
 8004cca:	fab2 f282 	clz	r2, r2
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	f042 0220 	orr.w	r2, r2, #32
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	f002 021f 	and.w	r2, r2, #31
 8004cda:	2101      	movs	r1, #1
 8004cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d182      	bne.n	8004bec <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ce6:	4b88      	ldr	r3, [pc, #544]	; (8004f08 <HAL_RCC_OscConfig+0xf78>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	430b      	orrs	r3, r1
 8004d08:	497f      	ldr	r1, [pc, #508]	; (8004f08 <HAL_RCC_OscConfig+0xf78>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	604b      	str	r3, [r1, #4]
 8004d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d12:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004d16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d20:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	fa93 f2a3 	rbit	r2, r3
 8004d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d2e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004d32:	601a      	str	r2, [r3, #0]
  return result;
 8004d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d38:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004d3c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d3e:	fab3 f383 	clz	r3, r3
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	461a      	mov	r2, r3
 8004d50:	2301      	movs	r3, #1
 8004d52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d54:	f7fd f8ee 	bl	8001f34 <HAL_GetTick>
 8004d58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d5c:	e009      	b.n	8004d72 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d5e:	f7fd f8e9 	bl	8001f34 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e144      	b.n	8004ffc <HAL_RCC_OscConfig+0x106c>
 8004d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d76:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004d7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d84:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	fa93 f2a3 	rbit	r2, r3
 8004d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d92:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004d96:	601a      	str	r2, [r3, #0]
  return result;
 8004d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d9c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004da0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004da2:	fab3 f383 	clz	r3, r3
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	095b      	lsrs	r3, r3, #5
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	f043 0301 	orr.w	r3, r3, #1
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d102      	bne.n	8004dbc <HAL_RCC_OscConfig+0xe2c>
 8004db6:	4b54      	ldr	r3, [pc, #336]	; (8004f08 <HAL_RCC_OscConfig+0xf78>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	e027      	b.n	8004e0c <HAL_RCC_OscConfig+0xe7c>
 8004dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dc0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004dc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dce:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	fa93 f2a3 	rbit	r2, r3
 8004dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ddc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004dea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004df4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	fa93 f2a3 	rbit	r2, r3
 8004dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e02:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	4b3f      	ldr	r3, [pc, #252]	; (8004f08 <HAL_RCC_OscConfig+0xf78>)
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e10:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004e14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004e18:	6011      	str	r1, [r2, #0]
 8004e1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e1e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004e22:	6812      	ldr	r2, [r2, #0]
 8004e24:	fa92 f1a2 	rbit	r1, r2
 8004e28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e2c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004e30:	6011      	str	r1, [r2, #0]
  return result;
 8004e32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e36:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	fab2 f282 	clz	r2, r2
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	f042 0220 	orr.w	r2, r2, #32
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	f002 021f 	and.w	r2, r2, #31
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d082      	beq.n	8004d5e <HAL_RCC_OscConfig+0xdce>
 8004e58:	e0cf      	b.n	8004ffa <HAL_RCC_OscConfig+0x106a>
 8004e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e5e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004e62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e6c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	fa93 f2a3 	rbit	r2, r3
 8004e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e7a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004e7e:	601a      	str	r2, [r3, #0]
  return result;
 8004e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e84:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004e88:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e8a:	fab3 f383 	clz	r3, r3
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea0:	f7fd f848 	bl	8001f34 <HAL_GetTick>
 8004ea4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ea8:	e009      	b.n	8004ebe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eaa:	f7fd f843 	bl	8001f34 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e09e      	b.n	8004ffc <HAL_RCC_OscConfig+0x106c>
 8004ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ec2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004ec6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004eca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ed0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	fa93 f2a3 	rbit	r2, r3
 8004eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ede:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004ee2:	601a      	str	r2, [r3, #0]
  return result;
 8004ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004eec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eee:	fab3 f383 	clz	r3, r3
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	095b      	lsrs	r3, r3, #5
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	f043 0301 	orr.w	r3, r3, #1
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d104      	bne.n	8004f0c <HAL_RCC_OscConfig+0xf7c>
 8004f02:	4b01      	ldr	r3, [pc, #4]	; (8004f08 <HAL_RCC_OscConfig+0xf78>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	e029      	b.n	8004f5c <HAL_RCC_OscConfig+0xfcc>
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f10:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004f14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f1e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	fa93 f2a3 	rbit	r2, r3
 8004f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f2c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f36:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004f3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f44:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	fa93 f2a3 	rbit	r2, r3
 8004f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f52:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	4b2b      	ldr	r3, [pc, #172]	; (8005008 <HAL_RCC_OscConfig+0x1078>)
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f60:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004f64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f68:	6011      	str	r1, [r2, #0]
 8004f6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f6e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004f72:	6812      	ldr	r2, [r2, #0]
 8004f74:	fa92 f1a2 	rbit	r1, r2
 8004f78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f7c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004f80:	6011      	str	r1, [r2, #0]
  return result;
 8004f82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f86:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004f8a:	6812      	ldr	r2, [r2, #0]
 8004f8c:	fab2 f282 	clz	r2, r2
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	f042 0220 	orr.w	r2, r2, #32
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	f002 021f 	and.w	r2, r2, #31
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d180      	bne.n	8004eaa <HAL_RCC_OscConfig+0xf1a>
 8004fa8:	e027      	b.n	8004ffa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e01e      	b.n	8004ffc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004fbe:	4b12      	ldr	r3, [pc, #72]	; (8005008 <HAL_RCC_OscConfig+0x1078>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004fc6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004fca:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d10b      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004fde:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004fe2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d001      	beq.n	8004ffa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	40021000 	.word	0x40021000

0800500c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b09e      	sub	sp, #120	; 0x78
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e162      	b.n	80052ea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005024:	4b90      	ldr	r3, [pc, #576]	; (8005268 <HAL_RCC_ClockConfig+0x25c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d910      	bls.n	8005054 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005032:	4b8d      	ldr	r3, [pc, #564]	; (8005268 <HAL_RCC_ClockConfig+0x25c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f023 0207 	bic.w	r2, r3, #7
 800503a:	498b      	ldr	r1, [pc, #556]	; (8005268 <HAL_RCC_ClockConfig+0x25c>)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	4313      	orrs	r3, r2
 8005040:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005042:	4b89      	ldr	r3, [pc, #548]	; (8005268 <HAL_RCC_ClockConfig+0x25c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	429a      	cmp	r2, r3
 800504e:	d001      	beq.n	8005054 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e14a      	b.n	80052ea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d008      	beq.n	8005072 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005060:	4b82      	ldr	r3, [pc, #520]	; (800526c <HAL_RCC_ClockConfig+0x260>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	497f      	ldr	r1, [pc, #508]	; (800526c <HAL_RCC_ClockConfig+0x260>)
 800506e:	4313      	orrs	r3, r2
 8005070:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 80dc 	beq.w	8005238 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d13c      	bne.n	8005102 <HAL_RCC_ClockConfig+0xf6>
 8005088:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800508c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005090:	fa93 f3a3 	rbit	r3, r3
 8005094:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005098:	fab3 f383 	clz	r3, r3
 800509c:	b2db      	uxtb	r3, r3
 800509e:	095b      	lsrs	r3, r3, #5
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d102      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xa6>
 80050ac:	4b6f      	ldr	r3, [pc, #444]	; (800526c <HAL_RCC_ClockConfig+0x260>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	e00f      	b.n	80050d2 <HAL_RCC_ClockConfig+0xc6>
 80050b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050ba:	fa93 f3a3 	rbit	r3, r3
 80050be:	667b      	str	r3, [r7, #100]	; 0x64
 80050c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050c4:	663b      	str	r3, [r7, #96]	; 0x60
 80050c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050c8:	fa93 f3a3 	rbit	r3, r3
 80050cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ce:	4b67      	ldr	r3, [pc, #412]	; (800526c <HAL_RCC_ClockConfig+0x260>)
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80050d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050da:	fa92 f2a2 	rbit	r2, r2
 80050de:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80050e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050e2:	fab2 f282 	clz	r2, r2
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	f042 0220 	orr.w	r2, r2, #32
 80050ec:	b2d2      	uxtb	r2, r2
 80050ee:	f002 021f 	and.w	r2, r2, #31
 80050f2:	2101      	movs	r1, #1
 80050f4:	fa01 f202 	lsl.w	r2, r1, r2
 80050f8:	4013      	ands	r3, r2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d17b      	bne.n	80051f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e0f3      	b.n	80052ea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b02      	cmp	r3, #2
 8005108:	d13c      	bne.n	8005184 <HAL_RCC_ClockConfig+0x178>
 800510a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800510e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005112:	fa93 f3a3 	rbit	r3, r3
 8005116:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800511a:	fab3 f383 	clz	r3, r3
 800511e:	b2db      	uxtb	r3, r3
 8005120:	095b      	lsrs	r3, r3, #5
 8005122:	b2db      	uxtb	r3, r3
 8005124:	f043 0301 	orr.w	r3, r3, #1
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b01      	cmp	r3, #1
 800512c:	d102      	bne.n	8005134 <HAL_RCC_ClockConfig+0x128>
 800512e:	4b4f      	ldr	r3, [pc, #316]	; (800526c <HAL_RCC_ClockConfig+0x260>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	e00f      	b.n	8005154 <HAL_RCC_ClockConfig+0x148>
 8005134:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005138:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800513a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800513c:	fa93 f3a3 	rbit	r3, r3
 8005140:	647b      	str	r3, [r7, #68]	; 0x44
 8005142:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005146:	643b      	str	r3, [r7, #64]	; 0x40
 8005148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800514a:	fa93 f3a3 	rbit	r3, r3
 800514e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005150:	4b46      	ldr	r3, [pc, #280]	; (800526c <HAL_RCC_ClockConfig+0x260>)
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005158:	63ba      	str	r2, [r7, #56]	; 0x38
 800515a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800515c:	fa92 f2a2 	rbit	r2, r2
 8005160:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005164:	fab2 f282 	clz	r2, r2
 8005168:	b2d2      	uxtb	r2, r2
 800516a:	f042 0220 	orr.w	r2, r2, #32
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	f002 021f 	and.w	r2, r2, #31
 8005174:	2101      	movs	r1, #1
 8005176:	fa01 f202 	lsl.w	r2, r1, r2
 800517a:	4013      	ands	r3, r2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d13a      	bne.n	80051f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e0b2      	b.n	80052ea <HAL_RCC_ClockConfig+0x2de>
 8005184:	2302      	movs	r3, #2
 8005186:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518a:	fa93 f3a3 	rbit	r3, r3
 800518e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005192:	fab3 f383 	clz	r3, r3
 8005196:	b2db      	uxtb	r3, r3
 8005198:	095b      	lsrs	r3, r3, #5
 800519a:	b2db      	uxtb	r3, r3
 800519c:	f043 0301 	orr.w	r3, r3, #1
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d102      	bne.n	80051ac <HAL_RCC_ClockConfig+0x1a0>
 80051a6:	4b31      	ldr	r3, [pc, #196]	; (800526c <HAL_RCC_ClockConfig+0x260>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	e00d      	b.n	80051c8 <HAL_RCC_ClockConfig+0x1bc>
 80051ac:	2302      	movs	r3, #2
 80051ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b2:	fa93 f3a3 	rbit	r3, r3
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
 80051b8:	2302      	movs	r3, #2
 80051ba:	623b      	str	r3, [r7, #32]
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	fa93 f3a3 	rbit	r3, r3
 80051c2:	61fb      	str	r3, [r7, #28]
 80051c4:	4b29      	ldr	r3, [pc, #164]	; (800526c <HAL_RCC_ClockConfig+0x260>)
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	2202      	movs	r2, #2
 80051ca:	61ba      	str	r2, [r7, #24]
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	fa92 f2a2 	rbit	r2, r2
 80051d2:	617a      	str	r2, [r7, #20]
  return result;
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	fab2 f282 	clz	r2, r2
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	f042 0220 	orr.w	r2, r2, #32
 80051e0:	b2d2      	uxtb	r2, r2
 80051e2:	f002 021f 	and.w	r2, r2, #31
 80051e6:	2101      	movs	r1, #1
 80051e8:	fa01 f202 	lsl.w	r2, r1, r2
 80051ec:	4013      	ands	r3, r2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e079      	b.n	80052ea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051f6:	4b1d      	ldr	r3, [pc, #116]	; (800526c <HAL_RCC_ClockConfig+0x260>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f023 0203 	bic.w	r2, r3, #3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	491a      	ldr	r1, [pc, #104]	; (800526c <HAL_RCC_ClockConfig+0x260>)
 8005204:	4313      	orrs	r3, r2
 8005206:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005208:	f7fc fe94 	bl	8001f34 <HAL_GetTick>
 800520c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800520e:	e00a      	b.n	8005226 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005210:	f7fc fe90 	bl	8001f34 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	f241 3288 	movw	r2, #5000	; 0x1388
 800521e:	4293      	cmp	r3, r2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e061      	b.n	80052ea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005226:	4b11      	ldr	r3, [pc, #68]	; (800526c <HAL_RCC_ClockConfig+0x260>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f003 020c 	and.w	r2, r3, #12
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	429a      	cmp	r2, r3
 8005236:	d1eb      	bne.n	8005210 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005238:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <HAL_RCC_ClockConfig+0x25c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d214      	bcs.n	8005270 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005246:	4b08      	ldr	r3, [pc, #32]	; (8005268 <HAL_RCC_ClockConfig+0x25c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f023 0207 	bic.w	r2, r3, #7
 800524e:	4906      	ldr	r1, [pc, #24]	; (8005268 <HAL_RCC_ClockConfig+0x25c>)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	4313      	orrs	r3, r2
 8005254:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005256:	4b04      	ldr	r3, [pc, #16]	; (8005268 <HAL_RCC_ClockConfig+0x25c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0307 	and.w	r3, r3, #7
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	429a      	cmp	r2, r3
 8005262:	d005      	beq.n	8005270 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e040      	b.n	80052ea <HAL_RCC_ClockConfig+0x2de>
 8005268:	40022000 	.word	0x40022000
 800526c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b00      	cmp	r3, #0
 800527a:	d008      	beq.n	800528e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800527c:	4b1d      	ldr	r3, [pc, #116]	; (80052f4 <HAL_RCC_ClockConfig+0x2e8>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	491a      	ldr	r1, [pc, #104]	; (80052f4 <HAL_RCC_ClockConfig+0x2e8>)
 800528a:	4313      	orrs	r3, r2
 800528c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b00      	cmp	r3, #0
 8005298:	d009      	beq.n	80052ae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800529a:	4b16      	ldr	r3, [pc, #88]	; (80052f4 <HAL_RCC_ClockConfig+0x2e8>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	4912      	ldr	r1, [pc, #72]	; (80052f4 <HAL_RCC_ClockConfig+0x2e8>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80052ae:	f000 f829 	bl	8005304 <HAL_RCC_GetSysClockFreq>
 80052b2:	4601      	mov	r1, r0
 80052b4:	4b0f      	ldr	r3, [pc, #60]	; (80052f4 <HAL_RCC_ClockConfig+0x2e8>)
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052bc:	22f0      	movs	r2, #240	; 0xf0
 80052be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	fa92 f2a2 	rbit	r2, r2
 80052c6:	60fa      	str	r2, [r7, #12]
  return result;
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	fab2 f282 	clz	r2, r2
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	40d3      	lsrs	r3, r2
 80052d2:	4a09      	ldr	r2, [pc, #36]	; (80052f8 <HAL_RCC_ClockConfig+0x2ec>)
 80052d4:	5cd3      	ldrb	r3, [r2, r3]
 80052d6:	fa21 f303 	lsr.w	r3, r1, r3
 80052da:	4a08      	ldr	r2, [pc, #32]	; (80052fc <HAL_RCC_ClockConfig+0x2f0>)
 80052dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80052de:	4b08      	ldr	r3, [pc, #32]	; (8005300 <HAL_RCC_ClockConfig+0x2f4>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fc fde2 	bl	8001eac <HAL_InitTick>
  
  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3778      	adds	r7, #120	; 0x78
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	40021000 	.word	0x40021000
 80052f8:	0800b300 	.word	0x0800b300
 80052fc:	20000090 	.word	0x20000090
 8005300:	20000094 	.word	0x20000094

08005304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005304:	b480      	push	{r7}
 8005306:	b08b      	sub	sp, #44	; 0x2c
 8005308:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	61fb      	str	r3, [r7, #28]
 800530e:	2300      	movs	r3, #0
 8005310:	61bb      	str	r3, [r7, #24]
 8005312:	2300      	movs	r3, #0
 8005314:	627b      	str	r3, [r7, #36]	; 0x24
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800531e:	4b29      	ldr	r3, [pc, #164]	; (80053c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	f003 030c 	and.w	r3, r3, #12
 800532a:	2b04      	cmp	r3, #4
 800532c:	d002      	beq.n	8005334 <HAL_RCC_GetSysClockFreq+0x30>
 800532e:	2b08      	cmp	r3, #8
 8005330:	d003      	beq.n	800533a <HAL_RCC_GetSysClockFreq+0x36>
 8005332:	e03c      	b.n	80053ae <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005334:	4b24      	ldr	r3, [pc, #144]	; (80053c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005336:	623b      	str	r3, [r7, #32]
      break;
 8005338:	e03c      	b.n	80053b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005340:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005344:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	fa92 f2a2 	rbit	r2, r2
 800534c:	607a      	str	r2, [r7, #4]
  return result;
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	fab2 f282 	clz	r2, r2
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	40d3      	lsrs	r3, r2
 8005358:	4a1c      	ldr	r2, [pc, #112]	; (80053cc <HAL_RCC_GetSysClockFreq+0xc8>)
 800535a:	5cd3      	ldrb	r3, [r2, r3]
 800535c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800535e:	4b19      	ldr	r3, [pc, #100]	; (80053c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	220f      	movs	r2, #15
 8005368:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	fa92 f2a2 	rbit	r2, r2
 8005370:	60fa      	str	r2, [r7, #12]
  return result;
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	fab2 f282 	clz	r2, r2
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	40d3      	lsrs	r3, r2
 800537c:	4a14      	ldr	r2, [pc, #80]	; (80053d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800537e:	5cd3      	ldrb	r3, [r2, r3]
 8005380:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d008      	beq.n	800539e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800538c:	4a0e      	ldr	r2, [pc, #56]	; (80053c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	fbb2 f2f3 	udiv	r2, r2, r3
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	fb02 f303 	mul.w	r3, r2, r3
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
 800539c:	e004      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	4a0c      	ldr	r2, [pc, #48]	; (80053d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80053a2:	fb02 f303 	mul.w	r3, r2, r3
 80053a6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	623b      	str	r3, [r7, #32]
      break;
 80053ac:	e002      	b.n	80053b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053ae:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80053b0:	623b      	str	r3, [r7, #32]
      break;
 80053b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053b4:	6a3b      	ldr	r3, [r7, #32]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	372c      	adds	r7, #44	; 0x2c
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	40021000 	.word	0x40021000
 80053c8:	007a1200 	.word	0x007a1200
 80053cc:	0800b318 	.word	0x0800b318
 80053d0:	0800b328 	.word	0x0800b328
 80053d4:	003d0900 	.word	0x003d0900

080053d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053dc:	4b03      	ldr	r3, [pc, #12]	; (80053ec <HAL_RCC_GetHCLKFreq+0x14>)
 80053de:	681b      	ldr	r3, [r3, #0]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	20000090 	.word	0x20000090

080053f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80053f6:	f7ff ffef 	bl	80053d8 <HAL_RCC_GetHCLKFreq>
 80053fa:	4601      	mov	r1, r0
 80053fc:	4b0b      	ldr	r3, [pc, #44]	; (800542c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005404:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005408:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	fa92 f2a2 	rbit	r2, r2
 8005410:	603a      	str	r2, [r7, #0]
  return result;
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	fab2 f282 	clz	r2, r2
 8005418:	b2d2      	uxtb	r2, r2
 800541a:	40d3      	lsrs	r3, r2
 800541c:	4a04      	ldr	r2, [pc, #16]	; (8005430 <HAL_RCC_GetPCLK1Freq+0x40>)
 800541e:	5cd3      	ldrb	r3, [r2, r3]
 8005420:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005424:	4618      	mov	r0, r3
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	40021000 	.word	0x40021000
 8005430:	0800b310 	.word	0x0800b310

08005434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800543a:	f7ff ffcd 	bl	80053d8 <HAL_RCC_GetHCLKFreq>
 800543e:	4601      	mov	r1, r0
 8005440:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005448:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800544c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	fa92 f2a2 	rbit	r2, r2
 8005454:	603a      	str	r2, [r7, #0]
  return result;
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	fab2 f282 	clz	r2, r2
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	40d3      	lsrs	r3, r2
 8005460:	4a04      	ldr	r2, [pc, #16]	; (8005474 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005462:	5cd3      	ldrb	r3, [r2, r3]
 8005464:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005468:	4618      	mov	r0, r3
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40021000 	.word	0x40021000
 8005474:	0800b310 	.word	0x0800b310

08005478 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b092      	sub	sp, #72	; 0x48
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005488:	2300      	movs	r3, #0
 800548a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 80d4 	beq.w	8005644 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800549c:	4b4e      	ldr	r3, [pc, #312]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800549e:	69db      	ldr	r3, [r3, #28]
 80054a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10e      	bne.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054a8:	4b4b      	ldr	r3, [pc, #300]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	4a4a      	ldr	r2, [pc, #296]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054b2:	61d3      	str	r3, [r2, #28]
 80054b4:	4b48      	ldr	r3, [pc, #288]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054bc:	60bb      	str	r3, [r7, #8]
 80054be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054c0:	2301      	movs	r3, #1
 80054c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c6:	4b45      	ldr	r3, [pc, #276]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d118      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054d2:	4b42      	ldr	r3, [pc, #264]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a41      	ldr	r2, [pc, #260]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054de:	f7fc fd29 	bl	8001f34 <HAL_GetTick>
 80054e2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e4:	e008      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054e6:	f7fc fd25 	bl	8001f34 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b64      	cmp	r3, #100	; 0x64
 80054f2:	d901      	bls.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e169      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f8:	4b38      	ldr	r3, [pc, #224]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0f0      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005504:	4b34      	ldr	r3, [pc, #208]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800550c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800550e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 8084 	beq.w	800561e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800551e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005520:	429a      	cmp	r2, r3
 8005522:	d07c      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005524:	4b2c      	ldr	r3, [pc, #176]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800552c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800552e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005532:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	fa93 f3a3 	rbit	r3, r3
 800553a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800553c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800553e:	fab3 f383 	clz	r3, r3
 8005542:	b2db      	uxtb	r3, r3
 8005544:	461a      	mov	r2, r3
 8005546:	4b26      	ldr	r3, [pc, #152]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005548:	4413      	add	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	461a      	mov	r2, r3
 800554e:	2301      	movs	r3, #1
 8005550:	6013      	str	r3, [r2, #0]
 8005552:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005556:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555a:	fa93 f3a3 	rbit	r3, r3
 800555e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005562:	fab3 f383 	clz	r3, r3
 8005566:	b2db      	uxtb	r3, r3
 8005568:	461a      	mov	r2, r3
 800556a:	4b1d      	ldr	r3, [pc, #116]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800556c:	4413      	add	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	461a      	mov	r2, r3
 8005572:	2300      	movs	r3, #0
 8005574:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005576:	4a18      	ldr	r2, [pc, #96]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800557a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800557c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d04b      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005586:	f7fc fcd5 	bl	8001f34 <HAL_GetTick>
 800558a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800558c:	e00a      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800558e:	f7fc fcd1 	bl	8001f34 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	f241 3288 	movw	r2, #5000	; 0x1388
 800559c:	4293      	cmp	r3, r2
 800559e:	d901      	bls.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e113      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x354>
 80055a4:	2302      	movs	r3, #2
 80055a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055aa:	fa93 f3a3 	rbit	r3, r3
 80055ae:	627b      	str	r3, [r7, #36]	; 0x24
 80055b0:	2302      	movs	r3, #2
 80055b2:	623b      	str	r3, [r7, #32]
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	fa93 f3a3 	rbit	r3, r3
 80055ba:	61fb      	str	r3, [r7, #28]
  return result;
 80055bc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055be:	fab3 f383 	clz	r3, r3
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	095b      	lsrs	r3, r3, #5
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	f043 0302 	orr.w	r3, r3, #2
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d108      	bne.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80055d2:	4b01      	ldr	r3, [pc, #4]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	e00d      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80055d8:	40021000 	.word	0x40021000
 80055dc:	40007000 	.word	0x40007000
 80055e0:	10908100 	.word	0x10908100
 80055e4:	2302      	movs	r3, #2
 80055e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	fa93 f3a3 	rbit	r3, r3
 80055ee:	617b      	str	r3, [r7, #20]
 80055f0:	4b78      	ldr	r3, [pc, #480]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	2202      	movs	r2, #2
 80055f6:	613a      	str	r2, [r7, #16]
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	fa92 f2a2 	rbit	r2, r2
 80055fe:	60fa      	str	r2, [r7, #12]
  return result;
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	fab2 f282 	clz	r2, r2
 8005606:	b2d2      	uxtb	r2, r2
 8005608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800560c:	b2d2      	uxtb	r2, r2
 800560e:	f002 021f 	and.w	r2, r2, #31
 8005612:	2101      	movs	r1, #1
 8005614:	fa01 f202 	lsl.w	r2, r1, r2
 8005618:	4013      	ands	r3, r2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0b7      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800561e:	4b6d      	ldr	r3, [pc, #436]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	496a      	ldr	r1, [pc, #424]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800562c:	4313      	orrs	r3, r2
 800562e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005630:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005634:	2b01      	cmp	r3, #1
 8005636:	d105      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005638:	4b66      	ldr	r3, [pc, #408]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	4a65      	ldr	r2, [pc, #404]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800563e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005642:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d008      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005650:	4b60      	ldr	r3, [pc, #384]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005654:	f023 0203 	bic.w	r2, r3, #3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	495d      	ldr	r1, [pc, #372]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800565e:	4313      	orrs	r3, r2
 8005660:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d008      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800566e:	4b59      	ldr	r3, [pc, #356]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005672:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	4956      	ldr	r1, [pc, #344]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800567c:	4313      	orrs	r3, r2
 800567e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b00      	cmp	r3, #0
 800568a:	d008      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800568c:	4b51      	ldr	r3, [pc, #324]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800568e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005690:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	494e      	ldr	r1, [pc, #312]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800569a:	4313      	orrs	r3, r2
 800569c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0320 	and.w	r3, r3, #32
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d008      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056aa:	4b4a      	ldr	r3, [pc, #296]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ae:	f023 0210 	bic.w	r2, r3, #16
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	4947      	ldr	r1, [pc, #284]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d008      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80056c8:	4b42      	ldr	r3, [pc, #264]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d4:	493f      	ldr	r1, [pc, #252]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d008      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056e6:	4b3b      	ldr	r3, [pc, #236]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ea:	f023 0220 	bic.w	r2, r3, #32
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	4938      	ldr	r1, [pc, #224]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0308 	and.w	r3, r3, #8
 8005700:	2b00      	cmp	r3, #0
 8005702:	d008      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005704:	4b33      	ldr	r3, [pc, #204]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	4930      	ldr	r1, [pc, #192]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005712:	4313      	orrs	r3, r2
 8005714:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0310 	and.w	r3, r3, #16
 800571e:	2b00      	cmp	r3, #0
 8005720:	d008      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005722:	4b2c      	ldr	r3, [pc, #176]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005726:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	4929      	ldr	r1, [pc, #164]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005730:	4313      	orrs	r3, r2
 8005732:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800573c:	2b00      	cmp	r3, #0
 800573e:	d008      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005740:	4b24      	ldr	r3, [pc, #144]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574c:	4921      	ldr	r1, [pc, #132]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800574e:	4313      	orrs	r3, r2
 8005750:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575a:	2b00      	cmp	r3, #0
 800575c:	d008      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800575e:	4b1d      	ldr	r3, [pc, #116]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005762:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	491a      	ldr	r1, [pc, #104]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800576c:	4313      	orrs	r3, r2
 800576e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005778:	2b00      	cmp	r3, #0
 800577a:	d008      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800577c:	4b15      	ldr	r3, [pc, #84]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800577e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005780:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005788:	4912      	ldr	r1, [pc, #72]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800578a:	4313      	orrs	r3, r2
 800578c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d008      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800579a:	4b0e      	ldr	r3, [pc, #56]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a6:	490b      	ldr	r1, [pc, #44]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d008      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80057b8:	4b06      	ldr	r3, [pc, #24]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c4:	4903      	ldr	r1, [pc, #12]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3748      	adds	r7, #72	; 0x48
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	40021000 	.word	0x40021000

080057d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e09d      	b.n	8005926 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d108      	bne.n	8005804 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057fa:	d009      	beq.n	8005810 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	61da      	str	r2, [r3, #28]
 8005802:	e005      	b.n	8005810 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d106      	bne.n	8005830 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7fb ffd2 	bl	80017d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2202      	movs	r2, #2
 8005834:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005846:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005850:	d902      	bls.n	8005858 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005852:	2300      	movs	r3, #0
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	e002      	b.n	800585e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800585c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005866:	d007      	beq.n	8005878 <HAL_SPI_Init+0xa0>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005870:	d002      	beq.n	8005878 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	431a      	orrs	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058b0:	431a      	orrs	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ba:	ea42 0103 	orr.w	r1, r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	0c1b      	lsrs	r3, r3, #16
 80058d4:	f003 0204 	and.w	r2, r3, #4
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	f003 0310 	and.w	r3, r3, #16
 80058e0:	431a      	orrs	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e6:	f003 0308 	and.w	r3, r3, #8
 80058ea:	431a      	orrs	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80058f4:	ea42 0103 	orr.w	r1, r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	69da      	ldr	r2, [r3, #28]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005914:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b082      	sub	sp, #8
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d101      	bne.n	8005940 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e049      	b.n	80059d4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b00      	cmp	r3, #0
 800594a:	d106      	bne.n	800595a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7fb ff7f 	bl	8001858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2202      	movs	r2, #2
 800595e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	3304      	adds	r3, #4
 800596a:	4619      	mov	r1, r3
 800596c:	4610      	mov	r0, r2
 800596e:	f000 fd27 	bl	80063c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d001      	beq.n	80059f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e04a      	b.n	8005a8a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0201 	orr.w	r2, r2, #1
 8005a0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a21      	ldr	r2, [pc, #132]	; (8005a98 <HAL_TIM_Base_Start_IT+0xbc>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d018      	beq.n	8005a48 <HAL_TIM_Base_Start_IT+0x6c>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a1e:	d013      	beq.n	8005a48 <HAL_TIM_Base_Start_IT+0x6c>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a1d      	ldr	r2, [pc, #116]	; (8005a9c <HAL_TIM_Base_Start_IT+0xc0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00e      	beq.n	8005a48 <HAL_TIM_Base_Start_IT+0x6c>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a1c      	ldr	r2, [pc, #112]	; (8005aa0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d009      	beq.n	8005a48 <HAL_TIM_Base_Start_IT+0x6c>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a1a      	ldr	r2, [pc, #104]	; (8005aa4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d004      	beq.n	8005a48 <HAL_TIM_Base_Start_IT+0x6c>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a19      	ldr	r2, [pc, #100]	; (8005aa8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d115      	bne.n	8005a74 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	4b17      	ldr	r3, [pc, #92]	; (8005aac <HAL_TIM_Base_Start_IT+0xd0>)
 8005a50:	4013      	ands	r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b06      	cmp	r3, #6
 8005a58:	d015      	beq.n	8005a86 <HAL_TIM_Base_Start_IT+0xaa>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a60:	d011      	beq.n	8005a86 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f042 0201 	orr.w	r2, r2, #1
 8005a70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a72:	e008      	b.n	8005a86 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0201 	orr.w	r2, r2, #1
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	e000      	b.n	8005a88 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40012c00 	.word	0x40012c00
 8005a9c:	40000400 	.word	0x40000400
 8005aa0:	40000800 	.word	0x40000800
 8005aa4:	40013400 	.word	0x40013400
 8005aa8:	40014000 	.word	0x40014000
 8005aac:	00010007 	.word	0x00010007

08005ab0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e049      	b.n	8005b56 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f841 	bl	8005b5e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3304      	adds	r3, #4
 8005aec:	4619      	mov	r1, r3
 8005aee:	4610      	mov	r0, r2
 8005af0:	f000 fc66 	bl	80063c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b083      	sub	sp, #12
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
	...

08005b74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d109      	bne.n	8005b98 <HAL_TIM_PWM_Start+0x24>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	bf14      	ite	ne
 8005b90:	2301      	movne	r3, #1
 8005b92:	2300      	moveq	r3, #0
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	e03c      	b.n	8005c12 <HAL_TIM_PWM_Start+0x9e>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d109      	bne.n	8005bb2 <HAL_TIM_PWM_Start+0x3e>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	bf14      	ite	ne
 8005baa:	2301      	movne	r3, #1
 8005bac:	2300      	moveq	r3, #0
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	e02f      	b.n	8005c12 <HAL_TIM_PWM_Start+0x9e>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d109      	bne.n	8005bcc <HAL_TIM_PWM_Start+0x58>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	bf14      	ite	ne
 8005bc4:	2301      	movne	r3, #1
 8005bc6:	2300      	moveq	r3, #0
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	e022      	b.n	8005c12 <HAL_TIM_PWM_Start+0x9e>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2b0c      	cmp	r3, #12
 8005bd0:	d109      	bne.n	8005be6 <HAL_TIM_PWM_Start+0x72>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	bf14      	ite	ne
 8005bde:	2301      	movne	r3, #1
 8005be0:	2300      	moveq	r3, #0
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	e015      	b.n	8005c12 <HAL_TIM_PWM_Start+0x9e>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b10      	cmp	r3, #16
 8005bea:	d109      	bne.n	8005c00 <HAL_TIM_PWM_Start+0x8c>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	bf14      	ite	ne
 8005bf8:	2301      	movne	r3, #1
 8005bfa:	2300      	moveq	r3, #0
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	e008      	b.n	8005c12 <HAL_TIM_PWM_Start+0x9e>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	bf14      	ite	ne
 8005c0c:	2301      	movne	r3, #1
 8005c0e:	2300      	moveq	r3, #0
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e097      	b.n	8005d4a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d104      	bne.n	8005c2a <HAL_TIM_PWM_Start+0xb6>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c28:	e023      	b.n	8005c72 <HAL_TIM_PWM_Start+0xfe>
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b04      	cmp	r3, #4
 8005c2e:	d104      	bne.n	8005c3a <HAL_TIM_PWM_Start+0xc6>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c38:	e01b      	b.n	8005c72 <HAL_TIM_PWM_Start+0xfe>
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b08      	cmp	r3, #8
 8005c3e:	d104      	bne.n	8005c4a <HAL_TIM_PWM_Start+0xd6>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c48:	e013      	b.n	8005c72 <HAL_TIM_PWM_Start+0xfe>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b0c      	cmp	r3, #12
 8005c4e:	d104      	bne.n	8005c5a <HAL_TIM_PWM_Start+0xe6>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c58:	e00b      	b.n	8005c72 <HAL_TIM_PWM_Start+0xfe>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b10      	cmp	r3, #16
 8005c5e:	d104      	bne.n	8005c6a <HAL_TIM_PWM_Start+0xf6>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c68:	e003      	b.n	8005c72 <HAL_TIM_PWM_Start+0xfe>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2201      	movs	r2, #1
 8005c78:	6839      	ldr	r1, [r7, #0]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 ffa0 	bl	8006bc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a33      	ldr	r2, [pc, #204]	; (8005d54 <HAL_TIM_PWM_Start+0x1e0>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d013      	beq.n	8005cb2 <HAL_TIM_PWM_Start+0x13e>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a32      	ldr	r2, [pc, #200]	; (8005d58 <HAL_TIM_PWM_Start+0x1e4>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00e      	beq.n	8005cb2 <HAL_TIM_PWM_Start+0x13e>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a30      	ldr	r2, [pc, #192]	; (8005d5c <HAL_TIM_PWM_Start+0x1e8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d009      	beq.n	8005cb2 <HAL_TIM_PWM_Start+0x13e>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a2f      	ldr	r2, [pc, #188]	; (8005d60 <HAL_TIM_PWM_Start+0x1ec>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d004      	beq.n	8005cb2 <HAL_TIM_PWM_Start+0x13e>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a2d      	ldr	r2, [pc, #180]	; (8005d64 <HAL_TIM_PWM_Start+0x1f0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d101      	bne.n	8005cb6 <HAL_TIM_PWM_Start+0x142>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e000      	b.n	8005cb8 <HAL_TIM_PWM_Start+0x144>
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d007      	beq.n	8005ccc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a20      	ldr	r2, [pc, #128]	; (8005d54 <HAL_TIM_PWM_Start+0x1e0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d018      	beq.n	8005d08 <HAL_TIM_PWM_Start+0x194>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cde:	d013      	beq.n	8005d08 <HAL_TIM_PWM_Start+0x194>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a20      	ldr	r2, [pc, #128]	; (8005d68 <HAL_TIM_PWM_Start+0x1f4>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d00e      	beq.n	8005d08 <HAL_TIM_PWM_Start+0x194>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a1f      	ldr	r2, [pc, #124]	; (8005d6c <HAL_TIM_PWM_Start+0x1f8>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d009      	beq.n	8005d08 <HAL_TIM_PWM_Start+0x194>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a17      	ldr	r2, [pc, #92]	; (8005d58 <HAL_TIM_PWM_Start+0x1e4>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d004      	beq.n	8005d08 <HAL_TIM_PWM_Start+0x194>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a16      	ldr	r2, [pc, #88]	; (8005d5c <HAL_TIM_PWM_Start+0x1e8>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d115      	bne.n	8005d34 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689a      	ldr	r2, [r3, #8]
 8005d0e:	4b18      	ldr	r3, [pc, #96]	; (8005d70 <HAL_TIM_PWM_Start+0x1fc>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2b06      	cmp	r3, #6
 8005d18:	d015      	beq.n	8005d46 <HAL_TIM_PWM_Start+0x1d2>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d20:	d011      	beq.n	8005d46 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f042 0201 	orr.w	r2, r2, #1
 8005d30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d32:	e008      	b.n	8005d46 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f042 0201 	orr.w	r2, r2, #1
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	e000      	b.n	8005d48 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	40012c00 	.word	0x40012c00
 8005d58:	40013400 	.word	0x40013400
 8005d5c:	40014000 	.word	0x40014000
 8005d60:	40014400 	.word	0x40014400
 8005d64:	40014800 	.word	0x40014800
 8005d68:	40000400 	.word	0x40000400
 8005d6c:	40000800 	.word	0x40000800
 8005d70:	00010007 	.word	0x00010007

08005d74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d122      	bne.n	8005dd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f003 0302 	and.w	r3, r3, #2
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d11b      	bne.n	8005dd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f06f 0202 	mvn.w	r2, #2
 8005da0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	f003 0303 	and.w	r3, r3, #3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fae3 	bl	8006382 <HAL_TIM_IC_CaptureCallback>
 8005dbc:	e005      	b.n	8005dca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 fad5 	bl	800636e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fae6 	bl	8006396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f003 0304 	and.w	r3, r3, #4
 8005dda:	2b04      	cmp	r3, #4
 8005ddc:	d122      	bne.n	8005e24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b04      	cmp	r3, #4
 8005dea:	d11b      	bne.n	8005e24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f06f 0204 	mvn.w	r2, #4
 8005df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2202      	movs	r2, #2
 8005dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 fab9 	bl	8006382 <HAL_TIM_IC_CaptureCallback>
 8005e10:	e005      	b.n	8005e1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 faab 	bl	800636e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fabc 	bl	8006396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	f003 0308 	and.w	r3, r3, #8
 8005e2e:	2b08      	cmp	r3, #8
 8005e30:	d122      	bne.n	8005e78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f003 0308 	and.w	r3, r3, #8
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d11b      	bne.n	8005e78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f06f 0208 	mvn.w	r2, #8
 8005e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2204      	movs	r2, #4
 8005e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	69db      	ldr	r3, [r3, #28]
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fa8f 	bl	8006382 <HAL_TIM_IC_CaptureCallback>
 8005e64:	e005      	b.n	8005e72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 fa81 	bl	800636e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fa92 	bl	8006396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	f003 0310 	and.w	r3, r3, #16
 8005e82:	2b10      	cmp	r3, #16
 8005e84:	d122      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f003 0310 	and.w	r3, r3, #16
 8005e90:	2b10      	cmp	r3, #16
 8005e92:	d11b      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f06f 0210 	mvn.w	r2, #16
 8005e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2208      	movs	r2, #8
 8005ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fa65 	bl	8006382 <HAL_TIM_IC_CaptureCallback>
 8005eb8:	e005      	b.n	8005ec6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fa57 	bl	800636e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fa68 	bl	8006396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d10e      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d107      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f06f 0201 	mvn.w	r2, #1
 8005ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7fb fb44 	bl	8001580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f02:	2b80      	cmp	r3, #128	; 0x80
 8005f04:	d10e      	bne.n	8005f24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f10:	2b80      	cmp	r3, #128	; 0x80
 8005f12:	d107      	bne.n	8005f24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 fefe 	bl	8006d20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f32:	d10e      	bne.n	8005f52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3e:	2b80      	cmp	r3, #128	; 0x80
 8005f40:	d107      	bne.n	8005f52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fef1 	bl	8006d34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5c:	2b40      	cmp	r3, #64	; 0x40
 8005f5e:	d10e      	bne.n	8005f7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6a:	2b40      	cmp	r3, #64	; 0x40
 8005f6c:	d107      	bne.n	8005f7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fa16 	bl	80063aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	f003 0320 	and.w	r3, r3, #32
 8005f88:	2b20      	cmp	r3, #32
 8005f8a:	d10e      	bne.n	8005faa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f003 0320 	and.w	r3, r3, #32
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	d107      	bne.n	8005faa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f06f 0220 	mvn.w	r2, #32
 8005fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 feb1 	bl	8006d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005faa:	bf00      	nop
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
	...

08005fb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d101      	bne.n	8005fd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005fce:	2302      	movs	r3, #2
 8005fd0:	e0ff      	b.n	80061d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b14      	cmp	r3, #20
 8005fde:	f200 80f0 	bhi.w	80061c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005fe2:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe8:	0800603d 	.word	0x0800603d
 8005fec:	080061c3 	.word	0x080061c3
 8005ff0:	080061c3 	.word	0x080061c3
 8005ff4:	080061c3 	.word	0x080061c3
 8005ff8:	0800607d 	.word	0x0800607d
 8005ffc:	080061c3 	.word	0x080061c3
 8006000:	080061c3 	.word	0x080061c3
 8006004:	080061c3 	.word	0x080061c3
 8006008:	080060bf 	.word	0x080060bf
 800600c:	080061c3 	.word	0x080061c3
 8006010:	080061c3 	.word	0x080061c3
 8006014:	080061c3 	.word	0x080061c3
 8006018:	080060ff 	.word	0x080060ff
 800601c:	080061c3 	.word	0x080061c3
 8006020:	080061c3 	.word	0x080061c3
 8006024:	080061c3 	.word	0x080061c3
 8006028:	08006141 	.word	0x08006141
 800602c:	080061c3 	.word	0x080061c3
 8006030:	080061c3 	.word	0x080061c3
 8006034:	080061c3 	.word	0x080061c3
 8006038:	08006181 	.word	0x08006181
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68b9      	ldr	r1, [r7, #8]
 8006042:	4618      	mov	r0, r3
 8006044:	f000 fa4c 	bl	80064e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	699a      	ldr	r2, [r3, #24]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f042 0208 	orr.w	r2, r2, #8
 8006056:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	699a      	ldr	r2, [r3, #24]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0204 	bic.w	r2, r2, #4
 8006066:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6999      	ldr	r1, [r3, #24]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	691a      	ldr	r2, [r3, #16]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	619a      	str	r2, [r3, #24]
      break;
 800607a:	e0a5      	b.n	80061c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68b9      	ldr	r1, [r7, #8]
 8006082:	4618      	mov	r0, r3
 8006084:	f000 fabc 	bl	8006600 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	699a      	ldr	r2, [r3, #24]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006096:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699a      	ldr	r2, [r3, #24]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6999      	ldr	r1, [r3, #24]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	021a      	lsls	r2, r3, #8
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	430a      	orrs	r2, r1
 80060ba:	619a      	str	r2, [r3, #24]
      break;
 80060bc:	e084      	b.n	80061c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68b9      	ldr	r1, [r7, #8]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 fb25 	bl	8006714 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	69da      	ldr	r2, [r3, #28]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f042 0208 	orr.w	r2, r2, #8
 80060d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	69da      	ldr	r2, [r3, #28]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0204 	bic.w	r2, r2, #4
 80060e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	69d9      	ldr	r1, [r3, #28]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	691a      	ldr	r2, [r3, #16]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	61da      	str	r2, [r3, #28]
      break;
 80060fc:	e064      	b.n	80061c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68b9      	ldr	r1, [r7, #8]
 8006104:	4618      	mov	r0, r3
 8006106:	f000 fb8d 	bl	8006824 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	69da      	ldr	r2, [r3, #28]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006118:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69da      	ldr	r2, [r3, #28]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006128:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69d9      	ldr	r1, [r3, #28]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	021a      	lsls	r2, r3, #8
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	61da      	str	r2, [r3, #28]
      break;
 800613e:	e043      	b.n	80061c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68b9      	ldr	r1, [r7, #8]
 8006146:	4618      	mov	r0, r3
 8006148:	f000 fbd6 	bl	80068f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0208 	orr.w	r2, r2, #8
 800615a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0204 	bic.w	r2, r2, #4
 800616a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	691a      	ldr	r2, [r3, #16]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800617e:	e023      	b.n	80061c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68b9      	ldr	r1, [r7, #8]
 8006186:	4618      	mov	r0, r3
 8006188:	f000 fc1a 	bl	80069c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800619a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	021a      	lsls	r2, r3, #8
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	430a      	orrs	r2, r1
 80061be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80061c0:	e002      	b.n	80061c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	75fb      	strb	r3, [r7, #23]
      break;
 80061c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop

080061dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061e6:	2300      	movs	r3, #0
 80061e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d101      	bne.n	80061f8 <HAL_TIM_ConfigClockSource+0x1c>
 80061f4:	2302      	movs	r3, #2
 80061f6:	e0b6      	b.n	8006366 <HAL_TIM_ConfigClockSource+0x18a>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006216:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800621a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006222:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006234:	d03e      	beq.n	80062b4 <HAL_TIM_ConfigClockSource+0xd8>
 8006236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800623a:	f200 8087 	bhi.w	800634c <HAL_TIM_ConfigClockSource+0x170>
 800623e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006242:	f000 8086 	beq.w	8006352 <HAL_TIM_ConfigClockSource+0x176>
 8006246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800624a:	d87f      	bhi.n	800634c <HAL_TIM_ConfigClockSource+0x170>
 800624c:	2b70      	cmp	r3, #112	; 0x70
 800624e:	d01a      	beq.n	8006286 <HAL_TIM_ConfigClockSource+0xaa>
 8006250:	2b70      	cmp	r3, #112	; 0x70
 8006252:	d87b      	bhi.n	800634c <HAL_TIM_ConfigClockSource+0x170>
 8006254:	2b60      	cmp	r3, #96	; 0x60
 8006256:	d050      	beq.n	80062fa <HAL_TIM_ConfigClockSource+0x11e>
 8006258:	2b60      	cmp	r3, #96	; 0x60
 800625a:	d877      	bhi.n	800634c <HAL_TIM_ConfigClockSource+0x170>
 800625c:	2b50      	cmp	r3, #80	; 0x50
 800625e:	d03c      	beq.n	80062da <HAL_TIM_ConfigClockSource+0xfe>
 8006260:	2b50      	cmp	r3, #80	; 0x50
 8006262:	d873      	bhi.n	800634c <HAL_TIM_ConfigClockSource+0x170>
 8006264:	2b40      	cmp	r3, #64	; 0x40
 8006266:	d058      	beq.n	800631a <HAL_TIM_ConfigClockSource+0x13e>
 8006268:	2b40      	cmp	r3, #64	; 0x40
 800626a:	d86f      	bhi.n	800634c <HAL_TIM_ConfigClockSource+0x170>
 800626c:	2b30      	cmp	r3, #48	; 0x30
 800626e:	d064      	beq.n	800633a <HAL_TIM_ConfigClockSource+0x15e>
 8006270:	2b30      	cmp	r3, #48	; 0x30
 8006272:	d86b      	bhi.n	800634c <HAL_TIM_ConfigClockSource+0x170>
 8006274:	2b20      	cmp	r3, #32
 8006276:	d060      	beq.n	800633a <HAL_TIM_ConfigClockSource+0x15e>
 8006278:	2b20      	cmp	r3, #32
 800627a:	d867      	bhi.n	800634c <HAL_TIM_ConfigClockSource+0x170>
 800627c:	2b00      	cmp	r3, #0
 800627e:	d05c      	beq.n	800633a <HAL_TIM_ConfigClockSource+0x15e>
 8006280:	2b10      	cmp	r3, #16
 8006282:	d05a      	beq.n	800633a <HAL_TIM_ConfigClockSource+0x15e>
 8006284:	e062      	b.n	800634c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6818      	ldr	r0, [r3, #0]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	6899      	ldr	r1, [r3, #8]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	f000 fc73 	bl	8006b80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	609a      	str	r2, [r3, #8]
      break;
 80062b2:	e04f      	b.n	8006354 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6818      	ldr	r0, [r3, #0]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	6899      	ldr	r1, [r3, #8]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f000 fc5c 	bl	8006b80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689a      	ldr	r2, [r3, #8]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062d6:	609a      	str	r2, [r3, #8]
      break;
 80062d8:	e03c      	b.n	8006354 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6818      	ldr	r0, [r3, #0]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	6859      	ldr	r1, [r3, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	461a      	mov	r2, r3
 80062e8:	f000 fbd0 	bl	8006a8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2150      	movs	r1, #80	; 0x50
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 fc29 	bl	8006b4a <TIM_ITRx_SetConfig>
      break;
 80062f8:	e02c      	b.n	8006354 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6818      	ldr	r0, [r3, #0]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	6859      	ldr	r1, [r3, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	461a      	mov	r2, r3
 8006308:	f000 fbef 	bl	8006aea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2160      	movs	r1, #96	; 0x60
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fc19 	bl	8006b4a <TIM_ITRx_SetConfig>
      break;
 8006318:	e01c      	b.n	8006354 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6818      	ldr	r0, [r3, #0]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	6859      	ldr	r1, [r3, #4]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	461a      	mov	r2, r3
 8006328:	f000 fbb0 	bl	8006a8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2140      	movs	r1, #64	; 0x40
 8006332:	4618      	mov	r0, r3
 8006334:	f000 fc09 	bl	8006b4a <TIM_ITRx_SetConfig>
      break;
 8006338:	e00c      	b.n	8006354 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4619      	mov	r1, r3
 8006344:	4610      	mov	r0, r2
 8006346:	f000 fc00 	bl	8006b4a <TIM_ITRx_SetConfig>
      break;
 800634a:	e003      	b.n	8006354 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	73fb      	strb	r3, [r7, #15]
      break;
 8006350:	e000      	b.n	8006354 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006352:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006364:	7bfb      	ldrb	r3, [r7, #15]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006376:	bf00      	nop
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006382:	b480      	push	{r7}
 8006384:	b083      	sub	sp, #12
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800638a:	bf00      	nop
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
	...

080063c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a3c      	ldr	r2, [pc, #240]	; (80064c4 <TIM_Base_SetConfig+0x104>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d00f      	beq.n	80063f8 <TIM_Base_SetConfig+0x38>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063de:	d00b      	beq.n	80063f8 <TIM_Base_SetConfig+0x38>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a39      	ldr	r2, [pc, #228]	; (80064c8 <TIM_Base_SetConfig+0x108>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d007      	beq.n	80063f8 <TIM_Base_SetConfig+0x38>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a38      	ldr	r2, [pc, #224]	; (80064cc <TIM_Base_SetConfig+0x10c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d003      	beq.n	80063f8 <TIM_Base_SetConfig+0x38>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a37      	ldr	r2, [pc, #220]	; (80064d0 <TIM_Base_SetConfig+0x110>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d108      	bne.n	800640a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	4313      	orrs	r3, r2
 8006408:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a2d      	ldr	r2, [pc, #180]	; (80064c4 <TIM_Base_SetConfig+0x104>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d01b      	beq.n	800644a <TIM_Base_SetConfig+0x8a>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006418:	d017      	beq.n	800644a <TIM_Base_SetConfig+0x8a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a2a      	ldr	r2, [pc, #168]	; (80064c8 <TIM_Base_SetConfig+0x108>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d013      	beq.n	800644a <TIM_Base_SetConfig+0x8a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a29      	ldr	r2, [pc, #164]	; (80064cc <TIM_Base_SetConfig+0x10c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d00f      	beq.n	800644a <TIM_Base_SetConfig+0x8a>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a28      	ldr	r2, [pc, #160]	; (80064d0 <TIM_Base_SetConfig+0x110>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d00b      	beq.n	800644a <TIM_Base_SetConfig+0x8a>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a27      	ldr	r2, [pc, #156]	; (80064d4 <TIM_Base_SetConfig+0x114>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d007      	beq.n	800644a <TIM_Base_SetConfig+0x8a>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a26      	ldr	r2, [pc, #152]	; (80064d8 <TIM_Base_SetConfig+0x118>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d003      	beq.n	800644a <TIM_Base_SetConfig+0x8a>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a25      	ldr	r2, [pc, #148]	; (80064dc <TIM_Base_SetConfig+0x11c>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d108      	bne.n	800645c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006450:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	4313      	orrs	r3, r2
 800645a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a10      	ldr	r2, [pc, #64]	; (80064c4 <TIM_Base_SetConfig+0x104>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d00f      	beq.n	80064a8 <TIM_Base_SetConfig+0xe8>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a11      	ldr	r2, [pc, #68]	; (80064d0 <TIM_Base_SetConfig+0x110>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00b      	beq.n	80064a8 <TIM_Base_SetConfig+0xe8>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a10      	ldr	r2, [pc, #64]	; (80064d4 <TIM_Base_SetConfig+0x114>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d007      	beq.n	80064a8 <TIM_Base_SetConfig+0xe8>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a0f      	ldr	r2, [pc, #60]	; (80064d8 <TIM_Base_SetConfig+0x118>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d003      	beq.n	80064a8 <TIM_Base_SetConfig+0xe8>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a0e      	ldr	r2, [pc, #56]	; (80064dc <TIM_Base_SetConfig+0x11c>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d103      	bne.n	80064b0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	691a      	ldr	r2, [r3, #16]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	615a      	str	r2, [r3, #20]
}
 80064b6:	bf00      	nop
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	40012c00 	.word	0x40012c00
 80064c8:	40000400 	.word	0x40000400
 80064cc:	40000800 	.word	0x40000800
 80064d0:	40013400 	.word	0x40013400
 80064d4:	40014000 	.word	0x40014000
 80064d8:	40014400 	.word	0x40014400
 80064dc:	40014800 	.word	0x40014800

080064e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b087      	sub	sp, #28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	f023 0201 	bic.w	r2, r3, #1
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800650e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 0303 	bic.w	r3, r3, #3
 800651a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	4313      	orrs	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f023 0302 	bic.w	r3, r3, #2
 800652c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	4313      	orrs	r3, r2
 8006536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a2c      	ldr	r2, [pc, #176]	; (80065ec <TIM_OC1_SetConfig+0x10c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d00f      	beq.n	8006560 <TIM_OC1_SetConfig+0x80>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a2b      	ldr	r2, [pc, #172]	; (80065f0 <TIM_OC1_SetConfig+0x110>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d00b      	beq.n	8006560 <TIM_OC1_SetConfig+0x80>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a2a      	ldr	r2, [pc, #168]	; (80065f4 <TIM_OC1_SetConfig+0x114>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d007      	beq.n	8006560 <TIM_OC1_SetConfig+0x80>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a29      	ldr	r2, [pc, #164]	; (80065f8 <TIM_OC1_SetConfig+0x118>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d003      	beq.n	8006560 <TIM_OC1_SetConfig+0x80>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a28      	ldr	r2, [pc, #160]	; (80065fc <TIM_OC1_SetConfig+0x11c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d10c      	bne.n	800657a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f023 0308 	bic.w	r3, r3, #8
 8006566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	4313      	orrs	r3, r2
 8006570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f023 0304 	bic.w	r3, r3, #4
 8006578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a1b      	ldr	r2, [pc, #108]	; (80065ec <TIM_OC1_SetConfig+0x10c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d00f      	beq.n	80065a2 <TIM_OC1_SetConfig+0xc2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a1a      	ldr	r2, [pc, #104]	; (80065f0 <TIM_OC1_SetConfig+0x110>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d00b      	beq.n	80065a2 <TIM_OC1_SetConfig+0xc2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a19      	ldr	r2, [pc, #100]	; (80065f4 <TIM_OC1_SetConfig+0x114>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d007      	beq.n	80065a2 <TIM_OC1_SetConfig+0xc2>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a18      	ldr	r2, [pc, #96]	; (80065f8 <TIM_OC1_SetConfig+0x118>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d003      	beq.n	80065a2 <TIM_OC1_SetConfig+0xc2>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a17      	ldr	r2, [pc, #92]	; (80065fc <TIM_OC1_SetConfig+0x11c>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d111      	bne.n	80065c6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	621a      	str	r2, [r3, #32]
}
 80065e0:	bf00      	nop
 80065e2:	371c      	adds	r7, #28
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	40012c00 	.word	0x40012c00
 80065f0:	40013400 	.word	0x40013400
 80065f4:	40014000 	.word	0x40014000
 80065f8:	40014400 	.word	0x40014400
 80065fc:	40014800 	.word	0x40014800

08006600 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	f023 0210 	bic.w	r2, r3, #16
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800662e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800663a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	021b      	lsls	r3, r3, #8
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	4313      	orrs	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f023 0320 	bic.w	r3, r3, #32
 800664e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	011b      	lsls	r3, r3, #4
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	4313      	orrs	r3, r2
 800665a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a28      	ldr	r2, [pc, #160]	; (8006700 <TIM_OC2_SetConfig+0x100>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d003      	beq.n	800666c <TIM_OC2_SetConfig+0x6c>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a27      	ldr	r2, [pc, #156]	; (8006704 <TIM_OC2_SetConfig+0x104>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d10d      	bne.n	8006688 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	4313      	orrs	r3, r2
 800667e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006686:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a1d      	ldr	r2, [pc, #116]	; (8006700 <TIM_OC2_SetConfig+0x100>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d00f      	beq.n	80066b0 <TIM_OC2_SetConfig+0xb0>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a1c      	ldr	r2, [pc, #112]	; (8006704 <TIM_OC2_SetConfig+0x104>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d00b      	beq.n	80066b0 <TIM_OC2_SetConfig+0xb0>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a1b      	ldr	r2, [pc, #108]	; (8006708 <TIM_OC2_SetConfig+0x108>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d007      	beq.n	80066b0 <TIM_OC2_SetConfig+0xb0>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a1a      	ldr	r2, [pc, #104]	; (800670c <TIM_OC2_SetConfig+0x10c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d003      	beq.n	80066b0 <TIM_OC2_SetConfig+0xb0>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a19      	ldr	r2, [pc, #100]	; (8006710 <TIM_OC2_SetConfig+0x110>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d113      	bne.n	80066d8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066b6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066be:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	621a      	str	r2, [r3, #32]
}
 80066f2:	bf00      	nop
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	40012c00 	.word	0x40012c00
 8006704:	40013400 	.word	0x40013400
 8006708:	40014000 	.word	0x40014000
 800670c:	40014400 	.word	0x40014400
 8006710:	40014800 	.word	0x40014800

08006714 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006714:	b480      	push	{r7}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 0303 	bic.w	r3, r3, #3
 800674e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	021b      	lsls	r3, r3, #8
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	4313      	orrs	r3, r2
 800676c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a27      	ldr	r2, [pc, #156]	; (8006810 <TIM_OC3_SetConfig+0xfc>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d003      	beq.n	800677e <TIM_OC3_SetConfig+0x6a>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a26      	ldr	r2, [pc, #152]	; (8006814 <TIM_OC3_SetConfig+0x100>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d10d      	bne.n	800679a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006784:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	021b      	lsls	r3, r3, #8
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	4313      	orrs	r3, r2
 8006790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006798:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a1c      	ldr	r2, [pc, #112]	; (8006810 <TIM_OC3_SetConfig+0xfc>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d00f      	beq.n	80067c2 <TIM_OC3_SetConfig+0xae>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a1b      	ldr	r2, [pc, #108]	; (8006814 <TIM_OC3_SetConfig+0x100>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d00b      	beq.n	80067c2 <TIM_OC3_SetConfig+0xae>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a1a      	ldr	r2, [pc, #104]	; (8006818 <TIM_OC3_SetConfig+0x104>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d007      	beq.n	80067c2 <TIM_OC3_SetConfig+0xae>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a19      	ldr	r2, [pc, #100]	; (800681c <TIM_OC3_SetConfig+0x108>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d003      	beq.n	80067c2 <TIM_OC3_SetConfig+0xae>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a18      	ldr	r2, [pc, #96]	; (8006820 <TIM_OC3_SetConfig+0x10c>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d113      	bne.n	80067ea <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	011b      	lsls	r3, r3, #4
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	4313      	orrs	r3, r2
 80067dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	011b      	lsls	r3, r3, #4
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	621a      	str	r2, [r3, #32]
}
 8006804:	bf00      	nop
 8006806:	371c      	adds	r7, #28
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	40012c00 	.word	0x40012c00
 8006814:	40013400 	.word	0x40013400
 8006818:	40014000 	.word	0x40014000
 800681c:	40014400 	.word	0x40014400
 8006820:	40014800 	.word	0x40014800

08006824 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006824:	b480      	push	{r7}
 8006826:	b087      	sub	sp, #28
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800685e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	021b      	lsls	r3, r3, #8
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	4313      	orrs	r3, r2
 800686a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006872:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	031b      	lsls	r3, r3, #12
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a18      	ldr	r2, [pc, #96]	; (80068e4 <TIM_OC4_SetConfig+0xc0>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d00f      	beq.n	80068a8 <TIM_OC4_SetConfig+0x84>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a17      	ldr	r2, [pc, #92]	; (80068e8 <TIM_OC4_SetConfig+0xc4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00b      	beq.n	80068a8 <TIM_OC4_SetConfig+0x84>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a16      	ldr	r2, [pc, #88]	; (80068ec <TIM_OC4_SetConfig+0xc8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d007      	beq.n	80068a8 <TIM_OC4_SetConfig+0x84>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a15      	ldr	r2, [pc, #84]	; (80068f0 <TIM_OC4_SetConfig+0xcc>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d003      	beq.n	80068a8 <TIM_OC4_SetConfig+0x84>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a14      	ldr	r2, [pc, #80]	; (80068f4 <TIM_OC4_SetConfig+0xd0>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d109      	bne.n	80068bc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	019b      	lsls	r3, r3, #6
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	621a      	str	r2, [r3, #32]
}
 80068d6:	bf00      	nop
 80068d8:	371c      	adds	r7, #28
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	40012c00 	.word	0x40012c00
 80068e8:	40013400 	.word	0x40013400
 80068ec:	40014000 	.word	0x40014000
 80068f0:	40014400 	.word	0x40014400
 80068f4:	40014800 	.word	0x40014800

080068f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800691e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800693c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	041b      	lsls	r3, r3, #16
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	4313      	orrs	r3, r2
 8006948:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a17      	ldr	r2, [pc, #92]	; (80069ac <TIM_OC5_SetConfig+0xb4>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00f      	beq.n	8006972 <TIM_OC5_SetConfig+0x7a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a16      	ldr	r2, [pc, #88]	; (80069b0 <TIM_OC5_SetConfig+0xb8>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d00b      	beq.n	8006972 <TIM_OC5_SetConfig+0x7a>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a15      	ldr	r2, [pc, #84]	; (80069b4 <TIM_OC5_SetConfig+0xbc>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d007      	beq.n	8006972 <TIM_OC5_SetConfig+0x7a>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a14      	ldr	r2, [pc, #80]	; (80069b8 <TIM_OC5_SetConfig+0xc0>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d003      	beq.n	8006972 <TIM_OC5_SetConfig+0x7a>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a13      	ldr	r2, [pc, #76]	; (80069bc <TIM_OC5_SetConfig+0xc4>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d109      	bne.n	8006986 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006978:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	021b      	lsls	r3, r3, #8
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	4313      	orrs	r3, r2
 8006984:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	621a      	str	r2, [r3, #32]
}
 80069a0:	bf00      	nop
 80069a2:	371c      	adds	r7, #28
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	40012c00 	.word	0x40012c00
 80069b0:	40013400 	.word	0x40013400
 80069b4:	40014000 	.word	0x40014000
 80069b8:	40014400 	.word	0x40014400
 80069bc:	40014800 	.word	0x40014800

080069c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b087      	sub	sp, #28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	021b      	lsls	r3, r3, #8
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	051b      	lsls	r3, r3, #20
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a18      	ldr	r2, [pc, #96]	; (8006a78 <TIM_OC6_SetConfig+0xb8>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d00f      	beq.n	8006a3c <TIM_OC6_SetConfig+0x7c>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a17      	ldr	r2, [pc, #92]	; (8006a7c <TIM_OC6_SetConfig+0xbc>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d00b      	beq.n	8006a3c <TIM_OC6_SetConfig+0x7c>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a16      	ldr	r2, [pc, #88]	; (8006a80 <TIM_OC6_SetConfig+0xc0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d007      	beq.n	8006a3c <TIM_OC6_SetConfig+0x7c>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a15      	ldr	r2, [pc, #84]	; (8006a84 <TIM_OC6_SetConfig+0xc4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d003      	beq.n	8006a3c <TIM_OC6_SetConfig+0x7c>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a14      	ldr	r2, [pc, #80]	; (8006a88 <TIM_OC6_SetConfig+0xc8>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d109      	bne.n	8006a50 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	029b      	lsls	r3, r3, #10
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	621a      	str	r2, [r3, #32]
}
 8006a6a:	bf00      	nop
 8006a6c:	371c      	adds	r7, #28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	40012c00 	.word	0x40012c00
 8006a7c:	40013400 	.word	0x40013400
 8006a80:	40014000 	.word	0x40014000
 8006a84:	40014400 	.word	0x40014400
 8006a88:	40014800 	.word	0x40014800

08006a8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	f023 0201 	bic.w	r2, r3, #1
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	011b      	lsls	r3, r3, #4
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f023 030a 	bic.w	r3, r3, #10
 8006ac8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	621a      	str	r2, [r3, #32]
}
 8006ade:	bf00      	nop
 8006ae0:	371c      	adds	r7, #28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b087      	sub	sp, #28
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	60f8      	str	r0, [r7, #12]
 8006af2:	60b9      	str	r1, [r7, #8]
 8006af4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	f023 0210 	bic.w	r2, r3, #16
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6a1b      	ldr	r3, [r3, #32]
 8006b0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	031b      	lsls	r3, r3, #12
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	011b      	lsls	r3, r3, #4
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	621a      	str	r2, [r3, #32]
}
 8006b3e:	bf00      	nop
 8006b40:	371c      	adds	r7, #28
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b085      	sub	sp, #20
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	f043 0307 	orr.w	r3, r3, #7
 8006b6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	609a      	str	r2, [r3, #8]
}
 8006b74:	bf00      	nop
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b087      	sub	sp, #28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	021a      	lsls	r2, r3, #8
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	609a      	str	r2, [r3, #8]
}
 8006bb4:	bf00      	nop
 8006bb6:	371c      	adds	r7, #28
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	f003 031f 	and.w	r3, r3, #31
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6a1a      	ldr	r2, [r3, #32]
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	43db      	mvns	r3, r3
 8006be2:	401a      	ands	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6a1a      	ldr	r2, [r3, #32]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	f003 031f 	and.w	r3, r3, #31
 8006bf2:	6879      	ldr	r1, [r7, #4]
 8006bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	621a      	str	r2, [r3, #32]
}
 8006bfe:	bf00      	nop
 8006c00:	371c      	adds	r7, #28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
	...

08006c0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d101      	bne.n	8006c24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c20:	2302      	movs	r3, #2
 8006c22:	e063      	b.n	8006cec <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a2b      	ldr	r2, [pc, #172]	; (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d004      	beq.n	8006c58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a2a      	ldr	r2, [pc, #168]	; (8006cfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d108      	bne.n	8006c6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a1b      	ldr	r2, [pc, #108]	; (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d018      	beq.n	8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c96:	d013      	beq.n	8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a18      	ldr	r2, [pc, #96]	; (8006d00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d00e      	beq.n	8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a17      	ldr	r2, [pc, #92]	; (8006d04 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d009      	beq.n	8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a12      	ldr	r2, [pc, #72]	; (8006cfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d004      	beq.n	8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a13      	ldr	r2, [pc, #76]	; (8006d08 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d10c      	bne.n	8006cda <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cc6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	40012c00 	.word	0x40012c00
 8006cfc:	40013400 	.word	0x40013400
 8006d00:	40000400 	.word	0x40000400
 8006d04:	40000800 	.word	0x40000800
 8006d08:	40014000 	.word	0x40014000

08006d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d101      	bne.n	8006d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e040      	b.n	8006ddc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d106      	bne.n	8006d70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7fa fde2 	bl	8001934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2224      	movs	r2, #36	; 0x24
 8006d74:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0201 	bic.w	r2, r2, #1
 8006d84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fbd4 	bl	8007534 <UART_SetConfig>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d101      	bne.n	8006d96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e022      	b.n	8006ddc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d002      	beq.n	8006da4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fd9c 	bl	80078dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006db2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689a      	ldr	r2, [r3, #8]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f042 0201 	orr.w	r2, r2, #1
 8006dd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fe23 	bl	8007a20 <UART_CheckIdleState>
 8006dda:	4603      	mov	r3, r0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b08b      	sub	sp, #44	; 0x2c
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	4613      	mov	r3, r2
 8006df0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006df6:	2b20      	cmp	r3, #32
 8006df8:	d147      	bne.n	8006e8a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <HAL_UART_Transmit_IT+0x22>
 8006e00:	88fb      	ldrh	r3, [r7, #6]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d101      	bne.n	8006e0a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e040      	b.n	8006e8c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	88fa      	ldrh	r2, [r7, #6]
 8006e14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	88fa      	ldrh	r2, [r7, #6]
 8006e1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2221      	movs	r2, #33	; 0x21
 8006e32:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e3c:	d107      	bne.n	8006e4e <HAL_UART_Transmit_IT+0x6a>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d103      	bne.n	8006e4e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	4a13      	ldr	r2, [pc, #76]	; (8006e98 <HAL_UART_Transmit_IT+0xb4>)
 8006e4a:	66da      	str	r2, [r3, #108]	; 0x6c
 8006e4c:	e002      	b.n	8006e54 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	4a12      	ldr	r2, [pc, #72]	; (8006e9c <HAL_UART_Transmit_IT+0xb8>)
 8006e52:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	613b      	str	r3, [r7, #16]
   return(result);
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e68:	627b      	str	r3, [r7, #36]	; 0x24
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	623b      	str	r3, [r7, #32]
 8006e74:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e76:	69f9      	ldr	r1, [r7, #28]
 8006e78:	6a3a      	ldr	r2, [r7, #32]
 8006e7a:	e841 2300 	strex	r3, r2, [r1]
 8006e7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1e6      	bne.n	8006e54 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8006e86:	2300      	movs	r3, #0
 8006e88:	e000      	b.n	8006e8c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006e8a:	2302      	movs	r3, #2
  }
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	372c      	adds	r7, #44	; 0x2c
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	08007f55 	.word	0x08007f55
 8006e9c:	08007e9d 	.word	0x08007e9d

08006ea0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b08a      	sub	sp, #40	; 0x28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eb4:	2b20      	cmp	r3, #32
 8006eb6:	d132      	bne.n	8006f1e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d002      	beq.n	8006ec4 <HAL_UART_Receive_IT+0x24>
 8006ebe:	88fb      	ldrh	r3, [r7, #6]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e02b      	b.n	8006f20 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d018      	beq.n	8006f0e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	e853 3f00 	ldrex	r3, [r3]
 8006ee8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	623b      	str	r3, [r7, #32]
 8006efc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efe:	69f9      	ldr	r1, [r7, #28]
 8006f00:	6a3a      	ldr	r2, [r7, #32]
 8006f02:	e841 2300 	strex	r3, r2, [r1]
 8006f06:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1e6      	bne.n	8006edc <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f0e:	88fb      	ldrh	r3, [r7, #6]
 8006f10:	461a      	mov	r2, r3
 8006f12:	68b9      	ldr	r1, [r7, #8]
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 fe93 	bl	8007c40 <UART_Start_Receive_IT>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	e000      	b.n	8006f20 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006f1e:	2302      	movs	r3, #2
  }
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3728      	adds	r7, #40	; 0x28
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b0ba      	sub	sp, #232	; 0xe8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006f52:	f640 030f 	movw	r3, #2063	; 0x80f
 8006f56:	4013      	ands	r3, r2
 8006f58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006f5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d115      	bne.n	8006f90 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f68:	f003 0320 	and.w	r3, r3, #32
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00f      	beq.n	8006f90 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f74:	f003 0320 	and.w	r3, r3, #32
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d009      	beq.n	8006f90 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 82ab 	beq.w	80074dc <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	4798      	blx	r3
      }
      return;
 8006f8e:	e2a5      	b.n	80074dc <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006f90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 8117 	beq.w	80071c8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d106      	bne.n	8006fb4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006fa6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006faa:	4b85      	ldr	r3, [pc, #532]	; (80071c0 <HAL_UART_IRQHandler+0x298>)
 8006fac:	4013      	ands	r3, r2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f000 810a 	beq.w	80071c8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d011      	beq.n	8006fe4 <HAL_UART_IRQHandler+0xbc>
 8006fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00b      	beq.n	8006fe4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fda:	f043 0201 	orr.w	r2, r3, #1
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fe8:	f003 0302 	and.w	r3, r3, #2
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d011      	beq.n	8007014 <HAL_UART_IRQHandler+0xec>
 8006ff0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ff4:	f003 0301 	and.w	r3, r3, #1
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00b      	beq.n	8007014 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2202      	movs	r2, #2
 8007002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800700a:	f043 0204 	orr.w	r2, r3, #4
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007018:	f003 0304 	and.w	r3, r3, #4
 800701c:	2b00      	cmp	r3, #0
 800701e:	d011      	beq.n	8007044 <HAL_UART_IRQHandler+0x11c>
 8007020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00b      	beq.n	8007044 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2204      	movs	r2, #4
 8007032:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800703a:	f043 0202 	orr.w	r2, r3, #2
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007048:	f003 0308 	and.w	r3, r3, #8
 800704c:	2b00      	cmp	r3, #0
 800704e:	d017      	beq.n	8007080 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007054:	f003 0320 	and.w	r3, r3, #32
 8007058:	2b00      	cmp	r3, #0
 800705a:	d105      	bne.n	8007068 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800705c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007060:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00b      	beq.n	8007080 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2208      	movs	r2, #8
 800706e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007076:	f043 0208 	orr.w	r2, r3, #8
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007088:	2b00      	cmp	r3, #0
 800708a:	d012      	beq.n	80070b2 <HAL_UART_IRQHandler+0x18a>
 800708c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007090:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00c      	beq.n	80070b2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070a8:	f043 0220 	orr.w	r2, r3, #32
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f000 8211 	beq.w	80074e0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80070be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c2:	f003 0320 	and.w	r3, r3, #32
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00d      	beq.n	80070e6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80070ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ce:	f003 0320 	and.w	r3, r3, #32
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d007      	beq.n	80070e6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d003      	beq.n	80070e6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070fa:	2b40      	cmp	r3, #64	; 0x40
 80070fc:	d005      	beq.n	800710a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80070fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007102:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007106:	2b00      	cmp	r3, #0
 8007108:	d04f      	beq.n	80071aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fe4c 	bl	8007da8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711a:	2b40      	cmp	r3, #64	; 0x40
 800711c:	d141      	bne.n	80071a2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	3308      	adds	r3, #8
 8007124:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007128:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800712c:	e853 3f00 	ldrex	r3, [r3]
 8007130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007134:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800713c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3308      	adds	r3, #8
 8007146:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800714a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800714e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007152:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007156:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800715a:	e841 2300 	strex	r3, r2, [r1]
 800715e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1d9      	bne.n	800711e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800716e:	2b00      	cmp	r3, #0
 8007170:	d013      	beq.n	800719a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007176:	4a13      	ldr	r2, [pc, #76]	; (80071c4 <HAL_UART_IRQHandler+0x29c>)
 8007178:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800717e:	4618      	mov	r0, r3
 8007180:	f7fc fb26 	bl	80037d0 <HAL_DMA_Abort_IT>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d017      	beq.n	80071ba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800718e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007194:	4610      	mov	r0, r2
 8007196:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007198:	e00f      	b.n	80071ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f9b4 	bl	8007508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071a0:	e00b      	b.n	80071ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f9b0 	bl	8007508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071a8:	e007      	b.n	80071ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f9ac 	bl	8007508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80071b8:	e192      	b.n	80074e0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ba:	bf00      	nop
    return;
 80071bc:	e190      	b.n	80074e0 <HAL_UART_IRQHandler+0x5b8>
 80071be:	bf00      	nop
 80071c0:	04000120 	.word	0x04000120
 80071c4:	08007e71 	.word	0x08007e71

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	f040 814b 	bne.w	8007468 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80071d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071d6:	f003 0310 	and.w	r3, r3, #16
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f000 8144 	beq.w	8007468 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80071e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071e4:	f003 0310 	and.w	r3, r3, #16
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 813d 	beq.w	8007468 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2210      	movs	r2, #16
 80071f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007200:	2b40      	cmp	r3, #64	; 0x40
 8007202:	f040 80b5 	bne.w	8007370 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007212:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 8164 	beq.w	80074e4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007226:	429a      	cmp	r2, r3
 8007228:	f080 815c 	bcs.w	80074e4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007232:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	2b20      	cmp	r3, #32
 800723e:	f000 8086 	beq.w	800734e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800724e:	e853 3f00 	ldrex	r3, [r3]
 8007252:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007256:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800725a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800725e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800726c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007270:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007274:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007278:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800727c:	e841 2300 	strex	r3, r2, [r1]
 8007280:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007284:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1da      	bne.n	8007242 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	3308      	adds	r3, #8
 8007292:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007296:	e853 3f00 	ldrex	r3, [r3]
 800729a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800729c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800729e:	f023 0301 	bic.w	r3, r3, #1
 80072a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3308      	adds	r3, #8
 80072ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80072b0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80072b4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80072b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80072bc:	e841 2300 	strex	r3, r2, [r1]
 80072c0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80072c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1e1      	bne.n	800728c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	3308      	adds	r3, #8
 80072ce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072d2:	e853 3f00 	ldrex	r3, [r3]
 80072d6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80072d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3308      	adds	r3, #8
 80072e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80072ec:	66fa      	str	r2, [r7, #108]	; 0x6c
 80072ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80072f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80072f4:	e841 2300 	strex	r3, r2, [r1]
 80072f8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80072fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e3      	bne.n	80072c8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2220      	movs	r2, #32
 8007304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007316:	e853 3f00 	ldrex	r3, [r3]
 800731a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800731c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800731e:	f023 0310 	bic.w	r3, r3, #16
 8007322:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007330:	65bb      	str	r3, [r7, #88]	; 0x58
 8007332:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007334:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007336:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007338:	e841 2300 	strex	r3, r2, [r1]
 800733c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800733e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1e4      	bne.n	800730e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007348:	4618      	mov	r0, r3
 800734a:	f7fc fa08 	bl	800375e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2202      	movs	r2, #2
 8007352:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007360:	b29b      	uxth	r3, r3
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	b29b      	uxth	r3, r3
 8007366:	4619      	mov	r1, r3
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f8d7 	bl	800751c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800736e:	e0b9      	b.n	80074e4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800737c:	b29b      	uxth	r3, r3
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800738a:	b29b      	uxth	r3, r3
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 80ab 	beq.w	80074e8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007392:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 80a6 	beq.w	80074e8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a4:	e853 3f00 	ldrex	r3, [r3]
 80073a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	461a      	mov	r2, r3
 80073ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073be:	647b      	str	r3, [r7, #68]	; 0x44
 80073c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073c6:	e841 2300 	strex	r3, r2, [r1]
 80073ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1e4      	bne.n	800739c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	3308      	adds	r3, #8
 80073d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	e853 3f00 	ldrex	r3, [r3]
 80073e0:	623b      	str	r3, [r7, #32]
   return(result);
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	f023 0301 	bic.w	r3, r3, #1
 80073e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	3308      	adds	r3, #8
 80073f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80073f6:	633a      	str	r2, [r7, #48]	; 0x30
 80073f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073fe:	e841 2300 	strex	r3, r2, [r1]
 8007402:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1e3      	bne.n	80073d2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2220      	movs	r2, #32
 800740e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	e853 3f00 	ldrex	r3, [r3]
 800742a:	60fb      	str	r3, [r7, #12]
   return(result);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f023 0310 	bic.w	r3, r3, #16
 8007432:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	461a      	mov	r2, r3
 800743c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007440:	61fb      	str	r3, [r7, #28]
 8007442:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007444:	69b9      	ldr	r1, [r7, #24]
 8007446:	69fa      	ldr	r2, [r7, #28]
 8007448:	e841 2300 	strex	r3, r2, [r1]
 800744c:	617b      	str	r3, [r7, #20]
   return(result);
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1e4      	bne.n	800741e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2202      	movs	r2, #2
 8007458:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800745a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800745e:	4619      	mov	r1, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 f85b 	bl	800751c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007466:	e03f      	b.n	80074e8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800746c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00e      	beq.n	8007492 <HAL_UART_IRQHandler+0x56a>
 8007474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d008      	beq.n	8007492 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007488:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 ff94 	bl	80083b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007490:	e02d      	b.n	80074ee <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00e      	beq.n	80074bc <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800749e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d008      	beq.n	80074bc <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d01c      	beq.n	80074ec <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	4798      	blx	r3
    }
    return;
 80074ba:	e017      	b.n	80074ec <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80074bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d012      	beq.n	80074ee <HAL_UART_IRQHandler+0x5c6>
 80074c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00c      	beq.n	80074ee <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fd9d 	bl	8008014 <UART_EndTransmit_IT>
    return;
 80074da:	e008      	b.n	80074ee <HAL_UART_IRQHandler+0x5c6>
      return;
 80074dc:	bf00      	nop
 80074de:	e006      	b.n	80074ee <HAL_UART_IRQHandler+0x5c6>
    return;
 80074e0:	bf00      	nop
 80074e2:	e004      	b.n	80074ee <HAL_UART_IRQHandler+0x5c6>
      return;
 80074e4:	bf00      	nop
 80074e6:	e002      	b.n	80074ee <HAL_UART_IRQHandler+0x5c6>
      return;
 80074e8:	bf00      	nop
 80074ea:	e000      	b.n	80074ee <HAL_UART_IRQHandler+0x5c6>
    return;
 80074ec:	bf00      	nop
  }

}
 80074ee:	37e8      	adds	r7, #232	; 0xe8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	460b      	mov	r3, r1
 8007526:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b088      	sub	sp, #32
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	689a      	ldr	r2, [r3, #8]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	431a      	orrs	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	431a      	orrs	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	4313      	orrs	r3, r2
 8007556:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007562:	f023 030c 	bic.w	r3, r3, #12
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	6812      	ldr	r2, [r2, #0]
 800756a:	6979      	ldr	r1, [r7, #20]
 800756c:	430b      	orrs	r3, r1
 800756e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68da      	ldr	r2, [r3, #12]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	430a      	orrs	r2, r1
 8007584:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a1b      	ldr	r3, [r3, #32]
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	4313      	orrs	r3, r2
 8007594:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	430a      	orrs	r2, r1
 80075a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4aa7      	ldr	r2, [pc, #668]	; (800784c <UART_SetConfig+0x318>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d120      	bne.n	80075f6 <UART_SetConfig+0xc2>
 80075b4:	4ba6      	ldr	r3, [pc, #664]	; (8007850 <UART_SetConfig+0x31c>)
 80075b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b8:	f003 0303 	and.w	r3, r3, #3
 80075bc:	2b03      	cmp	r3, #3
 80075be:	d817      	bhi.n	80075f0 <UART_SetConfig+0xbc>
 80075c0:	a201      	add	r2, pc, #4	; (adr r2, 80075c8 <UART_SetConfig+0x94>)
 80075c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c6:	bf00      	nop
 80075c8:	080075d9 	.word	0x080075d9
 80075cc:	080075e5 	.word	0x080075e5
 80075d0:	080075eb 	.word	0x080075eb
 80075d4:	080075df 	.word	0x080075df
 80075d8:	2301      	movs	r3, #1
 80075da:	77fb      	strb	r3, [r7, #31]
 80075dc:	e0b5      	b.n	800774a <UART_SetConfig+0x216>
 80075de:	2302      	movs	r3, #2
 80075e0:	77fb      	strb	r3, [r7, #31]
 80075e2:	e0b2      	b.n	800774a <UART_SetConfig+0x216>
 80075e4:	2304      	movs	r3, #4
 80075e6:	77fb      	strb	r3, [r7, #31]
 80075e8:	e0af      	b.n	800774a <UART_SetConfig+0x216>
 80075ea:	2308      	movs	r3, #8
 80075ec:	77fb      	strb	r3, [r7, #31]
 80075ee:	e0ac      	b.n	800774a <UART_SetConfig+0x216>
 80075f0:	2310      	movs	r3, #16
 80075f2:	77fb      	strb	r3, [r7, #31]
 80075f4:	e0a9      	b.n	800774a <UART_SetConfig+0x216>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a96      	ldr	r2, [pc, #600]	; (8007854 <UART_SetConfig+0x320>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d124      	bne.n	800764a <UART_SetConfig+0x116>
 8007600:	4b93      	ldr	r3, [pc, #588]	; (8007850 <UART_SetConfig+0x31c>)
 8007602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007604:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007608:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800760c:	d011      	beq.n	8007632 <UART_SetConfig+0xfe>
 800760e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007612:	d817      	bhi.n	8007644 <UART_SetConfig+0x110>
 8007614:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007618:	d011      	beq.n	800763e <UART_SetConfig+0x10a>
 800761a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800761e:	d811      	bhi.n	8007644 <UART_SetConfig+0x110>
 8007620:	2b00      	cmp	r3, #0
 8007622:	d003      	beq.n	800762c <UART_SetConfig+0xf8>
 8007624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007628:	d006      	beq.n	8007638 <UART_SetConfig+0x104>
 800762a:	e00b      	b.n	8007644 <UART_SetConfig+0x110>
 800762c:	2300      	movs	r3, #0
 800762e:	77fb      	strb	r3, [r7, #31]
 8007630:	e08b      	b.n	800774a <UART_SetConfig+0x216>
 8007632:	2302      	movs	r3, #2
 8007634:	77fb      	strb	r3, [r7, #31]
 8007636:	e088      	b.n	800774a <UART_SetConfig+0x216>
 8007638:	2304      	movs	r3, #4
 800763a:	77fb      	strb	r3, [r7, #31]
 800763c:	e085      	b.n	800774a <UART_SetConfig+0x216>
 800763e:	2308      	movs	r3, #8
 8007640:	77fb      	strb	r3, [r7, #31]
 8007642:	e082      	b.n	800774a <UART_SetConfig+0x216>
 8007644:	2310      	movs	r3, #16
 8007646:	77fb      	strb	r3, [r7, #31]
 8007648:	e07f      	b.n	800774a <UART_SetConfig+0x216>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a82      	ldr	r2, [pc, #520]	; (8007858 <UART_SetConfig+0x324>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d124      	bne.n	800769e <UART_SetConfig+0x16a>
 8007654:	4b7e      	ldr	r3, [pc, #504]	; (8007850 <UART_SetConfig+0x31c>)
 8007656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007658:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800765c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007660:	d011      	beq.n	8007686 <UART_SetConfig+0x152>
 8007662:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007666:	d817      	bhi.n	8007698 <UART_SetConfig+0x164>
 8007668:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800766c:	d011      	beq.n	8007692 <UART_SetConfig+0x15e>
 800766e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007672:	d811      	bhi.n	8007698 <UART_SetConfig+0x164>
 8007674:	2b00      	cmp	r3, #0
 8007676:	d003      	beq.n	8007680 <UART_SetConfig+0x14c>
 8007678:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800767c:	d006      	beq.n	800768c <UART_SetConfig+0x158>
 800767e:	e00b      	b.n	8007698 <UART_SetConfig+0x164>
 8007680:	2300      	movs	r3, #0
 8007682:	77fb      	strb	r3, [r7, #31]
 8007684:	e061      	b.n	800774a <UART_SetConfig+0x216>
 8007686:	2302      	movs	r3, #2
 8007688:	77fb      	strb	r3, [r7, #31]
 800768a:	e05e      	b.n	800774a <UART_SetConfig+0x216>
 800768c:	2304      	movs	r3, #4
 800768e:	77fb      	strb	r3, [r7, #31]
 8007690:	e05b      	b.n	800774a <UART_SetConfig+0x216>
 8007692:	2308      	movs	r3, #8
 8007694:	77fb      	strb	r3, [r7, #31]
 8007696:	e058      	b.n	800774a <UART_SetConfig+0x216>
 8007698:	2310      	movs	r3, #16
 800769a:	77fb      	strb	r3, [r7, #31]
 800769c:	e055      	b.n	800774a <UART_SetConfig+0x216>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a6e      	ldr	r2, [pc, #440]	; (800785c <UART_SetConfig+0x328>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d124      	bne.n	80076f2 <UART_SetConfig+0x1be>
 80076a8:	4b69      	ldr	r3, [pc, #420]	; (8007850 <UART_SetConfig+0x31c>)
 80076aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80076b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076b4:	d011      	beq.n	80076da <UART_SetConfig+0x1a6>
 80076b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076ba:	d817      	bhi.n	80076ec <UART_SetConfig+0x1b8>
 80076bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076c0:	d011      	beq.n	80076e6 <UART_SetConfig+0x1b2>
 80076c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076c6:	d811      	bhi.n	80076ec <UART_SetConfig+0x1b8>
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d003      	beq.n	80076d4 <UART_SetConfig+0x1a0>
 80076cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076d0:	d006      	beq.n	80076e0 <UART_SetConfig+0x1ac>
 80076d2:	e00b      	b.n	80076ec <UART_SetConfig+0x1b8>
 80076d4:	2300      	movs	r3, #0
 80076d6:	77fb      	strb	r3, [r7, #31]
 80076d8:	e037      	b.n	800774a <UART_SetConfig+0x216>
 80076da:	2302      	movs	r3, #2
 80076dc:	77fb      	strb	r3, [r7, #31]
 80076de:	e034      	b.n	800774a <UART_SetConfig+0x216>
 80076e0:	2304      	movs	r3, #4
 80076e2:	77fb      	strb	r3, [r7, #31]
 80076e4:	e031      	b.n	800774a <UART_SetConfig+0x216>
 80076e6:	2308      	movs	r3, #8
 80076e8:	77fb      	strb	r3, [r7, #31]
 80076ea:	e02e      	b.n	800774a <UART_SetConfig+0x216>
 80076ec:	2310      	movs	r3, #16
 80076ee:	77fb      	strb	r3, [r7, #31]
 80076f0:	e02b      	b.n	800774a <UART_SetConfig+0x216>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a5a      	ldr	r2, [pc, #360]	; (8007860 <UART_SetConfig+0x32c>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d124      	bne.n	8007746 <UART_SetConfig+0x212>
 80076fc:	4b54      	ldr	r3, [pc, #336]	; (8007850 <UART_SetConfig+0x31c>)
 80076fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007700:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007704:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007708:	d011      	beq.n	800772e <UART_SetConfig+0x1fa>
 800770a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800770e:	d817      	bhi.n	8007740 <UART_SetConfig+0x20c>
 8007710:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007714:	d011      	beq.n	800773a <UART_SetConfig+0x206>
 8007716:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800771a:	d811      	bhi.n	8007740 <UART_SetConfig+0x20c>
 800771c:	2b00      	cmp	r3, #0
 800771e:	d003      	beq.n	8007728 <UART_SetConfig+0x1f4>
 8007720:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007724:	d006      	beq.n	8007734 <UART_SetConfig+0x200>
 8007726:	e00b      	b.n	8007740 <UART_SetConfig+0x20c>
 8007728:	2300      	movs	r3, #0
 800772a:	77fb      	strb	r3, [r7, #31]
 800772c:	e00d      	b.n	800774a <UART_SetConfig+0x216>
 800772e:	2302      	movs	r3, #2
 8007730:	77fb      	strb	r3, [r7, #31]
 8007732:	e00a      	b.n	800774a <UART_SetConfig+0x216>
 8007734:	2304      	movs	r3, #4
 8007736:	77fb      	strb	r3, [r7, #31]
 8007738:	e007      	b.n	800774a <UART_SetConfig+0x216>
 800773a:	2308      	movs	r3, #8
 800773c:	77fb      	strb	r3, [r7, #31]
 800773e:	e004      	b.n	800774a <UART_SetConfig+0x216>
 8007740:	2310      	movs	r3, #16
 8007742:	77fb      	strb	r3, [r7, #31]
 8007744:	e001      	b.n	800774a <UART_SetConfig+0x216>
 8007746:	2310      	movs	r3, #16
 8007748:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007752:	d15b      	bne.n	800780c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8007754:	7ffb      	ldrb	r3, [r7, #31]
 8007756:	2b08      	cmp	r3, #8
 8007758:	d827      	bhi.n	80077aa <UART_SetConfig+0x276>
 800775a:	a201      	add	r2, pc, #4	; (adr r2, 8007760 <UART_SetConfig+0x22c>)
 800775c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007760:	08007785 	.word	0x08007785
 8007764:	0800778d 	.word	0x0800778d
 8007768:	08007795 	.word	0x08007795
 800776c:	080077ab 	.word	0x080077ab
 8007770:	0800779b 	.word	0x0800779b
 8007774:	080077ab 	.word	0x080077ab
 8007778:	080077ab 	.word	0x080077ab
 800777c:	080077ab 	.word	0x080077ab
 8007780:	080077a3 	.word	0x080077a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007784:	f7fd fe34 	bl	80053f0 <HAL_RCC_GetPCLK1Freq>
 8007788:	61b8      	str	r0, [r7, #24]
        break;
 800778a:	e013      	b.n	80077b4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800778c:	f7fd fe52 	bl	8005434 <HAL_RCC_GetPCLK2Freq>
 8007790:	61b8      	str	r0, [r7, #24]
        break;
 8007792:	e00f      	b.n	80077b4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007794:	4b33      	ldr	r3, [pc, #204]	; (8007864 <UART_SetConfig+0x330>)
 8007796:	61bb      	str	r3, [r7, #24]
        break;
 8007798:	e00c      	b.n	80077b4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800779a:	f7fd fdb3 	bl	8005304 <HAL_RCC_GetSysClockFreq>
 800779e:	61b8      	str	r0, [r7, #24]
        break;
 80077a0:	e008      	b.n	80077b4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077a6:	61bb      	str	r3, [r7, #24]
        break;
 80077a8:	e004      	b.n	80077b4 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80077aa:	2300      	movs	r3, #0
 80077ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	77bb      	strb	r3, [r7, #30]
        break;
 80077b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f000 8082 	beq.w	80078c0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	005a      	lsls	r2, r3, #1
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	085b      	lsrs	r3, r3, #1
 80077c6:	441a      	add	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80077d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	2b0f      	cmp	r3, #15
 80077d6:	d916      	bls.n	8007806 <UART_SetConfig+0x2d2>
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077de:	d212      	bcs.n	8007806 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	f023 030f 	bic.w	r3, r3, #15
 80077e8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	085b      	lsrs	r3, r3, #1
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	f003 0307 	and.w	r3, r3, #7
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	89fb      	ldrh	r3, [r7, #14]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	89fa      	ldrh	r2, [r7, #14]
 8007802:	60da      	str	r2, [r3, #12]
 8007804:	e05c      	b.n	80078c0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	77bb      	strb	r3, [r7, #30]
 800780a:	e059      	b.n	80078c0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800780c:	7ffb      	ldrb	r3, [r7, #31]
 800780e:	2b08      	cmp	r3, #8
 8007810:	d835      	bhi.n	800787e <UART_SetConfig+0x34a>
 8007812:	a201      	add	r2, pc, #4	; (adr r2, 8007818 <UART_SetConfig+0x2e4>)
 8007814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007818:	0800783d 	.word	0x0800783d
 800781c:	08007845 	.word	0x08007845
 8007820:	08007869 	.word	0x08007869
 8007824:	0800787f 	.word	0x0800787f
 8007828:	0800786f 	.word	0x0800786f
 800782c:	0800787f 	.word	0x0800787f
 8007830:	0800787f 	.word	0x0800787f
 8007834:	0800787f 	.word	0x0800787f
 8007838:	08007877 	.word	0x08007877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800783c:	f7fd fdd8 	bl	80053f0 <HAL_RCC_GetPCLK1Freq>
 8007840:	61b8      	str	r0, [r7, #24]
        break;
 8007842:	e021      	b.n	8007888 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007844:	f7fd fdf6 	bl	8005434 <HAL_RCC_GetPCLK2Freq>
 8007848:	61b8      	str	r0, [r7, #24]
        break;
 800784a:	e01d      	b.n	8007888 <UART_SetConfig+0x354>
 800784c:	40013800 	.word	0x40013800
 8007850:	40021000 	.word	0x40021000
 8007854:	40004400 	.word	0x40004400
 8007858:	40004800 	.word	0x40004800
 800785c:	40004c00 	.word	0x40004c00
 8007860:	40005000 	.word	0x40005000
 8007864:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007868:	4b1b      	ldr	r3, [pc, #108]	; (80078d8 <UART_SetConfig+0x3a4>)
 800786a:	61bb      	str	r3, [r7, #24]
        break;
 800786c:	e00c      	b.n	8007888 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800786e:	f7fd fd49 	bl	8005304 <HAL_RCC_GetSysClockFreq>
 8007872:	61b8      	str	r0, [r7, #24]
        break;
 8007874:	e008      	b.n	8007888 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800787a:	61bb      	str	r3, [r7, #24]
        break;
 800787c:	e004      	b.n	8007888 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800787e:	2300      	movs	r3, #0
 8007880:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	77bb      	strb	r3, [r7, #30]
        break;
 8007886:	bf00      	nop
    }

    if (pclk != 0U)
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d018      	beq.n	80078c0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	085a      	lsrs	r2, r3, #1
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	441a      	add	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	2b0f      	cmp	r3, #15
 80078a6:	d909      	bls.n	80078bc <UART_SetConfig+0x388>
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ae:	d205      	bcs.n	80078bc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	60da      	str	r2, [r3, #12]
 80078ba:	e001      	b.n	80078c0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80078cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3720      	adds	r7, #32
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	007a1200 	.word	0x007a1200

080078dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00a      	beq.n	8007906 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	430a      	orrs	r2, r1
 8007904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790a:	f003 0302 	and.w	r3, r3, #2
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00a      	beq.n	8007928 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	430a      	orrs	r2, r1
 8007926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792c:	f003 0304 	and.w	r3, r3, #4
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00a      	beq.n	800794a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	430a      	orrs	r2, r1
 8007948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794e:	f003 0308 	and.w	r3, r3, #8
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00a      	beq.n	800796c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	430a      	orrs	r2, r1
 800796a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007970:	f003 0310 	and.w	r3, r3, #16
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00a      	beq.n	800798e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	430a      	orrs	r2, r1
 800798c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007992:	f003 0320 	and.w	r3, r3, #32
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00a      	beq.n	80079b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	430a      	orrs	r2, r1
 80079ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d01a      	beq.n	80079f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	430a      	orrs	r2, r1
 80079d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079da:	d10a      	bne.n	80079f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00a      	beq.n	8007a14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	430a      	orrs	r2, r1
 8007a12:	605a      	str	r2, [r3, #4]
  }
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b098      	sub	sp, #96	; 0x60
 8007a24:	af02      	add	r7, sp, #8
 8007a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a30:	f7fa fa80 	bl	8001f34 <HAL_GetTick>
 8007a34:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0308 	and.w	r3, r3, #8
 8007a40:	2b08      	cmp	r3, #8
 8007a42:	d12e      	bne.n	8007aa2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f88c 	bl	8007b70 <UART_WaitOnFlagUntilTimeout>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d021      	beq.n	8007aa2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a66:	e853 3f00 	ldrex	r3, [r3]
 8007a6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a72:	653b      	str	r3, [r7, #80]	; 0x50
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	461a      	mov	r2, r3
 8007a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a7c:	647b      	str	r3, [r7, #68]	; 0x44
 8007a7e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a84:	e841 2300 	strex	r3, r2, [r1]
 8007a88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1e6      	bne.n	8007a5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2220      	movs	r2, #32
 8007a94:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e062      	b.n	8007b68 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 0304 	and.w	r3, r3, #4
 8007aac:	2b04      	cmp	r3, #4
 8007aae:	d149      	bne.n	8007b44 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ab0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f856 	bl	8007b70 <UART_WaitOnFlagUntilTimeout>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d03c      	beq.n	8007b44 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	e853 3f00 	ldrex	r3, [r3]
 8007ad6:	623b      	str	r3, [r7, #32]
   return(result);
 8007ad8:	6a3b      	ldr	r3, [r7, #32]
 8007ada:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ae8:	633b      	str	r3, [r7, #48]	; 0x30
 8007aea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007aee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007af0:	e841 2300 	strex	r3, r2, [r1]
 8007af4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d1e6      	bne.n	8007aca <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3308      	adds	r3, #8
 8007b02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	e853 3f00 	ldrex	r3, [r3]
 8007b0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f023 0301 	bic.w	r3, r3, #1
 8007b12:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	3308      	adds	r3, #8
 8007b1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b1c:	61fa      	str	r2, [r7, #28]
 8007b1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b20:	69b9      	ldr	r1, [r7, #24]
 8007b22:	69fa      	ldr	r2, [r7, #28]
 8007b24:	e841 2300 	strex	r3, r2, [r1]
 8007b28:	617b      	str	r3, [r7, #20]
   return(result);
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1e5      	bne.n	8007afc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2220      	movs	r2, #32
 8007b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e011      	b.n	8007b68 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2220      	movs	r2, #32
 8007b48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2220      	movs	r2, #32
 8007b4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3758      	adds	r7, #88	; 0x58
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	603b      	str	r3, [r7, #0]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b80:	e049      	b.n	8007c16 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b88:	d045      	beq.n	8007c16 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b8a:	f7fa f9d3 	bl	8001f34 <HAL_GetTick>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	69ba      	ldr	r2, [r7, #24]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d302      	bcc.n	8007ba0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d101      	bne.n	8007ba4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e048      	b.n	8007c36 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 0304 	and.w	r3, r3, #4
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d031      	beq.n	8007c16 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	f003 0308 	and.w	r3, r3, #8
 8007bbc:	2b08      	cmp	r3, #8
 8007bbe:	d110      	bne.n	8007be2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2208      	movs	r2, #8
 8007bc6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f000 f8ed 	bl	8007da8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2208      	movs	r2, #8
 8007bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e029      	b.n	8007c36 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bf0:	d111      	bne.n	8007c16 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f000 f8d3 	bl	8007da8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2220      	movs	r2, #32
 8007c06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e00f      	b.n	8007c36 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	69da      	ldr	r2, [r3, #28]
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	4013      	ands	r3, r2
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	bf0c      	ite	eq
 8007c26:	2301      	moveq	r3, #1
 8007c28:	2300      	movne	r3, #0
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	79fb      	ldrb	r3, [r7, #7]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d0a6      	beq.n	8007b82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
	...

08007c40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b097      	sub	sp, #92	; 0x5c
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	88fa      	ldrh	r2, [r7, #6]
 8007c58:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	88fa      	ldrh	r2, [r7, #6]
 8007c60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c72:	d10e      	bne.n	8007c92 <UART_Start_Receive_IT+0x52>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d105      	bne.n	8007c88 <UART_Start_Receive_IT+0x48>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007c82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c86:	e01a      	b.n	8007cbe <UART_Start_Receive_IT+0x7e>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	22ff      	movs	r2, #255	; 0xff
 8007c8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c90:	e015      	b.n	8007cbe <UART_Start_Receive_IT+0x7e>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10d      	bne.n	8007cb6 <UART_Start_Receive_IT+0x76>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d104      	bne.n	8007cac <UART_Start_Receive_IT+0x6c>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	22ff      	movs	r2, #255	; 0xff
 8007ca6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007caa:	e008      	b.n	8007cbe <UART_Start_Receive_IT+0x7e>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	227f      	movs	r2, #127	; 0x7f
 8007cb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007cb4:	e003      	b.n	8007cbe <UART_Start_Receive_IT+0x7e>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2222      	movs	r2, #34	; 0x22
 8007cca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3308      	adds	r3, #8
 8007cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cd8:	e853 3f00 	ldrex	r3, [r3]
 8007cdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce0:	f043 0301 	orr.w	r3, r3, #1
 8007ce4:	657b      	str	r3, [r7, #84]	; 0x54
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3308      	adds	r3, #8
 8007cec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007cee:	64ba      	str	r2, [r7, #72]	; 0x48
 8007cf0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007cf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cf6:	e841 2300 	strex	r3, r2, [r1]
 8007cfa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1e5      	bne.n	8007cce <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d0a:	d107      	bne.n	8007d1c <UART_Start_Receive_IT+0xdc>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d103      	bne.n	8007d1c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	4a22      	ldr	r2, [pc, #136]	; (8007da0 <UART_Start_Receive_IT+0x160>)
 8007d18:	669a      	str	r2, [r3, #104]	; 0x68
 8007d1a:	e002      	b.n	8007d22 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	4a21      	ldr	r2, [pc, #132]	; (8007da4 <UART_Start_Receive_IT+0x164>)
 8007d20:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d019      	beq.n	8007d5e <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d32:	e853 3f00 	ldrex	r3, [r3]
 8007d36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	461a      	mov	r2, r3
 8007d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d48:	637b      	str	r3, [r7, #52]	; 0x34
 8007d4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d50:	e841 2300 	strex	r3, r2, [r1]
 8007d54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1e6      	bne.n	8007d2a <UART_Start_Receive_IT+0xea>
 8007d5c:	e018      	b.n	8007d90 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	f043 0320 	orr.w	r3, r3, #32
 8007d72:	653b      	str	r3, [r7, #80]	; 0x50
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d7c:	623b      	str	r3, [r7, #32]
 8007d7e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d80:	69f9      	ldr	r1, [r7, #28]
 8007d82:	6a3a      	ldr	r2, [r7, #32]
 8007d84:	e841 2300 	strex	r3, r2, [r1]
 8007d88:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1e6      	bne.n	8007d5e <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	375c      	adds	r7, #92	; 0x5c
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	08008211 	.word	0x08008211
 8007da4:	08008069 	.word	0x08008069

08007da8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b095      	sub	sp, #84	; 0x54
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db8:	e853 3f00 	ldrex	r3, [r3]
 8007dbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dce:	643b      	str	r3, [r7, #64]	; 0x40
 8007dd0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dd6:	e841 2300 	strex	r3, r2, [r1]
 8007dda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1e6      	bne.n	8007db0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	3308      	adds	r3, #8
 8007de8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dea:	6a3b      	ldr	r3, [r7, #32]
 8007dec:	e853 3f00 	ldrex	r3, [r3]
 8007df0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	f023 0301 	bic.w	r3, r3, #1
 8007df8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3308      	adds	r3, #8
 8007e00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e0a:	e841 2300 	strex	r3, r2, [r1]
 8007e0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1e5      	bne.n	8007de2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d118      	bne.n	8007e50 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	e853 3f00 	ldrex	r3, [r3]
 8007e2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	f023 0310 	bic.w	r3, r3, #16
 8007e32:	647b      	str	r3, [r7, #68]	; 0x44
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e3c:	61bb      	str	r3, [r7, #24]
 8007e3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e40:	6979      	ldr	r1, [r7, #20]
 8007e42:	69ba      	ldr	r2, [r7, #24]
 8007e44:	e841 2300 	strex	r3, r2, [r1]
 8007e48:	613b      	str	r3, [r7, #16]
   return(result);
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1e6      	bne.n	8007e1e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2220      	movs	r2, #32
 8007e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007e64:	bf00      	nop
 8007e66:	3754      	adds	r7, #84	; 0x54
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f7ff fb3a 	bl	8007508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e94:	bf00      	nop
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b08f      	sub	sp, #60	; 0x3c
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ea8:	2b21      	cmp	r3, #33	; 0x21
 8007eaa:	d14d      	bne.n	8007f48 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d132      	bne.n	8007f1e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebe:	6a3b      	ldr	r3, [r7, #32]
 8007ec0:	e853 3f00 	ldrex	r3, [r3]
 8007ec4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ed8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007edc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ede:	e841 2300 	strex	r3, r2, [r1]
 8007ee2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1e6      	bne.n	8007eb8 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	e853 3f00 	ldrex	r3, [r3]
 8007ef6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007efe:	633b      	str	r3, [r7, #48]	; 0x30
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	461a      	mov	r2, r3
 8007f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f08:	61bb      	str	r3, [r7, #24]
 8007f0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0c:	6979      	ldr	r1, [r7, #20]
 8007f0e:	69ba      	ldr	r2, [r7, #24]
 8007f10:	e841 2300 	strex	r3, r2, [r1]
 8007f14:	613b      	str	r3, [r7, #16]
   return(result);
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d1e6      	bne.n	8007eea <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007f1c:	e014      	b.n	8007f48 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f22:	781a      	ldrb	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	b292      	uxth	r2, r2
 8007f2a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f30:	1c5a      	adds	r2, r3, #1
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	b29a      	uxth	r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007f48:	bf00      	nop
 8007f4a:	373c      	adds	r7, #60	; 0x3c
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b091      	sub	sp, #68	; 0x44
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f60:	2b21      	cmp	r3, #33	; 0x21
 8007f62:	d151      	bne.n	8008008 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d132      	bne.n	8007fd6 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f78:	e853 3f00 	ldrex	r3, [r3]
 8007f7c:	623b      	str	r3, [r7, #32]
   return(result);
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
 8007f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f84:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8e:	633b      	str	r3, [r7, #48]	; 0x30
 8007f90:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f96:	e841 2300 	strex	r3, r2, [r1]
 8007f9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1e6      	bne.n	8007f70 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	e853 3f00 	ldrex	r3, [r3]
 8007fae:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc0:	61fb      	str	r3, [r7, #28]
 8007fc2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc4:	69b9      	ldr	r1, [r7, #24]
 8007fc6:	69fa      	ldr	r2, [r7, #28]
 8007fc8:	e841 2300 	strex	r3, r2, [r1]
 8007fcc:	617b      	str	r3, [r7, #20]
   return(result);
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1e6      	bne.n	8007fa2 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007fd4:	e018      	b.n	8008008 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fda:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fde:	881a      	ldrh	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fe8:	b292      	uxth	r2, r2
 8007fea:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff0:	1c9a      	adds	r2, r3, #2
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	3b01      	subs	r3, #1
 8008000:	b29a      	uxth	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008008:	bf00      	nop
 800800a:	3744      	adds	r7, #68	; 0x44
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b088      	sub	sp, #32
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	e853 3f00 	ldrex	r3, [r3]
 8008028:	60bb      	str	r3, [r7, #8]
   return(result);
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008030:	61fb      	str	r3, [r7, #28]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	461a      	mov	r2, r3
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	61bb      	str	r3, [r7, #24]
 800803c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803e:	6979      	ldr	r1, [r7, #20]
 8008040:	69ba      	ldr	r2, [r7, #24]
 8008042:	e841 2300 	strex	r3, r2, [r1]
 8008046:	613b      	str	r3, [r7, #16]
   return(result);
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1e6      	bne.n	800801c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2220      	movs	r2, #32
 8008052:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7ff fa4a 	bl	80074f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008060:	bf00      	nop
 8008062:	3720      	adds	r7, #32
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b09c      	sub	sp, #112	; 0x70
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008076:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008080:	2b22      	cmp	r3, #34	; 0x22
 8008082:	f040 80b9 	bne.w	80081f8 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800808c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008090:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008094:	b2d9      	uxtb	r1, r3
 8008096:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800809a:	b2da      	uxtb	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080a0:	400a      	ands	r2, r1
 80080a2:	b2d2      	uxtb	r2, r2
 80080a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080aa:	1c5a      	adds	r2, r3, #1
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	3b01      	subs	r3, #1
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f040 809c 	bne.w	8008208 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080d8:	e853 3f00 	ldrex	r3, [r3]
 80080dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80080de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	461a      	mov	r2, r3
 80080ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80080ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80080f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80080f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80080f6:	e841 2300 	strex	r3, r2, [r1]
 80080fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80080fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1e6      	bne.n	80080d0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	3308      	adds	r3, #8
 8008108:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810c:	e853 3f00 	ldrex	r3, [r3]
 8008110:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008114:	f023 0301 	bic.w	r3, r3, #1
 8008118:	667b      	str	r3, [r7, #100]	; 0x64
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	3308      	adds	r3, #8
 8008120:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008122:	647a      	str	r2, [r7, #68]	; 0x44
 8008124:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008126:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008128:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800812a:	e841 2300 	strex	r3, r2, [r1]
 800812e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1e5      	bne.n	8008102 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2220      	movs	r2, #32
 800813a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d018      	beq.n	800818a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008160:	e853 3f00 	ldrex	r3, [r3]
 8008164:	623b      	str	r3, [r7, #32]
   return(result);
 8008166:	6a3b      	ldr	r3, [r7, #32]
 8008168:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800816c:	663b      	str	r3, [r7, #96]	; 0x60
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	461a      	mov	r2, r3
 8008174:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008176:	633b      	str	r3, [r7, #48]	; 0x30
 8008178:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800817c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800817e:	e841 2300 	strex	r3, r2, [r1]
 8008182:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1e6      	bne.n	8008158 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800818e:	2b01      	cmp	r3, #1
 8008190:	d12e      	bne.n	80081f0 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	e853 3f00 	ldrex	r3, [r3]
 80081a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f023 0310 	bic.w	r3, r3, #16
 80081ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	461a      	mov	r2, r3
 80081b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081b6:	61fb      	str	r3, [r7, #28]
 80081b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ba:	69b9      	ldr	r1, [r7, #24]
 80081bc:	69fa      	ldr	r2, [r7, #28]
 80081be:	e841 2300 	strex	r3, r2, [r1]
 80081c2:	617b      	str	r3, [r7, #20]
   return(result);
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1e6      	bne.n	8008198 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	69db      	ldr	r3, [r3, #28]
 80081d0:	f003 0310 	and.w	r3, r3, #16
 80081d4:	2b10      	cmp	r3, #16
 80081d6:	d103      	bne.n	80081e0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2210      	movs	r2, #16
 80081de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80081e6:	4619      	mov	r1, r3
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7ff f997 	bl	800751c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081ee:	e00b      	b.n	8008208 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f7f8 fa19 	bl	8000628 <HAL_UART_RxCpltCallback>
}
 80081f6:	e007      	b.n	8008208 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	699a      	ldr	r2, [r3, #24]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f042 0208 	orr.w	r2, r2, #8
 8008206:	619a      	str	r2, [r3, #24]
}
 8008208:	bf00      	nop
 800820a:	3770      	adds	r7, #112	; 0x70
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b09c      	sub	sp, #112	; 0x70
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800821e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008228:	2b22      	cmp	r3, #34	; 0x22
 800822a:	f040 80b9 	bne.w	80083a0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008234:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800823c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800823e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008242:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008246:	4013      	ands	r3, r2
 8008248:	b29a      	uxth	r2, r3
 800824a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800824c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008252:	1c9a      	adds	r2, r3, #2
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800825e:	b29b      	uxth	r3, r3
 8008260:	3b01      	subs	r3, #1
 8008262:	b29a      	uxth	r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008270:	b29b      	uxth	r3, r3
 8008272:	2b00      	cmp	r3, #0
 8008274:	f040 809c 	bne.w	80083b0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008280:	e853 3f00 	ldrex	r3, [r3]
 8008284:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008288:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800828c:	667b      	str	r3, [r7, #100]	; 0x64
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	461a      	mov	r2, r3
 8008294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008296:	657b      	str	r3, [r7, #84]	; 0x54
 8008298:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800829c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800829e:	e841 2300 	strex	r3, r2, [r1]
 80082a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80082a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1e6      	bne.n	8008278 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	3308      	adds	r3, #8
 80082b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b4:	e853 3f00 	ldrex	r3, [r3]
 80082b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082bc:	f023 0301 	bic.w	r3, r3, #1
 80082c0:	663b      	str	r3, [r7, #96]	; 0x60
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	3308      	adds	r3, #8
 80082c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80082ca:	643a      	str	r2, [r7, #64]	; 0x40
 80082cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082d2:	e841 2300 	strex	r3, r2, [r1]
 80082d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1e5      	bne.n	80082aa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2220      	movs	r2, #32
 80082e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d018      	beq.n	8008332 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	e853 3f00 	ldrex	r3, [r3]
 800830c:	61fb      	str	r3, [r7, #28]
   return(result);
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008314:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	461a      	mov	r2, r3
 800831c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800831e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008320:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008322:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008326:	e841 2300 	strex	r3, r2, [r1]
 800832a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1e6      	bne.n	8008300 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008336:	2b01      	cmp	r3, #1
 8008338:	d12e      	bne.n	8008398 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	e853 3f00 	ldrex	r3, [r3]
 800834c:	60bb      	str	r3, [r7, #8]
   return(result);
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	f023 0310 	bic.w	r3, r3, #16
 8008354:	65bb      	str	r3, [r7, #88]	; 0x58
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	461a      	mov	r2, r3
 800835c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800835e:	61bb      	str	r3, [r7, #24]
 8008360:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008362:	6979      	ldr	r1, [r7, #20]
 8008364:	69ba      	ldr	r2, [r7, #24]
 8008366:	e841 2300 	strex	r3, r2, [r1]
 800836a:	613b      	str	r3, [r7, #16]
   return(result);
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1e6      	bne.n	8008340 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	69db      	ldr	r3, [r3, #28]
 8008378:	f003 0310 	and.w	r3, r3, #16
 800837c:	2b10      	cmp	r3, #16
 800837e:	d103      	bne.n	8008388 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2210      	movs	r2, #16
 8008386:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800838e:	4619      	mov	r1, r3
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f7ff f8c3 	bl	800751c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008396:	e00b      	b.n	80083b0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f7f8 f945 	bl	8000628 <HAL_UART_RxCpltCallback>
}
 800839e:	e007      	b.n	80083b0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	699a      	ldr	r2, [r3, #24]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f042 0208 	orr.w	r2, r2, #8
 80083ae:	619a      	str	r2, [r3, #24]
}
 80083b0:	bf00      	nop
 80083b2:	3770      	adds	r7, #112	; 0x70
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80083c0:	bf00      	nop
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80083d4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80083d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	43db      	mvns	r3, r3
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	4013      	ands	r3, r2
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008402:	b084      	sub	sp, #16
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	f107 0014 	add.w	r0, r7, #20
 8008410:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	370c      	adds	r7, #12
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	b004      	add	sp, #16
 8008442:	4770      	bx	lr

08008444 <__errno>:
 8008444:	4b01      	ldr	r3, [pc, #4]	; (800844c <__errno+0x8>)
 8008446:	6818      	ldr	r0, [r3, #0]
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	2000009c 	.word	0x2000009c

08008450 <__libc_init_array>:
 8008450:	b570      	push	{r4, r5, r6, lr}
 8008452:	4d0d      	ldr	r5, [pc, #52]	; (8008488 <__libc_init_array+0x38>)
 8008454:	4c0d      	ldr	r4, [pc, #52]	; (800848c <__libc_init_array+0x3c>)
 8008456:	1b64      	subs	r4, r4, r5
 8008458:	10a4      	asrs	r4, r4, #2
 800845a:	2600      	movs	r6, #0
 800845c:	42a6      	cmp	r6, r4
 800845e:	d109      	bne.n	8008474 <__libc_init_array+0x24>
 8008460:	4d0b      	ldr	r5, [pc, #44]	; (8008490 <__libc_init_array+0x40>)
 8008462:	4c0c      	ldr	r4, [pc, #48]	; (8008494 <__libc_init_array+0x44>)
 8008464:	f000 fcb4 	bl	8008dd0 <_init>
 8008468:	1b64      	subs	r4, r4, r5
 800846a:	10a4      	asrs	r4, r4, #2
 800846c:	2600      	movs	r6, #0
 800846e:	42a6      	cmp	r6, r4
 8008470:	d105      	bne.n	800847e <__libc_init_array+0x2e>
 8008472:	bd70      	pop	{r4, r5, r6, pc}
 8008474:	f855 3b04 	ldr.w	r3, [r5], #4
 8008478:	4798      	blx	r3
 800847a:	3601      	adds	r6, #1
 800847c:	e7ee      	b.n	800845c <__libc_init_array+0xc>
 800847e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008482:	4798      	blx	r3
 8008484:	3601      	adds	r6, #1
 8008486:	e7f2      	b.n	800846e <__libc_init_array+0x1e>
 8008488:	0800b36c 	.word	0x0800b36c
 800848c:	0800b36c 	.word	0x0800b36c
 8008490:	0800b36c 	.word	0x0800b36c
 8008494:	0800b370 	.word	0x0800b370

08008498 <malloc>:
 8008498:	4b02      	ldr	r3, [pc, #8]	; (80084a4 <malloc+0xc>)
 800849a:	4601      	mov	r1, r0
 800849c:	6818      	ldr	r0, [r3, #0]
 800849e:	f000 b885 	b.w	80085ac <_malloc_r>
 80084a2:	bf00      	nop
 80084a4:	2000009c 	.word	0x2000009c

080084a8 <memcpy>:
 80084a8:	440a      	add	r2, r1
 80084aa:	4291      	cmp	r1, r2
 80084ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80084b0:	d100      	bne.n	80084b4 <memcpy+0xc>
 80084b2:	4770      	bx	lr
 80084b4:	b510      	push	{r4, lr}
 80084b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084be:	4291      	cmp	r1, r2
 80084c0:	d1f9      	bne.n	80084b6 <memcpy+0xe>
 80084c2:	bd10      	pop	{r4, pc}

080084c4 <memset>:
 80084c4:	4402      	add	r2, r0
 80084c6:	4603      	mov	r3, r0
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d100      	bne.n	80084ce <memset+0xa>
 80084cc:	4770      	bx	lr
 80084ce:	f803 1b01 	strb.w	r1, [r3], #1
 80084d2:	e7f9      	b.n	80084c8 <memset+0x4>

080084d4 <_free_r>:
 80084d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084d6:	2900      	cmp	r1, #0
 80084d8:	d044      	beq.n	8008564 <_free_r+0x90>
 80084da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084de:	9001      	str	r0, [sp, #4]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f1a1 0404 	sub.w	r4, r1, #4
 80084e6:	bfb8      	it	lt
 80084e8:	18e4      	addlt	r4, r4, r3
 80084ea:	f000 f921 	bl	8008730 <__malloc_lock>
 80084ee:	4a1e      	ldr	r2, [pc, #120]	; (8008568 <_free_r+0x94>)
 80084f0:	9801      	ldr	r0, [sp, #4]
 80084f2:	6813      	ldr	r3, [r2, #0]
 80084f4:	b933      	cbnz	r3, 8008504 <_free_r+0x30>
 80084f6:	6063      	str	r3, [r4, #4]
 80084f8:	6014      	str	r4, [r2, #0]
 80084fa:	b003      	add	sp, #12
 80084fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008500:	f000 b91c 	b.w	800873c <__malloc_unlock>
 8008504:	42a3      	cmp	r3, r4
 8008506:	d908      	bls.n	800851a <_free_r+0x46>
 8008508:	6825      	ldr	r5, [r4, #0]
 800850a:	1961      	adds	r1, r4, r5
 800850c:	428b      	cmp	r3, r1
 800850e:	bf01      	itttt	eq
 8008510:	6819      	ldreq	r1, [r3, #0]
 8008512:	685b      	ldreq	r3, [r3, #4]
 8008514:	1949      	addeq	r1, r1, r5
 8008516:	6021      	streq	r1, [r4, #0]
 8008518:	e7ed      	b.n	80084f6 <_free_r+0x22>
 800851a:	461a      	mov	r2, r3
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	b10b      	cbz	r3, 8008524 <_free_r+0x50>
 8008520:	42a3      	cmp	r3, r4
 8008522:	d9fa      	bls.n	800851a <_free_r+0x46>
 8008524:	6811      	ldr	r1, [r2, #0]
 8008526:	1855      	adds	r5, r2, r1
 8008528:	42a5      	cmp	r5, r4
 800852a:	d10b      	bne.n	8008544 <_free_r+0x70>
 800852c:	6824      	ldr	r4, [r4, #0]
 800852e:	4421      	add	r1, r4
 8008530:	1854      	adds	r4, r2, r1
 8008532:	42a3      	cmp	r3, r4
 8008534:	6011      	str	r1, [r2, #0]
 8008536:	d1e0      	bne.n	80084fa <_free_r+0x26>
 8008538:	681c      	ldr	r4, [r3, #0]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	6053      	str	r3, [r2, #4]
 800853e:	4421      	add	r1, r4
 8008540:	6011      	str	r1, [r2, #0]
 8008542:	e7da      	b.n	80084fa <_free_r+0x26>
 8008544:	d902      	bls.n	800854c <_free_r+0x78>
 8008546:	230c      	movs	r3, #12
 8008548:	6003      	str	r3, [r0, #0]
 800854a:	e7d6      	b.n	80084fa <_free_r+0x26>
 800854c:	6825      	ldr	r5, [r4, #0]
 800854e:	1961      	adds	r1, r4, r5
 8008550:	428b      	cmp	r3, r1
 8008552:	bf04      	itt	eq
 8008554:	6819      	ldreq	r1, [r3, #0]
 8008556:	685b      	ldreq	r3, [r3, #4]
 8008558:	6063      	str	r3, [r4, #4]
 800855a:	bf04      	itt	eq
 800855c:	1949      	addeq	r1, r1, r5
 800855e:	6021      	streq	r1, [r4, #0]
 8008560:	6054      	str	r4, [r2, #4]
 8008562:	e7ca      	b.n	80084fa <_free_r+0x26>
 8008564:	b003      	add	sp, #12
 8008566:	bd30      	pop	{r4, r5, pc}
 8008568:	2000074c 	.word	0x2000074c

0800856c <sbrk_aligned>:
 800856c:	b570      	push	{r4, r5, r6, lr}
 800856e:	4e0e      	ldr	r6, [pc, #56]	; (80085a8 <sbrk_aligned+0x3c>)
 8008570:	460c      	mov	r4, r1
 8008572:	6831      	ldr	r1, [r6, #0]
 8008574:	4605      	mov	r5, r0
 8008576:	b911      	cbnz	r1, 800857e <sbrk_aligned+0x12>
 8008578:	f000 f88c 	bl	8008694 <_sbrk_r>
 800857c:	6030      	str	r0, [r6, #0]
 800857e:	4621      	mov	r1, r4
 8008580:	4628      	mov	r0, r5
 8008582:	f000 f887 	bl	8008694 <_sbrk_r>
 8008586:	1c43      	adds	r3, r0, #1
 8008588:	d00a      	beq.n	80085a0 <sbrk_aligned+0x34>
 800858a:	1cc4      	adds	r4, r0, #3
 800858c:	f024 0403 	bic.w	r4, r4, #3
 8008590:	42a0      	cmp	r0, r4
 8008592:	d007      	beq.n	80085a4 <sbrk_aligned+0x38>
 8008594:	1a21      	subs	r1, r4, r0
 8008596:	4628      	mov	r0, r5
 8008598:	f000 f87c 	bl	8008694 <_sbrk_r>
 800859c:	3001      	adds	r0, #1
 800859e:	d101      	bne.n	80085a4 <sbrk_aligned+0x38>
 80085a0:	f04f 34ff 	mov.w	r4, #4294967295
 80085a4:	4620      	mov	r0, r4
 80085a6:	bd70      	pop	{r4, r5, r6, pc}
 80085a8:	20000750 	.word	0x20000750

080085ac <_malloc_r>:
 80085ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085b0:	1ccd      	adds	r5, r1, #3
 80085b2:	f025 0503 	bic.w	r5, r5, #3
 80085b6:	3508      	adds	r5, #8
 80085b8:	2d0c      	cmp	r5, #12
 80085ba:	bf38      	it	cc
 80085bc:	250c      	movcc	r5, #12
 80085be:	2d00      	cmp	r5, #0
 80085c0:	4607      	mov	r7, r0
 80085c2:	db01      	blt.n	80085c8 <_malloc_r+0x1c>
 80085c4:	42a9      	cmp	r1, r5
 80085c6:	d905      	bls.n	80085d4 <_malloc_r+0x28>
 80085c8:	230c      	movs	r3, #12
 80085ca:	603b      	str	r3, [r7, #0]
 80085cc:	2600      	movs	r6, #0
 80085ce:	4630      	mov	r0, r6
 80085d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085d4:	4e2e      	ldr	r6, [pc, #184]	; (8008690 <_malloc_r+0xe4>)
 80085d6:	f000 f8ab 	bl	8008730 <__malloc_lock>
 80085da:	6833      	ldr	r3, [r6, #0]
 80085dc:	461c      	mov	r4, r3
 80085de:	bb34      	cbnz	r4, 800862e <_malloc_r+0x82>
 80085e0:	4629      	mov	r1, r5
 80085e2:	4638      	mov	r0, r7
 80085e4:	f7ff ffc2 	bl	800856c <sbrk_aligned>
 80085e8:	1c43      	adds	r3, r0, #1
 80085ea:	4604      	mov	r4, r0
 80085ec:	d14d      	bne.n	800868a <_malloc_r+0xde>
 80085ee:	6834      	ldr	r4, [r6, #0]
 80085f0:	4626      	mov	r6, r4
 80085f2:	2e00      	cmp	r6, #0
 80085f4:	d140      	bne.n	8008678 <_malloc_r+0xcc>
 80085f6:	6823      	ldr	r3, [r4, #0]
 80085f8:	4631      	mov	r1, r6
 80085fa:	4638      	mov	r0, r7
 80085fc:	eb04 0803 	add.w	r8, r4, r3
 8008600:	f000 f848 	bl	8008694 <_sbrk_r>
 8008604:	4580      	cmp	r8, r0
 8008606:	d13a      	bne.n	800867e <_malloc_r+0xd2>
 8008608:	6821      	ldr	r1, [r4, #0]
 800860a:	3503      	adds	r5, #3
 800860c:	1a6d      	subs	r5, r5, r1
 800860e:	f025 0503 	bic.w	r5, r5, #3
 8008612:	3508      	adds	r5, #8
 8008614:	2d0c      	cmp	r5, #12
 8008616:	bf38      	it	cc
 8008618:	250c      	movcc	r5, #12
 800861a:	4629      	mov	r1, r5
 800861c:	4638      	mov	r0, r7
 800861e:	f7ff ffa5 	bl	800856c <sbrk_aligned>
 8008622:	3001      	adds	r0, #1
 8008624:	d02b      	beq.n	800867e <_malloc_r+0xd2>
 8008626:	6823      	ldr	r3, [r4, #0]
 8008628:	442b      	add	r3, r5
 800862a:	6023      	str	r3, [r4, #0]
 800862c:	e00e      	b.n	800864c <_malloc_r+0xa0>
 800862e:	6822      	ldr	r2, [r4, #0]
 8008630:	1b52      	subs	r2, r2, r5
 8008632:	d41e      	bmi.n	8008672 <_malloc_r+0xc6>
 8008634:	2a0b      	cmp	r2, #11
 8008636:	d916      	bls.n	8008666 <_malloc_r+0xba>
 8008638:	1961      	adds	r1, r4, r5
 800863a:	42a3      	cmp	r3, r4
 800863c:	6025      	str	r5, [r4, #0]
 800863e:	bf18      	it	ne
 8008640:	6059      	strne	r1, [r3, #4]
 8008642:	6863      	ldr	r3, [r4, #4]
 8008644:	bf08      	it	eq
 8008646:	6031      	streq	r1, [r6, #0]
 8008648:	5162      	str	r2, [r4, r5]
 800864a:	604b      	str	r3, [r1, #4]
 800864c:	4638      	mov	r0, r7
 800864e:	f104 060b 	add.w	r6, r4, #11
 8008652:	f000 f873 	bl	800873c <__malloc_unlock>
 8008656:	f026 0607 	bic.w	r6, r6, #7
 800865a:	1d23      	adds	r3, r4, #4
 800865c:	1af2      	subs	r2, r6, r3
 800865e:	d0b6      	beq.n	80085ce <_malloc_r+0x22>
 8008660:	1b9b      	subs	r3, r3, r6
 8008662:	50a3      	str	r3, [r4, r2]
 8008664:	e7b3      	b.n	80085ce <_malloc_r+0x22>
 8008666:	6862      	ldr	r2, [r4, #4]
 8008668:	42a3      	cmp	r3, r4
 800866a:	bf0c      	ite	eq
 800866c:	6032      	streq	r2, [r6, #0]
 800866e:	605a      	strne	r2, [r3, #4]
 8008670:	e7ec      	b.n	800864c <_malloc_r+0xa0>
 8008672:	4623      	mov	r3, r4
 8008674:	6864      	ldr	r4, [r4, #4]
 8008676:	e7b2      	b.n	80085de <_malloc_r+0x32>
 8008678:	4634      	mov	r4, r6
 800867a:	6876      	ldr	r6, [r6, #4]
 800867c:	e7b9      	b.n	80085f2 <_malloc_r+0x46>
 800867e:	230c      	movs	r3, #12
 8008680:	603b      	str	r3, [r7, #0]
 8008682:	4638      	mov	r0, r7
 8008684:	f000 f85a 	bl	800873c <__malloc_unlock>
 8008688:	e7a1      	b.n	80085ce <_malloc_r+0x22>
 800868a:	6025      	str	r5, [r4, #0]
 800868c:	e7de      	b.n	800864c <_malloc_r+0xa0>
 800868e:	bf00      	nop
 8008690:	2000074c 	.word	0x2000074c

08008694 <_sbrk_r>:
 8008694:	b538      	push	{r3, r4, r5, lr}
 8008696:	4d06      	ldr	r5, [pc, #24]	; (80086b0 <_sbrk_r+0x1c>)
 8008698:	2300      	movs	r3, #0
 800869a:	4604      	mov	r4, r0
 800869c:	4608      	mov	r0, r1
 800869e:	602b      	str	r3, [r5, #0]
 80086a0:	f7f9 fb7c 	bl	8001d9c <_sbrk>
 80086a4:	1c43      	adds	r3, r0, #1
 80086a6:	d102      	bne.n	80086ae <_sbrk_r+0x1a>
 80086a8:	682b      	ldr	r3, [r5, #0]
 80086aa:	b103      	cbz	r3, 80086ae <_sbrk_r+0x1a>
 80086ac:	6023      	str	r3, [r4, #0]
 80086ae:	bd38      	pop	{r3, r4, r5, pc}
 80086b0:	20000754 	.word	0x20000754

080086b4 <siprintf>:
 80086b4:	b40e      	push	{r1, r2, r3}
 80086b6:	b500      	push	{lr}
 80086b8:	b09c      	sub	sp, #112	; 0x70
 80086ba:	ab1d      	add	r3, sp, #116	; 0x74
 80086bc:	9002      	str	r0, [sp, #8]
 80086be:	9006      	str	r0, [sp, #24]
 80086c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086c4:	4809      	ldr	r0, [pc, #36]	; (80086ec <siprintf+0x38>)
 80086c6:	9107      	str	r1, [sp, #28]
 80086c8:	9104      	str	r1, [sp, #16]
 80086ca:	4909      	ldr	r1, [pc, #36]	; (80086f0 <siprintf+0x3c>)
 80086cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80086d0:	9105      	str	r1, [sp, #20]
 80086d2:	6800      	ldr	r0, [r0, #0]
 80086d4:	9301      	str	r3, [sp, #4]
 80086d6:	a902      	add	r1, sp, #8
 80086d8:	f000 f892 	bl	8008800 <_svfiprintf_r>
 80086dc:	9b02      	ldr	r3, [sp, #8]
 80086de:	2200      	movs	r2, #0
 80086e0:	701a      	strb	r2, [r3, #0]
 80086e2:	b01c      	add	sp, #112	; 0x70
 80086e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80086e8:	b003      	add	sp, #12
 80086ea:	4770      	bx	lr
 80086ec:	2000009c 	.word	0x2000009c
 80086f0:	ffff0208 	.word	0xffff0208

080086f4 <strdup>:
 80086f4:	4b02      	ldr	r3, [pc, #8]	; (8008700 <strdup+0xc>)
 80086f6:	4601      	mov	r1, r0
 80086f8:	6818      	ldr	r0, [r3, #0]
 80086fa:	f000 b803 	b.w	8008704 <_strdup_r>
 80086fe:	bf00      	nop
 8008700:	2000009c 	.word	0x2000009c

08008704 <_strdup_r>:
 8008704:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008706:	4604      	mov	r4, r0
 8008708:	4608      	mov	r0, r1
 800870a:	460d      	mov	r5, r1
 800870c:	f7f7 fd6a 	bl	80001e4 <strlen>
 8008710:	1c42      	adds	r2, r0, #1
 8008712:	4611      	mov	r1, r2
 8008714:	4620      	mov	r0, r4
 8008716:	9201      	str	r2, [sp, #4]
 8008718:	f7ff ff48 	bl	80085ac <_malloc_r>
 800871c:	4604      	mov	r4, r0
 800871e:	b118      	cbz	r0, 8008728 <_strdup_r+0x24>
 8008720:	9a01      	ldr	r2, [sp, #4]
 8008722:	4629      	mov	r1, r5
 8008724:	f7ff fec0 	bl	80084a8 <memcpy>
 8008728:	4620      	mov	r0, r4
 800872a:	b003      	add	sp, #12
 800872c:	bd30      	pop	{r4, r5, pc}
	...

08008730 <__malloc_lock>:
 8008730:	4801      	ldr	r0, [pc, #4]	; (8008738 <__malloc_lock+0x8>)
 8008732:	f000 baf9 	b.w	8008d28 <__retarget_lock_acquire_recursive>
 8008736:	bf00      	nop
 8008738:	20000758 	.word	0x20000758

0800873c <__malloc_unlock>:
 800873c:	4801      	ldr	r0, [pc, #4]	; (8008744 <__malloc_unlock+0x8>)
 800873e:	f000 baf4 	b.w	8008d2a <__retarget_lock_release_recursive>
 8008742:	bf00      	nop
 8008744:	20000758 	.word	0x20000758

08008748 <__ssputs_r>:
 8008748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800874c:	688e      	ldr	r6, [r1, #8]
 800874e:	429e      	cmp	r6, r3
 8008750:	4682      	mov	sl, r0
 8008752:	460c      	mov	r4, r1
 8008754:	4690      	mov	r8, r2
 8008756:	461f      	mov	r7, r3
 8008758:	d838      	bhi.n	80087cc <__ssputs_r+0x84>
 800875a:	898a      	ldrh	r2, [r1, #12]
 800875c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008760:	d032      	beq.n	80087c8 <__ssputs_r+0x80>
 8008762:	6825      	ldr	r5, [r4, #0]
 8008764:	6909      	ldr	r1, [r1, #16]
 8008766:	eba5 0901 	sub.w	r9, r5, r1
 800876a:	6965      	ldr	r5, [r4, #20]
 800876c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008770:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008774:	3301      	adds	r3, #1
 8008776:	444b      	add	r3, r9
 8008778:	106d      	asrs	r5, r5, #1
 800877a:	429d      	cmp	r5, r3
 800877c:	bf38      	it	cc
 800877e:	461d      	movcc	r5, r3
 8008780:	0553      	lsls	r3, r2, #21
 8008782:	d531      	bpl.n	80087e8 <__ssputs_r+0xa0>
 8008784:	4629      	mov	r1, r5
 8008786:	f7ff ff11 	bl	80085ac <_malloc_r>
 800878a:	4606      	mov	r6, r0
 800878c:	b950      	cbnz	r0, 80087a4 <__ssputs_r+0x5c>
 800878e:	230c      	movs	r3, #12
 8008790:	f8ca 3000 	str.w	r3, [sl]
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800879a:	81a3      	strh	r3, [r4, #12]
 800879c:	f04f 30ff 	mov.w	r0, #4294967295
 80087a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a4:	6921      	ldr	r1, [r4, #16]
 80087a6:	464a      	mov	r2, r9
 80087a8:	f7ff fe7e 	bl	80084a8 <memcpy>
 80087ac:	89a3      	ldrh	r3, [r4, #12]
 80087ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087b6:	81a3      	strh	r3, [r4, #12]
 80087b8:	6126      	str	r6, [r4, #16]
 80087ba:	6165      	str	r5, [r4, #20]
 80087bc:	444e      	add	r6, r9
 80087be:	eba5 0509 	sub.w	r5, r5, r9
 80087c2:	6026      	str	r6, [r4, #0]
 80087c4:	60a5      	str	r5, [r4, #8]
 80087c6:	463e      	mov	r6, r7
 80087c8:	42be      	cmp	r6, r7
 80087ca:	d900      	bls.n	80087ce <__ssputs_r+0x86>
 80087cc:	463e      	mov	r6, r7
 80087ce:	6820      	ldr	r0, [r4, #0]
 80087d0:	4632      	mov	r2, r6
 80087d2:	4641      	mov	r1, r8
 80087d4:	f000 faaa 	bl	8008d2c <memmove>
 80087d8:	68a3      	ldr	r3, [r4, #8]
 80087da:	1b9b      	subs	r3, r3, r6
 80087dc:	60a3      	str	r3, [r4, #8]
 80087de:	6823      	ldr	r3, [r4, #0]
 80087e0:	4433      	add	r3, r6
 80087e2:	6023      	str	r3, [r4, #0]
 80087e4:	2000      	movs	r0, #0
 80087e6:	e7db      	b.n	80087a0 <__ssputs_r+0x58>
 80087e8:	462a      	mov	r2, r5
 80087ea:	f000 fab9 	bl	8008d60 <_realloc_r>
 80087ee:	4606      	mov	r6, r0
 80087f0:	2800      	cmp	r0, #0
 80087f2:	d1e1      	bne.n	80087b8 <__ssputs_r+0x70>
 80087f4:	6921      	ldr	r1, [r4, #16]
 80087f6:	4650      	mov	r0, sl
 80087f8:	f7ff fe6c 	bl	80084d4 <_free_r>
 80087fc:	e7c7      	b.n	800878e <__ssputs_r+0x46>
	...

08008800 <_svfiprintf_r>:
 8008800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008804:	4698      	mov	r8, r3
 8008806:	898b      	ldrh	r3, [r1, #12]
 8008808:	061b      	lsls	r3, r3, #24
 800880a:	b09d      	sub	sp, #116	; 0x74
 800880c:	4607      	mov	r7, r0
 800880e:	460d      	mov	r5, r1
 8008810:	4614      	mov	r4, r2
 8008812:	d50e      	bpl.n	8008832 <_svfiprintf_r+0x32>
 8008814:	690b      	ldr	r3, [r1, #16]
 8008816:	b963      	cbnz	r3, 8008832 <_svfiprintf_r+0x32>
 8008818:	2140      	movs	r1, #64	; 0x40
 800881a:	f7ff fec7 	bl	80085ac <_malloc_r>
 800881e:	6028      	str	r0, [r5, #0]
 8008820:	6128      	str	r0, [r5, #16]
 8008822:	b920      	cbnz	r0, 800882e <_svfiprintf_r+0x2e>
 8008824:	230c      	movs	r3, #12
 8008826:	603b      	str	r3, [r7, #0]
 8008828:	f04f 30ff 	mov.w	r0, #4294967295
 800882c:	e0d1      	b.n	80089d2 <_svfiprintf_r+0x1d2>
 800882e:	2340      	movs	r3, #64	; 0x40
 8008830:	616b      	str	r3, [r5, #20]
 8008832:	2300      	movs	r3, #0
 8008834:	9309      	str	r3, [sp, #36]	; 0x24
 8008836:	2320      	movs	r3, #32
 8008838:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800883c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008840:	2330      	movs	r3, #48	; 0x30
 8008842:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80089ec <_svfiprintf_r+0x1ec>
 8008846:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800884a:	f04f 0901 	mov.w	r9, #1
 800884e:	4623      	mov	r3, r4
 8008850:	469a      	mov	sl, r3
 8008852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008856:	b10a      	cbz	r2, 800885c <_svfiprintf_r+0x5c>
 8008858:	2a25      	cmp	r2, #37	; 0x25
 800885a:	d1f9      	bne.n	8008850 <_svfiprintf_r+0x50>
 800885c:	ebba 0b04 	subs.w	fp, sl, r4
 8008860:	d00b      	beq.n	800887a <_svfiprintf_r+0x7a>
 8008862:	465b      	mov	r3, fp
 8008864:	4622      	mov	r2, r4
 8008866:	4629      	mov	r1, r5
 8008868:	4638      	mov	r0, r7
 800886a:	f7ff ff6d 	bl	8008748 <__ssputs_r>
 800886e:	3001      	adds	r0, #1
 8008870:	f000 80aa 	beq.w	80089c8 <_svfiprintf_r+0x1c8>
 8008874:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008876:	445a      	add	r2, fp
 8008878:	9209      	str	r2, [sp, #36]	; 0x24
 800887a:	f89a 3000 	ldrb.w	r3, [sl]
 800887e:	2b00      	cmp	r3, #0
 8008880:	f000 80a2 	beq.w	80089c8 <_svfiprintf_r+0x1c8>
 8008884:	2300      	movs	r3, #0
 8008886:	f04f 32ff 	mov.w	r2, #4294967295
 800888a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800888e:	f10a 0a01 	add.w	sl, sl, #1
 8008892:	9304      	str	r3, [sp, #16]
 8008894:	9307      	str	r3, [sp, #28]
 8008896:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800889a:	931a      	str	r3, [sp, #104]	; 0x68
 800889c:	4654      	mov	r4, sl
 800889e:	2205      	movs	r2, #5
 80088a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088a4:	4851      	ldr	r0, [pc, #324]	; (80089ec <_svfiprintf_r+0x1ec>)
 80088a6:	f7f7 fcab 	bl	8000200 <memchr>
 80088aa:	9a04      	ldr	r2, [sp, #16]
 80088ac:	b9d8      	cbnz	r0, 80088e6 <_svfiprintf_r+0xe6>
 80088ae:	06d0      	lsls	r0, r2, #27
 80088b0:	bf44      	itt	mi
 80088b2:	2320      	movmi	r3, #32
 80088b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088b8:	0711      	lsls	r1, r2, #28
 80088ba:	bf44      	itt	mi
 80088bc:	232b      	movmi	r3, #43	; 0x2b
 80088be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088c2:	f89a 3000 	ldrb.w	r3, [sl]
 80088c6:	2b2a      	cmp	r3, #42	; 0x2a
 80088c8:	d015      	beq.n	80088f6 <_svfiprintf_r+0xf6>
 80088ca:	9a07      	ldr	r2, [sp, #28]
 80088cc:	4654      	mov	r4, sl
 80088ce:	2000      	movs	r0, #0
 80088d0:	f04f 0c0a 	mov.w	ip, #10
 80088d4:	4621      	mov	r1, r4
 80088d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088da:	3b30      	subs	r3, #48	; 0x30
 80088dc:	2b09      	cmp	r3, #9
 80088de:	d94e      	bls.n	800897e <_svfiprintf_r+0x17e>
 80088e0:	b1b0      	cbz	r0, 8008910 <_svfiprintf_r+0x110>
 80088e2:	9207      	str	r2, [sp, #28]
 80088e4:	e014      	b.n	8008910 <_svfiprintf_r+0x110>
 80088e6:	eba0 0308 	sub.w	r3, r0, r8
 80088ea:	fa09 f303 	lsl.w	r3, r9, r3
 80088ee:	4313      	orrs	r3, r2
 80088f0:	9304      	str	r3, [sp, #16]
 80088f2:	46a2      	mov	sl, r4
 80088f4:	e7d2      	b.n	800889c <_svfiprintf_r+0x9c>
 80088f6:	9b03      	ldr	r3, [sp, #12]
 80088f8:	1d19      	adds	r1, r3, #4
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	9103      	str	r1, [sp, #12]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	bfbb      	ittet	lt
 8008902:	425b      	neglt	r3, r3
 8008904:	f042 0202 	orrlt.w	r2, r2, #2
 8008908:	9307      	strge	r3, [sp, #28]
 800890a:	9307      	strlt	r3, [sp, #28]
 800890c:	bfb8      	it	lt
 800890e:	9204      	strlt	r2, [sp, #16]
 8008910:	7823      	ldrb	r3, [r4, #0]
 8008912:	2b2e      	cmp	r3, #46	; 0x2e
 8008914:	d10c      	bne.n	8008930 <_svfiprintf_r+0x130>
 8008916:	7863      	ldrb	r3, [r4, #1]
 8008918:	2b2a      	cmp	r3, #42	; 0x2a
 800891a:	d135      	bne.n	8008988 <_svfiprintf_r+0x188>
 800891c:	9b03      	ldr	r3, [sp, #12]
 800891e:	1d1a      	adds	r2, r3, #4
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	9203      	str	r2, [sp, #12]
 8008924:	2b00      	cmp	r3, #0
 8008926:	bfb8      	it	lt
 8008928:	f04f 33ff 	movlt.w	r3, #4294967295
 800892c:	3402      	adds	r4, #2
 800892e:	9305      	str	r3, [sp, #20]
 8008930:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80089fc <_svfiprintf_r+0x1fc>
 8008934:	7821      	ldrb	r1, [r4, #0]
 8008936:	2203      	movs	r2, #3
 8008938:	4650      	mov	r0, sl
 800893a:	f7f7 fc61 	bl	8000200 <memchr>
 800893e:	b140      	cbz	r0, 8008952 <_svfiprintf_r+0x152>
 8008940:	2340      	movs	r3, #64	; 0x40
 8008942:	eba0 000a 	sub.w	r0, r0, sl
 8008946:	fa03 f000 	lsl.w	r0, r3, r0
 800894a:	9b04      	ldr	r3, [sp, #16]
 800894c:	4303      	orrs	r3, r0
 800894e:	3401      	adds	r4, #1
 8008950:	9304      	str	r3, [sp, #16]
 8008952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008956:	4826      	ldr	r0, [pc, #152]	; (80089f0 <_svfiprintf_r+0x1f0>)
 8008958:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800895c:	2206      	movs	r2, #6
 800895e:	f7f7 fc4f 	bl	8000200 <memchr>
 8008962:	2800      	cmp	r0, #0
 8008964:	d038      	beq.n	80089d8 <_svfiprintf_r+0x1d8>
 8008966:	4b23      	ldr	r3, [pc, #140]	; (80089f4 <_svfiprintf_r+0x1f4>)
 8008968:	bb1b      	cbnz	r3, 80089b2 <_svfiprintf_r+0x1b2>
 800896a:	9b03      	ldr	r3, [sp, #12]
 800896c:	3307      	adds	r3, #7
 800896e:	f023 0307 	bic.w	r3, r3, #7
 8008972:	3308      	adds	r3, #8
 8008974:	9303      	str	r3, [sp, #12]
 8008976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008978:	4433      	add	r3, r6
 800897a:	9309      	str	r3, [sp, #36]	; 0x24
 800897c:	e767      	b.n	800884e <_svfiprintf_r+0x4e>
 800897e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008982:	460c      	mov	r4, r1
 8008984:	2001      	movs	r0, #1
 8008986:	e7a5      	b.n	80088d4 <_svfiprintf_r+0xd4>
 8008988:	2300      	movs	r3, #0
 800898a:	3401      	adds	r4, #1
 800898c:	9305      	str	r3, [sp, #20]
 800898e:	4619      	mov	r1, r3
 8008990:	f04f 0c0a 	mov.w	ip, #10
 8008994:	4620      	mov	r0, r4
 8008996:	f810 2b01 	ldrb.w	r2, [r0], #1
 800899a:	3a30      	subs	r2, #48	; 0x30
 800899c:	2a09      	cmp	r2, #9
 800899e:	d903      	bls.n	80089a8 <_svfiprintf_r+0x1a8>
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d0c5      	beq.n	8008930 <_svfiprintf_r+0x130>
 80089a4:	9105      	str	r1, [sp, #20]
 80089a6:	e7c3      	b.n	8008930 <_svfiprintf_r+0x130>
 80089a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80089ac:	4604      	mov	r4, r0
 80089ae:	2301      	movs	r3, #1
 80089b0:	e7f0      	b.n	8008994 <_svfiprintf_r+0x194>
 80089b2:	ab03      	add	r3, sp, #12
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	462a      	mov	r2, r5
 80089b8:	4b0f      	ldr	r3, [pc, #60]	; (80089f8 <_svfiprintf_r+0x1f8>)
 80089ba:	a904      	add	r1, sp, #16
 80089bc:	4638      	mov	r0, r7
 80089be:	f3af 8000 	nop.w
 80089c2:	1c42      	adds	r2, r0, #1
 80089c4:	4606      	mov	r6, r0
 80089c6:	d1d6      	bne.n	8008976 <_svfiprintf_r+0x176>
 80089c8:	89ab      	ldrh	r3, [r5, #12]
 80089ca:	065b      	lsls	r3, r3, #25
 80089cc:	f53f af2c 	bmi.w	8008828 <_svfiprintf_r+0x28>
 80089d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089d2:	b01d      	add	sp, #116	; 0x74
 80089d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d8:	ab03      	add	r3, sp, #12
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	462a      	mov	r2, r5
 80089de:	4b06      	ldr	r3, [pc, #24]	; (80089f8 <_svfiprintf_r+0x1f8>)
 80089e0:	a904      	add	r1, sp, #16
 80089e2:	4638      	mov	r0, r7
 80089e4:	f000 f87a 	bl	8008adc <_printf_i>
 80089e8:	e7eb      	b.n	80089c2 <_svfiprintf_r+0x1c2>
 80089ea:	bf00      	nop
 80089ec:	0800b338 	.word	0x0800b338
 80089f0:	0800b342 	.word	0x0800b342
 80089f4:	00000000 	.word	0x00000000
 80089f8:	08008749 	.word	0x08008749
 80089fc:	0800b33e 	.word	0x0800b33e

08008a00 <_printf_common>:
 8008a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a04:	4616      	mov	r6, r2
 8008a06:	4699      	mov	r9, r3
 8008a08:	688a      	ldr	r2, [r1, #8]
 8008a0a:	690b      	ldr	r3, [r1, #16]
 8008a0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a10:	4293      	cmp	r3, r2
 8008a12:	bfb8      	it	lt
 8008a14:	4613      	movlt	r3, r2
 8008a16:	6033      	str	r3, [r6, #0]
 8008a18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a1c:	4607      	mov	r7, r0
 8008a1e:	460c      	mov	r4, r1
 8008a20:	b10a      	cbz	r2, 8008a26 <_printf_common+0x26>
 8008a22:	3301      	adds	r3, #1
 8008a24:	6033      	str	r3, [r6, #0]
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	0699      	lsls	r1, r3, #26
 8008a2a:	bf42      	ittt	mi
 8008a2c:	6833      	ldrmi	r3, [r6, #0]
 8008a2e:	3302      	addmi	r3, #2
 8008a30:	6033      	strmi	r3, [r6, #0]
 8008a32:	6825      	ldr	r5, [r4, #0]
 8008a34:	f015 0506 	ands.w	r5, r5, #6
 8008a38:	d106      	bne.n	8008a48 <_printf_common+0x48>
 8008a3a:	f104 0a19 	add.w	sl, r4, #25
 8008a3e:	68e3      	ldr	r3, [r4, #12]
 8008a40:	6832      	ldr	r2, [r6, #0]
 8008a42:	1a9b      	subs	r3, r3, r2
 8008a44:	42ab      	cmp	r3, r5
 8008a46:	dc26      	bgt.n	8008a96 <_printf_common+0x96>
 8008a48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a4c:	1e13      	subs	r3, r2, #0
 8008a4e:	6822      	ldr	r2, [r4, #0]
 8008a50:	bf18      	it	ne
 8008a52:	2301      	movne	r3, #1
 8008a54:	0692      	lsls	r2, r2, #26
 8008a56:	d42b      	bmi.n	8008ab0 <_printf_common+0xb0>
 8008a58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a5c:	4649      	mov	r1, r9
 8008a5e:	4638      	mov	r0, r7
 8008a60:	47c0      	blx	r8
 8008a62:	3001      	adds	r0, #1
 8008a64:	d01e      	beq.n	8008aa4 <_printf_common+0xa4>
 8008a66:	6823      	ldr	r3, [r4, #0]
 8008a68:	68e5      	ldr	r5, [r4, #12]
 8008a6a:	6832      	ldr	r2, [r6, #0]
 8008a6c:	f003 0306 	and.w	r3, r3, #6
 8008a70:	2b04      	cmp	r3, #4
 8008a72:	bf08      	it	eq
 8008a74:	1aad      	subeq	r5, r5, r2
 8008a76:	68a3      	ldr	r3, [r4, #8]
 8008a78:	6922      	ldr	r2, [r4, #16]
 8008a7a:	bf0c      	ite	eq
 8008a7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a80:	2500      	movne	r5, #0
 8008a82:	4293      	cmp	r3, r2
 8008a84:	bfc4      	itt	gt
 8008a86:	1a9b      	subgt	r3, r3, r2
 8008a88:	18ed      	addgt	r5, r5, r3
 8008a8a:	2600      	movs	r6, #0
 8008a8c:	341a      	adds	r4, #26
 8008a8e:	42b5      	cmp	r5, r6
 8008a90:	d11a      	bne.n	8008ac8 <_printf_common+0xc8>
 8008a92:	2000      	movs	r0, #0
 8008a94:	e008      	b.n	8008aa8 <_printf_common+0xa8>
 8008a96:	2301      	movs	r3, #1
 8008a98:	4652      	mov	r2, sl
 8008a9a:	4649      	mov	r1, r9
 8008a9c:	4638      	mov	r0, r7
 8008a9e:	47c0      	blx	r8
 8008aa0:	3001      	adds	r0, #1
 8008aa2:	d103      	bne.n	8008aac <_printf_common+0xac>
 8008aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aac:	3501      	adds	r5, #1
 8008aae:	e7c6      	b.n	8008a3e <_printf_common+0x3e>
 8008ab0:	18e1      	adds	r1, r4, r3
 8008ab2:	1c5a      	adds	r2, r3, #1
 8008ab4:	2030      	movs	r0, #48	; 0x30
 8008ab6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008aba:	4422      	add	r2, r4
 8008abc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ac0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ac4:	3302      	adds	r3, #2
 8008ac6:	e7c7      	b.n	8008a58 <_printf_common+0x58>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	4622      	mov	r2, r4
 8008acc:	4649      	mov	r1, r9
 8008ace:	4638      	mov	r0, r7
 8008ad0:	47c0      	blx	r8
 8008ad2:	3001      	adds	r0, #1
 8008ad4:	d0e6      	beq.n	8008aa4 <_printf_common+0xa4>
 8008ad6:	3601      	adds	r6, #1
 8008ad8:	e7d9      	b.n	8008a8e <_printf_common+0x8e>
	...

08008adc <_printf_i>:
 8008adc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae0:	7e0f      	ldrb	r7, [r1, #24]
 8008ae2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ae4:	2f78      	cmp	r7, #120	; 0x78
 8008ae6:	4691      	mov	r9, r2
 8008ae8:	4680      	mov	r8, r0
 8008aea:	460c      	mov	r4, r1
 8008aec:	469a      	mov	sl, r3
 8008aee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008af2:	d807      	bhi.n	8008b04 <_printf_i+0x28>
 8008af4:	2f62      	cmp	r7, #98	; 0x62
 8008af6:	d80a      	bhi.n	8008b0e <_printf_i+0x32>
 8008af8:	2f00      	cmp	r7, #0
 8008afa:	f000 80d8 	beq.w	8008cae <_printf_i+0x1d2>
 8008afe:	2f58      	cmp	r7, #88	; 0x58
 8008b00:	f000 80a3 	beq.w	8008c4a <_printf_i+0x16e>
 8008b04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b0c:	e03a      	b.n	8008b84 <_printf_i+0xa8>
 8008b0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b12:	2b15      	cmp	r3, #21
 8008b14:	d8f6      	bhi.n	8008b04 <_printf_i+0x28>
 8008b16:	a101      	add	r1, pc, #4	; (adr r1, 8008b1c <_printf_i+0x40>)
 8008b18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b1c:	08008b75 	.word	0x08008b75
 8008b20:	08008b89 	.word	0x08008b89
 8008b24:	08008b05 	.word	0x08008b05
 8008b28:	08008b05 	.word	0x08008b05
 8008b2c:	08008b05 	.word	0x08008b05
 8008b30:	08008b05 	.word	0x08008b05
 8008b34:	08008b89 	.word	0x08008b89
 8008b38:	08008b05 	.word	0x08008b05
 8008b3c:	08008b05 	.word	0x08008b05
 8008b40:	08008b05 	.word	0x08008b05
 8008b44:	08008b05 	.word	0x08008b05
 8008b48:	08008c95 	.word	0x08008c95
 8008b4c:	08008bb9 	.word	0x08008bb9
 8008b50:	08008c77 	.word	0x08008c77
 8008b54:	08008b05 	.word	0x08008b05
 8008b58:	08008b05 	.word	0x08008b05
 8008b5c:	08008cb7 	.word	0x08008cb7
 8008b60:	08008b05 	.word	0x08008b05
 8008b64:	08008bb9 	.word	0x08008bb9
 8008b68:	08008b05 	.word	0x08008b05
 8008b6c:	08008b05 	.word	0x08008b05
 8008b70:	08008c7f 	.word	0x08008c7f
 8008b74:	682b      	ldr	r3, [r5, #0]
 8008b76:	1d1a      	adds	r2, r3, #4
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	602a      	str	r2, [r5, #0]
 8008b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b84:	2301      	movs	r3, #1
 8008b86:	e0a3      	b.n	8008cd0 <_printf_i+0x1f4>
 8008b88:	6820      	ldr	r0, [r4, #0]
 8008b8a:	6829      	ldr	r1, [r5, #0]
 8008b8c:	0606      	lsls	r6, r0, #24
 8008b8e:	f101 0304 	add.w	r3, r1, #4
 8008b92:	d50a      	bpl.n	8008baa <_printf_i+0xce>
 8008b94:	680e      	ldr	r6, [r1, #0]
 8008b96:	602b      	str	r3, [r5, #0]
 8008b98:	2e00      	cmp	r6, #0
 8008b9a:	da03      	bge.n	8008ba4 <_printf_i+0xc8>
 8008b9c:	232d      	movs	r3, #45	; 0x2d
 8008b9e:	4276      	negs	r6, r6
 8008ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ba4:	485e      	ldr	r0, [pc, #376]	; (8008d20 <_printf_i+0x244>)
 8008ba6:	230a      	movs	r3, #10
 8008ba8:	e019      	b.n	8008bde <_printf_i+0x102>
 8008baa:	680e      	ldr	r6, [r1, #0]
 8008bac:	602b      	str	r3, [r5, #0]
 8008bae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008bb2:	bf18      	it	ne
 8008bb4:	b236      	sxthne	r6, r6
 8008bb6:	e7ef      	b.n	8008b98 <_printf_i+0xbc>
 8008bb8:	682b      	ldr	r3, [r5, #0]
 8008bba:	6820      	ldr	r0, [r4, #0]
 8008bbc:	1d19      	adds	r1, r3, #4
 8008bbe:	6029      	str	r1, [r5, #0]
 8008bc0:	0601      	lsls	r1, r0, #24
 8008bc2:	d501      	bpl.n	8008bc8 <_printf_i+0xec>
 8008bc4:	681e      	ldr	r6, [r3, #0]
 8008bc6:	e002      	b.n	8008bce <_printf_i+0xf2>
 8008bc8:	0646      	lsls	r6, r0, #25
 8008bca:	d5fb      	bpl.n	8008bc4 <_printf_i+0xe8>
 8008bcc:	881e      	ldrh	r6, [r3, #0]
 8008bce:	4854      	ldr	r0, [pc, #336]	; (8008d20 <_printf_i+0x244>)
 8008bd0:	2f6f      	cmp	r7, #111	; 0x6f
 8008bd2:	bf0c      	ite	eq
 8008bd4:	2308      	moveq	r3, #8
 8008bd6:	230a      	movne	r3, #10
 8008bd8:	2100      	movs	r1, #0
 8008bda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bde:	6865      	ldr	r5, [r4, #4]
 8008be0:	60a5      	str	r5, [r4, #8]
 8008be2:	2d00      	cmp	r5, #0
 8008be4:	bfa2      	ittt	ge
 8008be6:	6821      	ldrge	r1, [r4, #0]
 8008be8:	f021 0104 	bicge.w	r1, r1, #4
 8008bec:	6021      	strge	r1, [r4, #0]
 8008bee:	b90e      	cbnz	r6, 8008bf4 <_printf_i+0x118>
 8008bf0:	2d00      	cmp	r5, #0
 8008bf2:	d04d      	beq.n	8008c90 <_printf_i+0x1b4>
 8008bf4:	4615      	mov	r5, r2
 8008bf6:	fbb6 f1f3 	udiv	r1, r6, r3
 8008bfa:	fb03 6711 	mls	r7, r3, r1, r6
 8008bfe:	5dc7      	ldrb	r7, [r0, r7]
 8008c00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c04:	4637      	mov	r7, r6
 8008c06:	42bb      	cmp	r3, r7
 8008c08:	460e      	mov	r6, r1
 8008c0a:	d9f4      	bls.n	8008bf6 <_printf_i+0x11a>
 8008c0c:	2b08      	cmp	r3, #8
 8008c0e:	d10b      	bne.n	8008c28 <_printf_i+0x14c>
 8008c10:	6823      	ldr	r3, [r4, #0]
 8008c12:	07de      	lsls	r6, r3, #31
 8008c14:	d508      	bpl.n	8008c28 <_printf_i+0x14c>
 8008c16:	6923      	ldr	r3, [r4, #16]
 8008c18:	6861      	ldr	r1, [r4, #4]
 8008c1a:	4299      	cmp	r1, r3
 8008c1c:	bfde      	ittt	le
 8008c1e:	2330      	movle	r3, #48	; 0x30
 8008c20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c28:	1b52      	subs	r2, r2, r5
 8008c2a:	6122      	str	r2, [r4, #16]
 8008c2c:	f8cd a000 	str.w	sl, [sp]
 8008c30:	464b      	mov	r3, r9
 8008c32:	aa03      	add	r2, sp, #12
 8008c34:	4621      	mov	r1, r4
 8008c36:	4640      	mov	r0, r8
 8008c38:	f7ff fee2 	bl	8008a00 <_printf_common>
 8008c3c:	3001      	adds	r0, #1
 8008c3e:	d14c      	bne.n	8008cda <_printf_i+0x1fe>
 8008c40:	f04f 30ff 	mov.w	r0, #4294967295
 8008c44:	b004      	add	sp, #16
 8008c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c4a:	4835      	ldr	r0, [pc, #212]	; (8008d20 <_printf_i+0x244>)
 8008c4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008c50:	6829      	ldr	r1, [r5, #0]
 8008c52:	6823      	ldr	r3, [r4, #0]
 8008c54:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c58:	6029      	str	r1, [r5, #0]
 8008c5a:	061d      	lsls	r5, r3, #24
 8008c5c:	d514      	bpl.n	8008c88 <_printf_i+0x1ac>
 8008c5e:	07df      	lsls	r7, r3, #31
 8008c60:	bf44      	itt	mi
 8008c62:	f043 0320 	orrmi.w	r3, r3, #32
 8008c66:	6023      	strmi	r3, [r4, #0]
 8008c68:	b91e      	cbnz	r6, 8008c72 <_printf_i+0x196>
 8008c6a:	6823      	ldr	r3, [r4, #0]
 8008c6c:	f023 0320 	bic.w	r3, r3, #32
 8008c70:	6023      	str	r3, [r4, #0]
 8008c72:	2310      	movs	r3, #16
 8008c74:	e7b0      	b.n	8008bd8 <_printf_i+0xfc>
 8008c76:	6823      	ldr	r3, [r4, #0]
 8008c78:	f043 0320 	orr.w	r3, r3, #32
 8008c7c:	6023      	str	r3, [r4, #0]
 8008c7e:	2378      	movs	r3, #120	; 0x78
 8008c80:	4828      	ldr	r0, [pc, #160]	; (8008d24 <_printf_i+0x248>)
 8008c82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c86:	e7e3      	b.n	8008c50 <_printf_i+0x174>
 8008c88:	0659      	lsls	r1, r3, #25
 8008c8a:	bf48      	it	mi
 8008c8c:	b2b6      	uxthmi	r6, r6
 8008c8e:	e7e6      	b.n	8008c5e <_printf_i+0x182>
 8008c90:	4615      	mov	r5, r2
 8008c92:	e7bb      	b.n	8008c0c <_printf_i+0x130>
 8008c94:	682b      	ldr	r3, [r5, #0]
 8008c96:	6826      	ldr	r6, [r4, #0]
 8008c98:	6961      	ldr	r1, [r4, #20]
 8008c9a:	1d18      	adds	r0, r3, #4
 8008c9c:	6028      	str	r0, [r5, #0]
 8008c9e:	0635      	lsls	r5, r6, #24
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	d501      	bpl.n	8008ca8 <_printf_i+0x1cc>
 8008ca4:	6019      	str	r1, [r3, #0]
 8008ca6:	e002      	b.n	8008cae <_printf_i+0x1d2>
 8008ca8:	0670      	lsls	r0, r6, #25
 8008caa:	d5fb      	bpl.n	8008ca4 <_printf_i+0x1c8>
 8008cac:	8019      	strh	r1, [r3, #0]
 8008cae:	2300      	movs	r3, #0
 8008cb0:	6123      	str	r3, [r4, #16]
 8008cb2:	4615      	mov	r5, r2
 8008cb4:	e7ba      	b.n	8008c2c <_printf_i+0x150>
 8008cb6:	682b      	ldr	r3, [r5, #0]
 8008cb8:	1d1a      	adds	r2, r3, #4
 8008cba:	602a      	str	r2, [r5, #0]
 8008cbc:	681d      	ldr	r5, [r3, #0]
 8008cbe:	6862      	ldr	r2, [r4, #4]
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	f7f7 fa9c 	bl	8000200 <memchr>
 8008cc8:	b108      	cbz	r0, 8008cce <_printf_i+0x1f2>
 8008cca:	1b40      	subs	r0, r0, r5
 8008ccc:	6060      	str	r0, [r4, #4]
 8008cce:	6863      	ldr	r3, [r4, #4]
 8008cd0:	6123      	str	r3, [r4, #16]
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cd8:	e7a8      	b.n	8008c2c <_printf_i+0x150>
 8008cda:	6923      	ldr	r3, [r4, #16]
 8008cdc:	462a      	mov	r2, r5
 8008cde:	4649      	mov	r1, r9
 8008ce0:	4640      	mov	r0, r8
 8008ce2:	47d0      	blx	sl
 8008ce4:	3001      	adds	r0, #1
 8008ce6:	d0ab      	beq.n	8008c40 <_printf_i+0x164>
 8008ce8:	6823      	ldr	r3, [r4, #0]
 8008cea:	079b      	lsls	r3, r3, #30
 8008cec:	d413      	bmi.n	8008d16 <_printf_i+0x23a>
 8008cee:	68e0      	ldr	r0, [r4, #12]
 8008cf0:	9b03      	ldr	r3, [sp, #12]
 8008cf2:	4298      	cmp	r0, r3
 8008cf4:	bfb8      	it	lt
 8008cf6:	4618      	movlt	r0, r3
 8008cf8:	e7a4      	b.n	8008c44 <_printf_i+0x168>
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	4632      	mov	r2, r6
 8008cfe:	4649      	mov	r1, r9
 8008d00:	4640      	mov	r0, r8
 8008d02:	47d0      	blx	sl
 8008d04:	3001      	adds	r0, #1
 8008d06:	d09b      	beq.n	8008c40 <_printf_i+0x164>
 8008d08:	3501      	adds	r5, #1
 8008d0a:	68e3      	ldr	r3, [r4, #12]
 8008d0c:	9903      	ldr	r1, [sp, #12]
 8008d0e:	1a5b      	subs	r3, r3, r1
 8008d10:	42ab      	cmp	r3, r5
 8008d12:	dcf2      	bgt.n	8008cfa <_printf_i+0x21e>
 8008d14:	e7eb      	b.n	8008cee <_printf_i+0x212>
 8008d16:	2500      	movs	r5, #0
 8008d18:	f104 0619 	add.w	r6, r4, #25
 8008d1c:	e7f5      	b.n	8008d0a <_printf_i+0x22e>
 8008d1e:	bf00      	nop
 8008d20:	0800b349 	.word	0x0800b349
 8008d24:	0800b35a 	.word	0x0800b35a

08008d28 <__retarget_lock_acquire_recursive>:
 8008d28:	4770      	bx	lr

08008d2a <__retarget_lock_release_recursive>:
 8008d2a:	4770      	bx	lr

08008d2c <memmove>:
 8008d2c:	4288      	cmp	r0, r1
 8008d2e:	b510      	push	{r4, lr}
 8008d30:	eb01 0402 	add.w	r4, r1, r2
 8008d34:	d902      	bls.n	8008d3c <memmove+0x10>
 8008d36:	4284      	cmp	r4, r0
 8008d38:	4623      	mov	r3, r4
 8008d3a:	d807      	bhi.n	8008d4c <memmove+0x20>
 8008d3c:	1e43      	subs	r3, r0, #1
 8008d3e:	42a1      	cmp	r1, r4
 8008d40:	d008      	beq.n	8008d54 <memmove+0x28>
 8008d42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d4a:	e7f8      	b.n	8008d3e <memmove+0x12>
 8008d4c:	4402      	add	r2, r0
 8008d4e:	4601      	mov	r1, r0
 8008d50:	428a      	cmp	r2, r1
 8008d52:	d100      	bne.n	8008d56 <memmove+0x2a>
 8008d54:	bd10      	pop	{r4, pc}
 8008d56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d5e:	e7f7      	b.n	8008d50 <memmove+0x24>

08008d60 <_realloc_r>:
 8008d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d64:	4680      	mov	r8, r0
 8008d66:	4614      	mov	r4, r2
 8008d68:	460e      	mov	r6, r1
 8008d6a:	b921      	cbnz	r1, 8008d76 <_realloc_r+0x16>
 8008d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d70:	4611      	mov	r1, r2
 8008d72:	f7ff bc1b 	b.w	80085ac <_malloc_r>
 8008d76:	b92a      	cbnz	r2, 8008d84 <_realloc_r+0x24>
 8008d78:	f7ff fbac 	bl	80084d4 <_free_r>
 8008d7c:	4625      	mov	r5, r4
 8008d7e:	4628      	mov	r0, r5
 8008d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d84:	f000 f81b 	bl	8008dbe <_malloc_usable_size_r>
 8008d88:	4284      	cmp	r4, r0
 8008d8a:	4607      	mov	r7, r0
 8008d8c:	d802      	bhi.n	8008d94 <_realloc_r+0x34>
 8008d8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d92:	d812      	bhi.n	8008dba <_realloc_r+0x5a>
 8008d94:	4621      	mov	r1, r4
 8008d96:	4640      	mov	r0, r8
 8008d98:	f7ff fc08 	bl	80085ac <_malloc_r>
 8008d9c:	4605      	mov	r5, r0
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	d0ed      	beq.n	8008d7e <_realloc_r+0x1e>
 8008da2:	42bc      	cmp	r4, r7
 8008da4:	4622      	mov	r2, r4
 8008da6:	4631      	mov	r1, r6
 8008da8:	bf28      	it	cs
 8008daa:	463a      	movcs	r2, r7
 8008dac:	f7ff fb7c 	bl	80084a8 <memcpy>
 8008db0:	4631      	mov	r1, r6
 8008db2:	4640      	mov	r0, r8
 8008db4:	f7ff fb8e 	bl	80084d4 <_free_r>
 8008db8:	e7e1      	b.n	8008d7e <_realloc_r+0x1e>
 8008dba:	4635      	mov	r5, r6
 8008dbc:	e7df      	b.n	8008d7e <_realloc_r+0x1e>

08008dbe <_malloc_usable_size_r>:
 8008dbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dc2:	1f18      	subs	r0, r3, #4
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	bfbc      	itt	lt
 8008dc8:	580b      	ldrlt	r3, [r1, r0]
 8008dca:	18c0      	addlt	r0, r0, r3
 8008dcc:	4770      	bx	lr
	...

08008dd0 <_init>:
 8008dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd2:	bf00      	nop
 8008dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dd6:	bc08      	pop	{r3}
 8008dd8:	469e      	mov	lr, r3
 8008dda:	4770      	bx	lr

08008ddc <_fini>:
 8008ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dde:	bf00      	nop
 8008de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008de2:	bc08      	pop	{r3}
 8008de4:	469e      	mov	lr, r3
 8008de6:	4770      	bx	lr
