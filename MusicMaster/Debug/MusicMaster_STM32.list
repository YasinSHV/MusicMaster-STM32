
MusicMaster_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008340  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000358c  080084c8  080084c8  000184c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba54  0800ba54  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800ba54  0800ba54  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ba54  0800ba54  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba54  0800ba54  0001ba54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba58  0800ba58  0001ba58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800ba5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00000724  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000820  20000820  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cb17  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000340d  00000000  00000000  0003cc43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001748  00000000  00000000  00040050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001668  00000000  00000000  00041798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020dc0  00000000  00000000  00042e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d79e  00000000  00000000  00063bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c769e  00000000  00000000  0008135e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001489fc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000066b4  00000000  00000000  00148a4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080084b0 	.word	0x080084b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	080084b0 	.word	0x080084b0

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <hashString>:
    struct DictionaryNode **buckets;
    int size;
};

// Hash function for string keys
unsigned int hashString(const char *key, int size) {
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	6039      	str	r1, [r7, #0]
    unsigned int hash = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	60fb      	str	r3, [r7, #12]
    while (*key) {
 80001fa:	e007      	b.n	800020c <hashString+0x20>
        hash = (hash << 5) + *key++;
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	015a      	lsls	r2, r3, #5
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	1c59      	adds	r1, r3, #1
 8000204:	6079      	str	r1, [r7, #4]
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	4413      	add	r3, r2
 800020a:	60fb      	str	r3, [r7, #12]
    while (*key) {
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d1f3      	bne.n	80001fc <hashString+0x10>
    }
    return hash % size;
 8000214:	683a      	ldr	r2, [r7, #0]
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	fbb3 f1f2 	udiv	r1, r3, r2
 800021c:	fb01 f202 	mul.w	r2, r1, r2
 8000220:	1a9b      	subs	r3, r3, r2
}
 8000222:	4618      	mov	r0, r3
 8000224:	3714      	adds	r7, #20
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr

0800022e <initDictionary>:

// Hash function for numeric keys

// Initialize dictionary
Dictionary *initDictionary(int size) {
 800022e:	b580      	push	{r7, lr}
 8000230:	b084      	sub	sp, #16
 8000232:	af00      	add	r7, sp, #0
 8000234:	6078      	str	r0, [r7, #4]
    Dictionary *dict = malloc(sizeof(Dictionary));
 8000236:	2008      	movs	r0, #8
 8000238:	f008 f84c 	bl	80082d4 <malloc>
 800023c:	4603      	mov	r3, r0
 800023e:	60bb      	str	r3, [r7, #8]
    dict->buckets = malloc(size * sizeof(struct DictionaryNode *));
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	4618      	mov	r0, r3
 8000246:	f008 f845 	bl	80082d4 <malloc>
 800024a:	4603      	mov	r3, r0
 800024c:	461a      	mov	r2, r3
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	601a      	str	r2, [r3, #0]
    dict->size = size;
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < size; i++) {
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]
 800025c:	e009      	b.n	8000272 <initDictionary+0x44>
        dict->buckets[i] = NULL;
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	009b      	lsls	r3, r3, #2
 8000266:	4413      	add	r3, r2
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	3301      	adds	r3, #1
 8000270:	60fb      	str	r3, [r7, #12]
 8000272:	68fa      	ldr	r2, [r7, #12]
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	429a      	cmp	r2, r3
 8000278:	dbf1      	blt.n	800025e <initDictionary+0x30>
    }
    return dict;
 800027a:	68bb      	ldr	r3, [r7, #8]
}
 800027c:	4618      	mov	r0, r3
 800027e:	3710      	adds	r7, #16
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}

08000284 <insert>:

// Insert key-value pair into dictionary
void insert(Dictionary *dict, const char *stringKey, struct Tone *tones, int numTones) {
 8000284:	b580      	push	{r7, lr}
 8000286:	b086      	sub	sp, #24
 8000288:	af00      	add	r7, sp, #0
 800028a:	60f8      	str	r0, [r7, #12]
 800028c:	60b9      	str	r1, [r7, #8]
 800028e:	607a      	str	r2, [r7, #4]
 8000290:	603b      	str	r3, [r7, #0]
    unsigned int index;
    struct DictionaryNode *newNode = malloc(sizeof(struct DictionaryNode));
 8000292:	2010      	movs	r0, #16
 8000294:	f008 f81e 	bl	80082d4 <malloc>
 8000298:	4603      	mov	r3, r0
 800029a:	613b      	str	r3, [r7, #16]
    newNode->stringKey = strdup(stringKey);
 800029c:	68b8      	ldr	r0, [r7, #8]
 800029e:	f008 f8db 	bl	8008458 <strdup>
 80002a2:	4603      	mov	r3, r0
 80002a4:	461a      	mov	r2, r3
 80002a6:	693b      	ldr	r3, [r7, #16]
 80002a8:	601a      	str	r2, [r3, #0]
    newNode->tones = malloc(numTones * sizeof(struct Tone));
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	00db      	lsls	r3, r3, #3
 80002ae:	4618      	mov	r0, r3
 80002b0:	f008 f810 	bl	80082d4 <malloc>
 80002b4:	4603      	mov	r3, r0
 80002b6:	461a      	mov	r2, r3
 80002b8:	693b      	ldr	r3, [r7, #16]
 80002ba:	605a      	str	r2, [r3, #4]
    memcpy(newNode->tones, tones, numTones * sizeof(struct Tone));
 80002bc:	693b      	ldr	r3, [r7, #16]
 80002be:	6858      	ldr	r0, [r3, #4]
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	00db      	lsls	r3, r3, #3
 80002c4:	461a      	mov	r2, r3
 80002c6:	6879      	ldr	r1, [r7, #4]
 80002c8:	f008 f80c 	bl	80082e4 <memcpy>
    newNode->numTones = numTones;
 80002cc:	693b      	ldr	r3, [r7, #16]
 80002ce:	683a      	ldr	r2, [r7, #0]
 80002d0:	609a      	str	r2, [r3, #8]

    if (stringKey != NULL) {
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d006      	beq.n	80002e6 <insert+0x62>
        index = hashString(stringKey, dict->size);
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	685b      	ldr	r3, [r3, #4]
 80002dc:	4619      	mov	r1, r3
 80002de:	68b8      	ldr	r0, [r7, #8]
 80002e0:	f7ff ff84 	bl	80001ec <hashString>
 80002e4:	6178      	str	r0, [r7, #20]
    }

    newNode->next = dict->buckets[index];
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	697b      	ldr	r3, [r7, #20]
 80002ec:	009b      	lsls	r3, r3, #2
 80002ee:	4413      	add	r3, r2
 80002f0:	681a      	ldr	r2, [r3, #0]
 80002f2:	693b      	ldr	r3, [r7, #16]
 80002f4:	60da      	str	r2, [r3, #12]
    dict->buckets[index] = newNode;
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	681a      	ldr	r2, [r3, #0]
 80002fa:	697b      	ldr	r3, [r7, #20]
 80002fc:	009b      	lsls	r3, r3, #2
 80002fe:	4413      	add	r3, r2
 8000300:	693a      	ldr	r2, [r7, #16]
 8000302:	601a      	str	r2, [r3, #0]
}
 8000304:	bf00      	nop
 8000306:	3718      	adds	r7, #24
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <lookup>:

// Lookup value by key
struct Tone *lookup(Dictionary *dict, const char *stringKey, int numericKey, int *numTones) {
 800030c:	b580      	push	{r7, lr}
 800030e:	b086      	sub	sp, #24
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
 8000318:	603b      	str	r3, [r7, #0]
    unsigned int index;
    struct DictionaryNode *current;

    if (stringKey != NULL) {
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d028      	beq.n	8000372 <lookup+0x66>
        index = hashString(stringKey, dict->size);
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	4619      	mov	r1, r3
 8000326:	68b8      	ldr	r0, [r7, #8]
 8000328:	f7ff ff60 	bl	80001ec <hashString>
 800032c:	6138      	str	r0, [r7, #16]
        current = dict->buckets[index];
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	693b      	ldr	r3, [r7, #16]
 8000334:	009b      	lsls	r3, r3, #2
 8000336:	4413      	add	r3, r2
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	617b      	str	r3, [r7, #20]
        while (current) {
 800033c:	e016      	b.n	800036c <lookup+0x60>
            if (current->stringKey && strcmp(current->stringKey, stringKey) == 0) {
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d00f      	beq.n	8000366 <lookup+0x5a>
 8000346:	697b      	ldr	r3, [r7, #20]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	68b9      	ldr	r1, [r7, #8]
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff ff3b 	bl	80001c8 <strcmp>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d106      	bne.n	8000366 <lookup+0x5a>
                *numTones = current->numTones;
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	689a      	ldr	r2, [r3, #8]
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	601a      	str	r2, [r3, #0]
                return current->tones;
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	e009      	b.n	800037a <lookup+0x6e>
            }
            current = current->next;
 8000366:	697b      	ldr	r3, [r7, #20]
 8000368:	68db      	ldr	r3, [r3, #12]
 800036a:	617b      	str	r3, [r7, #20]
        while (current) {
 800036c:	697b      	ldr	r3, [r7, #20]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d1e5      	bne.n	800033e <lookup+0x32>
        }
    }

    *numTones = 0;
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
    return NULL;
 8000378:	2300      	movs	r3, #0
}
 800037a:	4618      	mov	r0, r3
 800037c:	3718      	adds	r7, #24
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}

08000382 <lookupindex>:

struct DictionaryNode* lookupindex(Dictionary *dict, unsigned int i)
{
 8000382:	b480      	push	{r7}
 8000384:	b085      	sub	sp, #20
 8000386:	af00      	add	r7, sp, #0
 8000388:	6078      	str	r0, [r7, #4]
 800038a:	6039      	str	r1, [r7, #0]
    struct DictionaryNode *current;
    current = dict->buckets[i];
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	4413      	add	r3, r2
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	60fb      	str	r3, [r7, #12]
    return current;
 800039a:	68fb      	ldr	r3, [r7, #12]
}
 800039c:	4618      	mov	r0, r3
 800039e:	3714      	adds	r7, #20
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <initTonesDictionary>:
#define INC_MUSIC_LIBRARY_H_
#include "dictionary.h"

struct Dictionary *playlist = NULL;

void initTonesDictionary() {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	f5ad 5d50 	sub.w	sp, sp, #13312	; 0x3400
 80003ae:	b086      	sub	sp, #24
 80003b0:	af00      	add	r7, sp, #0
    playlist = initDictionary(10);
 80003b2:	200a      	movs	r0, #10
 80003b4:	f7ff ff3b 	bl	800022e <initDictionary>
 80003b8:	4603      	mov	r3, r0
 80003ba:	4a4c      	ldr	r2, [pc, #304]	; (80004ec <initTonesDictionary+0x144>)
 80003bc:	6013      	str	r3, [r2, #0]

    // Example tones
    struct Tone super_mario_bros[]={{2637,306},{0,153},{2637,153},{0,153},{2093,153},{2637,153},{0,153},{3136,153},{0,459},{1586,153},{0,459},{2093,153},{0,306},{1586,153},{0,306},{1319,153},{0,306},{1760,153},{0,153},{1976,153},{0,153},{1865,153},{1760,153},{0,153},{1586,204},{2637,204},{3136,204},{3520,153},{0,153},{2794,153},{3136,153},{0,153},{2637,153},{0,153},{2093,153},{2349,153},{1976,153},{0,306},{2093,153},{0,306},{1586,153},{0,306},{1319,153},{0,306},{1760,153},{0,153},{1976,153},{0,153},{1865,153},{1760,153},{0,153},{1586,204},{2637,204},{3136,204},{3520,153},{0,153},{2794,153},{3136,153},{0,153},{2637,153},{0,153},{2093,153},{2349,153},{1976,153},{0,0}};
 80003be:	f507 5350 	add.w	r3, r7, #13312	; 0x3400
 80003c2:	f103 0318 	add.w	r3, r3, #24
 80003c6:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80003ca:	4a49      	ldr	r2, [pc, #292]	; (80004f0 <initTonesDictionary+0x148>)
 80003cc:	4618      	mov	r0, r3
 80003ce:	4611      	mov	r1, r2
 80003d0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80003d4:	461a      	mov	r2, r3
 80003d6:	f007 ff85 	bl	80082e4 <memcpy>
    struct Tone hedwig_theme[]={{REST,750},{NOTE_D4,374},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_G4,750},{NOTE_D5,374},{NOTE_C5,1124},{NOTE_A4,1124},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_F4,750},{NOTE_GS4,374},{NOTE_D4,2249},{NOTE_D4,374},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_G4,750},{NOTE_D5,374},{NOTE_F5,750},{NOTE_E5,374},{NOTE_DS5,750},{NOTE_B4,374},{NOTE_DS5,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_B4,374},{NOTE_G4,2249},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_DS5,750},{NOTE_D5,374},{NOTE_CS5,750},{NOTE_A4,374},{NOTE_AS4,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_D4,374},{NOTE_D5,1700},{REST,150},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_F5,750},{NOTE_E5,374},{NOTE_DS5,750},{NOTE_B4,374},{NOTE_DS5,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_AS4,374},{NOTE_G4,2249},{0,0}};
 80003da:	f507 5350 	add.w	r3, r7, #13312	; 0x3400
 80003de:	f103 0318 	add.w	r3, r3, #24
 80003e2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80003e6:	4a43      	ldr	r2, [pc, #268]	; (80004f4 <initTonesDictionary+0x14c>)
 80003e8:	4618      	mov	r0, r3
 80003ea:	4611      	mov	r1, r2
 80003ec:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80003f0:	461a      	mov	r2, r3
 80003f2:	f007 ff77 	bl	80082e4 <memcpy>
    struct Tone doom[]={{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_FS3,67},{NOTE_D3,67},{NOTE_B2,67},{NOTE_A3,67},{NOTE_FS3,67},{NOTE_B2,67},{NOTE_D3,67},{NOTE_FS3,67},{NOTE_A3,67},{NOTE_FS3,67},{NOTE_D3,67},{NOTE_B2,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B3,67},{NOTE_G3,67},{NOTE_E3,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_B3,67},{NOTE_G4,67},{NOTE_B4,67},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_E3,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,534},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_E3,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_C4,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_CS4,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_B3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_A3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_G3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_GS3,133},{NOTE_A3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_B3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_A3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_G3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_F3,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B3,67},{NOTE_G3,67},{NOTE_E3,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_B3,67},{NOTE_G4,67},{NOTE_B4,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{0,0}};
 80003f6:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 80003fa:	f103 0318 	add.w	r3, r3, #24
 80003fe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000402:	4a3d      	ldr	r2, [pc, #244]	; (80004f8 <initTonesDictionary+0x150>)
 8000404:	4618      	mov	r0, r3
 8000406:	4611      	mov	r1, r2
 8000408:	f44f 6351 	mov.w	r3, #3344	; 0xd10
 800040c:	461a      	mov	r2, r3
 800040e:	f007 ff69 	bl	80082e4 <memcpy>
    struct Tone fur_elise[] = {{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,750},{REST,250},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_C5,188},{NOTE_C5,188},{NOTE_C5,188},{NOTE_C5,750},{NOTE_F5,282},{NOTE_E5,94},{NOTE_E5,250},{NOTE_D5,250},{NOTE_AS5,282},{NOTE_A5,94},{NOTE_A5,188},{NOTE_G5,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_AS4,250},{NOTE_A4,250},{NOTE_A4,94},{NOTE_G4,94},{NOTE_A4,94},{NOTE_B4,94},{NOTE_C5,750},{NOTE_D5,188},{NOTE_DS5,188},{NOTE_E5,375},{NOTE_E5,188},{NOTE_F5,188},{NOTE_A4,188},{NOTE_C5,750},{NOTE_D5,282},{NOTE_B4,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_G4,94},{NOTE_G5,94},{NOTE_A4,94},{NOTE_G5,94},{NOTE_B4,94},{NOTE_G5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_E5,94},{NOTE_G5,94},{NOTE_C6,94},{NOTE_B5,94},{NOTE_A5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_D5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_G4,94},{NOTE_G5,94},{NOTE_A4,94},{NOTE_G5,94},{NOTE_B4,94},{NOTE_G5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_E5,94},{NOTE_G5,94},{NOTE_C6,94},{NOTE_B5,94},{NOTE_A5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_D5,94},{NOTE_E5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,94},{NOTE_B4,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,94},{NOTE_B4,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,375},{NOTE_B4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,375},{NOTE_B4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{REST,188},{REST,250},{NOTE_CS5,1125},{NOTE_D5,750},{NOTE_E5,188},{NOTE_F5,188},{NOTE_F5,750},{NOTE_F5,250},{NOTE_E5,1125},{NOTE_D5,750},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,750},{NOTE_A4,250},{NOTE_A4,250},{NOTE_C5,250},{NOTE_B4,250},{NOTE_A4,1125},{NOTE_CS5,1125},{NOTE_D5,750},{NOTE_E5,188},{NOTE_F5,188},{NOTE_F5,750},{NOTE_F5,250},{NOTE_F5,1125},{NOTE_DS5,750},{NOTE_D5,188},{NOTE_C5,188},{NOTE_AS4,750},{NOTE_A4,250},{NOTE_GS4,750},{NOTE_G4,250},{NOTE_A4,1125},{NOTE_B4,750},{REST,250},{NOTE_A3,141},{NOTE_C4,141},{NOTE_E4,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_D5,141},{NOTE_C5,141},{NOTE_B4,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_A5,141},{NOTE_C6,141},{NOTE_E6,141},{NOTE_D6,141},{NOTE_C6,141},{NOTE_B5,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_A5,141},{NOTE_C6,141},{NOTE_E6,141},{NOTE_D6,141},{NOTE_C6,141},{NOTE_B5,141},{NOTE_AS5,141},{NOTE_A5,141},{NOTE_GS5,141},{NOTE_G5,141},{NOTE_FS5,141},{NOTE_F5,141},{NOTE_E5,141},{NOTE_DS5,141},{NOTE_D5,141},{NOTE_CS5,141},{NOTE_C5,141},{NOTE_B4,141},{NOTE_AS4,141},{NOTE_A4,141},{NOTE_GS4,141},{NOTE_G4,141},{NOTE_FS4,141},{NOTE_F4,141},{NOTE_E4,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,375},{REST,375},{REST,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,750},{REST,250},{REST,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_E5,250},{NOTE_E5,250},{NOTE_E6,375},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,1125},{0,0}};
 8000412:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8000416:	f103 0318 	add.w	r3, r3, #24
 800041a:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800041e:	4a37      	ldr	r2, [pc, #220]	; (80004fc <initTonesDictionary+0x154>)
 8000420:	4618      	mov	r0, r3
 8000422:	4611      	mov	r1, r2
 8000424:	f44f 5397 	mov.w	r3, #4832	; 0x12e0
 8000428:	461a      	mov	r2, r3
 800042a:	f007 ff5b 	bl	80082e4 <memcpy>
    struct Tone tetris[] = {{NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 834}, {NOTE_A4, 834}, {NOTE_GS4, 834}, {NOTE_B4, 417}, {REST, 208}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 417}, {NOTE_E5, 417}, {NOTE_A5, 834}, {NOTE_GS5, 834},{NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 834}, {NOTE_A4, 834}, {NOTE_GS4, 834}, {NOTE_B4, 417}, {REST, 208}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 417}, {NOTE_E5, 417}, {NOTE_A5, 834}, {NOTE_GS5, 834},{NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 834}, {NOTE_A4, 834}, {NOTE_GS4, 834}, {NOTE_B4, 417}, {REST, 208}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 417}, {NOTE_E5, 417}, {NOTE_A5, 834}, {NOTE_GS5, 834},{0,0}};
 800042e:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8000432:	f103 0318 	add.w	r3, r3, #24
 8000436:	f5a3 6354 	sub.w	r3, r3, #3392	; 0xd40
 800043a:	4a31      	ldr	r2, [pc, #196]	; (8000500 <initTonesDictionary+0x158>)
 800043c:	4618      	mov	r0, r3
 800043e:	4611      	mov	r1, r2
 8000440:	f44f 6315 	mov.w	r3, #2384	; 0x950
 8000444:	461a      	mov	r2, r3
 8000446:	f007 ff4d 	bl	80082e4 <memcpy>
    struct Tone tokyo_drift[]={{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,500},{NOTE_B4,500},{NOTE_DS5,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{REST,0},{REST,0},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,500},{NOTE_B4,500},{NOTE_DS5,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{REST,0},{REST,0},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,500},{NOTE_B4,500},{NOTE_DS5,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_F5,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_GS5,500},{NOTE_FS5,500},{NOTE_F5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{REST,375},{NOTE_AS4,375},{NOTE_B4,500},{NOTE_DS5,500},{NOTE_AS4,375},{REST,375},{REST,0},{REST,0}};
 800044a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800044e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000452:	4a2c      	ldr	r2, [pc, #176]	; (8000504 <initTonesDictionary+0x15c>)
 8000454:	4618      	mov	r0, r3
 8000456:	4611      	mov	r1, r2
 8000458:	f44f 63db 	mov.w	r3, #1752	; 0x6d8
 800045c:	461a      	mov	r2, r3
 800045e:	f007 ff41 	bl	80082e4 <memcpy>
    // Insert tones into dictionary
    insert(playlist, "super_mario_bros", super_mario_bros, sizeof(super_mario_bros) / sizeof(struct Tone));
 8000462:	4b22      	ldr	r3, [pc, #136]	; (80004ec <initTonesDictionary+0x144>)
 8000464:	6818      	ldr	r0, [r3, #0]
 8000466:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 800046a:	f102 0210 	add.w	r2, r2, #16
 800046e:	2341      	movs	r3, #65	; 0x41
 8000470:	4925      	ldr	r1, [pc, #148]	; (8000508 <initTonesDictionary+0x160>)
 8000472:	f7ff ff07 	bl	8000284 <insert>
    insert(playlist, "hedwig_theme", hedwig_theme, sizeof(hedwig_theme) / sizeof(struct Tone));
 8000476:	4b1d      	ldr	r3, [pc, #116]	; (80004ec <initTonesDictionary+0x144>)
 8000478:	6818      	ldr	r0, [r3, #0]
 800047a:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 800047e:	f102 0218 	add.w	r2, r2, #24
 8000482:	233f      	movs	r3, #63	; 0x3f
 8000484:	4921      	ldr	r1, [pc, #132]	; (800050c <initTonesDictionary+0x164>)
 8000486:	f7ff fefd 	bl	8000284 <insert>
    insert(playlist, "doom", doom, sizeof(doom) / sizeof(struct Tone));
 800048a:	4b18      	ldr	r3, [pc, #96]	; (80004ec <initTonesDictionary+0x144>)
 800048c:	6818      	ldr	r0, [r3, #0]
 800048e:	f507 520c 	add.w	r2, r7, #8960	; 0x2300
 8000492:	f102 0218 	add.w	r2, r2, #24
 8000496:	3a10      	subs	r2, #16
 8000498:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
 800049c:	491c      	ldr	r1, [pc, #112]	; (8000510 <initTonesDictionary+0x168>)
 800049e:	f7ff fef1 	bl	8000284 <insert>
    insert(playlist, "fur_elise", fur_elise, sizeof(fur_elise) / sizeof(struct Tone));
 80004a2:	4b12      	ldr	r3, [pc, #72]	; (80004ec <initTonesDictionary+0x144>)
 80004a4:	6818      	ldr	r0, [r3, #0]
 80004a6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80004aa:	f102 0218 	add.w	r2, r2, #24
 80004ae:	3a30      	subs	r2, #48	; 0x30
 80004b0:	f44f 7317 	mov.w	r3, #604	; 0x25c
 80004b4:	4917      	ldr	r1, [pc, #92]	; (8000514 <initTonesDictionary+0x16c>)
 80004b6:	f7ff fee5 	bl	8000284 <insert>
    insert(playlist, "tetris", tetris, sizeof(tetris) / sizeof(struct Tone));
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <initTonesDictionary+0x144>)
 80004bc:	6818      	ldr	r0, [r3, #0]
 80004be:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 80004c2:	f44f 7395 	mov.w	r3, #298	; 0x12a
 80004c6:	4914      	ldr	r1, [pc, #80]	; (8000518 <initTonesDictionary+0x170>)
 80004c8:	f7ff fedc 	bl	8000284 <insert>
    insert(playlist, "tokyo_drift", tokyo_drift, sizeof(tokyo_drift) / sizeof(struct Tone));
 80004cc:	4b07      	ldr	r3, [pc, #28]	; (80004ec <initTonesDictionary+0x144>)
 80004ce:	6818      	ldr	r0, [r3, #0]
 80004d0:	f107 0218 	add.w	r2, r7, #24
 80004d4:	3a18      	subs	r2, #24
 80004d6:	23db      	movs	r3, #219	; 0xdb
 80004d8:	4910      	ldr	r1, [pc, #64]	; (800051c <initTonesDictionary+0x174>)
 80004da:	f7ff fed3 	bl	8000284 <insert>
}
 80004de:	bf00      	nop
 80004e0:	f507 5750 	add.w	r7, r7, #13312	; 0x3400
 80004e4:	3718      	adds	r7, #24
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000118 	.word	0x20000118
 80004f0:	08008514 	.word	0x08008514
 80004f4:	0800871c 	.word	0x0800871c
 80004f8:	08008914 	.word	0x08008914
 80004fc:	08009624 	.word	0x08009624
 8000500:	0800a904 	.word	0x0800a904
 8000504:	0800b254 	.word	0x0800b254
 8000508:	080084c8 	.word	0x080084c8
 800050c:	080084dc 	.word	0x080084dc
 8000510:	080084ec 	.word	0x080084ec
 8000514:	080084f4 	.word	0x080084f4
 8000518:	08008500 	.word	0x08008500
 800051c:	08008508 	.word	0x08008508

08000520 <extractNumber>:
////}
//PWM END

//UART BEGIN

void extractNumber(const uint8_t *data) {
 8000520:	b5b0      	push	{r4, r5, r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	isCorrect = -1;
 8000528:	4b3a      	ldr	r3, [pc, #232]	; (8000614 <extractNumber+0xf4>)
 800052a:	f04f 32ff 	mov.w	r2, #4294967295
 800052e:	601a      	str	r2, [r3, #0]
	// Extract the first four characters and convert them to integers
	char pass[19] = "PASS_CHANGED(XXXX)\n";
 8000530:	4b39      	ldr	r3, [pc, #228]	; (8000618 <extractNumber+0xf8>)
 8000532:	f107 0408 	add.w	r4, r7, #8
 8000536:	461d      	mov	r5, r3
 8000538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800053a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800053c:	682b      	ldr	r3, [r5, #0]
 800053e:	461a      	mov	r2, r3
 8000540:	8022      	strh	r2, [r4, #0]
 8000542:	3402      	adds	r4, #2
 8000544:	0c1b      	lsrs	r3, r3, #16
 8000546:	7023      	strb	r3, [r4, #0]
	pass[13] = data[9];
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	3309      	adds	r3, #9
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	757b      	strb	r3, [r7, #21]
	pass[14] = data[10];
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	330a      	adds	r3, #10
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	75bb      	strb	r3, [r7, #22]
	pass[15] = data[11];
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	330b      	adds	r3, #11
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	75fb      	strb	r3, [r7, #23]
	pass[16] = data[12];
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	330c      	adds	r3, #12
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	763b      	strb	r3, [r7, #24]

	for (int i = 9; i < 13; i++) {
 8000568:	2309      	movs	r3, #9
 800056a:	61fb      	str	r3, [r7, #28]
 800056c:	e034      	b.n	80005d8 <extractNumber+0xb8>
		if (data[i] <= '9' && data[i] >= '0') {
 800056e:	69fb      	ldr	r3, [r7, #28]
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	4413      	add	r3, r2
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b39      	cmp	r3, #57	; 0x39
 8000578:	d814      	bhi.n	80005a4 <extractNumber+0x84>
 800057a:	69fb      	ldr	r3, [r7, #28]
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	4413      	add	r3, r2
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b2f      	cmp	r3, #47	; 0x2f
 8000584:	d90e      	bls.n	80005a4 <extractNumber+0x84>
			password[i - 9] = data[i] - '0';
 8000586:	69fb      	ldr	r3, [r7, #28]
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	4413      	add	r3, r2
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	461a      	mov	r2, r3
 8000590:	69fb      	ldr	r3, [r7, #28]
 8000592:	3b09      	subs	r3, #9
 8000594:	3a30      	subs	r2, #48	; 0x30
 8000596:	4921      	ldr	r1, [pc, #132]	; (800061c <extractNumber+0xfc>)
 8000598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 9; i < 13; i++) {
 800059c:	69fb      	ldr	r3, [r7, #28]
 800059e:	3301      	adds	r3, #1
 80005a0:	61fb      	str	r3, [r7, #28]
 80005a2:	e019      	b.n	80005d8 <extractNumber+0xb8>
		} else {
			if (logStatus) {
 80005a4:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <extractNumber+0x100>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d004      	beq.n	80005b6 <extractNumber+0x96>
				HAL_UART_Transmit_IT(&huart1, "ERROR(INCORRECT FORMAT)\n", 24);
 80005ac:	2218      	movs	r2, #24
 80005ae:	491d      	ldr	r1, [pc, #116]	; (8000624 <extractNumber+0x104>)
 80005b0:	481d      	ldr	r0, [pc, #116]	; (8000628 <extractNumber+0x108>)
 80005b2:	f006 fb35 	bl	8006c20 <HAL_UART_Transmit_IT>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2101      	movs	r1, #1
 80005ba:	481c      	ldr	r0, [pc, #112]	; (800062c <extractNumber+0x10c>)
 80005bc:	f003 f9de 	bl	800397c <HAL_GPIO_WritePin>
			buzzerEnterTime = HAL_GetTick();
 80005c0:	f001 fbd6 	bl	8001d70 <HAL_GetTick>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a1a      	ldr	r2, [pc, #104]	; (8000630 <extractNumber+0x110>)
 80005c8:	6013      	str	r3, [r2, #0]
			if (alertStatus)
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <extractNumber+0x114>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d01c      	beq.n	800060c <extractNumber+0xec>
				PWM_Start();
 80005d2:	f001 f95d 	bl	8001890 <PWM_Start>
 80005d6:	e01a      	b.n	800060e <extractNumber+0xee>
	for (int i = 9; i < 13; i++) {
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	2b0c      	cmp	r3, #12
 80005dc:	ddc7      	ble.n	800056e <extractNumber+0x4e>
			return;
		}
	}
	if (logStatus) {
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <extractNumber+0x100>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d013      	beq.n	800060e <extractNumber+0xee>
		HAL_UART_Transmit_IT(&huart1, pass, 19);
 80005e6:	f107 0308 	add.w	r3, r7, #8
 80005ea:	2213      	movs	r2, #19
 80005ec:	4619      	mov	r1, r3
 80005ee:	480e      	ldr	r0, [pc, #56]	; (8000628 <extractNumber+0x108>)
 80005f0:	f006 fb16 	bl	8006c20 <HAL_UART_Transmit_IT>
		buzzerEnterTime = HAL_GetTick();
 80005f4:	f001 fbbc 	bl	8001d70 <HAL_GetTick>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a0d      	ldr	r2, [pc, #52]	; (8000630 <extractNumber+0x110>)
 80005fc:	6013      	str	r3, [r2, #0]
		if (alertStatus)
 80005fe:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <extractNumber+0x114>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d003      	beq.n	800060e <extractNumber+0xee>
			PWM_Start();
 8000606:	f001 f943 	bl	8001890 <PWM_Start>
 800060a:	e000      	b.n	800060e <extractNumber+0xee>
			return;
 800060c:	bf00      	nop
	}
}
 800060e:	3720      	adds	r7, #32
 8000610:	46bd      	mov	sp, r7
 8000612:	bdb0      	pop	{r4, r5, r7, pc}
 8000614:	20000040 	.word	0x20000040
 8000618:	0800b948 	.word	0x0800b948
 800061c:	20000000 	.word	0x20000000
 8000620:	20000038 	.word	0x20000038
 8000624:	0800b92c 	.word	0x0800b92c
 8000628:	200002bc 	.word	0x200002bc
 800062c:	48000800 	.word	0x48000800
 8000630:	20000664 	.word	0x20000664
 8000634:	2000003c 	.word	0x2000003c

08000638 <compareStrings>:

int compareStrings(const char *str1, const uint8_t *str2, int n) {
 8000638:	b480      	push	{r7}
 800063a:	b087      	sub	sp, #28
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < n; i++) {
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
 8000648:	e00e      	b.n	8000668 <compareStrings+0x30>
		if (str1[i] != str2[i]) {
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	4413      	add	r3, r2
 8000650:	781a      	ldrb	r2, [r3, #0]
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	68b9      	ldr	r1, [r7, #8]
 8000656:	440b      	add	r3, r1
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	429a      	cmp	r2, r3
 800065c:	d001      	beq.n	8000662 <compareStrings+0x2a>
			return 0;
 800065e:	2300      	movs	r3, #0
 8000660:	e007      	b.n	8000672 <compareStrings+0x3a>
	for (int i = 0; i < n; i++) {
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	3301      	adds	r3, #1
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	697a      	ldr	r2, [r7, #20]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	429a      	cmp	r2, r3
 800066e:	dbec      	blt.n	800064a <compareStrings+0x12>
		}
	}
	return 1;
 8000670:	2301      	movs	r3, #1
}
 8000672:	4618      	mov	r0, r3
 8000674:	371c      	adds	r7, #28
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
	...

08000680 <HAL_UART_RxCpltCallback>:

uint8_t data[100];
uint8_t d;
uint8_t i;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000680:	b5b0      	push	{r4, r5, r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a6f      	ldr	r2, [pc, #444]	; (800084c <HAL_UART_RxCpltCallback+0x1cc>)
 800068e:	4293      	cmp	r3, r2
 8000690:	f040 80d7 	bne.w	8000842 <HAL_UART_RxCpltCallback+0x1c2>
		HAL_UART_Receive_IT(&huart1, &d, 1);
 8000694:	2201      	movs	r2, #1
 8000696:	496e      	ldr	r1, [pc, #440]	; (8000850 <HAL_UART_RxCpltCallback+0x1d0>)
 8000698:	486e      	ldr	r0, [pc, #440]	; (8000854 <HAL_UART_RxCpltCallback+0x1d4>)
 800069a:	f006 fb1f 	bl	8006cdc <HAL_UART_Receive_IT>
		data[i++] = d;
 800069e:	4b6e      	ldr	r3, [pc, #440]	; (8000858 <HAL_UART_RxCpltCallback+0x1d8>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	1c5a      	adds	r2, r3, #1
 80006a4:	b2d1      	uxtb	r1, r2
 80006a6:	4a6c      	ldr	r2, [pc, #432]	; (8000858 <HAL_UART_RxCpltCallback+0x1d8>)
 80006a8:	7011      	strb	r1, [r2, #0]
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b68      	ldr	r3, [pc, #416]	; (8000850 <HAL_UART_RxCpltCallback+0x1d0>)
 80006ae:	7819      	ldrb	r1, [r3, #0]
 80006b0:	4b6a      	ldr	r3, [pc, #424]	; (800085c <HAL_UART_RxCpltCallback+0x1dc>)
 80006b2:	5499      	strb	r1, [r3, r2]
		if (d == '\n') {
 80006b4:	4b66      	ldr	r3, [pc, #408]	; (8000850 <HAL_UART_RxCpltCallback+0x1d0>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b0a      	cmp	r3, #10
 80006ba:	f040 80c2 	bne.w	8000842 <HAL_UART_RxCpltCallback+0x1c2>
			if ((i == 15 && compareStrings(setPass, data, 9) == 1)
 80006be:	4b66      	ldr	r3, [pc, #408]	; (8000858 <HAL_UART_RxCpltCallback+0x1d8>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b0f      	cmp	r3, #15
 80006c4:	d11a      	bne.n	80006fc <HAL_UART_RxCpltCallback+0x7c>
 80006c6:	2209      	movs	r2, #9
 80006c8:	4964      	ldr	r1, [pc, #400]	; (800085c <HAL_UART_RxCpltCallback+0x1dc>)
 80006ca:	4865      	ldr	r0, [pc, #404]	; (8000860 <HAL_UART_RxCpltCallback+0x1e0>)
 80006cc:	f7ff ffb4 	bl	8000638 <compareStrings>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d112      	bne.n	80006fc <HAL_UART_RxCpltCallback+0x7c>
					&& isCorrect == -1) {
 80006d6:	4b63      	ldr	r3, [pc, #396]	; (8000864 <HAL_UART_RxCpltCallback+0x1e4>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006de:	d10d      	bne.n	80006fc <HAL_UART_RxCpltCallback+0x7c>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 80006e0:	2201      	movs	r2, #1
 80006e2:	2101      	movs	r1, #1
 80006e4:	4860      	ldr	r0, [pc, #384]	; (8000868 <HAL_UART_RxCpltCallback+0x1e8>)
 80006e6:	f003 f949 	bl	800397c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2104      	movs	r1, #4
 80006ee:	485e      	ldr	r0, [pc, #376]	; (8000868 <HAL_UART_RxCpltCallback+0x1e8>)
 80006f0:	f003 f944 	bl	800397c <HAL_GPIO_WritePin>
				extractNumber(data);
 80006f4:	4859      	ldr	r0, [pc, #356]	; (800085c <HAL_UART_RxCpltCallback+0x1dc>)
 80006f6:	f7ff ff13 	bl	8000520 <extractNumber>
 80006fa:	e09f      	b.n	800083c <HAL_UART_RxCpltCallback+0x1bc>
			} else if (i == 7) {
 80006fc:	4b56      	ldr	r3, [pc, #344]	; (8000858 <HAL_UART_RxCpltCallback+0x1d8>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b07      	cmp	r3, #7
 8000702:	d111      	bne.n	8000728 <HAL_UART_RxCpltCallback+0xa8>
				if (compareStrings(logON, data, 6) == 1) {
 8000704:	2206      	movs	r2, #6
 8000706:	4955      	ldr	r1, [pc, #340]	; (800085c <HAL_UART_RxCpltCallback+0x1dc>)
 8000708:	4858      	ldr	r0, [pc, #352]	; (800086c <HAL_UART_RxCpltCallback+0x1ec>)
 800070a:	f7ff ff95 	bl	8000638 <compareStrings>
 800070e:	4603      	mov	r3, r0
 8000710:	2b01      	cmp	r3, #1
 8000712:	f040 8093 	bne.w	800083c <HAL_UART_RxCpltCallback+0x1bc>
					logStatus = 1;
 8000716:	4b56      	ldr	r3, [pc, #344]	; (8000870 <HAL_UART_RxCpltCallback+0x1f0>)
 8000718:	2201      	movs	r2, #1
 800071a:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Log Turned ON\n",
 800071c:	2216      	movs	r2, #22
 800071e:	4955      	ldr	r1, [pc, #340]	; (8000874 <HAL_UART_RxCpltCallback+0x1f4>)
 8000720:	484c      	ldr	r0, [pc, #304]	; (8000854 <HAL_UART_RxCpltCallback+0x1d4>)
 8000722:	f006 fa7d 	bl	8006c20 <HAL_UART_Transmit_IT>
 8000726:	e089      	b.n	800083c <HAL_UART_RxCpltCallback+0x1bc>
							22);
				}
			} else if (i == 8) {
 8000728:	4b4b      	ldr	r3, [pc, #300]	; (8000858 <HAL_UART_RxCpltCallback+0x1d8>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b08      	cmp	r3, #8
 800072e:	d110      	bne.n	8000752 <HAL_UART_RxCpltCallback+0xd2>
				if (compareStrings(logOFF, data, 7) == 1) {
 8000730:	2207      	movs	r2, #7
 8000732:	494a      	ldr	r1, [pc, #296]	; (800085c <HAL_UART_RxCpltCallback+0x1dc>)
 8000734:	4850      	ldr	r0, [pc, #320]	; (8000878 <HAL_UART_RxCpltCallback+0x1f8>)
 8000736:	f7ff ff7f 	bl	8000638 <compareStrings>
 800073a:	4603      	mov	r3, r0
 800073c:	2b01      	cmp	r3, #1
 800073e:	d17d      	bne.n	800083c <HAL_UART_RxCpltCallback+0x1bc>
					logStatus = 0;
 8000740:	4b4b      	ldr	r3, [pc, #300]	; (8000870 <HAL_UART_RxCpltCallback+0x1f0>)
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Log Turned OFF\n",
 8000746:	2217      	movs	r2, #23
 8000748:	494c      	ldr	r1, [pc, #304]	; (800087c <HAL_UART_RxCpltCallback+0x1fc>)
 800074a:	4842      	ldr	r0, [pc, #264]	; (8000854 <HAL_UART_RxCpltCallback+0x1d4>)
 800074c:	f006 fa68 	bl	8006c20 <HAL_UART_Transmit_IT>
 8000750:	e074      	b.n	800083c <HAL_UART_RxCpltCallback+0x1bc>
							23);
				}
			} else if (i == 9) {
 8000752:	4b41      	ldr	r3, [pc, #260]	; (8000858 <HAL_UART_RxCpltCallback+0x1d8>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b09      	cmp	r3, #9
 8000758:	d117      	bne.n	800078a <HAL_UART_RxCpltCallback+0x10a>
				if (compareStrings(alertON, data, 8) == 1) {
 800075a:	2208      	movs	r2, #8
 800075c:	493f      	ldr	r1, [pc, #252]	; (800085c <HAL_UART_RxCpltCallback+0x1dc>)
 800075e:	4848      	ldr	r0, [pc, #288]	; (8000880 <HAL_UART_RxCpltCallback+0x200>)
 8000760:	f7ff ff6a 	bl	8000638 <compareStrings>
 8000764:	4603      	mov	r3, r0
 8000766:	2b01      	cmp	r3, #1
 8000768:	d168      	bne.n	800083c <HAL_UART_RxCpltCallback+0x1bc>
					alertStatus = 1;
 800076a:	4b46      	ldr	r3, [pc, #280]	; (8000884 <HAL_UART_RxCpltCallback+0x204>)
 800076c:	2201      	movs	r2, #1
 800076e:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Alerts Turned ON\n",
 8000770:	2219      	movs	r2, #25
 8000772:	4945      	ldr	r1, [pc, #276]	; (8000888 <HAL_UART_RxCpltCallback+0x208>)
 8000774:	4837      	ldr	r0, [pc, #220]	; (8000854 <HAL_UART_RxCpltCallback+0x1d4>)
 8000776:	f006 fa53 	bl	8006c20 <HAL_UART_Transmit_IT>
							25);
					buzzerEnterTime = HAL_GetTick();
 800077a:	f001 faf9 	bl	8001d70 <HAL_GetTick>
 800077e:	4603      	mov	r3, r0
 8000780:	4a42      	ldr	r2, [pc, #264]	; (800088c <HAL_UART_RxCpltCallback+0x20c>)
 8000782:	6013      	str	r3, [r2, #0]
					PWM_Start();
 8000784:	f001 f884 	bl	8001890 <PWM_Start>
 8000788:	e058      	b.n	800083c <HAL_UART_RxCpltCallback+0x1bc>
				}
			} else if (i == 10) {
 800078a:	4b33      	ldr	r3, [pc, #204]	; (8000858 <HAL_UART_RxCpltCallback+0x1d8>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b0a      	cmp	r3, #10
 8000790:	d110      	bne.n	80007b4 <HAL_UART_RxCpltCallback+0x134>
				if (compareStrings(alertOFF, data, 9) == 1) {
 8000792:	2209      	movs	r2, #9
 8000794:	4931      	ldr	r1, [pc, #196]	; (800085c <HAL_UART_RxCpltCallback+0x1dc>)
 8000796:	483e      	ldr	r0, [pc, #248]	; (8000890 <HAL_UART_RxCpltCallback+0x210>)
 8000798:	f7ff ff4e 	bl	8000638 <compareStrings>
 800079c:	4603      	mov	r3, r0
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d14c      	bne.n	800083c <HAL_UART_RxCpltCallback+0x1bc>
					alertStatus = 0;
 80007a2:	4b38      	ldr	r3, [pc, #224]	; (8000884 <HAL_UART_RxCpltCallback+0x204>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Alerts Turned OFF\n",
 80007a8:	221a      	movs	r2, #26
 80007aa:	493a      	ldr	r1, [pc, #232]	; (8000894 <HAL_UART_RxCpltCallback+0x214>)
 80007ac:	4829      	ldr	r0, [pc, #164]	; (8000854 <HAL_UART_RxCpltCallback+0x1d4>)
 80007ae:	f006 fa37 	bl	8006c20 <HAL_UART_Transmit_IT>
 80007b2:	e043      	b.n	800083c <HAL_UART_RxCpltCallback+0x1bc>
							26);
				}
			} else if (i == 14 && (data[11] - '0') < 6
 80007b4:	4b28      	ldr	r3, [pc, #160]	; (8000858 <HAL_UART_RxCpltCallback+0x1d8>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b0e      	cmp	r3, #14
 80007ba:	d12d      	bne.n	8000818 <HAL_UART_RxCpltCallback+0x198>
 80007bc:	4b27      	ldr	r3, [pc, #156]	; (800085c <HAL_UART_RxCpltCallback+0x1dc>)
 80007be:	7adb      	ldrb	r3, [r3, #11]
 80007c0:	2b35      	cmp	r3, #53	; 0x35
 80007c2:	d829      	bhi.n	8000818 <HAL_UART_RxCpltCallback+0x198>
					&& (data[11] - '0') > -1) {
 80007c4:	4b25      	ldr	r3, [pc, #148]	; (800085c <HAL_UART_RxCpltCallback+0x1dc>)
 80007c6:	7adb      	ldrb	r3, [r3, #11]
 80007c8:	2b2f      	cmp	r3, #47	; 0x2f
 80007ca:	d925      	bls.n	8000818 <HAL_UART_RxCpltCallback+0x198>
				if (compareStrings(setVolume, data, 11) == 1
 80007cc:	220b      	movs	r2, #11
 80007ce:	4923      	ldr	r1, [pc, #140]	; (800085c <HAL_UART_RxCpltCallback+0x1dc>)
 80007d0:	4831      	ldr	r0, [pc, #196]	; (8000898 <HAL_UART_RxCpltCallback+0x218>)
 80007d2:	f7ff ff31 	bl	8000638 <compareStrings>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d12e      	bne.n	800083a <HAL_UART_RxCpltCallback+0x1ba>
						&& data[12] == ')') {
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <HAL_UART_RxCpltCallback+0x1dc>)
 80007de:	7b1b      	ldrb	r3, [r3, #12]
 80007e0:	2b29      	cmp	r3, #41	; 0x29
 80007e2:	d12a      	bne.n	800083a <HAL_UART_RxCpltCallback+0x1ba>
					int v = data[11] - '0';
 80007e4:	4b1d      	ldr	r3, [pc, #116]	; (800085c <HAL_UART_RxCpltCallback+0x1dc>)
 80007e6:	7adb      	ldrb	r3, [r3, #11]
 80007e8:	3b30      	subs	r3, #48	; 0x30
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
//					_volume = v * 10;
					char massage[24] = "Program Volume Set To  \n";
 80007ec:	4b2b      	ldr	r3, [pc, #172]	; (800089c <HAL_UART_RxCpltCallback+0x21c>)
 80007ee:	f107 040c 	add.w	r4, r7, #12
 80007f2:	461d      	mov	r5, r3
 80007f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007fc:	e884 0003 	stmia.w	r4, {r0, r1}
					massage[22] = data[11];
 8000800:	4b16      	ldr	r3, [pc, #88]	; (800085c <HAL_UART_RxCpltCallback+0x1dc>)
 8000802:	7adb      	ldrb	r3, [r3, #11]
 8000804:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					HAL_UART_Transmit_IT(&huart1, massage, 24);
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2218      	movs	r2, #24
 800080e:	4619      	mov	r1, r3
 8000810:	4810      	ldr	r0, [pc, #64]	; (8000854 <HAL_UART_RxCpltCallback+0x1d4>)
 8000812:	f006 fa05 	bl	8006c20 <HAL_UART_Transmit_IT>
				if (compareStrings(setVolume, data, 11) == 1
 8000816:	e010      	b.n	800083a <HAL_UART_RxCpltCallback+0x1ba>
				}
			} else {
				HAL_UART_Transmit_IT(&huart1, "INVALID INPUT\n", 14);
 8000818:	220e      	movs	r2, #14
 800081a:	4921      	ldr	r1, [pc, #132]	; (80008a0 <HAL_UART_RxCpltCallback+0x220>)
 800081c:	480d      	ldr	r0, [pc, #52]	; (8000854 <HAL_UART_RxCpltCallback+0x1d4>)
 800081e:	f006 f9ff 	bl	8006c20 <HAL_UART_Transmit_IT>
				buzzerEnterTime = HAL_GetTick();
 8000822:	f001 faa5 	bl	8001d70 <HAL_GetTick>
 8000826:	4603      	mov	r3, r0
 8000828:	4a18      	ldr	r2, [pc, #96]	; (800088c <HAL_UART_RxCpltCallback+0x20c>)
 800082a:	6013      	str	r3, [r2, #0]
				if (alertStatus)
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <HAL_UART_RxCpltCallback+0x204>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d003      	beq.n	800083c <HAL_UART_RxCpltCallback+0x1bc>
					PWM_Start();
 8000834:	f001 f82c 	bl	8001890 <PWM_Start>
 8000838:	e000      	b.n	800083c <HAL_UART_RxCpltCallback+0x1bc>
				if (compareStrings(setVolume, data, 11) == 1
 800083a:	bf00      	nop
			}

			i = 0;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_UART_RxCpltCallback+0x1d8>)
 800083e:	2200      	movs	r2, #0
 8000840:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8000842:	bf00      	nop
 8000844:	3728      	adds	r7, #40	; 0x28
 8000846:	46bd      	mov	sp, r7
 8000848:	bdb0      	pop	{r4, r5, r7, pc}
 800084a:	bf00      	nop
 800084c:	40013800 	.word	0x40013800
 8000850:	20000724 	.word	0x20000724
 8000854:	200002bc 	.word	0x200002bc
 8000858:	20000725 	.word	0x20000725
 800085c:	200006c0 	.word	0x200006c0
 8000860:	20000048 	.word	0x20000048
 8000864:	20000040 	.word	0x20000040
 8000868:	48000800 	.word	0x48000800
 800086c:	20000054 	.word	0x20000054
 8000870:	20000038 	.word	0x20000038
 8000874:	0800b95c 	.word	0x0800b95c
 8000878:	2000005c 	.word	0x2000005c
 800087c:	0800b974 	.word	0x0800b974
 8000880:	20000064 	.word	0x20000064
 8000884:	2000003c 	.word	0x2000003c
 8000888:	0800b98c 	.word	0x0800b98c
 800088c:	20000664 	.word	0x20000664
 8000890:	2000006c 	.word	0x2000006c
 8000894:	0800b9a8 	.word	0x0800b9a8
 8000898:	20000078 	.word	0x20000078
 800089c:	0800b9d4 	.word	0x0800b9d4
 80008a0:	0800b9c4 	.word	0x0800b9c4

080008a4 <HAL_ADC_ConvCpltCallback>:
		sum += adc_values[i];
	}
	return sum / sizeof(adc_values);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008b4:	d113      	bne.n	80008de <HAL_ADC_ConvCpltCallback+0x3a>
		uint32_t value;
		value = HAL_ADC_GetValue(hadc);
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f001 fd9a 	bl	80023f0 <HAL_ADC_GetValue>
 80008bc:	60f8      	str	r0, [r7, #12]
		adc_values[adc_indx++] = value;
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <HAL_ADC_ConvCpltCallback+0x44>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	1c5a      	adds	r2, r3, #1
 80008c4:	4908      	ldr	r1, [pc, #32]	; (80008e8 <HAL_ADC_ConvCpltCallback+0x44>)
 80008c6:	600a      	str	r2, [r1, #0]
 80008c8:	4908      	ldr	r1, [pc, #32]	; (80008ec <HAL_ADC_ConvCpltCallback+0x48>)
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (adc_indx > sizeof(adc_values) - 1) {
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <HAL_ADC_ConvCpltCallback+0x44>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2bc7      	cmp	r3, #199	; 0xc7
 80008d6:	d902      	bls.n	80008de <HAL_ADC_ConvCpltCallback+0x3a>
			//normalize_adc(denoise_adc());
			adc_indx = 0;
 80008d8:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <HAL_ADC_ConvCpltCallback+0x44>)
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
		}
	}
}
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000728 	.word	0x20000728
 80008ec:	2000072c 	.word	0x2000072c

080008f0 <display_number>:
//ADC End

void display_number(int led_flag, int _number) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOD,
 80008fa:	2201      	movs	r2, #1
 80008fc:	211e      	movs	r1, #30
 80008fe:	4813      	ldr	r0, [pc, #76]	; (800094c <display_number+0x5c>)
 8000900:	f003 f83c 	bl	800397c <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOD, led[led_flag], DISPLAY_ON);
 8000904:	4a12      	ldr	r2, [pc, #72]	; (8000950 <display_number+0x60>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800090c:	2200      	movs	r2, #0
 800090e:	4619      	mov	r1, r3
 8000910:	480e      	ldr	r0, [pc, #56]	; (800094c <display_number+0x5c>)
 8000912:	f003 f833 	bl	800397c <HAL_GPIO_WritePin>
	if (_number != 0) {
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d009      	beq.n	8000930 <display_number+0x40>
		HAL_GPIO_WritePin(GPIOD, digits[_number].pattern, GPIO_PIN_SET);
 800091c:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <display_number+0x64>)
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	00db      	lsls	r3, r3, #3
 8000922:	4413      	add	r3, r2
 8000924:	889b      	ldrh	r3, [r3, #4]
 8000926:	2201      	movs	r2, #1
 8000928:	4619      	mov	r1, r3
 800092a:	4808      	ldr	r0, [pc, #32]	; (800094c <display_number+0x5c>)
 800092c:	f003 f826 	bl	800397c <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(GPIOD, digits[_number].anti_pattern, GPIO_PIN_RESET);
 8000930:	4a08      	ldr	r2, [pc, #32]	; (8000954 <display_number+0x64>)
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	00db      	lsls	r3, r3, #3
 8000936:	4413      	add	r3, r2
 8000938:	88db      	ldrh	r3, [r3, #6]
 800093a:	2200      	movs	r2, #0
 800093c:	4619      	mov	r1, r3
 800093e:	4803      	ldr	r0, [pc, #12]	; (800094c <display_number+0x5c>)
 8000940:	f003 f81c 	bl	800397c <HAL_GPIO_WritePin>
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	48000c00 	.word	0x48000c00
 8000950:	20000634 	.word	0x20000634
 8000954:	2000066c 	.word	0x2000066c

08000958 <init_display>:
		carrier[remainder %= 10];

	}while(val > 0);
}

void init_display() {
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,
 800095c:	2201      	movs	r2, #1
 800095e:	211e      	movs	r1, #30
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <init_display+0x14>)
 8000962:	f003 f80b 	bl	800397c <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	48000c00 	.word	0x48000c00

08000970 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b098      	sub	sp, #96	; 0x60
 8000974:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	struct digit _digits[10];
	_digits[0].number = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
	_digits[0].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
 800097a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800097e:	81fb      	strh	r3, [r7, #14]
			| GPIO_PIN_15;

	_digits[1].number = 1;
 8000980:	2301      	movs	r3, #1
 8000982:	613b      	str	r3, [r7, #16]
	_digits[1].pattern = GPIO_PIN_12;
 8000984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000988:	82bb      	strh	r3, [r7, #20]
	_digits[1].anti_pattern = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800098a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800098e:	82fb      	strh	r3, [r7, #22]

	_digits[2].number = 2;
 8000990:	2302      	movs	r3, #2
 8000992:	61bb      	str	r3, [r7, #24]
	_digits[2].pattern = GPIO_PIN_13;
 8000994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000998:	83bb      	strh	r3, [r7, #28]
	_digits[2].anti_pattern = GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15;
 800099a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800099e:	83fb      	strh	r3, [r7, #30]

	_digits[3].number = 3;
 80009a0:	2303      	movs	r3, #3
 80009a2:	623b      	str	r3, [r7, #32]
	_digits[3].pattern = GPIO_PIN_12 | GPIO_PIN_13;
 80009a4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80009a8:	84bb      	strh	r3, [r7, #36]	; 0x24
	_digits[3].anti_pattern = GPIO_PIN_14 | GPIO_PIN_15;
 80009aa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80009ae:	84fb      	strh	r3, [r7, #38]	; 0x26

	_digits[4].number = 4;
 80009b0:	2304      	movs	r3, #4
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
	_digits[4].pattern = GPIO_PIN_14;
 80009b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
	_digits[4].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15;
 80009ba:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80009be:	85fb      	strh	r3, [r7, #46]	; 0x2e

	_digits[5].number = 5;
 80009c0:	2305      	movs	r3, #5
 80009c2:	633b      	str	r3, [r7, #48]	; 0x30
	_digits[5].pattern = GPIO_PIN_12 | GPIO_PIN_14;
 80009c4:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80009c8:	86bb      	strh	r3, [r7, #52]	; 0x34
	_digits[5].anti_pattern = GPIO_PIN_13 | GPIO_PIN_15;
 80009ca:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80009ce:	86fb      	strh	r3, [r7, #54]	; 0x36

	_digits[6].number = 6;
 80009d0:	2306      	movs	r3, #6
 80009d2:	63bb      	str	r3, [r7, #56]	; 0x38
	_digits[6].pattern = GPIO_PIN_13 | GPIO_PIN_14;
 80009d4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80009d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
	_digits[6].anti_pattern = GPIO_PIN_12 | GPIO_PIN_15;
 80009da:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80009de:	87fb      	strh	r3, [r7, #62]	; 0x3e

	_digits[7].number = 7;
 80009e0:	2307      	movs	r3, #7
 80009e2:	643b      	str	r3, [r7, #64]	; 0x40
	_digits[7].pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 80009e4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80009e8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	_digits[7].anti_pattern = GPIO_PIN_15;
 80009ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009f0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

	_digits[8].number = 8;
 80009f4:	2308      	movs	r3, #8
 80009f6:	64bb      	str	r3, [r7, #72]	; 0x48
	_digits[8].pattern = GPIO_PIN_15;
 80009f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009fc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	_digits[8].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 8000a00:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000a04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	_digits[9].number = 9;
 8000a08:	2309      	movs	r3, #9
 8000a0a:	653b      	str	r3, [r7, #80]	; 0x50
	_digits[9].pattern = GPIO_PIN_12 | GPIO_PIN_15;
 8000a0c:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000a10:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	_digits[9].anti_pattern = GPIO_PIN_13 | GPIO_PIN_14;
 8000a14:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000a18:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	//initialize Global digits structure
	for (int i = 0; i < 10; i++) {
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000a20:	e00f      	b.n	8000a42 <main+0xd2>
		digits[i] = _digits[i];
 8000a22:	4931      	ldr	r1, [pc, #196]	; (8000ae8 <main+0x178>)
 8000a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000a28:	00d2      	lsls	r2, r2, #3
 8000a2a:	3260      	adds	r2, #96	; 0x60
 8000a2c:	443a      	add	r2, r7
 8000a2e:	00db      	lsls	r3, r3, #3
 8000a30:	440b      	add	r3, r1
 8000a32:	3a58      	subs	r2, #88	; 0x58
 8000a34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a38:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 0; i < 10; i++) {
 8000a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a3e:	3301      	adds	r3, #1
 8000a40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a44:	2b09      	cmp	r3, #9
 8000a46:	ddec      	ble.n	8000a22 <main+0xb2>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a48:	f001 f938 	bl	8001cbc <HAL_Init>

	/* USER CODE BEGIN Init */

	//Set 7-segment PINS
	led[0] = GPIO_PIN_1;
 8000a4c:	4b27      	ldr	r3, [pc, #156]	; (8000aec <main+0x17c>)
 8000a4e:	2202      	movs	r2, #2
 8000a50:	801a      	strh	r2, [r3, #0]
	led[1] = GPIO_PIN_2;
 8000a52:	4b26      	ldr	r3, [pc, #152]	; (8000aec <main+0x17c>)
 8000a54:	2204      	movs	r2, #4
 8000a56:	805a      	strh	r2, [r3, #2]
	led[2] = GPIO_PIN_3;
 8000a58:	4b24      	ldr	r3, [pc, #144]	; (8000aec <main+0x17c>)
 8000a5a:	2208      	movs	r2, #8
 8000a5c:	809a      	strh	r2, [r3, #4]
	led[3] = GPIO_PIN_4;
 8000a5e:	4b23      	ldr	r3, [pc, #140]	; (8000aec <main+0x17c>)
 8000a60:	2210      	movs	r2, #16
 8000a62:	80da      	strh	r2, [r3, #6]

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a64:	f000 f854 	bl	8000b10 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a68:	f000 fac4 	bl	8000ff4 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000a6c:	f000 f928 	bl	8000cc0 <MX_I2C1_Init>
	MX_SPI1_Init();
 8000a70:	f000 f966 	bl	8000d40 <MX_SPI1_Init>
	MX_USB_PCD_Init();
 8000a74:	f000 fa9c 	bl	8000fb0 <MX_USB_PCD_Init>
	MX_TIM1_Init();
 8000a78:	f000 f9a0 	bl	8000dbc <MX_TIM1_Init>
	MX_TIM2_Init();
 8000a7c:	f000 f9f2 	bl	8000e64 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8000a80:	f000 fa66 	bl	8000f50 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8000a84:	f000 f8ac 	bl	8000be0 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8000a88:	4819      	ldr	r0, [pc, #100]	; (8000af0 <main+0x180>)
 8000a8a:	f004 fec5 	bl	8005818 <HAL_TIM_Base_Start_IT>
	HAL_UART_Transmit_IT(&huart1,
 8000a8e:	222c      	movs	r2, #44	; 0x2c
 8000a90:	4918      	ldr	r1, [pc, #96]	; (8000af4 <main+0x184>)
 8000a92:	4819      	ldr	r0, [pc, #100]	; (8000af8 <main+0x188>)
 8000a94:	f006 f8c4 	bl	8006c20 <HAL_UART_Transmit_IT>
			"=============\nProgram Running\n=============\n", 44);
	HAL_UART_Receive_IT(&huart1, &d, 1);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	4918      	ldr	r1, [pc, #96]	; (8000afc <main+0x18c>)
 8000a9c:	4816      	ldr	r0, [pc, #88]	; (8000af8 <main+0x188>)
 8000a9e:	f006 f91d 	bl	8006cdc <HAL_UART_Receive_IT>
	initTonesDictionary();
 8000aa2:	f7ff fc81 	bl	80003a8 <initTonesDictionary>
	PWM_Start();
 8000aa6:	f000 fef3 	bl	8001890 <PWM_Start>
	int toneCount;
	melody = lookup(playlist, "tetris", 5, &toneCount);
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <main+0x190>)
 8000aac:	6818      	ldr	r0, [r3, #0]
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2205      	movs	r2, #5
 8000ab2:	4914      	ldr	r1, [pc, #80]	; (8000b04 <main+0x194>)
 8000ab4:	f7ff fc2a 	bl	800030c <lookup>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	4a13      	ldr	r2, [pc, #76]	; (8000b08 <main+0x198>)
 8000abc:	6013      	str	r3, [r2, #0]
	struct DictionaryNode *current = NULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	65bb      	str	r3, [r7, #88]	; 0x58
	current = lookupindex(playlist, 2);
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <main+0x190>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2102      	movs	r1, #2
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fc5a 	bl	8000382 <lookupindex>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	65bb      	str	r3, [r7, #88]	; 0x58
	Change_Melody(melody, toneCount);
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <main+0x198>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 ff9c 	bl	8001a18 <Change_Melody>

	HAL_ADC_Start_IT(&hadc1);
 8000ae0:	480a      	ldr	r0, [pc, #40]	; (8000b0c <main+0x19c>)
 8000ae2:	f001 fb45 	bl	8002170 <HAL_ADC_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000ae6:	e7fe      	b.n	8000ae6 <main+0x176>
 8000ae8:	2000066c 	.word	0x2000066c
 8000aec:	20000634 	.word	0x20000634
 8000af0:	20000224 	.word	0x20000224
 8000af4:	0800b9ec 	.word	0x0800b9ec
 8000af8:	200002bc 	.word	0x200002bc
 8000afc:	20000724 	.word	0x20000724
 8000b00:	20000118 	.word	0x20000118
 8000b04:	08008500 	.word	0x08008500
 8000b08:	20000630 	.word	0x20000630
 8000b0c:	2000011c 	.word	0x2000011c

08000b10 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b09e      	sub	sp, #120	; 0x78
 8000b14:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b1a:	2228      	movs	r2, #40	; 0x28
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f007 fbee 	bl	8008300 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b24:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000b34:	463b      	mov	r3, r7
 8000b36:	223c      	movs	r2, #60	; 0x3c
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f007 fbe0 	bl	8008300 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000b40:	2303      	movs	r3, #3
 8000b42:	653b      	str	r3, [r7, #80]	; 0x50
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b44:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b48:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b52:	2310      	movs	r3, #16
 8000b54:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b56:	2302      	movs	r3, #2
 8000b58:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b5e:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000b60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b64:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f003 f92e 	bl	8003dcc <HAL_RCC_OscConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0x6a>
		Error_Handler();
 8000b76:	f000 fc97 	bl	80014a8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b8a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000b90:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b94:	2101      	movs	r1, #1
 8000b96:	4618      	mov	r0, r3
 8000b98:	f004 f956 	bl	8004e48 <HAL_RCC_ClockConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0x96>
		Error_Handler();
 8000ba2:	f000 fc81 	bl	80014a8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <SystemClock_Config+0xcc>)
 8000ba8:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_TIM1
			| RCC_PERIPHCLK_ADC12;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000bb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bbc:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f004 fb75 	bl	80052b4 <HAL_RCCEx_PeriphCLKConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <SystemClock_Config+0xc4>
		Error_Handler();
 8000bd0:	f000 fc6a 	bl	80014a8 <Error_Handler>
	}
}
 8000bd4:	bf00      	nop
 8000bd6:	3778      	adds	r7, #120	; 0x78
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	000210a1 	.word	0x000210a1

08000be0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
 8000c00:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000c02:	4b2e      	ldr	r3, [pc, #184]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c08:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c0a:	4b2c      	ldr	r3, [pc, #176]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c10:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c16:	4b29      	ldr	r3, [pc, #164]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000c1c:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	765a      	strb	r2, [r3, #25]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c22:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c2a:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c30:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c36:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c42:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c50:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	761a      	strb	r2, [r3, #24]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c56:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000c5c:	4817      	ldr	r0, [pc, #92]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c5e:	f001 f8a7 	bl	8001db0 <HAL_ADC_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_ADC1_Init+0x8c>
		Error_Handler();
 8000c68:	f000 fc1e 	bl	80014a8 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	4811      	ldr	r0, [pc, #68]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000c78:	f002 f9c2 	bl	8003000 <HAL_ADCEx_MultiModeConfigChannel>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_ADC1_Init+0xa6>
		Error_Handler();
 8000c82:	f000 fc11 	bl	80014a8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8000c86:	2305      	movs	r3, #5
 8000c88:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000c92:	2306      	movs	r3, #6
 8000c94:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4806      	ldr	r0, [pc, #24]	; (8000cbc <MX_ADC1_Init+0xdc>)
 8000ca4:	f001 fec0 	bl	8002a28 <HAL_ADC_ConfigChannel>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_ADC1_Init+0xd2>
		Error_Handler();
 8000cae:	f000 fbfb 	bl	80014a8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	3728      	adds	r7, #40	; 0x28
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	2000011c 	.word	0x2000011c

08000cc0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cc6:	4a1c      	ldr	r2, [pc, #112]	; (8000d38 <MX_I2C1_Init+0x78>)
 8000cc8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000ccc:	4a1b      	ldr	r2, [pc, #108]	; (8000d3c <MX_I2C1_Init+0x7c>)
 8000cce:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000cd0:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cdc:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000cfa:	480e      	ldr	r0, [pc, #56]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cfc:	f002 fe6e 	bl	80039dc <HAL_I2C_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000d06:	f000 fbcf 	bl	80014a8 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4809      	ldr	r0, [pc, #36]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000d0e:	f002 fef4 	bl	8003afa <HAL_I2CEx_ConfigAnalogFilter>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000d18:	f000 fbc6 	bl	80014a8 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000d20:	f002 ff36 	bl	8003b90 <HAL_I2CEx_ConfigDigitalFilter>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000d2a:	f000 fbbd 	bl	80014a8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2000016c 	.word	0x2000016c
 8000d38:	40005400 	.word	0x40005400
 8000d3c:	2000090e 	.word	0x2000090e

08000d40 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d46:	4a1c      	ldr	r2, [pc, #112]	; (8000db8 <MX_SPI1_Init+0x78>)
 8000d48:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d50:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d5a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d5e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d66:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d72:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d76:	2208      	movs	r2, #8
 8000d78:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d8e:	2207      	movs	r2, #7
 8000d90:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000d9a:	2208      	movs	r2, #8
 8000d9c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_SPI1_Init+0x74>)
 8000da0:	f004 fc38 	bl	8005614 <HAL_SPI_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_SPI1_Init+0x6e>
		Error_Handler();
 8000daa:	f000 fb7d 	bl	80014a8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200001c0 	.word	0x200001c0
 8000db8:	40013000 	.word	0x40013000

08000dbc <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000dda:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <MX_TIM1_Init+0xa0>)
 8000ddc:	4a20      	ldr	r2, [pc, #128]	; (8000e60 <MX_TIM1_Init+0xa4>)
 8000dde:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 4800 - 1;
 8000de0:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <MX_TIM1_Init+0xa0>)
 8000de2:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000de6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de8:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <MX_TIM1_Init+0xa0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 5 - 1;
 8000dee:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <MX_TIM1_Init+0xa0>)
 8000df0:	2204      	movs	r2, #4
 8000df2:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df4:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <MX_TIM1_Init+0xa0>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <MX_TIM1_Init+0xa0>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e00:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <MX_TIM1_Init+0xa0>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000e06:	4815      	ldr	r0, [pc, #84]	; (8000e5c <MX_TIM1_Init+0xa0>)
 8000e08:	f004 fcaf 	bl	800576a <HAL_TIM_Base_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM1_Init+0x5a>
		Error_Handler();
 8000e12:	f000 fb49 	bl	80014a8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	4619      	mov	r1, r3
 8000e22:	480e      	ldr	r0, [pc, #56]	; (8000e5c <MX_TIM1_Init+0xa0>)
 8000e24:	f005 f8f8 	bl	8006018 <HAL_TIM_ConfigClockSource>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM1_Init+0x76>
		Error_Handler();
 8000e2e:	f000 fb3b 	bl	80014a8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	4619      	mov	r1, r3
 8000e42:	4806      	ldr	r0, [pc, #24]	; (8000e5c <MX_TIM1_Init+0xa0>)
 8000e44:	f005 fe00 	bl	8006a48 <HAL_TIMEx_MasterConfigSynchronization>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8000e4e:	f000 fb2b 	bl	80014a8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	3720      	adds	r7, #32
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000224 	.word	0x20000224
 8000e60:	40012c00 	.word	0x40012c00

08000e64 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08e      	sub	sp, #56	; 0x38
 8000e68:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000e6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000e84:	463b      	mov	r3, r7
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]
 8000e92:	615a      	str	r2, [r3, #20]
 8000e94:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000e96:	4b2d      	ldr	r3, [pc, #180]	; (8000f4c <MX_TIM2_Init+0xe8>)
 8000e98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e9c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000e9e:	4b2b      	ldr	r3, [pc, #172]	; (8000f4c <MX_TIM2_Init+0xe8>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea4:	4b29      	ldr	r3, [pc, #164]	; (8000f4c <MX_TIM2_Init+0xe8>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8000eaa:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <MX_TIM2_Init+0xe8>)
 8000eac:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb2:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <MX_TIM2_Init+0xe8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb8:	4b24      	ldr	r3, [pc, #144]	; (8000f4c <MX_TIM2_Init+0xe8>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000ebe:	4823      	ldr	r0, [pc, #140]	; (8000f4c <MX_TIM2_Init+0xe8>)
 8000ec0:	f004 fc53 	bl	800576a <HAL_TIM_Base_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM2_Init+0x6a>
		Error_Handler();
 8000eca:	f000 faed 	bl	80014a8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000ed4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ed8:	4619      	mov	r1, r3
 8000eda:	481c      	ldr	r0, [pc, #112]	; (8000f4c <MX_TIM2_Init+0xe8>)
 8000edc:	f005 f89c 	bl	8006018 <HAL_TIM_ConfigClockSource>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM2_Init+0x86>
		Error_Handler();
 8000ee6:	f000 fadf 	bl	80014a8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000eea:	4818      	ldr	r0, [pc, #96]	; (8000f4c <MX_TIM2_Init+0xe8>)
 8000eec:	f004 fcfe 	bl	80058ec <HAL_TIM_PWM_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM2_Init+0x96>
		Error_Handler();
 8000ef6:	f000 fad7 	bl	80014a8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	4619      	mov	r1, r3
 8000f08:	4810      	ldr	r0, [pc, #64]	; (8000f4c <MX_TIM2_Init+0xe8>)
 8000f0a:	f005 fd9d 	bl	8006a48 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8000f14:	f000 fac8 	bl	80014a8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f18:	2360      	movs	r3, #96	; 0x60
 8000f1a:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000f28:	463b      	mov	r3, r7
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4807      	ldr	r0, [pc, #28]	; (8000f4c <MX_TIM2_Init+0xe8>)
 8000f30:	f004 ff5e 	bl	8005df0 <HAL_TIM_PWM_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 8000f3a:	f000 fab5 	bl	80014a8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000f3e:	4803      	ldr	r0, [pc, #12]	; (8000f4c <MX_TIM2_Init+0xe8>)
 8000f40:	f000 fbe0 	bl	8001704 <HAL_TIM_MspPostInit>

}
 8000f44:	bf00      	nop
 8000f46:	3738      	adds	r7, #56	; 0x38
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000270 	.word	0x20000270

08000f50 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f56:	4a15      	ldr	r2, [pc, #84]	; (8000fac <MX_USART1_UART_Init+0x5c>)
 8000f58:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f60:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f76:	220c      	movs	r2, #12
 8000f78:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f94:	f005 fdf6 	bl	8006b84 <HAL_UART_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000f9e:	f000 fa83 	bl	80014a8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200002bc 	.word	0x200002bc
 8000fac:	40013800 	.word	0x40013800

08000fb0 <MX_USB_PCD_Init>:
/**
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <MX_USB_PCD_Init+0x3c>)
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <MX_USB_PCD_Init+0x40>)
 8000fb8:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_USB_PCD_Init+0x3c>)
 8000fbc:	2208      	movs	r2, #8
 8000fbe:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <MX_USB_PCD_Init+0x3c>)
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_USB_PCD_Init+0x3c>)
 8000fc8:	2202      	movs	r2, #2
 8000fca:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <MX_USB_PCD_Init+0x3c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_USB_PCD_Init+0x3c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK) {
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <MX_USB_PCD_Init+0x3c>)
 8000fda:	f002 fe25 	bl	8003c28 <HAL_PCD_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_USB_PCD_Init+0x38>
		Error_Handler();
 8000fe4:	f000 fa60 	bl	80014a8 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000344 	.word	0x20000344
 8000ff0:	40005c00 	.word	0x40005c00

08000ff4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08c      	sub	sp, #48	; 0x30
 8000ff8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800100a:	4b5e      	ldr	r3, [pc, #376]	; (8001184 <MX_GPIO_Init+0x190>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	4a5d      	ldr	r2, [pc, #372]	; (8001184 <MX_GPIO_Init+0x190>)
 8001010:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001014:	6153      	str	r3, [r2, #20]
 8001016:	4b5b      	ldr	r3, [pc, #364]	; (8001184 <MX_GPIO_Init+0x190>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101e:	61bb      	str	r3, [r7, #24]
 8001020:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001022:	4b58      	ldr	r3, [pc, #352]	; (8001184 <MX_GPIO_Init+0x190>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	4a57      	ldr	r2, [pc, #348]	; (8001184 <MX_GPIO_Init+0x190>)
 8001028:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800102c:	6153      	str	r3, [r2, #20]
 800102e:	4b55      	ldr	r3, [pc, #340]	; (8001184 <MX_GPIO_Init+0x190>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800103a:	4b52      	ldr	r3, [pc, #328]	; (8001184 <MX_GPIO_Init+0x190>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	4a51      	ldr	r2, [pc, #324]	; (8001184 <MX_GPIO_Init+0x190>)
 8001040:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001044:	6153      	str	r3, [r2, #20]
 8001046:	4b4f      	ldr	r3, [pc, #316]	; (8001184 <MX_GPIO_Init+0x190>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	4b4c      	ldr	r3, [pc, #304]	; (8001184 <MX_GPIO_Init+0x190>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	4a4b      	ldr	r2, [pc, #300]	; (8001184 <MX_GPIO_Init+0x190>)
 8001058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105c:	6153      	str	r3, [r2, #20]
 800105e:	4b49      	ldr	r3, [pc, #292]	; (8001184 <MX_GPIO_Init+0x190>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800106a:	4b46      	ldr	r3, [pc, #280]	; (8001184 <MX_GPIO_Init+0x190>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	4a45      	ldr	r2, [pc, #276]	; (8001184 <MX_GPIO_Init+0x190>)
 8001070:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001074:	6153      	str	r3, [r2, #20]
 8001076:	4b43      	ldr	r3, [pc, #268]	; (8001184 <MX_GPIO_Init+0x190>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	4b40      	ldr	r3, [pc, #256]	; (8001184 <MX_GPIO_Init+0x190>)
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	4a3f      	ldr	r2, [pc, #252]	; (8001184 <MX_GPIO_Init+0x190>)
 8001088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800108c:	6153      	str	r3, [r2, #20]
 800108e:	4b3d      	ldr	r3, [pc, #244]	; (8001184 <MX_GPIO_Init+0x190>)
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2108      	movs	r1, #8
 800109e:	483a      	ldr	r0, [pc, #232]	; (8001188 <MX_GPIO_Init+0x194>)
 80010a0:	f002 fc6c 	bl	800397c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 80010a4:	2200      	movs	r2, #0
 80010a6:	f24f 011e 	movw	r1, #61470	; 0xf01e
 80010aa:	4838      	ldr	r0, [pc, #224]	; (800118c <MX_GPIO_Init+0x198>)
 80010ac:	f002 fc66 	bl	800397c <HAL_GPIO_WritePin>
			GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_1
					| GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80010b0:	2308      	movs	r3, #8
 80010b2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	2301      	movs	r3, #1
 80010b6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	4619      	mov	r1, r3
 80010c6:	4830      	ldr	r0, [pc, #192]	; (8001188 <MX_GPIO_Init+0x194>)
 80010c8:	f002 fade 	bl	8003688 <HAL_GPIO_Init>

	/*Configure GPIO pins : MEMS_INT3_Pin MEMS_INT4_Pin */
	GPIO_InitStruct.Pin = MEMS_INT3_Pin | MEMS_INT4_Pin;
 80010cc:	2330      	movs	r3, #48	; 0x30
 80010ce:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010d0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80010d4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	4619      	mov	r1, r3
 80010e0:	4829      	ldr	r0, [pc, #164]	; (8001188 <MX_GPIO_Init+0x194>)
 80010e2:	f002 fad1 	bl	8003688 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA0 PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2;
 80010e6:	2305      	movs	r3, #5
 80010e8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010ea:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80010ee:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4619      	mov	r1, r3
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fe:	f002 fac3 	bl	8003688 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_3;
 8001102:	230a      	movs	r3, #10
 8001104:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001106:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800110a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800110c:	2302      	movs	r3, #2
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111a:	f002 fab5 	bl	8003688 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15
	 PD1 PD2 PD3 PD4 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15
 800111e:	f24f 031e 	movw	r3, #61470	; 0xf01e
 8001122:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	4619      	mov	r1, r3
 8001136:	4815      	ldr	r0, [pc, #84]	; (800118c <MX_GPIO_Init+0x198>)
 8001138:	f002 faa6 	bl	8003688 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	2006      	movs	r0, #6
 8001142:	f002 f9f4 	bl	800352e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001146:	2006      	movs	r0, #6
 8001148:	f002 fa0d 	bl	8003566 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	2100      	movs	r1, #0
 8001150:	2007      	movs	r0, #7
 8001152:	f002 f9ec 	bl	800352e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001156:	2007      	movs	r0, #7
 8001158:	f002 fa05 	bl	8003566 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	2008      	movs	r0, #8
 8001162:	f002 f9e4 	bl	800352e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8001166:	2008      	movs	r0, #8
 8001168:	f002 f9fd 	bl	8003566 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2100      	movs	r1, #0
 8001170:	2009      	movs	r0, #9
 8001172:	f002 f9dc 	bl	800352e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001176:	2009      	movs	r0, #9
 8001178:	f002 f9f5 	bl	8003566 <HAL_NVIC_EnableIRQ>

}
 800117c:	bf00      	nop
 800117e:	3730      	adds	r7, #48	; 0x30
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40021000 	.word	0x40021000
 8001188:	48001000 	.word	0x48001000
 800118c:	48000c00 	.word	0x48000c00

08001190 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 800119a:	f000 fde9 	bl	8001d70 <HAL_GetTick>
 800119e:	4603      	mov	r3, r0
 80011a0:	4a95      	ldr	r2, [pc, #596]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x268>)
 80011a2:	6013      	str	r3, [r2, #0]
	if ((GPIO_Pin == GPIO_PIN_1) && LED != 4) {
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d11d      	bne.n	80011e6 <HAL_GPIO_EXTI_Callback+0x56>
 80011aa:	4b94      	ldr	r3, [pc, #592]	; (80013fc <HAL_GPIO_EXTI_Callback+0x26c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	d019      	beq.n	80011e6 <HAL_GPIO_EXTI_Callback+0x56>

		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 80011b2:	4b91      	ldr	r3, [pc, #580]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x268>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4b92      	ldr	r3, [pc, #584]	; (8001400 <HAL_GPIO_EXTI_Callback+0x270>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80011c0:	f240 8114 	bls.w	80013ec <HAL_GPIO_EXTI_Callback+0x25c>
			if (programState == Paused) {
 80011c4:	4b8f      	ldr	r3, [pc, #572]	; (8001404 <HAL_GPIO_EXTI_Callback+0x274>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d103      	bne.n	80011d4 <HAL_GPIO_EXTI_Callback+0x44>
				programState = Resume;
 80011cc:	4b8d      	ldr	r3, [pc, #564]	; (8001404 <HAL_GPIO_EXTI_Callback+0x274>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 80011d2:	e10b      	b.n	80013ec <HAL_GPIO_EXTI_Callback+0x25c>
			} else if (programState == Resume) {
 80011d4:	4b8b      	ldr	r3, [pc, #556]	; (8001404 <HAL_GPIO_EXTI_Callback+0x274>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	f040 8107 	bne.w	80013ec <HAL_GPIO_EXTI_Callback+0x25c>
				programState = Paused;
 80011de:	4b89      	ldr	r3, [pc, #548]	; (8001404 <HAL_GPIO_EXTI_Callback+0x274>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 80011e4:	e102      	b.n	80013ec <HAL_GPIO_EXTI_Callback+0x25c>
			}
		}
	} else if ((GPIO_Pin == GPIO_PIN_3)) {
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	2b08      	cmp	r3, #8
 80011ea:	f040 80eb 	bne.w	80013c4 <HAL_GPIO_EXTI_Callback+0x234>

		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 80011ee:	4b82      	ldr	r3, [pc, #520]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x268>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4b83      	ldr	r3, [pc, #524]	; (8001400 <HAL_GPIO_EXTI_Callback+0x270>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80011fc:	f240 80f9 	bls.w	80013f2 <HAL_GPIO_EXTI_Callback+0x262>
			if (nextTurn < 6)
 8001200:	4b81      	ldr	r3, [pc, #516]	; (8001408 <HAL_GPIO_EXTI_Callback+0x278>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b05      	cmp	r3, #5
 8001206:	dc04      	bgt.n	8001212 <HAL_GPIO_EXTI_Callback+0x82>
				nextTurn++;
 8001208:	4b7f      	ldr	r3, [pc, #508]	; (8001408 <HAL_GPIO_EXTI_Callback+0x278>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	3301      	adds	r3, #1
 800120e:	4a7e      	ldr	r2, [pc, #504]	; (8001408 <HAL_GPIO_EXTI_Callback+0x278>)
 8001210:	6013      	str	r3, [r2, #0]
			if ((isCorrect == -1) && nextTurn == 6) {
 8001212:	4b7e      	ldr	r3, [pc, #504]	; (800140c <HAL_GPIO_EXTI_Callback+0x27c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121a:	d126      	bne.n	800126a <HAL_GPIO_EXTI_Callback+0xda>
 800121c:	4b7a      	ldr	r3, [pc, #488]	; (8001408 <HAL_GPIO_EXTI_Callback+0x278>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b06      	cmp	r3, #6
 8001222:	d122      	bne.n	800126a <HAL_GPIO_EXTI_Callback+0xda>
				for (int i = 0; i < 4; i++) {
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	e007      	b.n	800123a <HAL_GPIO_EXTI_Callback+0xaa>
					carrier[i] = 0;
 800122a:	4a79      	ldr	r2, [pc, #484]	; (8001410 <HAL_GPIO_EXTI_Callback+0x280>)
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	2100      	movs	r1, #0
 8001230:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int i = 0; i < 4; i++) {
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	3301      	adds	r3, #1
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	2b03      	cmp	r3, #3
 800123e:	ddf4      	ble.n	800122a <HAL_GPIO_EXTI_Callback+0x9a>
					//password[i] = 0;
				}
				//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8001240:	2200      	movs	r2, #0
 8001242:	2102      	movs	r1, #2
 8001244:	4873      	ldr	r0, [pc, #460]	; (8001414 <HAL_GPIO_EXTI_Callback+0x284>)
 8001246:	f002 fb99 	bl	800397c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2104      	movs	r1, #4
 800124e:	4871      	ldr	r0, [pc, #452]	; (8001414 <HAL_GPIO_EXTI_Callback+0x284>)
 8001250:	f002 fb94 	bl	800397c <HAL_GPIO_WritePin>
				LED = -1;
 8001254:	4b69      	ldr	r3, [pc, #420]	; (80013fc <HAL_GPIO_EXTI_Callback+0x26c>)
 8001256:	f04f 32ff 	mov.w	r2, #4294967295
 800125a:	601a      	str	r2, [r3, #0]
				nextTurn = 0;
 800125c:	4b6a      	ldr	r3, [pc, #424]	; (8001408 <HAL_GPIO_EXTI_Callback+0x278>)
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
				blink = 1;
 8001262:	4b6d      	ldr	r3, [pc, #436]	; (8001418 <HAL_GPIO_EXTI_Callback+0x288>)
 8001264:	2201      	movs	r2, #1
 8001266:	601a      	str	r2, [r3, #0]
				return;
 8001268:	e0c3      	b.n	80013f2 <HAL_GPIO_EXTI_Callback+0x262>
			} else if ((isCorrect != 0 && isCorrect != 1)) {
 800126a:	4b68      	ldr	r3, [pc, #416]	; (800140c <HAL_GPIO_EXTI_Callback+0x27c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 80a3 	beq.w	80013ba <HAL_GPIO_EXTI_Callback+0x22a>
 8001274:	4b65      	ldr	r3, [pc, #404]	; (800140c <HAL_GPIO_EXTI_Callback+0x27c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b01      	cmp	r3, #1
 800127a:	f000 809e 	beq.w	80013ba <HAL_GPIO_EXTI_Callback+0x22a>

				LED += 1;
 800127e:	4b5f      	ldr	r3, [pc, #380]	; (80013fc <HAL_GPIO_EXTI_Callback+0x26c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	3301      	adds	r3, #1
 8001284:	4a5d      	ldr	r2, [pc, #372]	; (80013fc <HAL_GPIO_EXTI_Callback+0x26c>)
 8001286:	6013      	str	r3, [r2, #0]
				if (LED == 4) {
 8001288:	4b5c      	ldr	r3, [pc, #368]	; (80013fc <HAL_GPIO_EXTI_Callback+0x26c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b04      	cmp	r3, #4
 800128e:	f040 8094 	bne.w	80013ba <HAL_GPIO_EXTI_Callback+0x22a>
					int bool = 1;
 8001292:	2301      	movs	r3, #1
 8001294:	60fb      	str	r3, [r7, #12]
					for (int i = 0; i < 4; i++) {
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	e04c      	b.n	8001336 <HAL_GPIO_EXTI_Callback+0x1a6>
						if (password[i] != carrier[i]) {
 800129c:	4a5f      	ldr	r2, [pc, #380]	; (800141c <HAL_GPIO_EXTI_Callback+0x28c>)
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012a4:	495a      	ldr	r1, [pc, #360]	; (8001410 <HAL_GPIO_EXTI_Callback+0x280>)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d03f      	beq.n	8001330 <HAL_GPIO_EXTI_Callback+0x1a0>
							bool = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
							logFailed[4] = carrier[0] + '0';
 80012b4:	4b56      	ldr	r3, [pc, #344]	; (8001410 <HAL_GPIO_EXTI_Callback+0x280>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	3330      	adds	r3, #48	; 0x30
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4b58      	ldr	r3, [pc, #352]	; (8001420 <HAL_GPIO_EXTI_Callback+0x290>)
 80012c0:	711a      	strb	r2, [r3, #4]
							logFailed[5] = carrier[1] + '0';
 80012c2:	4b53      	ldr	r3, [pc, #332]	; (8001410 <HAL_GPIO_EXTI_Callback+0x280>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	3330      	adds	r3, #48	; 0x30
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	4b54      	ldr	r3, [pc, #336]	; (8001420 <HAL_GPIO_EXTI_Callback+0x290>)
 80012ce:	715a      	strb	r2, [r3, #5]
							logFailed[6] = carrier[2] + '0';
 80012d0:	4b4f      	ldr	r3, [pc, #316]	; (8001410 <HAL_GPIO_EXTI_Callback+0x280>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	3330      	adds	r3, #48	; 0x30
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b51      	ldr	r3, [pc, #324]	; (8001420 <HAL_GPIO_EXTI_Callback+0x290>)
 80012dc:	719a      	strb	r2, [r3, #6]
							logFailed[7] = carrier[3] + '0';
 80012de:	4b4c      	ldr	r3, [pc, #304]	; (8001410 <HAL_GPIO_EXTI_Callback+0x280>)
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	3330      	adds	r3, #48	; 0x30
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b4d      	ldr	r3, [pc, #308]	; (8001420 <HAL_GPIO_EXTI_Callback+0x290>)
 80012ea:	71da      	strb	r2, [r3, #7]
							isCorrect = 0;
 80012ec:	4b47      	ldr	r3, [pc, #284]	; (800140c <HAL_GPIO_EXTI_Callback+0x27c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
							if (logStatus)
 80012f2:	4b4c      	ldr	r3, [pc, #304]	; (8001424 <HAL_GPIO_EXTI_Callback+0x294>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d004      	beq.n	8001304 <HAL_GPIO_EXTI_Callback+0x174>
								HAL_UART_Transmit_IT(&huart1, logFailed, 18);
 80012fa:	2212      	movs	r2, #18
 80012fc:	4948      	ldr	r1, [pc, #288]	; (8001420 <HAL_GPIO_EXTI_Callback+0x290>)
 80012fe:	484a      	ldr	r0, [pc, #296]	; (8001428 <HAL_GPIO_EXTI_Callback+0x298>)
 8001300:	f005 fc8e 	bl	8006c20 <HAL_UART_Transmit_IT>
							prevEnterTime = HAL_GetTick();
 8001304:	f000 fd34 	bl	8001d70 <HAL_GetTick>
 8001308:	4603      	mov	r3, r0
 800130a:	4a48      	ldr	r2, [pc, #288]	; (800142c <HAL_GPIO_EXTI_Callback+0x29c>)
 800130c:	6013      	str	r3, [r2, #0]
							wrongPassCounter++;
 800130e:	4b48      	ldr	r3, [pc, #288]	; (8001430 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	4a46      	ldr	r2, [pc, #280]	; (8001430 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001316:	6013      	str	r3, [r2, #0]
							buzzerEnterTime = HAL_GetTick();
 8001318:	f000 fd2a 	bl	8001d70 <HAL_GetTick>
 800131c:	4603      	mov	r3, r0
 800131e:	4a45      	ldr	r2, [pc, #276]	; (8001434 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001320:	6013      	str	r3, [r2, #0]
							if (alertStatus)
 8001322:	4b45      	ldr	r3, [pc, #276]	; (8001438 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d062      	beq.n	80013f0 <HAL_GPIO_EXTI_Callback+0x260>
								PWM_Start();
 800132a:	f000 fab1 	bl	8001890 <PWM_Start>
							return;
 800132e:	e05f      	b.n	80013f0 <HAL_GPIO_EXTI_Callback+0x260>
					for (int i = 0; i < 4; i++) {
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	3301      	adds	r3, #1
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	2b03      	cmp	r3, #3
 800133a:	ddaf      	ble.n	800129c <HAL_GPIO_EXTI_Callback+0x10c>
						}
					}
					if (bool) {
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d03b      	beq.n	80013ba <HAL_GPIO_EXTI_Callback+0x22a>
						logCorrect[4] = carrier[0] + '0';
 8001342:	4b33      	ldr	r3, [pc, #204]	; (8001410 <HAL_GPIO_EXTI_Callback+0x280>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	3330      	adds	r3, #48	; 0x30
 800134a:	b2da      	uxtb	r2, r3
 800134c:	4b3b      	ldr	r3, [pc, #236]	; (800143c <HAL_GPIO_EXTI_Callback+0x2ac>)
 800134e:	711a      	strb	r2, [r3, #4]
						logCorrect[5] = carrier[1] + '0';
 8001350:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <HAL_GPIO_EXTI_Callback+0x280>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	3330      	adds	r3, #48	; 0x30
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4b38      	ldr	r3, [pc, #224]	; (800143c <HAL_GPIO_EXTI_Callback+0x2ac>)
 800135c:	715a      	strb	r2, [r3, #5]
						logCorrect[6] = carrier[2] + '0';
 800135e:	4b2c      	ldr	r3, [pc, #176]	; (8001410 <HAL_GPIO_EXTI_Callback+0x280>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	3330      	adds	r3, #48	; 0x30
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b34      	ldr	r3, [pc, #208]	; (800143c <HAL_GPIO_EXTI_Callback+0x2ac>)
 800136a:	719a      	strb	r2, [r3, #6]
						logCorrect[7] = carrier[3] + '0';
 800136c:	4b28      	ldr	r3, [pc, #160]	; (8001410 <HAL_GPIO_EXTI_Callback+0x280>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	3330      	adds	r3, #48	; 0x30
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b31      	ldr	r3, [pc, #196]	; (800143c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001378:	71da      	strb	r2, [r3, #7]
						isCorrect = 1;
 800137a:	4b24      	ldr	r3, [pc, #144]	; (800140c <HAL_GPIO_EXTI_Callback+0x27c>)
 800137c:	2201      	movs	r2, #1
 800137e:	601a      	str	r2, [r3, #0]
						if (logStatus)
 8001380:	4b28      	ldr	r3, [pc, #160]	; (8001424 <HAL_GPIO_EXTI_Callback+0x294>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d004      	beq.n	8001392 <HAL_GPIO_EXTI_Callback+0x202>
							HAL_UART_Transmit_IT(&huart1, logCorrect, 19);
 8001388:	2213      	movs	r2, #19
 800138a:	492c      	ldr	r1, [pc, #176]	; (800143c <HAL_GPIO_EXTI_Callback+0x2ac>)
 800138c:	4826      	ldr	r0, [pc, #152]	; (8001428 <HAL_GPIO_EXTI_Callback+0x298>)
 800138e:	f005 fc47 	bl	8006c20 <HAL_UART_Transmit_IT>
						prevEnterTime = HAL_GetTick();
 8001392:	f000 fced 	bl	8001d70 <HAL_GetTick>
 8001396:	4603      	mov	r3, r0
 8001398:	4a24      	ldr	r2, [pc, #144]	; (800142c <HAL_GPIO_EXTI_Callback+0x29c>)
 800139a:	6013      	str	r3, [r2, #0]
						buzzerEnterTime = HAL_GetTick();
 800139c:	f000 fce8 	bl	8001d70 <HAL_GetTick>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4a24      	ldr	r2, [pc, #144]	; (8001434 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80013a4:	6013      	str	r3, [r2, #0]
						if (alertStatus)
 80013a6:	4b24      	ldr	r3, [pc, #144]	; (8001438 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_GPIO_EXTI_Callback+0x222>
							PWM_Start();
 80013ae:	f000 fa6f 	bl	8001890 <PWM_Start>
						wrongPassCounter = 0;
 80013b2:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
						return;
 80013b8:	e01b      	b.n	80013f2 <HAL_GPIO_EXTI_Callback+0x262>
					}
				}
			}
			previousMillis = currentMillis;
 80013ba:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x268>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a10      	ldr	r2, [pc, #64]	; (8001400 <HAL_GPIO_EXTI_Callback+0x270>)
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	e016      	b.n	80013f2 <HAL_GPIO_EXTI_Callback+0x262>
		}

	} else if (GPIO_Pin == GPIO_PIN_0 && isCorrect == 0) {
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d113      	bne.n	80013f2 <HAL_GPIO_EXTI_Callback+0x262>
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <HAL_GPIO_EXTI_Callback+0x27c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10f      	bne.n	80013f2 <HAL_GPIO_EXTI_Callback+0x262>
		blink = 0;
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <HAL_GPIO_EXTI_Callback+0x288>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
		isCorrect = -1;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <HAL_GPIO_EXTI_Callback+0x27c>)
 80013da:	f04f 32ff 	mov.w	r2, #4294967295
 80013de:	601a      	str	r2, [r3, #0]
		prevEnterTime = HAL_GetTick();
 80013e0:	f000 fcc6 	bl	8001d70 <HAL_GetTick>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4a11      	ldr	r2, [pc, #68]	; (800142c <HAL_GPIO_EXTI_Callback+0x29c>)
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	e002      	b.n	80013f2 <HAL_GPIO_EXTI_Callback+0x262>
		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 80013ec:	bf00      	nop
 80013ee:	e000      	b.n	80013f2 <HAL_GPIO_EXTI_Callback+0x262>
							return;
 80013f0:	bf00      	nop
//		PWM_Stop();
	}
}
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000654 	.word	0x20000654
 80013fc:	20000668 	.word	0x20000668
 8001400:	20000650 	.word	0x20000650
 8001404:	200006bc 	.word	0x200006bc
 8001408:	20000658 	.word	0x20000658
 800140c:	20000040 	.word	0x20000040
 8001410:	2000063c 	.word	0x2000063c
 8001414:	48000800 	.word	0x48000800
 8001418:	20000044 	.word	0x20000044
 800141c:	20000000 	.word	0x20000000
 8001420:	20000024 	.word	0x20000024
 8001424:	20000038 	.word	0x20000038
 8001428:	200002bc 	.word	0x200002bc
 800142c:	20000660 	.word	0x20000660
 8001430:	2000064c 	.word	0x2000064c
 8001434:	20000664 	.word	0x20000664
 8001438:	2000003c 	.word	0x2000003c
 800143c:	20000010 	.word	0x20000010

08001440 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a12      	ldr	r2, [pc, #72]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d11d      	bne.n	800148e <HAL_TIM_PeriodElapsedCallback+0x4e>

		if (programState != Paused) {
 8001452:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d019      	beq.n	800148e <HAL_TIM_PeriodElapsedCallback+0x4e>
			display_number(index, carrier[index]);
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4910      	ldr	r1, [pc, #64]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001464:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001468:	4619      	mov	r1, r3
 800146a:	4610      	mov	r0, r2
 800146c:	f7ff fa40 	bl	80008f0 <display_number>
			if (index == 4) {
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b04      	cmp	r3, #4
 8001476:	d105      	bne.n	8001484 <HAL_TIM_PeriodElapsedCallback+0x44>
				index = 0;
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
				init_display();
 800147e:	f7ff fa6b 	bl	8000958 <init_display>
			} else {
				++index;
			}
		}
	}
}
 8001482:	e004      	b.n	800148e <HAL_TIM_PeriodElapsedCallback+0x4e>
				++index;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	3301      	adds	r3, #1
 800148a:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800148c:	6013      	str	r3, [r2, #0]
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40012c00 	.word	0x40012c00
 800149c:	200006bc 	.word	0x200006bc
 80014a0:	2000065c 	.word	0x2000065c
 80014a4:	2000063c 	.word	0x2000063c

080014a8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ac:	b672      	cpsid	i
}
 80014ae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80014b0:	e7fe      	b.n	80014b0 <Error_Handler+0x8>
	...

080014b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <HAL_MspInit+0x44>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <HAL_MspInit+0x44>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6193      	str	r3, [r2, #24]
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <HAL_MspInit+0x44>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_MspInit+0x44>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	4a08      	ldr	r2, [pc, #32]	; (80014f8 <HAL_MspInit+0x44>)
 80014d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014dc:	61d3      	str	r3, [r2, #28]
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_MspInit+0x44>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014ea:	2007      	movs	r0, #7
 80014ec:	f002 f814 	bl	8003518 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40021000 	.word	0x40021000

080014fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800151c:	d12b      	bne.n	8001576 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_ADC_MspInit+0x84>)
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	4a17      	ldr	r2, [pc, #92]	; (8001580 <HAL_ADC_MspInit+0x84>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001528:	6153      	str	r3, [r2, #20]
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_ADC_MspInit+0x84>)
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_ADC_MspInit+0x84>)
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	4a11      	ldr	r2, [pc, #68]	; (8001580 <HAL_ADC_MspInit+0x84>)
 800153c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001540:	6153      	str	r3, [r2, #20]
 8001542:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <HAL_ADC_MspInit+0x84>)
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800154e:	2310      	movs	r3, #16
 8001550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001552:	2303      	movs	r3, #3
 8001554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4619      	mov	r1, r3
 8001560:	4808      	ldr	r0, [pc, #32]	; (8001584 <HAL_ADC_MspInit+0x88>)
 8001562:	f002 f891 	bl	8003688 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	2012      	movs	r0, #18
 800156c:	f001 ffdf 	bl	800352e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001570:	2012      	movs	r0, #18
 8001572:	f001 fff8 	bl	8003566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001576:	bf00      	nop
 8001578:	3728      	adds	r7, #40	; 0x28
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40021000 	.word	0x40021000
 8001584:	48001400 	.word	0x48001400

08001588 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a17      	ldr	r2, [pc, #92]	; (8001604 <HAL_I2C_MspInit+0x7c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d127      	bne.n	80015fa <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <HAL_I2C_MspInit+0x80>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	4a16      	ldr	r2, [pc, #88]	; (8001608 <HAL_I2C_MspInit+0x80>)
 80015b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b4:	6153      	str	r3, [r2, #20]
 80015b6:	4b14      	ldr	r3, [pc, #80]	; (8001608 <HAL_I2C_MspInit+0x80>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80015c2:	23c0      	movs	r3, #192	; 0xc0
 80015c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c6:	2312      	movs	r3, #18
 80015c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015d2:	2304      	movs	r3, #4
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	480b      	ldr	r0, [pc, #44]	; (800160c <HAL_I2C_MspInit+0x84>)
 80015de:	f002 f853 	bl	8003688 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_I2C_MspInit+0x80>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	4a08      	ldr	r2, [pc, #32]	; (8001608 <HAL_I2C_MspInit+0x80>)
 80015e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ec:	61d3      	str	r3, [r2, #28]
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_I2C_MspInit+0x80>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015fa:	bf00      	nop
 80015fc:	3728      	adds	r7, #40	; 0x28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40005400 	.word	0x40005400
 8001608:	40021000 	.word	0x40021000
 800160c:	48000400 	.word	0x48000400

08001610 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	; 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a17      	ldr	r2, [pc, #92]	; (800168c <HAL_SPI_MspInit+0x7c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d128      	bne.n	8001684 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_SPI_MspInit+0x80>)
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	4a16      	ldr	r2, [pc, #88]	; (8001690 <HAL_SPI_MspInit+0x80>)
 8001638:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800163c:	6193      	str	r3, [r2, #24]
 800163e:	4b14      	ldr	r3, [pc, #80]	; (8001690 <HAL_SPI_MspInit+0x80>)
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	4b11      	ldr	r3, [pc, #68]	; (8001690 <HAL_SPI_MspInit+0x80>)
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	4a10      	ldr	r2, [pc, #64]	; (8001690 <HAL_SPI_MspInit+0x80>)
 8001650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001654:	6153      	str	r3, [r2, #20]
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <HAL_SPI_MspInit+0x80>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001662:	23e0      	movs	r3, #224	; 0xe0
 8001664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800166e:	2303      	movs	r3, #3
 8001670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001672:	2305      	movs	r3, #5
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001680:	f002 f802 	bl	8003688 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001684:	bf00      	nop
 8001686:	3728      	adds	r7, #40	; 0x28
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40013000 	.word	0x40013000
 8001690:	40021000 	.word	0x40021000

08001694 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a16      	ldr	r2, [pc, #88]	; (80016fc <HAL_TIM_Base_MspInit+0x68>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d114      	bne.n	80016d0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016a6:	4b16      	ldr	r3, [pc, #88]	; (8001700 <HAL_TIM_Base_MspInit+0x6c>)
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	4a15      	ldr	r2, [pc, #84]	; (8001700 <HAL_TIM_Base_MspInit+0x6c>)
 80016ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016b0:	6193      	str	r3, [r2, #24]
 80016b2:	4b13      	ldr	r3, [pc, #76]	; (8001700 <HAL_TIM_Base_MspInit+0x6c>)
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	2019      	movs	r0, #25
 80016c4:	f001 ff33 	bl	800352e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80016c8:	2019      	movs	r0, #25
 80016ca:	f001 ff4c 	bl	8003566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016ce:	e010      	b.n	80016f2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d8:	d10b      	bne.n	80016f2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_TIM_Base_MspInit+0x6c>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	4a08      	ldr	r2, [pc, #32]	; (8001700 <HAL_TIM_Base_MspInit+0x6c>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	61d3      	str	r3, [r2, #28]
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_TIM_Base_MspInit+0x6c>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40012c00 	.word	0x40012c00
 8001700:	40021000 	.word	0x40021000

08001704 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001724:	d11d      	bne.n	8001762 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <HAL_TIM_MspPostInit+0x68>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	4a10      	ldr	r2, [pc, #64]	; (800176c <HAL_TIM_MspPostInit+0x68>)
 800172c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001730:	6153      	str	r3, [r2, #20]
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <HAL_TIM_MspPostInit+0x68>)
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800173e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001742:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2300      	movs	r3, #0
 800174e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001750:	2301      	movs	r3, #1
 8001752:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	4619      	mov	r1, r3
 800175a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175e:	f001 ff93 	bl	8003688 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001762:	bf00      	nop
 8001764:	3720      	adds	r7, #32
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000

08001770 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a1b      	ldr	r2, [pc, #108]	; (80017fc <HAL_UART_MspInit+0x8c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d12f      	bne.n	80017f2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001792:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_UART_MspInit+0x90>)
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	4a1a      	ldr	r2, [pc, #104]	; (8001800 <HAL_UART_MspInit+0x90>)
 8001798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800179c:	6193      	str	r3, [r2, #24]
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_UART_MspInit+0x90>)
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <HAL_UART_MspInit+0x90>)
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	4a14      	ldr	r2, [pc, #80]	; (8001800 <HAL_UART_MspInit+0x90>)
 80017b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017b4:	6153      	str	r3, [r2, #20]
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_UART_MspInit+0x90>)
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80017c2:	2330      	movs	r3, #48	; 0x30
 80017c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ce:	2303      	movs	r3, #3
 80017d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017d2:	2307      	movs	r3, #7
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4619      	mov	r1, r3
 80017dc:	4809      	ldr	r0, [pc, #36]	; (8001804 <HAL_UART_MspInit+0x94>)
 80017de:	f001 ff53 	bl	8003688 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	2025      	movs	r0, #37	; 0x25
 80017e8:	f001 fea1 	bl	800352e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017ec:	2025      	movs	r0, #37	; 0x25
 80017ee:	f001 feba 	bl	8003566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017f2:	bf00      	nop
 80017f4:	3728      	adds	r7, #40	; 0x28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40013800 	.word	0x40013800
 8001800:	40021000 	.word	0x40021000
 8001804:	48000800 	.word	0x48000800

08001808 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	; 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a18      	ldr	r2, [pc, #96]	; (8001888 <HAL_PCD_MspInit+0x80>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d129      	bne.n	800187e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <HAL_PCD_MspInit+0x84>)
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	4a17      	ldr	r2, [pc, #92]	; (800188c <HAL_PCD_MspInit+0x84>)
 8001830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001834:	6153      	str	r3, [r2, #20]
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_PCD_MspInit+0x84>)
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001842:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001850:	2303      	movs	r3, #3
 8001852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001854:	230e      	movs	r3, #14
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4619      	mov	r1, r3
 800185e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001862:	f001 ff11 	bl	8003688 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_PCD_MspInit+0x84>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	4a08      	ldr	r2, [pc, #32]	; (800188c <HAL_PCD_MspInit+0x84>)
 800186c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001870:	61d3      	str	r3, [r2, #28]
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_PCD_MspInit+0x84>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800187e:	bf00      	nop
 8001880:	3728      	adds	r7, #40	; 0x28
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40005c00 	.word	0x40005c00
 800188c:	40021000 	.word	0x40021000

08001890 <PWM_Start>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PWM_Start() {
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <PWM_Start+0x18>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a04      	ldr	r2, [pc, #16]	; (80018ac <PWM_Start+0x1c>)
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	4611      	mov	r1, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f004 f886 	bl	80059b0 <HAL_TIM_PWM_Start>
}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000084 	.word	0x20000084
 80018ac:	200007f4 	.word	0x200007f4

080018b0 <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	460a      	mov	r2, r1
 80018ba:	80fb      	strh	r3, [r7, #6]
 80018bc:	4613      	mov	r3, r2
 80018be:	80bb      	strh	r3, [r7, #4]
	if (pwm_freq == 0 || pwm_freq > 20000) {
 80018c0:	88fb      	ldrh	r3, [r7, #6]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d004      	beq.n	80018d0 <PWM_Change_Tone+0x20>
 80018c6:	88fb      	ldrh	r3, [r7, #6]
 80018c8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d937      	bls.n	8001940 <PWM_Change_Tone+0x90>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 80018d0:	4b4e      	ldr	r3, [pc, #312]	; (8001a0c <PWM_Change_Tone+0x15c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d105      	bne.n	80018e4 <PWM_Change_Tone+0x34>
 80018d8:	4b4d      	ldr	r3, [pc, #308]	; (8001a10 <PWM_Change_Tone+0x160>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2200      	movs	r2, #0
 80018e0:	635a      	str	r2, [r3, #52]	; 0x34
 80018e2:	e08e      	b.n	8001a02 <PWM_Change_Tone+0x152>
 80018e4:	4b49      	ldr	r3, [pc, #292]	; (8001a0c <PWM_Change_Tone+0x15c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d105      	bne.n	80018f8 <PWM_Change_Tone+0x48>
 80018ec:	4b48      	ldr	r3, [pc, #288]	; (8001a10 <PWM_Change_Tone+0x160>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	2300      	movs	r3, #0
 80018f4:	6393      	str	r3, [r2, #56]	; 0x38
 80018f6:	e084      	b.n	8001a02 <PWM_Change_Tone+0x152>
 80018f8:	4b44      	ldr	r3, [pc, #272]	; (8001a0c <PWM_Change_Tone+0x15c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d105      	bne.n	800190c <PWM_Change_Tone+0x5c>
 8001900:	4b43      	ldr	r3, [pc, #268]	; (8001a10 <PWM_Change_Tone+0x160>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	2300      	movs	r3, #0
 8001908:	63d3      	str	r3, [r2, #60]	; 0x3c
 800190a:	e07a      	b.n	8001a02 <PWM_Change_Tone+0x152>
 800190c:	4b3f      	ldr	r3, [pc, #252]	; (8001a0c <PWM_Change_Tone+0x15c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b0c      	cmp	r3, #12
 8001912:	d105      	bne.n	8001920 <PWM_Change_Tone+0x70>
 8001914:	4b3e      	ldr	r3, [pc, #248]	; (8001a10 <PWM_Change_Tone+0x160>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	2300      	movs	r3, #0
 800191c:	6413      	str	r3, [r2, #64]	; 0x40
 800191e:	e070      	b.n	8001a02 <PWM_Change_Tone+0x152>
 8001920:	4b3a      	ldr	r3, [pc, #232]	; (8001a0c <PWM_Change_Tone+0x15c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b10      	cmp	r3, #16
 8001926:	d105      	bne.n	8001934 <PWM_Change_Tone+0x84>
 8001928:	4b39      	ldr	r3, [pc, #228]	; (8001a10 <PWM_Change_Tone+0x160>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	2300      	movs	r3, #0
 8001930:	6593      	str	r3, [r2, #88]	; 0x58
 8001932:	e066      	b.n	8001a02 <PWM_Change_Tone+0x152>
 8001934:	4b36      	ldr	r3, [pc, #216]	; (8001a10 <PWM_Change_Tone+0x160>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	2300      	movs	r3, #0
 800193c:	65d3      	str	r3, [r2, #92]	; 0x5c
 800193e:	e060      	b.n	8001a02 <PWM_Change_Tone+0x152>
	} else {
		const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 8001940:	f003 fbfe 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 8001944:	61f8      	str	r0, [r7, #28]
		const uint16_t prescaler = 1;
 8001946:	2301      	movs	r3, #1
 8001948:	837b      	strh	r3, [r7, #26]
		const uint32_t timer_clock = internal_clock_freq / prescaler;
 800194a:	8b7b      	ldrh	r3, [r7, #26]
 800194c:	69fa      	ldr	r2, [r7, #28]
 800194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001952:	617b      	str	r3, [r7, #20]
		const uint32_t period_cycles = timer_clock / pwm_freq;
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	fbb2 f3f3 	udiv	r3, r2, r3
 800195c:	613b      	str	r3, [r7, #16]
		const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 800195e:	88bb      	ldrh	r3, [r7, #4]
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	fb02 f303 	mul.w	r3, r2, r3
 8001966:	4a2b      	ldr	r2, [pc, #172]	; (8001a14 <PWM_Change_Tone+0x164>)
 8001968:	fba2 2303 	umull	r2, r3, r2, r3
 800196c:	09db      	lsrs	r3, r3, #7
 800196e:	60fb      	str	r3, [r7, #12]

		pwm_timer->Instance->PSC = prescaler - 1;
 8001970:	8b7b      	ldrh	r3, [r7, #26]
 8001972:	1e5a      	subs	r2, r3, #1
 8001974:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <PWM_Change_Tone+0x160>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
		pwm_timer->Instance->ARR = period_cycles - 1;
 800197c:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <PWM_Change_Tone+0x160>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	3a01      	subs	r2, #1
 8001986:	62da      	str	r2, [r3, #44]	; 0x2c
		pwm_timer->Instance->EGR = TIM_EGR_UG;
 8001988:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <PWM_Change_Tone+0x160>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2201      	movs	r2, #1
 8001990:	615a      	str	r2, [r3, #20]
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001992:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <PWM_Change_Tone+0x15c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d105      	bne.n	80019a6 <PWM_Change_Tone+0xf6>
 800199a:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <PWM_Change_Tone+0x160>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80019a4:	e02d      	b.n	8001a02 <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80019a6:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <PWM_Change_Tone+0x15c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d105      	bne.n	80019ba <PWM_Change_Tone+0x10a>
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <PWM_Change_Tone+0x160>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80019b8:	e023      	b.n	8001a02 <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80019ba:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <PWM_Change_Tone+0x15c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d105      	bne.n	80019ce <PWM_Change_Tone+0x11e>
 80019c2:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <PWM_Change_Tone+0x160>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80019cc:	e019      	b.n	8001a02 <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80019ce:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <PWM_Change_Tone+0x15c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b0c      	cmp	r3, #12
 80019d4:	d105      	bne.n	80019e2 <PWM_Change_Tone+0x132>
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <PWM_Change_Tone+0x160>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6413      	str	r3, [r2, #64]	; 0x40
}
 80019e0:	e00f      	b.n	8001a02 <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <PWM_Change_Tone+0x15c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b10      	cmp	r3, #16
 80019e8:	d105      	bne.n	80019f6 <PWM_Change_Tone+0x146>
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <PWM_Change_Tone+0x160>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6593      	str	r3, [r2, #88]	; 0x58
}
 80019f4:	e005      	b.n	8001a02 <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <PWM_Change_Tone+0x160>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001a00:	e7ff      	b.n	8001a02 <PWM_Change_Tone+0x152>
 8001a02:	bf00      	nop
 8001a04:	3720      	adds	r7, #32
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200007f4 	.word	0x200007f4
 8001a10:	20000084 	.word	0x20000084
 8001a14:	10624dd3 	.word	0x10624dd3

08001a18 <Change_Melody>:

void Change_Melody(const struct Tone *melody, uint16_t tone_count) {
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	807b      	strh	r3, [r7, #2]
	melody_ptr = melody;
 8001a24:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <Change_Melody+0x2c>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6013      	str	r3, [r2, #0]
	melody_tone_count = tone_count;
 8001a2a:	4a07      	ldr	r2, [pc, #28]	; (8001a48 <Change_Melody+0x30>)
 8001a2c:	887b      	ldrh	r3, [r7, #2]
 8001a2e:	8013      	strh	r3, [r2, #0]
	current_tone_number = 0;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <Change_Melody+0x34>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	801a      	strh	r2, [r3, #0]
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	200007f8 	.word	0x200007f8
 8001a48:	200007fc 	.word	0x200007fc
 8001a4c:	200007fe 	.word	0x200007fe

08001a50 <Update_Melody>:

void Update_Melody() {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
	if (programState != Paused && programState != IDLE) {
 8001a56:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <Update_Melody+0x84>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d035      	beq.n	8001aca <Update_Melody+0x7a>
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <Update_Melody+0x84>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d031      	beq.n	8001aca <Update_Melody+0x7a>
		if ((HAL_GetTick() > current_tone_end)
 8001a66:	f000 f983 	bl	8001d70 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <Update_Melody+0x88>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d92a      	bls.n	8001aca <Update_Melody+0x7a>
				&& (current_tone_number < melody_tone_count)) {
 8001a74:	4b19      	ldr	r3, [pc, #100]	; (8001adc <Update_Melody+0x8c>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <Update_Melody+0x90>)
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d222      	bcs.n	8001aca <Update_Melody+0x7a>
			const struct Tone active_tone = *(melody_ptr + current_tone_number);
 8001a84:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <Update_Melody+0x94>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <Update_Melody+0x8c>)
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	441a      	add	r2, r3
 8001a92:	463b      	mov	r3, r7
 8001a94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a98:	e883 0003 	stmia.w	r3, {r0, r1}
			PWM_Change_Tone(active_tone.frequency, volume);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	4a11      	ldr	r2, [pc, #68]	; (8001ae8 <Update_Melody+0x98>)
 8001aa2:	8812      	ldrh	r2, [r2, #0]
 8001aa4:	b292      	uxth	r2, r2
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff01 	bl	80018b0 <PWM_Change_Tone>
			current_tone_end = HAL_GetTick() + active_tone.duration;
 8001aae:	f000 f95f 	bl	8001d70 <HAL_GetTick>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <Update_Melody+0x88>)
 8001aba:	6013      	str	r3, [r2, #0]
			current_tone_number++;
 8001abc:	4b07      	ldr	r3, [pc, #28]	; (8001adc <Update_Melody+0x8c>)
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	4b05      	ldr	r3, [pc, #20]	; (8001adc <Update_Melody+0x8c>)
 8001ac8:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200006bc 	.word	0x200006bc
 8001ad8:	20000800 	.word	0x20000800
 8001adc:	200007fe 	.word	0x200007fe
 8001ae0:	200007fc 	.word	0x200007fc
 8001ae4:	200007f8 	.word	0x200007f8
 8001ae8:	20000088 	.word	0x20000088

08001aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001af0:	e7fe      	b.n	8001af0 <NMI_Handler+0x4>

08001af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <HardFault_Handler+0x4>

08001af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <MemManage_Handler+0x4>

08001afe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <BusFault_Handler+0x4>

08001b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <UsageFault_Handler+0x4>

08001b0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b38:	f000 f906 	bl	8001d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	Update_Melody();
 8001b3c:	f7ff ff88 	bl	8001a50 <Update_Melody>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001b48:	2001      	movs	r0, #1
 8001b4a:	f001 ff2f 	bl	80039ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	if (HAL_GetTick() > last_button_press + 200) {
 8001b4e:	f000 f90f 	bl	8001d70 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <EXTI0_IRQHandler+0x28>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	33c8      	adds	r3, #200	; 0xc8
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d904      	bls.n	8001b68 <EXTI0_IRQHandler+0x24>
		last_button_press = HAL_GetTick();
 8001b5e:	f000 f907 	bl	8001d70 <HAL_GetTick>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4a01      	ldr	r2, [pc, #4]	; (8001b6c <EXTI0_IRQHandler+0x28>)
 8001b66:	6013      	str	r3, [r2, #0]

	}
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000804 	.word	0x20000804

08001b70 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001b74:	2002      	movs	r0, #2
 8001b76:	f001 ff19 	bl	80039ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001b82:	2004      	movs	r0, #4
 8001b84:	f001 ff12 	bl	80039ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001b90:	2008      	movs	r0, #8
 8001b92:	f001 ff0b 	bl	80039ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ba0:	4802      	ldr	r0, [pc, #8]	; (8001bac <ADC1_2_IRQHandler+0x10>)
 8001ba2:	f000 fc33 	bl	800240c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	2000011c 	.word	0x2000011c

08001bb0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bb4:	4802      	ldr	r0, [pc, #8]	; (8001bc0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001bb6:	f003 fffb 	bl	8005bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000224 	.word	0x20000224

08001bc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bc8:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <USART1_IRQHandler+0x10>)
 8001bca:	f005 f8cb 	bl	8006d64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200002bc 	.word	0x200002bc

08001bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be0:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <_sbrk+0x5c>)
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <_sbrk+0x60>)
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <_sbrk+0x64>)
 8001bf6:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <_sbrk+0x68>)
 8001bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d207      	bcs.n	8001c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c08:	f006 fb3a 	bl	8008280 <__errno>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	220c      	movs	r2, #12
 8001c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
 8001c16:	e009      	b.n	8001c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <_sbrk+0x64>)
 8001c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	2000a000 	.word	0x2000a000
 8001c38:	00000400 	.word	0x00000400
 8001c3c:	20000808 	.word	0x20000808
 8001c40:	20000820 	.word	0x20000820

08001c44 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <SystemInit+0x20>)
 8001c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4e:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <SystemInit+0x20>)
 8001c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ca0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c6c:	f7ff ffea 	bl	8001c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c70:	480c      	ldr	r0, [pc, #48]	; (8001ca4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c72:	490d      	ldr	r1, [pc, #52]	; (8001ca8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c74:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <LoopForever+0xe>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c78:	e002      	b.n	8001c80 <LoopCopyDataInit>

08001c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c7e:	3304      	adds	r3, #4

08001c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c84:	d3f9      	bcc.n	8001c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c88:	4c0a      	ldr	r4, [pc, #40]	; (8001cb4 <LoopForever+0x16>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c8c:	e001      	b.n	8001c92 <LoopFillZerobss>

08001c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c90:	3204      	adds	r2, #4

08001c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c94:	d3fb      	bcc.n	8001c8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c96:	f006 faf9 	bl	800828c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c9a:	f7fe fe69 	bl	8000970 <main>

08001c9e <LoopForever>:

LoopForever:
    b LoopForever
 8001c9e:	e7fe      	b.n	8001c9e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ca0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca8:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001cac:	0800ba5c 	.word	0x0800ba5c
  ldr r2, =_sbss
 8001cb0:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001cb4:	20000820 	.word	0x20000820

08001cb8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cb8:	e7fe      	b.n	8001cb8 <ADC3_IRQHandler>
	...

08001cbc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <HAL_Init+0x28>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <HAL_Init+0x28>)
 8001cc6:	f043 0310 	orr.w	r3, r3, #16
 8001cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f001 fc23 	bl	8003518 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f000 f808 	bl	8001ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd8:	f7ff fbec 	bl	80014b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40022000 	.word	0x40022000

08001ce8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_InitTick+0x54>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_InitTick+0x58>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d06:	4618      	mov	r0, r3
 8001d08:	f001 fc3b 	bl	8003582 <HAL_SYSTICK_Config>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00e      	b.n	8001d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b0f      	cmp	r3, #15
 8001d1a:	d80a      	bhi.n	8001d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	f001 fc03 	bl	800352e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d28:	4a06      	ldr	r2, [pc, #24]	; (8001d44 <HAL_InitTick+0x5c>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e000      	b.n	8001d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	2000008c 	.word	0x2000008c
 8001d40:	20000094 	.word	0x20000094
 8001d44:	20000090 	.word	0x20000090

08001d48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_IncTick+0x20>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_IncTick+0x24>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <HAL_IncTick+0x24>)
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000094 	.word	0x20000094
 8001d6c:	2000080c 	.word	0x2000080c

08001d70 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return uwTick;  
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <HAL_GetTick+0x14>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	2000080c 	.word	0x2000080c

08001d88 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b09a      	sub	sp, #104	; 0x68
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e1c9      	b.n	8002164 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f003 0310 	and.w	r3, r3, #16
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d176      	bne.n	8001ed0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d152      	bne.n	8001e90 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff fb79 	bl	80014fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d13b      	bne.n	8001e90 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f001 fa47 	bl	80032ac <ADC_Disable>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	f003 0310 	and.w	r3, r3, #16
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d12f      	bne.n	8001e90 <HAL_ADC_Init+0xe0>
 8001e30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d12b      	bne.n	8001e90 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e40:	f023 0302 	bic.w	r3, r3, #2
 8001e44:	f043 0202 	orr.w	r2, r3, #2
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e5a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e6a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e6c:	4b86      	ldr	r3, [pc, #536]	; (8002088 <HAL_ADC_Init+0x2d8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a86      	ldr	r2, [pc, #536]	; (800208c <HAL_ADC_Init+0x2dc>)
 8001e72:	fba2 2303 	umull	r2, r3, r2, r3
 8001e76:	0c9a      	lsrs	r2, r3, #18
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e82:	e002      	b.n	8001e8a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f9      	bne.n	8001e84 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d007      	beq.n	8001eae <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001eac:	d110      	bne.n	8001ed0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f023 0312 	bic.w	r3, r3, #18
 8001eb6:	f043 0210 	orr.w	r2, r3, #16
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	f043 0201 	orr.w	r2, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f040 8136 	bne.w	800214a <HAL_ADC_Init+0x39a>
 8001ede:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f040 8131 	bne.w	800214a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f040 8129 	bne.w	800214a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f00:	f043 0202 	orr.w	r2, r3, #2
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f10:	d004      	beq.n	8001f1c <HAL_ADC_Init+0x16c>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a5e      	ldr	r2, [pc, #376]	; (8002090 <HAL_ADC_Init+0x2e0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d101      	bne.n	8001f20 <HAL_ADC_Init+0x170>
 8001f1c:	4b5d      	ldr	r3, [pc, #372]	; (8002094 <HAL_ADC_Init+0x2e4>)
 8001f1e:	e000      	b.n	8001f22 <HAL_ADC_Init+0x172>
 8001f20:	4b5d      	ldr	r3, [pc, #372]	; (8002098 <HAL_ADC_Init+0x2e8>)
 8001f22:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f2c:	d102      	bne.n	8001f34 <HAL_ADC_Init+0x184>
 8001f2e:	4b58      	ldr	r3, [pc, #352]	; (8002090 <HAL_ADC_Init+0x2e0>)
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	e01a      	b.n	8001f6a <HAL_ADC_Init+0x1ba>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a55      	ldr	r2, [pc, #340]	; (8002090 <HAL_ADC_Init+0x2e0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d103      	bne.n	8001f46 <HAL_ADC_Init+0x196>
 8001f3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	e011      	b.n	8001f6a <HAL_ADC_Init+0x1ba>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a54      	ldr	r2, [pc, #336]	; (800209c <HAL_ADC_Init+0x2ec>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d102      	bne.n	8001f56 <HAL_ADC_Init+0x1a6>
 8001f50:	4b53      	ldr	r3, [pc, #332]	; (80020a0 <HAL_ADC_Init+0x2f0>)
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	e009      	b.n	8001f6a <HAL_ADC_Init+0x1ba>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a51      	ldr	r2, [pc, #324]	; (80020a0 <HAL_ADC_Init+0x2f0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d102      	bne.n	8001f66 <HAL_ADC_Init+0x1b6>
 8001f60:	4b4e      	ldr	r3, [pc, #312]	; (800209c <HAL_ADC_Init+0x2ec>)
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	e001      	b.n	8001f6a <HAL_ADC_Init+0x1ba>
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d108      	bne.n	8001f8a <HAL_ADC_Init+0x1da>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d101      	bne.n	8001f8a <HAL_ADC_Init+0x1da>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <HAL_ADC_Init+0x1dc>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d11c      	bne.n	8001fca <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f90:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d010      	beq.n	8001fb8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d107      	bne.n	8001fb2 <HAL_ADC_Init+0x202>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <HAL_ADC_Init+0x202>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <HAL_ADC_Init+0x204>
 8001fb2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d108      	bne.n	8001fca <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fc8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	7e5b      	ldrb	r3, [r3, #25]
 8001fce:	035b      	lsls	r3, r3, #13
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fd4:	2a01      	cmp	r2, #1
 8001fd6:	d002      	beq.n	8001fde <HAL_ADC_Init+0x22e>
 8001fd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fdc:	e000      	b.n	8001fe0 <HAL_ADC_Init+0x230>
 8001fde:	2200      	movs	r2, #0
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d11b      	bne.n	8002036 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	7e5b      	ldrb	r3, [r3, #25]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d109      	bne.n	800201a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	3b01      	subs	r3, #1
 800200c:	045a      	lsls	r2, r3, #17
 800200e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002010:	4313      	orrs	r3, r2
 8002012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002016:	663b      	str	r3, [r7, #96]	; 0x60
 8002018:	e00d      	b.n	8002036 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002022:	f043 0220 	orr.w	r2, r3, #32
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f043 0201 	orr.w	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203a:	2b01      	cmp	r3, #1
 800203c:	d03a      	beq.n	80020b4 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a16      	ldr	r2, [pc, #88]	; (800209c <HAL_ADC_Init+0x2ec>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d004      	beq.n	8002052 <HAL_ADC_Init+0x2a2>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <HAL_ADC_Init+0x2f0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d128      	bne.n	80020a4 <HAL_ADC_Init+0x2f4>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002056:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800205a:	d012      	beq.n	8002082 <HAL_ADC_Init+0x2d2>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002064:	d00a      	beq.n	800207c <HAL_ADC_Init+0x2cc>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800206e:	d002      	beq.n	8002076 <HAL_ADC_Init+0x2c6>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	e018      	b.n	80020a8 <HAL_ADC_Init+0x2f8>
 8002076:	f44f 7380 	mov.w	r3, #256	; 0x100
 800207a:	e015      	b.n	80020a8 <HAL_ADC_Init+0x2f8>
 800207c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002080:	e012      	b.n	80020a8 <HAL_ADC_Init+0x2f8>
 8002082:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002086:	e00f      	b.n	80020a8 <HAL_ADC_Init+0x2f8>
 8002088:	2000008c 	.word	0x2000008c
 800208c:	431bde83 	.word	0x431bde83
 8002090:	50000100 	.word	0x50000100
 8002094:	50000300 	.word	0x50000300
 8002098:	50000700 	.word	0x50000700
 800209c:	50000400 	.word	0x50000400
 80020a0:	50000500 	.word	0x50000500
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020ac:	4313      	orrs	r3, r2
 80020ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020b0:	4313      	orrs	r3, r2
 80020b2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d114      	bne.n	80020ec <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020d0:	f023 0302 	bic.w	r3, r3, #2
 80020d4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	7e1b      	ldrb	r3, [r3, #24]
 80020da:	039a      	lsls	r2, r3, #14
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	4313      	orrs	r3, r2
 80020e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020e8:	4313      	orrs	r3, r2
 80020ea:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	4b1e      	ldr	r3, [pc, #120]	; (800216c <HAL_ADC_Init+0x3bc>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80020fc:	430b      	orrs	r3, r1
 80020fe:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d10c      	bne.n	8002122 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f023 010f 	bic.w	r1, r3, #15
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	1e5a      	subs	r2, r3, #1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	631a      	str	r2, [r3, #48]	; 0x30
 8002120:	e007      	b.n	8002132 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 020f 	bic.w	r2, r2, #15
 8002130:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	f023 0303 	bic.w	r3, r3, #3
 8002140:	f043 0201 	orr.w	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	641a      	str	r2, [r3, #64]	; 0x40
 8002148:	e00a      	b.n	8002160 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f023 0312 	bic.w	r3, r3, #18
 8002152:	f043 0210 	orr.w	r2, r3, #16
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800215a:	2301      	movs	r3, #1
 800215c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002160:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002164:	4618      	mov	r0, r3
 8002166:	3768      	adds	r7, #104	; 0x68
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	fff0c007 	.word	0xfff0c007

08002170 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	2b00      	cmp	r3, #0
 8002188:	f040 8123 	bne.w	80023d2 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_ADC_Start_IT+0x2a>
 8002196:	2302      	movs	r3, #2
 8002198:	e11e      	b.n	80023d8 <HAL_ADC_Start_IT+0x268>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f001 f81e 	bl	80031e4 <ADC_Enable>
 80021a8:	4603      	mov	r3, r0
 80021aa:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f040 810a 	bne.w	80023c8 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021bc:	f023 0301 	bic.w	r3, r3, #1
 80021c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021d0:	d004      	beq.n	80021dc <HAL_ADC_Start_IT+0x6c>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a82      	ldr	r2, [pc, #520]	; (80023e0 <HAL_ADC_Start_IT+0x270>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d106      	bne.n	80021ea <HAL_ADC_Start_IT+0x7a>
 80021dc:	4b81      	ldr	r3, [pc, #516]	; (80023e4 <HAL_ADC_Start_IT+0x274>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 031f 	and.w	r3, r3, #31
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d010      	beq.n	800220a <HAL_ADC_Start_IT+0x9a>
 80021e8:	e005      	b.n	80021f6 <HAL_ADC_Start_IT+0x86>
 80021ea:	4b7f      	ldr	r3, [pc, #508]	; (80023e8 <HAL_ADC_Start_IT+0x278>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d009      	beq.n	800220a <HAL_ADC_Start_IT+0x9a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021fe:	d004      	beq.n	800220a <HAL_ADC_Start_IT+0x9a>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a79      	ldr	r2, [pc, #484]	; (80023ec <HAL_ADC_Start_IT+0x27c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d115      	bne.n	8002236 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d036      	beq.n	8002292 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800222c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002234:	e02d      	b.n	8002292 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800224a:	d004      	beq.n	8002256 <HAL_ADC_Start_IT+0xe6>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a63      	ldr	r2, [pc, #396]	; (80023e0 <HAL_ADC_Start_IT+0x270>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d10a      	bne.n	800226c <HAL_ADC_Start_IT+0xfc>
 8002256:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf14      	ite	ne
 8002264:	2301      	movne	r3, #1
 8002266:	2300      	moveq	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	e008      	b.n	800227e <HAL_ADC_Start_IT+0x10e>
 800226c:	4b5f      	ldr	r3, [pc, #380]	; (80023ec <HAL_ADC_Start_IT+0x27c>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	bf14      	ite	ne
 8002278:	2301      	movne	r3, #1
 800227a:	2300      	moveq	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d007      	beq.n	8002292 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800228a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800229a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800229e:	d106      	bne.n	80022ae <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a4:	f023 0206 	bic.w	r2, r3, #6
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	645a      	str	r2, [r3, #68]	; 0x44
 80022ac:	e002      	b.n	80022b4 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	221c      	movs	r2, #28
 80022c2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	2b08      	cmp	r3, #8
 80022ca:	d110      	bne.n	80022ee <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0204 	bic.w	r2, r2, #4
 80022da:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0208 	orr.w	r2, r2, #8
 80022ea:	605a      	str	r2, [r3, #4]
          break;
 80022ec:	e008      	b.n	8002300 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f042 020c 	orr.w	r2, r2, #12
 80022fc:	605a      	str	r2, [r3, #4]
          break;
 80022fe:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002304:	2b01      	cmp	r3, #1
 8002306:	d107      	bne.n	8002318 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0210 	bic.w	r2, r2, #16
 8002316:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002320:	d004      	beq.n	800232c <HAL_ADC_Start_IT+0x1bc>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a2e      	ldr	r2, [pc, #184]	; (80023e0 <HAL_ADC_Start_IT+0x270>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d106      	bne.n	800233a <HAL_ADC_Start_IT+0x1ca>
 800232c:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <HAL_ADC_Start_IT+0x274>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 031f 	and.w	r3, r3, #31
 8002334:	2b00      	cmp	r3, #0
 8002336:	d03e      	beq.n	80023b6 <HAL_ADC_Start_IT+0x246>
 8002338:	e005      	b.n	8002346 <HAL_ADC_Start_IT+0x1d6>
 800233a:	4b2b      	ldr	r3, [pc, #172]	; (80023e8 <HAL_ADC_Start_IT+0x278>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 031f 	and.w	r3, r3, #31
 8002342:	2b00      	cmp	r3, #0
 8002344:	d037      	beq.n	80023b6 <HAL_ADC_Start_IT+0x246>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800234e:	d004      	beq.n	800235a <HAL_ADC_Start_IT+0x1ea>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a22      	ldr	r2, [pc, #136]	; (80023e0 <HAL_ADC_Start_IT+0x270>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d106      	bne.n	8002368 <HAL_ADC_Start_IT+0x1f8>
 800235a:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <HAL_ADC_Start_IT+0x274>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	2b05      	cmp	r3, #5
 8002364:	d027      	beq.n	80023b6 <HAL_ADC_Start_IT+0x246>
 8002366:	e005      	b.n	8002374 <HAL_ADC_Start_IT+0x204>
 8002368:	4b1f      	ldr	r3, [pc, #124]	; (80023e8 <HAL_ADC_Start_IT+0x278>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	2b05      	cmp	r3, #5
 8002372:	d020      	beq.n	80023b6 <HAL_ADC_Start_IT+0x246>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800237c:	d004      	beq.n	8002388 <HAL_ADC_Start_IT+0x218>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a17      	ldr	r2, [pc, #92]	; (80023e0 <HAL_ADC_Start_IT+0x270>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d106      	bne.n	8002396 <HAL_ADC_Start_IT+0x226>
 8002388:	4b16      	ldr	r3, [pc, #88]	; (80023e4 <HAL_ADC_Start_IT+0x274>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	2b09      	cmp	r3, #9
 8002392:	d010      	beq.n	80023b6 <HAL_ADC_Start_IT+0x246>
 8002394:	e005      	b.n	80023a2 <HAL_ADC_Start_IT+0x232>
 8002396:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <HAL_ADC_Start_IT+0x278>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 031f 	and.w	r3, r3, #31
 800239e:	2b09      	cmp	r3, #9
 80023a0:	d009      	beq.n	80023b6 <HAL_ADC_Start_IT+0x246>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023aa:	d004      	beq.n	80023b6 <HAL_ADC_Start_IT+0x246>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a0e      	ldr	r2, [pc, #56]	; (80023ec <HAL_ADC_Start_IT+0x27c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d10f      	bne.n	80023d6 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 0204 	orr.w	r2, r2, #4
 80023c4:	609a      	str	r2, [r3, #8]
 80023c6:	e006      	b.n	80023d6 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80023d0:	e001      	b.n	80023d6 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023d2:	2302      	movs	r3, #2
 80023d4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	50000100 	.word	0x50000100
 80023e4:	50000300 	.word	0x50000300
 80023e8:	50000700 	.word	0x50000700
 80023ec:	50000400 	.word	0x50000400

080023f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80023fe:	4618      	mov	r0, r3
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002414:	2300      	movs	r3, #0
 8002416:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002418:	2300      	movs	r3, #0
 800241a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	2b00      	cmp	r3, #0
 8002438:	d004      	beq.n	8002444 <HAL_ADC_IRQHandler+0x38>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10b      	bne.n	800245c <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 80bc 	beq.w	80025c8 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 80b6 	beq.w	80025c8 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	f003 0310 	and.w	r3, r3, #16
 8002464:	2b00      	cmp	r3, #0
 8002466:	d105      	bne.n	8002474 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800247c:	d004      	beq.n	8002488 <HAL_ADC_IRQHandler+0x7c>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a90      	ldr	r2, [pc, #576]	; (80026c4 <HAL_ADC_IRQHandler+0x2b8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d106      	bne.n	8002496 <HAL_ADC_IRQHandler+0x8a>
 8002488:	4b8f      	ldr	r3, [pc, #572]	; (80026c8 <HAL_ADC_IRQHandler+0x2bc>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	2b00      	cmp	r3, #0
 8002492:	d03e      	beq.n	8002512 <HAL_ADC_IRQHandler+0x106>
 8002494:	e005      	b.n	80024a2 <HAL_ADC_IRQHandler+0x96>
 8002496:	4b8d      	ldr	r3, [pc, #564]	; (80026cc <HAL_ADC_IRQHandler+0x2c0>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 031f 	and.w	r3, r3, #31
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d037      	beq.n	8002512 <HAL_ADC_IRQHandler+0x106>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024aa:	d004      	beq.n	80024b6 <HAL_ADC_IRQHandler+0xaa>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a84      	ldr	r2, [pc, #528]	; (80026c4 <HAL_ADC_IRQHandler+0x2b8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d106      	bne.n	80024c4 <HAL_ADC_IRQHandler+0xb8>
 80024b6:	4b84      	ldr	r3, [pc, #528]	; (80026c8 <HAL_ADC_IRQHandler+0x2bc>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 031f 	and.w	r3, r3, #31
 80024be:	2b05      	cmp	r3, #5
 80024c0:	d027      	beq.n	8002512 <HAL_ADC_IRQHandler+0x106>
 80024c2:	e005      	b.n	80024d0 <HAL_ADC_IRQHandler+0xc4>
 80024c4:	4b81      	ldr	r3, [pc, #516]	; (80026cc <HAL_ADC_IRQHandler+0x2c0>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	2b05      	cmp	r3, #5
 80024ce:	d020      	beq.n	8002512 <HAL_ADC_IRQHandler+0x106>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024d8:	d004      	beq.n	80024e4 <HAL_ADC_IRQHandler+0xd8>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a79      	ldr	r2, [pc, #484]	; (80026c4 <HAL_ADC_IRQHandler+0x2b8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d106      	bne.n	80024f2 <HAL_ADC_IRQHandler+0xe6>
 80024e4:	4b78      	ldr	r3, [pc, #480]	; (80026c8 <HAL_ADC_IRQHandler+0x2bc>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 031f 	and.w	r3, r3, #31
 80024ec:	2b09      	cmp	r3, #9
 80024ee:	d010      	beq.n	8002512 <HAL_ADC_IRQHandler+0x106>
 80024f0:	e005      	b.n	80024fe <HAL_ADC_IRQHandler+0xf2>
 80024f2:	4b76      	ldr	r3, [pc, #472]	; (80026cc <HAL_ADC_IRQHandler+0x2c0>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	2b09      	cmp	r3, #9
 80024fc:	d009      	beq.n	8002512 <HAL_ADC_IRQHandler+0x106>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002506:	d004      	beq.n	8002512 <HAL_ADC_IRQHandler+0x106>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a70      	ldr	r2, [pc, #448]	; (80026d0 <HAL_ADC_IRQHandler+0x2c4>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d104      	bne.n	800251c <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	61bb      	str	r3, [r7, #24]
 800251a:	e00f      	b.n	800253c <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002524:	d004      	beq.n	8002530 <HAL_ADC_IRQHandler+0x124>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a66      	ldr	r2, [pc, #408]	; (80026c4 <HAL_ADC_IRQHandler+0x2b8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d102      	bne.n	8002536 <HAL_ADC_IRQHandler+0x12a>
 8002530:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002534:	e000      	b.n	8002538 <HAL_ADC_IRQHandler+0x12c>
 8002536:	4b66      	ldr	r3, [pc, #408]	; (80026d0 <HAL_ADC_IRQHandler+0x2c4>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002546:	2b00      	cmp	r3, #0
 8002548:	d137      	bne.n	80025ba <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002550:	2b00      	cmp	r3, #0
 8002552:	d132      	bne.n	80025ba <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d02d      	beq.n	80025ba <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d11a      	bne.n	80025a2 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 020c 	bic.w	r2, r2, #12
 800257a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d112      	bne.n	80025ba <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	f043 0201 	orr.w	r2, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	641a      	str	r2, [r3, #64]	; 0x40
 80025a0:	e00b      	b.n	80025ba <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f043 0210 	orr.w	r2, r3, #16
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f043 0201 	orr.w	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7fe f972 	bl	80008a4 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	220c      	movs	r2, #12
 80025c6:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	f003 0320 	and.w	r3, r3, #32
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d004      	beq.n	80025dc <HAL_ADC_IRQHandler+0x1d0>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10b      	bne.n	80025f4 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 8138 	beq.w	8002858 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 8132 	beq.w	8002858 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002608:	d004      	beq.n	8002614 <HAL_ADC_IRQHandler+0x208>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a2d      	ldr	r2, [pc, #180]	; (80026c4 <HAL_ADC_IRQHandler+0x2b8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d106      	bne.n	8002622 <HAL_ADC_IRQHandler+0x216>
 8002614:	4b2c      	ldr	r3, [pc, #176]	; (80026c8 <HAL_ADC_IRQHandler+0x2bc>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	2b00      	cmp	r3, #0
 800261e:	d03e      	beq.n	800269e <HAL_ADC_IRQHandler+0x292>
 8002620:	e005      	b.n	800262e <HAL_ADC_IRQHandler+0x222>
 8002622:	4b2a      	ldr	r3, [pc, #168]	; (80026cc <HAL_ADC_IRQHandler+0x2c0>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 031f 	and.w	r3, r3, #31
 800262a:	2b00      	cmp	r3, #0
 800262c:	d037      	beq.n	800269e <HAL_ADC_IRQHandler+0x292>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002636:	d004      	beq.n	8002642 <HAL_ADC_IRQHandler+0x236>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a21      	ldr	r2, [pc, #132]	; (80026c4 <HAL_ADC_IRQHandler+0x2b8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d106      	bne.n	8002650 <HAL_ADC_IRQHandler+0x244>
 8002642:	4b21      	ldr	r3, [pc, #132]	; (80026c8 <HAL_ADC_IRQHandler+0x2bc>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 031f 	and.w	r3, r3, #31
 800264a:	2b05      	cmp	r3, #5
 800264c:	d027      	beq.n	800269e <HAL_ADC_IRQHandler+0x292>
 800264e:	e005      	b.n	800265c <HAL_ADC_IRQHandler+0x250>
 8002650:	4b1e      	ldr	r3, [pc, #120]	; (80026cc <HAL_ADC_IRQHandler+0x2c0>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	2b05      	cmp	r3, #5
 800265a:	d020      	beq.n	800269e <HAL_ADC_IRQHandler+0x292>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002664:	d004      	beq.n	8002670 <HAL_ADC_IRQHandler+0x264>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a16      	ldr	r2, [pc, #88]	; (80026c4 <HAL_ADC_IRQHandler+0x2b8>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d106      	bne.n	800267e <HAL_ADC_IRQHandler+0x272>
 8002670:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <HAL_ADC_IRQHandler+0x2bc>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	2b09      	cmp	r3, #9
 800267a:	d010      	beq.n	800269e <HAL_ADC_IRQHandler+0x292>
 800267c:	e005      	b.n	800268a <HAL_ADC_IRQHandler+0x27e>
 800267e:	4b13      	ldr	r3, [pc, #76]	; (80026cc <HAL_ADC_IRQHandler+0x2c0>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 031f 	and.w	r3, r3, #31
 8002686:	2b09      	cmp	r3, #9
 8002688:	d009      	beq.n	800269e <HAL_ADC_IRQHandler+0x292>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002692:	d004      	beq.n	800269e <HAL_ADC_IRQHandler+0x292>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a0d      	ldr	r2, [pc, #52]	; (80026d0 <HAL_ADC_IRQHandler+0x2c4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d104      	bne.n	80026a8 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	e018      	b.n	80026da <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026b0:	d004      	beq.n	80026bc <HAL_ADC_IRQHandler+0x2b0>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a03      	ldr	r2, [pc, #12]	; (80026c4 <HAL_ADC_IRQHandler+0x2b8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d10b      	bne.n	80026d4 <HAL_ADC_IRQHandler+0x2c8>
 80026bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026c0:	e009      	b.n	80026d6 <HAL_ADC_IRQHandler+0x2ca>
 80026c2:	bf00      	nop
 80026c4:	50000100 	.word	0x50000100
 80026c8:	50000300 	.word	0x50000300
 80026cc:	50000700 	.word	0x50000700
 80026d0:	50000400 	.word	0x50000400
 80026d4:	4b92      	ldr	r3, [pc, #584]	; (8002920 <HAL_ADC_IRQHandler+0x514>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f040 80b0 	bne.w	800284a <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00d      	beq.n	8002710 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f040 80a3 	bne.w	800284a <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800270a:	2b00      	cmp	r3, #0
 800270c:	f040 809d 	bne.w	800284a <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 8097 	beq.w	800284a <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002724:	d004      	beq.n	8002730 <HAL_ADC_IRQHandler+0x324>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a7e      	ldr	r2, [pc, #504]	; (8002924 <HAL_ADC_IRQHandler+0x518>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d106      	bne.n	800273e <HAL_ADC_IRQHandler+0x332>
 8002730:	4b7d      	ldr	r3, [pc, #500]	; (8002928 <HAL_ADC_IRQHandler+0x51c>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	2b00      	cmp	r3, #0
 800273a:	d03e      	beq.n	80027ba <HAL_ADC_IRQHandler+0x3ae>
 800273c:	e005      	b.n	800274a <HAL_ADC_IRQHandler+0x33e>
 800273e:	4b7b      	ldr	r3, [pc, #492]	; (800292c <HAL_ADC_IRQHandler+0x520>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 031f 	and.w	r3, r3, #31
 8002746:	2b00      	cmp	r3, #0
 8002748:	d037      	beq.n	80027ba <HAL_ADC_IRQHandler+0x3ae>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002752:	d004      	beq.n	800275e <HAL_ADC_IRQHandler+0x352>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a72      	ldr	r2, [pc, #456]	; (8002924 <HAL_ADC_IRQHandler+0x518>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d106      	bne.n	800276c <HAL_ADC_IRQHandler+0x360>
 800275e:	4b72      	ldr	r3, [pc, #456]	; (8002928 <HAL_ADC_IRQHandler+0x51c>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 031f 	and.w	r3, r3, #31
 8002766:	2b06      	cmp	r3, #6
 8002768:	d027      	beq.n	80027ba <HAL_ADC_IRQHandler+0x3ae>
 800276a:	e005      	b.n	8002778 <HAL_ADC_IRQHandler+0x36c>
 800276c:	4b6f      	ldr	r3, [pc, #444]	; (800292c <HAL_ADC_IRQHandler+0x520>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	2b06      	cmp	r3, #6
 8002776:	d020      	beq.n	80027ba <HAL_ADC_IRQHandler+0x3ae>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002780:	d004      	beq.n	800278c <HAL_ADC_IRQHandler+0x380>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a67      	ldr	r2, [pc, #412]	; (8002924 <HAL_ADC_IRQHandler+0x518>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d106      	bne.n	800279a <HAL_ADC_IRQHandler+0x38e>
 800278c:	4b66      	ldr	r3, [pc, #408]	; (8002928 <HAL_ADC_IRQHandler+0x51c>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 031f 	and.w	r3, r3, #31
 8002794:	2b07      	cmp	r3, #7
 8002796:	d010      	beq.n	80027ba <HAL_ADC_IRQHandler+0x3ae>
 8002798:	e005      	b.n	80027a6 <HAL_ADC_IRQHandler+0x39a>
 800279a:	4b64      	ldr	r3, [pc, #400]	; (800292c <HAL_ADC_IRQHandler+0x520>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 031f 	and.w	r3, r3, #31
 80027a2:	2b07      	cmp	r3, #7
 80027a4:	d009      	beq.n	80027ba <HAL_ADC_IRQHandler+0x3ae>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027ae:	d004      	beq.n	80027ba <HAL_ADC_IRQHandler+0x3ae>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a5a      	ldr	r2, [pc, #360]	; (8002920 <HAL_ADC_IRQHandler+0x514>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d104      	bne.n	80027c4 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	e00f      	b.n	80027e4 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027cc:	d004      	beq.n	80027d8 <HAL_ADC_IRQHandler+0x3cc>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a54      	ldr	r2, [pc, #336]	; (8002924 <HAL_ADC_IRQHandler+0x518>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d102      	bne.n	80027de <HAL_ADC_IRQHandler+0x3d2>
 80027d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027dc:	e000      	b.n	80027e0 <HAL_ADC_IRQHandler+0x3d4>
 80027de:	4b50      	ldr	r3, [pc, #320]	; (8002920 <HAL_ADC_IRQHandler+0x514>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d12d      	bne.n	800284a <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d11a      	bne.n	8002832 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800280a:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d112      	bne.n	800284a <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	f043 0201 	orr.w	r2, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	641a      	str	r2, [r3, #64]	; 0x40
 8002830:	e00b      	b.n	800284a <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f043 0210 	orr.w	r2, r3, #16
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	f043 0201 	orr.w	r2, r3, #1
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f8c4 	bl	80029d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2260      	movs	r2, #96	; 0x60
 8002856:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285e:	2b00      	cmp	r3, #0
 8002860:	d011      	beq.n	8002886 <HAL_ADC_IRQHandler+0x47a>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00c      	beq.n	8002886 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff fa85 	bl	8001d88 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2280      	movs	r2, #128	; 0x80
 8002884:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d012      	beq.n	80028b6 <HAL_ADC_IRQHandler+0x4aa>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00d      	beq.n	80028b6 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f8aa 	bl	8002a00 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028b4:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d012      	beq.n	80028e6 <HAL_ADC_IRQHandler+0x4da>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00d      	beq.n	80028e6 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f89c 	bl	8002a14 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028e4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f003 0310 	and.w	r3, r3, #16
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d04f      	beq.n	8002990 <HAL_ADC_IRQHandler+0x584>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d04a      	beq.n	8002990 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d102      	bne.n	8002908 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8002902:	2301      	movs	r3, #1
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	e02d      	b.n	8002964 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002910:	d004      	beq.n	800291c <HAL_ADC_IRQHandler+0x510>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a03      	ldr	r2, [pc, #12]	; (8002924 <HAL_ADC_IRQHandler+0x518>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d109      	bne.n	8002930 <HAL_ADC_IRQHandler+0x524>
 800291c:	4b02      	ldr	r3, [pc, #8]	; (8002928 <HAL_ADC_IRQHandler+0x51c>)
 800291e:	e008      	b.n	8002932 <HAL_ADC_IRQHandler+0x526>
 8002920:	50000400 	.word	0x50000400
 8002924:	50000100 	.word	0x50000100
 8002928:	50000300 	.word	0x50000300
 800292c:	50000700 	.word	0x50000700
 8002930:	4b28      	ldr	r3, [pc, #160]	; (80029d4 <HAL_ADC_IRQHandler+0x5c8>)
 8002932:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 031f 	and.w	r3, r3, #31
 800293c:	2b00      	cmp	r3, #0
 800293e:	d109      	bne.n	8002954 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b01      	cmp	r3, #1
 800294c:	d10a      	bne.n	8002964 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 800294e:	2301      	movs	r3, #1
 8002950:	61fb      	str	r3, [r7, #28]
 8002952:	e007      	b.n	8002964 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002960:	2301      	movs	r3, #1
 8002962:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d10e      	bne.n	8002988 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297a:	f043 0202 	orr.w	r2, r3, #2
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff fa0a 	bl	8001d9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2210      	movs	r2, #16
 800298e:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002996:	2b00      	cmp	r3, #0
 8002998:	d018      	beq.n	80029cc <HAL_ADC_IRQHandler+0x5c0>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d013      	beq.n	80029cc <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b4:	f043 0208 	orr.w	r2, r3, #8
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029c4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f810 	bl	80029ec <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80029cc:	bf00      	nop
 80029ce:	3720      	adds	r7, #32
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	50000700 	.word	0x50000700

080029d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b09b      	sub	sp, #108	; 0x6c
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x22>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e2ca      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x5b8>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f040 82ae 	bne.w	8002fbe <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d81c      	bhi.n	8002aa4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	4413      	add	r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	231f      	movs	r3, #31
 8002a80:	4093      	lsls	r3, r2
 8002a82:	43db      	mvns	r3, r3
 8002a84:	4019      	ands	r1, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4413      	add	r3, r2
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	fa00 f203 	lsl.w	r2, r0, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	631a      	str	r2, [r3, #48]	; 0x30
 8002aa2:	e063      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b09      	cmp	r3, #9
 8002aaa:	d81e      	bhi.n	8002aea <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4413      	add	r3, r2
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	3b1e      	subs	r3, #30
 8002ac0:	221f      	movs	r2, #31
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	4019      	ands	r1, r3
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	3b1e      	subs	r3, #30
 8002adc:	fa00 f203 	lsl.w	r2, r0, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	635a      	str	r2, [r3, #52]	; 0x34
 8002ae8:	e040      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b0e      	cmp	r3, #14
 8002af0:	d81e      	bhi.n	8002b30 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	4413      	add	r3, r2
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	3b3c      	subs	r3, #60	; 0x3c
 8002b06:	221f      	movs	r2, #31
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	4019      	ands	r1, r3
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4413      	add	r3, r2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	3b3c      	subs	r3, #60	; 0x3c
 8002b22:	fa00 f203 	lsl.w	r2, r0, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	639a      	str	r2, [r3, #56]	; 0x38
 8002b2e:	e01d      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	4413      	add	r3, r2
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	3b5a      	subs	r3, #90	; 0x5a
 8002b44:	221f      	movs	r2, #31
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	4019      	ands	r1, r3
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	4413      	add	r3, r2
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	3b5a      	subs	r3, #90	; 0x5a
 8002b60:	fa00 f203 	lsl.w	r2, r0, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f040 80e5 	bne.w	8002d46 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b09      	cmp	r3, #9
 8002b82:	d91c      	bls.n	8002bbe <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6999      	ldr	r1, [r3, #24]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	4413      	add	r3, r2
 8002b94:	3b1e      	subs	r3, #30
 8002b96:	2207      	movs	r2, #7
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	4019      	ands	r1, r3
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6898      	ldr	r0, [r3, #8]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	4413      	add	r3, r2
 8002bae:	3b1e      	subs	r3, #30
 8002bb0:	fa00 f203 	lsl.w	r2, r0, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	619a      	str	r2, [r3, #24]
 8002bbc:	e019      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6959      	ldr	r1, [r3, #20]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	2207      	movs	r2, #7
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	4019      	ands	r1, r3
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	6898      	ldr	r0, [r3, #8]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4613      	mov	r3, r2
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	4413      	add	r3, r2
 8002be6:	fa00 f203 	lsl.w	r2, r0, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	695a      	ldr	r2, [r3, #20]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	08db      	lsrs	r3, r3, #3
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d84f      	bhi.n	8002cb4 <HAL_ADC_ConfigChannel+0x28c>
 8002c14:	a201      	add	r2, pc, #4	; (adr r2, 8002c1c <HAL_ADC_ConfigChannel+0x1f4>)
 8002c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1a:	bf00      	nop
 8002c1c:	08002c2d 	.word	0x08002c2d
 8002c20:	08002c4f 	.word	0x08002c4f
 8002c24:	08002c71 	.word	0x08002c71
 8002c28:	08002c93 	.word	0x08002c93
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c32:	4b9a      	ldr	r3, [pc, #616]	; (8002e9c <HAL_ADC_ConfigChannel+0x474>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	6812      	ldr	r2, [r2, #0]
 8002c3a:	0691      	lsls	r1, r2, #26
 8002c3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c4a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002c4c:	e07e      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c54:	4b91      	ldr	r3, [pc, #580]	; (8002e9c <HAL_ADC_ConfigChannel+0x474>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	0691      	lsls	r1, r2, #26
 8002c5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c60:	430a      	orrs	r2, r1
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c6c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002c6e:	e06d      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c76:	4b89      	ldr	r3, [pc, #548]	; (8002e9c <HAL_ADC_ConfigChannel+0x474>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	0691      	lsls	r1, r2, #26
 8002c80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c82:	430a      	orrs	r2, r1
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c8e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002c90:	e05c      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c98:	4b80      	ldr	r3, [pc, #512]	; (8002e9c <HAL_ADC_ConfigChannel+0x474>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	0691      	lsls	r1, r2, #26
 8002ca2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002cb0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002cb2:	e04b      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	069b      	lsls	r3, r3, #26
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d107      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cd6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	069b      	lsls	r3, r3, #26
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d107      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cfa:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	069b      	lsls	r3, r3, #26
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d107      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d1e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	069b      	lsls	r3, r3, #26
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d10a      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d42:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002d44:	e001      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x324>
      break;
 8002d4a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d108      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x344>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x344>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x346>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f040 8130 	bne.w	8002fd4 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d00f      	beq.n	8002d9c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43da      	mvns	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	400a      	ands	r2, r1
 8002d96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002d9a:	e049      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2201      	movs	r2, #1
 8002daa:	409a      	lsls	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b09      	cmp	r3, #9
 8002dbc:	d91c      	bls.n	8002df8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6999      	ldr	r1, [r3, #24]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	4413      	add	r3, r2
 8002dce:	3b1b      	subs	r3, #27
 8002dd0:	2207      	movs	r2, #7
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	4019      	ands	r1, r3
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	6898      	ldr	r0, [r3, #8]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	4613      	mov	r3, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	4413      	add	r3, r2
 8002de8:	3b1b      	subs	r3, #27
 8002dea:	fa00 f203 	lsl.w	r2, r0, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	619a      	str	r2, [r3, #24]
 8002df6:	e01b      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6959      	ldr	r1, [r3, #20]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	4613      	mov	r3, r2
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	4413      	add	r3, r2
 8002e0a:	2207      	movs	r2, #7
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	4019      	ands	r1, r3
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	6898      	ldr	r0, [r3, #8]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	4613      	mov	r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4413      	add	r3, r2
 8002e24:	fa00 f203 	lsl.w	r2, r0, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e38:	d004      	beq.n	8002e44 <HAL_ADC_ConfigChannel+0x41c>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a18      	ldr	r2, [pc, #96]	; (8002ea0 <HAL_ADC_ConfigChannel+0x478>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d101      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x420>
 8002e44:	4b17      	ldr	r3, [pc, #92]	; (8002ea4 <HAL_ADC_ConfigChannel+0x47c>)
 8002e46:	e000      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x422>
 8002e48:	4b17      	ldr	r3, [pc, #92]	; (8002ea8 <HAL_ADC_ConfigChannel+0x480>)
 8002e4a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b10      	cmp	r3, #16
 8002e52:	d105      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002e54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d015      	beq.n	8002e8c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002e64:	2b11      	cmp	r3, #17
 8002e66:	d105      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00b      	beq.n	8002e8c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002e78:	2b12      	cmp	r3, #18
 8002e7a:	f040 80ab 	bne.w	8002fd4 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f040 80a4 	bne.w	8002fd4 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e94:	d10a      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x484>
 8002e96:	4b02      	ldr	r3, [pc, #8]	; (8002ea0 <HAL_ADC_ConfigChannel+0x478>)
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	e022      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x4ba>
 8002e9c:	83fff000 	.word	0x83fff000
 8002ea0:	50000100 	.word	0x50000100
 8002ea4:	50000300 	.word	0x50000300
 8002ea8:	50000700 	.word	0x50000700
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a4e      	ldr	r2, [pc, #312]	; (8002fec <HAL_ADC_ConfigChannel+0x5c4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d103      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x496>
 8002eb6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	e011      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x4ba>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a4b      	ldr	r2, [pc, #300]	; (8002ff0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d102      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x4a6>
 8002ec8:	4b4a      	ldr	r3, [pc, #296]	; (8002ff4 <HAL_ADC_ConfigChannel+0x5cc>)
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	e009      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x4ba>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a48      	ldr	r2, [pc, #288]	; (8002ff4 <HAL_ADC_ConfigChannel+0x5cc>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d102      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x4b6>
 8002ed8:	4b45      	ldr	r3, [pc, #276]	; (8002ff0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	e001      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x4ba>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d108      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x4da>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x4da>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x4dc>
 8002f02:	2300      	movs	r3, #0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d150      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f08:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d010      	beq.n	8002f30 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d107      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x502>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x502>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x504>
 8002f2a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d13c      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b10      	cmp	r3, #16
 8002f36:	d11d      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x54c>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f40:	d118      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f4c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f4e:	4b2a      	ldr	r3, [pc, #168]	; (8002ff8 <HAL_ADC_ConfigChannel+0x5d0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a2a      	ldr	r2, [pc, #168]	; (8002ffc <HAL_ADC_ConfigChannel+0x5d4>)
 8002f54:	fba2 2303 	umull	r2, r3, r2, r3
 8002f58:	0c9a      	lsrs	r2, r3, #18
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f64:	e002      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f9      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f72:	e02e      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b11      	cmp	r3, #17
 8002f7a:	d10b      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x56c>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f84:	d106      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002f86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f90:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f92:	e01e      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b12      	cmp	r3, #18
 8002f9a:	d11a      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002f9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fa6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002fa8:	e013      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f043 0220 	orr.w	r2, r3, #32
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002fbc:	e00a      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	f043 0220 	orr.w	r2, r3, #32
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002fd0:	e000      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002fd2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002fdc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	376c      	adds	r7, #108	; 0x6c
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	50000100 	.word	0x50000100
 8002ff0:	50000400 	.word	0x50000400
 8002ff4:	50000500 	.word	0x50000500
 8002ff8:	2000008c 	.word	0x2000008c
 8002ffc:	431bde83 	.word	0x431bde83

08003000 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003000:	b480      	push	{r7}
 8003002:	b099      	sub	sp, #100	; 0x64
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003018:	d102      	bne.n	8003020 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800301a:	4b6d      	ldr	r3, [pc, #436]	; (80031d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	e01a      	b.n	8003056 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a6a      	ldr	r2, [pc, #424]	; (80031d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d103      	bne.n	8003032 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800302a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800302e:	60bb      	str	r3, [r7, #8]
 8003030:	e011      	b.n	8003056 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a67      	ldr	r2, [pc, #412]	; (80031d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d102      	bne.n	8003042 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800303c:	4b66      	ldr	r3, [pc, #408]	; (80031d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800303e:	60bb      	str	r3, [r7, #8]
 8003040:	e009      	b.n	8003056 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a64      	ldr	r2, [pc, #400]	; (80031d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d102      	bne.n	8003052 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800304c:	4b61      	ldr	r3, [pc, #388]	; (80031d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800304e:	60bb      	str	r3, [r7, #8]
 8003050:	e001      	b.n	8003056 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003052:	2300      	movs	r3, #0
 8003054:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0b0      	b.n	80031c2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800306a:	2302      	movs	r3, #2
 800306c:	e0a9      	b.n	80031c2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	f040 808d 	bne.w	80031a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	2b00      	cmp	r3, #0
 8003090:	f040 8086 	bne.w	80031a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800309c:	d004      	beq.n	80030a8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a4b      	ldr	r2, [pc, #300]	; (80031d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d101      	bne.n	80030ac <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80030a8:	4b4c      	ldr	r3, [pc, #304]	; (80031dc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80030aa:	e000      	b.n	80030ae <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80030ac:	4b4c      	ldr	r3, [pc, #304]	; (80031e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80030ae:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d040      	beq.n	800313a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80030b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	6859      	ldr	r1, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030ca:	035b      	lsls	r3, r3, #13
 80030cc:	430b      	orrs	r3, r1
 80030ce:	431a      	orrs	r2, r3
 80030d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030d2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d108      	bne.n	80030f4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80030f4:	2300      	movs	r3, #0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d15c      	bne.n	80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	2b01      	cmp	r3, #1
 8003104:	d107      	bne.n	8003116 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003116:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003118:	2b00      	cmp	r3, #0
 800311a:	d14b      	bne.n	80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800311c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003124:	f023 030f 	bic.w	r3, r3, #15
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	6811      	ldr	r1, [r2, #0]
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	6892      	ldr	r2, [r2, #8]
 8003130:	430a      	orrs	r2, r1
 8003132:	431a      	orrs	r2, r3
 8003134:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003136:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003138:	e03c      	b.n	80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800313a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003142:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003144:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	2b01      	cmp	r3, #1
 8003152:	d108      	bne.n	8003166 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003166:	2300      	movs	r3, #0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d123      	bne.n	80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	2b01      	cmp	r3, #1
 8003176:	d107      	bne.n	8003188 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003188:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800318a:	2b00      	cmp	r3, #0
 800318c:	d112      	bne.n	80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800318e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003196:	f023 030f 	bic.w	r3, r3, #15
 800319a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800319c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800319e:	e009      	b.n	80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	f043 0220 	orr.w	r2, r3, #32
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80031b2:	e000      	b.n	80031b6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80031b4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80031be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80031c2:	4618      	mov	r0, r3
 80031c4:	3764      	adds	r7, #100	; 0x64
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	50000100 	.word	0x50000100
 80031d4:	50000400 	.word	0x50000400
 80031d8:	50000500 	.word	0x50000500
 80031dc:	50000300 	.word	0x50000300
 80031e0:	50000700 	.word	0x50000700

080031e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d108      	bne.n	8003210 <ADC_Enable+0x2c>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <ADC_Enable+0x2c>
 800320c:	2301      	movs	r3, #1
 800320e:	e000      	b.n	8003212 <ADC_Enable+0x2e>
 8003210:	2300      	movs	r3, #0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d143      	bne.n	800329e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	4b22      	ldr	r3, [pc, #136]	; (80032a8 <ADC_Enable+0xc4>)
 800321e:	4013      	ands	r3, r2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00d      	beq.n	8003240 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	f043 0210 	orr.w	r2, r3, #16
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003234:	f043 0201 	orr.w	r2, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e02f      	b.n	80032a0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003250:	f7fe fd8e 	bl	8001d70 <HAL_GetTick>
 8003254:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003256:	e01b      	b.n	8003290 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003258:	f7fe fd8a 	bl	8001d70 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d914      	bls.n	8003290 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b01      	cmp	r3, #1
 8003272:	d00d      	beq.n	8003290 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	f043 0210 	orr.w	r2, r3, #16
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003284:	f043 0201 	orr.w	r2, r3, #1
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e007      	b.n	80032a0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b01      	cmp	r3, #1
 800329c:	d1dc      	bne.n	8003258 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	8000003f 	.word	0x8000003f

080032ac <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d108      	bne.n	80032d8 <ADC_Disable+0x2c>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <ADC_Disable+0x2c>
 80032d4:	2301      	movs	r3, #1
 80032d6:	e000      	b.n	80032da <ADC_Disable+0x2e>
 80032d8:	2300      	movs	r3, #0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d047      	beq.n	800336e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 030d 	and.w	r3, r3, #13
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d10f      	bne.n	800330c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0202 	orr.w	r2, r2, #2
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2203      	movs	r2, #3
 8003302:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003304:	f7fe fd34 	bl	8001d70 <HAL_GetTick>
 8003308:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800330a:	e029      	b.n	8003360 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	f043 0210 	orr.w	r2, r3, #16
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331c:	f043 0201 	orr.w	r2, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e023      	b.n	8003370 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003328:	f7fe fd22 	bl	8001d70 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d914      	bls.n	8003360 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b01      	cmp	r3, #1
 8003342:	d10d      	bne.n	8003360 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	f043 0210 	orr.w	r2, r3, #16
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003354:	f043 0201 	orr.w	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e007      	b.n	8003370 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b01      	cmp	r3, #1
 800336c:	d0dc      	beq.n	8003328 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003388:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <__NVIC_SetPriorityGrouping+0x44>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003394:	4013      	ands	r3, r2
 8003396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033aa:	4a04      	ldr	r2, [pc, #16]	; (80033bc <__NVIC_SetPriorityGrouping+0x44>)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	60d3      	str	r3, [r2, #12]
}
 80033b0:	bf00      	nop
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	e000ed00 	.word	0xe000ed00

080033c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033c4:	4b04      	ldr	r3, [pc, #16]	; (80033d8 <__NVIC_GetPriorityGrouping+0x18>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	0a1b      	lsrs	r3, r3, #8
 80033ca:	f003 0307 	and.w	r3, r3, #7
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	db0b      	blt.n	8003406 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	f003 021f 	and.w	r2, r3, #31
 80033f4:	4907      	ldr	r1, [pc, #28]	; (8003414 <__NVIC_EnableIRQ+0x38>)
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	2001      	movs	r0, #1
 80033fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	e000e100 	.word	0xe000e100

08003418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	6039      	str	r1, [r7, #0]
 8003422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003428:	2b00      	cmp	r3, #0
 800342a:	db0a      	blt.n	8003442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	b2da      	uxtb	r2, r3
 8003430:	490c      	ldr	r1, [pc, #48]	; (8003464 <__NVIC_SetPriority+0x4c>)
 8003432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003436:	0112      	lsls	r2, r2, #4
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	440b      	add	r3, r1
 800343c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003440:	e00a      	b.n	8003458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	b2da      	uxtb	r2, r3
 8003446:	4908      	ldr	r1, [pc, #32]	; (8003468 <__NVIC_SetPriority+0x50>)
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	3b04      	subs	r3, #4
 8003450:	0112      	lsls	r2, r2, #4
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	440b      	add	r3, r1
 8003456:	761a      	strb	r2, [r3, #24]
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	e000e100 	.word	0xe000e100
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800346c:	b480      	push	{r7}
 800346e:	b089      	sub	sp, #36	; 0x24
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f1c3 0307 	rsb	r3, r3, #7
 8003486:	2b04      	cmp	r3, #4
 8003488:	bf28      	it	cs
 800348a:	2304      	movcs	r3, #4
 800348c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	3304      	adds	r3, #4
 8003492:	2b06      	cmp	r3, #6
 8003494:	d902      	bls.n	800349c <NVIC_EncodePriority+0x30>
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3b03      	subs	r3, #3
 800349a:	e000      	b.n	800349e <NVIC_EncodePriority+0x32>
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a0:	f04f 32ff 	mov.w	r2, #4294967295
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	43da      	mvns	r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	401a      	ands	r2, r3
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034b4:	f04f 31ff 	mov.w	r1, #4294967295
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	fa01 f303 	lsl.w	r3, r1, r3
 80034be:	43d9      	mvns	r1, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c4:	4313      	orrs	r3, r2
         );
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3724      	adds	r7, #36	; 0x24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
	...

080034d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3b01      	subs	r3, #1
 80034e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034e4:	d301      	bcc.n	80034ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034e6:	2301      	movs	r3, #1
 80034e8:	e00f      	b.n	800350a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ea:	4a0a      	ldr	r2, [pc, #40]	; (8003514 <SysTick_Config+0x40>)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034f2:	210f      	movs	r1, #15
 80034f4:	f04f 30ff 	mov.w	r0, #4294967295
 80034f8:	f7ff ff8e 	bl	8003418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034fc:	4b05      	ldr	r3, [pc, #20]	; (8003514 <SysTick_Config+0x40>)
 80034fe:	2200      	movs	r2, #0
 8003500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003502:	4b04      	ldr	r3, [pc, #16]	; (8003514 <SysTick_Config+0x40>)
 8003504:	2207      	movs	r2, #7
 8003506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	e000e010 	.word	0xe000e010

08003518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff ff29 	bl	8003378 <__NVIC_SetPriorityGrouping>
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b086      	sub	sp, #24
 8003532:	af00      	add	r7, sp, #0
 8003534:	4603      	mov	r3, r0
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
 800353a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003540:	f7ff ff3e 	bl	80033c0 <__NVIC_GetPriorityGrouping>
 8003544:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	6978      	ldr	r0, [r7, #20]
 800354c:	f7ff ff8e 	bl	800346c <NVIC_EncodePriority>
 8003550:	4602      	mov	r2, r0
 8003552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003556:	4611      	mov	r1, r2
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff ff5d 	bl	8003418 <__NVIC_SetPriority>
}
 800355e:	bf00      	nop
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	4603      	mov	r3, r0
 800356e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff ff31 	bl	80033dc <__NVIC_EnableIRQ>
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff ffa2 	bl	80034d4 <SysTick_Config>
 8003590:	4603      	mov	r3, r0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d008      	beq.n	80035be <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2204      	movs	r2, #4
 80035b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e020      	b.n	8003600 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 020e 	bic.w	r2, r2, #14
 80035cc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0201 	bic.w	r2, r2, #1
 80035dc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e6:	2101      	movs	r1, #1
 80035e8:	fa01 f202 	lsl.w	r2, r1, r2
 80035ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003614:	2300      	movs	r3, #0
 8003616:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800361e:	2b02      	cmp	r3, #2
 8003620:	d005      	beq.n	800362e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2204      	movs	r2, #4
 8003626:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	73fb      	strb	r3, [r7, #15]
 800362c:	e027      	b.n	800367e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 020e 	bic.w	r2, r2, #14
 800363c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0201 	bic.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003656:	2101      	movs	r1, #1
 8003658:	fa01 f202 	lsl.w	r2, r1, r2
 800365c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	4798      	blx	r3
    } 
  }
  return status;
 800367e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003696:	e154      	b.n	8003942 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	2101      	movs	r1, #1
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	fa01 f303 	lsl.w	r3, r1, r3
 80036a4:	4013      	ands	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 8146 	beq.w	800393c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 0303 	and.w	r3, r3, #3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d005      	beq.n	80036c8 <HAL_GPIO_Init+0x40>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 0303 	and.w	r3, r3, #3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d130      	bne.n	800372a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	2203      	movs	r2, #3
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	43db      	mvns	r3, r3
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4013      	ands	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036fe:	2201      	movs	r2, #1
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	43db      	mvns	r3, r3
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	4013      	ands	r3, r2
 800370c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	091b      	lsrs	r3, r3, #4
 8003714:	f003 0201 	and.w	r2, r3, #1
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	2b03      	cmp	r3, #3
 8003734:	d017      	beq.n	8003766 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	2203      	movs	r2, #3
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4013      	ands	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4313      	orrs	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d123      	bne.n	80037ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	08da      	lsrs	r2, r3, #3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3208      	adds	r2, #8
 800377a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800377e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	220f      	movs	r2, #15
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	43db      	mvns	r3, r3
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4013      	ands	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	691a      	ldr	r2, [r3, #16]
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	08da      	lsrs	r2, r3, #3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3208      	adds	r2, #8
 80037b4:	6939      	ldr	r1, [r7, #16]
 80037b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	2203      	movs	r2, #3
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	43db      	mvns	r3, r3
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4013      	ands	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f003 0203 	and.w	r2, r3, #3
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 80a0 	beq.w	800393c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037fc:	4b58      	ldr	r3, [pc, #352]	; (8003960 <HAL_GPIO_Init+0x2d8>)
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	4a57      	ldr	r2, [pc, #348]	; (8003960 <HAL_GPIO_Init+0x2d8>)
 8003802:	f043 0301 	orr.w	r3, r3, #1
 8003806:	6193      	str	r3, [r2, #24]
 8003808:	4b55      	ldr	r3, [pc, #340]	; (8003960 <HAL_GPIO_Init+0x2d8>)
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003814:	4a53      	ldr	r2, [pc, #332]	; (8003964 <HAL_GPIO_Init+0x2dc>)
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	089b      	lsrs	r3, r3, #2
 800381a:	3302      	adds	r3, #2
 800381c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003820:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f003 0303 	and.w	r3, r3, #3
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	220f      	movs	r2, #15
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	43db      	mvns	r3, r3
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4013      	ands	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800383e:	d019      	beq.n	8003874 <HAL_GPIO_Init+0x1ec>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a49      	ldr	r2, [pc, #292]	; (8003968 <HAL_GPIO_Init+0x2e0>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d013      	beq.n	8003870 <HAL_GPIO_Init+0x1e8>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a48      	ldr	r2, [pc, #288]	; (800396c <HAL_GPIO_Init+0x2e4>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d00d      	beq.n	800386c <HAL_GPIO_Init+0x1e4>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a47      	ldr	r2, [pc, #284]	; (8003970 <HAL_GPIO_Init+0x2e8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d007      	beq.n	8003868 <HAL_GPIO_Init+0x1e0>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a46      	ldr	r2, [pc, #280]	; (8003974 <HAL_GPIO_Init+0x2ec>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d101      	bne.n	8003864 <HAL_GPIO_Init+0x1dc>
 8003860:	2304      	movs	r3, #4
 8003862:	e008      	b.n	8003876 <HAL_GPIO_Init+0x1ee>
 8003864:	2305      	movs	r3, #5
 8003866:	e006      	b.n	8003876 <HAL_GPIO_Init+0x1ee>
 8003868:	2303      	movs	r3, #3
 800386a:	e004      	b.n	8003876 <HAL_GPIO_Init+0x1ee>
 800386c:	2302      	movs	r3, #2
 800386e:	e002      	b.n	8003876 <HAL_GPIO_Init+0x1ee>
 8003870:	2301      	movs	r3, #1
 8003872:	e000      	b.n	8003876 <HAL_GPIO_Init+0x1ee>
 8003874:	2300      	movs	r3, #0
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	f002 0203 	and.w	r2, r2, #3
 800387c:	0092      	lsls	r2, r2, #2
 800387e:	4093      	lsls	r3, r2
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4313      	orrs	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003886:	4937      	ldr	r1, [pc, #220]	; (8003964 <HAL_GPIO_Init+0x2dc>)
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	089b      	lsrs	r3, r3, #2
 800388c:	3302      	adds	r3, #2
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003894:	4b38      	ldr	r3, [pc, #224]	; (8003978 <HAL_GPIO_Init+0x2f0>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	43db      	mvns	r3, r3
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	4013      	ands	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80038b8:	4a2f      	ldr	r2, [pc, #188]	; (8003978 <HAL_GPIO_Init+0x2f0>)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038be:	4b2e      	ldr	r3, [pc, #184]	; (8003978 <HAL_GPIO_Init+0x2f0>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	43db      	mvns	r3, r3
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4013      	ands	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80038e2:	4a25      	ldr	r2, [pc, #148]	; (8003978 <HAL_GPIO_Init+0x2f0>)
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038e8:	4b23      	ldr	r3, [pc, #140]	; (8003978 <HAL_GPIO_Init+0x2f0>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	43db      	mvns	r3, r3
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4013      	ands	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800390c:	4a1a      	ldr	r2, [pc, #104]	; (8003978 <HAL_GPIO_Init+0x2f0>)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003912:	4b19      	ldr	r3, [pc, #100]	; (8003978 <HAL_GPIO_Init+0x2f0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	43db      	mvns	r3, r3
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003936:	4a10      	ldr	r2, [pc, #64]	; (8003978 <HAL_GPIO_Init+0x2f0>)
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	3301      	adds	r3, #1
 8003940:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	f47f aea3 	bne.w	8003698 <HAL_GPIO_Init+0x10>
  }
}
 8003952:	bf00      	nop
 8003954:	bf00      	nop
 8003956:	371c      	adds	r7, #28
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	40021000 	.word	0x40021000
 8003964:	40010000 	.word	0x40010000
 8003968:	48000400 	.word	0x48000400
 800396c:	48000800 	.word	0x48000800
 8003970:	48000c00 	.word	0x48000c00
 8003974:	48001000 	.word	0x48001000
 8003978:	40010400 	.word	0x40010400

0800397c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	807b      	strh	r3, [r7, #2]
 8003988:	4613      	mov	r3, r2
 800398a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800398c:	787b      	ldrb	r3, [r7, #1]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003992:	887a      	ldrh	r2, [r7, #2]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003998:	e002      	b.n	80039a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800399a:	887a      	ldrh	r2, [r7, #2]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80039b6:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039b8:	695a      	ldr	r2, [r3, #20]
 80039ba:	88fb      	ldrh	r3, [r7, #6]
 80039bc:	4013      	ands	r3, r2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d006      	beq.n	80039d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039c2:	4a05      	ldr	r2, [pc, #20]	; (80039d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039c4:	88fb      	ldrh	r3, [r7, #6]
 80039c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039c8:	88fb      	ldrh	r3, [r7, #6]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fd fbe0 	bl	8001190 <HAL_GPIO_EXTI_Callback>
  }
}
 80039d0:	bf00      	nop
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40010400 	.word	0x40010400

080039dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e081      	b.n	8003af2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d106      	bne.n	8003a08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7fd fdc0 	bl	8001588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2224      	movs	r2, #36	; 0x24
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0201 	bic.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d107      	bne.n	8003a56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a52:	609a      	str	r2, [r3, #8]
 8003a54:	e006      	b.n	8003a64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d104      	bne.n	8003a76 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6812      	ldr	r2, [r2, #0]
 8003a80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691a      	ldr	r2, [r3, #16]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	69d9      	ldr	r1, [r3, #28]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1a      	ldr	r2, [r3, #32]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0201 	orr.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2220      	movs	r2, #32
 8003ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d138      	bne.n	8003b82 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e032      	b.n	8003b84 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2224      	movs	r2, #36	; 0x24
 8003b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0201 	bic.w	r2, r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b4c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6819      	ldr	r1, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0201 	orr.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	e000      	b.n	8003b84 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b82:	2302      	movs	r3, #2
  }
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b20      	cmp	r3, #32
 8003ba4:	d139      	bne.n	8003c1a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e033      	b.n	8003c1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2224      	movs	r2, #36	; 0x24
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0201 	bic.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003be2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f042 0201 	orr.w	r2, r2, #1
 8003c04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	e000      	b.n	8003c1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c1a:	2302      	movs	r3, #2
  }
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c2a:	b08b      	sub	sp, #44	; 0x2c
 8003c2c:	af06      	add	r7, sp, #24
 8003c2e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e0c4      	b.n	8003dc4 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7fd fdda 	bl	8001808 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2203      	movs	r2, #3
 8003c58:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f004 fad1 	bl	8008208 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c66:	2300      	movs	r3, #0
 8003c68:	73fb      	strb	r3, [r7, #15]
 8003c6a:	e040      	b.n	8003cee <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	4613      	mov	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	440b      	add	r3, r1
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	2201      	movs	r2, #1
 8003c80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
 8003c84:	6879      	ldr	r1, [r7, #4]
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	440b      	add	r3, r1
 8003c92:	7bfa      	ldrb	r2, [r7, #15]
 8003c94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	440b      	add	r3, r1
 8003ca6:	3303      	adds	r3, #3
 8003ca8:	2200      	movs	r2, #0
 8003caa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003cac:	7bfa      	ldrb	r2, [r7, #15]
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	440b      	add	r3, r1
 8003cba:	3338      	adds	r3, #56	; 0x38
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003cc0:	7bfa      	ldrb	r2, [r7, #15]
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	440b      	add	r3, r1
 8003cce:	333c      	adds	r3, #60	; 0x3c
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003cd4:	7bfa      	ldrb	r2, [r7, #15]
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	440b      	add	r3, r1
 8003ce2:	3340      	adds	r3, #64	; 0x40
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
 8003cea:	3301      	adds	r3, #1
 8003cec:	73fb      	strb	r3, [r7, #15]
 8003cee:	7bfa      	ldrb	r2, [r7, #15]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d3b9      	bcc.n	8003c6c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	73fb      	strb	r3, [r7, #15]
 8003cfc:	e044      	b.n	8003d88 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003cfe:	7bfa      	ldrb	r2, [r7, #15]
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	440b      	add	r3, r1
 8003d0c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003d10:	2200      	movs	r2, #0
 8003d12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d14:	7bfa      	ldrb	r2, [r7, #15]
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	440b      	add	r3, r1
 8003d22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d26:	7bfa      	ldrb	r2, [r7, #15]
 8003d28:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d2a:	7bfa      	ldrb	r2, [r7, #15]
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	440b      	add	r3, r1
 8003d38:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d40:	7bfa      	ldrb	r2, [r7, #15]
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	440b      	add	r3, r1
 8003d4e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d56:	7bfa      	ldrb	r2, [r7, #15]
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	440b      	add	r3, r1
 8003d64:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d6c:	7bfa      	ldrb	r2, [r7, #15]
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	4613      	mov	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	440b      	add	r3, r1
 8003d7a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
 8003d84:	3301      	adds	r3, #1
 8003d86:	73fb      	strb	r3, [r7, #15]
 8003d88:	7bfa      	ldrb	r2, [r7, #15]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d3b5      	bcc.n	8003cfe <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	687e      	ldr	r6, [r7, #4]
 8003d9a:	466d      	mov	r5, sp
 8003d9c:	f106 0410 	add.w	r4, r6, #16
 8003da0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003da2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	602b      	str	r3, [r5, #0]
 8003da8:	1d33      	adds	r3, r6, #4
 8003daa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dac:	6838      	ldr	r0, [r7, #0]
 8003dae:	f004 fa46 	bl	800823e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ddc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d102      	bne.n	8003df2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	f001 b823 	b.w	8004e38 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 817d 	beq.w	8004102 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003e08:	4bbc      	ldr	r3, [pc, #752]	; (80040fc <HAL_RCC_OscConfig+0x330>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f003 030c 	and.w	r3, r3, #12
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d00c      	beq.n	8003e2e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e14:	4bb9      	ldr	r3, [pc, #740]	; (80040fc <HAL_RCC_OscConfig+0x330>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 030c 	and.w	r3, r3, #12
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d15c      	bne.n	8003eda <HAL_RCC_OscConfig+0x10e>
 8003e20:	4bb6      	ldr	r3, [pc, #728]	; (80040fc <HAL_RCC_OscConfig+0x330>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e2c:	d155      	bne.n	8003eda <HAL_RCC_OscConfig+0x10e>
 8003e2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e32:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e36:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003e3a:	fa93 f3a3 	rbit	r3, r3
 8003e3e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e42:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e46:	fab3 f383 	clz	r3, r3
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	095b      	lsrs	r3, r3, #5
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d102      	bne.n	8003e60 <HAL_RCC_OscConfig+0x94>
 8003e5a:	4ba8      	ldr	r3, [pc, #672]	; (80040fc <HAL_RCC_OscConfig+0x330>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	e015      	b.n	8003e8c <HAL_RCC_OscConfig+0xc0>
 8003e60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e64:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e68:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003e6c:	fa93 f3a3 	rbit	r3, r3
 8003e70:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003e74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e78:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003e7c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003e80:	fa93 f3a3 	rbit	r3, r3
 8003e84:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003e88:	4b9c      	ldr	r3, [pc, #624]	; (80040fc <HAL_RCC_OscConfig+0x330>)
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e90:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003e94:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003e98:	fa92 f2a2 	rbit	r2, r2
 8003e9c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003ea0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003ea4:	fab2 f282 	clz	r2, r2
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	f042 0220 	orr.w	r2, r2, #32
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	f002 021f 	and.w	r2, r2, #31
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 811f 	beq.w	8004100 <HAL_RCC_OscConfig+0x334>
 8003ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f040 8116 	bne.w	8004100 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	f000 bfaf 	b.w	8004e38 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ede:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eea:	d106      	bne.n	8003efa <HAL_RCC_OscConfig+0x12e>
 8003eec:	4b83      	ldr	r3, [pc, #524]	; (80040fc <HAL_RCC_OscConfig+0x330>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a82      	ldr	r2, [pc, #520]	; (80040fc <HAL_RCC_OscConfig+0x330>)
 8003ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef6:	6013      	str	r3, [r2, #0]
 8003ef8:	e036      	b.n	8003f68 <HAL_RCC_OscConfig+0x19c>
 8003efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003efe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10c      	bne.n	8003f24 <HAL_RCC_OscConfig+0x158>
 8003f0a:	4b7c      	ldr	r3, [pc, #496]	; (80040fc <HAL_RCC_OscConfig+0x330>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a7b      	ldr	r2, [pc, #492]	; (80040fc <HAL_RCC_OscConfig+0x330>)
 8003f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	4b79      	ldr	r3, [pc, #484]	; (80040fc <HAL_RCC_OscConfig+0x330>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a78      	ldr	r2, [pc, #480]	; (80040fc <HAL_RCC_OscConfig+0x330>)
 8003f1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	e021      	b.n	8003f68 <HAL_RCC_OscConfig+0x19c>
 8003f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f34:	d10c      	bne.n	8003f50 <HAL_RCC_OscConfig+0x184>
 8003f36:	4b71      	ldr	r3, [pc, #452]	; (80040fc <HAL_RCC_OscConfig+0x330>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a70      	ldr	r2, [pc, #448]	; (80040fc <HAL_RCC_OscConfig+0x330>)
 8003f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	4b6e      	ldr	r3, [pc, #440]	; (80040fc <HAL_RCC_OscConfig+0x330>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a6d      	ldr	r2, [pc, #436]	; (80040fc <HAL_RCC_OscConfig+0x330>)
 8003f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	e00b      	b.n	8003f68 <HAL_RCC_OscConfig+0x19c>
 8003f50:	4b6a      	ldr	r3, [pc, #424]	; (80040fc <HAL_RCC_OscConfig+0x330>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a69      	ldr	r2, [pc, #420]	; (80040fc <HAL_RCC_OscConfig+0x330>)
 8003f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	4b67      	ldr	r3, [pc, #412]	; (80040fc <HAL_RCC_OscConfig+0x330>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a66      	ldr	r2, [pc, #408]	; (80040fc <HAL_RCC_OscConfig+0x330>)
 8003f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f66:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f68:	4b64      	ldr	r3, [pc, #400]	; (80040fc <HAL_RCC_OscConfig+0x330>)
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	f023 020f 	bic.w	r2, r3, #15
 8003f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	495f      	ldr	r1, [pc, #380]	; (80040fc <HAL_RCC_OscConfig+0x330>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d059      	beq.n	8004046 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f92:	f7fd feed 	bl	8001d70 <HAL_GetTick>
 8003f96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9a:	e00a      	b.n	8003fb2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f9c:	f7fd fee8 	bl	8001d70 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b64      	cmp	r3, #100	; 0x64
 8003faa:	d902      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	f000 bf43 	b.w	8004e38 <HAL_RCC_OscConfig+0x106c>
 8003fb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fb6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fba:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003fbe:	fa93 f3a3 	rbit	r3, r3
 8003fc2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003fc6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fca:	fab3 f383 	clz	r3, r3
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d102      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x218>
 8003fde:	4b47      	ldr	r3, [pc, #284]	; (80040fc <HAL_RCC_OscConfig+0x330>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	e015      	b.n	8004010 <HAL_RCC_OscConfig+0x244>
 8003fe4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fe8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fec:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003ff0:	fa93 f3a3 	rbit	r3, r3
 8003ff4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003ff8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ffc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004000:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004004:	fa93 f3a3 	rbit	r3, r3
 8004008:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800400c:	4b3b      	ldr	r3, [pc, #236]	; (80040fc <HAL_RCC_OscConfig+0x330>)
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004014:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004018:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800401c:	fa92 f2a2 	rbit	r2, r2
 8004020:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004024:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004028:	fab2 f282 	clz	r2, r2
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	f042 0220 	orr.w	r2, r2, #32
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	f002 021f 	and.w	r2, r2, #31
 8004038:	2101      	movs	r1, #1
 800403a:	fa01 f202 	lsl.w	r2, r1, r2
 800403e:	4013      	ands	r3, r2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0ab      	beq.n	8003f9c <HAL_RCC_OscConfig+0x1d0>
 8004044:	e05d      	b.n	8004102 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004046:	f7fd fe93 	bl	8001d70 <HAL_GetTick>
 800404a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404e:	e00a      	b.n	8004066 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004050:	f7fd fe8e 	bl	8001d70 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b64      	cmp	r3, #100	; 0x64
 800405e:	d902      	bls.n	8004066 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	f000 bee9 	b.w	8004e38 <HAL_RCC_OscConfig+0x106c>
 8004066:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800406a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004072:	fa93 f3a3 	rbit	r3, r3
 8004076:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800407a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800407e:	fab3 f383 	clz	r3, r3
 8004082:	b2db      	uxtb	r3, r3
 8004084:	095b      	lsrs	r3, r3, #5
 8004086:	b2db      	uxtb	r3, r3
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b01      	cmp	r3, #1
 8004090:	d102      	bne.n	8004098 <HAL_RCC_OscConfig+0x2cc>
 8004092:	4b1a      	ldr	r3, [pc, #104]	; (80040fc <HAL_RCC_OscConfig+0x330>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	e015      	b.n	80040c4 <HAL_RCC_OscConfig+0x2f8>
 8004098:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800409c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80040a4:	fa93 f3a3 	rbit	r3, r3
 80040a8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80040ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040b0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80040b4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80040b8:	fa93 f3a3 	rbit	r3, r3
 80040bc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80040c0:	4b0e      	ldr	r3, [pc, #56]	; (80040fc <HAL_RCC_OscConfig+0x330>)
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040c8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80040cc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80040d0:	fa92 f2a2 	rbit	r2, r2
 80040d4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80040d8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80040dc:	fab2 f282 	clz	r2, r2
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	f042 0220 	orr.w	r2, r2, #32
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	f002 021f 	and.w	r2, r2, #31
 80040ec:	2101      	movs	r1, #1
 80040ee:	fa01 f202 	lsl.w	r2, r1, r2
 80040f2:	4013      	ands	r3, r2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1ab      	bne.n	8004050 <HAL_RCC_OscConfig+0x284>
 80040f8:	e003      	b.n	8004102 <HAL_RCC_OscConfig+0x336>
 80040fa:	bf00      	nop
 80040fc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004106:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 817d 	beq.w	8004412 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004118:	4ba6      	ldr	r3, [pc, #664]	; (80043b4 <HAL_RCC_OscConfig+0x5e8>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 030c 	and.w	r3, r3, #12
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00b      	beq.n	800413c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004124:	4ba3      	ldr	r3, [pc, #652]	; (80043b4 <HAL_RCC_OscConfig+0x5e8>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 030c 	and.w	r3, r3, #12
 800412c:	2b08      	cmp	r3, #8
 800412e:	d172      	bne.n	8004216 <HAL_RCC_OscConfig+0x44a>
 8004130:	4ba0      	ldr	r3, [pc, #640]	; (80043b4 <HAL_RCC_OscConfig+0x5e8>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d16c      	bne.n	8004216 <HAL_RCC_OscConfig+0x44a>
 800413c:	2302      	movs	r3, #2
 800413e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004142:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004146:	fa93 f3a3 	rbit	r3, r3
 800414a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800414e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004152:	fab3 f383 	clz	r3, r3
 8004156:	b2db      	uxtb	r3, r3
 8004158:	095b      	lsrs	r3, r3, #5
 800415a:	b2db      	uxtb	r3, r3
 800415c:	f043 0301 	orr.w	r3, r3, #1
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b01      	cmp	r3, #1
 8004164:	d102      	bne.n	800416c <HAL_RCC_OscConfig+0x3a0>
 8004166:	4b93      	ldr	r3, [pc, #588]	; (80043b4 <HAL_RCC_OscConfig+0x5e8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	e013      	b.n	8004194 <HAL_RCC_OscConfig+0x3c8>
 800416c:	2302      	movs	r3, #2
 800416e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004172:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004176:	fa93 f3a3 	rbit	r3, r3
 800417a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800417e:	2302      	movs	r3, #2
 8004180:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004184:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004188:	fa93 f3a3 	rbit	r3, r3
 800418c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004190:	4b88      	ldr	r3, [pc, #544]	; (80043b4 <HAL_RCC_OscConfig+0x5e8>)
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	2202      	movs	r2, #2
 8004196:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800419a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800419e:	fa92 f2a2 	rbit	r2, r2
 80041a2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80041a6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80041aa:	fab2 f282 	clz	r2, r2
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	f042 0220 	orr.w	r2, r2, #32
 80041b4:	b2d2      	uxtb	r2, r2
 80041b6:	f002 021f 	and.w	r2, r2, #31
 80041ba:	2101      	movs	r1, #1
 80041bc:	fa01 f202 	lsl.w	r2, r1, r2
 80041c0:	4013      	ands	r3, r2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <HAL_RCC_OscConfig+0x410>
 80041c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d002      	beq.n	80041dc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	f000 be2e 	b.w	8004e38 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041dc:	4b75      	ldr	r3, [pc, #468]	; (80043b4 <HAL_RCC_OscConfig+0x5e8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	21f8      	movs	r1, #248	; 0xf8
 80041f2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80041fa:	fa91 f1a1 	rbit	r1, r1
 80041fe:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004202:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004206:	fab1 f181 	clz	r1, r1
 800420a:	b2c9      	uxtb	r1, r1
 800420c:	408b      	lsls	r3, r1
 800420e:	4969      	ldr	r1, [pc, #420]	; (80043b4 <HAL_RCC_OscConfig+0x5e8>)
 8004210:	4313      	orrs	r3, r2
 8004212:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004214:	e0fd      	b.n	8004412 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800421a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 8088 	beq.w	8004338 <HAL_RCC_OscConfig+0x56c>
 8004228:	2301      	movs	r3, #1
 800422a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004232:	fa93 f3a3 	rbit	r3, r3
 8004236:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800423a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800423e:	fab3 f383 	clz	r3, r3
 8004242:	b2db      	uxtb	r3, r3
 8004244:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004248:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	461a      	mov	r2, r3
 8004250:	2301      	movs	r3, #1
 8004252:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004254:	f7fd fd8c 	bl	8001d70 <HAL_GetTick>
 8004258:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800425c:	e00a      	b.n	8004274 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800425e:	f7fd fd87 	bl	8001d70 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d902      	bls.n	8004274 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	f000 bde2 	b.w	8004e38 <HAL_RCC_OscConfig+0x106c>
 8004274:	2302      	movs	r3, #2
 8004276:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800427e:	fa93 f3a3 	rbit	r3, r3
 8004282:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004286:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800428a:	fab3 f383 	clz	r3, r3
 800428e:	b2db      	uxtb	r3, r3
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	b2db      	uxtb	r3, r3
 8004294:	f043 0301 	orr.w	r3, r3, #1
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b01      	cmp	r3, #1
 800429c:	d102      	bne.n	80042a4 <HAL_RCC_OscConfig+0x4d8>
 800429e:	4b45      	ldr	r3, [pc, #276]	; (80043b4 <HAL_RCC_OscConfig+0x5e8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	e013      	b.n	80042cc <HAL_RCC_OscConfig+0x500>
 80042a4:	2302      	movs	r3, #2
 80042a6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042aa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80042ae:	fa93 f3a3 	rbit	r3, r3
 80042b2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80042b6:	2302      	movs	r3, #2
 80042b8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80042bc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80042c0:	fa93 f3a3 	rbit	r3, r3
 80042c4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80042c8:	4b3a      	ldr	r3, [pc, #232]	; (80043b4 <HAL_RCC_OscConfig+0x5e8>)
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	2202      	movs	r2, #2
 80042ce:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80042d2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80042d6:	fa92 f2a2 	rbit	r2, r2
 80042da:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80042de:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80042e2:	fab2 f282 	clz	r2, r2
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	f042 0220 	orr.w	r2, r2, #32
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	f002 021f 	and.w	r2, r2, #31
 80042f2:	2101      	movs	r1, #1
 80042f4:	fa01 f202 	lsl.w	r2, r1, r2
 80042f8:	4013      	ands	r3, r2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0af      	beq.n	800425e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fe:	4b2d      	ldr	r3, [pc, #180]	; (80043b4 <HAL_RCC_OscConfig+0x5e8>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800430a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	21f8      	movs	r1, #248	; 0xf8
 8004314:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004318:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800431c:	fa91 f1a1 	rbit	r1, r1
 8004320:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004324:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004328:	fab1 f181 	clz	r1, r1
 800432c:	b2c9      	uxtb	r1, r1
 800432e:	408b      	lsls	r3, r1
 8004330:	4920      	ldr	r1, [pc, #128]	; (80043b4 <HAL_RCC_OscConfig+0x5e8>)
 8004332:	4313      	orrs	r3, r2
 8004334:	600b      	str	r3, [r1, #0]
 8004336:	e06c      	b.n	8004412 <HAL_RCC_OscConfig+0x646>
 8004338:	2301      	movs	r3, #1
 800433a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004342:	fa93 f3a3 	rbit	r3, r3
 8004346:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800434a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800434e:	fab3 f383 	clz	r3, r3
 8004352:	b2db      	uxtb	r3, r3
 8004354:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004358:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	461a      	mov	r2, r3
 8004360:	2300      	movs	r3, #0
 8004362:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004364:	f7fd fd04 	bl	8001d70 <HAL_GetTick>
 8004368:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800436c:	e00a      	b.n	8004384 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800436e:	f7fd fcff 	bl	8001d70 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d902      	bls.n	8004384 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	f000 bd5a 	b.w	8004e38 <HAL_RCC_OscConfig+0x106c>
 8004384:	2302      	movs	r3, #2
 8004386:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800438e:	fa93 f3a3 	rbit	r3, r3
 8004392:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800439a:	fab3 f383 	clz	r3, r3
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	095b      	lsrs	r3, r3, #5
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	f043 0301 	orr.w	r3, r3, #1
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d104      	bne.n	80043b8 <HAL_RCC_OscConfig+0x5ec>
 80043ae:	4b01      	ldr	r3, [pc, #4]	; (80043b4 <HAL_RCC_OscConfig+0x5e8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	e015      	b.n	80043e0 <HAL_RCC_OscConfig+0x614>
 80043b4:	40021000 	.word	0x40021000
 80043b8:	2302      	movs	r3, #2
 80043ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043c2:	fa93 f3a3 	rbit	r3, r3
 80043c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80043ca:	2302      	movs	r3, #2
 80043cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80043d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80043d4:	fa93 f3a3 	rbit	r3, r3
 80043d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80043dc:	4bc8      	ldr	r3, [pc, #800]	; (8004700 <HAL_RCC_OscConfig+0x934>)
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	2202      	movs	r2, #2
 80043e2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80043e6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80043ea:	fa92 f2a2 	rbit	r2, r2
 80043ee:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80043f2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80043f6:	fab2 f282 	clz	r2, r2
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	f042 0220 	orr.w	r2, r2, #32
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	f002 021f 	and.w	r2, r2, #31
 8004406:	2101      	movs	r1, #1
 8004408:	fa01 f202 	lsl.w	r2, r1, r2
 800440c:	4013      	ands	r3, r2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1ad      	bne.n	800436e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004416:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 8110 	beq.w	8004648 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800442c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d079      	beq.n	800452c <HAL_RCC_OscConfig+0x760>
 8004438:	2301      	movs	r3, #1
 800443a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004442:	fa93 f3a3 	rbit	r3, r3
 8004446:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800444a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800444e:	fab3 f383 	clz	r3, r3
 8004452:	b2db      	uxtb	r3, r3
 8004454:	461a      	mov	r2, r3
 8004456:	4bab      	ldr	r3, [pc, #684]	; (8004704 <HAL_RCC_OscConfig+0x938>)
 8004458:	4413      	add	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	461a      	mov	r2, r3
 800445e:	2301      	movs	r3, #1
 8004460:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004462:	f7fd fc85 	bl	8001d70 <HAL_GetTick>
 8004466:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800446a:	e00a      	b.n	8004482 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800446c:	f7fd fc80 	bl	8001d70 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d902      	bls.n	8004482 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	f000 bcdb 	b.w	8004e38 <HAL_RCC_OscConfig+0x106c>
 8004482:	2302      	movs	r3, #2
 8004484:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004488:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800448c:	fa93 f3a3 	rbit	r3, r3
 8004490:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004498:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800449c:	2202      	movs	r2, #2
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	fa93 f2a3 	rbit	r2, r3
 80044ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044c0:	2202      	movs	r2, #2
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	fa93 f2a3 	rbit	r2, r3
 80044d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80044da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044dc:	4b88      	ldr	r3, [pc, #544]	; (8004700 <HAL_RCC_OscConfig+0x934>)
 80044de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80044e8:	2102      	movs	r1, #2
 80044ea:	6019      	str	r1, [r3, #0]
 80044ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	fa93 f1a3 	rbit	r1, r3
 80044fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004502:	6019      	str	r1, [r3, #0]
  return result;
 8004504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004508:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	fab3 f383 	clz	r3, r3
 8004512:	b2db      	uxtb	r3, r3
 8004514:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004518:	b2db      	uxtb	r3, r3
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	2101      	movs	r1, #1
 8004520:	fa01 f303 	lsl.w	r3, r1, r3
 8004524:	4013      	ands	r3, r2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0a0      	beq.n	800446c <HAL_RCC_OscConfig+0x6a0>
 800452a:	e08d      	b.n	8004648 <HAL_RCC_OscConfig+0x87c>
 800452c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004530:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004534:	2201      	movs	r2, #1
 8004536:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800453c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	fa93 f2a3 	rbit	r2, r3
 8004546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800454a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800454e:	601a      	str	r2, [r3, #0]
  return result;
 8004550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004554:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004558:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800455a:	fab3 f383 	clz	r3, r3
 800455e:	b2db      	uxtb	r3, r3
 8004560:	461a      	mov	r2, r3
 8004562:	4b68      	ldr	r3, [pc, #416]	; (8004704 <HAL_RCC_OscConfig+0x938>)
 8004564:	4413      	add	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	461a      	mov	r2, r3
 800456a:	2300      	movs	r3, #0
 800456c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800456e:	f7fd fbff 	bl	8001d70 <HAL_GetTick>
 8004572:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004576:	e00a      	b.n	800458e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004578:	f7fd fbfa 	bl	8001d70 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d902      	bls.n	800458e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	f000 bc55 	b.w	8004e38 <HAL_RCC_OscConfig+0x106c>
 800458e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004592:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004596:	2202      	movs	r2, #2
 8004598:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800459e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	fa93 f2a3 	rbit	r2, r3
 80045a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80045ba:	2202      	movs	r2, #2
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	fa93 f2a3 	rbit	r2, r3
 80045cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045de:	2202      	movs	r2, #2
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	fa93 f2a3 	rbit	r2, r3
 80045f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045f4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80045f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045fa:	4b41      	ldr	r3, [pc, #260]	; (8004700 <HAL_RCC_OscConfig+0x934>)
 80045fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004602:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004606:	2102      	movs	r1, #2
 8004608:	6019      	str	r1, [r3, #0]
 800460a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800460e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	fa93 f1a3 	rbit	r1, r3
 8004618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800461c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004620:	6019      	str	r1, [r3, #0]
  return result;
 8004622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004626:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	fab3 f383 	clz	r3, r3
 8004630:	b2db      	uxtb	r3, r3
 8004632:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004636:	b2db      	uxtb	r3, r3
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	2101      	movs	r1, #1
 800463e:	fa01 f303 	lsl.w	r3, r1, r3
 8004642:	4013      	ands	r3, r2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d197      	bne.n	8004578 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800464c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 81a1 	beq.w	80049a0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800465e:	2300      	movs	r3, #0
 8004660:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004664:	4b26      	ldr	r3, [pc, #152]	; (8004700 <HAL_RCC_OscConfig+0x934>)
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d116      	bne.n	800469e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004670:	4b23      	ldr	r3, [pc, #140]	; (8004700 <HAL_RCC_OscConfig+0x934>)
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	4a22      	ldr	r2, [pc, #136]	; (8004700 <HAL_RCC_OscConfig+0x934>)
 8004676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467a:	61d3      	str	r3, [r2, #28]
 800467c:	4b20      	ldr	r3, [pc, #128]	; (8004700 <HAL_RCC_OscConfig+0x934>)
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004688:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004692:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004696:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004698:	2301      	movs	r3, #1
 800469a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469e:	4b1a      	ldr	r3, [pc, #104]	; (8004708 <HAL_RCC_OscConfig+0x93c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d11a      	bne.n	80046e0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046aa:	4b17      	ldr	r3, [pc, #92]	; (8004708 <HAL_RCC_OscConfig+0x93c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a16      	ldr	r2, [pc, #88]	; (8004708 <HAL_RCC_OscConfig+0x93c>)
 80046b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046b6:	f7fd fb5b 	bl	8001d70 <HAL_GetTick>
 80046ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046be:	e009      	b.n	80046d4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c0:	f7fd fb56 	bl	8001d70 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b64      	cmp	r3, #100	; 0x64
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e3b1      	b.n	8004e38 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d4:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <HAL_RCC_OscConfig+0x93c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0ef      	beq.n	80046c0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d10d      	bne.n	800470c <HAL_RCC_OscConfig+0x940>
 80046f0:	4b03      	ldr	r3, [pc, #12]	; (8004700 <HAL_RCC_OscConfig+0x934>)
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	4a02      	ldr	r2, [pc, #8]	; (8004700 <HAL_RCC_OscConfig+0x934>)
 80046f6:	f043 0301 	orr.w	r3, r3, #1
 80046fa:	6213      	str	r3, [r2, #32]
 80046fc:	e03c      	b.n	8004778 <HAL_RCC_OscConfig+0x9ac>
 80046fe:	bf00      	nop
 8004700:	40021000 	.word	0x40021000
 8004704:	10908120 	.word	0x10908120
 8004708:	40007000 	.word	0x40007000
 800470c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004710:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10c      	bne.n	8004736 <HAL_RCC_OscConfig+0x96a>
 800471c:	4bc1      	ldr	r3, [pc, #772]	; (8004a24 <HAL_RCC_OscConfig+0xc58>)
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	4ac0      	ldr	r2, [pc, #768]	; (8004a24 <HAL_RCC_OscConfig+0xc58>)
 8004722:	f023 0301 	bic.w	r3, r3, #1
 8004726:	6213      	str	r3, [r2, #32]
 8004728:	4bbe      	ldr	r3, [pc, #760]	; (8004a24 <HAL_RCC_OscConfig+0xc58>)
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	4abd      	ldr	r2, [pc, #756]	; (8004a24 <HAL_RCC_OscConfig+0xc58>)
 800472e:	f023 0304 	bic.w	r3, r3, #4
 8004732:	6213      	str	r3, [r2, #32]
 8004734:	e020      	b.n	8004778 <HAL_RCC_OscConfig+0x9ac>
 8004736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800473a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	2b05      	cmp	r3, #5
 8004744:	d10c      	bne.n	8004760 <HAL_RCC_OscConfig+0x994>
 8004746:	4bb7      	ldr	r3, [pc, #732]	; (8004a24 <HAL_RCC_OscConfig+0xc58>)
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	4ab6      	ldr	r2, [pc, #728]	; (8004a24 <HAL_RCC_OscConfig+0xc58>)
 800474c:	f043 0304 	orr.w	r3, r3, #4
 8004750:	6213      	str	r3, [r2, #32]
 8004752:	4bb4      	ldr	r3, [pc, #720]	; (8004a24 <HAL_RCC_OscConfig+0xc58>)
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	4ab3      	ldr	r2, [pc, #716]	; (8004a24 <HAL_RCC_OscConfig+0xc58>)
 8004758:	f043 0301 	orr.w	r3, r3, #1
 800475c:	6213      	str	r3, [r2, #32]
 800475e:	e00b      	b.n	8004778 <HAL_RCC_OscConfig+0x9ac>
 8004760:	4bb0      	ldr	r3, [pc, #704]	; (8004a24 <HAL_RCC_OscConfig+0xc58>)
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	4aaf      	ldr	r2, [pc, #700]	; (8004a24 <HAL_RCC_OscConfig+0xc58>)
 8004766:	f023 0301 	bic.w	r3, r3, #1
 800476a:	6213      	str	r3, [r2, #32]
 800476c:	4bad      	ldr	r3, [pc, #692]	; (8004a24 <HAL_RCC_OscConfig+0xc58>)
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	4aac      	ldr	r2, [pc, #688]	; (8004a24 <HAL_RCC_OscConfig+0xc58>)
 8004772:	f023 0304 	bic.w	r3, r3, #4
 8004776:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800477c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 8081 	beq.w	800488c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800478a:	f7fd faf1 	bl	8001d70 <HAL_GetTick>
 800478e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004792:	e00b      	b.n	80047ac <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004794:	f7fd faec 	bl	8001d70 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e345      	b.n	8004e38 <HAL_RCC_OscConfig+0x106c>
 80047ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80047b4:	2202      	movs	r2, #2
 80047b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047bc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	fa93 f2a3 	rbit	r2, r3
 80047c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ca:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80047d8:	2202      	movs	r2, #2
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	fa93 f2a3 	rbit	r2, r3
 80047ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ee:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80047f2:	601a      	str	r2, [r3, #0]
  return result;
 80047f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047f8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80047fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fe:	fab3 f383 	clz	r3, r3
 8004802:	b2db      	uxtb	r3, r3
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	b2db      	uxtb	r3, r3
 8004808:	f043 0302 	orr.w	r3, r3, #2
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d102      	bne.n	8004818 <HAL_RCC_OscConfig+0xa4c>
 8004812:	4b84      	ldr	r3, [pc, #528]	; (8004a24 <HAL_RCC_OscConfig+0xc58>)
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	e013      	b.n	8004840 <HAL_RCC_OscConfig+0xa74>
 8004818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800481c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004820:	2202      	movs	r2, #2
 8004822:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004828:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	fa93 f2a3 	rbit	r2, r3
 8004832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004836:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	4b79      	ldr	r3, [pc, #484]	; (8004a24 <HAL_RCC_OscConfig+0xc58>)
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004844:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004848:	2102      	movs	r1, #2
 800484a:	6011      	str	r1, [r2, #0]
 800484c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004850:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004854:	6812      	ldr	r2, [r2, #0]
 8004856:	fa92 f1a2 	rbit	r1, r2
 800485a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800485e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004862:	6011      	str	r1, [r2, #0]
  return result;
 8004864:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004868:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	fab2 f282 	clz	r2, r2
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004878:	b2d2      	uxtb	r2, r2
 800487a:	f002 021f 	and.w	r2, r2, #31
 800487e:	2101      	movs	r1, #1
 8004880:	fa01 f202 	lsl.w	r2, r1, r2
 8004884:	4013      	ands	r3, r2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d084      	beq.n	8004794 <HAL_RCC_OscConfig+0x9c8>
 800488a:	e07f      	b.n	800498c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800488c:	f7fd fa70 	bl	8001d70 <HAL_GetTick>
 8004890:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004894:	e00b      	b.n	80048ae <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004896:	f7fd fa6b 	bl	8001d70 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e2c4      	b.n	8004e38 <HAL_RCC_OscConfig+0x106c>
 80048ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80048b6:	2202      	movs	r2, #2
 80048b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048be:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	fa93 f2a3 	rbit	r2, r3
 80048c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048cc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048d6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80048da:	2202      	movs	r2, #2
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048e2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	fa93 f2a3 	rbit	r2, r3
 80048ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048f0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80048f4:	601a      	str	r2, [r3, #0]
  return result;
 80048f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048fa:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80048fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004900:	fab3 f383 	clz	r3, r3
 8004904:	b2db      	uxtb	r3, r3
 8004906:	095b      	lsrs	r3, r3, #5
 8004908:	b2db      	uxtb	r3, r3
 800490a:	f043 0302 	orr.w	r3, r3, #2
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d102      	bne.n	800491a <HAL_RCC_OscConfig+0xb4e>
 8004914:	4b43      	ldr	r3, [pc, #268]	; (8004a24 <HAL_RCC_OscConfig+0xc58>)
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	e013      	b.n	8004942 <HAL_RCC_OscConfig+0xb76>
 800491a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800491e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004922:	2202      	movs	r2, #2
 8004924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800492a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	fa93 f2a3 	rbit	r2, r3
 8004934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004938:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	4b39      	ldr	r3, [pc, #228]	; (8004a24 <HAL_RCC_OscConfig+0xc58>)
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004946:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800494a:	2102      	movs	r1, #2
 800494c:	6011      	str	r1, [r2, #0]
 800494e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004952:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	fa92 f1a2 	rbit	r1, r2
 800495c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004960:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004964:	6011      	str	r1, [r2, #0]
  return result;
 8004966:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800496a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800496e:	6812      	ldr	r2, [r2, #0]
 8004970:	fab2 f282 	clz	r2, r2
 8004974:	b2d2      	uxtb	r2, r2
 8004976:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	f002 021f 	and.w	r2, r2, #31
 8004980:	2101      	movs	r1, #1
 8004982:	fa01 f202 	lsl.w	r2, r1, r2
 8004986:	4013      	ands	r3, r2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d184      	bne.n	8004896 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800498c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004990:	2b01      	cmp	r3, #1
 8004992:	d105      	bne.n	80049a0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004994:	4b23      	ldr	r3, [pc, #140]	; (8004a24 <HAL_RCC_OscConfig+0xc58>)
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	4a22      	ldr	r2, [pc, #136]	; (8004a24 <HAL_RCC_OscConfig+0xc58>)
 800499a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800499e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 8242 	beq.w	8004e36 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049b2:	4b1c      	ldr	r3, [pc, #112]	; (8004a24 <HAL_RCC_OscConfig+0xc58>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f003 030c 	and.w	r3, r3, #12
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	f000 8213 	beq.w	8004de6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	f040 8162 	bne.w	8004c96 <HAL_RCC_OscConfig+0xeca>
 80049d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049d6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80049da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	fa93 f2a3 	rbit	r2, r3
 80049ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80049f6:	601a      	str	r2, [r3, #0]
  return result;
 80049f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049fc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004a00:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a02:	fab3 f383 	clz	r3, r3
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	461a      	mov	r2, r3
 8004a14:	2300      	movs	r3, #0
 8004a16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a18:	f7fd f9aa 	bl	8001d70 <HAL_GetTick>
 8004a1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a20:	e00c      	b.n	8004a3c <HAL_RCC_OscConfig+0xc70>
 8004a22:	bf00      	nop
 8004a24:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a28:	f7fd f9a2 	bl	8001d70 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e1fd      	b.n	8004e38 <HAL_RCC_OscConfig+0x106c>
 8004a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a40:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004a44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a4e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	fa93 f2a3 	rbit	r2, r3
 8004a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a5c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004a60:	601a      	str	r2, [r3, #0]
  return result;
 8004a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a66:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004a6a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a6c:	fab3 f383 	clz	r3, r3
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d102      	bne.n	8004a86 <HAL_RCC_OscConfig+0xcba>
 8004a80:	4bb0      	ldr	r3, [pc, #704]	; (8004d44 <HAL_RCC_OscConfig+0xf78>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	e027      	b.n	8004ad6 <HAL_RCC_OscConfig+0xd0a>
 8004a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a8a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004a8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a98:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	fa93 f2a3 	rbit	r2, r3
 8004aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ab0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004ab4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004abe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	fa93 f2a3 	rbit	r2, r3
 8004ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004acc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	4b9c      	ldr	r3, [pc, #624]	; (8004d44 <HAL_RCC_OscConfig+0xf78>)
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ada:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004ade:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004ae2:	6011      	str	r1, [r2, #0]
 8004ae4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ae8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004aec:	6812      	ldr	r2, [r2, #0]
 8004aee:	fa92 f1a2 	rbit	r1, r2
 8004af2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004af6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004afa:	6011      	str	r1, [r2, #0]
  return result;
 8004afc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b00:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004b04:	6812      	ldr	r2, [r2, #0]
 8004b06:	fab2 f282 	clz	r2, r2
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	f042 0220 	orr.w	r2, r2, #32
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	f002 021f 	and.w	r2, r2, #31
 8004b16:	2101      	movs	r1, #1
 8004b18:	fa01 f202 	lsl.w	r2, r1, r2
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d182      	bne.n	8004a28 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b22:	4b88      	ldr	r3, [pc, #544]	; (8004d44 <HAL_RCC_OscConfig+0xf78>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	430b      	orrs	r3, r1
 8004b44:	497f      	ldr	r1, [pc, #508]	; (8004d44 <HAL_RCC_OscConfig+0xf78>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	604b      	str	r3, [r1, #4]
 8004b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b4e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004b52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b5c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	fa93 f2a3 	rbit	r2, r3
 8004b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b6a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004b6e:	601a      	str	r2, [r3, #0]
  return result;
 8004b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b74:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004b78:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b7a:	fab3 f383 	clz	r3, r3
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b90:	f7fd f8ee 	bl	8001d70 <HAL_GetTick>
 8004b94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b98:	e009      	b.n	8004bae <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b9a:	f7fd f8e9 	bl	8001d70 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e144      	b.n	8004e38 <HAL_RCC_OscConfig+0x106c>
 8004bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bb2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004bb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bc0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	fa93 f2a3 	rbit	r2, r3
 8004bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bce:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004bd2:	601a      	str	r2, [r3, #0]
  return result;
 8004bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bd8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004bdc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bde:	fab3 f383 	clz	r3, r3
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	095b      	lsrs	r3, r3, #5
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	f043 0301 	orr.w	r3, r3, #1
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d102      	bne.n	8004bf8 <HAL_RCC_OscConfig+0xe2c>
 8004bf2:	4b54      	ldr	r3, [pc, #336]	; (8004d44 <HAL_RCC_OscConfig+0xf78>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	e027      	b.n	8004c48 <HAL_RCC_OscConfig+0xe7c>
 8004bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bfc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004c00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c0a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	fa93 f2a3 	rbit	r2, r3
 8004c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c18:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c22:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004c26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c30:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	fa93 f2a3 	rbit	r2, r3
 8004c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c3e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	4b3f      	ldr	r3, [pc, #252]	; (8004d44 <HAL_RCC_OscConfig+0xf78>)
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c4c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004c50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004c54:	6011      	str	r1, [r2, #0]
 8004c56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c5a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004c5e:	6812      	ldr	r2, [r2, #0]
 8004c60:	fa92 f1a2 	rbit	r1, r2
 8004c64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c68:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004c6c:	6011      	str	r1, [r2, #0]
  return result;
 8004c6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c72:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	fab2 f282 	clz	r2, r2
 8004c7c:	b2d2      	uxtb	r2, r2
 8004c7e:	f042 0220 	orr.w	r2, r2, #32
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	f002 021f 	and.w	r2, r2, #31
 8004c88:	2101      	movs	r1, #1
 8004c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c8e:	4013      	ands	r3, r2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d082      	beq.n	8004b9a <HAL_RCC_OscConfig+0xdce>
 8004c94:	e0cf      	b.n	8004e36 <HAL_RCC_OscConfig+0x106a>
 8004c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c9a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004c9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ca2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ca8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	fa93 f2a3 	rbit	r2, r3
 8004cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cb6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004cba:	601a      	str	r2, [r3, #0]
  return result;
 8004cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cc0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004cc4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc6:	fab3 f383 	clz	r3, r3
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004cd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	2300      	movs	r3, #0
 8004cda:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cdc:	f7fd f848 	bl	8001d70 <HAL_GetTick>
 8004ce0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ce4:	e009      	b.n	8004cfa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce6:	f7fd f843 	bl	8001d70 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e09e      	b.n	8004e38 <HAL_RCC_OscConfig+0x106c>
 8004cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cfe:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004d02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d0c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	fa93 f2a3 	rbit	r2, r3
 8004d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d1a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004d1e:	601a      	str	r2, [r3, #0]
  return result;
 8004d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d24:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004d28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d2a:	fab3 f383 	clz	r3, r3
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	095b      	lsrs	r3, r3, #5
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	f043 0301 	orr.w	r3, r3, #1
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d104      	bne.n	8004d48 <HAL_RCC_OscConfig+0xf7c>
 8004d3e:	4b01      	ldr	r3, [pc, #4]	; (8004d44 <HAL_RCC_OscConfig+0xf78>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	e029      	b.n	8004d98 <HAL_RCC_OscConfig+0xfcc>
 8004d44:	40021000 	.word	0x40021000
 8004d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d4c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004d50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d5a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	fa93 f2a3 	rbit	r2, r3
 8004d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d68:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d72:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004d76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d80:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	fa93 f2a3 	rbit	r2, r3
 8004d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d8e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	4b2b      	ldr	r3, [pc, #172]	; (8004e44 <HAL_RCC_OscConfig+0x1078>)
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d9c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004da0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004da4:	6011      	str	r1, [r2, #0]
 8004da6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004daa:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004dae:	6812      	ldr	r2, [r2, #0]
 8004db0:	fa92 f1a2 	rbit	r1, r2
 8004db4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004db8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004dbc:	6011      	str	r1, [r2, #0]
  return result;
 8004dbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004dc2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004dc6:	6812      	ldr	r2, [r2, #0]
 8004dc8:	fab2 f282 	clz	r2, r2
 8004dcc:	b2d2      	uxtb	r2, r2
 8004dce:	f042 0220 	orr.w	r2, r2, #32
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	f002 021f 	and.w	r2, r2, #31
 8004dd8:	2101      	movs	r1, #1
 8004dda:	fa01 f202 	lsl.w	r2, r1, r2
 8004dde:	4013      	ands	r3, r2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d180      	bne.n	8004ce6 <HAL_RCC_OscConfig+0xf1a>
 8004de4:	e027      	b.n	8004e36 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d101      	bne.n	8004dfa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e01e      	b.n	8004e38 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004dfa:	4b12      	ldr	r3, [pc, #72]	; (8004e44 <HAL_RCC_OscConfig+0x1078>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004e02:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004e06:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d10b      	bne.n	8004e32 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004e1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004e1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d001      	beq.n	8004e36 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e000      	b.n	8004e38 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40021000 	.word	0x40021000

08004e48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b09e      	sub	sp, #120	; 0x78
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e162      	b.n	8005126 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e60:	4b90      	ldr	r3, [pc, #576]	; (80050a4 <HAL_RCC_ClockConfig+0x25c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d910      	bls.n	8004e90 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e6e:	4b8d      	ldr	r3, [pc, #564]	; (80050a4 <HAL_RCC_ClockConfig+0x25c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f023 0207 	bic.w	r2, r3, #7
 8004e76:	498b      	ldr	r1, [pc, #556]	; (80050a4 <HAL_RCC_ClockConfig+0x25c>)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e7e:	4b89      	ldr	r3, [pc, #548]	; (80050a4 <HAL_RCC_ClockConfig+0x25c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d001      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e14a      	b.n	8005126 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d008      	beq.n	8004eae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e9c:	4b82      	ldr	r3, [pc, #520]	; (80050a8 <HAL_RCC_ClockConfig+0x260>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	497f      	ldr	r1, [pc, #508]	; (80050a8 <HAL_RCC_ClockConfig+0x260>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 80dc 	beq.w	8005074 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d13c      	bne.n	8004f3e <HAL_RCC_ClockConfig+0xf6>
 8004ec4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ec8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ecc:	fa93 f3a3 	rbit	r3, r3
 8004ed0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ed4:	fab3 f383 	clz	r3, r3
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	f043 0301 	orr.w	r3, r3, #1
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d102      	bne.n	8004eee <HAL_RCC_ClockConfig+0xa6>
 8004ee8:	4b6f      	ldr	r3, [pc, #444]	; (80050a8 <HAL_RCC_ClockConfig+0x260>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	e00f      	b.n	8004f0e <HAL_RCC_ClockConfig+0xc6>
 8004eee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ef2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ef6:	fa93 f3a3 	rbit	r3, r3
 8004efa:	667b      	str	r3, [r7, #100]	; 0x64
 8004efc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f00:	663b      	str	r3, [r7, #96]	; 0x60
 8004f02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f04:	fa93 f3a3 	rbit	r3, r3
 8004f08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f0a:	4b67      	ldr	r3, [pc, #412]	; (80050a8 <HAL_RCC_ClockConfig+0x260>)
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f12:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f16:	fa92 f2a2 	rbit	r2, r2
 8004f1a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004f1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004f1e:	fab2 f282 	clz	r2, r2
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	f042 0220 	orr.w	r2, r2, #32
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	f002 021f 	and.w	r2, r2, #31
 8004f2e:	2101      	movs	r1, #1
 8004f30:	fa01 f202 	lsl.w	r2, r1, r2
 8004f34:	4013      	ands	r3, r2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d17b      	bne.n	8005032 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e0f3      	b.n	8005126 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d13c      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0x178>
 8004f46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f4a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f4e:	fa93 f3a3 	rbit	r3, r3
 8004f52:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f56:	fab3 f383 	clz	r3, r3
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	095b      	lsrs	r3, r3, #5
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	f043 0301 	orr.w	r3, r3, #1
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d102      	bne.n	8004f70 <HAL_RCC_ClockConfig+0x128>
 8004f6a:	4b4f      	ldr	r3, [pc, #316]	; (80050a8 <HAL_RCC_ClockConfig+0x260>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	e00f      	b.n	8004f90 <HAL_RCC_ClockConfig+0x148>
 8004f70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f74:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f78:	fa93 f3a3 	rbit	r3, r3
 8004f7c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f82:	643b      	str	r3, [r7, #64]	; 0x40
 8004f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f86:	fa93 f3a3 	rbit	r3, r3
 8004f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f8c:	4b46      	ldr	r3, [pc, #280]	; (80050a8 <HAL_RCC_ClockConfig+0x260>)
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f94:	63ba      	str	r2, [r7, #56]	; 0x38
 8004f96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f98:	fa92 f2a2 	rbit	r2, r2
 8004f9c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fa0:	fab2 f282 	clz	r2, r2
 8004fa4:	b2d2      	uxtb	r2, r2
 8004fa6:	f042 0220 	orr.w	r2, r2, #32
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	f002 021f 	and.w	r2, r2, #31
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d13a      	bne.n	8005032 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e0b2      	b.n	8005126 <HAL_RCC_ClockConfig+0x2de>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc6:	fa93 f3a3 	rbit	r3, r3
 8004fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fce:	fab3 f383 	clz	r3, r3
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	095b      	lsrs	r3, r3, #5
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	f043 0301 	orr.w	r3, r3, #1
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d102      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0x1a0>
 8004fe2:	4b31      	ldr	r3, [pc, #196]	; (80050a8 <HAL_RCC_ClockConfig+0x260>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	e00d      	b.n	8005004 <HAL_RCC_ClockConfig+0x1bc>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fee:	fa93 f3a3 	rbit	r3, r3
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	623b      	str	r3, [r7, #32]
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	fa93 f3a3 	rbit	r3, r3
 8004ffe:	61fb      	str	r3, [r7, #28]
 8005000:	4b29      	ldr	r3, [pc, #164]	; (80050a8 <HAL_RCC_ClockConfig+0x260>)
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	2202      	movs	r2, #2
 8005006:	61ba      	str	r2, [r7, #24]
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	fa92 f2a2 	rbit	r2, r2
 800500e:	617a      	str	r2, [r7, #20]
  return result;
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	fab2 f282 	clz	r2, r2
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	f042 0220 	orr.w	r2, r2, #32
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	f002 021f 	and.w	r2, r2, #31
 8005022:	2101      	movs	r1, #1
 8005024:	fa01 f202 	lsl.w	r2, r1, r2
 8005028:	4013      	ands	r3, r2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e079      	b.n	8005126 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005032:	4b1d      	ldr	r3, [pc, #116]	; (80050a8 <HAL_RCC_ClockConfig+0x260>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f023 0203 	bic.w	r2, r3, #3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	491a      	ldr	r1, [pc, #104]	; (80050a8 <HAL_RCC_ClockConfig+0x260>)
 8005040:	4313      	orrs	r3, r2
 8005042:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005044:	f7fc fe94 	bl	8001d70 <HAL_GetTick>
 8005048:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800504a:	e00a      	b.n	8005062 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800504c:	f7fc fe90 	bl	8001d70 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	f241 3288 	movw	r2, #5000	; 0x1388
 800505a:	4293      	cmp	r3, r2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e061      	b.n	8005126 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005062:	4b11      	ldr	r3, [pc, #68]	; (80050a8 <HAL_RCC_ClockConfig+0x260>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f003 020c 	and.w	r2, r3, #12
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	429a      	cmp	r2, r3
 8005072:	d1eb      	bne.n	800504c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005074:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <HAL_RCC_ClockConfig+0x25c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	429a      	cmp	r2, r3
 8005080:	d214      	bcs.n	80050ac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005082:	4b08      	ldr	r3, [pc, #32]	; (80050a4 <HAL_RCC_ClockConfig+0x25c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f023 0207 	bic.w	r2, r3, #7
 800508a:	4906      	ldr	r1, [pc, #24]	; (80050a4 <HAL_RCC_ClockConfig+0x25c>)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	4313      	orrs	r3, r2
 8005090:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005092:	4b04      	ldr	r3, [pc, #16]	; (80050a4 <HAL_RCC_ClockConfig+0x25c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	429a      	cmp	r2, r3
 800509e:	d005      	beq.n	80050ac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e040      	b.n	8005126 <HAL_RCC_ClockConfig+0x2de>
 80050a4:	40022000 	.word	0x40022000
 80050a8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d008      	beq.n	80050ca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050b8:	4b1d      	ldr	r3, [pc, #116]	; (8005130 <HAL_RCC_ClockConfig+0x2e8>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	491a      	ldr	r1, [pc, #104]	; (8005130 <HAL_RCC_ClockConfig+0x2e8>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d009      	beq.n	80050ea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050d6:	4b16      	ldr	r3, [pc, #88]	; (8005130 <HAL_RCC_ClockConfig+0x2e8>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	4912      	ldr	r1, [pc, #72]	; (8005130 <HAL_RCC_ClockConfig+0x2e8>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80050ea:	f000 f829 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 80050ee:	4601      	mov	r1, r0
 80050f0:	4b0f      	ldr	r3, [pc, #60]	; (8005130 <HAL_RCC_ClockConfig+0x2e8>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050f8:	22f0      	movs	r2, #240	; 0xf0
 80050fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	fa92 f2a2 	rbit	r2, r2
 8005102:	60fa      	str	r2, [r7, #12]
  return result;
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	fab2 f282 	clz	r2, r2
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	40d3      	lsrs	r3, r2
 800510e:	4a09      	ldr	r2, [pc, #36]	; (8005134 <HAL_RCC_ClockConfig+0x2ec>)
 8005110:	5cd3      	ldrb	r3, [r2, r3]
 8005112:	fa21 f303 	lsr.w	r3, r1, r3
 8005116:	4a08      	ldr	r2, [pc, #32]	; (8005138 <HAL_RCC_ClockConfig+0x2f0>)
 8005118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800511a:	4b08      	ldr	r3, [pc, #32]	; (800513c <HAL_RCC_ClockConfig+0x2f4>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4618      	mov	r0, r3
 8005120:	f7fc fde2 	bl	8001ce8 <HAL_InitTick>
  
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3778      	adds	r7, #120	; 0x78
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	40021000 	.word	0x40021000
 8005134:	0800ba1c 	.word	0x0800ba1c
 8005138:	2000008c 	.word	0x2000008c
 800513c:	20000090 	.word	0x20000090

08005140 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005140:	b480      	push	{r7}
 8005142:	b08b      	sub	sp, #44	; 0x2c
 8005144:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	61fb      	str	r3, [r7, #28]
 800514a:	2300      	movs	r3, #0
 800514c:	61bb      	str	r3, [r7, #24]
 800514e:	2300      	movs	r3, #0
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
 8005152:	2300      	movs	r3, #0
 8005154:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800515a:	4b29      	ldr	r3, [pc, #164]	; (8005200 <HAL_RCC_GetSysClockFreq+0xc0>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	f003 030c 	and.w	r3, r3, #12
 8005166:	2b04      	cmp	r3, #4
 8005168:	d002      	beq.n	8005170 <HAL_RCC_GetSysClockFreq+0x30>
 800516a:	2b08      	cmp	r3, #8
 800516c:	d003      	beq.n	8005176 <HAL_RCC_GetSysClockFreq+0x36>
 800516e:	e03c      	b.n	80051ea <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005170:	4b24      	ldr	r3, [pc, #144]	; (8005204 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005172:	623b      	str	r3, [r7, #32]
      break;
 8005174:	e03c      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800517c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005180:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	fa92 f2a2 	rbit	r2, r2
 8005188:	607a      	str	r2, [r7, #4]
  return result;
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	fab2 f282 	clz	r2, r2
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	40d3      	lsrs	r3, r2
 8005194:	4a1c      	ldr	r2, [pc, #112]	; (8005208 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005196:	5cd3      	ldrb	r3, [r2, r3]
 8005198:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800519a:	4b19      	ldr	r3, [pc, #100]	; (8005200 <HAL_RCC_GetSysClockFreq+0xc0>)
 800519c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	220f      	movs	r2, #15
 80051a4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	fa92 f2a2 	rbit	r2, r2
 80051ac:	60fa      	str	r2, [r7, #12]
  return result;
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	fab2 f282 	clz	r2, r2
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	40d3      	lsrs	r3, r2
 80051b8:	4a14      	ldr	r2, [pc, #80]	; (800520c <HAL_RCC_GetSysClockFreq+0xcc>)
 80051ba:	5cd3      	ldrb	r3, [r2, r3]
 80051bc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80051c8:	4a0e      	ldr	r2, [pc, #56]	; (8005204 <HAL_RCC_GetSysClockFreq+0xc4>)
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	fb02 f303 	mul.w	r3, r2, r3
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
 80051d8:	e004      	b.n	80051e4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	4a0c      	ldr	r2, [pc, #48]	; (8005210 <HAL_RCC_GetSysClockFreq+0xd0>)
 80051de:	fb02 f303 	mul.w	r3, r2, r3
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	623b      	str	r3, [r7, #32]
      break;
 80051e8:	e002      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051ea:	4b06      	ldr	r3, [pc, #24]	; (8005204 <HAL_RCC_GetSysClockFreq+0xc4>)
 80051ec:	623b      	str	r3, [r7, #32]
      break;
 80051ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051f0:	6a3b      	ldr	r3, [r7, #32]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	372c      	adds	r7, #44	; 0x2c
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40021000 	.word	0x40021000
 8005204:	007a1200 	.word	0x007a1200
 8005208:	0800ba34 	.word	0x0800ba34
 800520c:	0800ba44 	.word	0x0800ba44
 8005210:	003d0900 	.word	0x003d0900

08005214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005218:	4b03      	ldr	r3, [pc, #12]	; (8005228 <HAL_RCC_GetHCLKFreq+0x14>)
 800521a:	681b      	ldr	r3, [r3, #0]
}
 800521c:	4618      	mov	r0, r3
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	2000008c 	.word	0x2000008c

0800522c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005232:	f7ff ffef 	bl	8005214 <HAL_RCC_GetHCLKFreq>
 8005236:	4601      	mov	r1, r0
 8005238:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005240:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005244:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	fa92 f2a2 	rbit	r2, r2
 800524c:	603a      	str	r2, [r7, #0]
  return result;
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	fab2 f282 	clz	r2, r2
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	40d3      	lsrs	r3, r2
 8005258:	4a04      	ldr	r2, [pc, #16]	; (800526c <HAL_RCC_GetPCLK1Freq+0x40>)
 800525a:	5cd3      	ldrb	r3, [r2, r3]
 800525c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005260:	4618      	mov	r0, r3
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40021000 	.word	0x40021000
 800526c:	0800ba2c 	.word	0x0800ba2c

08005270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005276:	f7ff ffcd 	bl	8005214 <HAL_RCC_GetHCLKFreq>
 800527a:	4601      	mov	r1, r0
 800527c:	4b0b      	ldr	r3, [pc, #44]	; (80052ac <HAL_RCC_GetPCLK2Freq+0x3c>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005284:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005288:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	fa92 f2a2 	rbit	r2, r2
 8005290:	603a      	str	r2, [r7, #0]
  return result;
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	fab2 f282 	clz	r2, r2
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	40d3      	lsrs	r3, r2
 800529c:	4a04      	ldr	r2, [pc, #16]	; (80052b0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800529e:	5cd3      	ldrb	r3, [r2, r3]
 80052a0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80052a4:	4618      	mov	r0, r3
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	40021000 	.word	0x40021000
 80052b0:	0800ba2c 	.word	0x0800ba2c

080052b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b092      	sub	sp, #72	; 0x48
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80052c4:	2300      	movs	r3, #0
 80052c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 80d4 	beq.w	8005480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052d8:	4b4e      	ldr	r3, [pc, #312]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10e      	bne.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052e4:	4b4b      	ldr	r3, [pc, #300]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	4a4a      	ldr	r2, [pc, #296]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ee:	61d3      	str	r3, [r2, #28]
 80052f0:	4b48      	ldr	r3, [pc, #288]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f8:	60bb      	str	r3, [r7, #8]
 80052fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052fc:	2301      	movs	r3, #1
 80052fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005302:	4b45      	ldr	r3, [pc, #276]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530a:	2b00      	cmp	r3, #0
 800530c:	d118      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800530e:	4b42      	ldr	r3, [pc, #264]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a41      	ldr	r2, [pc, #260]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005318:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800531a:	f7fc fd29 	bl	8001d70 <HAL_GetTick>
 800531e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005320:	e008      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005322:	f7fc fd25 	bl	8001d70 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b64      	cmp	r3, #100	; 0x64
 800532e:	d901      	bls.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e169      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005334:	4b38      	ldr	r3, [pc, #224]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0f0      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005340:	4b34      	ldr	r3, [pc, #208]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005348:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800534a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 8084 	beq.w	800545a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800535a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800535c:	429a      	cmp	r2, r3
 800535e:	d07c      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005360:	4b2c      	ldr	r3, [pc, #176]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005368:	63fb      	str	r3, [r7, #60]	; 0x3c
 800536a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800536e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005372:	fa93 f3a3 	rbit	r3, r3
 8005376:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800537a:	fab3 f383 	clz	r3, r3
 800537e:	b2db      	uxtb	r3, r3
 8005380:	461a      	mov	r2, r3
 8005382:	4b26      	ldr	r3, [pc, #152]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005384:	4413      	add	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	461a      	mov	r2, r3
 800538a:	2301      	movs	r3, #1
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005392:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005396:	fa93 f3a3 	rbit	r3, r3
 800539a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800539c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800539e:	fab3 f383 	clz	r3, r3
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	461a      	mov	r2, r3
 80053a6:	4b1d      	ldr	r3, [pc, #116]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80053a8:	4413      	add	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	461a      	mov	r2, r3
 80053ae:	2300      	movs	r3, #0
 80053b0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80053b2:	4a18      	ldr	r2, [pc, #96]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053b6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80053b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d04b      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c2:	f7fc fcd5 	bl	8001d70 <HAL_GetTick>
 80053c6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053c8:	e00a      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ca:	f7fc fcd1 	bl	8001d70 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d8:	4293      	cmp	r3, r2
 80053da:	d901      	bls.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e113      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80053e0:	2302      	movs	r3, #2
 80053e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e6:	fa93 f3a3 	rbit	r3, r3
 80053ea:	627b      	str	r3, [r7, #36]	; 0x24
 80053ec:	2302      	movs	r3, #2
 80053ee:	623b      	str	r3, [r7, #32]
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	fa93 f3a3 	rbit	r3, r3
 80053f6:	61fb      	str	r3, [r7, #28]
  return result;
 80053f8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053fa:	fab3 f383 	clz	r3, r3
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	095b      	lsrs	r3, r3, #5
 8005402:	b2db      	uxtb	r3, r3
 8005404:	f043 0302 	orr.w	r3, r3, #2
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d108      	bne.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800540e:	4b01      	ldr	r3, [pc, #4]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	e00d      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005414:	40021000 	.word	0x40021000
 8005418:	40007000 	.word	0x40007000
 800541c:	10908100 	.word	0x10908100
 8005420:	2302      	movs	r3, #2
 8005422:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	fa93 f3a3 	rbit	r3, r3
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	4b78      	ldr	r3, [pc, #480]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	2202      	movs	r2, #2
 8005432:	613a      	str	r2, [r7, #16]
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	fa92 f2a2 	rbit	r2, r2
 800543a:	60fa      	str	r2, [r7, #12]
  return result;
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	fab2 f282 	clz	r2, r2
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005448:	b2d2      	uxtb	r2, r2
 800544a:	f002 021f 	and.w	r2, r2, #31
 800544e:	2101      	movs	r1, #1
 8005450:	fa01 f202 	lsl.w	r2, r1, r2
 8005454:	4013      	ands	r3, r2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d0b7      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800545a:	4b6d      	ldr	r3, [pc, #436]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	496a      	ldr	r1, [pc, #424]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005468:	4313      	orrs	r3, r2
 800546a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800546c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005470:	2b01      	cmp	r3, #1
 8005472:	d105      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005474:	4b66      	ldr	r3, [pc, #408]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	4a65      	ldr	r2, [pc, #404]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800547a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800547e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b00      	cmp	r3, #0
 800548a:	d008      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800548c:	4b60      	ldr	r3, [pc, #384]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800548e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005490:	f023 0203 	bic.w	r2, r3, #3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	495d      	ldr	r1, [pc, #372]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800549a:	4313      	orrs	r3, r2
 800549c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d008      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054aa:	4b59      	ldr	r3, [pc, #356]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	4956      	ldr	r1, [pc, #344]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d008      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054c8:	4b51      	ldr	r3, [pc, #324]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	494e      	ldr	r1, [pc, #312]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d008      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054e6:	4b4a      	ldr	r3, [pc, #296]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ea:	f023 0210 	bic.w	r2, r3, #16
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	4947      	ldr	r1, [pc, #284]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d008      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005504:	4b42      	ldr	r3, [pc, #264]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005510:	493f      	ldr	r1, [pc, #252]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005512:	4313      	orrs	r3, r2
 8005514:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	d008      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005522:	4b3b      	ldr	r3, [pc, #236]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005526:	f023 0220 	bic.w	r2, r3, #32
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	4938      	ldr	r1, [pc, #224]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005530:	4313      	orrs	r3, r2
 8005532:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0308 	and.w	r3, r3, #8
 800553c:	2b00      	cmp	r3, #0
 800553e:	d008      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005540:	4b33      	ldr	r3, [pc, #204]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005544:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	4930      	ldr	r1, [pc, #192]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800554e:	4313      	orrs	r3, r2
 8005550:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0310 	and.w	r3, r3, #16
 800555a:	2b00      	cmp	r3, #0
 800555c:	d008      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800555e:	4b2c      	ldr	r3, [pc, #176]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005562:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	4929      	ldr	r1, [pc, #164]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800556c:	4313      	orrs	r3, r2
 800556e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005578:	2b00      	cmp	r3, #0
 800557a:	d008      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800557c:	4b24      	ldr	r3, [pc, #144]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	4921      	ldr	r1, [pc, #132]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800558a:	4313      	orrs	r3, r2
 800558c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005596:	2b00      	cmp	r3, #0
 8005598:	d008      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800559a:	4b1d      	ldr	r3, [pc, #116]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800559c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	491a      	ldr	r1, [pc, #104]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d008      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80055b8:	4b15      	ldr	r3, [pc, #84]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c4:	4912      	ldr	r1, [pc, #72]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d008      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80055d6:	4b0e      	ldr	r3, [pc, #56]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e2:	490b      	ldr	r1, [pc, #44]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d008      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80055f4:	4b06      	ldr	r3, [pc, #24]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005600:	4903      	ldr	r1, [pc, #12]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005602:	4313      	orrs	r3, r2
 8005604:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3748      	adds	r7, #72	; 0x48
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40021000 	.word	0x40021000

08005614 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e09d      	b.n	8005762 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	2b00      	cmp	r3, #0
 800562c:	d108      	bne.n	8005640 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005636:	d009      	beq.n	800564c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	61da      	str	r2, [r3, #28]
 800563e:	e005      	b.n	800564c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fb ffd2 	bl	8001610 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005682:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800568c:	d902      	bls.n	8005694 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800568e:	2300      	movs	r3, #0
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	e002      	b.n	800569a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005698:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80056a2:	d007      	beq.n	80056b4 <HAL_SPI_Init+0xa0>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056ac:	d002      	beq.n	80056b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80056c4:	431a      	orrs	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	431a      	orrs	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056e2:	431a      	orrs	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056ec:	431a      	orrs	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f6:	ea42 0103 	orr.w	r1, r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	0c1b      	lsrs	r3, r3, #16
 8005710:	f003 0204 	and.w	r2, r3, #4
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	f003 0310 	and.w	r3, r3, #16
 800571c:	431a      	orrs	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	431a      	orrs	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005730:	ea42 0103 	orr.w	r1, r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69da      	ldr	r2, [r3, #28]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005750:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b082      	sub	sp, #8
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e049      	b.n	8005810 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d106      	bne.n	8005796 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7fb ff7f 	bl	8001694 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2202      	movs	r2, #2
 800579a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	3304      	adds	r3, #4
 80057a6:	4619      	mov	r1, r3
 80057a8:	4610      	mov	r0, r2
 80057aa:	f000 fd27 	bl	80061fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b01      	cmp	r3, #1
 800582a:	d001      	beq.n	8005830 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e04a      	b.n	80058c6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2202      	movs	r2, #2
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0201 	orr.w	r2, r2, #1
 8005846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a21      	ldr	r2, [pc, #132]	; (80058d4 <HAL_TIM_Base_Start_IT+0xbc>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d018      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x6c>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585a:	d013      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x6c>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a1d      	ldr	r2, [pc, #116]	; (80058d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00e      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x6c>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a1c      	ldr	r2, [pc, #112]	; (80058dc <HAL_TIM_Base_Start_IT+0xc4>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d009      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x6c>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a1a      	ldr	r2, [pc, #104]	; (80058e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d004      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x6c>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a19      	ldr	r2, [pc, #100]	; (80058e4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d115      	bne.n	80058b0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	4b17      	ldr	r3, [pc, #92]	; (80058e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800588c:	4013      	ands	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b06      	cmp	r3, #6
 8005894:	d015      	beq.n	80058c2 <HAL_TIM_Base_Start_IT+0xaa>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800589c:	d011      	beq.n	80058c2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f042 0201 	orr.w	r2, r2, #1
 80058ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ae:	e008      	b.n	80058c2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0201 	orr.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	e000      	b.n	80058c4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	40012c00 	.word	0x40012c00
 80058d8:	40000400 	.word	0x40000400
 80058dc:	40000800 	.word	0x40000800
 80058e0:	40013400 	.word	0x40013400
 80058e4:	40014000 	.word	0x40014000
 80058e8:	00010007 	.word	0x00010007

080058ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e049      	b.n	8005992 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d106      	bne.n	8005918 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f841 	bl	800599a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3304      	adds	r3, #4
 8005928:	4619      	mov	r1, r3
 800592a:	4610      	mov	r0, r2
 800592c:	f000 fc66 	bl	80061fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
	...

080059b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d109      	bne.n	80059d4 <HAL_TIM_PWM_Start+0x24>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	bf14      	ite	ne
 80059cc:	2301      	movne	r3, #1
 80059ce:	2300      	moveq	r3, #0
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	e03c      	b.n	8005a4e <HAL_TIM_PWM_Start+0x9e>
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d109      	bne.n	80059ee <HAL_TIM_PWM_Start+0x3e>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	bf14      	ite	ne
 80059e6:	2301      	movne	r3, #1
 80059e8:	2300      	moveq	r3, #0
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	e02f      	b.n	8005a4e <HAL_TIM_PWM_Start+0x9e>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d109      	bne.n	8005a08 <HAL_TIM_PWM_Start+0x58>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	bf14      	ite	ne
 8005a00:	2301      	movne	r3, #1
 8005a02:	2300      	moveq	r3, #0
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	e022      	b.n	8005a4e <HAL_TIM_PWM_Start+0x9e>
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	2b0c      	cmp	r3, #12
 8005a0c:	d109      	bne.n	8005a22 <HAL_TIM_PWM_Start+0x72>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	bf14      	ite	ne
 8005a1a:	2301      	movne	r3, #1
 8005a1c:	2300      	moveq	r3, #0
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	e015      	b.n	8005a4e <HAL_TIM_PWM_Start+0x9e>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b10      	cmp	r3, #16
 8005a26:	d109      	bne.n	8005a3c <HAL_TIM_PWM_Start+0x8c>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	bf14      	ite	ne
 8005a34:	2301      	movne	r3, #1
 8005a36:	2300      	moveq	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	e008      	b.n	8005a4e <HAL_TIM_PWM_Start+0x9e>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	bf14      	ite	ne
 8005a48:	2301      	movne	r3, #1
 8005a4a:	2300      	moveq	r3, #0
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e097      	b.n	8005b86 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d104      	bne.n	8005a66 <HAL_TIM_PWM_Start+0xb6>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a64:	e023      	b.n	8005aae <HAL_TIM_PWM_Start+0xfe>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b04      	cmp	r3, #4
 8005a6a:	d104      	bne.n	8005a76 <HAL_TIM_PWM_Start+0xc6>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a74:	e01b      	b.n	8005aae <HAL_TIM_PWM_Start+0xfe>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	d104      	bne.n	8005a86 <HAL_TIM_PWM_Start+0xd6>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a84:	e013      	b.n	8005aae <HAL_TIM_PWM_Start+0xfe>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b0c      	cmp	r3, #12
 8005a8a:	d104      	bne.n	8005a96 <HAL_TIM_PWM_Start+0xe6>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a94:	e00b      	b.n	8005aae <HAL_TIM_PWM_Start+0xfe>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b10      	cmp	r3, #16
 8005a9a:	d104      	bne.n	8005aa6 <HAL_TIM_PWM_Start+0xf6>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005aa4:	e003      	b.n	8005aae <HAL_TIM_PWM_Start+0xfe>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	6839      	ldr	r1, [r7, #0]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 ffa0 	bl	80069fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a33      	ldr	r2, [pc, #204]	; (8005b90 <HAL_TIM_PWM_Start+0x1e0>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d013      	beq.n	8005aee <HAL_TIM_PWM_Start+0x13e>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a32      	ldr	r2, [pc, #200]	; (8005b94 <HAL_TIM_PWM_Start+0x1e4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d00e      	beq.n	8005aee <HAL_TIM_PWM_Start+0x13e>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a30      	ldr	r2, [pc, #192]	; (8005b98 <HAL_TIM_PWM_Start+0x1e8>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d009      	beq.n	8005aee <HAL_TIM_PWM_Start+0x13e>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a2f      	ldr	r2, [pc, #188]	; (8005b9c <HAL_TIM_PWM_Start+0x1ec>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d004      	beq.n	8005aee <HAL_TIM_PWM_Start+0x13e>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a2d      	ldr	r2, [pc, #180]	; (8005ba0 <HAL_TIM_PWM_Start+0x1f0>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d101      	bne.n	8005af2 <HAL_TIM_PWM_Start+0x142>
 8005aee:	2301      	movs	r3, #1
 8005af0:	e000      	b.n	8005af4 <HAL_TIM_PWM_Start+0x144>
 8005af2:	2300      	movs	r3, #0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d007      	beq.n	8005b08 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b06:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a20      	ldr	r2, [pc, #128]	; (8005b90 <HAL_TIM_PWM_Start+0x1e0>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d018      	beq.n	8005b44 <HAL_TIM_PWM_Start+0x194>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b1a:	d013      	beq.n	8005b44 <HAL_TIM_PWM_Start+0x194>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a20      	ldr	r2, [pc, #128]	; (8005ba4 <HAL_TIM_PWM_Start+0x1f4>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d00e      	beq.n	8005b44 <HAL_TIM_PWM_Start+0x194>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a1f      	ldr	r2, [pc, #124]	; (8005ba8 <HAL_TIM_PWM_Start+0x1f8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d009      	beq.n	8005b44 <HAL_TIM_PWM_Start+0x194>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a17      	ldr	r2, [pc, #92]	; (8005b94 <HAL_TIM_PWM_Start+0x1e4>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d004      	beq.n	8005b44 <HAL_TIM_PWM_Start+0x194>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a16      	ldr	r2, [pc, #88]	; (8005b98 <HAL_TIM_PWM_Start+0x1e8>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d115      	bne.n	8005b70 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	4b18      	ldr	r3, [pc, #96]	; (8005bac <HAL_TIM_PWM_Start+0x1fc>)
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2b06      	cmp	r3, #6
 8005b54:	d015      	beq.n	8005b82 <HAL_TIM_PWM_Start+0x1d2>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b5c:	d011      	beq.n	8005b82 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f042 0201 	orr.w	r2, r2, #1
 8005b6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b6e:	e008      	b.n	8005b82 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0201 	orr.w	r2, r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	e000      	b.n	8005b84 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	40012c00 	.word	0x40012c00
 8005b94:	40013400 	.word	0x40013400
 8005b98:	40014000 	.word	0x40014000
 8005b9c:	40014400 	.word	0x40014400
 8005ba0:	40014800 	.word	0x40014800
 8005ba4:	40000400 	.word	0x40000400
 8005ba8:	40000800 	.word	0x40000800
 8005bac:	00010007 	.word	0x00010007

08005bb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d122      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d11b      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f06f 0202 	mvn.w	r2, #2
 8005bdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fae3 	bl	80061be <HAL_TIM_IC_CaptureCallback>
 8005bf8:	e005      	b.n	8005c06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fad5 	bl	80061aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fae6 	bl	80061d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d122      	bne.n	8005c60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f003 0304 	and.w	r3, r3, #4
 8005c24:	2b04      	cmp	r3, #4
 8005c26:	d11b      	bne.n	8005c60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f06f 0204 	mvn.w	r2, #4
 8005c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2202      	movs	r2, #2
 8005c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fab9 	bl	80061be <HAL_TIM_IC_CaptureCallback>
 8005c4c:	e005      	b.n	8005c5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 faab 	bl	80061aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fabc 	bl	80061d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f003 0308 	and.w	r3, r3, #8
 8005c6a:	2b08      	cmp	r3, #8
 8005c6c:	d122      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f003 0308 	and.w	r3, r3, #8
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d11b      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f06f 0208 	mvn.w	r2, #8
 8005c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2204      	movs	r2, #4
 8005c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fa8f 	bl	80061be <HAL_TIM_IC_CaptureCallback>
 8005ca0:	e005      	b.n	8005cae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fa81 	bl	80061aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fa92 	bl	80061d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f003 0310 	and.w	r3, r3, #16
 8005cbe:	2b10      	cmp	r3, #16
 8005cc0:	d122      	bne.n	8005d08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f003 0310 	and.w	r3, r3, #16
 8005ccc:	2b10      	cmp	r3, #16
 8005cce:	d11b      	bne.n	8005d08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f06f 0210 	mvn.w	r2, #16
 8005cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2208      	movs	r2, #8
 8005cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fa65 	bl	80061be <HAL_TIM_IC_CaptureCallback>
 8005cf4:	e005      	b.n	8005d02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fa57 	bl	80061aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fa68 	bl	80061d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d10e      	bne.n	8005d34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d107      	bne.n	8005d34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f06f 0201 	mvn.w	r2, #1
 8005d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7fb fb86 	bl	8001440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3e:	2b80      	cmp	r3, #128	; 0x80
 8005d40:	d10e      	bne.n	8005d60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4c:	2b80      	cmp	r3, #128	; 0x80
 8005d4e:	d107      	bne.n	8005d60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fefe 	bl	8006b5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d6e:	d10e      	bne.n	8005d8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7a:	2b80      	cmp	r3, #128	; 0x80
 8005d7c:	d107      	bne.n	8005d8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fef1 	bl	8006b70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d98:	2b40      	cmp	r3, #64	; 0x40
 8005d9a:	d10e      	bne.n	8005dba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da6:	2b40      	cmp	r3, #64	; 0x40
 8005da8:	d107      	bne.n	8005dba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 fa16 	bl	80061e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	f003 0320 	and.w	r3, r3, #32
 8005dc4:	2b20      	cmp	r3, #32
 8005dc6:	d10e      	bne.n	8005de6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f003 0320 	and.w	r3, r3, #32
 8005dd2:	2b20      	cmp	r3, #32
 8005dd4:	d107      	bne.n	8005de6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f06f 0220 	mvn.w	r2, #32
 8005dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 feb1 	bl	8006b48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005de6:	bf00      	nop
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
	...

08005df0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d101      	bne.n	8005e0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	e0ff      	b.n	800600e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b14      	cmp	r3, #20
 8005e1a:	f200 80f0 	bhi.w	8005ffe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005e1e:	a201      	add	r2, pc, #4	; (adr r2, 8005e24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e24:	08005e79 	.word	0x08005e79
 8005e28:	08005fff 	.word	0x08005fff
 8005e2c:	08005fff 	.word	0x08005fff
 8005e30:	08005fff 	.word	0x08005fff
 8005e34:	08005eb9 	.word	0x08005eb9
 8005e38:	08005fff 	.word	0x08005fff
 8005e3c:	08005fff 	.word	0x08005fff
 8005e40:	08005fff 	.word	0x08005fff
 8005e44:	08005efb 	.word	0x08005efb
 8005e48:	08005fff 	.word	0x08005fff
 8005e4c:	08005fff 	.word	0x08005fff
 8005e50:	08005fff 	.word	0x08005fff
 8005e54:	08005f3b 	.word	0x08005f3b
 8005e58:	08005fff 	.word	0x08005fff
 8005e5c:	08005fff 	.word	0x08005fff
 8005e60:	08005fff 	.word	0x08005fff
 8005e64:	08005f7d 	.word	0x08005f7d
 8005e68:	08005fff 	.word	0x08005fff
 8005e6c:	08005fff 	.word	0x08005fff
 8005e70:	08005fff 	.word	0x08005fff
 8005e74:	08005fbd 	.word	0x08005fbd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68b9      	ldr	r1, [r7, #8]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 fa4c 	bl	800631c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	699a      	ldr	r2, [r3, #24]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f042 0208 	orr.w	r2, r2, #8
 8005e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	699a      	ldr	r2, [r3, #24]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0204 	bic.w	r2, r2, #4
 8005ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6999      	ldr	r1, [r3, #24]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	691a      	ldr	r2, [r3, #16]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	619a      	str	r2, [r3, #24]
      break;
 8005eb6:	e0a5      	b.n	8006004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68b9      	ldr	r1, [r7, #8]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 fabc 	bl	800643c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699a      	ldr	r2, [r3, #24]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ed2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699a      	ldr	r2, [r3, #24]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6999      	ldr	r1, [r3, #24]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	021a      	lsls	r2, r3, #8
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	619a      	str	r2, [r3, #24]
      break;
 8005ef8:	e084      	b.n	8006004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68b9      	ldr	r1, [r7, #8]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 fb25 	bl	8006550 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	69da      	ldr	r2, [r3, #28]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f042 0208 	orr.w	r2, r2, #8
 8005f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	69da      	ldr	r2, [r3, #28]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f022 0204 	bic.w	r2, r2, #4
 8005f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	69d9      	ldr	r1, [r3, #28]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	691a      	ldr	r2, [r3, #16]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	61da      	str	r2, [r3, #28]
      break;
 8005f38:	e064      	b.n	8006004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68b9      	ldr	r1, [r7, #8]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 fb8d 	bl	8006660 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	69da      	ldr	r2, [r3, #28]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	69da      	ldr	r2, [r3, #28]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	69d9      	ldr	r1, [r3, #28]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	021a      	lsls	r2, r3, #8
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	61da      	str	r2, [r3, #28]
      break;
 8005f7a:	e043      	b.n	8006004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68b9      	ldr	r1, [r7, #8]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 fbd6 	bl	8006734 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f042 0208 	orr.w	r2, r2, #8
 8005f96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0204 	bic.w	r2, r2, #4
 8005fa6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	691a      	ldr	r2, [r3, #16]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005fba:	e023      	b.n	8006004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68b9      	ldr	r1, [r7, #8]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 fc1a 	bl	80067fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fd6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fe6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	021a      	lsls	r2, r3, #8
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ffc:	e002      	b.n	8006004 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	75fb      	strb	r3, [r7, #23]
      break;
 8006002:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800600c:	7dfb      	ldrb	r3, [r7, #23]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop

08006018 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800602c:	2b01      	cmp	r3, #1
 800602e:	d101      	bne.n	8006034 <HAL_TIM_ConfigClockSource+0x1c>
 8006030:	2302      	movs	r3, #2
 8006032:	e0b6      	b.n	80061a2 <HAL_TIM_ConfigClockSource+0x18a>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006052:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800605e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006070:	d03e      	beq.n	80060f0 <HAL_TIM_ConfigClockSource+0xd8>
 8006072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006076:	f200 8087 	bhi.w	8006188 <HAL_TIM_ConfigClockSource+0x170>
 800607a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800607e:	f000 8086 	beq.w	800618e <HAL_TIM_ConfigClockSource+0x176>
 8006082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006086:	d87f      	bhi.n	8006188 <HAL_TIM_ConfigClockSource+0x170>
 8006088:	2b70      	cmp	r3, #112	; 0x70
 800608a:	d01a      	beq.n	80060c2 <HAL_TIM_ConfigClockSource+0xaa>
 800608c:	2b70      	cmp	r3, #112	; 0x70
 800608e:	d87b      	bhi.n	8006188 <HAL_TIM_ConfigClockSource+0x170>
 8006090:	2b60      	cmp	r3, #96	; 0x60
 8006092:	d050      	beq.n	8006136 <HAL_TIM_ConfigClockSource+0x11e>
 8006094:	2b60      	cmp	r3, #96	; 0x60
 8006096:	d877      	bhi.n	8006188 <HAL_TIM_ConfigClockSource+0x170>
 8006098:	2b50      	cmp	r3, #80	; 0x50
 800609a:	d03c      	beq.n	8006116 <HAL_TIM_ConfigClockSource+0xfe>
 800609c:	2b50      	cmp	r3, #80	; 0x50
 800609e:	d873      	bhi.n	8006188 <HAL_TIM_ConfigClockSource+0x170>
 80060a0:	2b40      	cmp	r3, #64	; 0x40
 80060a2:	d058      	beq.n	8006156 <HAL_TIM_ConfigClockSource+0x13e>
 80060a4:	2b40      	cmp	r3, #64	; 0x40
 80060a6:	d86f      	bhi.n	8006188 <HAL_TIM_ConfigClockSource+0x170>
 80060a8:	2b30      	cmp	r3, #48	; 0x30
 80060aa:	d064      	beq.n	8006176 <HAL_TIM_ConfigClockSource+0x15e>
 80060ac:	2b30      	cmp	r3, #48	; 0x30
 80060ae:	d86b      	bhi.n	8006188 <HAL_TIM_ConfigClockSource+0x170>
 80060b0:	2b20      	cmp	r3, #32
 80060b2:	d060      	beq.n	8006176 <HAL_TIM_ConfigClockSource+0x15e>
 80060b4:	2b20      	cmp	r3, #32
 80060b6:	d867      	bhi.n	8006188 <HAL_TIM_ConfigClockSource+0x170>
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d05c      	beq.n	8006176 <HAL_TIM_ConfigClockSource+0x15e>
 80060bc:	2b10      	cmp	r3, #16
 80060be:	d05a      	beq.n	8006176 <HAL_TIM_ConfigClockSource+0x15e>
 80060c0:	e062      	b.n	8006188 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6818      	ldr	r0, [r3, #0]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	6899      	ldr	r1, [r3, #8]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	f000 fc73 	bl	80069bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	609a      	str	r2, [r3, #8]
      break;
 80060ee:	e04f      	b.n	8006190 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6818      	ldr	r0, [r3, #0]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	6899      	ldr	r1, [r3, #8]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f000 fc5c 	bl	80069bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689a      	ldr	r2, [r3, #8]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006112:	609a      	str	r2, [r3, #8]
      break;
 8006114:	e03c      	b.n	8006190 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6818      	ldr	r0, [r3, #0]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	6859      	ldr	r1, [r3, #4]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	461a      	mov	r2, r3
 8006124:	f000 fbd0 	bl	80068c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2150      	movs	r1, #80	; 0x50
 800612e:	4618      	mov	r0, r3
 8006130:	f000 fc29 	bl	8006986 <TIM_ITRx_SetConfig>
      break;
 8006134:	e02c      	b.n	8006190 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6818      	ldr	r0, [r3, #0]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	6859      	ldr	r1, [r3, #4]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	461a      	mov	r2, r3
 8006144:	f000 fbef 	bl	8006926 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2160      	movs	r1, #96	; 0x60
 800614e:	4618      	mov	r0, r3
 8006150:	f000 fc19 	bl	8006986 <TIM_ITRx_SetConfig>
      break;
 8006154:	e01c      	b.n	8006190 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6818      	ldr	r0, [r3, #0]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	6859      	ldr	r1, [r3, #4]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	461a      	mov	r2, r3
 8006164:	f000 fbb0 	bl	80068c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2140      	movs	r1, #64	; 0x40
 800616e:	4618      	mov	r0, r3
 8006170:	f000 fc09 	bl	8006986 <TIM_ITRx_SetConfig>
      break;
 8006174:	e00c      	b.n	8006190 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4619      	mov	r1, r3
 8006180:	4610      	mov	r0, r2
 8006182:	f000 fc00 	bl	8006986 <TIM_ITRx_SetConfig>
      break;
 8006186:	e003      	b.n	8006190 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	73fb      	strb	r3, [r7, #15]
      break;
 800618c:	e000      	b.n	8006190 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800618e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061b2:	bf00      	nop
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061be:	b480      	push	{r7}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061da:	bf00      	nop
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061ee:	bf00      	nop
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
	...

080061fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a3c      	ldr	r2, [pc, #240]	; (8006300 <TIM_Base_SetConfig+0x104>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d00f      	beq.n	8006234 <TIM_Base_SetConfig+0x38>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621a:	d00b      	beq.n	8006234 <TIM_Base_SetConfig+0x38>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a39      	ldr	r2, [pc, #228]	; (8006304 <TIM_Base_SetConfig+0x108>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d007      	beq.n	8006234 <TIM_Base_SetConfig+0x38>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a38      	ldr	r2, [pc, #224]	; (8006308 <TIM_Base_SetConfig+0x10c>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d003      	beq.n	8006234 <TIM_Base_SetConfig+0x38>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a37      	ldr	r2, [pc, #220]	; (800630c <TIM_Base_SetConfig+0x110>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d108      	bne.n	8006246 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4313      	orrs	r3, r2
 8006244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a2d      	ldr	r2, [pc, #180]	; (8006300 <TIM_Base_SetConfig+0x104>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d01b      	beq.n	8006286 <TIM_Base_SetConfig+0x8a>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006254:	d017      	beq.n	8006286 <TIM_Base_SetConfig+0x8a>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a2a      	ldr	r2, [pc, #168]	; (8006304 <TIM_Base_SetConfig+0x108>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d013      	beq.n	8006286 <TIM_Base_SetConfig+0x8a>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a29      	ldr	r2, [pc, #164]	; (8006308 <TIM_Base_SetConfig+0x10c>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d00f      	beq.n	8006286 <TIM_Base_SetConfig+0x8a>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a28      	ldr	r2, [pc, #160]	; (800630c <TIM_Base_SetConfig+0x110>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d00b      	beq.n	8006286 <TIM_Base_SetConfig+0x8a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a27      	ldr	r2, [pc, #156]	; (8006310 <TIM_Base_SetConfig+0x114>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d007      	beq.n	8006286 <TIM_Base_SetConfig+0x8a>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a26      	ldr	r2, [pc, #152]	; (8006314 <TIM_Base_SetConfig+0x118>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d003      	beq.n	8006286 <TIM_Base_SetConfig+0x8a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a25      	ldr	r2, [pc, #148]	; (8006318 <TIM_Base_SetConfig+0x11c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d108      	bne.n	8006298 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800628c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	4313      	orrs	r3, r2
 8006296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a10      	ldr	r2, [pc, #64]	; (8006300 <TIM_Base_SetConfig+0x104>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00f      	beq.n	80062e4 <TIM_Base_SetConfig+0xe8>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a11      	ldr	r2, [pc, #68]	; (800630c <TIM_Base_SetConfig+0x110>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d00b      	beq.n	80062e4 <TIM_Base_SetConfig+0xe8>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a10      	ldr	r2, [pc, #64]	; (8006310 <TIM_Base_SetConfig+0x114>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d007      	beq.n	80062e4 <TIM_Base_SetConfig+0xe8>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a0f      	ldr	r2, [pc, #60]	; (8006314 <TIM_Base_SetConfig+0x118>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d003      	beq.n	80062e4 <TIM_Base_SetConfig+0xe8>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a0e      	ldr	r2, [pc, #56]	; (8006318 <TIM_Base_SetConfig+0x11c>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d103      	bne.n	80062ec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	691a      	ldr	r2, [r3, #16]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	615a      	str	r2, [r3, #20]
}
 80062f2:	bf00      	nop
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	40012c00 	.word	0x40012c00
 8006304:	40000400 	.word	0x40000400
 8006308:	40000800 	.word	0x40000800
 800630c:	40013400 	.word	0x40013400
 8006310:	40014000 	.word	0x40014000
 8006314:	40014400 	.word	0x40014400
 8006318:	40014800 	.word	0x40014800

0800631c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	f023 0201 	bic.w	r2, r3, #1
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800634a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800634e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f023 0303 	bic.w	r3, r3, #3
 8006356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4313      	orrs	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f023 0302 	bic.w	r3, r3, #2
 8006368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	4313      	orrs	r3, r2
 8006372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a2c      	ldr	r2, [pc, #176]	; (8006428 <TIM_OC1_SetConfig+0x10c>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d00f      	beq.n	800639c <TIM_OC1_SetConfig+0x80>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a2b      	ldr	r2, [pc, #172]	; (800642c <TIM_OC1_SetConfig+0x110>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d00b      	beq.n	800639c <TIM_OC1_SetConfig+0x80>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a2a      	ldr	r2, [pc, #168]	; (8006430 <TIM_OC1_SetConfig+0x114>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d007      	beq.n	800639c <TIM_OC1_SetConfig+0x80>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a29      	ldr	r2, [pc, #164]	; (8006434 <TIM_OC1_SetConfig+0x118>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d003      	beq.n	800639c <TIM_OC1_SetConfig+0x80>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a28      	ldr	r2, [pc, #160]	; (8006438 <TIM_OC1_SetConfig+0x11c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d10c      	bne.n	80063b6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f023 0308 	bic.w	r3, r3, #8
 80063a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f023 0304 	bic.w	r3, r3, #4
 80063b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a1b      	ldr	r2, [pc, #108]	; (8006428 <TIM_OC1_SetConfig+0x10c>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d00f      	beq.n	80063de <TIM_OC1_SetConfig+0xc2>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a1a      	ldr	r2, [pc, #104]	; (800642c <TIM_OC1_SetConfig+0x110>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d00b      	beq.n	80063de <TIM_OC1_SetConfig+0xc2>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a19      	ldr	r2, [pc, #100]	; (8006430 <TIM_OC1_SetConfig+0x114>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d007      	beq.n	80063de <TIM_OC1_SetConfig+0xc2>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a18      	ldr	r2, [pc, #96]	; (8006434 <TIM_OC1_SetConfig+0x118>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d003      	beq.n	80063de <TIM_OC1_SetConfig+0xc2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a17      	ldr	r2, [pc, #92]	; (8006438 <TIM_OC1_SetConfig+0x11c>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d111      	bne.n	8006402 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	4313      	orrs	r3, r2
 8006400:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	621a      	str	r2, [r3, #32]
}
 800641c:	bf00      	nop
 800641e:	371c      	adds	r7, #28
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	40012c00 	.word	0x40012c00
 800642c:	40013400 	.word	0x40013400
 8006430:	40014000 	.word	0x40014000
 8006434:	40014400 	.word	0x40014400
 8006438:	40014800 	.word	0x40014800

0800643c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	f023 0210 	bic.w	r2, r3, #16
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800646a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800646e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	021b      	lsls	r3, r3, #8
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	4313      	orrs	r3, r2
 8006482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f023 0320 	bic.w	r3, r3, #32
 800648a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	011b      	lsls	r3, r3, #4
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	4313      	orrs	r3, r2
 8006496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a28      	ldr	r2, [pc, #160]	; (800653c <TIM_OC2_SetConfig+0x100>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d003      	beq.n	80064a8 <TIM_OC2_SetConfig+0x6c>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a27      	ldr	r2, [pc, #156]	; (8006540 <TIM_OC2_SetConfig+0x104>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d10d      	bne.n	80064c4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a1d      	ldr	r2, [pc, #116]	; (800653c <TIM_OC2_SetConfig+0x100>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d00f      	beq.n	80064ec <TIM_OC2_SetConfig+0xb0>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a1c      	ldr	r2, [pc, #112]	; (8006540 <TIM_OC2_SetConfig+0x104>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d00b      	beq.n	80064ec <TIM_OC2_SetConfig+0xb0>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a1b      	ldr	r2, [pc, #108]	; (8006544 <TIM_OC2_SetConfig+0x108>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d007      	beq.n	80064ec <TIM_OC2_SetConfig+0xb0>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a1a      	ldr	r2, [pc, #104]	; (8006548 <TIM_OC2_SetConfig+0x10c>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d003      	beq.n	80064ec <TIM_OC2_SetConfig+0xb0>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a19      	ldr	r2, [pc, #100]	; (800654c <TIM_OC2_SetConfig+0x110>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d113      	bne.n	8006514 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064f2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064fa:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	4313      	orrs	r3, r2
 8006506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	4313      	orrs	r3, r2
 8006512:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	621a      	str	r2, [r3, #32]
}
 800652e:	bf00      	nop
 8006530:	371c      	adds	r7, #28
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	40012c00 	.word	0x40012c00
 8006540:	40013400 	.word	0x40013400
 8006544:	40014000 	.word	0x40014000
 8006548:	40014400 	.word	0x40014400
 800654c:	40014800 	.word	0x40014800

08006550 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800657e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 0303 	bic.w	r3, r3, #3
 800658a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	4313      	orrs	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800659c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	021b      	lsls	r3, r3, #8
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a27      	ldr	r2, [pc, #156]	; (800664c <TIM_OC3_SetConfig+0xfc>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d003      	beq.n	80065ba <TIM_OC3_SetConfig+0x6a>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a26      	ldr	r2, [pc, #152]	; (8006650 <TIM_OC3_SetConfig+0x100>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d10d      	bne.n	80065d6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	021b      	lsls	r3, r3, #8
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065d4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a1c      	ldr	r2, [pc, #112]	; (800664c <TIM_OC3_SetConfig+0xfc>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d00f      	beq.n	80065fe <TIM_OC3_SetConfig+0xae>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a1b      	ldr	r2, [pc, #108]	; (8006650 <TIM_OC3_SetConfig+0x100>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d00b      	beq.n	80065fe <TIM_OC3_SetConfig+0xae>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a1a      	ldr	r2, [pc, #104]	; (8006654 <TIM_OC3_SetConfig+0x104>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d007      	beq.n	80065fe <TIM_OC3_SetConfig+0xae>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a19      	ldr	r2, [pc, #100]	; (8006658 <TIM_OC3_SetConfig+0x108>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d003      	beq.n	80065fe <TIM_OC3_SetConfig+0xae>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a18      	ldr	r2, [pc, #96]	; (800665c <TIM_OC3_SetConfig+0x10c>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d113      	bne.n	8006626 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800660c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	011b      	lsls	r3, r3, #4
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	4313      	orrs	r3, r2
 8006618:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	011b      	lsls	r3, r3, #4
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	4313      	orrs	r3, r2
 8006624:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	621a      	str	r2, [r3, #32]
}
 8006640:	bf00      	nop
 8006642:	371c      	adds	r7, #28
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	40012c00 	.word	0x40012c00
 8006650:	40013400 	.word	0x40013400
 8006654:	40014000 	.word	0x40014000
 8006658:	40014400 	.word	0x40014400
 800665c:	40014800 	.word	0x40014800

08006660 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006660:	b480      	push	{r7}
 8006662:	b087      	sub	sp, #28
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800668e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800669a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	021b      	lsls	r3, r3, #8
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	031b      	lsls	r3, r3, #12
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a18      	ldr	r2, [pc, #96]	; (8006720 <TIM_OC4_SetConfig+0xc0>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d00f      	beq.n	80066e4 <TIM_OC4_SetConfig+0x84>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a17      	ldr	r2, [pc, #92]	; (8006724 <TIM_OC4_SetConfig+0xc4>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d00b      	beq.n	80066e4 <TIM_OC4_SetConfig+0x84>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a16      	ldr	r2, [pc, #88]	; (8006728 <TIM_OC4_SetConfig+0xc8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d007      	beq.n	80066e4 <TIM_OC4_SetConfig+0x84>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a15      	ldr	r2, [pc, #84]	; (800672c <TIM_OC4_SetConfig+0xcc>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d003      	beq.n	80066e4 <TIM_OC4_SetConfig+0x84>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a14      	ldr	r2, [pc, #80]	; (8006730 <TIM_OC4_SetConfig+0xd0>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d109      	bne.n	80066f8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	019b      	lsls	r3, r3, #6
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685a      	ldr	r2, [r3, #4]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	621a      	str	r2, [r3, #32]
}
 8006712:	bf00      	nop
 8006714:	371c      	adds	r7, #28
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	40012c00 	.word	0x40012c00
 8006724:	40013400 	.word	0x40013400
 8006728:	40014000 	.word	0x40014000
 800672c:	40014400 	.word	0x40014400
 8006730:	40014800 	.word	0x40014800

08006734 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	4313      	orrs	r3, r2
 8006770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006778:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	041b      	lsls	r3, r3, #16
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	4313      	orrs	r3, r2
 8006784:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a17      	ldr	r2, [pc, #92]	; (80067e8 <TIM_OC5_SetConfig+0xb4>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d00f      	beq.n	80067ae <TIM_OC5_SetConfig+0x7a>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a16      	ldr	r2, [pc, #88]	; (80067ec <TIM_OC5_SetConfig+0xb8>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d00b      	beq.n	80067ae <TIM_OC5_SetConfig+0x7a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a15      	ldr	r2, [pc, #84]	; (80067f0 <TIM_OC5_SetConfig+0xbc>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d007      	beq.n	80067ae <TIM_OC5_SetConfig+0x7a>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a14      	ldr	r2, [pc, #80]	; (80067f4 <TIM_OC5_SetConfig+0xc0>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d003      	beq.n	80067ae <TIM_OC5_SetConfig+0x7a>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a13      	ldr	r2, [pc, #76]	; (80067f8 <TIM_OC5_SetConfig+0xc4>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d109      	bne.n	80067c2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	021b      	lsls	r3, r3, #8
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	621a      	str	r2, [r3, #32]
}
 80067dc:	bf00      	nop
 80067de:	371c      	adds	r7, #28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	40012c00 	.word	0x40012c00
 80067ec:	40013400 	.word	0x40013400
 80067f0:	40014000 	.word	0x40014000
 80067f4:	40014400 	.word	0x40014400
 80067f8:	40014800 	.word	0x40014800

080067fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800682a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800682e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	021b      	lsls	r3, r3, #8
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	4313      	orrs	r3, r2
 800683a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006842:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	051b      	lsls	r3, r3, #20
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	4313      	orrs	r3, r2
 800684e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a18      	ldr	r2, [pc, #96]	; (80068b4 <TIM_OC6_SetConfig+0xb8>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d00f      	beq.n	8006878 <TIM_OC6_SetConfig+0x7c>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a17      	ldr	r2, [pc, #92]	; (80068b8 <TIM_OC6_SetConfig+0xbc>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d00b      	beq.n	8006878 <TIM_OC6_SetConfig+0x7c>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a16      	ldr	r2, [pc, #88]	; (80068bc <TIM_OC6_SetConfig+0xc0>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d007      	beq.n	8006878 <TIM_OC6_SetConfig+0x7c>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a15      	ldr	r2, [pc, #84]	; (80068c0 <TIM_OC6_SetConfig+0xc4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d003      	beq.n	8006878 <TIM_OC6_SetConfig+0x7c>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a14      	ldr	r2, [pc, #80]	; (80068c4 <TIM_OC6_SetConfig+0xc8>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d109      	bne.n	800688c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800687e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	029b      	lsls	r3, r3, #10
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	4313      	orrs	r3, r2
 800688a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	621a      	str	r2, [r3, #32]
}
 80068a6:	bf00      	nop
 80068a8:	371c      	adds	r7, #28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	40012c00 	.word	0x40012c00
 80068b8:	40013400 	.word	0x40013400
 80068bc:	40014000 	.word	0x40014000
 80068c0:	40014400 	.word	0x40014400
 80068c4:	40014800 	.word	0x40014800

080068c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	f023 0201 	bic.w	r2, r3, #1
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	011b      	lsls	r3, r3, #4
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f023 030a 	bic.w	r3, r3, #10
 8006904:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	4313      	orrs	r3, r2
 800690c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	621a      	str	r2, [r3, #32]
}
 800691a:	bf00      	nop
 800691c:	371c      	adds	r7, #28
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006926:	b480      	push	{r7}
 8006928:	b087      	sub	sp, #28
 800692a:	af00      	add	r7, sp, #0
 800692c:	60f8      	str	r0, [r7, #12]
 800692e:	60b9      	str	r1, [r7, #8]
 8006930:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	f023 0210 	bic.w	r2, r3, #16
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006950:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	031b      	lsls	r3, r3, #12
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	4313      	orrs	r3, r2
 800695a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006962:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	011b      	lsls	r3, r3, #4
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	4313      	orrs	r3, r2
 800696c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	621a      	str	r2, [r3, #32]
}
 800697a:	bf00      	nop
 800697c:	371c      	adds	r7, #28
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006986:	b480      	push	{r7}
 8006988:	b085      	sub	sp, #20
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
 800698e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800699c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	f043 0307 	orr.w	r3, r3, #7
 80069a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	609a      	str	r2, [r3, #8]
}
 80069b0:	bf00      	nop
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069bc:	b480      	push	{r7}
 80069be:	b087      	sub	sp, #28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
 80069c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	021a      	lsls	r2, r3, #8
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	431a      	orrs	r2, r3
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	609a      	str	r2, [r3, #8]
}
 80069f0:	bf00      	nop
 80069f2:	371c      	adds	r7, #28
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b087      	sub	sp, #28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f003 031f 	and.w	r3, r3, #31
 8006a0e:	2201      	movs	r2, #1
 8006a10:	fa02 f303 	lsl.w	r3, r2, r3
 8006a14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6a1a      	ldr	r2, [r3, #32]
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	43db      	mvns	r3, r3
 8006a1e:	401a      	ands	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a1a      	ldr	r2, [r3, #32]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f003 031f 	and.w	r3, r3, #31
 8006a2e:	6879      	ldr	r1, [r7, #4]
 8006a30:	fa01 f303 	lsl.w	r3, r1, r3
 8006a34:	431a      	orrs	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	621a      	str	r2, [r3, #32]
}
 8006a3a:	bf00      	nop
 8006a3c:	371c      	adds	r7, #28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
	...

08006a48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d101      	bne.n	8006a60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	e063      	b.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a2b      	ldr	r2, [pc, #172]	; (8006b34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d004      	beq.n	8006a94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a2a      	ldr	r2, [pc, #168]	; (8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d108      	bne.n	8006aa6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a1b      	ldr	r2, [pc, #108]	; (8006b34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d018      	beq.n	8006afc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad2:	d013      	beq.n	8006afc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a18      	ldr	r2, [pc, #96]	; (8006b3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d00e      	beq.n	8006afc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a17      	ldr	r2, [pc, #92]	; (8006b40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d009      	beq.n	8006afc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a12      	ldr	r2, [pc, #72]	; (8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d004      	beq.n	8006afc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a13      	ldr	r2, [pc, #76]	; (8006b44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d10c      	bne.n	8006b16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	40012c00 	.word	0x40012c00
 8006b38:	40013400 	.word	0x40013400
 8006b3c:	40000400 	.word	0x40000400
 8006b40:	40000800 	.word	0x40000800
 8006b44:	40014000 	.word	0x40014000

08006b48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e040      	b.n	8006c18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d106      	bne.n	8006bac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7fa fde2 	bl	8001770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2224      	movs	r2, #36	; 0x24
 8006bb0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 0201 	bic.w	r2, r2, #1
 8006bc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fbd4 	bl	8007370 <UART_SetConfig>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d101      	bne.n	8006bd2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e022      	b.n	8006c18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d002      	beq.n	8006be0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fd9c 	bl	8007718 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	689a      	ldr	r2, [r3, #8]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0201 	orr.w	r2, r2, #1
 8006c0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fe23 	bl	800785c <UART_CheckIdleState>
 8006c16:	4603      	mov	r3, r0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b08b      	sub	sp, #44	; 0x2c
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c32:	2b20      	cmp	r3, #32
 8006c34:	d147      	bne.n	8006cc6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d002      	beq.n	8006c42 <HAL_UART_Transmit_IT+0x22>
 8006c3c:	88fb      	ldrh	r3, [r7, #6]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e040      	b.n	8006cc8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	88fa      	ldrh	r2, [r7, #6]
 8006c50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	88fa      	ldrh	r2, [r7, #6]
 8006c58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2221      	movs	r2, #33	; 0x21
 8006c6e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c78:	d107      	bne.n	8006c8a <HAL_UART_Transmit_IT+0x6a>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d103      	bne.n	8006c8a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	4a13      	ldr	r2, [pc, #76]	; (8006cd4 <HAL_UART_Transmit_IT+0xb4>)
 8006c86:	66da      	str	r2, [r3, #108]	; 0x6c
 8006c88:	e002      	b.n	8006c90 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	4a12      	ldr	r2, [pc, #72]	; (8006cd8 <HAL_UART_Transmit_IT+0xb8>)
 8006c8e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	e853 3f00 	ldrex	r3, [r3]
 8006c9c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	461a      	mov	r2, r3
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	623b      	str	r3, [r7, #32]
 8006cb0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb2:	69f9      	ldr	r1, [r7, #28]
 8006cb4:	6a3a      	ldr	r2, [r7, #32]
 8006cb6:	e841 2300 	strex	r3, r2, [r1]
 8006cba:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1e6      	bne.n	8006c90 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	e000      	b.n	8006cc8 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006cc6:	2302      	movs	r3, #2
  }
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	372c      	adds	r7, #44	; 0x2c
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	08007d91 	.word	0x08007d91
 8006cd8:	08007cd9 	.word	0x08007cd9

08006cdc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b08a      	sub	sp, #40	; 0x28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cf0:	2b20      	cmp	r3, #32
 8006cf2:	d132      	bne.n	8006d5a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d002      	beq.n	8006d00 <HAL_UART_Receive_IT+0x24>
 8006cfa:	88fb      	ldrh	r3, [r7, #6]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d101      	bne.n	8006d04 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e02b      	b.n	8006d5c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d018      	beq.n	8006d4a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	e853 3f00 	ldrex	r3, [r3]
 8006d24:	613b      	str	r3, [r7, #16]
   return(result);
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	461a      	mov	r2, r3
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	623b      	str	r3, [r7, #32]
 8006d38:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3a:	69f9      	ldr	r1, [r7, #28]
 8006d3c:	6a3a      	ldr	r2, [r7, #32]
 8006d3e:	e841 2300 	strex	r3, r2, [r1]
 8006d42:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1e6      	bne.n	8006d18 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d4a:	88fb      	ldrh	r3, [r7, #6]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	68b9      	ldr	r1, [r7, #8]
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f000 fe93 	bl	8007a7c <UART_Start_Receive_IT>
 8006d56:	4603      	mov	r3, r0
 8006d58:	e000      	b.n	8006d5c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006d5a:	2302      	movs	r3, #2
  }
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3728      	adds	r7, #40	; 0x28
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b0ba      	sub	sp, #232	; 0xe8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006d8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006d8e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006d92:	4013      	ands	r3, r2
 8006d94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006d98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d115      	bne.n	8006dcc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da4:	f003 0320 	and.w	r3, r3, #32
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00f      	beq.n	8006dcc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006db0:	f003 0320 	and.w	r3, r3, #32
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d009      	beq.n	8006dcc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 82ab 	beq.w	8007318 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	4798      	blx	r3
      }
      return;
 8006dca:	e2a5      	b.n	8007318 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006dcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 8117 	beq.w	8007004 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d106      	bne.n	8006df0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006de2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006de6:	4b85      	ldr	r3, [pc, #532]	; (8006ffc <HAL_UART_IRQHandler+0x298>)
 8006de8:	4013      	ands	r3, r2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f000 810a 	beq.w	8007004 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df4:	f003 0301 	and.w	r3, r3, #1
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d011      	beq.n	8006e20 <HAL_UART_IRQHandler+0xbc>
 8006dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00b      	beq.n	8006e20 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e16:	f043 0201 	orr.w	r2, r3, #1
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e24:	f003 0302 	and.w	r3, r3, #2
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d011      	beq.n	8006e50 <HAL_UART_IRQHandler+0xec>
 8006e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e30:	f003 0301 	and.w	r3, r3, #1
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00b      	beq.n	8006e50 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2202      	movs	r2, #2
 8006e3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e46:	f043 0204 	orr.w	r2, r3, #4
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d011      	beq.n	8006e80 <HAL_UART_IRQHandler+0x11c>
 8006e5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00b      	beq.n	8006e80 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2204      	movs	r2, #4
 8006e6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e76:	f043 0202 	orr.w	r2, r3, #2
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e84:	f003 0308 	and.w	r3, r3, #8
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d017      	beq.n	8006ebc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e90:	f003 0320 	and.w	r3, r3, #32
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d105      	bne.n	8006ea4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e9c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00b      	beq.n	8006ebc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2208      	movs	r2, #8
 8006eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eb2:	f043 0208 	orr.w	r2, r3, #8
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d012      	beq.n	8006eee <HAL_UART_IRQHandler+0x18a>
 8006ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ecc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00c      	beq.n	8006eee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006edc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ee4:	f043 0220 	orr.w	r2, r3, #32
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 8211 	beq.w	800731c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006efe:	f003 0320 	and.w	r3, r3, #32
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00d      	beq.n	8006f22 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f0a:	f003 0320 	and.w	r3, r3, #32
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d007      	beq.n	8006f22 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d003      	beq.n	8006f22 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f36:	2b40      	cmp	r3, #64	; 0x40
 8006f38:	d005      	beq.n	8006f46 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d04f      	beq.n	8006fe6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fe4c 	bl	8007be4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f56:	2b40      	cmp	r3, #64	; 0x40
 8006f58:	d141      	bne.n	8006fde <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3308      	adds	r3, #8
 8006f60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f68:	e853 3f00 	ldrex	r3, [r3]
 8006f6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3308      	adds	r3, #8
 8006f82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f96:	e841 2300 	strex	r3, r2, [r1]
 8006f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1d9      	bne.n	8006f5a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d013      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fb2:	4a13      	ldr	r2, [pc, #76]	; (8007000 <HAL_UART_IRQHandler+0x29c>)
 8006fb4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fc fb26 	bl	800360c <HAL_DMA_Abort_IT>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d017      	beq.n	8006ff6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd4:	e00f      	b.n	8006ff6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f9b4 	bl	8007344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fdc:	e00b      	b.n	8006ff6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f9b0 	bl	8007344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fe4:	e007      	b.n	8006ff6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f9ac 	bl	8007344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006ff4:	e192      	b.n	800731c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff6:	bf00      	nop
    return;
 8006ff8:	e190      	b.n	800731c <HAL_UART_IRQHandler+0x5b8>
 8006ffa:	bf00      	nop
 8006ffc:	04000120 	.word	0x04000120
 8007000:	08007cad 	.word	0x08007cad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007008:	2b01      	cmp	r3, #1
 800700a:	f040 814b 	bne.w	80072a4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800700e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007012:	f003 0310 	and.w	r3, r3, #16
 8007016:	2b00      	cmp	r3, #0
 8007018:	f000 8144 	beq.w	80072a4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800701c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007020:	f003 0310 	and.w	r3, r3, #16
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 813d 	beq.w	80072a4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2210      	movs	r2, #16
 8007030:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703c:	2b40      	cmp	r3, #64	; 0x40
 800703e:	f040 80b5 	bne.w	80071ac <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800704e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007052:	2b00      	cmp	r3, #0
 8007054:	f000 8164 	beq.w	8007320 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800705e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007062:	429a      	cmp	r2, r3
 8007064:	f080 815c 	bcs.w	8007320 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800706e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	2b20      	cmp	r3, #32
 800707a:	f000 8086 	beq.w	800718a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007086:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800708a:	e853 3f00 	ldrex	r3, [r3]
 800708e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007092:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007096:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800709a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	461a      	mov	r2, r3
 80070a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80070ac:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80070b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80070b8:	e841 2300 	strex	r3, r2, [r1]
 80070bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80070c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1da      	bne.n	800707e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3308      	adds	r3, #8
 80070ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80070d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070da:	f023 0301 	bic.w	r3, r3, #1
 80070de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	3308      	adds	r3, #8
 80070e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80070ec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80070f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80070f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070f8:	e841 2300 	strex	r3, r2, [r1]
 80070fc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80070fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1e1      	bne.n	80070c8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3308      	adds	r3, #8
 800710a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800710e:	e853 3f00 	ldrex	r3, [r3]
 8007112:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007114:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800711a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	3308      	adds	r3, #8
 8007124:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007128:	66fa      	str	r2, [r7, #108]	; 0x6c
 800712a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800712e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007130:	e841 2300 	strex	r3, r2, [r1]
 8007134:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007136:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1e3      	bne.n	8007104 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2220      	movs	r2, #32
 8007140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007152:	e853 3f00 	ldrex	r3, [r3]
 8007156:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800715a:	f023 0310 	bic.w	r3, r3, #16
 800715e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800716c:	65bb      	str	r3, [r7, #88]	; 0x58
 800716e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007170:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007172:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007174:	e841 2300 	strex	r3, r2, [r1]
 8007178:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800717a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e4      	bne.n	800714a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007184:	4618      	mov	r0, r3
 8007186:	f7fc fa08 	bl	800359a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2202      	movs	r2, #2
 800718e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800719c:	b29b      	uxth	r3, r3
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f8d7 	bl	8007358 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071aa:	e0b9      	b.n	8007320 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 80ab 	beq.w	8007324 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80071ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f000 80a6 	beq.w	8007324 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e0:	e853 3f00 	ldrex	r3, [r3]
 80071e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	461a      	mov	r2, r3
 80071f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071fa:	647b      	str	r3, [r7, #68]	; 0x44
 80071fc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007200:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007202:	e841 2300 	strex	r3, r2, [r1]
 8007206:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1e4      	bne.n	80071d8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3308      	adds	r3, #8
 8007214:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	e853 3f00 	ldrex	r3, [r3]
 800721c:	623b      	str	r3, [r7, #32]
   return(result);
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	f023 0301 	bic.w	r3, r3, #1
 8007224:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	3308      	adds	r3, #8
 800722e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007232:	633a      	str	r2, [r7, #48]	; 0x30
 8007234:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800723a:	e841 2300 	strex	r3, r2, [r1]
 800723e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1e3      	bne.n	800720e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2220      	movs	r2, #32
 800724a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	e853 3f00 	ldrex	r3, [r3]
 8007266:	60fb      	str	r3, [r7, #12]
   return(result);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f023 0310 	bic.w	r3, r3, #16
 800726e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	461a      	mov	r2, r3
 8007278:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800727c:	61fb      	str	r3, [r7, #28]
 800727e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007280:	69b9      	ldr	r1, [r7, #24]
 8007282:	69fa      	ldr	r2, [r7, #28]
 8007284:	e841 2300 	strex	r3, r2, [r1]
 8007288:	617b      	str	r3, [r7, #20]
   return(result);
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1e4      	bne.n	800725a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2202      	movs	r2, #2
 8007294:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007296:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800729a:	4619      	mov	r1, r3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f85b 	bl	8007358 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072a2:	e03f      	b.n	8007324 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80072a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00e      	beq.n	80072ce <HAL_UART_IRQHandler+0x56a>
 80072b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d008      	beq.n	80072ce <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80072c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 ff94 	bl	80081f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072cc:	e02d      	b.n	800732a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80072ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00e      	beq.n	80072f8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80072da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d008      	beq.n	80072f8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d01c      	beq.n	8007328 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	4798      	blx	r3
    }
    return;
 80072f6:	e017      	b.n	8007328 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80072f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007300:	2b00      	cmp	r3, #0
 8007302:	d012      	beq.n	800732a <HAL_UART_IRQHandler+0x5c6>
 8007304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00c      	beq.n	800732a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fd9d 	bl	8007e50 <UART_EndTransmit_IT>
    return;
 8007316:	e008      	b.n	800732a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007318:	bf00      	nop
 800731a:	e006      	b.n	800732a <HAL_UART_IRQHandler+0x5c6>
    return;
 800731c:	bf00      	nop
 800731e:	e004      	b.n	800732a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007320:	bf00      	nop
 8007322:	e002      	b.n	800732a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007324:	bf00      	nop
 8007326:	e000      	b.n	800732a <HAL_UART_IRQHandler+0x5c6>
    return;
 8007328:	bf00      	nop
  }

}
 800732a:	37e8      	adds	r7, #232	; 0xe8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	460b      	mov	r3, r1
 8007362:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b088      	sub	sp, #32
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007378:	2300      	movs	r3, #0
 800737a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	431a      	orrs	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	431a      	orrs	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	4313      	orrs	r3, r2
 8007392:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800739e:	f023 030c 	bic.w	r3, r3, #12
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	6812      	ldr	r2, [r2, #0]
 80073a6:	6979      	ldr	r1, [r7, #20]
 80073a8:	430b      	orrs	r3, r1
 80073aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68da      	ldr	r2, [r3, #12]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	430a      	orrs	r2, r1
 80073c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	430a      	orrs	r2, r1
 80073e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4aa7      	ldr	r2, [pc, #668]	; (8007688 <UART_SetConfig+0x318>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d120      	bne.n	8007432 <UART_SetConfig+0xc2>
 80073f0:	4ba6      	ldr	r3, [pc, #664]	; (800768c <UART_SetConfig+0x31c>)
 80073f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f4:	f003 0303 	and.w	r3, r3, #3
 80073f8:	2b03      	cmp	r3, #3
 80073fa:	d817      	bhi.n	800742c <UART_SetConfig+0xbc>
 80073fc:	a201      	add	r2, pc, #4	; (adr r2, 8007404 <UART_SetConfig+0x94>)
 80073fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007402:	bf00      	nop
 8007404:	08007415 	.word	0x08007415
 8007408:	08007421 	.word	0x08007421
 800740c:	08007427 	.word	0x08007427
 8007410:	0800741b 	.word	0x0800741b
 8007414:	2301      	movs	r3, #1
 8007416:	77fb      	strb	r3, [r7, #31]
 8007418:	e0b5      	b.n	8007586 <UART_SetConfig+0x216>
 800741a:	2302      	movs	r3, #2
 800741c:	77fb      	strb	r3, [r7, #31]
 800741e:	e0b2      	b.n	8007586 <UART_SetConfig+0x216>
 8007420:	2304      	movs	r3, #4
 8007422:	77fb      	strb	r3, [r7, #31]
 8007424:	e0af      	b.n	8007586 <UART_SetConfig+0x216>
 8007426:	2308      	movs	r3, #8
 8007428:	77fb      	strb	r3, [r7, #31]
 800742a:	e0ac      	b.n	8007586 <UART_SetConfig+0x216>
 800742c:	2310      	movs	r3, #16
 800742e:	77fb      	strb	r3, [r7, #31]
 8007430:	e0a9      	b.n	8007586 <UART_SetConfig+0x216>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a96      	ldr	r2, [pc, #600]	; (8007690 <UART_SetConfig+0x320>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d124      	bne.n	8007486 <UART_SetConfig+0x116>
 800743c:	4b93      	ldr	r3, [pc, #588]	; (800768c <UART_SetConfig+0x31c>)
 800743e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007440:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007444:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007448:	d011      	beq.n	800746e <UART_SetConfig+0xfe>
 800744a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800744e:	d817      	bhi.n	8007480 <UART_SetConfig+0x110>
 8007450:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007454:	d011      	beq.n	800747a <UART_SetConfig+0x10a>
 8007456:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800745a:	d811      	bhi.n	8007480 <UART_SetConfig+0x110>
 800745c:	2b00      	cmp	r3, #0
 800745e:	d003      	beq.n	8007468 <UART_SetConfig+0xf8>
 8007460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007464:	d006      	beq.n	8007474 <UART_SetConfig+0x104>
 8007466:	e00b      	b.n	8007480 <UART_SetConfig+0x110>
 8007468:	2300      	movs	r3, #0
 800746a:	77fb      	strb	r3, [r7, #31]
 800746c:	e08b      	b.n	8007586 <UART_SetConfig+0x216>
 800746e:	2302      	movs	r3, #2
 8007470:	77fb      	strb	r3, [r7, #31]
 8007472:	e088      	b.n	8007586 <UART_SetConfig+0x216>
 8007474:	2304      	movs	r3, #4
 8007476:	77fb      	strb	r3, [r7, #31]
 8007478:	e085      	b.n	8007586 <UART_SetConfig+0x216>
 800747a:	2308      	movs	r3, #8
 800747c:	77fb      	strb	r3, [r7, #31]
 800747e:	e082      	b.n	8007586 <UART_SetConfig+0x216>
 8007480:	2310      	movs	r3, #16
 8007482:	77fb      	strb	r3, [r7, #31]
 8007484:	e07f      	b.n	8007586 <UART_SetConfig+0x216>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a82      	ldr	r2, [pc, #520]	; (8007694 <UART_SetConfig+0x324>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d124      	bne.n	80074da <UART_SetConfig+0x16a>
 8007490:	4b7e      	ldr	r3, [pc, #504]	; (800768c <UART_SetConfig+0x31c>)
 8007492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007494:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007498:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800749c:	d011      	beq.n	80074c2 <UART_SetConfig+0x152>
 800749e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80074a2:	d817      	bhi.n	80074d4 <UART_SetConfig+0x164>
 80074a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80074a8:	d011      	beq.n	80074ce <UART_SetConfig+0x15e>
 80074aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80074ae:	d811      	bhi.n	80074d4 <UART_SetConfig+0x164>
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d003      	beq.n	80074bc <UART_SetConfig+0x14c>
 80074b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80074b8:	d006      	beq.n	80074c8 <UART_SetConfig+0x158>
 80074ba:	e00b      	b.n	80074d4 <UART_SetConfig+0x164>
 80074bc:	2300      	movs	r3, #0
 80074be:	77fb      	strb	r3, [r7, #31]
 80074c0:	e061      	b.n	8007586 <UART_SetConfig+0x216>
 80074c2:	2302      	movs	r3, #2
 80074c4:	77fb      	strb	r3, [r7, #31]
 80074c6:	e05e      	b.n	8007586 <UART_SetConfig+0x216>
 80074c8:	2304      	movs	r3, #4
 80074ca:	77fb      	strb	r3, [r7, #31]
 80074cc:	e05b      	b.n	8007586 <UART_SetConfig+0x216>
 80074ce:	2308      	movs	r3, #8
 80074d0:	77fb      	strb	r3, [r7, #31]
 80074d2:	e058      	b.n	8007586 <UART_SetConfig+0x216>
 80074d4:	2310      	movs	r3, #16
 80074d6:	77fb      	strb	r3, [r7, #31]
 80074d8:	e055      	b.n	8007586 <UART_SetConfig+0x216>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a6e      	ldr	r2, [pc, #440]	; (8007698 <UART_SetConfig+0x328>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d124      	bne.n	800752e <UART_SetConfig+0x1be>
 80074e4:	4b69      	ldr	r3, [pc, #420]	; (800768c <UART_SetConfig+0x31c>)
 80074e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80074ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074f0:	d011      	beq.n	8007516 <UART_SetConfig+0x1a6>
 80074f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074f6:	d817      	bhi.n	8007528 <UART_SetConfig+0x1b8>
 80074f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074fc:	d011      	beq.n	8007522 <UART_SetConfig+0x1b2>
 80074fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007502:	d811      	bhi.n	8007528 <UART_SetConfig+0x1b8>
 8007504:	2b00      	cmp	r3, #0
 8007506:	d003      	beq.n	8007510 <UART_SetConfig+0x1a0>
 8007508:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800750c:	d006      	beq.n	800751c <UART_SetConfig+0x1ac>
 800750e:	e00b      	b.n	8007528 <UART_SetConfig+0x1b8>
 8007510:	2300      	movs	r3, #0
 8007512:	77fb      	strb	r3, [r7, #31]
 8007514:	e037      	b.n	8007586 <UART_SetConfig+0x216>
 8007516:	2302      	movs	r3, #2
 8007518:	77fb      	strb	r3, [r7, #31]
 800751a:	e034      	b.n	8007586 <UART_SetConfig+0x216>
 800751c:	2304      	movs	r3, #4
 800751e:	77fb      	strb	r3, [r7, #31]
 8007520:	e031      	b.n	8007586 <UART_SetConfig+0x216>
 8007522:	2308      	movs	r3, #8
 8007524:	77fb      	strb	r3, [r7, #31]
 8007526:	e02e      	b.n	8007586 <UART_SetConfig+0x216>
 8007528:	2310      	movs	r3, #16
 800752a:	77fb      	strb	r3, [r7, #31]
 800752c:	e02b      	b.n	8007586 <UART_SetConfig+0x216>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a5a      	ldr	r2, [pc, #360]	; (800769c <UART_SetConfig+0x32c>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d124      	bne.n	8007582 <UART_SetConfig+0x212>
 8007538:	4b54      	ldr	r3, [pc, #336]	; (800768c <UART_SetConfig+0x31c>)
 800753a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007540:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007544:	d011      	beq.n	800756a <UART_SetConfig+0x1fa>
 8007546:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800754a:	d817      	bhi.n	800757c <UART_SetConfig+0x20c>
 800754c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007550:	d011      	beq.n	8007576 <UART_SetConfig+0x206>
 8007552:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007556:	d811      	bhi.n	800757c <UART_SetConfig+0x20c>
 8007558:	2b00      	cmp	r3, #0
 800755a:	d003      	beq.n	8007564 <UART_SetConfig+0x1f4>
 800755c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007560:	d006      	beq.n	8007570 <UART_SetConfig+0x200>
 8007562:	e00b      	b.n	800757c <UART_SetConfig+0x20c>
 8007564:	2300      	movs	r3, #0
 8007566:	77fb      	strb	r3, [r7, #31]
 8007568:	e00d      	b.n	8007586 <UART_SetConfig+0x216>
 800756a:	2302      	movs	r3, #2
 800756c:	77fb      	strb	r3, [r7, #31]
 800756e:	e00a      	b.n	8007586 <UART_SetConfig+0x216>
 8007570:	2304      	movs	r3, #4
 8007572:	77fb      	strb	r3, [r7, #31]
 8007574:	e007      	b.n	8007586 <UART_SetConfig+0x216>
 8007576:	2308      	movs	r3, #8
 8007578:	77fb      	strb	r3, [r7, #31]
 800757a:	e004      	b.n	8007586 <UART_SetConfig+0x216>
 800757c:	2310      	movs	r3, #16
 800757e:	77fb      	strb	r3, [r7, #31]
 8007580:	e001      	b.n	8007586 <UART_SetConfig+0x216>
 8007582:	2310      	movs	r3, #16
 8007584:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	69db      	ldr	r3, [r3, #28]
 800758a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800758e:	d15b      	bne.n	8007648 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8007590:	7ffb      	ldrb	r3, [r7, #31]
 8007592:	2b08      	cmp	r3, #8
 8007594:	d827      	bhi.n	80075e6 <UART_SetConfig+0x276>
 8007596:	a201      	add	r2, pc, #4	; (adr r2, 800759c <UART_SetConfig+0x22c>)
 8007598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759c:	080075c1 	.word	0x080075c1
 80075a0:	080075c9 	.word	0x080075c9
 80075a4:	080075d1 	.word	0x080075d1
 80075a8:	080075e7 	.word	0x080075e7
 80075ac:	080075d7 	.word	0x080075d7
 80075b0:	080075e7 	.word	0x080075e7
 80075b4:	080075e7 	.word	0x080075e7
 80075b8:	080075e7 	.word	0x080075e7
 80075bc:	080075df 	.word	0x080075df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075c0:	f7fd fe34 	bl	800522c <HAL_RCC_GetPCLK1Freq>
 80075c4:	61b8      	str	r0, [r7, #24]
        break;
 80075c6:	e013      	b.n	80075f0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075c8:	f7fd fe52 	bl	8005270 <HAL_RCC_GetPCLK2Freq>
 80075cc:	61b8      	str	r0, [r7, #24]
        break;
 80075ce:	e00f      	b.n	80075f0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075d0:	4b33      	ldr	r3, [pc, #204]	; (80076a0 <UART_SetConfig+0x330>)
 80075d2:	61bb      	str	r3, [r7, #24]
        break;
 80075d4:	e00c      	b.n	80075f0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075d6:	f7fd fdb3 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 80075da:	61b8      	str	r0, [r7, #24]
        break;
 80075dc:	e008      	b.n	80075f0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075e2:	61bb      	str	r3, [r7, #24]
        break;
 80075e4:	e004      	b.n	80075f0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	77bb      	strb	r3, [r7, #30]
        break;
 80075ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f000 8082 	beq.w	80076fc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	005a      	lsls	r2, r3, #1
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	085b      	lsrs	r3, r3, #1
 8007602:	441a      	add	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	fbb2 f3f3 	udiv	r3, r2, r3
 800760c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	2b0f      	cmp	r3, #15
 8007612:	d916      	bls.n	8007642 <UART_SetConfig+0x2d2>
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800761a:	d212      	bcs.n	8007642 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	b29b      	uxth	r3, r3
 8007620:	f023 030f 	bic.w	r3, r3, #15
 8007624:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	085b      	lsrs	r3, r3, #1
 800762a:	b29b      	uxth	r3, r3
 800762c:	f003 0307 	and.w	r3, r3, #7
 8007630:	b29a      	uxth	r2, r3
 8007632:	89fb      	ldrh	r3, [r7, #14]
 8007634:	4313      	orrs	r3, r2
 8007636:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	89fa      	ldrh	r2, [r7, #14]
 800763e:	60da      	str	r2, [r3, #12]
 8007640:	e05c      	b.n	80076fc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	77bb      	strb	r3, [r7, #30]
 8007646:	e059      	b.n	80076fc <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007648:	7ffb      	ldrb	r3, [r7, #31]
 800764a:	2b08      	cmp	r3, #8
 800764c:	d835      	bhi.n	80076ba <UART_SetConfig+0x34a>
 800764e:	a201      	add	r2, pc, #4	; (adr r2, 8007654 <UART_SetConfig+0x2e4>)
 8007650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007654:	08007679 	.word	0x08007679
 8007658:	08007681 	.word	0x08007681
 800765c:	080076a5 	.word	0x080076a5
 8007660:	080076bb 	.word	0x080076bb
 8007664:	080076ab 	.word	0x080076ab
 8007668:	080076bb 	.word	0x080076bb
 800766c:	080076bb 	.word	0x080076bb
 8007670:	080076bb 	.word	0x080076bb
 8007674:	080076b3 	.word	0x080076b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007678:	f7fd fdd8 	bl	800522c <HAL_RCC_GetPCLK1Freq>
 800767c:	61b8      	str	r0, [r7, #24]
        break;
 800767e:	e021      	b.n	80076c4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007680:	f7fd fdf6 	bl	8005270 <HAL_RCC_GetPCLK2Freq>
 8007684:	61b8      	str	r0, [r7, #24]
        break;
 8007686:	e01d      	b.n	80076c4 <UART_SetConfig+0x354>
 8007688:	40013800 	.word	0x40013800
 800768c:	40021000 	.word	0x40021000
 8007690:	40004400 	.word	0x40004400
 8007694:	40004800 	.word	0x40004800
 8007698:	40004c00 	.word	0x40004c00
 800769c:	40005000 	.word	0x40005000
 80076a0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076a4:	4b1b      	ldr	r3, [pc, #108]	; (8007714 <UART_SetConfig+0x3a4>)
 80076a6:	61bb      	str	r3, [r7, #24]
        break;
 80076a8:	e00c      	b.n	80076c4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076aa:	f7fd fd49 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 80076ae:	61b8      	str	r0, [r7, #24]
        break;
 80076b0:	e008      	b.n	80076c4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076b6:	61bb      	str	r3, [r7, #24]
        break;
 80076b8:	e004      	b.n	80076c4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80076ba:	2300      	movs	r3, #0
 80076bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	77bb      	strb	r3, [r7, #30]
        break;
 80076c2:	bf00      	nop
    }

    if (pclk != 0U)
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d018      	beq.n	80076fc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	085a      	lsrs	r2, r3, #1
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	441a      	add	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	2b0f      	cmp	r3, #15
 80076e2:	d909      	bls.n	80076f8 <UART_SetConfig+0x388>
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076ea:	d205      	bcs.n	80076f8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	60da      	str	r2, [r3, #12]
 80076f6:	e001      	b.n	80076fc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007708:	7fbb      	ldrb	r3, [r7, #30]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3720      	adds	r7, #32
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	007a1200 	.word	0x007a1200

08007718 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00a      	beq.n	8007742 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	430a      	orrs	r2, r1
 8007740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007746:	f003 0302 	and.w	r3, r3, #2
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00a      	beq.n	8007764 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	430a      	orrs	r2, r1
 8007762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007768:	f003 0304 	and.w	r3, r3, #4
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00a      	beq.n	8007786 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	430a      	orrs	r2, r1
 8007784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778a:	f003 0308 	and.w	r3, r3, #8
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00a      	beq.n	80077a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	430a      	orrs	r2, r1
 80077a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ac:	f003 0310 	and.w	r3, r3, #16
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00a      	beq.n	80077ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	430a      	orrs	r2, r1
 80077c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	f003 0320 	and.w	r3, r3, #32
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00a      	beq.n	80077ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	430a      	orrs	r2, r1
 80077ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d01a      	beq.n	800782e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	430a      	orrs	r2, r1
 800780c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007812:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007816:	d10a      	bne.n	800782e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	430a      	orrs	r2, r1
 800782c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00a      	beq.n	8007850 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	430a      	orrs	r2, r1
 800784e:	605a      	str	r2, [r3, #4]
  }
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b098      	sub	sp, #96	; 0x60
 8007860:	af02      	add	r7, sp, #8
 8007862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800786c:	f7fa fa80 	bl	8001d70 <HAL_GetTick>
 8007870:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0308 	and.w	r3, r3, #8
 800787c:	2b08      	cmp	r3, #8
 800787e:	d12e      	bne.n	80078de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007880:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007888:	2200      	movs	r2, #0
 800788a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f88c 	bl	80079ac <UART_WaitOnFlagUntilTimeout>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d021      	beq.n	80078de <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a2:	e853 3f00 	ldrex	r3, [r3]
 80078a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078ae:	653b      	str	r3, [r7, #80]	; 0x50
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	461a      	mov	r2, r3
 80078b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078b8:	647b      	str	r3, [r7, #68]	; 0x44
 80078ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078c0:	e841 2300 	strex	r3, r2, [r1]
 80078c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1e6      	bne.n	800789a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2220      	movs	r2, #32
 80078d0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e062      	b.n	80079a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0304 	and.w	r3, r3, #4
 80078e8:	2b04      	cmp	r3, #4
 80078ea:	d149      	bne.n	8007980 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078f4:	2200      	movs	r2, #0
 80078f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f856 	bl	80079ac <UART_WaitOnFlagUntilTimeout>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d03c      	beq.n	8007980 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	e853 3f00 	ldrex	r3, [r3]
 8007912:	623b      	str	r3, [r7, #32]
   return(result);
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800791a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	461a      	mov	r2, r3
 8007922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007924:	633b      	str	r3, [r7, #48]	; 0x30
 8007926:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007928:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800792a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800792c:	e841 2300 	strex	r3, r2, [r1]
 8007930:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1e6      	bne.n	8007906 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3308      	adds	r3, #8
 800793e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	e853 3f00 	ldrex	r3, [r3]
 8007946:	60fb      	str	r3, [r7, #12]
   return(result);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f023 0301 	bic.w	r3, r3, #1
 800794e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3308      	adds	r3, #8
 8007956:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007958:	61fa      	str	r2, [r7, #28]
 800795a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795c:	69b9      	ldr	r1, [r7, #24]
 800795e:	69fa      	ldr	r2, [r7, #28]
 8007960:	e841 2300 	strex	r3, r2, [r1]
 8007964:	617b      	str	r3, [r7, #20]
   return(result);
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1e5      	bne.n	8007938 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2220      	movs	r2, #32
 8007970:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	e011      	b.n	80079a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2220      	movs	r2, #32
 8007984:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2220      	movs	r2, #32
 800798a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3758      	adds	r7, #88	; 0x58
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	603b      	str	r3, [r7, #0]
 80079b8:	4613      	mov	r3, r2
 80079ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079bc:	e049      	b.n	8007a52 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c4:	d045      	beq.n	8007a52 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079c6:	f7fa f9d3 	bl	8001d70 <HAL_GetTick>
 80079ca:	4602      	mov	r2, r0
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	69ba      	ldr	r2, [r7, #24]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d302      	bcc.n	80079dc <UART_WaitOnFlagUntilTimeout+0x30>
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d101      	bne.n	80079e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e048      	b.n	8007a72 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0304 	and.w	r3, r3, #4
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d031      	beq.n	8007a52 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	69db      	ldr	r3, [r3, #28]
 80079f4:	f003 0308 	and.w	r3, r3, #8
 80079f8:	2b08      	cmp	r3, #8
 80079fa:	d110      	bne.n	8007a1e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2208      	movs	r2, #8
 8007a02:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f000 f8ed 	bl	8007be4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2208      	movs	r2, #8
 8007a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e029      	b.n	8007a72 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	69db      	ldr	r3, [r3, #28]
 8007a24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a2c:	d111      	bne.n	8007a52 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 f8d3 	bl	8007be4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2220      	movs	r2, #32
 8007a42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e00f      	b.n	8007a72 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	69da      	ldr	r2, [r3, #28]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	bf0c      	ite	eq
 8007a62:	2301      	moveq	r3, #1
 8007a64:	2300      	movne	r3, #0
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	461a      	mov	r2, r3
 8007a6a:	79fb      	ldrb	r3, [r7, #7]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d0a6      	beq.n	80079be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
	...

08007a7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b097      	sub	sp, #92	; 0x5c
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	4613      	mov	r3, r2
 8007a88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	88fa      	ldrh	r2, [r7, #6]
 8007a94:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	88fa      	ldrh	r2, [r7, #6]
 8007a9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aae:	d10e      	bne.n	8007ace <UART_Start_Receive_IT+0x52>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d105      	bne.n	8007ac4 <UART_Start_Receive_IT+0x48>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007abe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ac2:	e01a      	b.n	8007afa <UART_Start_Receive_IT+0x7e>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	22ff      	movs	r2, #255	; 0xff
 8007ac8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007acc:	e015      	b.n	8007afa <UART_Start_Receive_IT+0x7e>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10d      	bne.n	8007af2 <UART_Start_Receive_IT+0x76>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d104      	bne.n	8007ae8 <UART_Start_Receive_IT+0x6c>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	22ff      	movs	r2, #255	; 0xff
 8007ae2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ae6:	e008      	b.n	8007afa <UART_Start_Receive_IT+0x7e>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	227f      	movs	r2, #127	; 0x7f
 8007aec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007af0:	e003      	b.n	8007afa <UART_Start_Receive_IT+0x7e>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2222      	movs	r2, #34	; 0x22
 8007b06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	3308      	adds	r3, #8
 8007b10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1c:	f043 0301 	orr.w	r3, r3, #1
 8007b20:	657b      	str	r3, [r7, #84]	; 0x54
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	3308      	adds	r3, #8
 8007b28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e5      	bne.n	8007b0a <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b46:	d107      	bne.n	8007b58 <UART_Start_Receive_IT+0xdc>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d103      	bne.n	8007b58 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	4a22      	ldr	r2, [pc, #136]	; (8007bdc <UART_Start_Receive_IT+0x160>)
 8007b54:	669a      	str	r2, [r3, #104]	; 0x68
 8007b56:	e002      	b.n	8007b5e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	4a21      	ldr	r2, [pc, #132]	; (8007be0 <UART_Start_Receive_IT+0x164>)
 8007b5c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d019      	beq.n	8007b9a <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6e:	e853 3f00 	ldrex	r3, [r3]
 8007b72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b76:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	461a      	mov	r2, r3
 8007b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b84:	637b      	str	r3, [r7, #52]	; 0x34
 8007b86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b8c:	e841 2300 	strex	r3, r2, [r1]
 8007b90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1e6      	bne.n	8007b66 <UART_Start_Receive_IT+0xea>
 8007b98:	e018      	b.n	8007bcc <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	e853 3f00 	ldrex	r3, [r3]
 8007ba6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	f043 0320 	orr.w	r3, r3, #32
 8007bae:	653b      	str	r3, [r7, #80]	; 0x50
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bb8:	623b      	str	r3, [r7, #32]
 8007bba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbc:	69f9      	ldr	r1, [r7, #28]
 8007bbe:	6a3a      	ldr	r2, [r7, #32]
 8007bc0:	e841 2300 	strex	r3, r2, [r1]
 8007bc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1e6      	bne.n	8007b9a <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	375c      	adds	r7, #92	; 0x5c
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	0800804d 	.word	0x0800804d
 8007be0:	08007ea5 	.word	0x08007ea5

08007be4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b095      	sub	sp, #84	; 0x54
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf4:	e853 3f00 	ldrex	r3, [r3]
 8007bf8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	461a      	mov	r2, r3
 8007c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c0a:	643b      	str	r3, [r7, #64]	; 0x40
 8007c0c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c12:	e841 2300 	strex	r3, r2, [r1]
 8007c16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1e6      	bne.n	8007bec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3308      	adds	r3, #8
 8007c24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	e853 3f00 	ldrex	r3, [r3]
 8007c2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	f023 0301 	bic.w	r3, r3, #1
 8007c34:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	3308      	adds	r3, #8
 8007c3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c46:	e841 2300 	strex	r3, r2, [r1]
 8007c4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1e5      	bne.n	8007c1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d118      	bne.n	8007c8c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	e853 3f00 	ldrex	r3, [r3]
 8007c66:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	f023 0310 	bic.w	r3, r3, #16
 8007c6e:	647b      	str	r3, [r7, #68]	; 0x44
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	461a      	mov	r2, r3
 8007c76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c78:	61bb      	str	r3, [r7, #24]
 8007c7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	6979      	ldr	r1, [r7, #20]
 8007c7e:	69ba      	ldr	r2, [r7, #24]
 8007c80:	e841 2300 	strex	r3, r2, [r1]
 8007c84:	613b      	str	r3, [r7, #16]
   return(result);
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e6      	bne.n	8007c5a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2220      	movs	r2, #32
 8007c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007ca0:	bf00      	nop
 8007ca2:	3754      	adds	r7, #84	; 0x54
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f7ff fb3a 	bl	8007344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cd0:	bf00      	nop
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b08f      	sub	sp, #60	; 0x3c
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ce4:	2b21      	cmp	r3, #33	; 0x21
 8007ce6:	d14d      	bne.n	8007d84 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d132      	bne.n	8007d5a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	e853 3f00 	ldrex	r3, [r3]
 8007d00:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d08:	637b      	str	r3, [r7, #52]	; 0x34
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d14:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d1a:	e841 2300 	strex	r3, r2, [r1]
 8007d1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1e6      	bne.n	8007cf4 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	e853 3f00 	ldrex	r3, [r3]
 8007d32:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d3a:	633b      	str	r3, [r7, #48]	; 0x30
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	461a      	mov	r2, r3
 8007d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d44:	61bb      	str	r3, [r7, #24]
 8007d46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d48:	6979      	ldr	r1, [r7, #20]
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	e841 2300 	strex	r3, r2, [r1]
 8007d50:	613b      	str	r3, [r7, #16]
   return(result);
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1e6      	bne.n	8007d26 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007d58:	e014      	b.n	8007d84 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d5e:	781a      	ldrb	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	b292      	uxth	r2, r2
 8007d66:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d6c:	1c5a      	adds	r2, r3, #1
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007d84:	bf00      	nop
 8007d86:	373c      	adds	r7, #60	; 0x3c
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b091      	sub	sp, #68	; 0x44
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d9c:	2b21      	cmp	r3, #33	; 0x21
 8007d9e:	d151      	bne.n	8007e44 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d132      	bne.n	8007e12 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db4:	e853 3f00 	ldrex	r3, [r3]
 8007db8:	623b      	str	r3, [r7, #32]
   return(result);
 8007dba:	6a3b      	ldr	r3, [r7, #32]
 8007dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dca:	633b      	str	r3, [r7, #48]	; 0x30
 8007dcc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dd2:	e841 2300 	strex	r3, r2, [r1]
 8007dd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1e6      	bne.n	8007dac <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	e853 3f00 	ldrex	r3, [r3]
 8007dea:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007df2:	637b      	str	r3, [r7, #52]	; 0x34
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	461a      	mov	r2, r3
 8007dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dfc:	61fb      	str	r3, [r7, #28]
 8007dfe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e00:	69b9      	ldr	r1, [r7, #24]
 8007e02:	69fa      	ldr	r2, [r7, #28]
 8007e04:	e841 2300 	strex	r3, r2, [r1]
 8007e08:	617b      	str	r3, [r7, #20]
   return(result);
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1e6      	bne.n	8007dde <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007e10:	e018      	b.n	8007e44 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e16:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e1a:	881a      	ldrh	r2, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e24:	b292      	uxth	r2, r2
 8007e26:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e2c:	1c9a      	adds	r2, r3, #2
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007e44:	bf00      	nop
 8007e46:	3744      	adds	r7, #68	; 0x44
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b088      	sub	sp, #32
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	e853 3f00 	ldrex	r3, [r3]
 8007e64:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e6c:	61fb      	str	r3, [r7, #28]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	461a      	mov	r2, r3
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	61bb      	str	r3, [r7, #24]
 8007e78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7a:	6979      	ldr	r1, [r7, #20]
 8007e7c:	69ba      	ldr	r2, [r7, #24]
 8007e7e:	e841 2300 	strex	r3, r2, [r1]
 8007e82:	613b      	str	r3, [r7, #16]
   return(result);
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1e6      	bne.n	8007e58 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7ff fa4a 	bl	8007330 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e9c:	bf00      	nop
 8007e9e:	3720      	adds	r7, #32
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b09c      	sub	sp, #112	; 0x70
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007eb2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ebc:	2b22      	cmp	r3, #34	; 0x22
 8007ebe:	f040 80b9 	bne.w	8008034 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007ec8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007ecc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007ed0:	b2d9      	uxtb	r1, r3
 8007ed2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007edc:	400a      	ands	r2, r1
 8007ede:	b2d2      	uxtb	r2, r2
 8007ee0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee6:	1c5a      	adds	r2, r3, #1
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f040 809c 	bne.w	8008044 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f14:	e853 3f00 	ldrex	r3, [r3]
 8007f18:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f20:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	461a      	mov	r2, r3
 8007f28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f2c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f32:	e841 2300 	strex	r3, r2, [r1]
 8007f36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1e6      	bne.n	8007f0c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3308      	adds	r3, #8
 8007f44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f48:	e853 3f00 	ldrex	r3, [r3]
 8007f4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f50:	f023 0301 	bic.w	r3, r3, #1
 8007f54:	667b      	str	r3, [r7, #100]	; 0x64
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	3308      	adds	r3, #8
 8007f5c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007f5e:	647a      	str	r2, [r7, #68]	; 0x44
 8007f60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f66:	e841 2300 	strex	r3, r2, [r1]
 8007f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1e5      	bne.n	8007f3e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2220      	movs	r2, #32
 8007f76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d018      	beq.n	8007fc6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	e853 3f00 	ldrex	r3, [r3]
 8007fa0:	623b      	str	r3, [r7, #32]
   return(result);
 8007fa2:	6a3b      	ldr	r3, [r7, #32]
 8007fa4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007fa8:	663b      	str	r3, [r7, #96]	; 0x60
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fb2:	633b      	str	r3, [r7, #48]	; 0x30
 8007fb4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fba:	e841 2300 	strex	r3, r2, [r1]
 8007fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1e6      	bne.n	8007f94 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d12e      	bne.n	800802c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	e853 3f00 	ldrex	r3, [r3]
 8007fe0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f023 0310 	bic.w	r3, r3, #16
 8007fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ff2:	61fb      	str	r3, [r7, #28]
 8007ff4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff6:	69b9      	ldr	r1, [r7, #24]
 8007ff8:	69fa      	ldr	r2, [r7, #28]
 8007ffa:	e841 2300 	strex	r3, r2, [r1]
 8007ffe:	617b      	str	r3, [r7, #20]
   return(result);
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1e6      	bne.n	8007fd4 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	69db      	ldr	r3, [r3, #28]
 800800c:	f003 0310 	and.w	r3, r3, #16
 8008010:	2b10      	cmp	r3, #16
 8008012:	d103      	bne.n	800801c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2210      	movs	r2, #16
 800801a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008022:	4619      	mov	r1, r3
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f7ff f997 	bl	8007358 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800802a:	e00b      	b.n	8008044 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f7f8 fb27 	bl	8000680 <HAL_UART_RxCpltCallback>
}
 8008032:	e007      	b.n	8008044 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	699a      	ldr	r2, [r3, #24]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f042 0208 	orr.w	r2, r2, #8
 8008042:	619a      	str	r2, [r3, #24]
}
 8008044:	bf00      	nop
 8008046:	3770      	adds	r7, #112	; 0x70
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b09c      	sub	sp, #112	; 0x70
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800805a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008064:	2b22      	cmp	r3, #34	; 0x22
 8008066:	f040 80b9 	bne.w	80081dc <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008070:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008078:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800807a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800807e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008082:	4013      	ands	r3, r2
 8008084:	b29a      	uxth	r2, r3
 8008086:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008088:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800808e:	1c9a      	adds	r2, r3, #2
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800809a:	b29b      	uxth	r3, r3
 800809c:	3b01      	subs	r3, #1
 800809e:	b29a      	uxth	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f040 809c 	bne.w	80081ec <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080bc:	e853 3f00 	ldrex	r3, [r3]
 80080c0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80080c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080c8:	667b      	str	r3, [r7, #100]	; 0x64
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	461a      	mov	r2, r3
 80080d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080d2:	657b      	str	r3, [r7, #84]	; 0x54
 80080d4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80080d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80080da:	e841 2300 	strex	r3, r2, [r1]
 80080de:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80080e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1e6      	bne.n	80080b4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	3308      	adds	r3, #8
 80080ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080f0:	e853 3f00 	ldrex	r3, [r3]
 80080f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	f023 0301 	bic.w	r3, r3, #1
 80080fc:	663b      	str	r3, [r7, #96]	; 0x60
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3308      	adds	r3, #8
 8008104:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008106:	643a      	str	r2, [r7, #64]	; 0x40
 8008108:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800810c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800810e:	e841 2300 	strex	r3, r2, [r1]
 8008112:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1e5      	bne.n	80080e6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2220      	movs	r2, #32
 800811e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d018      	beq.n	800816e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008142:	6a3b      	ldr	r3, [r7, #32]
 8008144:	e853 3f00 	ldrex	r3, [r3]
 8008148:	61fb      	str	r3, [r7, #28]
   return(result);
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008150:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	461a      	mov	r2, r3
 8008158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800815a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800815c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008162:	e841 2300 	strex	r3, r2, [r1]
 8008166:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1e6      	bne.n	800813c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008172:	2b01      	cmp	r3, #1
 8008174:	d12e      	bne.n	80081d4 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	e853 3f00 	ldrex	r3, [r3]
 8008188:	60bb      	str	r3, [r7, #8]
   return(result);
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	f023 0310 	bic.w	r3, r3, #16
 8008190:	65bb      	str	r3, [r7, #88]	; 0x58
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	461a      	mov	r2, r3
 8008198:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800819a:	61bb      	str	r3, [r7, #24]
 800819c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819e:	6979      	ldr	r1, [r7, #20]
 80081a0:	69ba      	ldr	r2, [r7, #24]
 80081a2:	e841 2300 	strex	r3, r2, [r1]
 80081a6:	613b      	str	r3, [r7, #16]
   return(result);
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1e6      	bne.n	800817c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	f003 0310 	and.w	r3, r3, #16
 80081b8:	2b10      	cmp	r3, #16
 80081ba:	d103      	bne.n	80081c4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2210      	movs	r2, #16
 80081c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80081ca:	4619      	mov	r1, r3
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f7ff f8c3 	bl	8007358 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081d2:	e00b      	b.n	80081ec <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7f8 fa53 	bl	8000680 <HAL_UART_RxCpltCallback>
}
 80081da:	e007      	b.n	80081ec <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	699a      	ldr	r2, [r3, #24]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f042 0208 	orr.w	r2, r2, #8
 80081ea:	619a      	str	r2, [r3, #24]
}
 80081ec:	bf00      	nop
 80081ee:	3770      	adds	r7, #112	; 0x70
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008210:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008214:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800821c:	b29a      	uxth	r2, r3
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	b29b      	uxth	r3, r3
 8008222:	43db      	mvns	r3, r3
 8008224:	b29b      	uxth	r3, r3
 8008226:	4013      	ands	r3, r2
 8008228:	b29a      	uxth	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800823e:	b084      	sub	sp, #16
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	f107 0014 	add.w	r0, r7, #20
 800824c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	b004      	add	sp, #16
 800827e:	4770      	bx	lr

08008280 <__errno>:
 8008280:	4b01      	ldr	r3, [pc, #4]	; (8008288 <__errno+0x8>)
 8008282:	6818      	ldr	r0, [r3, #0]
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	20000098 	.word	0x20000098

0800828c <__libc_init_array>:
 800828c:	b570      	push	{r4, r5, r6, lr}
 800828e:	4d0d      	ldr	r5, [pc, #52]	; (80082c4 <__libc_init_array+0x38>)
 8008290:	4c0d      	ldr	r4, [pc, #52]	; (80082c8 <__libc_init_array+0x3c>)
 8008292:	1b64      	subs	r4, r4, r5
 8008294:	10a4      	asrs	r4, r4, #2
 8008296:	2600      	movs	r6, #0
 8008298:	42a6      	cmp	r6, r4
 800829a:	d109      	bne.n	80082b0 <__libc_init_array+0x24>
 800829c:	4d0b      	ldr	r5, [pc, #44]	; (80082cc <__libc_init_array+0x40>)
 800829e:	4c0c      	ldr	r4, [pc, #48]	; (80082d0 <__libc_init_array+0x44>)
 80082a0:	f000 f906 	bl	80084b0 <_init>
 80082a4:	1b64      	subs	r4, r4, r5
 80082a6:	10a4      	asrs	r4, r4, #2
 80082a8:	2600      	movs	r6, #0
 80082aa:	42a6      	cmp	r6, r4
 80082ac:	d105      	bne.n	80082ba <__libc_init_array+0x2e>
 80082ae:	bd70      	pop	{r4, r5, r6, pc}
 80082b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80082b4:	4798      	blx	r3
 80082b6:	3601      	adds	r6, #1
 80082b8:	e7ee      	b.n	8008298 <__libc_init_array+0xc>
 80082ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80082be:	4798      	blx	r3
 80082c0:	3601      	adds	r6, #1
 80082c2:	e7f2      	b.n	80082aa <__libc_init_array+0x1e>
 80082c4:	0800ba54 	.word	0x0800ba54
 80082c8:	0800ba54 	.word	0x0800ba54
 80082cc:	0800ba54 	.word	0x0800ba54
 80082d0:	0800ba58 	.word	0x0800ba58

080082d4 <malloc>:
 80082d4:	4b02      	ldr	r3, [pc, #8]	; (80082e0 <malloc+0xc>)
 80082d6:	4601      	mov	r1, r0
 80082d8:	6818      	ldr	r0, [r3, #0]
 80082da:	f000 b839 	b.w	8008350 <_malloc_r>
 80082de:	bf00      	nop
 80082e0:	20000098 	.word	0x20000098

080082e4 <memcpy>:
 80082e4:	440a      	add	r2, r1
 80082e6:	4291      	cmp	r1, r2
 80082e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80082ec:	d100      	bne.n	80082f0 <memcpy+0xc>
 80082ee:	4770      	bx	lr
 80082f0:	b510      	push	{r4, lr}
 80082f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082fa:	4291      	cmp	r1, r2
 80082fc:	d1f9      	bne.n	80082f2 <memcpy+0xe>
 80082fe:	bd10      	pop	{r4, pc}

08008300 <memset>:
 8008300:	4402      	add	r2, r0
 8008302:	4603      	mov	r3, r0
 8008304:	4293      	cmp	r3, r2
 8008306:	d100      	bne.n	800830a <memset+0xa>
 8008308:	4770      	bx	lr
 800830a:	f803 1b01 	strb.w	r1, [r3], #1
 800830e:	e7f9      	b.n	8008304 <memset+0x4>

08008310 <sbrk_aligned>:
 8008310:	b570      	push	{r4, r5, r6, lr}
 8008312:	4e0e      	ldr	r6, [pc, #56]	; (800834c <sbrk_aligned+0x3c>)
 8008314:	460c      	mov	r4, r1
 8008316:	6831      	ldr	r1, [r6, #0]
 8008318:	4605      	mov	r5, r0
 800831a:	b911      	cbnz	r1, 8008322 <sbrk_aligned+0x12>
 800831c:	f000 f88c 	bl	8008438 <_sbrk_r>
 8008320:	6030      	str	r0, [r6, #0]
 8008322:	4621      	mov	r1, r4
 8008324:	4628      	mov	r0, r5
 8008326:	f000 f887 	bl	8008438 <_sbrk_r>
 800832a:	1c43      	adds	r3, r0, #1
 800832c:	d00a      	beq.n	8008344 <sbrk_aligned+0x34>
 800832e:	1cc4      	adds	r4, r0, #3
 8008330:	f024 0403 	bic.w	r4, r4, #3
 8008334:	42a0      	cmp	r0, r4
 8008336:	d007      	beq.n	8008348 <sbrk_aligned+0x38>
 8008338:	1a21      	subs	r1, r4, r0
 800833a:	4628      	mov	r0, r5
 800833c:	f000 f87c 	bl	8008438 <_sbrk_r>
 8008340:	3001      	adds	r0, #1
 8008342:	d101      	bne.n	8008348 <sbrk_aligned+0x38>
 8008344:	f04f 34ff 	mov.w	r4, #4294967295
 8008348:	4620      	mov	r0, r4
 800834a:	bd70      	pop	{r4, r5, r6, pc}
 800834c:	20000814 	.word	0x20000814

08008350 <_malloc_r>:
 8008350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008354:	1ccd      	adds	r5, r1, #3
 8008356:	f025 0503 	bic.w	r5, r5, #3
 800835a:	3508      	adds	r5, #8
 800835c:	2d0c      	cmp	r5, #12
 800835e:	bf38      	it	cc
 8008360:	250c      	movcc	r5, #12
 8008362:	2d00      	cmp	r5, #0
 8008364:	4607      	mov	r7, r0
 8008366:	db01      	blt.n	800836c <_malloc_r+0x1c>
 8008368:	42a9      	cmp	r1, r5
 800836a:	d905      	bls.n	8008378 <_malloc_r+0x28>
 800836c:	230c      	movs	r3, #12
 800836e:	603b      	str	r3, [r7, #0]
 8008370:	2600      	movs	r6, #0
 8008372:	4630      	mov	r0, r6
 8008374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008378:	4e2e      	ldr	r6, [pc, #184]	; (8008434 <_malloc_r+0xe4>)
 800837a:	f000 f88b 	bl	8008494 <__malloc_lock>
 800837e:	6833      	ldr	r3, [r6, #0]
 8008380:	461c      	mov	r4, r3
 8008382:	bb34      	cbnz	r4, 80083d2 <_malloc_r+0x82>
 8008384:	4629      	mov	r1, r5
 8008386:	4638      	mov	r0, r7
 8008388:	f7ff ffc2 	bl	8008310 <sbrk_aligned>
 800838c:	1c43      	adds	r3, r0, #1
 800838e:	4604      	mov	r4, r0
 8008390:	d14d      	bne.n	800842e <_malloc_r+0xde>
 8008392:	6834      	ldr	r4, [r6, #0]
 8008394:	4626      	mov	r6, r4
 8008396:	2e00      	cmp	r6, #0
 8008398:	d140      	bne.n	800841c <_malloc_r+0xcc>
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	4631      	mov	r1, r6
 800839e:	4638      	mov	r0, r7
 80083a0:	eb04 0803 	add.w	r8, r4, r3
 80083a4:	f000 f848 	bl	8008438 <_sbrk_r>
 80083a8:	4580      	cmp	r8, r0
 80083aa:	d13a      	bne.n	8008422 <_malloc_r+0xd2>
 80083ac:	6821      	ldr	r1, [r4, #0]
 80083ae:	3503      	adds	r5, #3
 80083b0:	1a6d      	subs	r5, r5, r1
 80083b2:	f025 0503 	bic.w	r5, r5, #3
 80083b6:	3508      	adds	r5, #8
 80083b8:	2d0c      	cmp	r5, #12
 80083ba:	bf38      	it	cc
 80083bc:	250c      	movcc	r5, #12
 80083be:	4629      	mov	r1, r5
 80083c0:	4638      	mov	r0, r7
 80083c2:	f7ff ffa5 	bl	8008310 <sbrk_aligned>
 80083c6:	3001      	adds	r0, #1
 80083c8:	d02b      	beq.n	8008422 <_malloc_r+0xd2>
 80083ca:	6823      	ldr	r3, [r4, #0]
 80083cc:	442b      	add	r3, r5
 80083ce:	6023      	str	r3, [r4, #0]
 80083d0:	e00e      	b.n	80083f0 <_malloc_r+0xa0>
 80083d2:	6822      	ldr	r2, [r4, #0]
 80083d4:	1b52      	subs	r2, r2, r5
 80083d6:	d41e      	bmi.n	8008416 <_malloc_r+0xc6>
 80083d8:	2a0b      	cmp	r2, #11
 80083da:	d916      	bls.n	800840a <_malloc_r+0xba>
 80083dc:	1961      	adds	r1, r4, r5
 80083de:	42a3      	cmp	r3, r4
 80083e0:	6025      	str	r5, [r4, #0]
 80083e2:	bf18      	it	ne
 80083e4:	6059      	strne	r1, [r3, #4]
 80083e6:	6863      	ldr	r3, [r4, #4]
 80083e8:	bf08      	it	eq
 80083ea:	6031      	streq	r1, [r6, #0]
 80083ec:	5162      	str	r2, [r4, r5]
 80083ee:	604b      	str	r3, [r1, #4]
 80083f0:	4638      	mov	r0, r7
 80083f2:	f104 060b 	add.w	r6, r4, #11
 80083f6:	f000 f853 	bl	80084a0 <__malloc_unlock>
 80083fa:	f026 0607 	bic.w	r6, r6, #7
 80083fe:	1d23      	adds	r3, r4, #4
 8008400:	1af2      	subs	r2, r6, r3
 8008402:	d0b6      	beq.n	8008372 <_malloc_r+0x22>
 8008404:	1b9b      	subs	r3, r3, r6
 8008406:	50a3      	str	r3, [r4, r2]
 8008408:	e7b3      	b.n	8008372 <_malloc_r+0x22>
 800840a:	6862      	ldr	r2, [r4, #4]
 800840c:	42a3      	cmp	r3, r4
 800840e:	bf0c      	ite	eq
 8008410:	6032      	streq	r2, [r6, #0]
 8008412:	605a      	strne	r2, [r3, #4]
 8008414:	e7ec      	b.n	80083f0 <_malloc_r+0xa0>
 8008416:	4623      	mov	r3, r4
 8008418:	6864      	ldr	r4, [r4, #4]
 800841a:	e7b2      	b.n	8008382 <_malloc_r+0x32>
 800841c:	4634      	mov	r4, r6
 800841e:	6876      	ldr	r6, [r6, #4]
 8008420:	e7b9      	b.n	8008396 <_malloc_r+0x46>
 8008422:	230c      	movs	r3, #12
 8008424:	603b      	str	r3, [r7, #0]
 8008426:	4638      	mov	r0, r7
 8008428:	f000 f83a 	bl	80084a0 <__malloc_unlock>
 800842c:	e7a1      	b.n	8008372 <_malloc_r+0x22>
 800842e:	6025      	str	r5, [r4, #0]
 8008430:	e7de      	b.n	80083f0 <_malloc_r+0xa0>
 8008432:	bf00      	nop
 8008434:	20000810 	.word	0x20000810

08008438 <_sbrk_r>:
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	4d06      	ldr	r5, [pc, #24]	; (8008454 <_sbrk_r+0x1c>)
 800843c:	2300      	movs	r3, #0
 800843e:	4604      	mov	r4, r0
 8008440:	4608      	mov	r0, r1
 8008442:	602b      	str	r3, [r5, #0]
 8008444:	f7f9 fbc8 	bl	8001bd8 <_sbrk>
 8008448:	1c43      	adds	r3, r0, #1
 800844a:	d102      	bne.n	8008452 <_sbrk_r+0x1a>
 800844c:	682b      	ldr	r3, [r5, #0]
 800844e:	b103      	cbz	r3, 8008452 <_sbrk_r+0x1a>
 8008450:	6023      	str	r3, [r4, #0]
 8008452:	bd38      	pop	{r3, r4, r5, pc}
 8008454:	20000818 	.word	0x20000818

08008458 <strdup>:
 8008458:	4b02      	ldr	r3, [pc, #8]	; (8008464 <strdup+0xc>)
 800845a:	4601      	mov	r1, r0
 800845c:	6818      	ldr	r0, [r3, #0]
 800845e:	f000 b803 	b.w	8008468 <_strdup_r>
 8008462:	bf00      	nop
 8008464:	20000098 	.word	0x20000098

08008468 <_strdup_r>:
 8008468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800846a:	4604      	mov	r4, r0
 800846c:	4608      	mov	r0, r1
 800846e:	460d      	mov	r5, r1
 8008470:	f7f7 feb4 	bl	80001dc <strlen>
 8008474:	1c42      	adds	r2, r0, #1
 8008476:	4611      	mov	r1, r2
 8008478:	4620      	mov	r0, r4
 800847a:	9201      	str	r2, [sp, #4]
 800847c:	f7ff ff68 	bl	8008350 <_malloc_r>
 8008480:	4604      	mov	r4, r0
 8008482:	b118      	cbz	r0, 800848c <_strdup_r+0x24>
 8008484:	9a01      	ldr	r2, [sp, #4]
 8008486:	4629      	mov	r1, r5
 8008488:	f7ff ff2c 	bl	80082e4 <memcpy>
 800848c:	4620      	mov	r0, r4
 800848e:	b003      	add	sp, #12
 8008490:	bd30      	pop	{r4, r5, pc}
	...

08008494 <__malloc_lock>:
 8008494:	4801      	ldr	r0, [pc, #4]	; (800849c <__malloc_lock+0x8>)
 8008496:	f000 b809 	b.w	80084ac <__retarget_lock_acquire_recursive>
 800849a:	bf00      	nop
 800849c:	2000081c 	.word	0x2000081c

080084a0 <__malloc_unlock>:
 80084a0:	4801      	ldr	r0, [pc, #4]	; (80084a8 <__malloc_unlock+0x8>)
 80084a2:	f000 b804 	b.w	80084ae <__retarget_lock_release_recursive>
 80084a6:	bf00      	nop
 80084a8:	2000081c 	.word	0x2000081c

080084ac <__retarget_lock_acquire_recursive>:
 80084ac:	4770      	bx	lr

080084ae <__retarget_lock_release_recursive>:
 80084ae:	4770      	bx	lr

080084b0 <_init>:
 80084b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b2:	bf00      	nop
 80084b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084b6:	bc08      	pop	{r3}
 80084b8:	469e      	mov	lr, r3
 80084ba:	4770      	bx	lr

080084bc <_fini>:
 80084bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084be:	bf00      	nop
 80084c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084c2:	bc08      	pop	{r3}
 80084c4:	469e      	mov	lr, r3
 80084c6:	4770      	bx	lr
