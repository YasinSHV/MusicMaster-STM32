
MusicMaster_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083e8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e98  08008570  08008570  00018570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b408  0800b408  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  0800b408  0800b408  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b408  0800b408  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b408  0800b408  0001b408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b40c  0800b40c  0001b40c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800b410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          0000065c  20000100  20000100  00020100  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000075c  2000075c  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c9e6  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033e0  00000000  00000000  0003cb16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001730  00000000  00000000  0003fef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001650  00000000  00000000  00041628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020db2  00000000  00000000  00042c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d71a  00000000  00000000  00063a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7636  00000000  00000000  00081144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014877a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000663c  00000000  00000000  001487cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000100 	.word	0x20000100
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008558 	.word	0x08008558

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000104 	.word	0x20000104
 80001c4:	08008558 	.word	0x08008558

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <hashString>:
    struct DictionaryNode **buckets;
    int size;
};

// Hash function for string keys
unsigned int hashString(const char *key, int size) {
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	6039      	str	r1, [r7, #0]
    unsigned int hash = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	60fb      	str	r3, [r7, #12]
    while (*key) {
 80001fa:	e007      	b.n	800020c <hashString+0x20>
        hash = (hash << 5) + *key++;
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	015a      	lsls	r2, r3, #5
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	1c59      	adds	r1, r3, #1
 8000204:	6079      	str	r1, [r7, #4]
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	4413      	add	r3, r2
 800020a:	60fb      	str	r3, [r7, #12]
    while (*key) {
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d1f3      	bne.n	80001fc <hashString+0x10>
    }
    return hash % size;
 8000214:	683a      	ldr	r2, [r7, #0]
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	fbb3 f1f2 	udiv	r1, r3, r2
 800021c:	fb01 f202 	mul.w	r2, r1, r2
 8000220:	1a9b      	subs	r3, r3, r2
}
 8000222:	4618      	mov	r0, r3
 8000224:	3714      	adds	r7, #20
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr

0800022e <hashNumeric>:

// Hash function for numeric keys
unsigned int hashNumeric(int key, int size) {
 800022e:	b480      	push	{r7}
 8000230:	b083      	sub	sp, #12
 8000232:	af00      	add	r7, sp, #0
 8000234:	6078      	str	r0, [r7, #4]
 8000236:	6039      	str	r1, [r7, #0]
    return key % size;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	683a      	ldr	r2, [r7, #0]
 800023c:	fb93 f2f2 	sdiv	r2, r3, r2
 8000240:	6839      	ldr	r1, [r7, #0]
 8000242:	fb01 f202 	mul.w	r2, r1, r2
 8000246:	1a9b      	subs	r3, r3, r2
}
 8000248:	4618      	mov	r0, r3
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr

08000254 <initDictionary>:

// Initialize dictionary
Dictionary *initDictionary(int size) {
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
    Dictionary *dict = malloc(sizeof(Dictionary));
 800025c:	2008      	movs	r0, #8
 800025e:	f008 f88d 	bl	800837c <malloc>
 8000262:	4603      	mov	r3, r0
 8000264:	60bb      	str	r3, [r7, #8]
    dict->buckets = malloc(size * sizeof(struct DictionaryNode *));
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	009b      	lsls	r3, r3, #2
 800026a:	4618      	mov	r0, r3
 800026c:	f008 f886 	bl	800837c <malloc>
 8000270:	4603      	mov	r3, r0
 8000272:	461a      	mov	r2, r3
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	601a      	str	r2, [r3, #0]
    dict->size = size;
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < size; i++) {
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
 8000282:	e009      	b.n	8000298 <initDictionary+0x44>
        dict->buckets[i] = NULL;
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	681a      	ldr	r2, [r3, #0]
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	009b      	lsls	r3, r3, #2
 800028c:	4413      	add	r3, r2
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	3301      	adds	r3, #1
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	68fa      	ldr	r2, [r7, #12]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	429a      	cmp	r2, r3
 800029e:	dbf1      	blt.n	8000284 <initDictionary+0x30>
    }
    return dict;
 80002a0:	68bb      	ldr	r3, [r7, #8]
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	3710      	adds	r7, #16
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}

080002aa <insert>:

// Insert key-value pair into dictionary
void insert(Dictionary *dict, const char *stringKey, int numericKey, struct Tone *tones, int numTones) {
 80002aa:	b580      	push	{r7, lr}
 80002ac:	b086      	sub	sp, #24
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	60f8      	str	r0, [r7, #12]
 80002b2:	60b9      	str	r1, [r7, #8]
 80002b4:	607a      	str	r2, [r7, #4]
 80002b6:	603b      	str	r3, [r7, #0]
    unsigned int index;
    struct DictionaryNode *newNode = malloc(sizeof(struct DictionaryNode));
 80002b8:	2014      	movs	r0, #20
 80002ba:	f008 f85f 	bl	800837c <malloc>
 80002be:	4603      	mov	r3, r0
 80002c0:	613b      	str	r3, [r7, #16]
    newNode->stringKey = strdup(stringKey);
 80002c2:	68b8      	ldr	r0, [r7, #8]
 80002c4:	f008 f91c 	bl	8008500 <strdup>
 80002c8:	4603      	mov	r3, r0
 80002ca:	461a      	mov	r2, r3
 80002cc:	693b      	ldr	r3, [r7, #16]
 80002ce:	601a      	str	r2, [r3, #0]
    newNode->numericKey = numericKey;
 80002d0:	693b      	ldr	r3, [r7, #16]
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	605a      	str	r2, [r3, #4]
    newNode->tones = malloc(numTones * sizeof(struct Tone));
 80002d6:	6a3b      	ldr	r3, [r7, #32]
 80002d8:	00db      	lsls	r3, r3, #3
 80002da:	4618      	mov	r0, r3
 80002dc:	f008 f84e 	bl	800837c <malloc>
 80002e0:	4603      	mov	r3, r0
 80002e2:	461a      	mov	r2, r3
 80002e4:	693b      	ldr	r3, [r7, #16]
 80002e6:	609a      	str	r2, [r3, #8]
    memcpy(newNode->tones, tones, numTones * sizeof(struct Tone));
 80002e8:	693b      	ldr	r3, [r7, #16]
 80002ea:	6898      	ldr	r0, [r3, #8]
 80002ec:	6a3b      	ldr	r3, [r7, #32]
 80002ee:	00db      	lsls	r3, r3, #3
 80002f0:	461a      	mov	r2, r3
 80002f2:	6839      	ldr	r1, [r7, #0]
 80002f4:	f008 f84a 	bl	800838c <memcpy>
    newNode->numTones = numTones;
 80002f8:	693b      	ldr	r3, [r7, #16]
 80002fa:	6a3a      	ldr	r2, [r7, #32]
 80002fc:	60da      	str	r2, [r3, #12]

    if (stringKey != NULL) {
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d007      	beq.n	8000314 <insert+0x6a>
        index = hashString(stringKey, dict->size);
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	4619      	mov	r1, r3
 800030a:	68b8      	ldr	r0, [r7, #8]
 800030c:	f7ff ff6e 	bl	80001ec <hashString>
 8000310:	6178      	str	r0, [r7, #20]
 8000312:	e006      	b.n	8000322 <insert+0x78>
    } else {
        index = hashNumeric(numericKey, dict->size);
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	4619      	mov	r1, r3
 800031a:	6878      	ldr	r0, [r7, #4]
 800031c:	f7ff ff87 	bl	800022e <hashNumeric>
 8000320:	6178      	str	r0, [r7, #20]
    }

    newNode->next = dict->buckets[index];
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	697b      	ldr	r3, [r7, #20]
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	4413      	add	r3, r2
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	693b      	ldr	r3, [r7, #16]
 8000330:	611a      	str	r2, [r3, #16]
    dict->buckets[index] = newNode;
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	009b      	lsls	r3, r3, #2
 800033a:	4413      	add	r3, r2
 800033c:	693a      	ldr	r2, [r7, #16]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	bf00      	nop
 8000342:	3718      	adds	r7, #24
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <lookup>:

// Lookup value by key
struct Tone *lookup(Dictionary *dict, const char *stringKey, int numericKey, int *numTones) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af00      	add	r7, sp, #0
 800034e:	60f8      	str	r0, [r7, #12]
 8000350:	60b9      	str	r1, [r7, #8]
 8000352:	607a      	str	r2, [r7, #4]
 8000354:	603b      	str	r3, [r7, #0]
    unsigned int index;
    struct DictionaryNode *current;

    if (stringKey != NULL) {
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d029      	beq.n	80003b0 <lookup+0x68>
        index = hashString(stringKey, dict->size);
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	4619      	mov	r1, r3
 8000362:	68b8      	ldr	r0, [r7, #8]
 8000364:	f7ff ff42 	bl	80001ec <hashString>
 8000368:	6138      	str	r0, [r7, #16]
        current = dict->buckets[index];
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	4413      	add	r3, r2
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	617b      	str	r3, [r7, #20]
        while (current) {
 8000378:	e016      	b.n	80003a8 <lookup+0x60>
            if (current->stringKey && strcmp(current->stringKey, stringKey) == 0) {
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d00f      	beq.n	80003a2 <lookup+0x5a>
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	68b9      	ldr	r1, [r7, #8]
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff ff1d 	bl	80001c8 <strcmp>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d106      	bne.n	80003a2 <lookup+0x5a>
                *numTones = current->numTones;
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	68da      	ldr	r2, [r3, #12]
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	601a      	str	r2, [r3, #0]
                return current->tones;
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	689b      	ldr	r3, [r3, #8]
 80003a0:	e02b      	b.n	80003fa <lookup+0xb2>
            }
            current = current->next;
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	691b      	ldr	r3, [r3, #16]
 80003a6:	617b      	str	r3, [r7, #20]
        while (current) {
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d1e5      	bne.n	800037a <lookup+0x32>
 80003ae:	e020      	b.n	80003f2 <lookup+0xaa>
        }
    } else {
        index = hashNumeric(numericKey, dict->size);
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	685b      	ldr	r3, [r3, #4]
 80003b4:	4619      	mov	r1, r3
 80003b6:	6878      	ldr	r0, [r7, #4]
 80003b8:	f7ff ff39 	bl	800022e <hashNumeric>
 80003bc:	6138      	str	r0, [r7, #16]
        current = dict->buckets[index];
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	693b      	ldr	r3, [r7, #16]
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	4413      	add	r3, r2
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	617b      	str	r3, [r7, #20]
        while (current) {
 80003cc:	e00e      	b.n	80003ec <lookup+0xa4>
            if (current->numericKey == numericKey) {
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	687a      	ldr	r2, [r7, #4]
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d106      	bne.n	80003e6 <lookup+0x9e>
                *numTones = current->numTones;
 80003d8:	697b      	ldr	r3, [r7, #20]
 80003da:	68da      	ldr	r2, [r3, #12]
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	601a      	str	r2, [r3, #0]
                return current->tones;
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	e009      	b.n	80003fa <lookup+0xb2>
            }
            current = current->next;
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	691b      	ldr	r3, [r3, #16]
 80003ea:	617b      	str	r3, [r7, #20]
        while (current) {
 80003ec:	697b      	ldr	r3, [r7, #20]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d1ed      	bne.n	80003ce <lookup+0x86>
        }
    }

    *numTones = 0;
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
    return NULL;
 80003f8:	2300      	movs	r3, #0
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	3718      	adds	r7, #24
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
	...

08000404 <extractNumber>:
////}
//PWM END

//UART BEGIN

void extractNumber(const uint8_t *data) {
 8000404:	b5b0      	push	{r4, r5, r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
	isCorrect = -1;
 800040c:	4b3a      	ldr	r3, [pc, #232]	; (80004f8 <extractNumber+0xf4>)
 800040e:	f04f 32ff 	mov.w	r2, #4294967295
 8000412:	601a      	str	r2, [r3, #0]
	// Extract the first four characters and convert them to integers
	char pass[19] = "PASS_CHANGED(XXXX)\n";
 8000414:	4b39      	ldr	r3, [pc, #228]	; (80004fc <extractNumber+0xf8>)
 8000416:	f107 0408 	add.w	r4, r7, #8
 800041a:	461d      	mov	r5, r3
 800041c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800041e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000420:	682b      	ldr	r3, [r5, #0]
 8000422:	461a      	mov	r2, r3
 8000424:	8022      	strh	r2, [r4, #0]
 8000426:	3402      	adds	r4, #2
 8000428:	0c1b      	lsrs	r3, r3, #16
 800042a:	7023      	strb	r3, [r4, #0]
	pass[13] = data[9];
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	3309      	adds	r3, #9
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	757b      	strb	r3, [r7, #21]
	pass[14] = data[10];
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	330a      	adds	r3, #10
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	75bb      	strb	r3, [r7, #22]
	pass[15] = data[11];
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	330b      	adds	r3, #11
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	75fb      	strb	r3, [r7, #23]
	pass[16] = data[12];
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	330c      	adds	r3, #12
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	763b      	strb	r3, [r7, #24]

	for (int i = 9; i < 13; i++) {
 800044c:	2309      	movs	r3, #9
 800044e:	61fb      	str	r3, [r7, #28]
 8000450:	e034      	b.n	80004bc <extractNumber+0xb8>
		if (data[i] <= '9' && data[i] >= '0') {
 8000452:	69fb      	ldr	r3, [r7, #28]
 8000454:	687a      	ldr	r2, [r7, #4]
 8000456:	4413      	add	r3, r2
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b39      	cmp	r3, #57	; 0x39
 800045c:	d814      	bhi.n	8000488 <extractNumber+0x84>
 800045e:	69fb      	ldr	r3, [r7, #28]
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	4413      	add	r3, r2
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b2f      	cmp	r3, #47	; 0x2f
 8000468:	d90e      	bls.n	8000488 <extractNumber+0x84>
			password[i - 9] = data[i] - '0';
 800046a:	69fb      	ldr	r3, [r7, #28]
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	4413      	add	r3, r2
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	461a      	mov	r2, r3
 8000474:	69fb      	ldr	r3, [r7, #28]
 8000476:	3b09      	subs	r3, #9
 8000478:	3a30      	subs	r2, #48	; 0x30
 800047a:	4921      	ldr	r1, [pc, #132]	; (8000500 <extractNumber+0xfc>)
 800047c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 9; i < 13; i++) {
 8000480:	69fb      	ldr	r3, [r7, #28]
 8000482:	3301      	adds	r3, #1
 8000484:	61fb      	str	r3, [r7, #28]
 8000486:	e019      	b.n	80004bc <extractNumber+0xb8>
		} else {
			if (logStatus) {
 8000488:	4b1e      	ldr	r3, [pc, #120]	; (8000504 <extractNumber+0x100>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d004      	beq.n	800049a <extractNumber+0x96>
				HAL_UART_Transmit_IT(&huart1, "ERROR(INCORRECT FORMAT)\n", 24);
 8000490:	2218      	movs	r2, #24
 8000492:	491d      	ldr	r1, [pc, #116]	; (8000508 <extractNumber+0x104>)
 8000494:	481d      	ldr	r0, [pc, #116]	; (800050c <extractNumber+0x108>)
 8000496:	f006 fc17 	bl	8006cc8 <HAL_UART_Transmit_IT>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 800049a:	2200      	movs	r2, #0
 800049c:	2101      	movs	r1, #1
 800049e:	481c      	ldr	r0, [pc, #112]	; (8000510 <extractNumber+0x10c>)
 80004a0:	f003 fac0 	bl	8003a24 <HAL_GPIO_WritePin>
			buzzerEnterTime = HAL_GetTick();
 80004a4:	f001 fcb8 	bl	8001e18 <HAL_GetTick>
 80004a8:	4603      	mov	r3, r0
 80004aa:	4a1a      	ldr	r2, [pc, #104]	; (8000514 <extractNumber+0x110>)
 80004ac:	6013      	str	r3, [r2, #0]
			if (alertStatus)
 80004ae:	4b1a      	ldr	r3, [pc, #104]	; (8000518 <extractNumber+0x114>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d01c      	beq.n	80004f0 <extractNumber+0xec>
				PWM_Start();
 80004b6:	f001 fa3f 	bl	8001938 <PWM_Start>
 80004ba:	e01a      	b.n	80004f2 <extractNumber+0xee>
	for (int i = 9; i < 13; i++) {
 80004bc:	69fb      	ldr	r3, [r7, #28]
 80004be:	2b0c      	cmp	r3, #12
 80004c0:	ddc7      	ble.n	8000452 <extractNumber+0x4e>
			return;
		}
	}
	if (logStatus) {
 80004c2:	4b10      	ldr	r3, [pc, #64]	; (8000504 <extractNumber+0x100>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d013      	beq.n	80004f2 <extractNumber+0xee>
		HAL_UART_Transmit_IT(&huart1, pass, 19);
 80004ca:	f107 0308 	add.w	r3, r7, #8
 80004ce:	2213      	movs	r2, #19
 80004d0:	4619      	mov	r1, r3
 80004d2:	480e      	ldr	r0, [pc, #56]	; (800050c <extractNumber+0x108>)
 80004d4:	f006 fbf8 	bl	8006cc8 <HAL_UART_Transmit_IT>
		buzzerEnterTime = HAL_GetTick();
 80004d8:	f001 fc9e 	bl	8001e18 <HAL_GetTick>
 80004dc:	4603      	mov	r3, r0
 80004de:	4a0d      	ldr	r2, [pc, #52]	; (8000514 <extractNumber+0x110>)
 80004e0:	6013      	str	r3, [r2, #0]
		if (alertStatus)
 80004e2:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <extractNumber+0x114>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d003      	beq.n	80004f2 <extractNumber+0xee>
			PWM_Start();
 80004ea:	f001 fa25 	bl	8001938 <PWM_Start>
 80004ee:	e000      	b.n	80004f2 <extractNumber+0xee>
			return;
 80004f0:	bf00      	nop
	}
}
 80004f2:	3720      	adds	r7, #32
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bdb0      	pop	{r4, r5, r7, pc}
 80004f8:	20000040 	.word	0x20000040
 80004fc:	0800858c 	.word	0x0800858c
 8000500:	20000000 	.word	0x20000000
 8000504:	20000038 	.word	0x20000038
 8000508:	08008570 	.word	0x08008570
 800050c:	200002bc 	.word	0x200002bc
 8000510:	48000800 	.word	0x48000800
 8000514:	20000670 	.word	0x20000670
 8000518:	2000003c 	.word	0x2000003c

0800051c <compareStrings>:

int compareStrings(const char *str1, const uint8_t *str2, int n) {
 800051c:	b480      	push	{r7}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < n; i++) {
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]
 800052c:	e00e      	b.n	800054c <compareStrings+0x30>
		if (str1[i] != str2[i]) {
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	4413      	add	r3, r2
 8000534:	781a      	ldrb	r2, [r3, #0]
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	68b9      	ldr	r1, [r7, #8]
 800053a:	440b      	add	r3, r1
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	429a      	cmp	r2, r3
 8000540:	d001      	beq.n	8000546 <compareStrings+0x2a>
			return 0;
 8000542:	2300      	movs	r3, #0
 8000544:	e007      	b.n	8000556 <compareStrings+0x3a>
	for (int i = 0; i < n; i++) {
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	3301      	adds	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	697a      	ldr	r2, [r7, #20]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	429a      	cmp	r2, r3
 8000552:	dbec      	blt.n	800052e <compareStrings+0x12>
		}
	}
	return 1;
 8000554:	2301      	movs	r3, #1
}
 8000556:	4618      	mov	r0, r3
 8000558:	371c      	adds	r7, #28
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
	...

08000564 <HAL_UART_RxCpltCallback>:

uint8_t data[100];
uint8_t d;
uint8_t i;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000564:	b5b0      	push	{r4, r5, r7, lr}
 8000566:	b08a      	sub	sp, #40	; 0x28
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a6f      	ldr	r2, [pc, #444]	; (8000730 <HAL_UART_RxCpltCallback+0x1cc>)
 8000572:	4293      	cmp	r3, r2
 8000574:	f040 80d7 	bne.w	8000726 <HAL_UART_RxCpltCallback+0x1c2>
		HAL_UART_Receive_IT(&huart1, &d, 1);
 8000578:	2201      	movs	r2, #1
 800057a:	496e      	ldr	r1, [pc, #440]	; (8000734 <HAL_UART_RxCpltCallback+0x1d0>)
 800057c:	486e      	ldr	r0, [pc, #440]	; (8000738 <HAL_UART_RxCpltCallback+0x1d4>)
 800057e:	f006 fc01 	bl	8006d84 <HAL_UART_Receive_IT>
		data[i++] = d;
 8000582:	4b6e      	ldr	r3, [pc, #440]	; (800073c <HAL_UART_RxCpltCallback+0x1d8>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	1c5a      	adds	r2, r3, #1
 8000588:	b2d1      	uxtb	r1, r2
 800058a:	4a6c      	ldr	r2, [pc, #432]	; (800073c <HAL_UART_RxCpltCallback+0x1d8>)
 800058c:	7011      	strb	r1, [r2, #0]
 800058e:	461a      	mov	r2, r3
 8000590:	4b68      	ldr	r3, [pc, #416]	; (8000734 <HAL_UART_RxCpltCallback+0x1d0>)
 8000592:	7819      	ldrb	r1, [r3, #0]
 8000594:	4b6a      	ldr	r3, [pc, #424]	; (8000740 <HAL_UART_RxCpltCallback+0x1dc>)
 8000596:	5499      	strb	r1, [r3, r2]
		if (d == '\n') {
 8000598:	4b66      	ldr	r3, [pc, #408]	; (8000734 <HAL_UART_RxCpltCallback+0x1d0>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b0a      	cmp	r3, #10
 800059e:	f040 80c2 	bne.w	8000726 <HAL_UART_RxCpltCallback+0x1c2>
			if ((i == 15 && compareStrings(setPass, data, 9) == 1)
 80005a2:	4b66      	ldr	r3, [pc, #408]	; (800073c <HAL_UART_RxCpltCallback+0x1d8>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b0f      	cmp	r3, #15
 80005a8:	d11a      	bne.n	80005e0 <HAL_UART_RxCpltCallback+0x7c>
 80005aa:	2209      	movs	r2, #9
 80005ac:	4964      	ldr	r1, [pc, #400]	; (8000740 <HAL_UART_RxCpltCallback+0x1dc>)
 80005ae:	4865      	ldr	r0, [pc, #404]	; (8000744 <HAL_UART_RxCpltCallback+0x1e0>)
 80005b0:	f7ff ffb4 	bl	800051c <compareStrings>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d112      	bne.n	80005e0 <HAL_UART_RxCpltCallback+0x7c>
					&& isCorrect == -1) {
 80005ba:	4b63      	ldr	r3, [pc, #396]	; (8000748 <HAL_UART_RxCpltCallback+0x1e4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c2:	d10d      	bne.n	80005e0 <HAL_UART_RxCpltCallback+0x7c>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 80005c4:	2201      	movs	r2, #1
 80005c6:	2101      	movs	r1, #1
 80005c8:	4860      	ldr	r0, [pc, #384]	; (800074c <HAL_UART_RxCpltCallback+0x1e8>)
 80005ca:	f003 fa2b 	bl	8003a24 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2104      	movs	r1, #4
 80005d2:	485e      	ldr	r0, [pc, #376]	; (800074c <HAL_UART_RxCpltCallback+0x1e8>)
 80005d4:	f003 fa26 	bl	8003a24 <HAL_GPIO_WritePin>
				extractNumber(data);
 80005d8:	4859      	ldr	r0, [pc, #356]	; (8000740 <HAL_UART_RxCpltCallback+0x1dc>)
 80005da:	f7ff ff13 	bl	8000404 <extractNumber>
 80005de:	e09f      	b.n	8000720 <HAL_UART_RxCpltCallback+0x1bc>
			} else if (i == 7) {
 80005e0:	4b56      	ldr	r3, [pc, #344]	; (800073c <HAL_UART_RxCpltCallback+0x1d8>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b07      	cmp	r3, #7
 80005e6:	d111      	bne.n	800060c <HAL_UART_RxCpltCallback+0xa8>
				if (compareStrings(logON, data, 6) == 1) {
 80005e8:	2206      	movs	r2, #6
 80005ea:	4955      	ldr	r1, [pc, #340]	; (8000740 <HAL_UART_RxCpltCallback+0x1dc>)
 80005ec:	4858      	ldr	r0, [pc, #352]	; (8000750 <HAL_UART_RxCpltCallback+0x1ec>)
 80005ee:	f7ff ff95 	bl	800051c <compareStrings>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	f040 8093 	bne.w	8000720 <HAL_UART_RxCpltCallback+0x1bc>
					logStatus = 1;
 80005fa:	4b56      	ldr	r3, [pc, #344]	; (8000754 <HAL_UART_RxCpltCallback+0x1f0>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Log Turned ON\n",
 8000600:	2216      	movs	r2, #22
 8000602:	4955      	ldr	r1, [pc, #340]	; (8000758 <HAL_UART_RxCpltCallback+0x1f4>)
 8000604:	484c      	ldr	r0, [pc, #304]	; (8000738 <HAL_UART_RxCpltCallback+0x1d4>)
 8000606:	f006 fb5f 	bl	8006cc8 <HAL_UART_Transmit_IT>
 800060a:	e089      	b.n	8000720 <HAL_UART_RxCpltCallback+0x1bc>
							22);
				}
			} else if (i == 8) {
 800060c:	4b4b      	ldr	r3, [pc, #300]	; (800073c <HAL_UART_RxCpltCallback+0x1d8>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b08      	cmp	r3, #8
 8000612:	d110      	bne.n	8000636 <HAL_UART_RxCpltCallback+0xd2>
				if (compareStrings(logOFF, data, 7) == 1) {
 8000614:	2207      	movs	r2, #7
 8000616:	494a      	ldr	r1, [pc, #296]	; (8000740 <HAL_UART_RxCpltCallback+0x1dc>)
 8000618:	4850      	ldr	r0, [pc, #320]	; (800075c <HAL_UART_RxCpltCallback+0x1f8>)
 800061a:	f7ff ff7f 	bl	800051c <compareStrings>
 800061e:	4603      	mov	r3, r0
 8000620:	2b01      	cmp	r3, #1
 8000622:	d17d      	bne.n	8000720 <HAL_UART_RxCpltCallback+0x1bc>
					logStatus = 0;
 8000624:	4b4b      	ldr	r3, [pc, #300]	; (8000754 <HAL_UART_RxCpltCallback+0x1f0>)
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Log Turned OFF\n",
 800062a:	2217      	movs	r2, #23
 800062c:	494c      	ldr	r1, [pc, #304]	; (8000760 <HAL_UART_RxCpltCallback+0x1fc>)
 800062e:	4842      	ldr	r0, [pc, #264]	; (8000738 <HAL_UART_RxCpltCallback+0x1d4>)
 8000630:	f006 fb4a 	bl	8006cc8 <HAL_UART_Transmit_IT>
 8000634:	e074      	b.n	8000720 <HAL_UART_RxCpltCallback+0x1bc>
							23);
				}
			} else if (i == 9) {
 8000636:	4b41      	ldr	r3, [pc, #260]	; (800073c <HAL_UART_RxCpltCallback+0x1d8>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b09      	cmp	r3, #9
 800063c:	d117      	bne.n	800066e <HAL_UART_RxCpltCallback+0x10a>
				if (compareStrings(alertON, data, 8) == 1) {
 800063e:	2208      	movs	r2, #8
 8000640:	493f      	ldr	r1, [pc, #252]	; (8000740 <HAL_UART_RxCpltCallback+0x1dc>)
 8000642:	4848      	ldr	r0, [pc, #288]	; (8000764 <HAL_UART_RxCpltCallback+0x200>)
 8000644:	f7ff ff6a 	bl	800051c <compareStrings>
 8000648:	4603      	mov	r3, r0
 800064a:	2b01      	cmp	r3, #1
 800064c:	d168      	bne.n	8000720 <HAL_UART_RxCpltCallback+0x1bc>
					alertStatus = 1;
 800064e:	4b46      	ldr	r3, [pc, #280]	; (8000768 <HAL_UART_RxCpltCallback+0x204>)
 8000650:	2201      	movs	r2, #1
 8000652:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Alerts Turned ON\n",
 8000654:	2219      	movs	r2, #25
 8000656:	4945      	ldr	r1, [pc, #276]	; (800076c <HAL_UART_RxCpltCallback+0x208>)
 8000658:	4837      	ldr	r0, [pc, #220]	; (8000738 <HAL_UART_RxCpltCallback+0x1d4>)
 800065a:	f006 fb35 	bl	8006cc8 <HAL_UART_Transmit_IT>
							25);
					buzzerEnterTime = HAL_GetTick();
 800065e:	f001 fbdb 	bl	8001e18 <HAL_GetTick>
 8000662:	4603      	mov	r3, r0
 8000664:	4a42      	ldr	r2, [pc, #264]	; (8000770 <HAL_UART_RxCpltCallback+0x20c>)
 8000666:	6013      	str	r3, [r2, #0]
					PWM_Start();
 8000668:	f001 f966 	bl	8001938 <PWM_Start>
 800066c:	e058      	b.n	8000720 <HAL_UART_RxCpltCallback+0x1bc>
				}
			} else if (i == 10) {
 800066e:	4b33      	ldr	r3, [pc, #204]	; (800073c <HAL_UART_RxCpltCallback+0x1d8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b0a      	cmp	r3, #10
 8000674:	d110      	bne.n	8000698 <HAL_UART_RxCpltCallback+0x134>
				if (compareStrings(alertOFF, data, 9) == 1) {
 8000676:	2209      	movs	r2, #9
 8000678:	4931      	ldr	r1, [pc, #196]	; (8000740 <HAL_UART_RxCpltCallback+0x1dc>)
 800067a:	483e      	ldr	r0, [pc, #248]	; (8000774 <HAL_UART_RxCpltCallback+0x210>)
 800067c:	f7ff ff4e 	bl	800051c <compareStrings>
 8000680:	4603      	mov	r3, r0
 8000682:	2b01      	cmp	r3, #1
 8000684:	d14c      	bne.n	8000720 <HAL_UART_RxCpltCallback+0x1bc>
					alertStatus = 0;
 8000686:	4b38      	ldr	r3, [pc, #224]	; (8000768 <HAL_UART_RxCpltCallback+0x204>)
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Alerts Turned OFF\n",
 800068c:	221a      	movs	r2, #26
 800068e:	493a      	ldr	r1, [pc, #232]	; (8000778 <HAL_UART_RxCpltCallback+0x214>)
 8000690:	4829      	ldr	r0, [pc, #164]	; (8000738 <HAL_UART_RxCpltCallback+0x1d4>)
 8000692:	f006 fb19 	bl	8006cc8 <HAL_UART_Transmit_IT>
 8000696:	e043      	b.n	8000720 <HAL_UART_RxCpltCallback+0x1bc>
							26);
				}
			} else if (i == 14 && (data[11] - '0') < 6
 8000698:	4b28      	ldr	r3, [pc, #160]	; (800073c <HAL_UART_RxCpltCallback+0x1d8>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b0e      	cmp	r3, #14
 800069e:	d12d      	bne.n	80006fc <HAL_UART_RxCpltCallback+0x198>
 80006a0:	4b27      	ldr	r3, [pc, #156]	; (8000740 <HAL_UART_RxCpltCallback+0x1dc>)
 80006a2:	7adb      	ldrb	r3, [r3, #11]
 80006a4:	2b35      	cmp	r3, #53	; 0x35
 80006a6:	d829      	bhi.n	80006fc <HAL_UART_RxCpltCallback+0x198>
					&& (data[11] - '0') > -1) {
 80006a8:	4b25      	ldr	r3, [pc, #148]	; (8000740 <HAL_UART_RxCpltCallback+0x1dc>)
 80006aa:	7adb      	ldrb	r3, [r3, #11]
 80006ac:	2b2f      	cmp	r3, #47	; 0x2f
 80006ae:	d925      	bls.n	80006fc <HAL_UART_RxCpltCallback+0x198>
				if (compareStrings(setVolume, data, 11) == 1
 80006b0:	220b      	movs	r2, #11
 80006b2:	4923      	ldr	r1, [pc, #140]	; (8000740 <HAL_UART_RxCpltCallback+0x1dc>)
 80006b4:	4831      	ldr	r0, [pc, #196]	; (800077c <HAL_UART_RxCpltCallback+0x218>)
 80006b6:	f7ff ff31 	bl	800051c <compareStrings>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d12e      	bne.n	800071e <HAL_UART_RxCpltCallback+0x1ba>
						&& data[12] == ')') {
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <HAL_UART_RxCpltCallback+0x1dc>)
 80006c2:	7b1b      	ldrb	r3, [r3, #12]
 80006c4:	2b29      	cmp	r3, #41	; 0x29
 80006c6:	d12a      	bne.n	800071e <HAL_UART_RxCpltCallback+0x1ba>
					int v = data[11] - '0';
 80006c8:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <HAL_UART_RxCpltCallback+0x1dc>)
 80006ca:	7adb      	ldrb	r3, [r3, #11]
 80006cc:	3b30      	subs	r3, #48	; 0x30
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
//					_volume = v * 10;
					char massage[24] = "Program Volume Set To  \n";
 80006d0:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <HAL_UART_RxCpltCallback+0x21c>)
 80006d2:	f107 040c 	add.w	r4, r7, #12
 80006d6:	461d      	mov	r5, r3
 80006d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006e0:	e884 0003 	stmia.w	r4, {r0, r1}
					massage[22] = data[11];
 80006e4:	4b16      	ldr	r3, [pc, #88]	; (8000740 <HAL_UART_RxCpltCallback+0x1dc>)
 80006e6:	7adb      	ldrb	r3, [r3, #11]
 80006e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					HAL_UART_Transmit_IT(&huart1, massage, 24);
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2218      	movs	r2, #24
 80006f2:	4619      	mov	r1, r3
 80006f4:	4810      	ldr	r0, [pc, #64]	; (8000738 <HAL_UART_RxCpltCallback+0x1d4>)
 80006f6:	f006 fae7 	bl	8006cc8 <HAL_UART_Transmit_IT>
				if (compareStrings(setVolume, data, 11) == 1
 80006fa:	e010      	b.n	800071e <HAL_UART_RxCpltCallback+0x1ba>
				}
			} else {
				HAL_UART_Transmit_IT(&huart1, "INVALID INPUT\n", 14);
 80006fc:	220e      	movs	r2, #14
 80006fe:	4921      	ldr	r1, [pc, #132]	; (8000784 <HAL_UART_RxCpltCallback+0x220>)
 8000700:	480d      	ldr	r0, [pc, #52]	; (8000738 <HAL_UART_RxCpltCallback+0x1d4>)
 8000702:	f006 fae1 	bl	8006cc8 <HAL_UART_Transmit_IT>
				buzzerEnterTime = HAL_GetTick();
 8000706:	f001 fb87 	bl	8001e18 <HAL_GetTick>
 800070a:	4603      	mov	r3, r0
 800070c:	4a18      	ldr	r2, [pc, #96]	; (8000770 <HAL_UART_RxCpltCallback+0x20c>)
 800070e:	6013      	str	r3, [r2, #0]
				if (alertStatus)
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <HAL_UART_RxCpltCallback+0x204>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d003      	beq.n	8000720 <HAL_UART_RxCpltCallback+0x1bc>
					PWM_Start();
 8000718:	f001 f90e 	bl	8001938 <PWM_Start>
 800071c:	e000      	b.n	8000720 <HAL_UART_RxCpltCallback+0x1bc>
				if (compareStrings(setVolume, data, 11) == 1
 800071e:	bf00      	nop
			}

			i = 0;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_UART_RxCpltCallback+0x1d8>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8000726:	bf00      	nop
 8000728:	3728      	adds	r7, #40	; 0x28
 800072a:	46bd      	mov	sp, r7
 800072c:	bdb0      	pop	{r4, r5, r7, pc}
 800072e:	bf00      	nop
 8000730:	40013800 	.word	0x40013800
 8000734:	2000072c 	.word	0x2000072c
 8000738:	200002bc 	.word	0x200002bc
 800073c:	2000072d 	.word	0x2000072d
 8000740:	200006c8 	.word	0x200006c8
 8000744:	2000004c 	.word	0x2000004c
 8000748:	20000040 	.word	0x20000040
 800074c:	48000800 	.word	0x48000800
 8000750:	20000058 	.word	0x20000058
 8000754:	20000038 	.word	0x20000038
 8000758:	080085a0 	.word	0x080085a0
 800075c:	20000060 	.word	0x20000060
 8000760:	080085b8 	.word	0x080085b8
 8000764:	20000068 	.word	0x20000068
 8000768:	2000003c 	.word	0x2000003c
 800076c:	080085d0 	.word	0x080085d0
 8000770:	20000670 	.word	0x20000670
 8000774:	20000070 	.word	0x20000070
 8000778:	080085ec 	.word	0x080085ec
 800077c:	2000007c 	.word	0x2000007c
 8000780:	08008618 	.word	0x08008618
 8000784:	08008608 	.word	0x08008608

08000788 <HAL_ADC_ConvCpltCallback>:
        return adc_value;
    }
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000798:	d103      	bne.n	80007a2 <HAL_ADC_ConvCpltCallback+0x1a>
	{
		uint32_t value;
		value = HAL_ADC_GetValue(hadc);
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f001 fe7c 	bl	8002498 <HAL_ADC_GetValue>
 80007a0:	60f8      	str	r0, [r7, #12]
	}
}
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <display_number>:
//ADC End

void display_number(int led_flag, int _number) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOD,
 80007b6:	2201      	movs	r2, #1
 80007b8:	211e      	movs	r1, #30
 80007ba:	4813      	ldr	r0, [pc, #76]	; (8000808 <display_number+0x5c>)
 80007bc:	f003 f932 	bl	8003a24 <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOD, led[led_flag], DISPLAY_ON);
 80007c0:	4a12      	ldr	r2, [pc, #72]	; (800080c <display_number+0x60>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007c8:	2200      	movs	r2, #0
 80007ca:	4619      	mov	r1, r3
 80007cc:	480e      	ldr	r0, [pc, #56]	; (8000808 <display_number+0x5c>)
 80007ce:	f003 f929 	bl	8003a24 <HAL_GPIO_WritePin>
	if (_number != 0) {
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d009      	beq.n	80007ec <display_number+0x40>
		HAL_GPIO_WritePin(GPIOD, digits[_number].pattern, GPIO_PIN_SET);
 80007d8:	4a0d      	ldr	r2, [pc, #52]	; (8000810 <display_number+0x64>)
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	4413      	add	r3, r2
 80007e0:	889b      	ldrh	r3, [r3, #4]
 80007e2:	2201      	movs	r2, #1
 80007e4:	4619      	mov	r1, r3
 80007e6:	4808      	ldr	r0, [pc, #32]	; (8000808 <display_number+0x5c>)
 80007e8:	f003 f91c 	bl	8003a24 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(GPIOD, digits[_number].anti_pattern, GPIO_PIN_RESET);
 80007ec:	4a08      	ldr	r2, [pc, #32]	; (8000810 <display_number+0x64>)
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	00db      	lsls	r3, r3, #3
 80007f2:	4413      	add	r3, r2
 80007f4:	88db      	ldrh	r3, [r3, #6]
 80007f6:	2200      	movs	r2, #0
 80007f8:	4619      	mov	r1, r3
 80007fa:	4803      	ldr	r0, [pc, #12]	; (8000808 <display_number+0x5c>)
 80007fc:	f003 f912 	bl	8003a24 <HAL_GPIO_WritePin>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	48000c00 	.word	0x48000c00
 800080c:	20000638 	.word	0x20000638
 8000810:	20000678 	.word	0x20000678

08000814 <increase>:

void increase(int _head) {
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	carrier[_head] += 1;
 800081c:	4a0c      	ldr	r2, [pc, #48]	; (8000850 <increase+0x3c>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000824:	1c5a      	adds	r2, r3, #1
 8000826:	490a      	ldr	r1, [pc, #40]	; (8000850 <increase+0x3c>)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (carrier[_head] == 10) {
 800082e:	4a08      	ldr	r2, [pc, #32]	; (8000850 <increase+0x3c>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000836:	2b0a      	cmp	r3, #10
 8000838:	d104      	bne.n	8000844 <increase+0x30>
		carrier[_head] = 0;
 800083a:	4a05      	ldr	r2, [pc, #20]	; (8000850 <increase+0x3c>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2100      	movs	r1, #0
 8000840:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	20000640 	.word	0x20000640

08000854 <init_display>:

void init_display() {
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,
 8000858:	2201      	movs	r2, #1
 800085a:	211e      	movs	r1, #30
 800085c:	4802      	ldr	r0, [pc, #8]	; (8000868 <init_display+0x14>)
 800085e:	f003 f8e1 	bl	8003a24 <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	48000c00 	.word	0x48000c00

0800086c <initTonesDictionary>:

void initTonesDictionary() {
 800086c:	b580      	push	{r7, lr}
 800086e:	f5ad 5d34 	sub.w	sp, sp, #11520	; 0x2d00
 8000872:	b08e      	sub	sp, #56	; 0x38
 8000874:	af02      	add	r7, sp, #8
    playlist = initDictionary(10);
 8000876:	200a      	movs	r0, #10
 8000878:	f7ff fcec 	bl	8000254 <initDictionary>
 800087c:	4603      	mov	r3, r0
 800087e:	4a44      	ldr	r2, [pc, #272]	; (8000990 <initTonesDictionary+0x124>)
 8000880:	6013      	str	r3, [r2, #0]

    // Example tones
    struct Tone super_mario_bros[]={{2637,306},{0,153},{2637,153},{0,153},{2093,153},{2637,153},{0,153},{3136,153},{0,459},{1586,153},{0,459},{2093,153},{0,306},{1586,153},{0,306},{1319,153},{0,306},{1760,153},{0,153},{1976,153},{0,153},{1865,153},{1760,153},{0,153},{1586,204},{2637,204},{3136,204},{3520,153},{0,153},{2794,153},{3136,153},{0,153},{2637,153},{0,153},{2093,153},{2349,153},{1976,153},{0,306},{2093,153},{0,306},{1586,153},{0,306},{1319,153},{0,306},{1760,153},{0,153},{1976,153},{0,153},{1865,153},{1760,153},{0,153},{1586,204},{2637,204},{3136,204},{3520,153},{0,153},{2794,153},{3136,153},{0,153},{2637,153},{0,153},{2093,153},{2349,153},{1976,153},{0,0}};
 8000882:	f507 5334 	add.w	r3, r7, #11520	; 0x2d00
 8000886:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800088a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800088e:	4a41      	ldr	r2, [pc, #260]	; (8000994 <initTonesDictionary+0x128>)
 8000890:	4618      	mov	r0, r3
 8000892:	4611      	mov	r1, r2
 8000894:	f44f 7302 	mov.w	r3, #520	; 0x208
 8000898:	461a      	mov	r2, r3
 800089a:	f007 fd77 	bl	800838c <memcpy>
    struct Tone hedwig_theme[]={{REST,750},{NOTE_D4,374},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_G4,750},{NOTE_D5,374},{NOTE_C5,1124},{NOTE_A4,1124},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_F4,750},{NOTE_GS4,374},{NOTE_D4,2249},{NOTE_D4,374},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_G4,750},{NOTE_D5,374},{NOTE_F5,750},{NOTE_E5,374},{NOTE_DS5,750},{NOTE_B4,374},{NOTE_DS5,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_B4,374},{NOTE_G4,2249},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_DS5,750},{NOTE_D5,374},{NOTE_CS5,750},{NOTE_A4,374},{NOTE_AS4,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_D4,374},{NOTE_D5,1700},{REST,150},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_F5,750},{NOTE_E5,374},{NOTE_DS5,750},{NOTE_B4,374},{NOTE_DS5,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_AS4,374},{NOTE_G4,2249},{0,0}};
 800089e:	f507 5334 	add.w	r3, r7, #11520	; 0x2d00
 80008a2:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80008a6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80008aa:	4a3b      	ldr	r2, [pc, #236]	; (8000998 <initTonesDictionary+0x12c>)
 80008ac:	4618      	mov	r0, r3
 80008ae:	4611      	mov	r1, r2
 80008b0:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80008b4:	461a      	mov	r2, r3
 80008b6:	f007 fd69 	bl	800838c <memcpy>
    struct Tone doom[]={{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_FS3,67},{NOTE_D3,67},{NOTE_B2,67},{NOTE_A3,67},{NOTE_FS3,67},{NOTE_B2,67},{NOTE_D3,67},{NOTE_FS3,67},{NOTE_A3,67},{NOTE_FS3,67},{NOTE_D3,67},{NOTE_B2,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B3,67},{NOTE_G3,67},{NOTE_E3,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_B3,67},{NOTE_G4,67},{NOTE_B4,67},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_E3,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,534},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_E3,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_C4,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_CS4,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_B3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_A3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_G3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_GS3,133},{NOTE_A3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_B3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_A3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_G3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_F3,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B3,67},{NOTE_G3,67},{NOTE_E3,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_B3,67},{NOTE_G4,67},{NOTE_B4,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{0,0}};
 80008ba:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 80008be:	f103 0310 	add.w	r3, r3, #16
 80008c2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80008c6:	4a35      	ldr	r2, [pc, #212]	; (800099c <initTonesDictionary+0x130>)
 80008c8:	4618      	mov	r0, r3
 80008ca:	4611      	mov	r1, r2
 80008cc:	f44f 6351 	mov.w	r3, #3344	; 0xd10
 80008d0:	461a      	mov	r2, r3
 80008d2:	f007 fd5b 	bl	800838c <memcpy>
    struct Tone fur_elise[] = {{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,750},{REST,250},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_C5,188},{NOTE_C5,188},{NOTE_C5,188},{NOTE_C5,750},{NOTE_F5,282},{NOTE_E5,94},{NOTE_E5,250},{NOTE_D5,250},{NOTE_AS5,282},{NOTE_A5,94},{NOTE_A5,188},{NOTE_G5,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_AS4,250},{NOTE_A4,250},{NOTE_A4,94},{NOTE_G4,94},{NOTE_A4,94},{NOTE_B4,94},{NOTE_C5,750},{NOTE_D5,188},{NOTE_DS5,188},{NOTE_E5,375},{NOTE_E5,188},{NOTE_F5,188},{NOTE_A4,188},{NOTE_C5,750},{NOTE_D5,282},{NOTE_B4,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_G4,94},{NOTE_G5,94},{NOTE_A4,94},{NOTE_G5,94},{NOTE_B4,94},{NOTE_G5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_E5,94},{NOTE_G5,94},{NOTE_C6,94},{NOTE_B5,94},{NOTE_A5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_D5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_G4,94},{NOTE_G5,94},{NOTE_A4,94},{NOTE_G5,94},{NOTE_B4,94},{NOTE_G5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_E5,94},{NOTE_G5,94},{NOTE_C6,94},{NOTE_B5,94},{NOTE_A5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_D5,94},{NOTE_E5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,94},{NOTE_B4,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,94},{NOTE_B4,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,375},{NOTE_B4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,375},{NOTE_B4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{REST,188},{REST,250},{NOTE_CS5,1125},{NOTE_D5,750},{NOTE_E5,188},{NOTE_F5,188},{NOTE_F5,750},{NOTE_F5,250},{NOTE_E5,1125},{NOTE_D5,750},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,750},{NOTE_A4,250},{NOTE_A4,250},{NOTE_C5,250},{NOTE_B4,250},{NOTE_A4,1125},{NOTE_CS5,1125},{NOTE_D5,750},{NOTE_E5,188},{NOTE_F5,188},{NOTE_F5,750},{NOTE_F5,250},{NOTE_F5,1125},{NOTE_DS5,750},{NOTE_D5,188},{NOTE_C5,188},{NOTE_AS4,750},{NOTE_A4,250},{NOTE_GS4,750},{NOTE_G4,250},{NOTE_A4,1125},{NOTE_B4,750},{REST,250},{NOTE_A3,141},{NOTE_C4,141},{NOTE_E4,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_D5,141},{NOTE_C5,141},{NOTE_B4,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_A5,141},{NOTE_C6,141},{NOTE_E6,141},{NOTE_D6,141},{NOTE_C6,141},{NOTE_B5,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_A5,141},{NOTE_C6,141},{NOTE_E6,141},{NOTE_D6,141},{NOTE_C6,141},{NOTE_B5,141},{NOTE_AS5,141},{NOTE_A5,141},{NOTE_GS5,141},{NOTE_G5,141},{NOTE_FS5,141},{NOTE_F5,141},{NOTE_E5,141},{NOTE_DS5,141},{NOTE_D5,141},{NOTE_CS5,141},{NOTE_C5,141},{NOTE_B4,141},{NOTE_AS4,141},{NOTE_A4,141},{NOTE_GS4,141},{NOTE_G4,141},{NOTE_FS4,141},{NOTE_F4,141},{NOTE_E4,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,375},{REST,375},{REST,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,750},{REST,250},{REST,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_E5,250},{NOTE_E5,250},{NOTE_E6,375},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,1125}};
 80008d6:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80008da:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80008de:	4a30      	ldr	r2, [pc, #192]	; (80009a0 <initTonesDictionary+0x134>)
 80008e0:	4618      	mov	r0, r3
 80008e2:	4611      	mov	r1, r2
 80008e4:	f241 23d8 	movw	r3, #4824	; 0x12d8
 80008e8:	461a      	mov	r2, r3
 80008ea:	f007 fd4f 	bl	800838c <memcpy>
    struct Tone tetris[] = {{NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 834}, {NOTE_A4, 834}, {NOTE_GS4, 834}, {NOTE_B4, 417}, {REST, 208}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 417}, {NOTE_E5, 417}, {NOTE_A5, 834}, {NOTE_GS5, 834},{NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 834}, {NOTE_A4, 834}, {NOTE_GS4, 834}, {NOTE_B4, 417}, {REST, 208}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 417}, {NOTE_E5, 417}, {NOTE_A5, 834}, {NOTE_GS5, 834},{NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_C5, 208}, {NOTE_B4, 208}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 625}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 208}, {NOTE_A4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 625}, {NOTE_F5, 208}, {NOTE_A5, 417}, {NOTE_G5, 208}, {NOTE_F5, 208}, {NOTE_E5, 625}, {NOTE_C5, 208}, {NOTE_E5, 417}, {NOTE_D5, 208}, {NOTE_C5, 208}, {NOTE_B4, 417}, {NOTE_B4, 208}, {NOTE_C5, 208}, {NOTE_D5, 417}, {NOTE_E5, 417}, {NOTE_C5, 417}, {NOTE_A4, 417}, {NOTE_A4, 417}, {REST, 417}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 834}, {NOTE_A4, 834}, {NOTE_GS4, 834}, {NOTE_B4, 417}, {REST, 208}, {NOTE_E5, 834}, {NOTE_C5, 834}, {NOTE_D5, 834}, {NOTE_B4, 834}, {NOTE_C5, 417}, {NOTE_E5, 417}, {NOTE_A5, 834}, {NOTE_GS5, 834}};
 80008ee:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80008f2:	f5a3 6353 	sub.w	r3, r3, #3376	; 0xd30
 80008f6:	4a2b      	ldr	r2, [pc, #172]	; (80009a4 <initTonesDictionary+0x138>)
 80008f8:	4618      	mov	r0, r3
 80008fa:	4611      	mov	r1, r2
 80008fc:	f640 1348 	movw	r3, #2376	; 0x948
 8000900:	461a      	mov	r2, r3
 8000902:	f007 fd43 	bl	800838c <memcpy>
    // Insert tones into dictionary
    insert(playlist, "super_mario_bros", 1, super_mario_bros, sizeof(super_mario_bros) / sizeof(struct Tone));
 8000906:	4b22      	ldr	r3, [pc, #136]	; (8000990 <initTonesDictionary+0x124>)
 8000908:	6818      	ldr	r0, [r3, #0]
 800090a:	f507 532c 	add.w	r3, r7, #11008	; 0x2b00
 800090e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000912:	2241      	movs	r2, #65	; 0x41
 8000914:	9200      	str	r2, [sp, #0]
 8000916:	2201      	movs	r2, #1
 8000918:	4923      	ldr	r1, [pc, #140]	; (80009a8 <initTonesDictionary+0x13c>)
 800091a:	f7ff fcc6 	bl	80002aa <insert>
    insert(playlist, "hedwig_theme", 2, hedwig_theme, sizeof(hedwig_theme) / sizeof(struct Tone));
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <initTonesDictionary+0x124>)
 8000920:	6818      	ldr	r0, [r3, #0]
 8000922:	f507 5324 	add.w	r3, r7, #10496	; 0x2900
 8000926:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800092a:	223f      	movs	r2, #63	; 0x3f
 800092c:	9200      	str	r2, [sp, #0]
 800092e:	2202      	movs	r2, #2
 8000930:	491e      	ldr	r1, [pc, #120]	; (80009ac <initTonesDictionary+0x140>)
 8000932:	f7ff fcba 	bl	80002aa <insert>
    insert(playlist, "doom", 3, doom, sizeof(doom) / sizeof(struct Tone));
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <initTonesDictionary+0x124>)
 8000938:	6818      	ldr	r0, [r3, #0]
 800093a:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800093e:	f103 0310 	add.w	r3, r3, #16
 8000942:	3b10      	subs	r3, #16
 8000944:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 8000948:	9200      	str	r2, [sp, #0]
 800094a:	2203      	movs	r2, #3
 800094c:	4918      	ldr	r1, [pc, #96]	; (80009b0 <initTonesDictionary+0x144>)
 800094e:	f7ff fcac 	bl	80002aa <insert>
    insert(playlist, "fur_elise", 4, fur_elise, sizeof(fur_elise) / sizeof(struct Tone));
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <initTonesDictionary+0x124>)
 8000954:	6818      	ldr	r0, [r3, #0]
 8000956:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 800095a:	3b28      	subs	r3, #40	; 0x28
 800095c:	f240 225b 	movw	r2, #603	; 0x25b
 8000960:	9200      	str	r2, [sp, #0]
 8000962:	2204      	movs	r2, #4
 8000964:	4913      	ldr	r1, [pc, #76]	; (80009b4 <initTonesDictionary+0x148>)
 8000966:	f7ff fca0 	bl	80002aa <insert>
    insert(playlist, "tetris", 5, tetris, sizeof(tetris) / sizeof(struct Tone));
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <initTonesDictionary+0x124>)
 800096c:	6818      	ldr	r0, [r3, #0]
 800096e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000972:	3b30      	subs	r3, #48	; 0x30
 8000974:	f240 1229 	movw	r2, #297	; 0x129
 8000978:	9200      	str	r2, [sp, #0]
 800097a:	2205      	movs	r2, #5
 800097c:	490e      	ldr	r1, [pc, #56]	; (80009b8 <initTonesDictionary+0x14c>)
 800097e:	f7ff fc94 	bl	80002aa <insert>




}
 8000982:	bf00      	nop
 8000984:	f507 5734 	add.w	r7, r7, #11520	; 0x2d00
 8000988:	3730      	adds	r7, #48	; 0x30
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000630 	.word	0x20000630
 8000994:	08008670 	.word	0x08008670
 8000998:	08008878 	.word	0x08008878
 800099c:	08008a70 	.word	0x08008a70
 80009a0:	08009780 	.word	0x08009780
 80009a4:	0800aa58 	.word	0x0800aa58
 80009a8:	08008630 	.word	0x08008630
 80009ac:	08008644 	.word	0x08008644
 80009b0:	08008654 	.word	0x08008654
 80009b4:	0800865c 	.word	0x0800865c
 80009b8:	08008668 	.word	0x08008668

080009bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b096      	sub	sp, #88	; 0x58
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	struct digit _digits[10];
	_digits[0].number = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
	_digits[0].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
 80009c6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80009ca:	817b      	strh	r3, [r7, #10]
			| GPIO_PIN_15;

	_digits[1].number = 1;
 80009cc:	2301      	movs	r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
	_digits[1].pattern = GPIO_PIN_12;
 80009d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d4:	823b      	strh	r3, [r7, #16]
	_digits[1].anti_pattern = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80009d6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80009da:	827b      	strh	r3, [r7, #18]

	_digits[2].number = 2;
 80009dc:	2302      	movs	r3, #2
 80009de:	617b      	str	r3, [r7, #20]
	_digits[2].pattern = GPIO_PIN_13;
 80009e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e4:	833b      	strh	r3, [r7, #24]
	_digits[2].anti_pattern = GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15;
 80009e6:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80009ea:	837b      	strh	r3, [r7, #26]

	_digits[3].number = 3;
 80009ec:	2303      	movs	r3, #3
 80009ee:	61fb      	str	r3, [r7, #28]
	_digits[3].pattern = GPIO_PIN_12 | GPIO_PIN_13;
 80009f0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80009f4:	843b      	strh	r3, [r7, #32]
	_digits[3].anti_pattern = GPIO_PIN_14 | GPIO_PIN_15;
 80009f6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80009fa:	847b      	strh	r3, [r7, #34]	; 0x22

	_digits[4].number = 4;
 80009fc:	2304      	movs	r3, #4
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
	_digits[4].pattern = GPIO_PIN_14;
 8000a00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a04:	853b      	strh	r3, [r7, #40]	; 0x28
	_digits[4].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15;
 8000a06:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000a0a:	857b      	strh	r3, [r7, #42]	; 0x2a

	_digits[5].number = 5;
 8000a0c:	2305      	movs	r3, #5
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	_digits[5].pattern = GPIO_PIN_12 | GPIO_PIN_14;
 8000a10:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000a14:	863b      	strh	r3, [r7, #48]	; 0x30
	_digits[5].anti_pattern = GPIO_PIN_13 | GPIO_PIN_15;
 8000a16:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000a1a:	867b      	strh	r3, [r7, #50]	; 0x32

	_digits[6].number = 6;
 8000a1c:	2306      	movs	r3, #6
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
	_digits[6].pattern = GPIO_PIN_13 | GPIO_PIN_14;
 8000a20:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000a24:	873b      	strh	r3, [r7, #56]	; 0x38
	_digits[6].anti_pattern = GPIO_PIN_12 | GPIO_PIN_15;
 8000a26:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000a2a:	877b      	strh	r3, [r7, #58]	; 0x3a

	_digits[7].number = 7;
 8000a2c:	2307      	movs	r3, #7
 8000a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	_digits[7].pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 8000a30:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000a34:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	_digits[7].anti_pattern = GPIO_PIN_15;
 8000a38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a3c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	_digits[8].number = 8;
 8000a40:	2308      	movs	r3, #8
 8000a42:	647b      	str	r3, [r7, #68]	; 0x44
	_digits[8].pattern = GPIO_PIN_15;
 8000a44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a48:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	_digits[8].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 8000a4c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000a50:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	_digits[9].number = 9;
 8000a54:	2309      	movs	r3, #9
 8000a56:	64fb      	str	r3, [r7, #76]	; 0x4c
	_digits[9].pattern = GPIO_PIN_12 | GPIO_PIN_15;
 8000a58:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000a5c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	_digits[9].anti_pattern = GPIO_PIN_13 | GPIO_PIN_14;
 8000a60:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000a64:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	//initialize Global digits structure
	for (int i = 0; i < 10; i++) {
 8000a68:	2300      	movs	r3, #0
 8000a6a:	657b      	str	r3, [r7, #84]	; 0x54
 8000a6c:	e00f      	b.n	8000a8e <main+0xd2>
		digits[i] = _digits[i];
 8000a6e:	492c      	ldr	r1, [pc, #176]	; (8000b20 <main+0x164>)
 8000a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a74:	00d2      	lsls	r2, r2, #3
 8000a76:	3258      	adds	r2, #88	; 0x58
 8000a78:	443a      	add	r2, r7
 8000a7a:	00db      	lsls	r3, r3, #3
 8000a7c:	440b      	add	r3, r1
 8000a7e:	3a54      	subs	r2, #84	; 0x54
 8000a80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a84:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 0; i < 10; i++) {
 8000a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	657b      	str	r3, [r7, #84]	; 0x54
 8000a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a90:	2b09      	cmp	r3, #9
 8000a92:	ddec      	ble.n	8000a6e <main+0xb2>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a94:	f001 f966 	bl	8001d64 <HAL_Init>

  /* USER CODE BEGIN Init */

	//Set 7-segment PINS
	led[0] = GPIO_PIN_1;
 8000a98:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <main+0x168>)
 8000a9a:	2202      	movs	r2, #2
 8000a9c:	801a      	strh	r2, [r3, #0]
	led[1] = GPIO_PIN_2;
 8000a9e:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <main+0x168>)
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	805a      	strh	r2, [r3, #2]
	led[2] = GPIO_PIN_3;
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <main+0x168>)
 8000aa6:	2208      	movs	r2, #8
 8000aa8:	809a      	strh	r2, [r3, #4]
	led[3] = GPIO_PIN_4;
 8000aaa:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <main+0x168>)
 8000aac:	2210      	movs	r2, #16
 8000aae:	80da      	strh	r2, [r3, #6]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab0:	f000 f84a 	bl	8000b48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab4:	f000 faba 	bl	800102c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ab8:	f000 f91e 	bl	8000cf8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000abc:	f000 f95c 	bl	8000d78 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000ac0:	f000 fa92 	bl	8000fe8 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000ac4:	f000 f996 	bl	8000df4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ac8:	f000 f9e8 	bl	8000e9c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000acc:	f000 fa5c 	bl	8000f88 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000ad0:	f000 f8a2 	bl	8000c18 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8000ad4:	4814      	ldr	r0, [pc, #80]	; (8000b28 <main+0x16c>)
 8000ad6:	f004 fef3 	bl	80058c0 <HAL_TIM_Base_Start_IT>
	HAL_UART_Transmit_IT(&huart1,
 8000ada:	222c      	movs	r2, #44	; 0x2c
 8000adc:	4913      	ldr	r1, [pc, #76]	; (8000b2c <main+0x170>)
 8000ade:	4814      	ldr	r0, [pc, #80]	; (8000b30 <main+0x174>)
 8000ae0:	f006 f8f2 	bl	8006cc8 <HAL_UART_Transmit_IT>
			"=============\nProgram Running\n=============\n", 44);
	HAL_UART_Receive_IT(&huart1, &d, 1);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4913      	ldr	r1, [pc, #76]	; (8000b34 <main+0x178>)
 8000ae8:	4811      	ldr	r0, [pc, #68]	; (8000b30 <main+0x174>)
 8000aea:	f006 f94b 	bl	8006d84 <HAL_UART_Receive_IT>
	initTonesDictionary();
 8000aee:	f7ff febd 	bl	800086c <initTonesDictionary>
	PWM_Start();
 8000af2:	f000 ff21 	bl	8001938 <PWM_Start>
	 int toneCount;
	 melody = lookup(playlist, "tetris", 5, &toneCount);;
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <main+0x17c>)
 8000af8:	6818      	ldr	r0, [r3, #0]
 8000afa:	463b      	mov	r3, r7
 8000afc:	2205      	movs	r2, #5
 8000afe:	490f      	ldr	r1, [pc, #60]	; (8000b3c <main+0x180>)
 8000b00:	f7ff fc22 	bl	8000348 <lookup>
 8000b04:	4603      	mov	r3, r0
 8000b06:	4a0e      	ldr	r2, [pc, #56]	; (8000b40 <main+0x184>)
 8000b08:	6013      	str	r3, [r2, #0]
	 Change_Melody(melody, toneCount);
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <main+0x184>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	683a      	ldr	r2, [r7, #0]
 8000b10:	4611      	mov	r1, r2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 ffd4 	bl	8001ac0 <Change_Melody>

	 HAL_ADC_Start_IT(&hadc1);
 8000b18:	480a      	ldr	r0, [pc, #40]	; (8000b44 <main+0x188>)
 8000b1a:	f001 fb7d 	bl	8002218 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000b1e:	e7fe      	b.n	8000b1e <main+0x162>
 8000b20:	20000678 	.word	0x20000678
 8000b24:	20000638 	.word	0x20000638
 8000b28:	20000224 	.word	0x20000224
 8000b2c:	0800b3a0 	.word	0x0800b3a0
 8000b30:	200002bc 	.word	0x200002bc
 8000b34:	2000072c 	.word	0x2000072c
 8000b38:	20000630 	.word	0x20000630
 8000b3c:	08008668 	.word	0x08008668
 8000b40:	20000634 	.word	0x20000634
 8000b44:	2000011c 	.word	0x2000011c

08000b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b09e      	sub	sp, #120	; 0x78
 8000b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b52:	2228      	movs	r2, #40	; 0x28
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f007 fc26 	bl	80083a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	223c      	movs	r2, #60	; 0x3c
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f007 fc18 	bl	80083a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b7c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b80:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b86:	2301      	movs	r3, #1
 8000b88:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b8a:	2310      	movs	r3, #16
 8000b8c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b96:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000b98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b9c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f003 f966 	bl	8003e74 <HAL_RCC_OscConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000bae:	f000 fccf 	bl	8001550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb2:	230f      	movs	r3, #15
 8000bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bc8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bcc:	2101      	movs	r1, #1
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f004 f98e 	bl	8004ef0 <HAL_RCC_ClockConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000bda:	f000 fcb9 	bl	8001550 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000bde:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <SystemClock_Config+0xcc>)
 8000be0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000be6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000bf0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bf4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f004 fbad 	bl	800535c <HAL_RCCEx_PeriphCLKConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c08:	f000 fca2 	bl	8001550 <Error_Handler>
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	3778      	adds	r7, #120	; 0x78
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	000210a1 	.word	0x000210a1

08000c18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
 8000c38:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c3a:	4b2e      	ldr	r3, [pc, #184]	; (8000cf4 <MX_ADC1_Init+0xdc>)
 8000c3c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c40:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c42:	4b2c      	ldr	r3, [pc, #176]	; (8000cf4 <MX_ADC1_Init+0xdc>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c48:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <MX_ADC1_Init+0xdc>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c4e:	4b29      	ldr	r3, [pc, #164]	; (8000cf4 <MX_ADC1_Init+0xdc>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c54:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <MX_ADC1_Init+0xdc>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c5a:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <MX_ADC1_Init+0xdc>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c62:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <MX_ADC1_Init+0xdc>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c68:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <MX_ADC1_Init+0xdc>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <MX_ADC1_Init+0xdc>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c74:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <MX_ADC1_Init+0xdc>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <MX_ADC1_Init+0xdc>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c82:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <MX_ADC1_Init+0xdc>)
 8000c84:	2204      	movs	r2, #4
 8000c86:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c88:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <MX_ADC1_Init+0xdc>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c8e:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <MX_ADC1_Init+0xdc>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c94:	4817      	ldr	r0, [pc, #92]	; (8000cf4 <MX_ADC1_Init+0xdc>)
 8000c96:	f001 f8df 	bl	8001e58 <HAL_ADC_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000ca0:	f000 fc56 	bl	8001550 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	4619      	mov	r1, r3
 8000cae:	4811      	ldr	r0, [pc, #68]	; (8000cf4 <MX_ADC1_Init+0xdc>)
 8000cb0:	f002 f9fa 	bl	80030a8 <HAL_ADCEx_MultiModeConfigChannel>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000cba:	f000 fc49 	bl	8001550 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cbe:	2305      	movs	r3, #5
 8000cc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000cca:	2306      	movs	r3, #6
 8000ccc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4806      	ldr	r0, [pc, #24]	; (8000cf4 <MX_ADC1_Init+0xdc>)
 8000cdc:	f001 fef8 	bl	8002ad0 <HAL_ADC_ConfigChannel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000ce6:	f000 fc33 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	3728      	adds	r7, #40	; 0x28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2000011c 	.word	0x2000011c

08000cf8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000cfe:	4a1c      	ldr	r2, [pc, #112]	; (8000d70 <MX_I2C1_Init+0x78>)
 8000d00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d04:	4a1b      	ldr	r2, [pc, #108]	; (8000d74 <MX_I2C1_Init+0x7c>)
 8000d06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d32:	480e      	ldr	r0, [pc, #56]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d34:	f002 fea6 	bl	8003a84 <HAL_I2C_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d3e:	f000 fc07 	bl	8001550 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d42:	2100      	movs	r1, #0
 8000d44:	4809      	ldr	r0, [pc, #36]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d46:	f002 ff2c 	bl	8003ba2 <HAL_I2CEx_ConfigAnalogFilter>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d50:	f000 fbfe 	bl	8001550 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d54:	2100      	movs	r1, #0
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d58:	f002 ff6e 	bl	8003c38 <HAL_I2CEx_ConfigDigitalFilter>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d62:	f000 fbf5 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2000016c 	.word	0x2000016c
 8000d70:	40005400 	.word	0x40005400
 8000d74:	2000090e 	.word	0x2000090e

08000d78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <MX_SPI1_Init+0x74>)
 8000d7e:	4a1c      	ldr	r2, [pc, #112]	; (8000df0 <MX_SPI1_Init+0x78>)
 8000d80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <MX_SPI1_Init+0x74>)
 8000d84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d8a:	4b18      	ldr	r3, [pc, #96]	; (8000dec <MX_SPI1_Init+0x74>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d90:	4b16      	ldr	r3, [pc, #88]	; (8000dec <MX_SPI1_Init+0x74>)
 8000d92:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d96:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_SPI1_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <MX_SPI1_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_SPI1_Init+0x74>)
 8000da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000daa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_SPI1_Init+0x74>)
 8000dae:	2208      	movs	r2, #8
 8000db0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_SPI1_Init+0x74>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_SPI1_Init+0x74>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <MX_SPI1_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_SPI1_Init+0x74>)
 8000dc6:	2207      	movs	r2, #7
 8000dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <MX_SPI1_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_SPI1_Init+0x74>)
 8000dd2:	2208      	movs	r2, #8
 8000dd4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_SPI1_Init+0x74>)
 8000dd8:	f004 fc70 	bl	80056bc <HAL_SPI_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000de2:	f000 fbb5 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200001c0 	.word	0x200001c0
 8000df0:	40013000 	.word	0x40013000

08000df4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dfa:	f107 0310 	add.w	r3, r7, #16
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e12:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <MX_TIM1_Init+0xa0>)
 8000e14:	4a20      	ldr	r2, [pc, #128]	; (8000e98 <MX_TIM1_Init+0xa4>)
 8000e16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4800-1;
 8000e18:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <MX_TIM1_Init+0xa0>)
 8000e1a:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000e1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e20:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <MX_TIM1_Init+0xa0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5-1;
 8000e26:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_TIM1_Init+0xa0>)
 8000e28:	2204      	movs	r2, #4
 8000e2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2c:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <MX_TIM1_Init+0xa0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_TIM1_Init+0xa0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <MX_TIM1_Init+0xa0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e3e:	4815      	ldr	r0, [pc, #84]	; (8000e94 <MX_TIM1_Init+0xa0>)
 8000e40:	f004 fce7 	bl	8005812 <HAL_TIM_Base_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000e4a:	f000 fb81 	bl	8001550 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480e      	ldr	r0, [pc, #56]	; (8000e94 <MX_TIM1_Init+0xa0>)
 8000e5c:	f005 f930 	bl	80060c0 <HAL_TIM_ConfigClockSource>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000e66:	f000 fb73 	bl	8001550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4806      	ldr	r0, [pc, #24]	; (8000e94 <MX_TIM1_Init+0xa0>)
 8000e7c:	f005 fe38 	bl	8006af0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e86:	f000 fb63 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	3720      	adds	r7, #32
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000224 	.word	0x20000224
 8000e98:	40012c00 	.word	0x40012c00

08000e9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08e      	sub	sp, #56	; 0x38
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb0:	f107 031c 	add.w	r3, r7, #28
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]
 8000eca:	615a      	str	r2, [r3, #20]
 8000ecc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ece:	4b2d      	ldr	r3, [pc, #180]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000ed0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ed4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ed6:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000edc:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ee2:	4b28      	ldr	r3, [pc, #160]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eea:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef0:	4b24      	ldr	r3, [pc, #144]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ef6:	4823      	ldr	r0, [pc, #140]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000ef8:	f004 fc8b 	bl	8005812 <HAL_TIM_Base_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000f02:	f000 fb25 	bl	8001550 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f10:	4619      	mov	r1, r3
 8000f12:	481c      	ldr	r0, [pc, #112]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000f14:	f005 f8d4 	bl	80060c0 <HAL_TIM_ConfigClockSource>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000f1e:	f000 fb17 	bl	8001550 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f22:	4818      	ldr	r0, [pc, #96]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000f24:	f004 fd36 	bl	8005994 <HAL_TIM_PWM_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000f2e:	f000 fb0f 	bl	8001550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4810      	ldr	r0, [pc, #64]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000f42:	f005 fdd5 	bl	8006af0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f4c:	f000 fb00 	bl	8001550 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f50:	2360      	movs	r3, #96	; 0x60
 8000f52:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f60:	463b      	mov	r3, r7
 8000f62:	2200      	movs	r2, #0
 8000f64:	4619      	mov	r1, r3
 8000f66:	4807      	ldr	r0, [pc, #28]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000f68:	f004 ff96 	bl	8005e98 <HAL_TIM_PWM_ConfigChannel>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000f72:	f000 faed 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f76:	4803      	ldr	r0, [pc, #12]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000f78:	f000 fc18 	bl	80017ac <HAL_TIM_MspPostInit>

}
 8000f7c:	bf00      	nop
 8000f7e:	3738      	adds	r7, #56	; 0x38
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000270 	.word	0x20000270

08000f88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <MX_USART1_UART_Init+0x58>)
 8000f8e:	4a15      	ldr	r2, [pc, #84]	; (8000fe4 <MX_USART1_UART_Init+0x5c>)
 8000f90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <MX_USART1_UART_Init+0x58>)
 8000f94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_USART1_UART_Init+0x58>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_USART1_UART_Init+0x58>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_USART1_UART_Init+0x58>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_USART1_UART_Init+0x58>)
 8000fae:	220c      	movs	r2, #12
 8000fb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <MX_USART1_UART_Init+0x58>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_USART1_UART_Init+0x58>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <MX_USART1_UART_Init+0x58>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_USART1_UART_Init+0x58>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_USART1_UART_Init+0x58>)
 8000fcc:	f005 fe2e 	bl	8006c2c <HAL_UART_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fd6:	f000 fabb 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200002bc 	.word	0x200002bc
 8000fe4:	40013800 	.word	0x40013800

08000fe8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000fec:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <MX_USB_PCD_Init+0x3c>)
 8000fee:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <MX_USB_PCD_Init+0x40>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <MX_USB_PCD_Init+0x3c>)
 8000ff4:	2208      	movs	r2, #8
 8000ff6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <MX_USB_PCD_Init+0x3c>)
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_USB_PCD_Init+0x3c>)
 8001000:	2202      	movs	r2, #2
 8001002:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <MX_USB_PCD_Init+0x3c>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <MX_USB_PCD_Init+0x3c>)
 800100c:	2200      	movs	r2, #0
 800100e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <MX_USB_PCD_Init+0x3c>)
 8001012:	f002 fe5d 	bl	8003cd0 <HAL_PCD_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800101c:	f000 fa98 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000344 	.word	0x20000344
 8001028:	40005c00 	.word	0x40005c00

0800102c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08c      	sub	sp, #48	; 0x30
 8001030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001042:	4b5e      	ldr	r3, [pc, #376]	; (80011bc <MX_GPIO_Init+0x190>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	4a5d      	ldr	r2, [pc, #372]	; (80011bc <MX_GPIO_Init+0x190>)
 8001048:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800104c:	6153      	str	r3, [r2, #20]
 800104e:	4b5b      	ldr	r3, [pc, #364]	; (80011bc <MX_GPIO_Init+0x190>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001056:	61bb      	str	r3, [r7, #24]
 8001058:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105a:	4b58      	ldr	r3, [pc, #352]	; (80011bc <MX_GPIO_Init+0x190>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	4a57      	ldr	r2, [pc, #348]	; (80011bc <MX_GPIO_Init+0x190>)
 8001060:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001064:	6153      	str	r3, [r2, #20]
 8001066:	4b55      	ldr	r3, [pc, #340]	; (80011bc <MX_GPIO_Init+0x190>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001072:	4b52      	ldr	r3, [pc, #328]	; (80011bc <MX_GPIO_Init+0x190>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	4a51      	ldr	r2, [pc, #324]	; (80011bc <MX_GPIO_Init+0x190>)
 8001078:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800107c:	6153      	str	r3, [r2, #20]
 800107e:	4b4f      	ldr	r3, [pc, #316]	; (80011bc <MX_GPIO_Init+0x190>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	4b4c      	ldr	r3, [pc, #304]	; (80011bc <MX_GPIO_Init+0x190>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	4a4b      	ldr	r2, [pc, #300]	; (80011bc <MX_GPIO_Init+0x190>)
 8001090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001094:	6153      	str	r3, [r2, #20]
 8001096:	4b49      	ldr	r3, [pc, #292]	; (80011bc <MX_GPIO_Init+0x190>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a2:	4b46      	ldr	r3, [pc, #280]	; (80011bc <MX_GPIO_Init+0x190>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	4a45      	ldr	r2, [pc, #276]	; (80011bc <MX_GPIO_Init+0x190>)
 80010a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010ac:	6153      	str	r3, [r2, #20]
 80010ae:	4b43      	ldr	r3, [pc, #268]	; (80011bc <MX_GPIO_Init+0x190>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	4b40      	ldr	r3, [pc, #256]	; (80011bc <MX_GPIO_Init+0x190>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	4a3f      	ldr	r2, [pc, #252]	; (80011bc <MX_GPIO_Init+0x190>)
 80010c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c4:	6153      	str	r3, [r2, #20]
 80010c6:	4b3d      	ldr	r3, [pc, #244]	; (80011bc <MX_GPIO_Init+0x190>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2108      	movs	r1, #8
 80010d6:	483a      	ldr	r0, [pc, #232]	; (80011c0 <MX_GPIO_Init+0x194>)
 80010d8:	f002 fca4 	bl	8003a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80010dc:	2200      	movs	r2, #0
 80010de:	f24f 011e 	movw	r1, #61470	; 0xf01e
 80010e2:	4838      	ldr	r0, [pc, #224]	; (80011c4 <MX_GPIO_Init+0x198>)
 80010e4:	f002 fc9e 	bl	8003a24 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80010e8:	2308      	movs	r3, #8
 80010ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ec:	2301      	movs	r3, #1
 80010ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	4619      	mov	r1, r3
 80010fe:	4830      	ldr	r0, [pc, #192]	; (80011c0 <MX_GPIO_Init+0x194>)
 8001100:	f002 fb16 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT3_Pin MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT3_Pin|MEMS_INT4_Pin;
 8001104:	2330      	movs	r3, #48	; 0x30
 8001106:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001108:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800110c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	4829      	ldr	r0, [pc, #164]	; (80011c0 <MX_GPIO_Init+0x194>)
 800111a:	f002 fb09 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800111e:	2305      	movs	r3, #5
 8001120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001122:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001126:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	4619      	mov	r1, r3
 8001132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001136:	f002 fafb 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800113a:	230a      	movs	r3, #10
 800113c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800113e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001144:	2302      	movs	r3, #2
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4619      	mov	r1, r3
 800114e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001152:	f002 faed 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD1 PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001156:	f24f 031e 	movw	r3, #61470	; 0xf01e
 800115a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115c:	2301      	movs	r3, #1
 800115e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	4619      	mov	r1, r3
 800116e:	4815      	ldr	r0, [pc, #84]	; (80011c4 <MX_GPIO_Init+0x198>)
 8001170:	f002 fade 	bl	8003730 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2100      	movs	r1, #0
 8001178:	2006      	movs	r0, #6
 800117a:	f002 fa2c 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800117e:	2006      	movs	r0, #6
 8001180:	f002 fa45 	bl	800360e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001184:	2200      	movs	r2, #0
 8001186:	2100      	movs	r1, #0
 8001188:	2007      	movs	r0, #7
 800118a:	f002 fa24 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800118e:	2007      	movs	r0, #7
 8001190:	f002 fa3d 	bl	800360e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	2100      	movs	r1, #0
 8001198:	2008      	movs	r0, #8
 800119a:	f002 fa1c 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 800119e:	2008      	movs	r0, #8
 80011a0:	f002 fa35 	bl	800360e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2100      	movs	r1, #0
 80011a8:	2009      	movs	r0, #9
 80011aa:	f002 fa14 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80011ae:	2009      	movs	r0, #9
 80011b0:	f002 fa2d 	bl	800360e <HAL_NVIC_EnableIRQ>

}
 80011b4:	bf00      	nop
 80011b6:	3730      	adds	r7, #48	; 0x30
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40021000 	.word	0x40021000
 80011c0:	48001000 	.word	0x48001000
 80011c4:	48000c00 	.word	0x48000c00

080011c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 80011d2:	f000 fe21 	bl	8001e18 <HAL_GetTick>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4a91      	ldr	r2, [pc, #580]	; (8001420 <HAL_GPIO_EXTI_Callback+0x258>)
 80011da:	6013      	str	r3, [r2, #0]
	if ((GPIO_Pin == GPIO_PIN_1) && LED != 4) {
 80011dc:	88fb      	ldrh	r3, [r7, #6]
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d116      	bne.n	8001210 <HAL_GPIO_EXTI_Callback+0x48>
 80011e2:	4b90      	ldr	r3, [pc, #576]	; (8001424 <HAL_GPIO_EXTI_Callback+0x25c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	d012      	beq.n	8001210 <HAL_GPIO_EXTI_Callback+0x48>

		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 80011ea:	4b8d      	ldr	r3, [pc, #564]	; (8001420 <HAL_GPIO_EXTI_Callback+0x258>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4b8e      	ldr	r3, [pc, #568]	; (8001428 <HAL_GPIO_EXTI_Callback+0x260>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80011f8:	f240 810e 	bls.w	8001418 <HAL_GPIO_EXTI_Callback+0x250>
//			counterInside++;
			increase(LED);
 80011fc:	4b89      	ldr	r3, [pc, #548]	; (8001424 <HAL_GPIO_EXTI_Callback+0x25c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fb07 	bl	8000814 <increase>
			previousMillis = currentMillis;
 8001206:	4b86      	ldr	r3, [pc, #536]	; (8001420 <HAL_GPIO_EXTI_Callback+0x258>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a87      	ldr	r2, [pc, #540]	; (8001428 <HAL_GPIO_EXTI_Callback+0x260>)
 800120c:	6013      	str	r3, [r2, #0]
		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 800120e:	e103      	b.n	8001418 <HAL_GPIO_EXTI_Callback+0x250>
		}
	} else if ((GPIO_Pin == GPIO_PIN_3)) {
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	2b08      	cmp	r3, #8
 8001214:	f040 80eb 	bne.w	80013ee <HAL_GPIO_EXTI_Callback+0x226>

		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 8001218:	4b81      	ldr	r3, [pc, #516]	; (8001420 <HAL_GPIO_EXTI_Callback+0x258>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b82      	ldr	r3, [pc, #520]	; (8001428 <HAL_GPIO_EXTI_Callback+0x260>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001226:	f240 80f7 	bls.w	8001418 <HAL_GPIO_EXTI_Callback+0x250>
			if (nextTurn < 6)
 800122a:	4b80      	ldr	r3, [pc, #512]	; (800142c <HAL_GPIO_EXTI_Callback+0x264>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b05      	cmp	r3, #5
 8001230:	dc04      	bgt.n	800123c <HAL_GPIO_EXTI_Callback+0x74>
				nextTurn++;
 8001232:	4b7e      	ldr	r3, [pc, #504]	; (800142c <HAL_GPIO_EXTI_Callback+0x264>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	3301      	adds	r3, #1
 8001238:	4a7c      	ldr	r2, [pc, #496]	; (800142c <HAL_GPIO_EXTI_Callback+0x264>)
 800123a:	6013      	str	r3, [r2, #0]
			if ((isCorrect == -1) && nextTurn == 6) {
 800123c:	4b7c      	ldr	r3, [pc, #496]	; (8001430 <HAL_GPIO_EXTI_Callback+0x268>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001244:	d126      	bne.n	8001294 <HAL_GPIO_EXTI_Callback+0xcc>
 8001246:	4b79      	ldr	r3, [pc, #484]	; (800142c <HAL_GPIO_EXTI_Callback+0x264>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b06      	cmp	r3, #6
 800124c:	d122      	bne.n	8001294 <HAL_GPIO_EXTI_Callback+0xcc>
				for (int i = 0; i < 4; i++) {
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	e007      	b.n	8001264 <HAL_GPIO_EXTI_Callback+0x9c>
					carrier[i] = 0;
 8001254:	4a77      	ldr	r2, [pc, #476]	; (8001434 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	2100      	movs	r1, #0
 800125a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int i = 0; i < 4; i++) {
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3301      	adds	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	2b03      	cmp	r3, #3
 8001268:	ddf4      	ble.n	8001254 <HAL_GPIO_EXTI_Callback+0x8c>
				    //password[i] = 0;
				}
				//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2102      	movs	r1, #2
 800126e:	4872      	ldr	r0, [pc, #456]	; (8001438 <HAL_GPIO_EXTI_Callback+0x270>)
 8001270:	f002 fbd8 	bl	8003a24 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2104      	movs	r1, #4
 8001278:	486f      	ldr	r0, [pc, #444]	; (8001438 <HAL_GPIO_EXTI_Callback+0x270>)
 800127a:	f002 fbd3 	bl	8003a24 <HAL_GPIO_WritePin>
				LED = -1;
 800127e:	4b69      	ldr	r3, [pc, #420]	; (8001424 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001280:	f04f 32ff 	mov.w	r2, #4294967295
 8001284:	601a      	str	r2, [r3, #0]
				nextTurn = 0;
 8001286:	4b69      	ldr	r3, [pc, #420]	; (800142c <HAL_GPIO_EXTI_Callback+0x264>)
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
				blink = 1;
 800128c:	4b6b      	ldr	r3, [pc, #428]	; (800143c <HAL_GPIO_EXTI_Callback+0x274>)
 800128e:	2201      	movs	r2, #1
 8001290:	601a      	str	r2, [r3, #0]
				return;
 8001292:	e0c1      	b.n	8001418 <HAL_GPIO_EXTI_Callback+0x250>
			} else if ((isCorrect != 0 && isCorrect != 1)) {
 8001294:	4b66      	ldr	r3, [pc, #408]	; (8001430 <HAL_GPIO_EXTI_Callback+0x268>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80a3 	beq.w	80013e4 <HAL_GPIO_EXTI_Callback+0x21c>
 800129e:	4b64      	ldr	r3, [pc, #400]	; (8001430 <HAL_GPIO_EXTI_Callback+0x268>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	f000 809e 	beq.w	80013e4 <HAL_GPIO_EXTI_Callback+0x21c>

				LED += 1;
 80012a8:	4b5e      	ldr	r3, [pc, #376]	; (8001424 <HAL_GPIO_EXTI_Callback+0x25c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3301      	adds	r3, #1
 80012ae:	4a5d      	ldr	r2, [pc, #372]	; (8001424 <HAL_GPIO_EXTI_Callback+0x25c>)
 80012b0:	6013      	str	r3, [r2, #0]
				if (LED == 4) {
 80012b2:	4b5c      	ldr	r3, [pc, #368]	; (8001424 <HAL_GPIO_EXTI_Callback+0x25c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	f040 8094 	bne.w	80013e4 <HAL_GPIO_EXTI_Callback+0x21c>
					int bool = 1;
 80012bc:	2301      	movs	r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
					for (int i = 0; i < 4; i++) {
 80012c0:	2300      	movs	r3, #0
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	e04c      	b.n	8001360 <HAL_GPIO_EXTI_Callback+0x198>
						if (password[i] != carrier[i]) {
 80012c6:	4a5e      	ldr	r2, [pc, #376]	; (8001440 <HAL_GPIO_EXTI_Callback+0x278>)
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012ce:	4959      	ldr	r1, [pc, #356]	; (8001434 <HAL_GPIO_EXTI_Callback+0x26c>)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d03f      	beq.n	800135a <HAL_GPIO_EXTI_Callback+0x192>
							bool = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
							logFailed[4] = carrier[0] + '0';
 80012de:	4b55      	ldr	r3, [pc, #340]	; (8001434 <HAL_GPIO_EXTI_Callback+0x26c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	3330      	adds	r3, #48	; 0x30
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b56      	ldr	r3, [pc, #344]	; (8001444 <HAL_GPIO_EXTI_Callback+0x27c>)
 80012ea:	711a      	strb	r2, [r3, #4]
							logFailed[5] = carrier[1] + '0';
 80012ec:	4b51      	ldr	r3, [pc, #324]	; (8001434 <HAL_GPIO_EXTI_Callback+0x26c>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	3330      	adds	r3, #48	; 0x30
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b53      	ldr	r3, [pc, #332]	; (8001444 <HAL_GPIO_EXTI_Callback+0x27c>)
 80012f8:	715a      	strb	r2, [r3, #5]
							logFailed[6] = carrier[2] + '0';
 80012fa:	4b4e      	ldr	r3, [pc, #312]	; (8001434 <HAL_GPIO_EXTI_Callback+0x26c>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	3330      	adds	r3, #48	; 0x30
 8001302:	b2da      	uxtb	r2, r3
 8001304:	4b4f      	ldr	r3, [pc, #316]	; (8001444 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001306:	719a      	strb	r2, [r3, #6]
							logFailed[7] = carrier[3] + '0';
 8001308:	4b4a      	ldr	r3, [pc, #296]	; (8001434 <HAL_GPIO_EXTI_Callback+0x26c>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	3330      	adds	r3, #48	; 0x30
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4b4c      	ldr	r3, [pc, #304]	; (8001444 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001314:	71da      	strb	r2, [r3, #7]
							isCorrect = 0;
 8001316:	4b46      	ldr	r3, [pc, #280]	; (8001430 <HAL_GPIO_EXTI_Callback+0x268>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
							if (logStatus)
 800131c:	4b4a      	ldr	r3, [pc, #296]	; (8001448 <HAL_GPIO_EXTI_Callback+0x280>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d004      	beq.n	800132e <HAL_GPIO_EXTI_Callback+0x166>
								HAL_UART_Transmit_IT(&huart1, logFailed, 18);
 8001324:	2212      	movs	r2, #18
 8001326:	4947      	ldr	r1, [pc, #284]	; (8001444 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001328:	4848      	ldr	r0, [pc, #288]	; (800144c <HAL_GPIO_EXTI_Callback+0x284>)
 800132a:	f005 fccd 	bl	8006cc8 <HAL_UART_Transmit_IT>
							prevEnterTime = HAL_GetTick();
 800132e:	f000 fd73 	bl	8001e18 <HAL_GetTick>
 8001332:	4603      	mov	r3, r0
 8001334:	4a46      	ldr	r2, [pc, #280]	; (8001450 <HAL_GPIO_EXTI_Callback+0x288>)
 8001336:	6013      	str	r3, [r2, #0]
							wrongPassCounter++;
 8001338:	4b46      	ldr	r3, [pc, #280]	; (8001454 <HAL_GPIO_EXTI_Callback+0x28c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3301      	adds	r3, #1
 800133e:	4a45      	ldr	r2, [pc, #276]	; (8001454 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001340:	6013      	str	r3, [r2, #0]
							buzzerEnterTime = HAL_GetTick();
 8001342:	f000 fd69 	bl	8001e18 <HAL_GetTick>
 8001346:	4603      	mov	r3, r0
 8001348:	4a43      	ldr	r2, [pc, #268]	; (8001458 <HAL_GPIO_EXTI_Callback+0x290>)
 800134a:	6013      	str	r3, [r2, #0]
							if (alertStatus)
 800134c:	4b43      	ldr	r3, [pc, #268]	; (800145c <HAL_GPIO_EXTI_Callback+0x294>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d060      	beq.n	8001416 <HAL_GPIO_EXTI_Callback+0x24e>
								PWM_Start();
 8001354:	f000 faf0 	bl	8001938 <PWM_Start>
							return;
 8001358:	e05d      	b.n	8001416 <HAL_GPIO_EXTI_Callback+0x24e>
					for (int i = 0; i < 4; i++) {
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	3301      	adds	r3, #1
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	2b03      	cmp	r3, #3
 8001364:	ddaf      	ble.n	80012c6 <HAL_GPIO_EXTI_Callback+0xfe>
						}
					}
					if (bool) {
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d03b      	beq.n	80013e4 <HAL_GPIO_EXTI_Callback+0x21c>
						logCorrect[4] = carrier[0] + '0';
 800136c:	4b31      	ldr	r3, [pc, #196]	; (8001434 <HAL_GPIO_EXTI_Callback+0x26c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	3330      	adds	r3, #48	; 0x30
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <HAL_GPIO_EXTI_Callback+0x298>)
 8001378:	711a      	strb	r2, [r3, #4]
						logCorrect[5] = carrier[1] + '0';
 800137a:	4b2e      	ldr	r3, [pc, #184]	; (8001434 <HAL_GPIO_EXTI_Callback+0x26c>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	3330      	adds	r3, #48	; 0x30
 8001382:	b2da      	uxtb	r2, r3
 8001384:	4b36      	ldr	r3, [pc, #216]	; (8001460 <HAL_GPIO_EXTI_Callback+0x298>)
 8001386:	715a      	strb	r2, [r3, #5]
						logCorrect[6] = carrier[2] + '0';
 8001388:	4b2a      	ldr	r3, [pc, #168]	; (8001434 <HAL_GPIO_EXTI_Callback+0x26c>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	3330      	adds	r3, #48	; 0x30
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b33      	ldr	r3, [pc, #204]	; (8001460 <HAL_GPIO_EXTI_Callback+0x298>)
 8001394:	719a      	strb	r2, [r3, #6]
						logCorrect[7] = carrier[3] + '0';
 8001396:	4b27      	ldr	r3, [pc, #156]	; (8001434 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	3330      	adds	r3, #48	; 0x30
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	4b2f      	ldr	r3, [pc, #188]	; (8001460 <HAL_GPIO_EXTI_Callback+0x298>)
 80013a2:	71da      	strb	r2, [r3, #7]
						isCorrect = 1;
 80013a4:	4b22      	ldr	r3, [pc, #136]	; (8001430 <HAL_GPIO_EXTI_Callback+0x268>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]
						if (logStatus)
 80013aa:	4b27      	ldr	r3, [pc, #156]	; (8001448 <HAL_GPIO_EXTI_Callback+0x280>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d004      	beq.n	80013bc <HAL_GPIO_EXTI_Callback+0x1f4>
							HAL_UART_Transmit_IT(&huart1, logCorrect, 19);
 80013b2:	2213      	movs	r2, #19
 80013b4:	492a      	ldr	r1, [pc, #168]	; (8001460 <HAL_GPIO_EXTI_Callback+0x298>)
 80013b6:	4825      	ldr	r0, [pc, #148]	; (800144c <HAL_GPIO_EXTI_Callback+0x284>)
 80013b8:	f005 fc86 	bl	8006cc8 <HAL_UART_Transmit_IT>
						prevEnterTime = HAL_GetTick();
 80013bc:	f000 fd2c 	bl	8001e18 <HAL_GetTick>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4a23      	ldr	r2, [pc, #140]	; (8001450 <HAL_GPIO_EXTI_Callback+0x288>)
 80013c4:	6013      	str	r3, [r2, #0]
						buzzerEnterTime = HAL_GetTick();
 80013c6:	f000 fd27 	bl	8001e18 <HAL_GetTick>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4a22      	ldr	r2, [pc, #136]	; (8001458 <HAL_GPIO_EXTI_Callback+0x290>)
 80013ce:	6013      	str	r3, [r2, #0]
						if (alertStatus)
 80013d0:	4b22      	ldr	r3, [pc, #136]	; (800145c <HAL_GPIO_EXTI_Callback+0x294>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <HAL_GPIO_EXTI_Callback+0x214>
							PWM_Start();
 80013d8:	f000 faae 	bl	8001938 <PWM_Start>
						wrongPassCounter = 0;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <HAL_GPIO_EXTI_Callback+0x28c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
						return;
 80013e2:	e019      	b.n	8001418 <HAL_GPIO_EXTI_Callback+0x250>
					}
				}
			}
			previousMillis = currentMillis;
 80013e4:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <HAL_GPIO_EXTI_Callback+0x258>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0f      	ldr	r2, [pc, #60]	; (8001428 <HAL_GPIO_EXTI_Callback+0x260>)
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	e014      	b.n	8001418 <HAL_GPIO_EXTI_Callback+0x250>
		}

	} else if (GPIO_Pin == GPIO_PIN_0 && isCorrect == 0) {
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d111      	bne.n	8001418 <HAL_GPIO_EXTI_Callback+0x250>
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <HAL_GPIO_EXTI_Callback+0x268>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d10d      	bne.n	8001418 <HAL_GPIO_EXTI_Callback+0x250>
		blink = 0;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <HAL_GPIO_EXTI_Callback+0x274>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
		isCorrect = -1;
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_GPIO_EXTI_Callback+0x268>)
 8001404:	f04f 32ff 	mov.w	r2, #4294967295
 8001408:	601a      	str	r2, [r3, #0]
		prevEnterTime = HAL_GetTick();
 800140a:	f000 fd05 	bl	8001e18 <HAL_GetTick>
 800140e:	4603      	mov	r3, r0
 8001410:	4a0f      	ldr	r2, [pc, #60]	; (8001450 <HAL_GPIO_EXTI_Callback+0x288>)
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	e000      	b.n	8001418 <HAL_GPIO_EXTI_Callback+0x250>
							return;
 8001416:	bf00      	nop
//		PWM_Stop();
	}
}
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000658 	.word	0x20000658
 8001424:	20000674 	.word	0x20000674
 8001428:	20000654 	.word	0x20000654
 800142c:	20000664 	.word	0x20000664
 8001430:	20000040 	.word	0x20000040
 8001434:	20000640 	.word	0x20000640
 8001438:	48000800 	.word	0x48000800
 800143c:	20000044 	.word	0x20000044
 8001440:	20000000 	.word	0x20000000
 8001444:	20000024 	.word	0x20000024
 8001448:	20000038 	.word	0x20000038
 800144c:	200002bc 	.word	0x200002bc
 8001450:	2000066c 	.word	0x2000066c
 8001454:	20000650 	.word	0x20000650
 8001458:	20000670 	.word	0x20000670
 800145c:	2000003c 	.word	0x2000003c
 8001460:	20000010 	.word	0x20000010

08001464 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a31      	ldr	r2, [pc, #196]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d15c      	bne.n	8001530 <HAL_TIM_PeriodElapsedCallback+0xcc>
		if (index == LED && HAL_GetTick() - prevTime < 400) {
 8001476:	4b31      	ldr	r3, [pc, #196]	; (800153c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	4b31      	ldr	r3, [pc, #196]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	429a      	cmp	r2, r3
 8001480:	d119      	bne.n	80014b6 <HAL_TIM_PeriodElapsedCallback+0x52>
 8001482:	f000 fcc9 	bl	8001e18 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	4b2e      	ldr	r3, [pc, #184]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001492:	d210      	bcs.n	80014b6 <HAL_TIM_PeriodElapsedCallback+0x52>
			display_number(index, carrier[index]);
 8001494:	4b29      	ldr	r3, [pc, #164]	; (800153c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b28      	ldr	r3, [pc, #160]	; (800153c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	492a      	ldr	r1, [pc, #168]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800149e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014a2:	4619      	mov	r1, r3
 80014a4:	4610      	mov	r0, r2
 80014a6:	f7ff f981 	bl	80007ac <display_number>
			coolDownTimer = HAL_GetTick();
 80014aa:	f000 fcb5 	bl	8001e18 <HAL_GetTick>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4a26      	ldr	r2, [pc, #152]	; (800154c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	e02d      	b.n	8001512 <HAL_TIM_PeriodElapsedCallback+0xae>
		} else if (index == LED && HAL_GetTick() - prevTime > 900) {
 80014b6:	4b21      	ldr	r3, [pc, #132]	; (800153c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4b21      	ldr	r3, [pc, #132]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d116      	bne.n	80014f0 <HAL_TIM_PeriodElapsedCallback+0x8c>
 80014c2:	f000 fca9 	bl	8001e18 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80014d2:	d90d      	bls.n	80014f0 <HAL_TIM_PeriodElapsedCallback+0x8c>
			//coolDown
			if (HAL_GetTick() - coolDownTimer > 100) {
 80014d4:	f000 fca0 	bl	8001e18 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b64      	cmp	r3, #100	; 0x64
 80014e2:	d916      	bls.n	8001512 <HAL_TIM_PeriodElapsedCallback+0xae>
				prevTime = HAL_GetTick();
 80014e4:	f000 fc98 	bl	8001e18 <HAL_GetTick>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80014ec:	6013      	str	r3, [r2, #0]
			if (HAL_GetTick() - coolDownTimer > 100) {
 80014ee:	e010      	b.n	8001512 <HAL_TIM_PeriodElapsedCallback+0xae>
			}
		} else if (index != LED) {
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d00a      	beq.n	8001512 <HAL_TIM_PeriodElapsedCallback+0xae>
			display_number(index, carrier[index]);
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4910      	ldr	r1, [pc, #64]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001506:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800150a:	4619      	mov	r1, r3
 800150c:	4610      	mov	r0, r2
 800150e:	f7ff f94d 	bl	80007ac <display_number>
		}
		if (index == 4) {
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b04      	cmp	r3, #4
 8001518:	d105      	bne.n	8001526 <HAL_TIM_PeriodElapsedCallback+0xc2>
			index = 0;
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
			init_display();
 8001520:	f7ff f998 	bl	8000854 <init_display>
		} else {
			++index;
		}
	}
}
 8001524:	e004      	b.n	8001530 <HAL_TIM_PeriodElapsedCallback+0xcc>
			++index;
 8001526:	4b05      	ldr	r3, [pc, #20]	; (800153c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	3301      	adds	r3, #1
 800152c:	4a03      	ldr	r2, [pc, #12]	; (800153c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800152e:	6013      	str	r3, [r2, #0]
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40012c00 	.word	0x40012c00
 800153c:	20000668 	.word	0x20000668
 8001540:	20000674 	.word	0x20000674
 8001544:	2000065c 	.word	0x2000065c
 8001548:	20000640 	.word	0x20000640
 800154c:	20000660 	.word	0x20000660

08001550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001554:	b672      	cpsid	i
}
 8001556:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001558:	e7fe      	b.n	8001558 <Error_Handler+0x8>
	...

0800155c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001562:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <HAL_MspInit+0x44>)
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	4a0e      	ldr	r2, [pc, #56]	; (80015a0 <HAL_MspInit+0x44>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6193      	str	r3, [r2, #24]
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <HAL_MspInit+0x44>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_MspInit+0x44>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	4a08      	ldr	r2, [pc, #32]	; (80015a0 <HAL_MspInit+0x44>)
 8001580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001584:	61d3      	str	r3, [r2, #28]
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_MspInit+0x44>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001592:	2007      	movs	r0, #7
 8001594:	f002 f814 	bl	80035c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40021000 	.word	0x40021000

080015a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	; 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015c4:	d12b      	bne.n	800161e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015c6:	4b18      	ldr	r3, [pc, #96]	; (8001628 <HAL_ADC_MspInit+0x84>)
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	4a17      	ldr	r2, [pc, #92]	; (8001628 <HAL_ADC_MspInit+0x84>)
 80015cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d0:	6153      	str	r3, [r2, #20]
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_ADC_MspInit+0x84>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015de:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_ADC_MspInit+0x84>)
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	4a11      	ldr	r2, [pc, #68]	; (8001628 <HAL_ADC_MspInit+0x84>)
 80015e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015e8:	6153      	str	r3, [r2, #20]
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <HAL_ADC_MspInit+0x84>)
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015f6:	2310      	movs	r3, #16
 80015f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015fa:	2303      	movs	r3, #3
 80015fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	4808      	ldr	r0, [pc, #32]	; (800162c <HAL_ADC_MspInit+0x88>)
 800160a:	f002 f891 	bl	8003730 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	2012      	movs	r0, #18
 8001614:	f001 ffdf 	bl	80035d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001618:	2012      	movs	r0, #18
 800161a:	f001 fff8 	bl	800360e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000
 800162c:	48001400 	.word	0x48001400

08001630 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	; 0x28
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a17      	ldr	r2, [pc, #92]	; (80016ac <HAL_I2C_MspInit+0x7c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d127      	bne.n	80016a2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <HAL_I2C_MspInit+0x80>)
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	4a16      	ldr	r2, [pc, #88]	; (80016b0 <HAL_I2C_MspInit+0x80>)
 8001658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800165c:	6153      	str	r3, [r2, #20]
 800165e:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <HAL_I2C_MspInit+0x80>)
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800166a:	23c0      	movs	r3, #192	; 0xc0
 800166c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166e:	2312      	movs	r3, #18
 8001670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001672:	2301      	movs	r3, #1
 8001674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800167a:	2304      	movs	r3, #4
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	480b      	ldr	r0, [pc, #44]	; (80016b4 <HAL_I2C_MspInit+0x84>)
 8001686:	f002 f853 	bl	8003730 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_I2C_MspInit+0x80>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	4a08      	ldr	r2, [pc, #32]	; (80016b0 <HAL_I2C_MspInit+0x80>)
 8001690:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001694:	61d3      	str	r3, [r2, #28]
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_I2C_MspInit+0x80>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016a2:	bf00      	nop
 80016a4:	3728      	adds	r7, #40	; 0x28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40005400 	.word	0x40005400
 80016b0:	40021000 	.word	0x40021000
 80016b4:	48000400 	.word	0x48000400

080016b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	; 0x28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a17      	ldr	r2, [pc, #92]	; (8001734 <HAL_SPI_MspInit+0x7c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d128      	bne.n	800172c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016da:	4b17      	ldr	r3, [pc, #92]	; (8001738 <HAL_SPI_MspInit+0x80>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	4a16      	ldr	r2, [pc, #88]	; (8001738 <HAL_SPI_MspInit+0x80>)
 80016e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016e4:	6193      	str	r3, [r2, #24]
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <HAL_SPI_MspInit+0x80>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_SPI_MspInit+0x80>)
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	4a10      	ldr	r2, [pc, #64]	; (8001738 <HAL_SPI_MspInit+0x80>)
 80016f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fc:	6153      	str	r3, [r2, #20]
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <HAL_SPI_MspInit+0x80>)
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800170a:	23e0      	movs	r3, #224	; 0xe0
 800170c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001716:	2303      	movs	r3, #3
 8001718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800171a:	2305      	movs	r3, #5
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001728:	f002 f802 	bl	8003730 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800172c:	bf00      	nop
 800172e:	3728      	adds	r7, #40	; 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40013000 	.word	0x40013000
 8001738:	40021000 	.word	0x40021000

0800173c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a16      	ldr	r2, [pc, #88]	; (80017a4 <HAL_TIM_Base_MspInit+0x68>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d114      	bne.n	8001778 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <HAL_TIM_Base_MspInit+0x6c>)
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	4a15      	ldr	r2, [pc, #84]	; (80017a8 <HAL_TIM_Base_MspInit+0x6c>)
 8001754:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001758:	6193      	str	r3, [r2, #24]
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <HAL_TIM_Base_MspInit+0x6c>)
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	2019      	movs	r0, #25
 800176c:	f001 ff33 	bl	80035d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001770:	2019      	movs	r0, #25
 8001772:	f001 ff4c 	bl	800360e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001776:	e010      	b.n	800179a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001780:	d10b      	bne.n	800179a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_TIM_Base_MspInit+0x6c>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	4a08      	ldr	r2, [pc, #32]	; (80017a8 <HAL_TIM_Base_MspInit+0x6c>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	61d3      	str	r3, [r2, #28]
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_TIM_Base_MspInit+0x6c>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40012c00 	.word	0x40012c00
 80017a8:	40021000 	.word	0x40021000

080017ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017cc:	d11d      	bne.n	800180a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <HAL_TIM_MspPostInit+0x68>)
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	4a10      	ldr	r2, [pc, #64]	; (8001814 <HAL_TIM_MspPostInit+0x68>)
 80017d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d8:	6153      	str	r3, [r2, #20]
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <HAL_TIM_MspPostInit+0x68>)
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017f8:	2301      	movs	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	f107 030c 	add.w	r3, r7, #12
 8001800:	4619      	mov	r1, r3
 8001802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001806:	f001 ff93 	bl	8003730 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800180a:	bf00      	nop
 800180c:	3720      	adds	r7, #32
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000

08001818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a1b      	ldr	r2, [pc, #108]	; (80018a4 <HAL_UART_MspInit+0x8c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d12f      	bne.n	800189a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800183a:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <HAL_UART_MspInit+0x90>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	4a1a      	ldr	r2, [pc, #104]	; (80018a8 <HAL_UART_MspInit+0x90>)
 8001840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001844:	6193      	str	r3, [r2, #24]
 8001846:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <HAL_UART_MspInit+0x90>)
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <HAL_UART_MspInit+0x90>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	4a14      	ldr	r2, [pc, #80]	; (80018a8 <HAL_UART_MspInit+0x90>)
 8001858:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800185c:	6153      	str	r3, [r2, #20]
 800185e:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_UART_MspInit+0x90>)
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800186a:	2330      	movs	r3, #48	; 0x30
 800186c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001876:	2303      	movs	r3, #3
 8001878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800187a:	2307      	movs	r3, #7
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	4809      	ldr	r0, [pc, #36]	; (80018ac <HAL_UART_MspInit+0x94>)
 8001886:	f001 ff53 	bl	8003730 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2100      	movs	r1, #0
 800188e:	2025      	movs	r0, #37	; 0x25
 8001890:	f001 fea1 	bl	80035d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001894:	2025      	movs	r0, #37	; 0x25
 8001896:	f001 feba 	bl	800360e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800189a:	bf00      	nop
 800189c:	3728      	adds	r7, #40	; 0x28
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40013800 	.word	0x40013800
 80018a8:	40021000 	.word	0x40021000
 80018ac:	48000800 	.word	0x48000800

080018b0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	; 0x28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a18      	ldr	r2, [pc, #96]	; (8001930 <HAL_PCD_MspInit+0x80>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d129      	bne.n	8001926 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	4b18      	ldr	r3, [pc, #96]	; (8001934 <HAL_PCD_MspInit+0x84>)
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	4a17      	ldr	r2, [pc, #92]	; (8001934 <HAL_PCD_MspInit+0x84>)
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018dc:	6153      	str	r3, [r2, #20]
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <HAL_PCD_MspInit+0x84>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80018ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f8:	2303      	movs	r3, #3
 80018fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80018fc:	230e      	movs	r3, #14
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4619      	mov	r1, r3
 8001906:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800190a:	f001 ff11 	bl	8003730 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_PCD_MspInit+0x84>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	4a08      	ldr	r2, [pc, #32]	; (8001934 <HAL_PCD_MspInit+0x84>)
 8001914:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001918:	61d3      	str	r3, [r2, #28]
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_PCD_MspInit+0x84>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001926:	bf00      	nop
 8001928:	3728      	adds	r7, #40	; 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40005c00 	.word	0x40005c00
 8001934:	40021000 	.word	0x40021000

08001938 <PWM_Start>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PWM_Start() {
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 800193c:	4b04      	ldr	r3, [pc, #16]	; (8001950 <PWM_Start+0x18>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a04      	ldr	r2, [pc, #16]	; (8001954 <PWM_Start+0x1c>)
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	4611      	mov	r1, r2
 8001946:	4618      	mov	r0, r3
 8001948:	f004 f886 	bl	8005a58 <HAL_TIM_PWM_Start>
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000088 	.word	0x20000088
 8001954:	20000730 	.word	0x20000730

08001958 <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	460a      	mov	r2, r1
 8001962:	80fb      	strh	r3, [r7, #6]
 8001964:	4613      	mov	r3, r2
 8001966:	80bb      	strh	r3, [r7, #4]
	if (pwm_freq == 0 || pwm_freq > 20000) {
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d004      	beq.n	8001978 <PWM_Change_Tone+0x20>
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001974:	4293      	cmp	r3, r2
 8001976:	d937      	bls.n	80019e8 <PWM_Change_Tone+0x90>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 8001978:	4b4e      	ldr	r3, [pc, #312]	; (8001ab4 <PWM_Change_Tone+0x15c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d105      	bne.n	800198c <PWM_Change_Tone+0x34>
 8001980:	4b4d      	ldr	r3, [pc, #308]	; (8001ab8 <PWM_Change_Tone+0x160>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2200      	movs	r2, #0
 8001988:	635a      	str	r2, [r3, #52]	; 0x34
 800198a:	e08e      	b.n	8001aaa <PWM_Change_Tone+0x152>
 800198c:	4b49      	ldr	r3, [pc, #292]	; (8001ab4 <PWM_Change_Tone+0x15c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b04      	cmp	r3, #4
 8001992:	d105      	bne.n	80019a0 <PWM_Change_Tone+0x48>
 8001994:	4b48      	ldr	r3, [pc, #288]	; (8001ab8 <PWM_Change_Tone+0x160>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	2300      	movs	r3, #0
 800199c:	6393      	str	r3, [r2, #56]	; 0x38
 800199e:	e084      	b.n	8001aaa <PWM_Change_Tone+0x152>
 80019a0:	4b44      	ldr	r3, [pc, #272]	; (8001ab4 <PWM_Change_Tone+0x15c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d105      	bne.n	80019b4 <PWM_Change_Tone+0x5c>
 80019a8:	4b43      	ldr	r3, [pc, #268]	; (8001ab8 <PWM_Change_Tone+0x160>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	2300      	movs	r3, #0
 80019b0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80019b2:	e07a      	b.n	8001aaa <PWM_Change_Tone+0x152>
 80019b4:	4b3f      	ldr	r3, [pc, #252]	; (8001ab4 <PWM_Change_Tone+0x15c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b0c      	cmp	r3, #12
 80019ba:	d105      	bne.n	80019c8 <PWM_Change_Tone+0x70>
 80019bc:	4b3e      	ldr	r3, [pc, #248]	; (8001ab8 <PWM_Change_Tone+0x160>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	2300      	movs	r3, #0
 80019c4:	6413      	str	r3, [r2, #64]	; 0x40
 80019c6:	e070      	b.n	8001aaa <PWM_Change_Tone+0x152>
 80019c8:	4b3a      	ldr	r3, [pc, #232]	; (8001ab4 <PWM_Change_Tone+0x15c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b10      	cmp	r3, #16
 80019ce:	d105      	bne.n	80019dc <PWM_Change_Tone+0x84>
 80019d0:	4b39      	ldr	r3, [pc, #228]	; (8001ab8 <PWM_Change_Tone+0x160>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	2300      	movs	r3, #0
 80019d8:	6593      	str	r3, [r2, #88]	; 0x58
 80019da:	e066      	b.n	8001aaa <PWM_Change_Tone+0x152>
 80019dc:	4b36      	ldr	r3, [pc, #216]	; (8001ab8 <PWM_Change_Tone+0x160>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	2300      	movs	r3, #0
 80019e4:	65d3      	str	r3, [r2, #92]	; 0x5c
 80019e6:	e060      	b.n	8001aaa <PWM_Change_Tone+0x152>
	} else {
		const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 80019e8:	f003 fbfe 	bl	80051e8 <HAL_RCC_GetSysClockFreq>
 80019ec:	61f8      	str	r0, [r7, #28]
		const uint16_t prescaler = 1;
 80019ee:	2301      	movs	r3, #1
 80019f0:	837b      	strh	r3, [r7, #26]
		const uint32_t timer_clock = internal_clock_freq / prescaler;
 80019f2:	8b7b      	ldrh	r3, [r7, #26]
 80019f4:	69fa      	ldr	r2, [r7, #28]
 80019f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fa:	617b      	str	r3, [r7, #20]
		const uint32_t period_cycles = timer_clock / pwm_freq;
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a04:	613b      	str	r3, [r7, #16]
		const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 8001a06:	88bb      	ldrh	r3, [r7, #4]
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	fb02 f303 	mul.w	r3, r2, r3
 8001a0e:	4a2b      	ldr	r2, [pc, #172]	; (8001abc <PWM_Change_Tone+0x164>)
 8001a10:	fba2 2303 	umull	r2, r3, r2, r3
 8001a14:	09db      	lsrs	r3, r3, #7
 8001a16:	60fb      	str	r3, [r7, #12]

		pwm_timer->Instance->PSC = prescaler - 1;
 8001a18:	8b7b      	ldrh	r3, [r7, #26]
 8001a1a:	1e5a      	subs	r2, r3, #1
 8001a1c:	4b26      	ldr	r3, [pc, #152]	; (8001ab8 <PWM_Change_Tone+0x160>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28
		pwm_timer->Instance->ARR = period_cycles - 1;
 8001a24:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <PWM_Change_Tone+0x160>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	3a01      	subs	r2, #1
 8001a2e:	62da      	str	r2, [r3, #44]	; 0x2c
		pwm_timer->Instance->EGR = TIM_EGR_UG;
 8001a30:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <PWM_Change_Tone+0x160>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2201      	movs	r2, #1
 8001a38:	615a      	str	r2, [r3, #20]
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001a3a:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <PWM_Change_Tone+0x15c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d105      	bne.n	8001a4e <PWM_Change_Tone+0xf6>
 8001a42:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <PWM_Change_Tone+0x160>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8001a4c:	e02d      	b.n	8001aaa <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001a4e:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <PWM_Change_Tone+0x15c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d105      	bne.n	8001a62 <PWM_Change_Tone+0x10a>
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <PWM_Change_Tone+0x160>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001a60:	e023      	b.n	8001aaa <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <PWM_Change_Tone+0x15c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d105      	bne.n	8001a76 <PWM_Change_Tone+0x11e>
 8001a6a:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <PWM_Change_Tone+0x160>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001a74:	e019      	b.n	8001aaa <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001a76:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <PWM_Change_Tone+0x15c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b0c      	cmp	r3, #12
 8001a7c:	d105      	bne.n	8001a8a <PWM_Change_Tone+0x132>
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <PWM_Change_Tone+0x160>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001a88:	e00f      	b.n	8001aaa <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <PWM_Change_Tone+0x15c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b10      	cmp	r3, #16
 8001a90:	d105      	bne.n	8001a9e <PWM_Change_Tone+0x146>
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <PWM_Change_Tone+0x160>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001a9c:	e005      	b.n	8001aaa <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <PWM_Change_Tone+0x160>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001aa8:	e7ff      	b.n	8001aaa <PWM_Change_Tone+0x152>
 8001aaa:	bf00      	nop
 8001aac:	3720      	adds	r7, #32
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000730 	.word	0x20000730
 8001ab8:	20000088 	.word	0x20000088
 8001abc:	10624dd3 	.word	0x10624dd3

08001ac0 <Change_Melody>:

void Change_Melody(const struct Tone *melody, uint16_t tone_count) {
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	807b      	strh	r3, [r7, #2]
	melody_ptr = melody;
 8001acc:	4a07      	ldr	r2, [pc, #28]	; (8001aec <Change_Melody+0x2c>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6013      	str	r3, [r2, #0]
	melody_tone_count = tone_count;
 8001ad2:	4a07      	ldr	r2, [pc, #28]	; (8001af0 <Change_Melody+0x30>)
 8001ad4:	887b      	ldrh	r3, [r7, #2]
 8001ad6:	8013      	strh	r3, [r2, #0]
	current_tone_number = 0;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <Change_Melody+0x34>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	801a      	strh	r2, [r3, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000734 	.word	0x20000734
 8001af0:	20000738 	.word	0x20000738
 8001af4:	2000073a 	.word	0x2000073a

08001af8 <Update_Melody>:

void Update_Melody() {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
	if (programState != Paused && programState != IDLE) {
 8001afe:	4b1f      	ldr	r3, [pc, #124]	; (8001b7c <Update_Melody+0x84>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d035      	beq.n	8001b72 <Update_Melody+0x7a>
 8001b06:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <Update_Melody+0x84>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d031      	beq.n	8001b72 <Update_Melody+0x7a>
		if ((HAL_GetTick() > current_tone_end)
 8001b0e:	f000 f983 	bl	8001e18 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <Update_Melody+0x88>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d92a      	bls.n	8001b72 <Update_Melody+0x7a>
				&& (current_tone_number < melody_tone_count)) {
 8001b1c:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <Update_Melody+0x8c>)
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <Update_Melody+0x90>)
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d222      	bcs.n	8001b72 <Update_Melody+0x7a>
			const struct Tone active_tone = *(melody_ptr + current_tone_number);
 8001b2c:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <Update_Melody+0x94>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <Update_Melody+0x8c>)
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	441a      	add	r2, r3
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b40:	e883 0003 	stmia.w	r3, {r0, r1}
			PWM_Change_Tone(active_tone.frequency, volume);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	4a11      	ldr	r2, [pc, #68]	; (8001b90 <Update_Melody+0x98>)
 8001b4a:	8812      	ldrh	r2, [r2, #0]
 8001b4c:	b292      	uxth	r2, r2
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff01 	bl	8001958 <PWM_Change_Tone>
			current_tone_end = HAL_GetTick() + active_tone.duration;
 8001b56:	f000 f95f 	bl	8001e18 <HAL_GetTick>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a07      	ldr	r2, [pc, #28]	; (8001b80 <Update_Melody+0x88>)
 8001b62:	6013      	str	r3, [r2, #0]
			current_tone_number++;
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <Update_Melody+0x8c>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <Update_Melody+0x8c>)
 8001b70:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000048 	.word	0x20000048
 8001b80:	2000073c 	.word	0x2000073c
 8001b84:	2000073a 	.word	0x2000073a
 8001b88:	20000738 	.word	0x20000738
 8001b8c:	20000734 	.word	0x20000734
 8001b90:	2000008c 	.word	0x2000008c

08001b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001b98:	e7fe      	b.n	8001b98 <NMI_Handler+0x4>

08001b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b9e:	e7fe      	b.n	8001b9e <HardFault_Handler+0x4>

08001ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <MemManage_Handler+0x4>

08001ba6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001baa:	e7fe      	b.n	8001baa <BusFault_Handler+0x4>

08001bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <UsageFault_Handler+0x4>

08001bb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be0:	f000 f906 	bl	8001df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	Update_Melody();
 8001be4:	f7ff ff88 	bl	8001af8 <Update_Melody>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}

08001bec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f001 ff2f 	bl	8003a54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	if (HAL_GetTick() > last_button_press + 200) {
 8001bf6:	f000 f90f 	bl	8001e18 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <EXTI0_IRQHandler+0x28>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	33c8      	adds	r3, #200	; 0xc8
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d904      	bls.n	8001c10 <EXTI0_IRQHandler+0x24>
		last_button_press = HAL_GetTick();
 8001c06:	f000 f907 	bl	8001e18 <HAL_GetTick>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4a01      	ldr	r2, [pc, #4]	; (8001c14 <EXTI0_IRQHandler+0x28>)
 8001c0e:	6013      	str	r3, [r2, #0]

	}
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000740 	.word	0x20000740

08001c18 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001c1c:	2002      	movs	r0, #2
 8001c1e:	f001 ff19 	bl	8003a54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001c2a:	2004      	movs	r0, #4
 8001c2c:	f001 ff12 	bl	8003a54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8001c30:	bf00      	nop
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001c38:	2008      	movs	r0, #8
 8001c3a:	f001 ff0b 	bl	8003a54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c48:	4802      	ldr	r0, [pc, #8]	; (8001c54 <ADC1_2_IRQHandler+0x10>)
 8001c4a:	f000 fc33 	bl	80024b4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	2000011c 	.word	0x2000011c

08001c58 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001c5e:	f003 fffb 	bl	8005c58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000224 	.word	0x20000224

08001c6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <USART1_IRQHandler+0x10>)
 8001c72:	f005 f8cb 	bl	8006e0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200002bc 	.word	0x200002bc

08001c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c88:	4a14      	ldr	r2, [pc, #80]	; (8001cdc <_sbrk+0x5c>)
 8001c8a:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <_sbrk+0x60>)
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c94:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <_sbrk+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d102      	bne.n	8001ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <_sbrk+0x64>)
 8001c9e:	4a12      	ldr	r2, [pc, #72]	; (8001ce8 <_sbrk+0x68>)
 8001ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <_sbrk+0x64>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d207      	bcs.n	8001cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb0:	f006 fb3a 	bl	8008328 <__errno>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbe:	e009      	b.n	8001cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <_sbrk+0x64>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cc6:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <_sbrk+0x64>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <_sbrk+0x64>)
 8001cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	2000a000 	.word	0x2000a000
 8001ce0:	00000400 	.word	0x00000400
 8001ce4:	20000744 	.word	0x20000744
 8001ce8:	20000760 	.word	0x20000760

08001cec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <SystemInit+0x20>)
 8001cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf6:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <SystemInit+0x20>)
 8001cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d48 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d14:	f7ff ffea 	bl	8001cec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d18:	480c      	ldr	r0, [pc, #48]	; (8001d4c <LoopForever+0x6>)
  ldr r1, =_edata
 8001d1a:	490d      	ldr	r1, [pc, #52]	; (8001d50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d1c:	4a0d      	ldr	r2, [pc, #52]	; (8001d54 <LoopForever+0xe>)
  movs r3, #0
 8001d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d20:	e002      	b.n	8001d28 <LoopCopyDataInit>

08001d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d26:	3304      	adds	r3, #4

08001d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d2c:	d3f9      	bcc.n	8001d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d30:	4c0a      	ldr	r4, [pc, #40]	; (8001d5c <LoopForever+0x16>)
  movs r3, #0
 8001d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d34:	e001      	b.n	8001d3a <LoopFillZerobss>

08001d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d38:	3204      	adds	r2, #4

08001d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d3c:	d3fb      	bcc.n	8001d36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d3e:	f006 faf9 	bl	8008334 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d42:	f7fe fe3b 	bl	80009bc <main>

08001d46 <LoopForever>:

LoopForever:
    b LoopForever
 8001d46:	e7fe      	b.n	8001d46 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d48:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d50:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001d54:	0800b410 	.word	0x0800b410
  ldr r2, =_sbss
 8001d58:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001d5c:	2000075c 	.word	0x2000075c

08001d60 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d60:	e7fe      	b.n	8001d60 <ADC3_IRQHandler>
	...

08001d64 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d68:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <HAL_Init+0x28>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a07      	ldr	r2, [pc, #28]	; (8001d8c <HAL_Init+0x28>)
 8001d6e:	f043 0310 	orr.w	r3, r3, #16
 8001d72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d74:	2003      	movs	r0, #3
 8001d76:	f001 fc23 	bl	80035c0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f000 f808 	bl	8001d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d80:	f7ff fbec 	bl	800155c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40022000 	.word	0x40022000

08001d90 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_InitTick+0x54>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_InitTick+0x58>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	4619      	mov	r1, r3
 8001da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f001 fc3b 	bl	800362a <HAL_SYSTICK_Config>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e00e      	b.n	8001ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b0f      	cmp	r3, #15
 8001dc2:	d80a      	bhi.n	8001dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dcc:	f001 fc03 	bl	80035d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd0:	4a06      	ldr	r2, [pc, #24]	; (8001dec <HAL_InitTick+0x5c>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	e000      	b.n	8001ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000090 	.word	0x20000090
 8001de8:	20000098 	.word	0x20000098
 8001dec:	20000094 	.word	0x20000094

08001df0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_IncTick+0x20>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_IncTick+0x24>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	4a04      	ldr	r2, [pc, #16]	; (8001e14 <HAL_IncTick+0x24>)
 8001e02:	6013      	str	r3, [r2, #0]
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	20000098 	.word	0x20000098
 8001e14:	20000748 	.word	0x20000748

08001e18 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001e1c:	4b03      	ldr	r3, [pc, #12]	; (8001e2c <HAL_GetTick+0x14>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000748 	.word	0x20000748

08001e30 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b09a      	sub	sp, #104	; 0x68
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e1c9      	b.n	800220c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f003 0310 	and.w	r3, r3, #16
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d176      	bne.n	8001f78 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d152      	bne.n	8001f38 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff fb79 	bl	80015a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d13b      	bne.n	8001f38 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f001 fa47 	bl	8003354 <ADC_Disable>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d12f      	bne.n	8001f38 <HAL_ADC_Init+0xe0>
 8001ed8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d12b      	bne.n	8001f38 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ee8:	f023 0302 	bic.w	r3, r3, #2
 8001eec:	f043 0202 	orr.w	r2, r3, #2
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f02:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f12:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f14:	4b86      	ldr	r3, [pc, #536]	; (8002130 <HAL_ADC_Init+0x2d8>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a86      	ldr	r2, [pc, #536]	; (8002134 <HAL_ADC_Init+0x2dc>)
 8001f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1e:	0c9a      	lsrs	r2, r3, #18
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f2a:	e002      	b.n	8001f32 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1f9      	bne.n	8001f2c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d007      	beq.n	8001f56 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f54:	d110      	bne.n	8001f78 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f023 0312 	bic.w	r3, r3, #18
 8001f5e:	f043 0210 	orr.w	r2, r3, #16
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	f043 0201 	orr.w	r2, r3, #1
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	f003 0310 	and.w	r3, r3, #16
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f040 8136 	bne.w	80021f2 <HAL_ADC_Init+0x39a>
 8001f86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f040 8131 	bne.w	80021f2 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f040 8129 	bne.w	80021f2 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001fa8:	f043 0202 	orr.w	r2, r3, #2
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fb8:	d004      	beq.n	8001fc4 <HAL_ADC_Init+0x16c>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a5e      	ldr	r2, [pc, #376]	; (8002138 <HAL_ADC_Init+0x2e0>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d101      	bne.n	8001fc8 <HAL_ADC_Init+0x170>
 8001fc4:	4b5d      	ldr	r3, [pc, #372]	; (800213c <HAL_ADC_Init+0x2e4>)
 8001fc6:	e000      	b.n	8001fca <HAL_ADC_Init+0x172>
 8001fc8:	4b5d      	ldr	r3, [pc, #372]	; (8002140 <HAL_ADC_Init+0x2e8>)
 8001fca:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fd4:	d102      	bne.n	8001fdc <HAL_ADC_Init+0x184>
 8001fd6:	4b58      	ldr	r3, [pc, #352]	; (8002138 <HAL_ADC_Init+0x2e0>)
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	e01a      	b.n	8002012 <HAL_ADC_Init+0x1ba>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a55      	ldr	r2, [pc, #340]	; (8002138 <HAL_ADC_Init+0x2e0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d103      	bne.n	8001fee <HAL_ADC_Init+0x196>
 8001fe6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	e011      	b.n	8002012 <HAL_ADC_Init+0x1ba>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a54      	ldr	r2, [pc, #336]	; (8002144 <HAL_ADC_Init+0x2ec>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d102      	bne.n	8001ffe <HAL_ADC_Init+0x1a6>
 8001ff8:	4b53      	ldr	r3, [pc, #332]	; (8002148 <HAL_ADC_Init+0x2f0>)
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	e009      	b.n	8002012 <HAL_ADC_Init+0x1ba>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a51      	ldr	r2, [pc, #324]	; (8002148 <HAL_ADC_Init+0x2f0>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d102      	bne.n	800200e <HAL_ADC_Init+0x1b6>
 8002008:	4b4e      	ldr	r3, [pc, #312]	; (8002144 <HAL_ADC_Init+0x2ec>)
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	e001      	b.n	8002012 <HAL_ADC_Init+0x1ba>
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d108      	bne.n	8002032 <HAL_ADC_Init+0x1da>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_ADC_Init+0x1da>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <HAL_ADC_Init+0x1dc>
 8002032:	2300      	movs	r3, #0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d11c      	bne.n	8002072 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002038:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800203a:	2b00      	cmp	r3, #0
 800203c:	d010      	beq.n	8002060 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b01      	cmp	r3, #1
 8002048:	d107      	bne.n	800205a <HAL_ADC_Init+0x202>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b01      	cmp	r3, #1
 8002054:	d101      	bne.n	800205a <HAL_ADC_Init+0x202>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_ADC_Init+0x204>
 800205a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800205c:	2b00      	cmp	r3, #0
 800205e:	d108      	bne.n	8002072 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	431a      	orrs	r2, r3
 800206e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002070:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	7e5b      	ldrb	r3, [r3, #25]
 8002076:	035b      	lsls	r3, r3, #13
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800207c:	2a01      	cmp	r2, #1
 800207e:	d002      	beq.n	8002086 <HAL_ADC_Init+0x22e>
 8002080:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002084:	e000      	b.n	8002088 <HAL_ADC_Init+0x230>
 8002086:	2200      	movs	r2, #0
 8002088:	431a      	orrs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	4313      	orrs	r3, r2
 8002096:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002098:	4313      	orrs	r3, r2
 800209a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d11b      	bne.n	80020de <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	7e5b      	ldrb	r3, [r3, #25]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d109      	bne.n	80020c2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	3b01      	subs	r3, #1
 80020b4:	045a      	lsls	r2, r3, #17
 80020b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020be:	663b      	str	r3, [r7, #96]	; 0x60
 80020c0:	e00d      	b.n	80020de <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80020ca:	f043 0220 	orr.w	r2, r3, #32
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f043 0201 	orr.w	r2, r3, #1
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d03a      	beq.n	800215c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a16      	ldr	r2, [pc, #88]	; (8002144 <HAL_ADC_Init+0x2ec>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d004      	beq.n	80020fa <HAL_ADC_Init+0x2a2>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a14      	ldr	r2, [pc, #80]	; (8002148 <HAL_ADC_Init+0x2f0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d128      	bne.n	800214c <HAL_ADC_Init+0x2f4>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fe:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002102:	d012      	beq.n	800212a <HAL_ADC_Init+0x2d2>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800210c:	d00a      	beq.n	8002124 <HAL_ADC_Init+0x2cc>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002112:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002116:	d002      	beq.n	800211e <HAL_ADC_Init+0x2c6>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	e018      	b.n	8002150 <HAL_ADC_Init+0x2f8>
 800211e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002122:	e015      	b.n	8002150 <HAL_ADC_Init+0x2f8>
 8002124:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002128:	e012      	b.n	8002150 <HAL_ADC_Init+0x2f8>
 800212a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800212e:	e00f      	b.n	8002150 <HAL_ADC_Init+0x2f8>
 8002130:	20000090 	.word	0x20000090
 8002134:	431bde83 	.word	0x431bde83
 8002138:	50000100 	.word	0x50000100
 800213c:	50000300 	.word	0x50000300
 8002140:	50000700 	.word	0x50000700
 8002144:	50000400 	.word	0x50000400
 8002148:	50000500 	.word	0x50000500
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002154:	4313      	orrs	r3, r2
 8002156:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002158:	4313      	orrs	r3, r2
 800215a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	2b00      	cmp	r3, #0
 8002168:	d114      	bne.n	8002194 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002178:	f023 0302 	bic.w	r3, r3, #2
 800217c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	7e1b      	ldrb	r3, [r3, #24]
 8002182:	039a      	lsls	r2, r3, #14
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4313      	orrs	r3, r2
 800218e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002190:	4313      	orrs	r3, r2
 8002192:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <HAL_ADC_Init+0x3bc>)
 800219c:	4013      	ands	r3, r2
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80021a4:	430b      	orrs	r3, r1
 80021a6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d10c      	bne.n	80021ca <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f023 010f 	bic.w	r1, r3, #15
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	1e5a      	subs	r2, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30
 80021c8:	e007      	b.n	80021da <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 020f 	bic.w	r2, r2, #15
 80021d8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f023 0303 	bic.w	r3, r3, #3
 80021e8:	f043 0201 	orr.w	r2, r3, #1
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	641a      	str	r2, [r3, #64]	; 0x40
 80021f0:	e00a      	b.n	8002208 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f023 0312 	bic.w	r3, r3, #18
 80021fa:	f043 0210 	orr.w	r2, r3, #16
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002202:	2301      	movs	r3, #1
 8002204:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002208:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800220c:	4618      	mov	r0, r3
 800220e:	3768      	adds	r7, #104	; 0x68
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	fff0c007 	.word	0xfff0c007

08002218 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b00      	cmp	r3, #0
 8002230:	f040 8123 	bne.w	800247a <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_ADC_Start_IT+0x2a>
 800223e:	2302      	movs	r3, #2
 8002240:	e11e      	b.n	8002480 <HAL_ADC_Start_IT+0x268>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f001 f81e 	bl	800328c <ADC_Enable>
 8002250:	4603      	mov	r3, r0
 8002252:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	2b00      	cmp	r3, #0
 8002258:	f040 810a 	bne.w	8002470 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002264:	f023 0301 	bic.w	r3, r3, #1
 8002268:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002278:	d004      	beq.n	8002284 <HAL_ADC_Start_IT+0x6c>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a82      	ldr	r2, [pc, #520]	; (8002488 <HAL_ADC_Start_IT+0x270>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d106      	bne.n	8002292 <HAL_ADC_Start_IT+0x7a>
 8002284:	4b81      	ldr	r3, [pc, #516]	; (800248c <HAL_ADC_Start_IT+0x274>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	2b00      	cmp	r3, #0
 800228e:	d010      	beq.n	80022b2 <HAL_ADC_Start_IT+0x9a>
 8002290:	e005      	b.n	800229e <HAL_ADC_Start_IT+0x86>
 8002292:	4b7f      	ldr	r3, [pc, #508]	; (8002490 <HAL_ADC_Start_IT+0x278>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 031f 	and.w	r3, r3, #31
 800229a:	2b00      	cmp	r3, #0
 800229c:	d009      	beq.n	80022b2 <HAL_ADC_Start_IT+0x9a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022a6:	d004      	beq.n	80022b2 <HAL_ADC_Start_IT+0x9a>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a79      	ldr	r2, [pc, #484]	; (8002494 <HAL_ADC_Start_IT+0x27c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d115      	bne.n	80022de <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d036      	beq.n	800233a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80022dc:	e02d      	b.n	800233a <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022f2:	d004      	beq.n	80022fe <HAL_ADC_Start_IT+0xe6>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a63      	ldr	r2, [pc, #396]	; (8002488 <HAL_ADC_Start_IT+0x270>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d10a      	bne.n	8002314 <HAL_ADC_Start_IT+0xfc>
 80022fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf14      	ite	ne
 800230c:	2301      	movne	r3, #1
 800230e:	2300      	moveq	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	e008      	b.n	8002326 <HAL_ADC_Start_IT+0x10e>
 8002314:	4b5f      	ldr	r3, [pc, #380]	; (8002494 <HAL_ADC_Start_IT+0x27c>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	bf14      	ite	ne
 8002320:	2301      	movne	r3, #1
 8002322:	2300      	moveq	r3, #0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d007      	beq.n	800233a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002332:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002346:	d106      	bne.n	8002356 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234c:	f023 0206 	bic.w	r2, r3, #6
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	645a      	str	r2, [r3, #68]	; 0x44
 8002354:	e002      	b.n	800235c <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	221c      	movs	r2, #28
 800236a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	2b08      	cmp	r3, #8
 8002372:	d110      	bne.n	8002396 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0204 	bic.w	r2, r2, #4
 8002382:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0208 	orr.w	r2, r2, #8
 8002392:	605a      	str	r2, [r3, #4]
          break;
 8002394:	e008      	b.n	80023a8 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 020c 	orr.w	r2, r2, #12
 80023a4:	605a      	str	r2, [r3, #4]
          break;
 80023a6:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d107      	bne.n	80023c0 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0210 	bic.w	r2, r2, #16
 80023be:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023c8:	d004      	beq.n	80023d4 <HAL_ADC_Start_IT+0x1bc>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a2e      	ldr	r2, [pc, #184]	; (8002488 <HAL_ADC_Start_IT+0x270>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d106      	bne.n	80023e2 <HAL_ADC_Start_IT+0x1ca>
 80023d4:	4b2d      	ldr	r3, [pc, #180]	; (800248c <HAL_ADC_Start_IT+0x274>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d03e      	beq.n	800245e <HAL_ADC_Start_IT+0x246>
 80023e0:	e005      	b.n	80023ee <HAL_ADC_Start_IT+0x1d6>
 80023e2:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <HAL_ADC_Start_IT+0x278>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 031f 	and.w	r3, r3, #31
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d037      	beq.n	800245e <HAL_ADC_Start_IT+0x246>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023f6:	d004      	beq.n	8002402 <HAL_ADC_Start_IT+0x1ea>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a22      	ldr	r2, [pc, #136]	; (8002488 <HAL_ADC_Start_IT+0x270>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d106      	bne.n	8002410 <HAL_ADC_Start_IT+0x1f8>
 8002402:	4b22      	ldr	r3, [pc, #136]	; (800248c <HAL_ADC_Start_IT+0x274>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	2b05      	cmp	r3, #5
 800240c:	d027      	beq.n	800245e <HAL_ADC_Start_IT+0x246>
 800240e:	e005      	b.n	800241c <HAL_ADC_Start_IT+0x204>
 8002410:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <HAL_ADC_Start_IT+0x278>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	2b05      	cmp	r3, #5
 800241a:	d020      	beq.n	800245e <HAL_ADC_Start_IT+0x246>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002424:	d004      	beq.n	8002430 <HAL_ADC_Start_IT+0x218>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a17      	ldr	r2, [pc, #92]	; (8002488 <HAL_ADC_Start_IT+0x270>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d106      	bne.n	800243e <HAL_ADC_Start_IT+0x226>
 8002430:	4b16      	ldr	r3, [pc, #88]	; (800248c <HAL_ADC_Start_IT+0x274>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	2b09      	cmp	r3, #9
 800243a:	d010      	beq.n	800245e <HAL_ADC_Start_IT+0x246>
 800243c:	e005      	b.n	800244a <HAL_ADC_Start_IT+0x232>
 800243e:	4b14      	ldr	r3, [pc, #80]	; (8002490 <HAL_ADC_Start_IT+0x278>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 031f 	and.w	r3, r3, #31
 8002446:	2b09      	cmp	r3, #9
 8002448:	d009      	beq.n	800245e <HAL_ADC_Start_IT+0x246>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002452:	d004      	beq.n	800245e <HAL_ADC_Start_IT+0x246>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0e      	ldr	r2, [pc, #56]	; (8002494 <HAL_ADC_Start_IT+0x27c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d10f      	bne.n	800247e <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f042 0204 	orr.w	r2, r2, #4
 800246c:	609a      	str	r2, [r3, #8]
 800246e:	e006      	b.n	800247e <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002478:	e001      	b.n	800247e <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800247a:	2302      	movs	r3, #2
 800247c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800247e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	50000100 	.word	0x50000100
 800248c:	50000300 	.word	0x50000300
 8002490:	50000700 	.word	0x50000700
 8002494:	50000400 	.word	0x50000400

08002498 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80024bc:	2300      	movs	r3, #0
 80024be:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d004      	beq.n	80024ec <HAL_ADC_IRQHandler+0x38>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10b      	bne.n	8002504 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 80bc 	beq.w	8002670 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 80b6 	beq.w	8002670 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	2b00      	cmp	r3, #0
 800250e:	d105      	bne.n	800251c <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002524:	d004      	beq.n	8002530 <HAL_ADC_IRQHandler+0x7c>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a90      	ldr	r2, [pc, #576]	; (800276c <HAL_ADC_IRQHandler+0x2b8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d106      	bne.n	800253e <HAL_ADC_IRQHandler+0x8a>
 8002530:	4b8f      	ldr	r3, [pc, #572]	; (8002770 <HAL_ADC_IRQHandler+0x2bc>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	2b00      	cmp	r3, #0
 800253a:	d03e      	beq.n	80025ba <HAL_ADC_IRQHandler+0x106>
 800253c:	e005      	b.n	800254a <HAL_ADC_IRQHandler+0x96>
 800253e:	4b8d      	ldr	r3, [pc, #564]	; (8002774 <HAL_ADC_IRQHandler+0x2c0>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	2b00      	cmp	r3, #0
 8002548:	d037      	beq.n	80025ba <HAL_ADC_IRQHandler+0x106>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002552:	d004      	beq.n	800255e <HAL_ADC_IRQHandler+0xaa>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a84      	ldr	r2, [pc, #528]	; (800276c <HAL_ADC_IRQHandler+0x2b8>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d106      	bne.n	800256c <HAL_ADC_IRQHandler+0xb8>
 800255e:	4b84      	ldr	r3, [pc, #528]	; (8002770 <HAL_ADC_IRQHandler+0x2bc>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 031f 	and.w	r3, r3, #31
 8002566:	2b05      	cmp	r3, #5
 8002568:	d027      	beq.n	80025ba <HAL_ADC_IRQHandler+0x106>
 800256a:	e005      	b.n	8002578 <HAL_ADC_IRQHandler+0xc4>
 800256c:	4b81      	ldr	r3, [pc, #516]	; (8002774 <HAL_ADC_IRQHandler+0x2c0>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	2b05      	cmp	r3, #5
 8002576:	d020      	beq.n	80025ba <HAL_ADC_IRQHandler+0x106>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002580:	d004      	beq.n	800258c <HAL_ADC_IRQHandler+0xd8>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a79      	ldr	r2, [pc, #484]	; (800276c <HAL_ADC_IRQHandler+0x2b8>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d106      	bne.n	800259a <HAL_ADC_IRQHandler+0xe6>
 800258c:	4b78      	ldr	r3, [pc, #480]	; (8002770 <HAL_ADC_IRQHandler+0x2bc>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 031f 	and.w	r3, r3, #31
 8002594:	2b09      	cmp	r3, #9
 8002596:	d010      	beq.n	80025ba <HAL_ADC_IRQHandler+0x106>
 8002598:	e005      	b.n	80025a6 <HAL_ADC_IRQHandler+0xf2>
 800259a:	4b76      	ldr	r3, [pc, #472]	; (8002774 <HAL_ADC_IRQHandler+0x2c0>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	2b09      	cmp	r3, #9
 80025a4:	d009      	beq.n	80025ba <HAL_ADC_IRQHandler+0x106>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025ae:	d004      	beq.n	80025ba <HAL_ADC_IRQHandler+0x106>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a70      	ldr	r2, [pc, #448]	; (8002778 <HAL_ADC_IRQHandler+0x2c4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d104      	bne.n	80025c4 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	61bb      	str	r3, [r7, #24]
 80025c2:	e00f      	b.n	80025e4 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025cc:	d004      	beq.n	80025d8 <HAL_ADC_IRQHandler+0x124>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a66      	ldr	r2, [pc, #408]	; (800276c <HAL_ADC_IRQHandler+0x2b8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d102      	bne.n	80025de <HAL_ADC_IRQHandler+0x12a>
 80025d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025dc:	e000      	b.n	80025e0 <HAL_ADC_IRQHandler+0x12c>
 80025de:	4b66      	ldr	r3, [pc, #408]	; (8002778 <HAL_ADC_IRQHandler+0x2c4>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d137      	bne.n	8002662 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d132      	bne.n	8002662 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d02d      	beq.n	8002662 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d11a      	bne.n	800264a <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 020c 	bic.w	r2, r2, #12
 8002622:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d112      	bne.n	8002662 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	f043 0201 	orr.w	r2, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	641a      	str	r2, [r3, #64]	; 0x40
 8002648:	e00b      	b.n	8002662 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f043 0210 	orr.w	r2, r3, #16
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f043 0201 	orr.w	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7fe f890 	bl	8000788 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	220c      	movs	r2, #12
 800266e:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	2b00      	cmp	r3, #0
 8002678:	d004      	beq.n	8002684 <HAL_ADC_IRQHandler+0x1d0>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10b      	bne.n	800269c <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 8138 	beq.w	8002900 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 8132 	beq.w	8002900 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026b0:	d004      	beq.n	80026bc <HAL_ADC_IRQHandler+0x208>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a2d      	ldr	r2, [pc, #180]	; (800276c <HAL_ADC_IRQHandler+0x2b8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d106      	bne.n	80026ca <HAL_ADC_IRQHandler+0x216>
 80026bc:	4b2c      	ldr	r3, [pc, #176]	; (8002770 <HAL_ADC_IRQHandler+0x2bc>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 031f 	and.w	r3, r3, #31
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d03e      	beq.n	8002746 <HAL_ADC_IRQHandler+0x292>
 80026c8:	e005      	b.n	80026d6 <HAL_ADC_IRQHandler+0x222>
 80026ca:	4b2a      	ldr	r3, [pc, #168]	; (8002774 <HAL_ADC_IRQHandler+0x2c0>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 031f 	and.w	r3, r3, #31
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d037      	beq.n	8002746 <HAL_ADC_IRQHandler+0x292>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026de:	d004      	beq.n	80026ea <HAL_ADC_IRQHandler+0x236>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a21      	ldr	r2, [pc, #132]	; (800276c <HAL_ADC_IRQHandler+0x2b8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d106      	bne.n	80026f8 <HAL_ADC_IRQHandler+0x244>
 80026ea:	4b21      	ldr	r3, [pc, #132]	; (8002770 <HAL_ADC_IRQHandler+0x2bc>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 031f 	and.w	r3, r3, #31
 80026f2:	2b05      	cmp	r3, #5
 80026f4:	d027      	beq.n	8002746 <HAL_ADC_IRQHandler+0x292>
 80026f6:	e005      	b.n	8002704 <HAL_ADC_IRQHandler+0x250>
 80026f8:	4b1e      	ldr	r3, [pc, #120]	; (8002774 <HAL_ADC_IRQHandler+0x2c0>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	2b05      	cmp	r3, #5
 8002702:	d020      	beq.n	8002746 <HAL_ADC_IRQHandler+0x292>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800270c:	d004      	beq.n	8002718 <HAL_ADC_IRQHandler+0x264>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a16      	ldr	r2, [pc, #88]	; (800276c <HAL_ADC_IRQHandler+0x2b8>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d106      	bne.n	8002726 <HAL_ADC_IRQHandler+0x272>
 8002718:	4b15      	ldr	r3, [pc, #84]	; (8002770 <HAL_ADC_IRQHandler+0x2bc>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 031f 	and.w	r3, r3, #31
 8002720:	2b09      	cmp	r3, #9
 8002722:	d010      	beq.n	8002746 <HAL_ADC_IRQHandler+0x292>
 8002724:	e005      	b.n	8002732 <HAL_ADC_IRQHandler+0x27e>
 8002726:	4b13      	ldr	r3, [pc, #76]	; (8002774 <HAL_ADC_IRQHandler+0x2c0>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 031f 	and.w	r3, r3, #31
 800272e:	2b09      	cmp	r3, #9
 8002730:	d009      	beq.n	8002746 <HAL_ADC_IRQHandler+0x292>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800273a:	d004      	beq.n	8002746 <HAL_ADC_IRQHandler+0x292>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a0d      	ldr	r2, [pc, #52]	; (8002778 <HAL_ADC_IRQHandler+0x2c4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d104      	bne.n	8002750 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	61bb      	str	r3, [r7, #24]
 800274e:	e018      	b.n	8002782 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002758:	d004      	beq.n	8002764 <HAL_ADC_IRQHandler+0x2b0>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a03      	ldr	r2, [pc, #12]	; (800276c <HAL_ADC_IRQHandler+0x2b8>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d10b      	bne.n	800277c <HAL_ADC_IRQHandler+0x2c8>
 8002764:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002768:	e009      	b.n	800277e <HAL_ADC_IRQHandler+0x2ca>
 800276a:	bf00      	nop
 800276c:	50000100 	.word	0x50000100
 8002770:	50000300 	.word	0x50000300
 8002774:	50000700 	.word	0x50000700
 8002778:	50000400 	.word	0x50000400
 800277c:	4b92      	ldr	r3, [pc, #584]	; (80029c8 <HAL_ADC_IRQHandler+0x514>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002788:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800278c:	2b00      	cmp	r3, #0
 800278e:	f040 80b0 	bne.w	80028f2 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00d      	beq.n	80027b8 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f040 80a3 	bne.w	80028f2 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f040 809d 	bne.w	80028f2 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 8097 	beq.w	80028f2 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027cc:	d004      	beq.n	80027d8 <HAL_ADC_IRQHandler+0x324>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a7e      	ldr	r2, [pc, #504]	; (80029cc <HAL_ADC_IRQHandler+0x518>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d106      	bne.n	80027e6 <HAL_ADC_IRQHandler+0x332>
 80027d8:	4b7d      	ldr	r3, [pc, #500]	; (80029d0 <HAL_ADC_IRQHandler+0x51c>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 031f 	and.w	r3, r3, #31
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d03e      	beq.n	8002862 <HAL_ADC_IRQHandler+0x3ae>
 80027e4:	e005      	b.n	80027f2 <HAL_ADC_IRQHandler+0x33e>
 80027e6:	4b7b      	ldr	r3, [pc, #492]	; (80029d4 <HAL_ADC_IRQHandler+0x520>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 031f 	and.w	r3, r3, #31
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d037      	beq.n	8002862 <HAL_ADC_IRQHandler+0x3ae>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027fa:	d004      	beq.n	8002806 <HAL_ADC_IRQHandler+0x352>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a72      	ldr	r2, [pc, #456]	; (80029cc <HAL_ADC_IRQHandler+0x518>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d106      	bne.n	8002814 <HAL_ADC_IRQHandler+0x360>
 8002806:	4b72      	ldr	r3, [pc, #456]	; (80029d0 <HAL_ADC_IRQHandler+0x51c>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 031f 	and.w	r3, r3, #31
 800280e:	2b06      	cmp	r3, #6
 8002810:	d027      	beq.n	8002862 <HAL_ADC_IRQHandler+0x3ae>
 8002812:	e005      	b.n	8002820 <HAL_ADC_IRQHandler+0x36c>
 8002814:	4b6f      	ldr	r3, [pc, #444]	; (80029d4 <HAL_ADC_IRQHandler+0x520>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 031f 	and.w	r3, r3, #31
 800281c:	2b06      	cmp	r3, #6
 800281e:	d020      	beq.n	8002862 <HAL_ADC_IRQHandler+0x3ae>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002828:	d004      	beq.n	8002834 <HAL_ADC_IRQHandler+0x380>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a67      	ldr	r2, [pc, #412]	; (80029cc <HAL_ADC_IRQHandler+0x518>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d106      	bne.n	8002842 <HAL_ADC_IRQHandler+0x38e>
 8002834:	4b66      	ldr	r3, [pc, #408]	; (80029d0 <HAL_ADC_IRQHandler+0x51c>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 031f 	and.w	r3, r3, #31
 800283c:	2b07      	cmp	r3, #7
 800283e:	d010      	beq.n	8002862 <HAL_ADC_IRQHandler+0x3ae>
 8002840:	e005      	b.n	800284e <HAL_ADC_IRQHandler+0x39a>
 8002842:	4b64      	ldr	r3, [pc, #400]	; (80029d4 <HAL_ADC_IRQHandler+0x520>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 031f 	and.w	r3, r3, #31
 800284a:	2b07      	cmp	r3, #7
 800284c:	d009      	beq.n	8002862 <HAL_ADC_IRQHandler+0x3ae>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002856:	d004      	beq.n	8002862 <HAL_ADC_IRQHandler+0x3ae>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a5a      	ldr	r2, [pc, #360]	; (80029c8 <HAL_ADC_IRQHandler+0x514>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d104      	bne.n	800286c <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	e00f      	b.n	800288c <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002874:	d004      	beq.n	8002880 <HAL_ADC_IRQHandler+0x3cc>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a54      	ldr	r2, [pc, #336]	; (80029cc <HAL_ADC_IRQHandler+0x518>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d102      	bne.n	8002886 <HAL_ADC_IRQHandler+0x3d2>
 8002880:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002884:	e000      	b.n	8002888 <HAL_ADC_IRQHandler+0x3d4>
 8002886:	4b50      	ldr	r3, [pc, #320]	; (80029c8 <HAL_ADC_IRQHandler+0x514>)
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d12d      	bne.n	80028f2 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d11a      	bne.n	80028da <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80028b2:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d112      	bne.n	80028f2 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	f043 0201 	orr.w	r2, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	641a      	str	r2, [r3, #64]	; 0x40
 80028d8:	e00b      	b.n	80028f2 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f043 0210 	orr.w	r2, r3, #16
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	f043 0201 	orr.w	r2, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f8c4 	bl	8002a80 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2260      	movs	r2, #96	; 0x60
 80028fe:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002906:	2b00      	cmp	r3, #0
 8002908:	d011      	beq.n	800292e <HAL_ADC_IRQHandler+0x47a>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00c      	beq.n	800292e <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff fa85 	bl	8001e30 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2280      	movs	r2, #128	; 0x80
 800292c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d012      	beq.n	800295e <HAL_ADC_IRQHandler+0x4aa>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00d      	beq.n	800295e <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f8aa 	bl	8002aa8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800295c:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002964:	2b00      	cmp	r3, #0
 8002966:	d012      	beq.n	800298e <HAL_ADC_IRQHandler+0x4da>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00d      	beq.n	800298e <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f89c 	bl	8002abc <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800298c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	f003 0310 	and.w	r3, r3, #16
 8002994:	2b00      	cmp	r3, #0
 8002996:	d04f      	beq.n	8002a38 <HAL_ADC_IRQHandler+0x584>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 0310 	and.w	r3, r3, #16
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d04a      	beq.n	8002a38 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d102      	bne.n	80029b0 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 80029aa:	2301      	movs	r3, #1
 80029ac:	61fb      	str	r3, [r7, #28]
 80029ae:	e02d      	b.n	8002a0c <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029b8:	d004      	beq.n	80029c4 <HAL_ADC_IRQHandler+0x510>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a03      	ldr	r2, [pc, #12]	; (80029cc <HAL_ADC_IRQHandler+0x518>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d109      	bne.n	80029d8 <HAL_ADC_IRQHandler+0x524>
 80029c4:	4b02      	ldr	r3, [pc, #8]	; (80029d0 <HAL_ADC_IRQHandler+0x51c>)
 80029c6:	e008      	b.n	80029da <HAL_ADC_IRQHandler+0x526>
 80029c8:	50000400 	.word	0x50000400
 80029cc:	50000100 	.word	0x50000100
 80029d0:	50000300 	.word	0x50000300
 80029d4:	50000700 	.word	0x50000700
 80029d8:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <HAL_ADC_IRQHandler+0x5c8>)
 80029da:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d109      	bne.n	80029fc <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d10a      	bne.n	8002a0c <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80029f6:	2301      	movs	r3, #1
 80029f8:	61fb      	str	r3, [r7, #28]
 80029fa:	e007      	b.n	8002a0c <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002a08:	2301      	movs	r3, #1
 8002a0a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d10e      	bne.n	8002a30 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	f043 0202 	orr.w	r2, r3, #2
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff fa0a 	bl	8001e44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2210      	movs	r2, #16
 8002a36:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d018      	beq.n	8002a74 <HAL_ADC_IRQHandler+0x5c0>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d013      	beq.n	8002a74 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5c:	f043 0208 	orr.w	r2, r3, #8
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a6c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f810 	bl	8002a94 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002a74:	bf00      	nop
 8002a76:	3720      	adds	r7, #32
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	50000700 	.word	0x50000700

08002a80 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b09b      	sub	sp, #108	; 0x6c
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x22>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e2ca      	b.n	8003088 <HAL_ADC_ConfigChannel+0x5b8>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f040 82ae 	bne.w	8003066 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d81c      	bhi.n	8002b4c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	4413      	add	r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	461a      	mov	r2, r3
 8002b26:	231f      	movs	r3, #31
 8002b28:	4093      	lsls	r3, r2
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	4019      	ands	r1, r3
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	4413      	add	r3, r2
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30
 8002b4a:	e063      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b09      	cmp	r3, #9
 8002b52:	d81e      	bhi.n	8002b92 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	4413      	add	r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	3b1e      	subs	r3, #30
 8002b68:	221f      	movs	r2, #31
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	4019      	ands	r1, r3
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	4413      	add	r3, r2
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	3b1e      	subs	r3, #30
 8002b84:	fa00 f203 	lsl.w	r2, r0, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	635a      	str	r2, [r3, #52]	; 0x34
 8002b90:	e040      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b0e      	cmp	r3, #14
 8002b98:	d81e      	bhi.n	8002bd8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4413      	add	r3, r2
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	3b3c      	subs	r3, #60	; 0x3c
 8002bae:	221f      	movs	r2, #31
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	4019      	ands	r1, r3
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	4413      	add	r3, r2
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	3b3c      	subs	r3, #60	; 0x3c
 8002bca:	fa00 f203 	lsl.w	r2, r0, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	639a      	str	r2, [r3, #56]	; 0x38
 8002bd6:	e01d      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	4413      	add	r3, r2
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	3b5a      	subs	r3, #90	; 0x5a
 8002bec:	221f      	movs	r2, #31
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	4019      	ands	r1, r3
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	4413      	add	r3, r2
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	3b5a      	subs	r3, #90	; 0x5a
 8002c08:	fa00 f203 	lsl.w	r2, r0, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f040 80e5 	bne.w	8002dee <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b09      	cmp	r3, #9
 8002c2a:	d91c      	bls.n	8002c66 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6999      	ldr	r1, [r3, #24]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	4613      	mov	r3, r2
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3b1e      	subs	r3, #30
 8002c3e:	2207      	movs	r2, #7
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	4019      	ands	r1, r3
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	6898      	ldr	r0, [r3, #8]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	4613      	mov	r3, r2
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	4413      	add	r3, r2
 8002c56:	3b1e      	subs	r3, #30
 8002c58:	fa00 f203 	lsl.w	r2, r0, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	619a      	str	r2, [r3, #24]
 8002c64:	e019      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6959      	ldr	r1, [r3, #20]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4613      	mov	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4413      	add	r3, r2
 8002c76:	2207      	movs	r2, #7
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	4019      	ands	r1, r3
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	6898      	ldr	r0, [r3, #8]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	4413      	add	r3, r2
 8002c8e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	08db      	lsrs	r3, r3, #3
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d84f      	bhi.n	8002d5c <HAL_ADC_ConfigChannel+0x28c>
 8002cbc:	a201      	add	r2, pc, #4	; (adr r2, 8002cc4 <HAL_ADC_ConfigChannel+0x1f4>)
 8002cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc2:	bf00      	nop
 8002cc4:	08002cd5 	.word	0x08002cd5
 8002cc8:	08002cf7 	.word	0x08002cf7
 8002ccc:	08002d19 	.word	0x08002d19
 8002cd0:	08002d3b 	.word	0x08002d3b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cda:	4b9a      	ldr	r3, [pc, #616]	; (8002f44 <HAL_ADC_ConfigChannel+0x474>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	0691      	lsls	r1, r2, #26
 8002ce4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002cf2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002cf4:	e07e      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002cfc:	4b91      	ldr	r3, [pc, #580]	; (8002f44 <HAL_ADC_ConfigChannel+0x474>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	0691      	lsls	r1, r2, #26
 8002d06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d14:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d16:	e06d      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002d1e:	4b89      	ldr	r3, [pc, #548]	; (8002f44 <HAL_ADC_ConfigChannel+0x474>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	6812      	ldr	r2, [r2, #0]
 8002d26:	0691      	lsls	r1, r2, #26
 8002d28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d36:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d38:	e05c      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d40:	4b80      	ldr	r3, [pc, #512]	; (8002f44 <HAL_ADC_ConfigChannel+0x474>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	0691      	lsls	r1, r2, #26
 8002d4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d58:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d5a:	e04b      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	069b      	lsls	r3, r3, #26
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d107      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d7e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	069b      	lsls	r3, r3, #26
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d107      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002da2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002daa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	069b      	lsls	r3, r3, #26
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d107      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002dc6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	069b      	lsls	r3, r3, #26
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d10a      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002dea:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002dec:	e001      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002dee:	bf00      	nop
 8002df0:	e000      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002df2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d108      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x344>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x344>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x346>
 8002e14:	2300      	movs	r3, #0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f040 8130 	bne.w	800307c <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d00f      	beq.n	8002e44 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2201      	movs	r2, #1
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43da      	mvns	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	400a      	ands	r2, r1
 8002e3e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002e42:	e049      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2201      	movs	r2, #1
 8002e52:	409a      	lsls	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b09      	cmp	r3, #9
 8002e64:	d91c      	bls.n	8002ea0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6999      	ldr	r1, [r3, #24]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	4613      	mov	r3, r2
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4413      	add	r3, r2
 8002e76:	3b1b      	subs	r3, #27
 8002e78:	2207      	movs	r2, #7
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	4019      	ands	r1, r3
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	6898      	ldr	r0, [r3, #8]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	4413      	add	r3, r2
 8002e90:	3b1b      	subs	r3, #27
 8002e92:	fa00 f203 	lsl.w	r2, r0, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	619a      	str	r2, [r3, #24]
 8002e9e:	e01b      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6959      	ldr	r1, [r3, #20]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	2207      	movs	r2, #7
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	4019      	ands	r1, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	6898      	ldr	r0, [r3, #8]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4413      	add	r3, r2
 8002ecc:	fa00 f203 	lsl.w	r2, r0, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ee0:	d004      	beq.n	8002eec <HAL_ADC_ConfigChannel+0x41c>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a18      	ldr	r2, [pc, #96]	; (8002f48 <HAL_ADC_ConfigChannel+0x478>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d101      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x420>
 8002eec:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <HAL_ADC_ConfigChannel+0x47c>)
 8002eee:	e000      	b.n	8002ef2 <HAL_ADC_ConfigChannel+0x422>
 8002ef0:	4b17      	ldr	r3, [pc, #92]	; (8002f50 <HAL_ADC_ConfigChannel+0x480>)
 8002ef2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b10      	cmp	r3, #16
 8002efa:	d105      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d015      	beq.n	8002f34 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002f0c:	2b11      	cmp	r3, #17
 8002f0e:	d105      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00b      	beq.n	8002f34 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002f20:	2b12      	cmp	r3, #18
 8002f22:	f040 80ab 	bne.w	800307c <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f040 80a4 	bne.w	800307c <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f3c:	d10a      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x484>
 8002f3e:	4b02      	ldr	r3, [pc, #8]	; (8002f48 <HAL_ADC_ConfigChannel+0x478>)
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	e022      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x4ba>
 8002f44:	83fff000 	.word	0x83fff000
 8002f48:	50000100 	.word	0x50000100
 8002f4c:	50000300 	.word	0x50000300
 8002f50:	50000700 	.word	0x50000700
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a4e      	ldr	r2, [pc, #312]	; (8003094 <HAL_ADC_ConfigChannel+0x5c4>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d103      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x496>
 8002f5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	e011      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x4ba>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a4b      	ldr	r2, [pc, #300]	; (8003098 <HAL_ADC_ConfigChannel+0x5c8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d102      	bne.n	8002f76 <HAL_ADC_ConfigChannel+0x4a6>
 8002f70:	4b4a      	ldr	r3, [pc, #296]	; (800309c <HAL_ADC_ConfigChannel+0x5cc>)
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	e009      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x4ba>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a48      	ldr	r2, [pc, #288]	; (800309c <HAL_ADC_ConfigChannel+0x5cc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d102      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x4b6>
 8002f80:	4b45      	ldr	r3, [pc, #276]	; (8003098 <HAL_ADC_ConfigChannel+0x5c8>)
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	e001      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x4ba>
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d108      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x4da>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x4da>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <HAL_ADC_ConfigChannel+0x4dc>
 8002faa:	2300      	movs	r3, #0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d150      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002fb0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d010      	beq.n	8002fd8 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d107      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x502>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x502>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x504>
 8002fd2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d13c      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b10      	cmp	r3, #16
 8002fde:	d11d      	bne.n	800301c <HAL_ADC_ConfigChannel+0x54c>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fe8:	d118      	bne.n	800301c <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ff4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ff6:	4b2a      	ldr	r3, [pc, #168]	; (80030a0 <HAL_ADC_ConfigChannel+0x5d0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a2a      	ldr	r2, [pc, #168]	; (80030a4 <HAL_ADC_ConfigChannel+0x5d4>)
 8002ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8003000:	0c9a      	lsrs	r2, r3, #18
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800300c:	e002      	b.n	8003014 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	3b01      	subs	r3, #1
 8003012:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f9      	bne.n	800300e <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800301a:	e02e      	b.n	800307a <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b11      	cmp	r3, #17
 8003022:	d10b      	bne.n	800303c <HAL_ADC_ConfigChannel+0x56c>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800302c:	d106      	bne.n	800303c <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800302e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003038:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800303a:	e01e      	b.n	800307a <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b12      	cmp	r3, #18
 8003042:	d11a      	bne.n	800307a <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800304c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800304e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003050:	e013      	b.n	800307a <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f043 0220 	orr.w	r2, r3, #32
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003064:	e00a      	b.n	800307c <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f043 0220 	orr.w	r2, r3, #32
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003078:	e000      	b.n	800307c <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800307a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003084:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003088:	4618      	mov	r0, r3
 800308a:	376c      	adds	r7, #108	; 0x6c
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	50000100 	.word	0x50000100
 8003098:	50000400 	.word	0x50000400
 800309c:	50000500 	.word	0x50000500
 80030a0:	20000090 	.word	0x20000090
 80030a4:	431bde83 	.word	0x431bde83

080030a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b099      	sub	sp, #100	; 0x64
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030c0:	d102      	bne.n	80030c8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80030c2:	4b6d      	ldr	r3, [pc, #436]	; (8003278 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	e01a      	b.n	80030fe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a6a      	ldr	r2, [pc, #424]	; (8003278 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d103      	bne.n	80030da <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80030d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	e011      	b.n	80030fe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a67      	ldr	r2, [pc, #412]	; (800327c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d102      	bne.n	80030ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80030e4:	4b66      	ldr	r3, [pc, #408]	; (8003280 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	e009      	b.n	80030fe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a64      	ldr	r2, [pc, #400]	; (8003280 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d102      	bne.n	80030fa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80030f4:	4b61      	ldr	r3, [pc, #388]	; (800327c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80030f6:	60bb      	str	r3, [r7, #8]
 80030f8:	e001      	b.n	80030fe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80030fa:	2300      	movs	r3, #0
 80030fc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0b0      	b.n	800326a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003112:	2302      	movs	r3, #2
 8003114:	e0a9      	b.n	800326a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	f040 808d 	bne.w	8003248 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b00      	cmp	r3, #0
 8003138:	f040 8086 	bne.w	8003248 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003144:	d004      	beq.n	8003150 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a4b      	ldr	r2, [pc, #300]	; (8003278 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d101      	bne.n	8003154 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003150:	4b4c      	ldr	r3, [pc, #304]	; (8003284 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003152:	e000      	b.n	8003156 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003154:	4b4c      	ldr	r3, [pc, #304]	; (8003288 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003156:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d040      	beq.n	80031e2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003160:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003172:	035b      	lsls	r3, r3, #13
 8003174:	430b      	orrs	r3, r1
 8003176:	431a      	orrs	r2, r3
 8003178:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800317a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	2b01      	cmp	r3, #1
 8003188:	d108      	bne.n	800319c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800319c:	2300      	movs	r3, #0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d15c      	bne.n	800325c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d107      	bne.n	80031be <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80031be:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d14b      	bne.n	800325c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80031c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80031cc:	f023 030f 	bic.w	r3, r3, #15
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	6811      	ldr	r1, [r2, #0]
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	6892      	ldr	r2, [r2, #8]
 80031d8:	430a      	orrs	r2, r1
 80031da:	431a      	orrs	r2, r3
 80031dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031de:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80031e0:	e03c      	b.n	800325c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80031e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ec:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d108      	bne.n	800320e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800320e:	2300      	movs	r3, #0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d123      	bne.n	800325c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	2b01      	cmp	r3, #1
 800321e:	d107      	bne.n	8003230 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003230:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003232:	2b00      	cmp	r3, #0
 8003234:	d112      	bne.n	800325c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003236:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800323e:	f023 030f 	bic.w	r3, r3, #15
 8003242:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003244:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003246:	e009      	b.n	800325c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	f043 0220 	orr.w	r2, r3, #32
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800325a:	e000      	b.n	800325e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800325c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003266:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800326a:	4618      	mov	r0, r3
 800326c:	3764      	adds	r7, #100	; 0x64
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	50000100 	.word	0x50000100
 800327c:	50000400 	.word	0x50000400
 8003280:	50000500 	.word	0x50000500
 8003284:	50000300 	.word	0x50000300
 8003288:	50000700 	.word	0x50000700

0800328c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d108      	bne.n	80032b8 <ADC_Enable+0x2c>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <ADC_Enable+0x2c>
 80032b4:	2301      	movs	r3, #1
 80032b6:	e000      	b.n	80032ba <ADC_Enable+0x2e>
 80032b8:	2300      	movs	r3, #0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d143      	bne.n	8003346 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	4b22      	ldr	r3, [pc, #136]	; (8003350 <ADC_Enable+0xc4>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00d      	beq.n	80032e8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	f043 0210 	orr.w	r2, r3, #16
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032dc:	f043 0201 	orr.w	r2, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e02f      	b.n	8003348 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80032f8:	f7fe fd8e 	bl	8001e18 <HAL_GetTick>
 80032fc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80032fe:	e01b      	b.n	8003338 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003300:	f7fe fd8a 	bl	8001e18 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d914      	bls.n	8003338 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b01      	cmp	r3, #1
 800331a:	d00d      	beq.n	8003338 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	f043 0210 	orr.w	r2, r3, #16
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332c:	f043 0201 	orr.w	r2, r3, #1
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e007      	b.n	8003348 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b01      	cmp	r3, #1
 8003344:	d1dc      	bne.n	8003300 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	8000003f 	.word	0x8000003f

08003354 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	2b01      	cmp	r3, #1
 800336c:	d108      	bne.n	8003380 <ADC_Disable+0x2c>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <ADC_Disable+0x2c>
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <ADC_Disable+0x2e>
 8003380:	2300      	movs	r3, #0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d047      	beq.n	8003416 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 030d 	and.w	r3, r3, #13
 8003390:	2b01      	cmp	r3, #1
 8003392:	d10f      	bne.n	80033b4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0202 	orr.w	r2, r2, #2
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2203      	movs	r2, #3
 80033aa:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80033ac:	f7fe fd34 	bl	8001e18 <HAL_GetTick>
 80033b0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80033b2:	e029      	b.n	8003408 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	f043 0210 	orr.w	r2, r3, #16
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c4:	f043 0201 	orr.w	r2, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e023      	b.n	8003418 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033d0:	f7fe fd22 	bl	8001e18 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d914      	bls.n	8003408 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d10d      	bne.n	8003408 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	f043 0210 	orr.w	r2, r3, #16
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fc:	f043 0201 	orr.w	r2, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e007      	b.n	8003418 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b01      	cmp	r3, #1
 8003414:	d0dc      	beq.n	80033d0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003430:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <__NVIC_SetPriorityGrouping+0x44>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800343c:	4013      	ands	r3, r2
 800343e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800344c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003452:	4a04      	ldr	r2, [pc, #16]	; (8003464 <__NVIC_SetPriorityGrouping+0x44>)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	60d3      	str	r3, [r2, #12]
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800346c:	4b04      	ldr	r3, [pc, #16]	; (8003480 <__NVIC_GetPriorityGrouping+0x18>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	0a1b      	lsrs	r3, r3, #8
 8003472:	f003 0307 	and.w	r3, r3, #7
}
 8003476:	4618      	mov	r0, r3
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	e000ed00 	.word	0xe000ed00

08003484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003492:	2b00      	cmp	r3, #0
 8003494:	db0b      	blt.n	80034ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	f003 021f 	and.w	r2, r3, #31
 800349c:	4907      	ldr	r1, [pc, #28]	; (80034bc <__NVIC_EnableIRQ+0x38>)
 800349e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	2001      	movs	r0, #1
 80034a6:	fa00 f202 	lsl.w	r2, r0, r2
 80034aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	e000e100 	.word	0xe000e100

080034c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	6039      	str	r1, [r7, #0]
 80034ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	db0a      	blt.n	80034ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	490c      	ldr	r1, [pc, #48]	; (800350c <__NVIC_SetPriority+0x4c>)
 80034da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034de:	0112      	lsls	r2, r2, #4
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	440b      	add	r3, r1
 80034e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034e8:	e00a      	b.n	8003500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	4908      	ldr	r1, [pc, #32]	; (8003510 <__NVIC_SetPriority+0x50>)
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	3b04      	subs	r3, #4
 80034f8:	0112      	lsls	r2, r2, #4
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	440b      	add	r3, r1
 80034fe:	761a      	strb	r2, [r3, #24]
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	e000e100 	.word	0xe000e100
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003514:	b480      	push	{r7}
 8003516:	b089      	sub	sp, #36	; 0x24
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f1c3 0307 	rsb	r3, r3, #7
 800352e:	2b04      	cmp	r3, #4
 8003530:	bf28      	it	cs
 8003532:	2304      	movcs	r3, #4
 8003534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3304      	adds	r3, #4
 800353a:	2b06      	cmp	r3, #6
 800353c:	d902      	bls.n	8003544 <NVIC_EncodePriority+0x30>
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3b03      	subs	r3, #3
 8003542:	e000      	b.n	8003546 <NVIC_EncodePriority+0x32>
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003548:	f04f 32ff 	mov.w	r2, #4294967295
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43da      	mvns	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	401a      	ands	r2, r3
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800355c:	f04f 31ff 	mov.w	r1, #4294967295
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	fa01 f303 	lsl.w	r3, r1, r3
 8003566:	43d9      	mvns	r1, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800356c:	4313      	orrs	r3, r2
         );
}
 800356e:	4618      	mov	r0, r3
 8003570:	3724      	adds	r7, #36	; 0x24
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3b01      	subs	r3, #1
 8003588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800358c:	d301      	bcc.n	8003592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800358e:	2301      	movs	r3, #1
 8003590:	e00f      	b.n	80035b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003592:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <SysTick_Config+0x40>)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3b01      	subs	r3, #1
 8003598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800359a:	210f      	movs	r1, #15
 800359c:	f04f 30ff 	mov.w	r0, #4294967295
 80035a0:	f7ff ff8e 	bl	80034c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <SysTick_Config+0x40>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035aa:	4b04      	ldr	r3, [pc, #16]	; (80035bc <SysTick_Config+0x40>)
 80035ac:	2207      	movs	r2, #7
 80035ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	e000e010 	.word	0xe000e010

080035c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff ff29 	bl	8003420 <__NVIC_SetPriorityGrouping>
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b086      	sub	sp, #24
 80035da:	af00      	add	r7, sp, #0
 80035dc:	4603      	mov	r3, r0
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035e8:	f7ff ff3e 	bl	8003468 <__NVIC_GetPriorityGrouping>
 80035ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	6978      	ldr	r0, [r7, #20]
 80035f4:	f7ff ff8e 	bl	8003514 <NVIC_EncodePriority>
 80035f8:	4602      	mov	r2, r0
 80035fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff ff5d 	bl	80034c0 <__NVIC_SetPriority>
}
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	4603      	mov	r3, r0
 8003616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff ff31 	bl	8003484 <__NVIC_EnableIRQ>
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff ffa2 	bl	800357c <SysTick_Config>
 8003638:	4603      	mov	r3, r0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003650:	2b02      	cmp	r3, #2
 8003652:	d008      	beq.n	8003666 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2204      	movs	r2, #4
 8003658:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e020      	b.n	80036a8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 020e 	bic.w	r2, r2, #14
 8003674:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0201 	bic.w	r2, r2, #1
 8003684:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368e:	2101      	movs	r1, #1
 8003690:	fa01 f202 	lsl.w	r2, r1, r2
 8003694:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036bc:	2300      	movs	r3, #0
 80036be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d005      	beq.n	80036d6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2204      	movs	r2, #4
 80036ce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	73fb      	strb	r3, [r7, #15]
 80036d4:	e027      	b.n	8003726 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 020e 	bic.w	r2, r2, #14
 80036e4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0201 	bic.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fe:	2101      	movs	r1, #1
 8003700:	fa01 f202 	lsl.w	r2, r1, r2
 8003704:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	4798      	blx	r3
    } 
  }
  return status;
 8003726:	7bfb      	ldrb	r3, [r7, #15]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800373e:	e154      	b.n	80039ea <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	2101      	movs	r1, #1
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	fa01 f303 	lsl.w	r3, r1, r3
 800374c:	4013      	ands	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 8146 	beq.w	80039e4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 0303 	and.w	r3, r3, #3
 8003760:	2b01      	cmp	r3, #1
 8003762:	d005      	beq.n	8003770 <HAL_GPIO_Init+0x40>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d130      	bne.n	80037d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	2203      	movs	r2, #3
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	4013      	ands	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4313      	orrs	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037a6:	2201      	movs	r2, #1
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	43db      	mvns	r3, r3
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4013      	ands	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	091b      	lsrs	r3, r3, #4
 80037bc:	f003 0201 	and.w	r2, r3, #1
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d017      	beq.n	800380e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	2203      	movs	r2, #3
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	43db      	mvns	r3, r3
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4013      	ands	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d123      	bne.n	8003862 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	08da      	lsrs	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3208      	adds	r2, #8
 8003822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003826:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	220f      	movs	r2, #15
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	43db      	mvns	r3, r3
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4013      	ands	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	08da      	lsrs	r2, r3, #3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3208      	adds	r2, #8
 800385c:	6939      	ldr	r1, [r7, #16]
 800385e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	2203      	movs	r2, #3
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	43db      	mvns	r3, r3
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	4013      	ands	r3, r2
 8003878:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 0203 	and.w	r2, r3, #3
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 80a0 	beq.w	80039e4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038a4:	4b58      	ldr	r3, [pc, #352]	; (8003a08 <HAL_GPIO_Init+0x2d8>)
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	4a57      	ldr	r2, [pc, #348]	; (8003a08 <HAL_GPIO_Init+0x2d8>)
 80038aa:	f043 0301 	orr.w	r3, r3, #1
 80038ae:	6193      	str	r3, [r2, #24]
 80038b0:	4b55      	ldr	r3, [pc, #340]	; (8003a08 <HAL_GPIO_Init+0x2d8>)
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038bc:	4a53      	ldr	r2, [pc, #332]	; (8003a0c <HAL_GPIO_Init+0x2dc>)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	089b      	lsrs	r3, r3, #2
 80038c2:	3302      	adds	r3, #2
 80038c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f003 0303 	and.w	r3, r3, #3
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	220f      	movs	r2, #15
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43db      	mvns	r3, r3
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4013      	ands	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038e6:	d019      	beq.n	800391c <HAL_GPIO_Init+0x1ec>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a49      	ldr	r2, [pc, #292]	; (8003a10 <HAL_GPIO_Init+0x2e0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d013      	beq.n	8003918 <HAL_GPIO_Init+0x1e8>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a48      	ldr	r2, [pc, #288]	; (8003a14 <HAL_GPIO_Init+0x2e4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d00d      	beq.n	8003914 <HAL_GPIO_Init+0x1e4>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a47      	ldr	r2, [pc, #284]	; (8003a18 <HAL_GPIO_Init+0x2e8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d007      	beq.n	8003910 <HAL_GPIO_Init+0x1e0>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a46      	ldr	r2, [pc, #280]	; (8003a1c <HAL_GPIO_Init+0x2ec>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d101      	bne.n	800390c <HAL_GPIO_Init+0x1dc>
 8003908:	2304      	movs	r3, #4
 800390a:	e008      	b.n	800391e <HAL_GPIO_Init+0x1ee>
 800390c:	2305      	movs	r3, #5
 800390e:	e006      	b.n	800391e <HAL_GPIO_Init+0x1ee>
 8003910:	2303      	movs	r3, #3
 8003912:	e004      	b.n	800391e <HAL_GPIO_Init+0x1ee>
 8003914:	2302      	movs	r3, #2
 8003916:	e002      	b.n	800391e <HAL_GPIO_Init+0x1ee>
 8003918:	2301      	movs	r3, #1
 800391a:	e000      	b.n	800391e <HAL_GPIO_Init+0x1ee>
 800391c:	2300      	movs	r3, #0
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	f002 0203 	and.w	r2, r2, #3
 8003924:	0092      	lsls	r2, r2, #2
 8003926:	4093      	lsls	r3, r2
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800392e:	4937      	ldr	r1, [pc, #220]	; (8003a0c <HAL_GPIO_Init+0x2dc>)
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	089b      	lsrs	r3, r3, #2
 8003934:	3302      	adds	r3, #2
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800393c:	4b38      	ldr	r3, [pc, #224]	; (8003a20 <HAL_GPIO_Init+0x2f0>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	43db      	mvns	r3, r3
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4013      	ands	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003960:	4a2f      	ldr	r2, [pc, #188]	; (8003a20 <HAL_GPIO_Init+0x2f0>)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003966:	4b2e      	ldr	r3, [pc, #184]	; (8003a20 <HAL_GPIO_Init+0x2f0>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	43db      	mvns	r3, r3
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4013      	ands	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800398a:	4a25      	ldr	r2, [pc, #148]	; (8003a20 <HAL_GPIO_Init+0x2f0>)
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003990:	4b23      	ldr	r3, [pc, #140]	; (8003a20 <HAL_GPIO_Init+0x2f0>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	43db      	mvns	r3, r3
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	4013      	ands	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80039b4:	4a1a      	ldr	r2, [pc, #104]	; (8003a20 <HAL_GPIO_Init+0x2f0>)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039ba:	4b19      	ldr	r3, [pc, #100]	; (8003a20 <HAL_GPIO_Init+0x2f0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	43db      	mvns	r3, r3
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4013      	ands	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80039de:	4a10      	ldr	r2, [pc, #64]	; (8003a20 <HAL_GPIO_Init+0x2f0>)
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	3301      	adds	r3, #1
 80039e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	fa22 f303 	lsr.w	r3, r2, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f47f aea3 	bne.w	8003740 <HAL_GPIO_Init+0x10>
  }
}
 80039fa:	bf00      	nop
 80039fc:	bf00      	nop
 80039fe:	371c      	adds	r7, #28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	40010000 	.word	0x40010000
 8003a10:	48000400 	.word	0x48000400
 8003a14:	48000800 	.word	0x48000800
 8003a18:	48000c00 	.word	0x48000c00
 8003a1c:	48001000 	.word	0x48001000
 8003a20:	40010400 	.word	0x40010400

08003a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	807b      	strh	r3, [r7, #2]
 8003a30:	4613      	mov	r3, r2
 8003a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a34:	787b      	ldrb	r3, [r7, #1]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a3a:	887a      	ldrh	r2, [r7, #2]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a40:	e002      	b.n	8003a48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a42:	887a      	ldrh	r2, [r7, #2]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a5e:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a60:	695a      	ldr	r2, [r3, #20]
 8003a62:	88fb      	ldrh	r3, [r7, #6]
 8003a64:	4013      	ands	r3, r2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d006      	beq.n	8003a78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a6a:	4a05      	ldr	r2, [pc, #20]	; (8003a80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a70:	88fb      	ldrh	r3, [r7, #6]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fd fba8 	bl	80011c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a78:	bf00      	nop
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40010400 	.word	0x40010400

08003a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e081      	b.n	8003b9a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fd fdc0 	bl	8001630 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2224      	movs	r2, #36	; 0x24
 8003ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ad4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ae4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d107      	bne.n	8003afe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	e006      	b.n	8003b0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d104      	bne.n	8003b1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69d9      	ldr	r1, [r3, #28]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1a      	ldr	r2, [r3, #32]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b20      	cmp	r3, #32
 8003bb6:	d138      	bne.n	8003c2a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d101      	bne.n	8003bc6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e032      	b.n	8003c2c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2224      	movs	r2, #36	; 0x24
 8003bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0201 	bic.w	r2, r2, #1
 8003be4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bf4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6819      	ldr	r1, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f042 0201 	orr.w	r2, r2, #1
 8003c14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	e000      	b.n	8003c2c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c2a:	2302      	movs	r3, #2
  }
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b20      	cmp	r3, #32
 8003c4c:	d139      	bne.n	8003cc2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e033      	b.n	8003cc4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2224      	movs	r2, #36	; 0x24
 8003c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0201 	bic.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c8a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	021b      	lsls	r3, r3, #8
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0201 	orr.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e000      	b.n	8003cc4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cc2:	2302      	movs	r3, #2
  }
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cd2:	b08b      	sub	sp, #44	; 0x2c
 8003cd4:	af06      	add	r7, sp, #24
 8003cd6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e0c4      	b.n	8003e6c <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fd fdda 	bl	80018b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2203      	movs	r2, #3
 8003d00:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f004 fad1 	bl	80082b0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d0e:	2300      	movs	r3, #0
 8003d10:	73fb      	strb	r3, [r7, #15]
 8003d12:	e040      	b.n	8003d96 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	440b      	add	r3, r1
 8003d24:	3301      	adds	r3, #1
 8003d26:	2201      	movs	r2, #1
 8003d28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	440b      	add	r3, r1
 8003d3a:	7bfa      	ldrb	r2, [r7, #15]
 8003d3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	440b      	add	r3, r1
 8003d4e:	3303      	adds	r3, #3
 8003d50:	2200      	movs	r2, #0
 8003d52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d54:	7bfa      	ldrb	r2, [r7, #15]
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	440b      	add	r3, r1
 8003d62:	3338      	adds	r3, #56	; 0x38
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d68:	7bfa      	ldrb	r2, [r7, #15]
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	440b      	add	r3, r1
 8003d76:	333c      	adds	r3, #60	; 0x3c
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d7c:	7bfa      	ldrb	r2, [r7, #15]
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	440b      	add	r3, r1
 8003d8a:	3340      	adds	r3, #64	; 0x40
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	3301      	adds	r3, #1
 8003d94:	73fb      	strb	r3, [r7, #15]
 8003d96:	7bfa      	ldrb	r2, [r7, #15]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d3b9      	bcc.n	8003d14 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003da0:	2300      	movs	r3, #0
 8003da2:	73fb      	strb	r3, [r7, #15]
 8003da4:	e044      	b.n	8003e30 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003da6:	7bfa      	ldrb	r2, [r7, #15]
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	440b      	add	r3, r1
 8003db4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003db8:	2200      	movs	r2, #0
 8003dba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003dbc:	7bfa      	ldrb	r2, [r7, #15]
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	440b      	add	r3, r1
 8003dca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003dce:	7bfa      	ldrb	r2, [r7, #15]
 8003dd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003dd2:	7bfa      	ldrb	r2, [r7, #15]
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	440b      	add	r3, r1
 8003de0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003de4:	2200      	movs	r2, #0
 8003de6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003de8:	7bfa      	ldrb	r2, [r7, #15]
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	4613      	mov	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	440b      	add	r3, r1
 8003df6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003dfe:	7bfa      	ldrb	r2, [r7, #15]
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	4613      	mov	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	440b      	add	r3, r1
 8003e0c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e14:	7bfa      	ldrb	r2, [r7, #15]
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	440b      	add	r3, r1
 8003e22:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	73fb      	strb	r3, [r7, #15]
 8003e30:	7bfa      	ldrb	r2, [r7, #15]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d3b5      	bcc.n	8003da6 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	687e      	ldr	r6, [r7, #4]
 8003e42:	466d      	mov	r5, sp
 8003e44:	f106 0410 	add.w	r4, r6, #16
 8003e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	602b      	str	r3, [r5, #0]
 8003e50:	1d33      	adds	r3, r6, #4
 8003e52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e54:	6838      	ldr	r0, [r7, #0]
 8003e56:	f004 fa46 	bl	80082e6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e84:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d102      	bne.n	8003e9a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	f001 b823 	b.w	8004ee0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 817d 	beq.w	80041aa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003eb0:	4bbc      	ldr	r3, [pc, #752]	; (80041a4 <HAL_RCC_OscConfig+0x330>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f003 030c 	and.w	r3, r3, #12
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d00c      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ebc:	4bb9      	ldr	r3, [pc, #740]	; (80041a4 <HAL_RCC_OscConfig+0x330>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f003 030c 	and.w	r3, r3, #12
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d15c      	bne.n	8003f82 <HAL_RCC_OscConfig+0x10e>
 8003ec8:	4bb6      	ldr	r3, [pc, #728]	; (80041a4 <HAL_RCC_OscConfig+0x330>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed4:	d155      	bne.n	8003f82 <HAL_RCC_OscConfig+0x10e>
 8003ed6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003eda:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ede:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003ee2:	fa93 f3a3 	rbit	r3, r3
 8003ee6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003eea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eee:	fab3 f383 	clz	r3, r3
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	095b      	lsrs	r3, r3, #5
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d102      	bne.n	8003f08 <HAL_RCC_OscConfig+0x94>
 8003f02:	4ba8      	ldr	r3, [pc, #672]	; (80041a4 <HAL_RCC_OscConfig+0x330>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	e015      	b.n	8003f34 <HAL_RCC_OscConfig+0xc0>
 8003f08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f0c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f10:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003f14:	fa93 f3a3 	rbit	r3, r3
 8003f18:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003f1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f20:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003f24:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003f28:	fa93 f3a3 	rbit	r3, r3
 8003f2c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003f30:	4b9c      	ldr	r3, [pc, #624]	; (80041a4 <HAL_RCC_OscConfig+0x330>)
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f38:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003f3c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003f40:	fa92 f2a2 	rbit	r2, r2
 8003f44:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003f48:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003f4c:	fab2 f282 	clz	r2, r2
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	f042 0220 	orr.w	r2, r2, #32
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	f002 021f 	and.w	r2, r2, #31
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f62:	4013      	ands	r3, r2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 811f 	beq.w	80041a8 <HAL_RCC_OscConfig+0x334>
 8003f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f040 8116 	bne.w	80041a8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	f000 bfaf 	b.w	8004ee0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f92:	d106      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x12e>
 8003f94:	4b83      	ldr	r3, [pc, #524]	; (80041a4 <HAL_RCC_OscConfig+0x330>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a82      	ldr	r2, [pc, #520]	; (80041a4 <HAL_RCC_OscConfig+0x330>)
 8003f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	e036      	b.n	8004010 <HAL_RCC_OscConfig+0x19c>
 8003fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10c      	bne.n	8003fcc <HAL_RCC_OscConfig+0x158>
 8003fb2:	4b7c      	ldr	r3, [pc, #496]	; (80041a4 <HAL_RCC_OscConfig+0x330>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a7b      	ldr	r2, [pc, #492]	; (80041a4 <HAL_RCC_OscConfig+0x330>)
 8003fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	4b79      	ldr	r3, [pc, #484]	; (80041a4 <HAL_RCC_OscConfig+0x330>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a78      	ldr	r2, [pc, #480]	; (80041a4 <HAL_RCC_OscConfig+0x330>)
 8003fc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	e021      	b.n	8004010 <HAL_RCC_OscConfig+0x19c>
 8003fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x184>
 8003fde:	4b71      	ldr	r3, [pc, #452]	; (80041a4 <HAL_RCC_OscConfig+0x330>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a70      	ldr	r2, [pc, #448]	; (80041a4 <HAL_RCC_OscConfig+0x330>)
 8003fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	4b6e      	ldr	r3, [pc, #440]	; (80041a4 <HAL_RCC_OscConfig+0x330>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a6d      	ldr	r2, [pc, #436]	; (80041a4 <HAL_RCC_OscConfig+0x330>)
 8003ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	e00b      	b.n	8004010 <HAL_RCC_OscConfig+0x19c>
 8003ff8:	4b6a      	ldr	r3, [pc, #424]	; (80041a4 <HAL_RCC_OscConfig+0x330>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a69      	ldr	r2, [pc, #420]	; (80041a4 <HAL_RCC_OscConfig+0x330>)
 8003ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	4b67      	ldr	r3, [pc, #412]	; (80041a4 <HAL_RCC_OscConfig+0x330>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a66      	ldr	r2, [pc, #408]	; (80041a4 <HAL_RCC_OscConfig+0x330>)
 800400a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800400e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004010:	4b64      	ldr	r3, [pc, #400]	; (80041a4 <HAL_RCC_OscConfig+0x330>)
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	f023 020f 	bic.w	r2, r3, #15
 8004018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800401c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	495f      	ldr	r1, [pc, #380]	; (80041a4 <HAL_RCC_OscConfig+0x330>)
 8004026:	4313      	orrs	r3, r2
 8004028:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800402a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800402e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d059      	beq.n	80040ee <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403a:	f7fd feed 	bl	8001e18 <HAL_GetTick>
 800403e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004042:	e00a      	b.n	800405a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004044:	f7fd fee8 	bl	8001e18 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b64      	cmp	r3, #100	; 0x64
 8004052:	d902      	bls.n	800405a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	f000 bf43 	b.w	8004ee0 <HAL_RCC_OscConfig+0x106c>
 800405a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800405e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004062:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004066:	fa93 f3a3 	rbit	r3, r3
 800406a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800406e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004072:	fab3 f383 	clz	r3, r3
 8004076:	b2db      	uxtb	r3, r3
 8004078:	095b      	lsrs	r3, r3, #5
 800407a:	b2db      	uxtb	r3, r3
 800407c:	f043 0301 	orr.w	r3, r3, #1
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b01      	cmp	r3, #1
 8004084:	d102      	bne.n	800408c <HAL_RCC_OscConfig+0x218>
 8004086:	4b47      	ldr	r3, [pc, #284]	; (80041a4 <HAL_RCC_OscConfig+0x330>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	e015      	b.n	80040b8 <HAL_RCC_OscConfig+0x244>
 800408c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004090:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004094:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004098:	fa93 f3a3 	rbit	r3, r3
 800409c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80040a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040a4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80040a8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80040ac:	fa93 f3a3 	rbit	r3, r3
 80040b0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80040b4:	4b3b      	ldr	r3, [pc, #236]	; (80041a4 <HAL_RCC_OscConfig+0x330>)
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040bc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80040c0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80040c4:	fa92 f2a2 	rbit	r2, r2
 80040c8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80040cc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80040d0:	fab2 f282 	clz	r2, r2
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	f042 0220 	orr.w	r2, r2, #32
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	f002 021f 	and.w	r2, r2, #31
 80040e0:	2101      	movs	r1, #1
 80040e2:	fa01 f202 	lsl.w	r2, r1, r2
 80040e6:	4013      	ands	r3, r2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0ab      	beq.n	8004044 <HAL_RCC_OscConfig+0x1d0>
 80040ec:	e05d      	b.n	80041aa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ee:	f7fd fe93 	bl	8001e18 <HAL_GetTick>
 80040f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040f6:	e00a      	b.n	800410e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040f8:	f7fd fe8e 	bl	8001e18 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b64      	cmp	r3, #100	; 0x64
 8004106:	d902      	bls.n	800410e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	f000 bee9 	b.w	8004ee0 <HAL_RCC_OscConfig+0x106c>
 800410e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004112:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004116:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800411a:	fa93 f3a3 	rbit	r3, r3
 800411e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004122:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004126:	fab3 f383 	clz	r3, r3
 800412a:	b2db      	uxtb	r3, r3
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	b2db      	uxtb	r3, r3
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b01      	cmp	r3, #1
 8004138:	d102      	bne.n	8004140 <HAL_RCC_OscConfig+0x2cc>
 800413a:	4b1a      	ldr	r3, [pc, #104]	; (80041a4 <HAL_RCC_OscConfig+0x330>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	e015      	b.n	800416c <HAL_RCC_OscConfig+0x2f8>
 8004140:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004144:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004148:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800414c:	fa93 f3a3 	rbit	r3, r3
 8004150:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004154:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004158:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800415c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004160:	fa93 f3a3 	rbit	r3, r3
 8004164:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004168:	4b0e      	ldr	r3, [pc, #56]	; (80041a4 <HAL_RCC_OscConfig+0x330>)
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004170:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004174:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004178:	fa92 f2a2 	rbit	r2, r2
 800417c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004180:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004184:	fab2 f282 	clz	r2, r2
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	f042 0220 	orr.w	r2, r2, #32
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	f002 021f 	and.w	r2, r2, #31
 8004194:	2101      	movs	r1, #1
 8004196:	fa01 f202 	lsl.w	r2, r1, r2
 800419a:	4013      	ands	r3, r2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1ab      	bne.n	80040f8 <HAL_RCC_OscConfig+0x284>
 80041a0:	e003      	b.n	80041aa <HAL_RCC_OscConfig+0x336>
 80041a2:	bf00      	nop
 80041a4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 817d 	beq.w	80044ba <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80041c0:	4ba6      	ldr	r3, [pc, #664]	; (800445c <HAL_RCC_OscConfig+0x5e8>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f003 030c 	and.w	r3, r3, #12
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00b      	beq.n	80041e4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80041cc:	4ba3      	ldr	r3, [pc, #652]	; (800445c <HAL_RCC_OscConfig+0x5e8>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f003 030c 	and.w	r3, r3, #12
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d172      	bne.n	80042be <HAL_RCC_OscConfig+0x44a>
 80041d8:	4ba0      	ldr	r3, [pc, #640]	; (800445c <HAL_RCC_OscConfig+0x5e8>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d16c      	bne.n	80042be <HAL_RCC_OscConfig+0x44a>
 80041e4:	2302      	movs	r3, #2
 80041e6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ea:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80041ee:	fa93 f3a3 	rbit	r3, r3
 80041f2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80041f6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041fa:	fab3 f383 	clz	r3, r3
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	095b      	lsrs	r3, r3, #5
 8004202:	b2db      	uxtb	r3, r3
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b01      	cmp	r3, #1
 800420c:	d102      	bne.n	8004214 <HAL_RCC_OscConfig+0x3a0>
 800420e:	4b93      	ldr	r3, [pc, #588]	; (800445c <HAL_RCC_OscConfig+0x5e8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	e013      	b.n	800423c <HAL_RCC_OscConfig+0x3c8>
 8004214:	2302      	movs	r3, #2
 8004216:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800421e:	fa93 f3a3 	rbit	r3, r3
 8004222:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004226:	2302      	movs	r3, #2
 8004228:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800422c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004230:	fa93 f3a3 	rbit	r3, r3
 8004234:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004238:	4b88      	ldr	r3, [pc, #544]	; (800445c <HAL_RCC_OscConfig+0x5e8>)
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	2202      	movs	r2, #2
 800423e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004242:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004246:	fa92 f2a2 	rbit	r2, r2
 800424a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800424e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004252:	fab2 f282 	clz	r2, r2
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	f042 0220 	orr.w	r2, r2, #32
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	f002 021f 	and.w	r2, r2, #31
 8004262:	2101      	movs	r1, #1
 8004264:	fa01 f202 	lsl.w	r2, r1, r2
 8004268:	4013      	ands	r3, r2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <HAL_RCC_OscConfig+0x410>
 800426e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004272:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d002      	beq.n	8004284 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	f000 be2e 	b.w	8004ee0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004284:	4b75      	ldr	r3, [pc, #468]	; (800445c <HAL_RCC_OscConfig+0x5e8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800428c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004290:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	21f8      	movs	r1, #248	; 0xf8
 800429a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80042a2:	fa91 f1a1 	rbit	r1, r1
 80042a6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80042aa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80042ae:	fab1 f181 	clz	r1, r1
 80042b2:	b2c9      	uxtb	r1, r1
 80042b4:	408b      	lsls	r3, r1
 80042b6:	4969      	ldr	r1, [pc, #420]	; (800445c <HAL_RCC_OscConfig+0x5e8>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042bc:	e0fd      	b.n	80044ba <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 8088 	beq.w	80043e0 <HAL_RCC_OscConfig+0x56c>
 80042d0:	2301      	movs	r3, #1
 80042d2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80042da:	fa93 f3a3 	rbit	r3, r3
 80042de:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80042e2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042e6:	fab3 f383 	clz	r3, r3
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80042f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	461a      	mov	r2, r3
 80042f8:	2301      	movs	r3, #1
 80042fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fc:	f7fd fd8c 	bl	8001e18 <HAL_GetTick>
 8004300:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004304:	e00a      	b.n	800431c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004306:	f7fd fd87 	bl	8001e18 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d902      	bls.n	800431c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	f000 bde2 	b.w	8004ee0 <HAL_RCC_OscConfig+0x106c>
 800431c:	2302      	movs	r3, #2
 800431e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004322:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004326:	fa93 f3a3 	rbit	r3, r3
 800432a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800432e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004332:	fab3 f383 	clz	r3, r3
 8004336:	b2db      	uxtb	r3, r3
 8004338:	095b      	lsrs	r3, r3, #5
 800433a:	b2db      	uxtb	r3, r3
 800433c:	f043 0301 	orr.w	r3, r3, #1
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b01      	cmp	r3, #1
 8004344:	d102      	bne.n	800434c <HAL_RCC_OscConfig+0x4d8>
 8004346:	4b45      	ldr	r3, [pc, #276]	; (800445c <HAL_RCC_OscConfig+0x5e8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	e013      	b.n	8004374 <HAL_RCC_OscConfig+0x500>
 800434c:	2302      	movs	r3, #2
 800434e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004352:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004356:	fa93 f3a3 	rbit	r3, r3
 800435a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800435e:	2302      	movs	r3, #2
 8004360:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004364:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004368:	fa93 f3a3 	rbit	r3, r3
 800436c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004370:	4b3a      	ldr	r3, [pc, #232]	; (800445c <HAL_RCC_OscConfig+0x5e8>)
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	2202      	movs	r2, #2
 8004376:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800437a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800437e:	fa92 f2a2 	rbit	r2, r2
 8004382:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004386:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800438a:	fab2 f282 	clz	r2, r2
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	f042 0220 	orr.w	r2, r2, #32
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	f002 021f 	and.w	r2, r2, #31
 800439a:	2101      	movs	r1, #1
 800439c:	fa01 f202 	lsl.w	r2, r1, r2
 80043a0:	4013      	ands	r3, r2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0af      	beq.n	8004306 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a6:	4b2d      	ldr	r3, [pc, #180]	; (800445c <HAL_RCC_OscConfig+0x5e8>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	21f8      	movs	r1, #248	; 0xf8
 80043bc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80043c4:	fa91 f1a1 	rbit	r1, r1
 80043c8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80043cc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80043d0:	fab1 f181 	clz	r1, r1
 80043d4:	b2c9      	uxtb	r1, r1
 80043d6:	408b      	lsls	r3, r1
 80043d8:	4920      	ldr	r1, [pc, #128]	; (800445c <HAL_RCC_OscConfig+0x5e8>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	600b      	str	r3, [r1, #0]
 80043de:	e06c      	b.n	80044ba <HAL_RCC_OscConfig+0x646>
 80043e0:	2301      	movs	r3, #1
 80043e2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80043ea:	fa93 f3a3 	rbit	r3, r3
 80043ee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80043f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043f6:	fab3 f383 	clz	r3, r3
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004400:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	461a      	mov	r2, r3
 8004408:	2300      	movs	r3, #0
 800440a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440c:	f7fd fd04 	bl	8001e18 <HAL_GetTick>
 8004410:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004414:	e00a      	b.n	800442c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004416:	f7fd fcff 	bl	8001e18 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d902      	bls.n	800442c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	f000 bd5a 	b.w	8004ee0 <HAL_RCC_OscConfig+0x106c>
 800442c:	2302      	movs	r3, #2
 800442e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004432:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004436:	fa93 f3a3 	rbit	r3, r3
 800443a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800443e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004442:	fab3 f383 	clz	r3, r3
 8004446:	b2db      	uxtb	r3, r3
 8004448:	095b      	lsrs	r3, r3, #5
 800444a:	b2db      	uxtb	r3, r3
 800444c:	f043 0301 	orr.w	r3, r3, #1
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b01      	cmp	r3, #1
 8004454:	d104      	bne.n	8004460 <HAL_RCC_OscConfig+0x5ec>
 8004456:	4b01      	ldr	r3, [pc, #4]	; (800445c <HAL_RCC_OscConfig+0x5e8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	e015      	b.n	8004488 <HAL_RCC_OscConfig+0x614>
 800445c:	40021000 	.word	0x40021000
 8004460:	2302      	movs	r3, #2
 8004462:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004466:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800446a:	fa93 f3a3 	rbit	r3, r3
 800446e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004472:	2302      	movs	r3, #2
 8004474:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004478:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800447c:	fa93 f3a3 	rbit	r3, r3
 8004480:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004484:	4bc8      	ldr	r3, [pc, #800]	; (80047a8 <HAL_RCC_OscConfig+0x934>)
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	2202      	movs	r2, #2
 800448a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800448e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004492:	fa92 f2a2 	rbit	r2, r2
 8004496:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800449a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800449e:	fab2 f282 	clz	r2, r2
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	f042 0220 	orr.w	r2, r2, #32
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	f002 021f 	and.w	r2, r2, #31
 80044ae:	2101      	movs	r1, #1
 80044b0:	fa01 f202 	lsl.w	r2, r1, r2
 80044b4:	4013      	ands	r3, r2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1ad      	bne.n	8004416 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 8110 	beq.w	80046f0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d079      	beq.n	80045d4 <HAL_RCC_OscConfig+0x760>
 80044e0:	2301      	movs	r3, #1
 80044e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80044ea:	fa93 f3a3 	rbit	r3, r3
 80044ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80044f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044f6:	fab3 f383 	clz	r3, r3
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	4bab      	ldr	r3, [pc, #684]	; (80047ac <HAL_RCC_OscConfig+0x938>)
 8004500:	4413      	add	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	461a      	mov	r2, r3
 8004506:	2301      	movs	r3, #1
 8004508:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800450a:	f7fd fc85 	bl	8001e18 <HAL_GetTick>
 800450e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004512:	e00a      	b.n	800452a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004514:	f7fd fc80 	bl	8001e18 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d902      	bls.n	800452a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	f000 bcdb 	b.w	8004ee0 <HAL_RCC_OscConfig+0x106c>
 800452a:	2302      	movs	r3, #2
 800452c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004530:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004534:	fa93 f3a3 	rbit	r3, r3
 8004538:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800453c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004540:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004544:	2202      	movs	r2, #2
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800454c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	fa93 f2a3 	rbit	r2, r3
 8004556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800455a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004568:	2202      	movs	r2, #2
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	fa93 f2a3 	rbit	r2, r3
 800457a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800457e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004582:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004584:	4b88      	ldr	r3, [pc, #544]	; (80047a8 <HAL_RCC_OscConfig+0x934>)
 8004586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800458c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004590:	2102      	movs	r1, #2
 8004592:	6019      	str	r1, [r3, #0]
 8004594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004598:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	fa93 f1a3 	rbit	r1, r3
 80045a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80045aa:	6019      	str	r1, [r3, #0]
  return result;
 80045ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045b0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	fab3 f383 	clz	r3, r3
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	f003 031f 	and.w	r3, r3, #31
 80045c6:	2101      	movs	r1, #1
 80045c8:	fa01 f303 	lsl.w	r3, r1, r3
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0a0      	beq.n	8004514 <HAL_RCC_OscConfig+0x6a0>
 80045d2:	e08d      	b.n	80046f0 <HAL_RCC_OscConfig+0x87c>
 80045d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80045dc:	2201      	movs	r2, #1
 80045de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	fa93 f2a3 	rbit	r2, r3
 80045ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045f2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045f6:	601a      	str	r2, [r3, #0]
  return result;
 80045f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045fc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004600:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004602:	fab3 f383 	clz	r3, r3
 8004606:	b2db      	uxtb	r3, r3
 8004608:	461a      	mov	r2, r3
 800460a:	4b68      	ldr	r3, [pc, #416]	; (80047ac <HAL_RCC_OscConfig+0x938>)
 800460c:	4413      	add	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	461a      	mov	r2, r3
 8004612:	2300      	movs	r3, #0
 8004614:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004616:	f7fd fbff 	bl	8001e18 <HAL_GetTick>
 800461a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800461e:	e00a      	b.n	8004636 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004620:	f7fd fbfa 	bl	8001e18 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d902      	bls.n	8004636 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	f000 bc55 	b.w	8004ee0 <HAL_RCC_OscConfig+0x106c>
 8004636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800463a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800463e:	2202      	movs	r2, #2
 8004640:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004646:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	fa93 f2a3 	rbit	r2, r3
 8004650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004654:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800465e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004662:	2202      	movs	r2, #2
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800466a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	fa93 f2a3 	rbit	r2, r3
 8004674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004678:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004682:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004686:	2202      	movs	r2, #2
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800468e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	fa93 f2a3 	rbit	r2, r3
 8004698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800469c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80046a0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a2:	4b41      	ldr	r3, [pc, #260]	; (80047a8 <HAL_RCC_OscConfig+0x934>)
 80046a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046aa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80046ae:	2102      	movs	r1, #2
 80046b0:	6019      	str	r1, [r3, #0]
 80046b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	fa93 f1a3 	rbit	r1, r3
 80046c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80046c8:	6019      	str	r1, [r3, #0]
  return result;
 80046ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ce:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	fab3 f383 	clz	r3, r3
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	f003 031f 	and.w	r3, r3, #31
 80046e4:	2101      	movs	r1, #1
 80046e6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ea:	4013      	ands	r3, r2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d197      	bne.n	8004620 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 81a1 	beq.w	8004a48 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004706:	2300      	movs	r3, #0
 8004708:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800470c:	4b26      	ldr	r3, [pc, #152]	; (80047a8 <HAL_RCC_OscConfig+0x934>)
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d116      	bne.n	8004746 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004718:	4b23      	ldr	r3, [pc, #140]	; (80047a8 <HAL_RCC_OscConfig+0x934>)
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	4a22      	ldr	r2, [pc, #136]	; (80047a8 <HAL_RCC_OscConfig+0x934>)
 800471e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004722:	61d3      	str	r3, [r2, #28]
 8004724:	4b20      	ldr	r3, [pc, #128]	; (80047a8 <HAL_RCC_OscConfig+0x934>)
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800472c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004730:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800473a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800473e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004740:	2301      	movs	r3, #1
 8004742:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004746:	4b1a      	ldr	r3, [pc, #104]	; (80047b0 <HAL_RCC_OscConfig+0x93c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474e:	2b00      	cmp	r3, #0
 8004750:	d11a      	bne.n	8004788 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004752:	4b17      	ldr	r3, [pc, #92]	; (80047b0 <HAL_RCC_OscConfig+0x93c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a16      	ldr	r2, [pc, #88]	; (80047b0 <HAL_RCC_OscConfig+0x93c>)
 8004758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800475c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800475e:	f7fd fb5b 	bl	8001e18 <HAL_GetTick>
 8004762:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004766:	e009      	b.n	800477c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004768:	f7fd fb56 	bl	8001e18 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b64      	cmp	r3, #100	; 0x64
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e3b1      	b.n	8004ee0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477c:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <HAL_RCC_OscConfig+0x93c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0ef      	beq.n	8004768 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800478c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d10d      	bne.n	80047b4 <HAL_RCC_OscConfig+0x940>
 8004798:	4b03      	ldr	r3, [pc, #12]	; (80047a8 <HAL_RCC_OscConfig+0x934>)
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	4a02      	ldr	r2, [pc, #8]	; (80047a8 <HAL_RCC_OscConfig+0x934>)
 800479e:	f043 0301 	orr.w	r3, r3, #1
 80047a2:	6213      	str	r3, [r2, #32]
 80047a4:	e03c      	b.n	8004820 <HAL_RCC_OscConfig+0x9ac>
 80047a6:	bf00      	nop
 80047a8:	40021000 	.word	0x40021000
 80047ac:	10908120 	.word	0x10908120
 80047b0:	40007000 	.word	0x40007000
 80047b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10c      	bne.n	80047de <HAL_RCC_OscConfig+0x96a>
 80047c4:	4bc1      	ldr	r3, [pc, #772]	; (8004acc <HAL_RCC_OscConfig+0xc58>)
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	4ac0      	ldr	r2, [pc, #768]	; (8004acc <HAL_RCC_OscConfig+0xc58>)
 80047ca:	f023 0301 	bic.w	r3, r3, #1
 80047ce:	6213      	str	r3, [r2, #32]
 80047d0:	4bbe      	ldr	r3, [pc, #760]	; (8004acc <HAL_RCC_OscConfig+0xc58>)
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	4abd      	ldr	r2, [pc, #756]	; (8004acc <HAL_RCC_OscConfig+0xc58>)
 80047d6:	f023 0304 	bic.w	r3, r3, #4
 80047da:	6213      	str	r3, [r2, #32]
 80047dc:	e020      	b.n	8004820 <HAL_RCC_OscConfig+0x9ac>
 80047de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	2b05      	cmp	r3, #5
 80047ec:	d10c      	bne.n	8004808 <HAL_RCC_OscConfig+0x994>
 80047ee:	4bb7      	ldr	r3, [pc, #732]	; (8004acc <HAL_RCC_OscConfig+0xc58>)
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	4ab6      	ldr	r2, [pc, #728]	; (8004acc <HAL_RCC_OscConfig+0xc58>)
 80047f4:	f043 0304 	orr.w	r3, r3, #4
 80047f8:	6213      	str	r3, [r2, #32]
 80047fa:	4bb4      	ldr	r3, [pc, #720]	; (8004acc <HAL_RCC_OscConfig+0xc58>)
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	4ab3      	ldr	r2, [pc, #716]	; (8004acc <HAL_RCC_OscConfig+0xc58>)
 8004800:	f043 0301 	orr.w	r3, r3, #1
 8004804:	6213      	str	r3, [r2, #32]
 8004806:	e00b      	b.n	8004820 <HAL_RCC_OscConfig+0x9ac>
 8004808:	4bb0      	ldr	r3, [pc, #704]	; (8004acc <HAL_RCC_OscConfig+0xc58>)
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	4aaf      	ldr	r2, [pc, #700]	; (8004acc <HAL_RCC_OscConfig+0xc58>)
 800480e:	f023 0301 	bic.w	r3, r3, #1
 8004812:	6213      	str	r3, [r2, #32]
 8004814:	4bad      	ldr	r3, [pc, #692]	; (8004acc <HAL_RCC_OscConfig+0xc58>)
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	4aac      	ldr	r2, [pc, #688]	; (8004acc <HAL_RCC_OscConfig+0xc58>)
 800481a:	f023 0304 	bic.w	r3, r3, #4
 800481e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004824:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 8081 	beq.w	8004934 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004832:	f7fd faf1 	bl	8001e18 <HAL_GetTick>
 8004836:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800483a:	e00b      	b.n	8004854 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800483c:	f7fd faec 	bl	8001e18 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	f241 3288 	movw	r2, #5000	; 0x1388
 800484c:	4293      	cmp	r3, r2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e345      	b.n	8004ee0 <HAL_RCC_OscConfig+0x106c>
 8004854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004858:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800485c:	2202      	movs	r2, #2
 800485e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004864:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	fa93 f2a3 	rbit	r2, r3
 800486e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004872:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800487c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004880:	2202      	movs	r2, #2
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004888:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	fa93 f2a3 	rbit	r2, r3
 8004892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004896:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800489a:	601a      	str	r2, [r3, #0]
  return result;
 800489c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80048a4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a6:	fab3 f383 	clz	r3, r3
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	095b      	lsrs	r3, r3, #5
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	f043 0302 	orr.w	r3, r3, #2
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d102      	bne.n	80048c0 <HAL_RCC_OscConfig+0xa4c>
 80048ba:	4b84      	ldr	r3, [pc, #528]	; (8004acc <HAL_RCC_OscConfig+0xc58>)
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	e013      	b.n	80048e8 <HAL_RCC_OscConfig+0xa74>
 80048c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80048c8:	2202      	movs	r2, #2
 80048ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048d0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	fa93 f2a3 	rbit	r2, r3
 80048da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048de:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	4b79      	ldr	r3, [pc, #484]	; (8004acc <HAL_RCC_OscConfig+0xc58>)
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048ec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80048f0:	2102      	movs	r1, #2
 80048f2:	6011      	str	r1, [r2, #0]
 80048f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048f8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80048fc:	6812      	ldr	r2, [r2, #0]
 80048fe:	fa92 f1a2 	rbit	r1, r2
 8004902:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004906:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800490a:	6011      	str	r1, [r2, #0]
  return result;
 800490c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004910:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004914:	6812      	ldr	r2, [r2, #0]
 8004916:	fab2 f282 	clz	r2, r2
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004920:	b2d2      	uxtb	r2, r2
 8004922:	f002 021f 	and.w	r2, r2, #31
 8004926:	2101      	movs	r1, #1
 8004928:	fa01 f202 	lsl.w	r2, r1, r2
 800492c:	4013      	ands	r3, r2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d084      	beq.n	800483c <HAL_RCC_OscConfig+0x9c8>
 8004932:	e07f      	b.n	8004a34 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004934:	f7fd fa70 	bl	8001e18 <HAL_GetTick>
 8004938:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800493c:	e00b      	b.n	8004956 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800493e:	f7fd fa6b 	bl	8001e18 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	f241 3288 	movw	r2, #5000	; 0x1388
 800494e:	4293      	cmp	r3, r2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e2c4      	b.n	8004ee0 <HAL_RCC_OscConfig+0x106c>
 8004956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800495a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800495e:	2202      	movs	r2, #2
 8004960:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004966:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	fa93 f2a3 	rbit	r2, r3
 8004970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004974:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800497e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004982:	2202      	movs	r2, #2
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800498a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	fa93 f2a3 	rbit	r2, r3
 8004994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004998:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800499c:	601a      	str	r2, [r3, #0]
  return result;
 800499e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80049a6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049a8:	fab3 f383 	clz	r3, r3
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	f043 0302 	orr.w	r3, r3, #2
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d102      	bne.n	80049c2 <HAL_RCC_OscConfig+0xb4e>
 80049bc:	4b43      	ldr	r3, [pc, #268]	; (8004acc <HAL_RCC_OscConfig+0xc58>)
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	e013      	b.n	80049ea <HAL_RCC_OscConfig+0xb76>
 80049c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80049ca:	2202      	movs	r2, #2
 80049cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049d2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	fa93 f2a3 	rbit	r2, r3
 80049dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	4b39      	ldr	r3, [pc, #228]	; (8004acc <HAL_RCC_OscConfig+0xc58>)
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049ee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80049f2:	2102      	movs	r1, #2
 80049f4:	6011      	str	r1, [r2, #0]
 80049f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049fa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80049fe:	6812      	ldr	r2, [r2, #0]
 8004a00:	fa92 f1a2 	rbit	r1, r2
 8004a04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a08:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004a0c:	6011      	str	r1, [r2, #0]
  return result;
 8004a0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a12:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004a16:	6812      	ldr	r2, [r2, #0]
 8004a18:	fab2 f282 	clz	r2, r2
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	f002 021f 	and.w	r2, r2, #31
 8004a28:	2101      	movs	r1, #1
 8004a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a2e:	4013      	ands	r3, r2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d184      	bne.n	800493e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a34:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d105      	bne.n	8004a48 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a3c:	4b23      	ldr	r3, [pc, #140]	; (8004acc <HAL_RCC_OscConfig+0xc58>)
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	4a22      	ldr	r2, [pc, #136]	; (8004acc <HAL_RCC_OscConfig+0xc58>)
 8004a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a46:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 8242 	beq.w	8004ede <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a5a:	4b1c      	ldr	r3, [pc, #112]	; (8004acc <HAL_RCC_OscConfig+0xc58>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f003 030c 	and.w	r3, r3, #12
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	f000 8213 	beq.w	8004e8e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69db      	ldr	r3, [r3, #28]
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	f040 8162 	bne.w	8004d3e <HAL_RCC_OscConfig+0xeca>
 8004a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a7e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004a82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a8c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	fa93 f2a3 	rbit	r2, r3
 8004a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a9a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004a9e:	601a      	str	r2, [r3, #0]
  return result;
 8004aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004aa8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aaa:	fab3 f383 	clz	r3, r3
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ab4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	461a      	mov	r2, r3
 8004abc:	2300      	movs	r3, #0
 8004abe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac0:	f7fd f9aa 	bl	8001e18 <HAL_GetTick>
 8004ac4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ac8:	e00c      	b.n	8004ae4 <HAL_RCC_OscConfig+0xc70>
 8004aca:	bf00      	nop
 8004acc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ad0:	f7fd f9a2 	bl	8001e18 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e1fd      	b.n	8004ee0 <HAL_RCC_OscConfig+0x106c>
 8004ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004aec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004af0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	fa93 f2a3 	rbit	r2, r3
 8004b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b04:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004b08:	601a      	str	r2, [r3, #0]
  return result;
 8004b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b0e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004b12:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b14:	fab3 f383 	clz	r3, r3
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	095b      	lsrs	r3, r3, #5
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	f043 0301 	orr.w	r3, r3, #1
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d102      	bne.n	8004b2e <HAL_RCC_OscConfig+0xcba>
 8004b28:	4bb0      	ldr	r3, [pc, #704]	; (8004dec <HAL_RCC_OscConfig+0xf78>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	e027      	b.n	8004b7e <HAL_RCC_OscConfig+0xd0a>
 8004b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b32:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004b36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b40:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	fa93 f2a3 	rbit	r2, r3
 8004b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b4e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b58:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004b5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b66:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	fa93 f2a3 	rbit	r2, r3
 8004b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b74:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	4b9c      	ldr	r3, [pc, #624]	; (8004dec <HAL_RCC_OscConfig+0xf78>)
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b82:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004b86:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b8a:	6011      	str	r1, [r2, #0]
 8004b8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b90:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004b94:	6812      	ldr	r2, [r2, #0]
 8004b96:	fa92 f1a2 	rbit	r1, r2
 8004b9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b9e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004ba2:	6011      	str	r1, [r2, #0]
  return result;
 8004ba4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ba8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004bac:	6812      	ldr	r2, [r2, #0]
 8004bae:	fab2 f282 	clz	r2, r2
 8004bb2:	b2d2      	uxtb	r2, r2
 8004bb4:	f042 0220 	orr.w	r2, r2, #32
 8004bb8:	b2d2      	uxtb	r2, r2
 8004bba:	f002 021f 	and.w	r2, r2, #31
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d182      	bne.n	8004ad0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bca:	4b88      	ldr	r3, [pc, #544]	; (8004dec <HAL_RCC_OscConfig+0xf78>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	430b      	orrs	r3, r1
 8004bec:	497f      	ldr	r1, [pc, #508]	; (8004dec <HAL_RCC_OscConfig+0xf78>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	604b      	str	r3, [r1, #4]
 8004bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bf6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004bfa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004bfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c04:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	fa93 f2a3 	rbit	r2, r3
 8004c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c12:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004c16:	601a      	str	r2, [r3, #0]
  return result;
 8004c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c1c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004c20:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c22:	fab3 f383 	clz	r3, r3
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	461a      	mov	r2, r3
 8004c34:	2301      	movs	r3, #1
 8004c36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c38:	f7fd f8ee 	bl	8001e18 <HAL_GetTick>
 8004c3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c40:	e009      	b.n	8004c56 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c42:	f7fd f8e9 	bl	8001e18 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e144      	b.n	8004ee0 <HAL_RCC_OscConfig+0x106c>
 8004c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c5a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004c5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c68:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	fa93 f2a3 	rbit	r2, r3
 8004c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c76:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004c7a:	601a      	str	r2, [r3, #0]
  return result;
 8004c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c80:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004c84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c86:	fab3 f383 	clz	r3, r3
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	095b      	lsrs	r3, r3, #5
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	f043 0301 	orr.w	r3, r3, #1
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d102      	bne.n	8004ca0 <HAL_RCC_OscConfig+0xe2c>
 8004c9a:	4b54      	ldr	r3, [pc, #336]	; (8004dec <HAL_RCC_OscConfig+0xf78>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	e027      	b.n	8004cf0 <HAL_RCC_OscConfig+0xe7c>
 8004ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ca4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004ca8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004cac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cb2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	fa93 f2a3 	rbit	r2, r3
 8004cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cc0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cca:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004cce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cd8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	fa93 f2a3 	rbit	r2, r3
 8004ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ce6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	4b3f      	ldr	r3, [pc, #252]	; (8004dec <HAL_RCC_OscConfig+0xf78>)
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cf4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004cf8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004cfc:	6011      	str	r1, [r2, #0]
 8004cfe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d02:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004d06:	6812      	ldr	r2, [r2, #0]
 8004d08:	fa92 f1a2 	rbit	r1, r2
 8004d0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d10:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004d14:	6011      	str	r1, [r2, #0]
  return result;
 8004d16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d1a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004d1e:	6812      	ldr	r2, [r2, #0]
 8004d20:	fab2 f282 	clz	r2, r2
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	f042 0220 	orr.w	r2, r2, #32
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	f002 021f 	and.w	r2, r2, #31
 8004d30:	2101      	movs	r1, #1
 8004d32:	fa01 f202 	lsl.w	r2, r1, r2
 8004d36:	4013      	ands	r3, r2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d082      	beq.n	8004c42 <HAL_RCC_OscConfig+0xdce>
 8004d3c:	e0cf      	b.n	8004ede <HAL_RCC_OscConfig+0x106a>
 8004d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d42:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004d46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d50:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	fa93 f2a3 	rbit	r2, r3
 8004d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d5e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004d62:	601a      	str	r2, [r3, #0]
  return result;
 8004d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d68:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004d6c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d6e:	fab3 f383 	clz	r3, r3
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	461a      	mov	r2, r3
 8004d80:	2300      	movs	r3, #0
 8004d82:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d84:	f7fd f848 	bl	8001e18 <HAL_GetTick>
 8004d88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d8c:	e009      	b.n	8004da2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d8e:	f7fd f843 	bl	8001e18 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e09e      	b.n	8004ee0 <HAL_RCC_OscConfig+0x106c>
 8004da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004da6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004daa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004db4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	fa93 f2a3 	rbit	r2, r3
 8004dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dc2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004dc6:	601a      	str	r2, [r3, #0]
  return result;
 8004dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dcc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004dd0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dd2:	fab3 f383 	clz	r3, r3
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	095b      	lsrs	r3, r3, #5
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	f043 0301 	orr.w	r3, r3, #1
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d104      	bne.n	8004df0 <HAL_RCC_OscConfig+0xf7c>
 8004de6:	4b01      	ldr	r3, [pc, #4]	; (8004dec <HAL_RCC_OscConfig+0xf78>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	e029      	b.n	8004e40 <HAL_RCC_OscConfig+0xfcc>
 8004dec:	40021000 	.word	0x40021000
 8004df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004df4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004df8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e02:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	fa93 f2a3 	rbit	r2, r3
 8004e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e10:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e1a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004e1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e28:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	fa93 f2a3 	rbit	r2, r3
 8004e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e36:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	4b2b      	ldr	r3, [pc, #172]	; (8004eec <HAL_RCC_OscConfig+0x1078>)
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e44:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004e48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004e4c:	6011      	str	r1, [r2, #0]
 8004e4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e52:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004e56:	6812      	ldr	r2, [r2, #0]
 8004e58:	fa92 f1a2 	rbit	r1, r2
 8004e5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e60:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004e64:	6011      	str	r1, [r2, #0]
  return result;
 8004e66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e6a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004e6e:	6812      	ldr	r2, [r2, #0]
 8004e70:	fab2 f282 	clz	r2, r2
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	f042 0220 	orr.w	r2, r2, #32
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	f002 021f 	and.w	r2, r2, #31
 8004e80:	2101      	movs	r1, #1
 8004e82:	fa01 f202 	lsl.w	r2, r1, r2
 8004e86:	4013      	ands	r3, r2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d180      	bne.n	8004d8e <HAL_RCC_OscConfig+0xf1a>
 8004e8c:	e027      	b.n	8004ede <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d101      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e01e      	b.n	8004ee0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ea2:	4b12      	ldr	r3, [pc, #72]	; (8004eec <HAL_RCC_OscConfig+0x1078>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004eaa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004eae:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d10b      	bne.n	8004eda <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004ec2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004ec6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ece:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d001      	beq.n	8004ede <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	40021000 	.word	0x40021000

08004ef0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b09e      	sub	sp, #120	; 0x78
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e162      	b.n	80051ce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f08:	4b90      	ldr	r3, [pc, #576]	; (800514c <HAL_RCC_ClockConfig+0x25c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d910      	bls.n	8004f38 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f16:	4b8d      	ldr	r3, [pc, #564]	; (800514c <HAL_RCC_ClockConfig+0x25c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f023 0207 	bic.w	r2, r3, #7
 8004f1e:	498b      	ldr	r1, [pc, #556]	; (800514c <HAL_RCC_ClockConfig+0x25c>)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f26:	4b89      	ldr	r3, [pc, #548]	; (800514c <HAL_RCC_ClockConfig+0x25c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d001      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e14a      	b.n	80051ce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d008      	beq.n	8004f56 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f44:	4b82      	ldr	r3, [pc, #520]	; (8005150 <HAL_RCC_ClockConfig+0x260>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	497f      	ldr	r1, [pc, #508]	; (8005150 <HAL_RCC_ClockConfig+0x260>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 80dc 	beq.w	800511c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d13c      	bne.n	8004fe6 <HAL_RCC_ClockConfig+0xf6>
 8004f6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f70:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f74:	fa93 f3a3 	rbit	r3, r3
 8004f78:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f7c:	fab3 f383 	clz	r3, r3
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	f043 0301 	orr.w	r3, r3, #1
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d102      	bne.n	8004f96 <HAL_RCC_ClockConfig+0xa6>
 8004f90:	4b6f      	ldr	r3, [pc, #444]	; (8005150 <HAL_RCC_ClockConfig+0x260>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	e00f      	b.n	8004fb6 <HAL_RCC_ClockConfig+0xc6>
 8004f96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f9e:	fa93 f3a3 	rbit	r3, r3
 8004fa2:	667b      	str	r3, [r7, #100]	; 0x64
 8004fa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fa8:	663b      	str	r3, [r7, #96]	; 0x60
 8004faa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fac:	fa93 f3a3 	rbit	r3, r3
 8004fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fb2:	4b67      	ldr	r3, [pc, #412]	; (8005150 <HAL_RCC_ClockConfig+0x260>)
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fba:	65ba      	str	r2, [r7, #88]	; 0x58
 8004fbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fbe:	fa92 f2a2 	rbit	r2, r2
 8004fc2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004fc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004fc6:	fab2 f282 	clz	r2, r2
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	f042 0220 	orr.w	r2, r2, #32
 8004fd0:	b2d2      	uxtb	r2, r2
 8004fd2:	f002 021f 	and.w	r2, r2, #31
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8004fdc:	4013      	ands	r3, r2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d17b      	bne.n	80050da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e0f3      	b.n	80051ce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d13c      	bne.n	8005068 <HAL_RCC_ClockConfig+0x178>
 8004fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ff2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ff6:	fa93 f3a3 	rbit	r3, r3
 8004ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ffe:	fab3 f383 	clz	r3, r3
 8005002:	b2db      	uxtb	r3, r3
 8005004:	095b      	lsrs	r3, r3, #5
 8005006:	b2db      	uxtb	r3, r3
 8005008:	f043 0301 	orr.w	r3, r3, #1
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b01      	cmp	r3, #1
 8005010:	d102      	bne.n	8005018 <HAL_RCC_ClockConfig+0x128>
 8005012:	4b4f      	ldr	r3, [pc, #316]	; (8005150 <HAL_RCC_ClockConfig+0x260>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	e00f      	b.n	8005038 <HAL_RCC_ClockConfig+0x148>
 8005018:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800501c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005020:	fa93 f3a3 	rbit	r3, r3
 8005024:	647b      	str	r3, [r7, #68]	; 0x44
 8005026:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800502a:	643b      	str	r3, [r7, #64]	; 0x40
 800502c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800502e:	fa93 f3a3 	rbit	r3, r3
 8005032:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005034:	4b46      	ldr	r3, [pc, #280]	; (8005150 <HAL_RCC_ClockConfig+0x260>)
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800503c:	63ba      	str	r2, [r7, #56]	; 0x38
 800503e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005040:	fa92 f2a2 	rbit	r2, r2
 8005044:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005048:	fab2 f282 	clz	r2, r2
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	f042 0220 	orr.w	r2, r2, #32
 8005052:	b2d2      	uxtb	r2, r2
 8005054:	f002 021f 	and.w	r2, r2, #31
 8005058:	2101      	movs	r1, #1
 800505a:	fa01 f202 	lsl.w	r2, r1, r2
 800505e:	4013      	ands	r3, r2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d13a      	bne.n	80050da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e0b2      	b.n	80051ce <HAL_RCC_ClockConfig+0x2de>
 8005068:	2302      	movs	r3, #2
 800506a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506e:	fa93 f3a3 	rbit	r3, r3
 8005072:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005076:	fab3 f383 	clz	r3, r3
 800507a:	b2db      	uxtb	r3, r3
 800507c:	095b      	lsrs	r3, r3, #5
 800507e:	b2db      	uxtb	r3, r3
 8005080:	f043 0301 	orr.w	r3, r3, #1
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b01      	cmp	r3, #1
 8005088:	d102      	bne.n	8005090 <HAL_RCC_ClockConfig+0x1a0>
 800508a:	4b31      	ldr	r3, [pc, #196]	; (8005150 <HAL_RCC_ClockConfig+0x260>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	e00d      	b.n	80050ac <HAL_RCC_ClockConfig+0x1bc>
 8005090:	2302      	movs	r3, #2
 8005092:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005096:	fa93 f3a3 	rbit	r3, r3
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
 800509c:	2302      	movs	r3, #2
 800509e:	623b      	str	r3, [r7, #32]
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	fa93 f3a3 	rbit	r3, r3
 80050a6:	61fb      	str	r3, [r7, #28]
 80050a8:	4b29      	ldr	r3, [pc, #164]	; (8005150 <HAL_RCC_ClockConfig+0x260>)
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	2202      	movs	r2, #2
 80050ae:	61ba      	str	r2, [r7, #24]
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	fa92 f2a2 	rbit	r2, r2
 80050b6:	617a      	str	r2, [r7, #20]
  return result;
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	fab2 f282 	clz	r2, r2
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	f042 0220 	orr.w	r2, r2, #32
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	f002 021f 	and.w	r2, r2, #31
 80050ca:	2101      	movs	r1, #1
 80050cc:	fa01 f202 	lsl.w	r2, r1, r2
 80050d0:	4013      	ands	r3, r2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e079      	b.n	80051ce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050da:	4b1d      	ldr	r3, [pc, #116]	; (8005150 <HAL_RCC_ClockConfig+0x260>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f023 0203 	bic.w	r2, r3, #3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	491a      	ldr	r1, [pc, #104]	; (8005150 <HAL_RCC_ClockConfig+0x260>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050ec:	f7fc fe94 	bl	8001e18 <HAL_GetTick>
 80050f0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f2:	e00a      	b.n	800510a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f4:	f7fc fe90 	bl	8001e18 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e061      	b.n	80051ce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510a:	4b11      	ldr	r3, [pc, #68]	; (8005150 <HAL_RCC_ClockConfig+0x260>)
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f003 020c 	and.w	r2, r3, #12
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	429a      	cmp	r2, r3
 800511a:	d1eb      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800511c:	4b0b      	ldr	r3, [pc, #44]	; (800514c <HAL_RCC_ClockConfig+0x25c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d214      	bcs.n	8005154 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512a:	4b08      	ldr	r3, [pc, #32]	; (800514c <HAL_RCC_ClockConfig+0x25c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f023 0207 	bic.w	r2, r3, #7
 8005132:	4906      	ldr	r1, [pc, #24]	; (800514c <HAL_RCC_ClockConfig+0x25c>)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	4313      	orrs	r3, r2
 8005138:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800513a:	4b04      	ldr	r3, [pc, #16]	; (800514c <HAL_RCC_ClockConfig+0x25c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	429a      	cmp	r2, r3
 8005146:	d005      	beq.n	8005154 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e040      	b.n	80051ce <HAL_RCC_ClockConfig+0x2de>
 800514c:	40022000 	.word	0x40022000
 8005150:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d008      	beq.n	8005172 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005160:	4b1d      	ldr	r3, [pc, #116]	; (80051d8 <HAL_RCC_ClockConfig+0x2e8>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	491a      	ldr	r1, [pc, #104]	; (80051d8 <HAL_RCC_ClockConfig+0x2e8>)
 800516e:	4313      	orrs	r3, r2
 8005170:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d009      	beq.n	8005192 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800517e:	4b16      	ldr	r3, [pc, #88]	; (80051d8 <HAL_RCC_ClockConfig+0x2e8>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	4912      	ldr	r1, [pc, #72]	; (80051d8 <HAL_RCC_ClockConfig+0x2e8>)
 800518e:	4313      	orrs	r3, r2
 8005190:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005192:	f000 f829 	bl	80051e8 <HAL_RCC_GetSysClockFreq>
 8005196:	4601      	mov	r1, r0
 8005198:	4b0f      	ldr	r3, [pc, #60]	; (80051d8 <HAL_RCC_ClockConfig+0x2e8>)
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051a0:	22f0      	movs	r2, #240	; 0xf0
 80051a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	fa92 f2a2 	rbit	r2, r2
 80051aa:	60fa      	str	r2, [r7, #12]
  return result;
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	fab2 f282 	clz	r2, r2
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	40d3      	lsrs	r3, r2
 80051b6:	4a09      	ldr	r2, [pc, #36]	; (80051dc <HAL_RCC_ClockConfig+0x2ec>)
 80051b8:	5cd3      	ldrb	r3, [r2, r3]
 80051ba:	fa21 f303 	lsr.w	r3, r1, r3
 80051be:	4a08      	ldr	r2, [pc, #32]	; (80051e0 <HAL_RCC_ClockConfig+0x2f0>)
 80051c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80051c2:	4b08      	ldr	r3, [pc, #32]	; (80051e4 <HAL_RCC_ClockConfig+0x2f4>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fc fde2 	bl	8001d90 <HAL_InitTick>
  
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3778      	adds	r7, #120	; 0x78
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	40021000 	.word	0x40021000
 80051dc:	0800b3d0 	.word	0x0800b3d0
 80051e0:	20000090 	.word	0x20000090
 80051e4:	20000094 	.word	0x20000094

080051e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b08b      	sub	sp, #44	; 0x2c
 80051ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	61fb      	str	r3, [r7, #28]
 80051f2:	2300      	movs	r3, #0
 80051f4:	61bb      	str	r3, [r7, #24]
 80051f6:	2300      	movs	r3, #0
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
 80051fa:	2300      	movs	r3, #0
 80051fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005202:	4b29      	ldr	r3, [pc, #164]	; (80052a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	f003 030c 	and.w	r3, r3, #12
 800520e:	2b04      	cmp	r3, #4
 8005210:	d002      	beq.n	8005218 <HAL_RCC_GetSysClockFreq+0x30>
 8005212:	2b08      	cmp	r3, #8
 8005214:	d003      	beq.n	800521e <HAL_RCC_GetSysClockFreq+0x36>
 8005216:	e03c      	b.n	8005292 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005218:	4b24      	ldr	r3, [pc, #144]	; (80052ac <HAL_RCC_GetSysClockFreq+0xc4>)
 800521a:	623b      	str	r3, [r7, #32]
      break;
 800521c:	e03c      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005224:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005228:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	fa92 f2a2 	rbit	r2, r2
 8005230:	607a      	str	r2, [r7, #4]
  return result;
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	fab2 f282 	clz	r2, r2
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	40d3      	lsrs	r3, r2
 800523c:	4a1c      	ldr	r2, [pc, #112]	; (80052b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800523e:	5cd3      	ldrb	r3, [r2, r3]
 8005240:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005242:	4b19      	ldr	r3, [pc, #100]	; (80052a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	220f      	movs	r2, #15
 800524c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	fa92 f2a2 	rbit	r2, r2
 8005254:	60fa      	str	r2, [r7, #12]
  return result;
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	fab2 f282 	clz	r2, r2
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	40d3      	lsrs	r3, r2
 8005260:	4a14      	ldr	r2, [pc, #80]	; (80052b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005262:	5cd3      	ldrb	r3, [r2, r3]
 8005264:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d008      	beq.n	8005282 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005270:	4a0e      	ldr	r2, [pc, #56]	; (80052ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	fbb2 f2f3 	udiv	r2, r2, r3
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	fb02 f303 	mul.w	r3, r2, r3
 800527e:	627b      	str	r3, [r7, #36]	; 0x24
 8005280:	e004      	b.n	800528c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	4a0c      	ldr	r2, [pc, #48]	; (80052b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005286:	fb02 f303 	mul.w	r3, r2, r3
 800528a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	623b      	str	r3, [r7, #32]
      break;
 8005290:	e002      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005292:	4b06      	ldr	r3, [pc, #24]	; (80052ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8005294:	623b      	str	r3, [r7, #32]
      break;
 8005296:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005298:	6a3b      	ldr	r3, [r7, #32]
}
 800529a:	4618      	mov	r0, r3
 800529c:	372c      	adds	r7, #44	; 0x2c
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40021000 	.word	0x40021000
 80052ac:	007a1200 	.word	0x007a1200
 80052b0:	0800b3e8 	.word	0x0800b3e8
 80052b4:	0800b3f8 	.word	0x0800b3f8
 80052b8:	003d0900 	.word	0x003d0900

080052bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052c0:	4b03      	ldr	r3, [pc, #12]	; (80052d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80052c2:	681b      	ldr	r3, [r3, #0]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	20000090 	.word	0x20000090

080052d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80052da:	f7ff ffef 	bl	80052bc <HAL_RCC_GetHCLKFreq>
 80052de:	4601      	mov	r1, r0
 80052e0:	4b0b      	ldr	r3, [pc, #44]	; (8005310 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052e8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80052ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	fa92 f2a2 	rbit	r2, r2
 80052f4:	603a      	str	r2, [r7, #0]
  return result;
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	fab2 f282 	clz	r2, r2
 80052fc:	b2d2      	uxtb	r2, r2
 80052fe:	40d3      	lsrs	r3, r2
 8005300:	4a04      	ldr	r2, [pc, #16]	; (8005314 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005302:	5cd3      	ldrb	r3, [r2, r3]
 8005304:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005308:	4618      	mov	r0, r3
 800530a:	3708      	adds	r7, #8
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40021000 	.word	0x40021000
 8005314:	0800b3e0 	.word	0x0800b3e0

08005318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800531e:	f7ff ffcd 	bl	80052bc <HAL_RCC_GetHCLKFreq>
 8005322:	4601      	mov	r1, r0
 8005324:	4b0b      	ldr	r3, [pc, #44]	; (8005354 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800532c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005330:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	fa92 f2a2 	rbit	r2, r2
 8005338:	603a      	str	r2, [r7, #0]
  return result;
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	fab2 f282 	clz	r2, r2
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	40d3      	lsrs	r3, r2
 8005344:	4a04      	ldr	r2, [pc, #16]	; (8005358 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005346:	5cd3      	ldrb	r3, [r2, r3]
 8005348:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800534c:	4618      	mov	r0, r3
 800534e:	3708      	adds	r7, #8
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40021000 	.word	0x40021000
 8005358:	0800b3e0 	.word	0x0800b3e0

0800535c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b092      	sub	sp, #72	; 0x48
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800536c:	2300      	movs	r3, #0
 800536e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 80d4 	beq.w	8005528 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005380:	4b4e      	ldr	r3, [pc, #312]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005382:	69db      	ldr	r3, [r3, #28]
 8005384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10e      	bne.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800538c:	4b4b      	ldr	r3, [pc, #300]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	4a4a      	ldr	r2, [pc, #296]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005396:	61d3      	str	r3, [r2, #28]
 8005398:	4b48      	ldr	r3, [pc, #288]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a0:	60bb      	str	r3, [r7, #8]
 80053a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053a4:	2301      	movs	r3, #1
 80053a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053aa:	4b45      	ldr	r3, [pc, #276]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d118      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053b6:	4b42      	ldr	r3, [pc, #264]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a41      	ldr	r2, [pc, #260]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053c2:	f7fc fd29 	bl	8001e18 <HAL_GetTick>
 80053c6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c8:	e008      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ca:	f7fc fd25 	bl	8001e18 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2b64      	cmp	r3, #100	; 0x64
 80053d6:	d901      	bls.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e169      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053dc:	4b38      	ldr	r3, [pc, #224]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0f0      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053e8:	4b34      	ldr	r3, [pc, #208]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 8084 	beq.w	8005502 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005402:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005404:	429a      	cmp	r2, r3
 8005406:	d07c      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005408:	4b2c      	ldr	r3, [pc, #176]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005410:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005412:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005416:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541a:	fa93 f3a3 	rbit	r3, r3
 800541e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005422:	fab3 f383 	clz	r3, r3
 8005426:	b2db      	uxtb	r3, r3
 8005428:	461a      	mov	r2, r3
 800542a:	4b26      	ldr	r3, [pc, #152]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800542c:	4413      	add	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	461a      	mov	r2, r3
 8005432:	2301      	movs	r3, #1
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800543a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800543c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543e:	fa93 f3a3 	rbit	r3, r3
 8005442:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005446:	fab3 f383 	clz	r3, r3
 800544a:	b2db      	uxtb	r3, r3
 800544c:	461a      	mov	r2, r3
 800544e:	4b1d      	ldr	r3, [pc, #116]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005450:	4413      	add	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	461a      	mov	r2, r3
 8005456:	2300      	movs	r3, #0
 8005458:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800545a:	4a18      	ldr	r2, [pc, #96]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800545c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800545e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d04b      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800546a:	f7fc fcd5 	bl	8001e18 <HAL_GetTick>
 800546e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005470:	e00a      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005472:	f7fc fcd1 	bl	8001e18 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005480:	4293      	cmp	r3, r2
 8005482:	d901      	bls.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e113      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005488:	2302      	movs	r3, #2
 800548a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548e:	fa93 f3a3 	rbit	r3, r3
 8005492:	627b      	str	r3, [r7, #36]	; 0x24
 8005494:	2302      	movs	r3, #2
 8005496:	623b      	str	r3, [r7, #32]
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	fa93 f3a3 	rbit	r3, r3
 800549e:	61fb      	str	r3, [r7, #28]
  return result;
 80054a0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054a2:	fab3 f383 	clz	r3, r3
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	095b      	lsrs	r3, r3, #5
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	f043 0302 	orr.w	r3, r3, #2
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d108      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80054b6:	4b01      	ldr	r3, [pc, #4]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	e00d      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80054bc:	40021000 	.word	0x40021000
 80054c0:	40007000 	.word	0x40007000
 80054c4:	10908100 	.word	0x10908100
 80054c8:	2302      	movs	r3, #2
 80054ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	fa93 f3a3 	rbit	r3, r3
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	4b78      	ldr	r3, [pc, #480]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	2202      	movs	r2, #2
 80054da:	613a      	str	r2, [r7, #16]
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	fa92 f2a2 	rbit	r2, r2
 80054e2:	60fa      	str	r2, [r7, #12]
  return result;
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	fab2 f282 	clz	r2, r2
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054f0:	b2d2      	uxtb	r2, r2
 80054f2:	f002 021f 	and.w	r2, r2, #31
 80054f6:	2101      	movs	r1, #1
 80054f8:	fa01 f202 	lsl.w	r2, r1, r2
 80054fc:	4013      	ands	r3, r2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0b7      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005502:	4b6d      	ldr	r3, [pc, #436]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	496a      	ldr	r1, [pc, #424]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005510:	4313      	orrs	r3, r2
 8005512:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005514:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005518:	2b01      	cmp	r3, #1
 800551a:	d105      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800551c:	4b66      	ldr	r3, [pc, #408]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800551e:	69db      	ldr	r3, [r3, #28]
 8005520:	4a65      	ldr	r2, [pc, #404]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005526:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b00      	cmp	r3, #0
 8005532:	d008      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005534:	4b60      	ldr	r3, [pc, #384]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	f023 0203 	bic.w	r2, r3, #3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	495d      	ldr	r1, [pc, #372]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005542:	4313      	orrs	r3, r2
 8005544:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d008      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005552:	4b59      	ldr	r3, [pc, #356]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005556:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	4956      	ldr	r1, [pc, #344]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005560:	4313      	orrs	r3, r2
 8005562:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b00      	cmp	r3, #0
 800556e:	d008      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005570:	4b51      	ldr	r3, [pc, #324]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005574:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	494e      	ldr	r1, [pc, #312]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800557e:	4313      	orrs	r3, r2
 8005580:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0320 	and.w	r3, r3, #32
 800558a:	2b00      	cmp	r3, #0
 800558c:	d008      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800558e:	4b4a      	ldr	r3, [pc, #296]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005592:	f023 0210 	bic.w	r2, r3, #16
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	4947      	ldr	r1, [pc, #284]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800559c:	4313      	orrs	r3, r2
 800559e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d008      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80055ac:	4b42      	ldr	r3, [pc, #264]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b8:	493f      	ldr	r1, [pc, #252]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d008      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055ca:	4b3b      	ldr	r3, [pc, #236]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ce:	f023 0220 	bic.w	r2, r3, #32
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	4938      	ldr	r1, [pc, #224]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0308 	and.w	r3, r3, #8
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d008      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055e8:	4b33      	ldr	r3, [pc, #204]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	4930      	ldr	r1, [pc, #192]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0310 	and.w	r3, r3, #16
 8005602:	2b00      	cmp	r3, #0
 8005604:	d008      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005606:	4b2c      	ldr	r3, [pc, #176]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	4929      	ldr	r1, [pc, #164]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005614:	4313      	orrs	r3, r2
 8005616:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005620:	2b00      	cmp	r3, #0
 8005622:	d008      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005624:	4b24      	ldr	r3, [pc, #144]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	4921      	ldr	r1, [pc, #132]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005632:	4313      	orrs	r3, r2
 8005634:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800563e:	2b00      	cmp	r3, #0
 8005640:	d008      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005642:	4b1d      	ldr	r3, [pc, #116]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005646:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	491a      	ldr	r1, [pc, #104]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005650:	4313      	orrs	r3, r2
 8005652:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565c:	2b00      	cmp	r3, #0
 800565e:	d008      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005660:	4b15      	ldr	r3, [pc, #84]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005664:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566c:	4912      	ldr	r1, [pc, #72]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800566e:	4313      	orrs	r3, r2
 8005670:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d008      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800567e:	4b0e      	ldr	r3, [pc, #56]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005682:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568a:	490b      	ldr	r1, [pc, #44]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800568c:	4313      	orrs	r3, r2
 800568e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d008      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800569c:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800569e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a8:	4903      	ldr	r1, [pc, #12]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3748      	adds	r7, #72	; 0x48
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	40021000 	.word	0x40021000

080056bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e09d      	b.n	800580a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d108      	bne.n	80056e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056de:	d009      	beq.n	80056f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	61da      	str	r2, [r3, #28]
 80056e6:	e005      	b.n	80056f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d106      	bne.n	8005714 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7fb ffd2 	bl	80016b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800572a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005734:	d902      	bls.n	800573c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005736:	2300      	movs	r3, #0
 8005738:	60fb      	str	r3, [r7, #12]
 800573a:	e002      	b.n	8005742 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800573c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005740:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800574a:	d007      	beq.n	800575c <HAL_SPI_Init+0xa0>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005754:	d002      	beq.n	800575c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	431a      	orrs	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005794:	431a      	orrs	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800579e:	ea42 0103 	orr.w	r1, r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	0c1b      	lsrs	r3, r3, #16
 80057b8:	f003 0204 	and.w	r2, r3, #4
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	f003 0310 	and.w	r3, r3, #16
 80057c4:	431a      	orrs	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ca:	f003 0308 	and.w	r3, r3, #8
 80057ce:	431a      	orrs	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80057d8:	ea42 0103 	orr.w	r1, r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	69da      	ldr	r2, [r3, #28]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b082      	sub	sp, #8
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e049      	b.n	80058b8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d106      	bne.n	800583e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7fb ff7f 	bl	800173c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2202      	movs	r2, #2
 8005842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	3304      	adds	r3, #4
 800584e:	4619      	mov	r1, r3
 8005850:	4610      	mov	r0, r2
 8005852:	f000 fd27 	bl	80062a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d001      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e04a      	b.n	800596e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68da      	ldr	r2, [r3, #12]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0201 	orr.w	r2, r2, #1
 80058ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a21      	ldr	r2, [pc, #132]	; (800597c <HAL_TIM_Base_Start_IT+0xbc>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d018      	beq.n	800592c <HAL_TIM_Base_Start_IT+0x6c>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005902:	d013      	beq.n	800592c <HAL_TIM_Base_Start_IT+0x6c>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a1d      	ldr	r2, [pc, #116]	; (8005980 <HAL_TIM_Base_Start_IT+0xc0>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00e      	beq.n	800592c <HAL_TIM_Base_Start_IT+0x6c>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a1c      	ldr	r2, [pc, #112]	; (8005984 <HAL_TIM_Base_Start_IT+0xc4>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d009      	beq.n	800592c <HAL_TIM_Base_Start_IT+0x6c>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a1a      	ldr	r2, [pc, #104]	; (8005988 <HAL_TIM_Base_Start_IT+0xc8>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d004      	beq.n	800592c <HAL_TIM_Base_Start_IT+0x6c>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a19      	ldr	r2, [pc, #100]	; (800598c <HAL_TIM_Base_Start_IT+0xcc>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d115      	bne.n	8005958 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	4b17      	ldr	r3, [pc, #92]	; (8005990 <HAL_TIM_Base_Start_IT+0xd0>)
 8005934:	4013      	ands	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2b06      	cmp	r3, #6
 800593c:	d015      	beq.n	800596a <HAL_TIM_Base_Start_IT+0xaa>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005944:	d011      	beq.n	800596a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f042 0201 	orr.w	r2, r2, #1
 8005954:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005956:	e008      	b.n	800596a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0201 	orr.w	r2, r2, #1
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	e000      	b.n	800596c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	40012c00 	.word	0x40012c00
 8005980:	40000400 	.word	0x40000400
 8005984:	40000800 	.word	0x40000800
 8005988:	40013400 	.word	0x40013400
 800598c:	40014000 	.word	0x40014000
 8005990:	00010007 	.word	0x00010007

08005994 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e049      	b.n	8005a3a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d106      	bne.n	80059c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f841 	bl	8005a42 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3304      	adds	r3, #4
 80059d0:	4619      	mov	r1, r3
 80059d2:	4610      	mov	r0, r2
 80059d4:	f000 fc66 	bl	80062a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a4a:	bf00      	nop
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
	...

08005a58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d109      	bne.n	8005a7c <HAL_TIM_PWM_Start+0x24>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	bf14      	ite	ne
 8005a74:	2301      	movne	r3, #1
 8005a76:	2300      	moveq	r3, #0
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	e03c      	b.n	8005af6 <HAL_TIM_PWM_Start+0x9e>
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d109      	bne.n	8005a96 <HAL_TIM_PWM_Start+0x3e>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	bf14      	ite	ne
 8005a8e:	2301      	movne	r3, #1
 8005a90:	2300      	moveq	r3, #0
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	e02f      	b.n	8005af6 <HAL_TIM_PWM_Start+0x9e>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d109      	bne.n	8005ab0 <HAL_TIM_PWM_Start+0x58>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	bf14      	ite	ne
 8005aa8:	2301      	movne	r3, #1
 8005aaa:	2300      	moveq	r3, #0
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	e022      	b.n	8005af6 <HAL_TIM_PWM_Start+0x9e>
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	2b0c      	cmp	r3, #12
 8005ab4:	d109      	bne.n	8005aca <HAL_TIM_PWM_Start+0x72>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	bf14      	ite	ne
 8005ac2:	2301      	movne	r3, #1
 8005ac4:	2300      	moveq	r3, #0
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	e015      	b.n	8005af6 <HAL_TIM_PWM_Start+0x9e>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b10      	cmp	r3, #16
 8005ace:	d109      	bne.n	8005ae4 <HAL_TIM_PWM_Start+0x8c>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	bf14      	ite	ne
 8005adc:	2301      	movne	r3, #1
 8005ade:	2300      	moveq	r3, #0
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	e008      	b.n	8005af6 <HAL_TIM_PWM_Start+0x9e>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	bf14      	ite	ne
 8005af0:	2301      	movne	r3, #1
 8005af2:	2300      	moveq	r3, #0
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e097      	b.n	8005c2e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d104      	bne.n	8005b0e <HAL_TIM_PWM_Start+0xb6>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b0c:	e023      	b.n	8005b56 <HAL_TIM_PWM_Start+0xfe>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b04      	cmp	r3, #4
 8005b12:	d104      	bne.n	8005b1e <HAL_TIM_PWM_Start+0xc6>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b1c:	e01b      	b.n	8005b56 <HAL_TIM_PWM_Start+0xfe>
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d104      	bne.n	8005b2e <HAL_TIM_PWM_Start+0xd6>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b2c:	e013      	b.n	8005b56 <HAL_TIM_PWM_Start+0xfe>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b0c      	cmp	r3, #12
 8005b32:	d104      	bne.n	8005b3e <HAL_TIM_PWM_Start+0xe6>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b3c:	e00b      	b.n	8005b56 <HAL_TIM_PWM_Start+0xfe>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b10      	cmp	r3, #16
 8005b42:	d104      	bne.n	8005b4e <HAL_TIM_PWM_Start+0xf6>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b4c:	e003      	b.n	8005b56 <HAL_TIM_PWM_Start+0xfe>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2202      	movs	r2, #2
 8005b52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	6839      	ldr	r1, [r7, #0]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 ffa0 	bl	8006aa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a33      	ldr	r2, [pc, #204]	; (8005c38 <HAL_TIM_PWM_Start+0x1e0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d013      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x13e>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a32      	ldr	r2, [pc, #200]	; (8005c3c <HAL_TIM_PWM_Start+0x1e4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d00e      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x13e>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a30      	ldr	r2, [pc, #192]	; (8005c40 <HAL_TIM_PWM_Start+0x1e8>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d009      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x13e>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a2f      	ldr	r2, [pc, #188]	; (8005c44 <HAL_TIM_PWM_Start+0x1ec>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d004      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x13e>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a2d      	ldr	r2, [pc, #180]	; (8005c48 <HAL_TIM_PWM_Start+0x1f0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d101      	bne.n	8005b9a <HAL_TIM_PWM_Start+0x142>
 8005b96:	2301      	movs	r3, #1
 8005b98:	e000      	b.n	8005b9c <HAL_TIM_PWM_Start+0x144>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d007      	beq.n	8005bb0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a20      	ldr	r2, [pc, #128]	; (8005c38 <HAL_TIM_PWM_Start+0x1e0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d018      	beq.n	8005bec <HAL_TIM_PWM_Start+0x194>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc2:	d013      	beq.n	8005bec <HAL_TIM_PWM_Start+0x194>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a20      	ldr	r2, [pc, #128]	; (8005c4c <HAL_TIM_PWM_Start+0x1f4>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00e      	beq.n	8005bec <HAL_TIM_PWM_Start+0x194>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a1f      	ldr	r2, [pc, #124]	; (8005c50 <HAL_TIM_PWM_Start+0x1f8>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d009      	beq.n	8005bec <HAL_TIM_PWM_Start+0x194>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a17      	ldr	r2, [pc, #92]	; (8005c3c <HAL_TIM_PWM_Start+0x1e4>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d004      	beq.n	8005bec <HAL_TIM_PWM_Start+0x194>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a16      	ldr	r2, [pc, #88]	; (8005c40 <HAL_TIM_PWM_Start+0x1e8>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d115      	bne.n	8005c18 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689a      	ldr	r2, [r3, #8]
 8005bf2:	4b18      	ldr	r3, [pc, #96]	; (8005c54 <HAL_TIM_PWM_Start+0x1fc>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b06      	cmp	r3, #6
 8005bfc:	d015      	beq.n	8005c2a <HAL_TIM_PWM_Start+0x1d2>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c04:	d011      	beq.n	8005c2a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f042 0201 	orr.w	r2, r2, #1
 8005c14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c16:	e008      	b.n	8005c2a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0201 	orr.w	r2, r2, #1
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	e000      	b.n	8005c2c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	40012c00 	.word	0x40012c00
 8005c3c:	40013400 	.word	0x40013400
 8005c40:	40014000 	.word	0x40014000
 8005c44:	40014400 	.word	0x40014400
 8005c48:	40014800 	.word	0x40014800
 8005c4c:	40000400 	.word	0x40000400
 8005c50:	40000800 	.word	0x40000800
 8005c54:	00010007 	.word	0x00010007

08005c58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d122      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d11b      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f06f 0202 	mvn.w	r2, #2
 8005c84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fae3 	bl	8006266 <HAL_TIM_IC_CaptureCallback>
 8005ca0:	e005      	b.n	8005cae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fad5 	bl	8006252 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fae6 	bl	800627a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f003 0304 	and.w	r3, r3, #4
 8005cbe:	2b04      	cmp	r3, #4
 8005cc0:	d122      	bne.n	8005d08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f003 0304 	and.w	r3, r3, #4
 8005ccc:	2b04      	cmp	r3, #4
 8005cce:	d11b      	bne.n	8005d08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f06f 0204 	mvn.w	r2, #4
 8005cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2202      	movs	r2, #2
 8005cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fab9 	bl	8006266 <HAL_TIM_IC_CaptureCallback>
 8005cf4:	e005      	b.n	8005d02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 faab 	bl	8006252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fabc 	bl	800627a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	f003 0308 	and.w	r3, r3, #8
 8005d12:	2b08      	cmp	r3, #8
 8005d14:	d122      	bne.n	8005d5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f003 0308 	and.w	r3, r3, #8
 8005d20:	2b08      	cmp	r3, #8
 8005d22:	d11b      	bne.n	8005d5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f06f 0208 	mvn.w	r2, #8
 8005d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2204      	movs	r2, #4
 8005d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	f003 0303 	and.w	r3, r3, #3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fa8f 	bl	8006266 <HAL_TIM_IC_CaptureCallback>
 8005d48:	e005      	b.n	8005d56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fa81 	bl	8006252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 fa92 	bl	800627a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f003 0310 	and.w	r3, r3, #16
 8005d66:	2b10      	cmp	r3, #16
 8005d68:	d122      	bne.n	8005db0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f003 0310 	and.w	r3, r3, #16
 8005d74:	2b10      	cmp	r3, #16
 8005d76:	d11b      	bne.n	8005db0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f06f 0210 	mvn.w	r2, #16
 8005d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2208      	movs	r2, #8
 8005d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fa65 	bl	8006266 <HAL_TIM_IC_CaptureCallback>
 8005d9c:	e005      	b.n	8005daa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fa57 	bl	8006252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fa68 	bl	800627a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d10e      	bne.n	8005ddc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d107      	bne.n	8005ddc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f06f 0201 	mvn.w	r2, #1
 8005dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7fb fb44 	bl	8001464 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de6:	2b80      	cmp	r3, #128	; 0x80
 8005de8:	d10e      	bne.n	8005e08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df4:	2b80      	cmp	r3, #128	; 0x80
 8005df6:	d107      	bne.n	8005e08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fefe 	bl	8006c04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e16:	d10e      	bne.n	8005e36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e22:	2b80      	cmp	r3, #128	; 0x80
 8005e24:	d107      	bne.n	8005e36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 fef1 	bl	8006c18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e40:	2b40      	cmp	r3, #64	; 0x40
 8005e42:	d10e      	bne.n	8005e62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4e:	2b40      	cmp	r3, #64	; 0x40
 8005e50:	d107      	bne.n	8005e62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fa16 	bl	800628e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	f003 0320 	and.w	r3, r3, #32
 8005e6c:	2b20      	cmp	r3, #32
 8005e6e:	d10e      	bne.n	8005e8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f003 0320 	and.w	r3, r3, #32
 8005e7a:	2b20      	cmp	r3, #32
 8005e7c:	d107      	bne.n	8005e8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f06f 0220 	mvn.w	r2, #32
 8005e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 feb1 	bl	8006bf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e8e:	bf00      	nop
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d101      	bne.n	8005eb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	e0ff      	b.n	80060b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b14      	cmp	r3, #20
 8005ec2:	f200 80f0 	bhi.w	80060a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005ec6:	a201      	add	r2, pc, #4	; (adr r2, 8005ecc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ecc:	08005f21 	.word	0x08005f21
 8005ed0:	080060a7 	.word	0x080060a7
 8005ed4:	080060a7 	.word	0x080060a7
 8005ed8:	080060a7 	.word	0x080060a7
 8005edc:	08005f61 	.word	0x08005f61
 8005ee0:	080060a7 	.word	0x080060a7
 8005ee4:	080060a7 	.word	0x080060a7
 8005ee8:	080060a7 	.word	0x080060a7
 8005eec:	08005fa3 	.word	0x08005fa3
 8005ef0:	080060a7 	.word	0x080060a7
 8005ef4:	080060a7 	.word	0x080060a7
 8005ef8:	080060a7 	.word	0x080060a7
 8005efc:	08005fe3 	.word	0x08005fe3
 8005f00:	080060a7 	.word	0x080060a7
 8005f04:	080060a7 	.word	0x080060a7
 8005f08:	080060a7 	.word	0x080060a7
 8005f0c:	08006025 	.word	0x08006025
 8005f10:	080060a7 	.word	0x080060a7
 8005f14:	080060a7 	.word	0x080060a7
 8005f18:	080060a7 	.word	0x080060a7
 8005f1c:	08006065 	.word	0x08006065
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68b9      	ldr	r1, [r7, #8]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 fa4c 	bl	80063c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	699a      	ldr	r2, [r3, #24]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0208 	orr.w	r2, r2, #8
 8005f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699a      	ldr	r2, [r3, #24]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 0204 	bic.w	r2, r2, #4
 8005f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6999      	ldr	r1, [r3, #24]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	691a      	ldr	r2, [r3, #16]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	619a      	str	r2, [r3, #24]
      break;
 8005f5e:	e0a5      	b.n	80060ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68b9      	ldr	r1, [r7, #8]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 fabc 	bl	80064e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	699a      	ldr	r2, [r3, #24]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	699a      	ldr	r2, [r3, #24]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6999      	ldr	r1, [r3, #24]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	021a      	lsls	r2, r3, #8
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	619a      	str	r2, [r3, #24]
      break;
 8005fa0:	e084      	b.n	80060ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 fb25 	bl	80065f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	69da      	ldr	r2, [r3, #28]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f042 0208 	orr.w	r2, r2, #8
 8005fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69da      	ldr	r2, [r3, #28]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 0204 	bic.w	r2, r2, #4
 8005fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69d9      	ldr	r1, [r3, #28]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	691a      	ldr	r2, [r3, #16]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	61da      	str	r2, [r3, #28]
      break;
 8005fe0:	e064      	b.n	80060ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68b9      	ldr	r1, [r7, #8]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fb8d 	bl	8006708 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	69da      	ldr	r2, [r3, #28]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	69da      	ldr	r2, [r3, #28]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800600c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69d9      	ldr	r1, [r3, #28]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	021a      	lsls	r2, r3, #8
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	61da      	str	r2, [r3, #28]
      break;
 8006022:	e043      	b.n	80060ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68b9      	ldr	r1, [r7, #8]
 800602a:	4618      	mov	r0, r3
 800602c:	f000 fbd6 	bl	80067dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f042 0208 	orr.w	r2, r2, #8
 800603e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 0204 	bic.w	r2, r2, #4
 800604e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	691a      	ldr	r2, [r3, #16]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006062:	e023      	b.n	80060ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68b9      	ldr	r1, [r7, #8]
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fc1a 	bl	80068a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800607e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800608e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	021a      	lsls	r2, r3, #8
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80060a4:	e002      	b.n	80060ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	75fb      	strb	r3, [r7, #23]
      break;
 80060aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3718      	adds	r7, #24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop

080060c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d101      	bne.n	80060dc <HAL_TIM_ConfigClockSource+0x1c>
 80060d8:	2302      	movs	r3, #2
 80060da:	e0b6      	b.n	800624a <HAL_TIM_ConfigClockSource+0x18a>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006106:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006118:	d03e      	beq.n	8006198 <HAL_TIM_ConfigClockSource+0xd8>
 800611a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800611e:	f200 8087 	bhi.w	8006230 <HAL_TIM_ConfigClockSource+0x170>
 8006122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006126:	f000 8086 	beq.w	8006236 <HAL_TIM_ConfigClockSource+0x176>
 800612a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800612e:	d87f      	bhi.n	8006230 <HAL_TIM_ConfigClockSource+0x170>
 8006130:	2b70      	cmp	r3, #112	; 0x70
 8006132:	d01a      	beq.n	800616a <HAL_TIM_ConfigClockSource+0xaa>
 8006134:	2b70      	cmp	r3, #112	; 0x70
 8006136:	d87b      	bhi.n	8006230 <HAL_TIM_ConfigClockSource+0x170>
 8006138:	2b60      	cmp	r3, #96	; 0x60
 800613a:	d050      	beq.n	80061de <HAL_TIM_ConfigClockSource+0x11e>
 800613c:	2b60      	cmp	r3, #96	; 0x60
 800613e:	d877      	bhi.n	8006230 <HAL_TIM_ConfigClockSource+0x170>
 8006140:	2b50      	cmp	r3, #80	; 0x50
 8006142:	d03c      	beq.n	80061be <HAL_TIM_ConfigClockSource+0xfe>
 8006144:	2b50      	cmp	r3, #80	; 0x50
 8006146:	d873      	bhi.n	8006230 <HAL_TIM_ConfigClockSource+0x170>
 8006148:	2b40      	cmp	r3, #64	; 0x40
 800614a:	d058      	beq.n	80061fe <HAL_TIM_ConfigClockSource+0x13e>
 800614c:	2b40      	cmp	r3, #64	; 0x40
 800614e:	d86f      	bhi.n	8006230 <HAL_TIM_ConfigClockSource+0x170>
 8006150:	2b30      	cmp	r3, #48	; 0x30
 8006152:	d064      	beq.n	800621e <HAL_TIM_ConfigClockSource+0x15e>
 8006154:	2b30      	cmp	r3, #48	; 0x30
 8006156:	d86b      	bhi.n	8006230 <HAL_TIM_ConfigClockSource+0x170>
 8006158:	2b20      	cmp	r3, #32
 800615a:	d060      	beq.n	800621e <HAL_TIM_ConfigClockSource+0x15e>
 800615c:	2b20      	cmp	r3, #32
 800615e:	d867      	bhi.n	8006230 <HAL_TIM_ConfigClockSource+0x170>
 8006160:	2b00      	cmp	r3, #0
 8006162:	d05c      	beq.n	800621e <HAL_TIM_ConfigClockSource+0x15e>
 8006164:	2b10      	cmp	r3, #16
 8006166:	d05a      	beq.n	800621e <HAL_TIM_ConfigClockSource+0x15e>
 8006168:	e062      	b.n	8006230 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6818      	ldr	r0, [r3, #0]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	6899      	ldr	r1, [r3, #8]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f000 fc73 	bl	8006a64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800618c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	609a      	str	r2, [r3, #8]
      break;
 8006196:	e04f      	b.n	8006238 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6818      	ldr	r0, [r3, #0]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	6899      	ldr	r1, [r3, #8]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f000 fc5c 	bl	8006a64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061ba:	609a      	str	r2, [r3, #8]
      break;
 80061bc:	e03c      	b.n	8006238 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6818      	ldr	r0, [r3, #0]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	6859      	ldr	r1, [r3, #4]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	461a      	mov	r2, r3
 80061cc:	f000 fbd0 	bl	8006970 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2150      	movs	r1, #80	; 0x50
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 fc29 	bl	8006a2e <TIM_ITRx_SetConfig>
      break;
 80061dc:	e02c      	b.n	8006238 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6818      	ldr	r0, [r3, #0]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	6859      	ldr	r1, [r3, #4]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	461a      	mov	r2, r3
 80061ec:	f000 fbef 	bl	80069ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2160      	movs	r1, #96	; 0x60
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 fc19 	bl	8006a2e <TIM_ITRx_SetConfig>
      break;
 80061fc:	e01c      	b.n	8006238 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6818      	ldr	r0, [r3, #0]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	6859      	ldr	r1, [r3, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	461a      	mov	r2, r3
 800620c:	f000 fbb0 	bl	8006970 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2140      	movs	r1, #64	; 0x40
 8006216:	4618      	mov	r0, r3
 8006218:	f000 fc09 	bl	8006a2e <TIM_ITRx_SetConfig>
      break;
 800621c:	e00c      	b.n	8006238 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4619      	mov	r1, r3
 8006228:	4610      	mov	r0, r2
 800622a:	f000 fc00 	bl	8006a2e <TIM_ITRx_SetConfig>
      break;
 800622e:	e003      	b.n	8006238 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	73fb      	strb	r3, [r7, #15]
      break;
 8006234:	e000      	b.n	8006238 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006236:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006248:	7bfb      	ldrb	r3, [r7, #15]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800625a:	bf00      	nop
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006266:	b480      	push	{r7}
 8006268:	b083      	sub	sp, #12
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800626e:	bf00      	nop
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800627a:	b480      	push	{r7}
 800627c:	b083      	sub	sp, #12
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006282:	bf00      	nop
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800628e:	b480      	push	{r7}
 8006290:	b083      	sub	sp, #12
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
	...

080062a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a3c      	ldr	r2, [pc, #240]	; (80063a8 <TIM_Base_SetConfig+0x104>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d00f      	beq.n	80062dc <TIM_Base_SetConfig+0x38>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c2:	d00b      	beq.n	80062dc <TIM_Base_SetConfig+0x38>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a39      	ldr	r2, [pc, #228]	; (80063ac <TIM_Base_SetConfig+0x108>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d007      	beq.n	80062dc <TIM_Base_SetConfig+0x38>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a38      	ldr	r2, [pc, #224]	; (80063b0 <TIM_Base_SetConfig+0x10c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d003      	beq.n	80062dc <TIM_Base_SetConfig+0x38>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a37      	ldr	r2, [pc, #220]	; (80063b4 <TIM_Base_SetConfig+0x110>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d108      	bne.n	80062ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a2d      	ldr	r2, [pc, #180]	; (80063a8 <TIM_Base_SetConfig+0x104>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d01b      	beq.n	800632e <TIM_Base_SetConfig+0x8a>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062fc:	d017      	beq.n	800632e <TIM_Base_SetConfig+0x8a>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a2a      	ldr	r2, [pc, #168]	; (80063ac <TIM_Base_SetConfig+0x108>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d013      	beq.n	800632e <TIM_Base_SetConfig+0x8a>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a29      	ldr	r2, [pc, #164]	; (80063b0 <TIM_Base_SetConfig+0x10c>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d00f      	beq.n	800632e <TIM_Base_SetConfig+0x8a>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a28      	ldr	r2, [pc, #160]	; (80063b4 <TIM_Base_SetConfig+0x110>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d00b      	beq.n	800632e <TIM_Base_SetConfig+0x8a>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a27      	ldr	r2, [pc, #156]	; (80063b8 <TIM_Base_SetConfig+0x114>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d007      	beq.n	800632e <TIM_Base_SetConfig+0x8a>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a26      	ldr	r2, [pc, #152]	; (80063bc <TIM_Base_SetConfig+0x118>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d003      	beq.n	800632e <TIM_Base_SetConfig+0x8a>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a25      	ldr	r2, [pc, #148]	; (80063c0 <TIM_Base_SetConfig+0x11c>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d108      	bne.n	8006340 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a10      	ldr	r2, [pc, #64]	; (80063a8 <TIM_Base_SetConfig+0x104>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d00f      	beq.n	800638c <TIM_Base_SetConfig+0xe8>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a11      	ldr	r2, [pc, #68]	; (80063b4 <TIM_Base_SetConfig+0x110>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d00b      	beq.n	800638c <TIM_Base_SetConfig+0xe8>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a10      	ldr	r2, [pc, #64]	; (80063b8 <TIM_Base_SetConfig+0x114>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d007      	beq.n	800638c <TIM_Base_SetConfig+0xe8>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a0f      	ldr	r2, [pc, #60]	; (80063bc <TIM_Base_SetConfig+0x118>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d003      	beq.n	800638c <TIM_Base_SetConfig+0xe8>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a0e      	ldr	r2, [pc, #56]	; (80063c0 <TIM_Base_SetConfig+0x11c>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d103      	bne.n	8006394 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	691a      	ldr	r2, [r3, #16]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	615a      	str	r2, [r3, #20]
}
 800639a:	bf00      	nop
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	40012c00 	.word	0x40012c00
 80063ac:	40000400 	.word	0x40000400
 80063b0:	40000800 	.word	0x40000800
 80063b4:	40013400 	.word	0x40013400
 80063b8:	40014000 	.word	0x40014000
 80063bc:	40014400 	.word	0x40014400
 80063c0:	40014800 	.word	0x40014800

080063c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	f023 0201 	bic.w	r2, r3, #1
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f023 0303 	bic.w	r3, r3, #3
 80063fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	4313      	orrs	r3, r2
 8006408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f023 0302 	bic.w	r3, r3, #2
 8006410:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	4313      	orrs	r3, r2
 800641a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a2c      	ldr	r2, [pc, #176]	; (80064d0 <TIM_OC1_SetConfig+0x10c>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d00f      	beq.n	8006444 <TIM_OC1_SetConfig+0x80>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a2b      	ldr	r2, [pc, #172]	; (80064d4 <TIM_OC1_SetConfig+0x110>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d00b      	beq.n	8006444 <TIM_OC1_SetConfig+0x80>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a2a      	ldr	r2, [pc, #168]	; (80064d8 <TIM_OC1_SetConfig+0x114>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d007      	beq.n	8006444 <TIM_OC1_SetConfig+0x80>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a29      	ldr	r2, [pc, #164]	; (80064dc <TIM_OC1_SetConfig+0x118>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d003      	beq.n	8006444 <TIM_OC1_SetConfig+0x80>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a28      	ldr	r2, [pc, #160]	; (80064e0 <TIM_OC1_SetConfig+0x11c>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d10c      	bne.n	800645e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f023 0308 	bic.w	r3, r3, #8
 800644a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f023 0304 	bic.w	r3, r3, #4
 800645c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a1b      	ldr	r2, [pc, #108]	; (80064d0 <TIM_OC1_SetConfig+0x10c>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d00f      	beq.n	8006486 <TIM_OC1_SetConfig+0xc2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a1a      	ldr	r2, [pc, #104]	; (80064d4 <TIM_OC1_SetConfig+0x110>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d00b      	beq.n	8006486 <TIM_OC1_SetConfig+0xc2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a19      	ldr	r2, [pc, #100]	; (80064d8 <TIM_OC1_SetConfig+0x114>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d007      	beq.n	8006486 <TIM_OC1_SetConfig+0xc2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a18      	ldr	r2, [pc, #96]	; (80064dc <TIM_OC1_SetConfig+0x118>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d003      	beq.n	8006486 <TIM_OC1_SetConfig+0xc2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a17      	ldr	r2, [pc, #92]	; (80064e0 <TIM_OC1_SetConfig+0x11c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d111      	bne.n	80064aa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800648c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	4313      	orrs	r3, r2
 800649e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	621a      	str	r2, [r3, #32]
}
 80064c4:	bf00      	nop
 80064c6:	371c      	adds	r7, #28
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	40012c00 	.word	0x40012c00
 80064d4:	40013400 	.word	0x40013400
 80064d8:	40014000 	.word	0x40014000
 80064dc:	40014400 	.word	0x40014400
 80064e0:	40014800 	.word	0x40014800

080064e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	f023 0210 	bic.w	r2, r3, #16
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800651e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	021b      	lsls	r3, r3, #8
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	4313      	orrs	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f023 0320 	bic.w	r3, r3, #32
 8006532:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	011b      	lsls	r3, r3, #4
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	4313      	orrs	r3, r2
 800653e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a28      	ldr	r2, [pc, #160]	; (80065e4 <TIM_OC2_SetConfig+0x100>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d003      	beq.n	8006550 <TIM_OC2_SetConfig+0x6c>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a27      	ldr	r2, [pc, #156]	; (80065e8 <TIM_OC2_SetConfig+0x104>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d10d      	bne.n	800656c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006556:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	011b      	lsls	r3, r3, #4
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	4313      	orrs	r3, r2
 8006562:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800656a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a1d      	ldr	r2, [pc, #116]	; (80065e4 <TIM_OC2_SetConfig+0x100>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d00f      	beq.n	8006594 <TIM_OC2_SetConfig+0xb0>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a1c      	ldr	r2, [pc, #112]	; (80065e8 <TIM_OC2_SetConfig+0x104>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d00b      	beq.n	8006594 <TIM_OC2_SetConfig+0xb0>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a1b      	ldr	r2, [pc, #108]	; (80065ec <TIM_OC2_SetConfig+0x108>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d007      	beq.n	8006594 <TIM_OC2_SetConfig+0xb0>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a1a      	ldr	r2, [pc, #104]	; (80065f0 <TIM_OC2_SetConfig+0x10c>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d003      	beq.n	8006594 <TIM_OC2_SetConfig+0xb0>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a19      	ldr	r2, [pc, #100]	; (80065f4 <TIM_OC2_SetConfig+0x110>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d113      	bne.n	80065bc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800659a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065a2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	621a      	str	r2, [r3, #32]
}
 80065d6:	bf00      	nop
 80065d8:	371c      	adds	r7, #28
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	40012c00 	.word	0x40012c00
 80065e8:	40013400 	.word	0x40013400
 80065ec:	40014000 	.word	0x40014000
 80065f0:	40014400 	.word	0x40014400
 80065f4:	40014800 	.word	0x40014800

080065f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	69db      	ldr	r3, [r3, #28]
 800661e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f023 0303 	bic.w	r3, r3, #3
 8006632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	021b      	lsls	r3, r3, #8
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	4313      	orrs	r3, r2
 8006650:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a27      	ldr	r2, [pc, #156]	; (80066f4 <TIM_OC3_SetConfig+0xfc>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d003      	beq.n	8006662 <TIM_OC3_SetConfig+0x6a>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a26      	ldr	r2, [pc, #152]	; (80066f8 <TIM_OC3_SetConfig+0x100>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d10d      	bne.n	800667e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006668:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	021b      	lsls	r3, r3, #8
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	4313      	orrs	r3, r2
 8006674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800667c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a1c      	ldr	r2, [pc, #112]	; (80066f4 <TIM_OC3_SetConfig+0xfc>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d00f      	beq.n	80066a6 <TIM_OC3_SetConfig+0xae>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a1b      	ldr	r2, [pc, #108]	; (80066f8 <TIM_OC3_SetConfig+0x100>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d00b      	beq.n	80066a6 <TIM_OC3_SetConfig+0xae>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a1a      	ldr	r2, [pc, #104]	; (80066fc <TIM_OC3_SetConfig+0x104>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d007      	beq.n	80066a6 <TIM_OC3_SetConfig+0xae>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a19      	ldr	r2, [pc, #100]	; (8006700 <TIM_OC3_SetConfig+0x108>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d003      	beq.n	80066a6 <TIM_OC3_SetConfig+0xae>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a18      	ldr	r2, [pc, #96]	; (8006704 <TIM_OC3_SetConfig+0x10c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d113      	bne.n	80066ce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	011b      	lsls	r3, r3, #4
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	4313      	orrs	r3, r2
 80066c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	621a      	str	r2, [r3, #32]
}
 80066e8:	bf00      	nop
 80066ea:	371c      	adds	r7, #28
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	40012c00 	.word	0x40012c00
 80066f8:	40013400 	.word	0x40013400
 80066fc:	40014000 	.word	0x40014000
 8006700:	40014400 	.word	0x40014400
 8006704:	40014800 	.word	0x40014800

08006708 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006708:	b480      	push	{r7}
 800670a:	b087      	sub	sp, #28
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800673a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	021b      	lsls	r3, r3, #8
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	4313      	orrs	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006756:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	031b      	lsls	r3, r3, #12
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	4313      	orrs	r3, r2
 8006762:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a18      	ldr	r2, [pc, #96]	; (80067c8 <TIM_OC4_SetConfig+0xc0>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d00f      	beq.n	800678c <TIM_OC4_SetConfig+0x84>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a17      	ldr	r2, [pc, #92]	; (80067cc <TIM_OC4_SetConfig+0xc4>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d00b      	beq.n	800678c <TIM_OC4_SetConfig+0x84>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a16      	ldr	r2, [pc, #88]	; (80067d0 <TIM_OC4_SetConfig+0xc8>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d007      	beq.n	800678c <TIM_OC4_SetConfig+0x84>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a15      	ldr	r2, [pc, #84]	; (80067d4 <TIM_OC4_SetConfig+0xcc>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d003      	beq.n	800678c <TIM_OC4_SetConfig+0x84>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a14      	ldr	r2, [pc, #80]	; (80067d8 <TIM_OC4_SetConfig+0xd0>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d109      	bne.n	80067a0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006792:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	019b      	lsls	r3, r3, #6
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	4313      	orrs	r3, r2
 800679e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	621a      	str	r2, [r3, #32]
}
 80067ba:	bf00      	nop
 80067bc:	371c      	adds	r7, #28
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	40012c00 	.word	0x40012c00
 80067cc:	40013400 	.word	0x40013400
 80067d0:	40014000 	.word	0x40014000
 80067d4:	40014400 	.word	0x40014400
 80067d8:	40014800 	.word	0x40014800

080067dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067dc:	b480      	push	{r7}
 80067de:	b087      	sub	sp, #28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800680a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800680e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	4313      	orrs	r3, r2
 8006818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006820:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	041b      	lsls	r3, r3, #16
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	4313      	orrs	r3, r2
 800682c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a17      	ldr	r2, [pc, #92]	; (8006890 <TIM_OC5_SetConfig+0xb4>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d00f      	beq.n	8006856 <TIM_OC5_SetConfig+0x7a>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a16      	ldr	r2, [pc, #88]	; (8006894 <TIM_OC5_SetConfig+0xb8>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d00b      	beq.n	8006856 <TIM_OC5_SetConfig+0x7a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a15      	ldr	r2, [pc, #84]	; (8006898 <TIM_OC5_SetConfig+0xbc>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d007      	beq.n	8006856 <TIM_OC5_SetConfig+0x7a>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a14      	ldr	r2, [pc, #80]	; (800689c <TIM_OC5_SetConfig+0xc0>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d003      	beq.n	8006856 <TIM_OC5_SetConfig+0x7a>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a13      	ldr	r2, [pc, #76]	; (80068a0 <TIM_OC5_SetConfig+0xc4>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d109      	bne.n	800686a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800685c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	021b      	lsls	r3, r3, #8
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	4313      	orrs	r3, r2
 8006868:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	685a      	ldr	r2, [r3, #4]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	621a      	str	r2, [r3, #32]
}
 8006884:	bf00      	nop
 8006886:	371c      	adds	r7, #28
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	40012c00 	.word	0x40012c00
 8006894:	40013400 	.word	0x40013400
 8006898:	40014000 	.word	0x40014000
 800689c:	40014400 	.word	0x40014400
 80068a0:	40014800 	.word	0x40014800

080068a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b087      	sub	sp, #28
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	021b      	lsls	r3, r3, #8
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	051b      	lsls	r3, r3, #20
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a18      	ldr	r2, [pc, #96]	; (800695c <TIM_OC6_SetConfig+0xb8>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d00f      	beq.n	8006920 <TIM_OC6_SetConfig+0x7c>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a17      	ldr	r2, [pc, #92]	; (8006960 <TIM_OC6_SetConfig+0xbc>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d00b      	beq.n	8006920 <TIM_OC6_SetConfig+0x7c>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a16      	ldr	r2, [pc, #88]	; (8006964 <TIM_OC6_SetConfig+0xc0>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d007      	beq.n	8006920 <TIM_OC6_SetConfig+0x7c>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a15      	ldr	r2, [pc, #84]	; (8006968 <TIM_OC6_SetConfig+0xc4>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d003      	beq.n	8006920 <TIM_OC6_SetConfig+0x7c>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a14      	ldr	r2, [pc, #80]	; (800696c <TIM_OC6_SetConfig+0xc8>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d109      	bne.n	8006934 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006926:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	029b      	lsls	r3, r3, #10
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	4313      	orrs	r3, r2
 8006932:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	621a      	str	r2, [r3, #32]
}
 800694e:	bf00      	nop
 8006950:	371c      	adds	r7, #28
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	40012c00 	.word	0x40012c00
 8006960:	40013400 	.word	0x40013400
 8006964:	40014000 	.word	0x40014000
 8006968:	40014400 	.word	0x40014400
 800696c:	40014800 	.word	0x40014800

08006970 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6a1b      	ldr	r3, [r3, #32]
 8006980:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	f023 0201 	bic.w	r2, r3, #1
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800699a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	011b      	lsls	r3, r3, #4
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f023 030a 	bic.w	r3, r3, #10
 80069ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	621a      	str	r2, [r3, #32]
}
 80069c2:	bf00      	nop
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b087      	sub	sp, #28
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	60f8      	str	r0, [r7, #12]
 80069d6:	60b9      	str	r1, [r7, #8]
 80069d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	f023 0210 	bic.w	r2, r3, #16
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	031b      	lsls	r3, r3, #12
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	011b      	lsls	r3, r3, #4
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	621a      	str	r2, [r3, #32]
}
 8006a22:	bf00      	nop
 8006a24:	371c      	adds	r7, #28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b085      	sub	sp, #20
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a46:	683a      	ldr	r2, [r7, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	f043 0307 	orr.w	r3, r3, #7
 8006a50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	609a      	str	r2, [r3, #8]
}
 8006a58:	bf00      	nop
 8006a5a:	3714      	adds	r7, #20
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b087      	sub	sp, #28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
 8006a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	021a      	lsls	r2, r3, #8
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	431a      	orrs	r2, r3
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	609a      	str	r2, [r3, #8]
}
 8006a98:	bf00      	nop
 8006a9a:	371c      	adds	r7, #28
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	f003 031f 	and.w	r3, r3, #31
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8006abc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6a1a      	ldr	r2, [r3, #32]
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	43db      	mvns	r3, r3
 8006ac6:	401a      	ands	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6a1a      	ldr	r2, [r3, #32]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	f003 031f 	and.w	r3, r3, #31
 8006ad6:	6879      	ldr	r1, [r7, #4]
 8006ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8006adc:	431a      	orrs	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	621a      	str	r2, [r3, #32]
}
 8006ae2:	bf00      	nop
 8006ae4:	371c      	adds	r7, #28
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
	...

08006af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d101      	bne.n	8006b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b04:	2302      	movs	r3, #2
 8006b06:	e063      	b.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a2b      	ldr	r2, [pc, #172]	; (8006bdc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d004      	beq.n	8006b3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a2a      	ldr	r2, [pc, #168]	; (8006be0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d108      	bne.n	8006b4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a1b      	ldr	r2, [pc, #108]	; (8006bdc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d018      	beq.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b7a:	d013      	beq.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a18      	ldr	r2, [pc, #96]	; (8006be4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d00e      	beq.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a17      	ldr	r2, [pc, #92]	; (8006be8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d009      	beq.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a12      	ldr	r2, [pc, #72]	; (8006be0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d004      	beq.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a13      	ldr	r2, [pc, #76]	; (8006bec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d10c      	bne.n	8006bbe <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006baa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3714      	adds	r7, #20
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	40012c00 	.word	0x40012c00
 8006be0:	40013400 	.word	0x40013400
 8006be4:	40000400 	.word	0x40000400
 8006be8:	40000800 	.word	0x40000800
 8006bec:	40014000 	.word	0x40014000

08006bf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e040      	b.n	8006cc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d106      	bne.n	8006c54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7fa fde2 	bl	8001818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2224      	movs	r2, #36	; 0x24
 8006c58:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f022 0201 	bic.w	r2, r2, #1
 8006c68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fbd4 	bl	8007418 <UART_SetConfig>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d101      	bne.n	8006c7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e022      	b.n	8006cc0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d002      	beq.n	8006c88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fd9c 	bl	80077c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689a      	ldr	r2, [r3, #8]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ca6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f042 0201 	orr.w	r2, r2, #1
 8006cb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 fe23 	bl	8007904 <UART_CheckIdleState>
 8006cbe:	4603      	mov	r3, r0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b08b      	sub	sp, #44	; 0x2c
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cda:	2b20      	cmp	r3, #32
 8006cdc:	d147      	bne.n	8006d6e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <HAL_UART_Transmit_IT+0x22>
 8006ce4:	88fb      	ldrh	r3, [r7, #6]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e040      	b.n	8006d70 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	88fa      	ldrh	r2, [r7, #6]
 8006cf8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	88fa      	ldrh	r2, [r7, #6]
 8006d00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2221      	movs	r2, #33	; 0x21
 8006d16:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d20:	d107      	bne.n	8006d32 <HAL_UART_Transmit_IT+0x6a>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d103      	bne.n	8006d32 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	4a13      	ldr	r2, [pc, #76]	; (8006d7c <HAL_UART_Transmit_IT+0xb4>)
 8006d2e:	66da      	str	r2, [r3, #108]	; 0x6c
 8006d30:	e002      	b.n	8006d38 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	4a12      	ldr	r2, [pc, #72]	; (8006d80 <HAL_UART_Transmit_IT+0xb8>)
 8006d36:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	e853 3f00 	ldrex	r3, [r3]
 8006d44:	613b      	str	r3, [r7, #16]
   return(result);
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	461a      	mov	r2, r3
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	623b      	str	r3, [r7, #32]
 8006d58:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5a:	69f9      	ldr	r1, [r7, #28]
 8006d5c:	6a3a      	ldr	r2, [r7, #32]
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e6      	bne.n	8006d38 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	e000      	b.n	8006d70 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006d6e:	2302      	movs	r3, #2
  }
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	372c      	adds	r7, #44	; 0x2c
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	08007e39 	.word	0x08007e39
 8006d80:	08007d81 	.word	0x08007d81

08006d84 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b08a      	sub	sp, #40	; 0x28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d98:	2b20      	cmp	r3, #32
 8006d9a:	d132      	bne.n	8006e02 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <HAL_UART_Receive_IT+0x24>
 8006da2:	88fb      	ldrh	r3, [r7, #6]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e02b      	b.n	8006e04 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d018      	beq.n	8006df2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	e853 3f00 	ldrex	r3, [r3]
 8006dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	623b      	str	r3, [r7, #32]
 8006de0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de2:	69f9      	ldr	r1, [r7, #28]
 8006de4:	6a3a      	ldr	r2, [r7, #32]
 8006de6:	e841 2300 	strex	r3, r2, [r1]
 8006dea:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1e6      	bne.n	8006dc0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006df2:	88fb      	ldrh	r3, [r7, #6]
 8006df4:	461a      	mov	r2, r3
 8006df6:	68b9      	ldr	r1, [r7, #8]
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f000 fe93 	bl	8007b24 <UART_Start_Receive_IT>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	e000      	b.n	8006e04 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006e02:	2302      	movs	r3, #2
  }
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3728      	adds	r7, #40	; 0x28
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b0ba      	sub	sp, #232	; 0xe8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006e36:	f640 030f 	movw	r3, #2063	; 0x80f
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006e40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d115      	bne.n	8006e74 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e4c:	f003 0320 	and.w	r3, r3, #32
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00f      	beq.n	8006e74 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e58:	f003 0320 	and.w	r3, r3, #32
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d009      	beq.n	8006e74 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 82ab 	beq.w	80073c0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	4798      	blx	r3
      }
      return;
 8006e72:	e2a5      	b.n	80073c0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f000 8117 	beq.w	80070ac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d106      	bne.n	8006e98 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006e8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006e8e:	4b85      	ldr	r3, [pc, #532]	; (80070a4 <HAL_UART_IRQHandler+0x298>)
 8006e90:	4013      	ands	r3, r2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 810a 	beq.w	80070ac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e9c:	f003 0301 	and.w	r3, r3, #1
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d011      	beq.n	8006ec8 <HAL_UART_IRQHandler+0xbc>
 8006ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00b      	beq.n	8006ec8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ebe:	f043 0201 	orr.w	r2, r3, #1
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ecc:	f003 0302 	and.w	r3, r3, #2
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d011      	beq.n	8006ef8 <HAL_UART_IRQHandler+0xec>
 8006ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ed8:	f003 0301 	and.w	r3, r3, #1
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00b      	beq.n	8006ef8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eee:	f043 0204 	orr.w	r2, r3, #4
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006efc:	f003 0304 	and.w	r3, r3, #4
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d011      	beq.n	8006f28 <HAL_UART_IRQHandler+0x11c>
 8006f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00b      	beq.n	8006f28 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2204      	movs	r2, #4
 8006f16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f1e:	f043 0202 	orr.w	r2, r3, #2
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f2c:	f003 0308 	and.w	r3, r3, #8
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d017      	beq.n	8006f64 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f38:	f003 0320 	and.w	r3, r3, #32
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d105      	bne.n	8006f4c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006f40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00b      	beq.n	8006f64 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2208      	movs	r2, #8
 8006f52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f5a:	f043 0208 	orr.w	r2, r3, #8
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d012      	beq.n	8006f96 <HAL_UART_IRQHandler+0x18a>
 8006f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00c      	beq.n	8006f96 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f8c:	f043 0220 	orr.w	r2, r3, #32
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f000 8211 	beq.w	80073c4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa6:	f003 0320 	and.w	r3, r3, #32
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00d      	beq.n	8006fca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fb2:	f003 0320 	and.w	r3, r3, #32
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d007      	beq.n	8006fca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fde:	2b40      	cmp	r3, #64	; 0x40
 8006fe0:	d005      	beq.n	8006fee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006fe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fe6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d04f      	beq.n	800708e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fe4c 	bl	8007c8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffe:	2b40      	cmp	r3, #64	; 0x40
 8007000:	d141      	bne.n	8007086 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3308      	adds	r3, #8
 8007008:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007010:	e853 3f00 	ldrex	r3, [r3]
 8007014:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007018:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800701c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007020:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3308      	adds	r3, #8
 800702a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800702e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007032:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007036:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800703a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800703e:	e841 2300 	strex	r3, r2, [r1]
 8007042:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007046:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1d9      	bne.n	8007002 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007052:	2b00      	cmp	r3, #0
 8007054:	d013      	beq.n	800707e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800705a:	4a13      	ldr	r2, [pc, #76]	; (80070a8 <HAL_UART_IRQHandler+0x29c>)
 800705c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007062:	4618      	mov	r0, r3
 8007064:	f7fc fb26 	bl	80036b4 <HAL_DMA_Abort_IT>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d017      	beq.n	800709e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007078:	4610      	mov	r0, r2
 800707a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800707c:	e00f      	b.n	800709e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f9b4 	bl	80073ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007084:	e00b      	b.n	800709e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f9b0 	bl	80073ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800708c:	e007      	b.n	800709e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f9ac 	bl	80073ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800709c:	e192      	b.n	80073c4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800709e:	bf00      	nop
    return;
 80070a0:	e190      	b.n	80073c4 <HAL_UART_IRQHandler+0x5b8>
 80070a2:	bf00      	nop
 80070a4:	04000120 	.word	0x04000120
 80070a8:	08007d55 	.word	0x08007d55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	f040 814b 	bne.w	800734c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80070b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ba:	f003 0310 	and.w	r3, r3, #16
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f000 8144 	beq.w	800734c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80070c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070c8:	f003 0310 	and.w	r3, r3, #16
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 813d 	beq.w	800734c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2210      	movs	r2, #16
 80070d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e4:	2b40      	cmp	r3, #64	; 0x40
 80070e6:	f040 80b5 	bne.w	8007254 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f000 8164 	beq.w	80073c8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800710a:	429a      	cmp	r2, r3
 800710c:	f080 815c 	bcs.w	80073c8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007116:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	2b20      	cmp	r3, #32
 8007122:	f000 8086 	beq.w	8007232 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007132:	e853 3f00 	ldrex	r3, [r3]
 8007136:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800713a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800713e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007142:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	461a      	mov	r2, r3
 800714c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007150:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007154:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007158:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800715c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007160:	e841 2300 	strex	r3, r2, [r1]
 8007164:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007168:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1da      	bne.n	8007126 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	3308      	adds	r3, #8
 8007176:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007178:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800717a:	e853 3f00 	ldrex	r3, [r3]
 800717e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007180:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007182:	f023 0301 	bic.w	r3, r3, #1
 8007186:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	3308      	adds	r3, #8
 8007190:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007194:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007198:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800719c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80071a0:	e841 2300 	strex	r3, r2, [r1]
 80071a4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80071a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e1      	bne.n	8007170 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	3308      	adds	r3, #8
 80071b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071b6:	e853 3f00 	ldrex	r3, [r3]
 80071ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80071bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3308      	adds	r3, #8
 80071cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80071d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80071d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80071d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80071d8:	e841 2300 	strex	r3, r2, [r1]
 80071dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80071de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1e3      	bne.n	80071ac <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2220      	movs	r2, #32
 80071e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071fa:	e853 3f00 	ldrex	r3, [r3]
 80071fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007202:	f023 0310 	bic.w	r3, r3, #16
 8007206:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	461a      	mov	r2, r3
 8007210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007214:	65bb      	str	r3, [r7, #88]	; 0x58
 8007216:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007218:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800721a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800721c:	e841 2300 	strex	r3, r2, [r1]
 8007220:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1e4      	bne.n	80071f2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800722c:	4618      	mov	r0, r3
 800722e:	f7fc fa08 	bl	8003642 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2202      	movs	r2, #2
 8007236:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007244:	b29b      	uxth	r3, r3
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	b29b      	uxth	r3, r3
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 f8d7 	bl	8007400 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007252:	e0b9      	b.n	80073c8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007260:	b29b      	uxth	r3, r3
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800726e:	b29b      	uxth	r3, r3
 8007270:	2b00      	cmp	r3, #0
 8007272:	f000 80ab 	beq.w	80073cc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007276:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 80a6 	beq.w	80073cc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007288:	e853 3f00 	ldrex	r3, [r3]
 800728c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800728e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007290:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007294:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	461a      	mov	r2, r3
 800729e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072a2:	647b      	str	r3, [r7, #68]	; 0x44
 80072a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072aa:	e841 2300 	strex	r3, r2, [r1]
 80072ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1e4      	bne.n	8007280 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3308      	adds	r3, #8
 80072bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c0:	e853 3f00 	ldrex	r3, [r3]
 80072c4:	623b      	str	r3, [r7, #32]
   return(result);
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	f023 0301 	bic.w	r3, r3, #1
 80072cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3308      	adds	r3, #8
 80072d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80072da:	633a      	str	r2, [r7, #48]	; 0x30
 80072dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072e2:	e841 2300 	strex	r3, r2, [r1]
 80072e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1e3      	bne.n	80072b6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2220      	movs	r2, #32
 80072f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	e853 3f00 	ldrex	r3, [r3]
 800730e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f023 0310 	bic.w	r3, r3, #16
 8007316:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	461a      	mov	r2, r3
 8007320:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007324:	61fb      	str	r3, [r7, #28]
 8007326:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007328:	69b9      	ldr	r1, [r7, #24]
 800732a:	69fa      	ldr	r2, [r7, #28]
 800732c:	e841 2300 	strex	r3, r2, [r1]
 8007330:	617b      	str	r3, [r7, #20]
   return(result);
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1e4      	bne.n	8007302 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2202      	movs	r2, #2
 800733c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800733e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007342:	4619      	mov	r1, r3
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f85b 	bl	8007400 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800734a:	e03f      	b.n	80073cc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800734c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00e      	beq.n	8007376 <HAL_UART_IRQHandler+0x56a>
 8007358:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800735c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d008      	beq.n	8007376 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800736c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 ff94 	bl	800829c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007374:	e02d      	b.n	80073d2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800737a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00e      	beq.n	80073a0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800738a:	2b00      	cmp	r3, #0
 800738c:	d008      	beq.n	80073a0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007392:	2b00      	cmp	r3, #0
 8007394:	d01c      	beq.n	80073d0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	4798      	blx	r3
    }
    return;
 800739e:	e017      	b.n	80073d0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80073a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d012      	beq.n	80073d2 <HAL_UART_IRQHandler+0x5c6>
 80073ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00c      	beq.n	80073d2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fd9d 	bl	8007ef8 <UART_EndTransmit_IT>
    return;
 80073be:	e008      	b.n	80073d2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80073c0:	bf00      	nop
 80073c2:	e006      	b.n	80073d2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80073c4:	bf00      	nop
 80073c6:	e004      	b.n	80073d2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80073c8:	bf00      	nop
 80073ca:	e002      	b.n	80073d2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80073cc:	bf00      	nop
 80073ce:	e000      	b.n	80073d2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80073d0:	bf00      	nop
  }

}
 80073d2:	37e8      	adds	r7, #232	; 0xe8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	460b      	mov	r3, r1
 800740a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b088      	sub	sp, #32
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	689a      	ldr	r2, [r3, #8]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	431a      	orrs	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	695b      	ldr	r3, [r3, #20]
 8007432:	431a      	orrs	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	69db      	ldr	r3, [r3, #28]
 8007438:	4313      	orrs	r3, r2
 800743a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007446:	f023 030c 	bic.w	r3, r3, #12
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	6812      	ldr	r2, [r2, #0]
 800744e:	6979      	ldr	r1, [r7, #20]
 8007450:	430b      	orrs	r3, r1
 8007452:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68da      	ldr	r2, [r3, #12]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	430a      	orrs	r2, r1
 8007468:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a1b      	ldr	r3, [r3, #32]
 8007474:	697a      	ldr	r2, [r7, #20]
 8007476:	4313      	orrs	r3, r2
 8007478:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	430a      	orrs	r2, r1
 800748c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4aa7      	ldr	r2, [pc, #668]	; (8007730 <UART_SetConfig+0x318>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d120      	bne.n	80074da <UART_SetConfig+0xc2>
 8007498:	4ba6      	ldr	r3, [pc, #664]	; (8007734 <UART_SetConfig+0x31c>)
 800749a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749c:	f003 0303 	and.w	r3, r3, #3
 80074a0:	2b03      	cmp	r3, #3
 80074a2:	d817      	bhi.n	80074d4 <UART_SetConfig+0xbc>
 80074a4:	a201      	add	r2, pc, #4	; (adr r2, 80074ac <UART_SetConfig+0x94>)
 80074a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074aa:	bf00      	nop
 80074ac:	080074bd 	.word	0x080074bd
 80074b0:	080074c9 	.word	0x080074c9
 80074b4:	080074cf 	.word	0x080074cf
 80074b8:	080074c3 	.word	0x080074c3
 80074bc:	2301      	movs	r3, #1
 80074be:	77fb      	strb	r3, [r7, #31]
 80074c0:	e0b5      	b.n	800762e <UART_SetConfig+0x216>
 80074c2:	2302      	movs	r3, #2
 80074c4:	77fb      	strb	r3, [r7, #31]
 80074c6:	e0b2      	b.n	800762e <UART_SetConfig+0x216>
 80074c8:	2304      	movs	r3, #4
 80074ca:	77fb      	strb	r3, [r7, #31]
 80074cc:	e0af      	b.n	800762e <UART_SetConfig+0x216>
 80074ce:	2308      	movs	r3, #8
 80074d0:	77fb      	strb	r3, [r7, #31]
 80074d2:	e0ac      	b.n	800762e <UART_SetConfig+0x216>
 80074d4:	2310      	movs	r3, #16
 80074d6:	77fb      	strb	r3, [r7, #31]
 80074d8:	e0a9      	b.n	800762e <UART_SetConfig+0x216>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a96      	ldr	r2, [pc, #600]	; (8007738 <UART_SetConfig+0x320>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d124      	bne.n	800752e <UART_SetConfig+0x116>
 80074e4:	4b93      	ldr	r3, [pc, #588]	; (8007734 <UART_SetConfig+0x31c>)
 80074e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80074ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80074f0:	d011      	beq.n	8007516 <UART_SetConfig+0xfe>
 80074f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80074f6:	d817      	bhi.n	8007528 <UART_SetConfig+0x110>
 80074f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074fc:	d011      	beq.n	8007522 <UART_SetConfig+0x10a>
 80074fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007502:	d811      	bhi.n	8007528 <UART_SetConfig+0x110>
 8007504:	2b00      	cmp	r3, #0
 8007506:	d003      	beq.n	8007510 <UART_SetConfig+0xf8>
 8007508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800750c:	d006      	beq.n	800751c <UART_SetConfig+0x104>
 800750e:	e00b      	b.n	8007528 <UART_SetConfig+0x110>
 8007510:	2300      	movs	r3, #0
 8007512:	77fb      	strb	r3, [r7, #31]
 8007514:	e08b      	b.n	800762e <UART_SetConfig+0x216>
 8007516:	2302      	movs	r3, #2
 8007518:	77fb      	strb	r3, [r7, #31]
 800751a:	e088      	b.n	800762e <UART_SetConfig+0x216>
 800751c:	2304      	movs	r3, #4
 800751e:	77fb      	strb	r3, [r7, #31]
 8007520:	e085      	b.n	800762e <UART_SetConfig+0x216>
 8007522:	2308      	movs	r3, #8
 8007524:	77fb      	strb	r3, [r7, #31]
 8007526:	e082      	b.n	800762e <UART_SetConfig+0x216>
 8007528:	2310      	movs	r3, #16
 800752a:	77fb      	strb	r3, [r7, #31]
 800752c:	e07f      	b.n	800762e <UART_SetConfig+0x216>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a82      	ldr	r2, [pc, #520]	; (800773c <UART_SetConfig+0x324>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d124      	bne.n	8007582 <UART_SetConfig+0x16a>
 8007538:	4b7e      	ldr	r3, [pc, #504]	; (8007734 <UART_SetConfig+0x31c>)
 800753a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007540:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007544:	d011      	beq.n	800756a <UART_SetConfig+0x152>
 8007546:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800754a:	d817      	bhi.n	800757c <UART_SetConfig+0x164>
 800754c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007550:	d011      	beq.n	8007576 <UART_SetConfig+0x15e>
 8007552:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007556:	d811      	bhi.n	800757c <UART_SetConfig+0x164>
 8007558:	2b00      	cmp	r3, #0
 800755a:	d003      	beq.n	8007564 <UART_SetConfig+0x14c>
 800755c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007560:	d006      	beq.n	8007570 <UART_SetConfig+0x158>
 8007562:	e00b      	b.n	800757c <UART_SetConfig+0x164>
 8007564:	2300      	movs	r3, #0
 8007566:	77fb      	strb	r3, [r7, #31]
 8007568:	e061      	b.n	800762e <UART_SetConfig+0x216>
 800756a:	2302      	movs	r3, #2
 800756c:	77fb      	strb	r3, [r7, #31]
 800756e:	e05e      	b.n	800762e <UART_SetConfig+0x216>
 8007570:	2304      	movs	r3, #4
 8007572:	77fb      	strb	r3, [r7, #31]
 8007574:	e05b      	b.n	800762e <UART_SetConfig+0x216>
 8007576:	2308      	movs	r3, #8
 8007578:	77fb      	strb	r3, [r7, #31]
 800757a:	e058      	b.n	800762e <UART_SetConfig+0x216>
 800757c:	2310      	movs	r3, #16
 800757e:	77fb      	strb	r3, [r7, #31]
 8007580:	e055      	b.n	800762e <UART_SetConfig+0x216>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a6e      	ldr	r2, [pc, #440]	; (8007740 <UART_SetConfig+0x328>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d124      	bne.n	80075d6 <UART_SetConfig+0x1be>
 800758c:	4b69      	ldr	r3, [pc, #420]	; (8007734 <UART_SetConfig+0x31c>)
 800758e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007590:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007594:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007598:	d011      	beq.n	80075be <UART_SetConfig+0x1a6>
 800759a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800759e:	d817      	bhi.n	80075d0 <UART_SetConfig+0x1b8>
 80075a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075a4:	d011      	beq.n	80075ca <UART_SetConfig+0x1b2>
 80075a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075aa:	d811      	bhi.n	80075d0 <UART_SetConfig+0x1b8>
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d003      	beq.n	80075b8 <UART_SetConfig+0x1a0>
 80075b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075b4:	d006      	beq.n	80075c4 <UART_SetConfig+0x1ac>
 80075b6:	e00b      	b.n	80075d0 <UART_SetConfig+0x1b8>
 80075b8:	2300      	movs	r3, #0
 80075ba:	77fb      	strb	r3, [r7, #31]
 80075bc:	e037      	b.n	800762e <UART_SetConfig+0x216>
 80075be:	2302      	movs	r3, #2
 80075c0:	77fb      	strb	r3, [r7, #31]
 80075c2:	e034      	b.n	800762e <UART_SetConfig+0x216>
 80075c4:	2304      	movs	r3, #4
 80075c6:	77fb      	strb	r3, [r7, #31]
 80075c8:	e031      	b.n	800762e <UART_SetConfig+0x216>
 80075ca:	2308      	movs	r3, #8
 80075cc:	77fb      	strb	r3, [r7, #31]
 80075ce:	e02e      	b.n	800762e <UART_SetConfig+0x216>
 80075d0:	2310      	movs	r3, #16
 80075d2:	77fb      	strb	r3, [r7, #31]
 80075d4:	e02b      	b.n	800762e <UART_SetConfig+0x216>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a5a      	ldr	r2, [pc, #360]	; (8007744 <UART_SetConfig+0x32c>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d124      	bne.n	800762a <UART_SetConfig+0x212>
 80075e0:	4b54      	ldr	r3, [pc, #336]	; (8007734 <UART_SetConfig+0x31c>)
 80075e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80075e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80075ec:	d011      	beq.n	8007612 <UART_SetConfig+0x1fa>
 80075ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80075f2:	d817      	bhi.n	8007624 <UART_SetConfig+0x20c>
 80075f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80075f8:	d011      	beq.n	800761e <UART_SetConfig+0x206>
 80075fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80075fe:	d811      	bhi.n	8007624 <UART_SetConfig+0x20c>
 8007600:	2b00      	cmp	r3, #0
 8007602:	d003      	beq.n	800760c <UART_SetConfig+0x1f4>
 8007604:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007608:	d006      	beq.n	8007618 <UART_SetConfig+0x200>
 800760a:	e00b      	b.n	8007624 <UART_SetConfig+0x20c>
 800760c:	2300      	movs	r3, #0
 800760e:	77fb      	strb	r3, [r7, #31]
 8007610:	e00d      	b.n	800762e <UART_SetConfig+0x216>
 8007612:	2302      	movs	r3, #2
 8007614:	77fb      	strb	r3, [r7, #31]
 8007616:	e00a      	b.n	800762e <UART_SetConfig+0x216>
 8007618:	2304      	movs	r3, #4
 800761a:	77fb      	strb	r3, [r7, #31]
 800761c:	e007      	b.n	800762e <UART_SetConfig+0x216>
 800761e:	2308      	movs	r3, #8
 8007620:	77fb      	strb	r3, [r7, #31]
 8007622:	e004      	b.n	800762e <UART_SetConfig+0x216>
 8007624:	2310      	movs	r3, #16
 8007626:	77fb      	strb	r3, [r7, #31]
 8007628:	e001      	b.n	800762e <UART_SetConfig+0x216>
 800762a:	2310      	movs	r3, #16
 800762c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007636:	d15b      	bne.n	80076f0 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8007638:	7ffb      	ldrb	r3, [r7, #31]
 800763a:	2b08      	cmp	r3, #8
 800763c:	d827      	bhi.n	800768e <UART_SetConfig+0x276>
 800763e:	a201      	add	r2, pc, #4	; (adr r2, 8007644 <UART_SetConfig+0x22c>)
 8007640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007644:	08007669 	.word	0x08007669
 8007648:	08007671 	.word	0x08007671
 800764c:	08007679 	.word	0x08007679
 8007650:	0800768f 	.word	0x0800768f
 8007654:	0800767f 	.word	0x0800767f
 8007658:	0800768f 	.word	0x0800768f
 800765c:	0800768f 	.word	0x0800768f
 8007660:	0800768f 	.word	0x0800768f
 8007664:	08007687 	.word	0x08007687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007668:	f7fd fe34 	bl	80052d4 <HAL_RCC_GetPCLK1Freq>
 800766c:	61b8      	str	r0, [r7, #24]
        break;
 800766e:	e013      	b.n	8007698 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007670:	f7fd fe52 	bl	8005318 <HAL_RCC_GetPCLK2Freq>
 8007674:	61b8      	str	r0, [r7, #24]
        break;
 8007676:	e00f      	b.n	8007698 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007678:	4b33      	ldr	r3, [pc, #204]	; (8007748 <UART_SetConfig+0x330>)
 800767a:	61bb      	str	r3, [r7, #24]
        break;
 800767c:	e00c      	b.n	8007698 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800767e:	f7fd fdb3 	bl	80051e8 <HAL_RCC_GetSysClockFreq>
 8007682:	61b8      	str	r0, [r7, #24]
        break;
 8007684:	e008      	b.n	8007698 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800768a:	61bb      	str	r3, [r7, #24]
        break;
 800768c:	e004      	b.n	8007698 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800768e:	2300      	movs	r3, #0
 8007690:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	77bb      	strb	r3, [r7, #30]
        break;
 8007696:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	2b00      	cmp	r3, #0
 800769c:	f000 8082 	beq.w	80077a4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	005a      	lsls	r2, r3, #1
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	085b      	lsrs	r3, r3, #1
 80076aa:	441a      	add	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	2b0f      	cmp	r3, #15
 80076ba:	d916      	bls.n	80076ea <UART_SetConfig+0x2d2>
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076c2:	d212      	bcs.n	80076ea <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	f023 030f 	bic.w	r3, r3, #15
 80076cc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	085b      	lsrs	r3, r3, #1
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	f003 0307 	and.w	r3, r3, #7
 80076d8:	b29a      	uxth	r2, r3
 80076da:	89fb      	ldrh	r3, [r7, #14]
 80076dc:	4313      	orrs	r3, r2
 80076de:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	89fa      	ldrh	r2, [r7, #14]
 80076e6:	60da      	str	r2, [r3, #12]
 80076e8:	e05c      	b.n	80077a4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	77bb      	strb	r3, [r7, #30]
 80076ee:	e059      	b.n	80077a4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076f0:	7ffb      	ldrb	r3, [r7, #31]
 80076f2:	2b08      	cmp	r3, #8
 80076f4:	d835      	bhi.n	8007762 <UART_SetConfig+0x34a>
 80076f6:	a201      	add	r2, pc, #4	; (adr r2, 80076fc <UART_SetConfig+0x2e4>)
 80076f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fc:	08007721 	.word	0x08007721
 8007700:	08007729 	.word	0x08007729
 8007704:	0800774d 	.word	0x0800774d
 8007708:	08007763 	.word	0x08007763
 800770c:	08007753 	.word	0x08007753
 8007710:	08007763 	.word	0x08007763
 8007714:	08007763 	.word	0x08007763
 8007718:	08007763 	.word	0x08007763
 800771c:	0800775b 	.word	0x0800775b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007720:	f7fd fdd8 	bl	80052d4 <HAL_RCC_GetPCLK1Freq>
 8007724:	61b8      	str	r0, [r7, #24]
        break;
 8007726:	e021      	b.n	800776c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007728:	f7fd fdf6 	bl	8005318 <HAL_RCC_GetPCLK2Freq>
 800772c:	61b8      	str	r0, [r7, #24]
        break;
 800772e:	e01d      	b.n	800776c <UART_SetConfig+0x354>
 8007730:	40013800 	.word	0x40013800
 8007734:	40021000 	.word	0x40021000
 8007738:	40004400 	.word	0x40004400
 800773c:	40004800 	.word	0x40004800
 8007740:	40004c00 	.word	0x40004c00
 8007744:	40005000 	.word	0x40005000
 8007748:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800774c:	4b1b      	ldr	r3, [pc, #108]	; (80077bc <UART_SetConfig+0x3a4>)
 800774e:	61bb      	str	r3, [r7, #24]
        break;
 8007750:	e00c      	b.n	800776c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007752:	f7fd fd49 	bl	80051e8 <HAL_RCC_GetSysClockFreq>
 8007756:	61b8      	str	r0, [r7, #24]
        break;
 8007758:	e008      	b.n	800776c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800775a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800775e:	61bb      	str	r3, [r7, #24]
        break;
 8007760:	e004      	b.n	800776c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007762:	2300      	movs	r3, #0
 8007764:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	77bb      	strb	r3, [r7, #30]
        break;
 800776a:	bf00      	nop
    }

    if (pclk != 0U)
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d018      	beq.n	80077a4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	085a      	lsrs	r2, r3, #1
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	441a      	add	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	fbb2 f3f3 	udiv	r3, r2, r3
 8007784:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	2b0f      	cmp	r3, #15
 800778a:	d909      	bls.n	80077a0 <UART_SetConfig+0x388>
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007792:	d205      	bcs.n	80077a0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	b29a      	uxth	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	60da      	str	r2, [r3, #12]
 800779e:	e001      	b.n	80077a4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80077b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3720      	adds	r7, #32
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	007a1200 	.word	0x007a1200

080077c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00a      	beq.n	80077ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	430a      	orrs	r2, r1
 80077e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ee:	f003 0302 	and.w	r3, r3, #2
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00a      	beq.n	800780c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	430a      	orrs	r2, r1
 800780a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007810:	f003 0304 	and.w	r3, r3, #4
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00a      	beq.n	800782e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	430a      	orrs	r2, r1
 800782c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007832:	f003 0308 	and.w	r3, r3, #8
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00a      	beq.n	8007850 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	430a      	orrs	r2, r1
 800784e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007854:	f003 0310 	and.w	r3, r3, #16
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00a      	beq.n	8007872 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	430a      	orrs	r2, r1
 8007870:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007876:	f003 0320 	and.w	r3, r3, #32
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00a      	beq.n	8007894 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	430a      	orrs	r2, r1
 8007892:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789c:	2b00      	cmp	r3, #0
 800789e:	d01a      	beq.n	80078d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	430a      	orrs	r2, r1
 80078b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078be:	d10a      	bne.n	80078d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	430a      	orrs	r2, r1
 80078d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00a      	beq.n	80078f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	430a      	orrs	r2, r1
 80078f6:	605a      	str	r2, [r3, #4]
  }
}
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b098      	sub	sp, #96	; 0x60
 8007908:	af02      	add	r7, sp, #8
 800790a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007914:	f7fa fa80 	bl	8001e18 <HAL_GetTick>
 8007918:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 0308 	and.w	r3, r3, #8
 8007924:	2b08      	cmp	r3, #8
 8007926:	d12e      	bne.n	8007986 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007928:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007930:	2200      	movs	r2, #0
 8007932:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f88c 	bl	8007a54 <UART_WaitOnFlagUntilTimeout>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d021      	beq.n	8007986 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794a:	e853 3f00 	ldrex	r3, [r3]
 800794e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007956:	653b      	str	r3, [r7, #80]	; 0x50
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	461a      	mov	r2, r3
 800795e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007960:	647b      	str	r3, [r7, #68]	; 0x44
 8007962:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007964:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007966:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007968:	e841 2300 	strex	r3, r2, [r1]
 800796c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800796e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1e6      	bne.n	8007942 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2220      	movs	r2, #32
 8007978:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e062      	b.n	8007a4c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0304 	and.w	r3, r3, #4
 8007990:	2b04      	cmp	r3, #4
 8007992:	d149      	bne.n	8007a28 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007994:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800799c:	2200      	movs	r2, #0
 800799e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f856 	bl	8007a54 <UART_WaitOnFlagUntilTimeout>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d03c      	beq.n	8007a28 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	e853 3f00 	ldrex	r3, [r3]
 80079ba:	623b      	str	r3, [r7, #32]
   return(result);
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	461a      	mov	r2, r3
 80079ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079cc:	633b      	str	r3, [r7, #48]	; 0x30
 80079ce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079d4:	e841 2300 	strex	r3, r2, [r1]
 80079d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1e6      	bne.n	80079ae <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	3308      	adds	r3, #8
 80079e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	e853 3f00 	ldrex	r3, [r3]
 80079ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f023 0301 	bic.w	r3, r3, #1
 80079f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3308      	adds	r3, #8
 80079fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a00:	61fa      	str	r2, [r7, #28]
 8007a02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a04:	69b9      	ldr	r1, [r7, #24]
 8007a06:	69fa      	ldr	r2, [r7, #28]
 8007a08:	e841 2300 	strex	r3, r2, [r1]
 8007a0c:	617b      	str	r3, [r7, #20]
   return(result);
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1e5      	bne.n	80079e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2220      	movs	r2, #32
 8007a18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e011      	b.n	8007a4c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2220      	movs	r2, #32
 8007a2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2220      	movs	r2, #32
 8007a32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3758      	adds	r7, #88	; 0x58
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	603b      	str	r3, [r7, #0]
 8007a60:	4613      	mov	r3, r2
 8007a62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a64:	e049      	b.n	8007afa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6c:	d045      	beq.n	8007afa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a6e:	f7fa f9d3 	bl	8001e18 <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	69ba      	ldr	r2, [r7, #24]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d302      	bcc.n	8007a84 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e048      	b.n	8007b1a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0304 	and.w	r3, r3, #4
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d031      	beq.n	8007afa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	69db      	ldr	r3, [r3, #28]
 8007a9c:	f003 0308 	and.w	r3, r3, #8
 8007aa0:	2b08      	cmp	r3, #8
 8007aa2:	d110      	bne.n	8007ac6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2208      	movs	r2, #8
 8007aaa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f000 f8ed 	bl	8007c8c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2208      	movs	r2, #8
 8007ab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e029      	b.n	8007b1a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	69db      	ldr	r3, [r3, #28]
 8007acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ad4:	d111      	bne.n	8007afa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ade:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 f8d3 	bl	8007c8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2220      	movs	r2, #32
 8007aea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e00f      	b.n	8007b1a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	69da      	ldr	r2, [r3, #28]
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	4013      	ands	r3, r2
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	bf0c      	ite	eq
 8007b0a:	2301      	moveq	r3, #1
 8007b0c:	2300      	movne	r3, #0
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	461a      	mov	r2, r3
 8007b12:	79fb      	ldrb	r3, [r7, #7]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d0a6      	beq.n	8007a66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
	...

08007b24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b097      	sub	sp, #92	; 0x5c
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	88fa      	ldrh	r2, [r7, #6]
 8007b3c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	88fa      	ldrh	r2, [r7, #6]
 8007b44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b56:	d10e      	bne.n	8007b76 <UART_Start_Receive_IT+0x52>
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d105      	bne.n	8007b6c <UART_Start_Receive_IT+0x48>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007b66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b6a:	e01a      	b.n	8007ba2 <UART_Start_Receive_IT+0x7e>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	22ff      	movs	r2, #255	; 0xff
 8007b70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b74:	e015      	b.n	8007ba2 <UART_Start_Receive_IT+0x7e>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10d      	bne.n	8007b9a <UART_Start_Receive_IT+0x76>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d104      	bne.n	8007b90 <UART_Start_Receive_IT+0x6c>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	22ff      	movs	r2, #255	; 0xff
 8007b8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b8e:	e008      	b.n	8007ba2 <UART_Start_Receive_IT+0x7e>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	227f      	movs	r2, #127	; 0x7f
 8007b94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b98:	e003      	b.n	8007ba2 <UART_Start_Receive_IT+0x7e>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2222      	movs	r2, #34	; 0x22
 8007bae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	3308      	adds	r3, #8
 8007bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bbc:	e853 3f00 	ldrex	r3, [r3]
 8007bc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc4:	f043 0301 	orr.w	r3, r3, #1
 8007bc8:	657b      	str	r3, [r7, #84]	; 0x54
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3308      	adds	r3, #8
 8007bd0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007bd2:	64ba      	str	r2, [r7, #72]	; 0x48
 8007bd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007bd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bda:	e841 2300 	strex	r3, r2, [r1]
 8007bde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1e5      	bne.n	8007bb2 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bee:	d107      	bne.n	8007c00 <UART_Start_Receive_IT+0xdc>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d103      	bne.n	8007c00 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	4a22      	ldr	r2, [pc, #136]	; (8007c84 <UART_Start_Receive_IT+0x160>)
 8007bfc:	669a      	str	r2, [r3, #104]	; 0x68
 8007bfe:	e002      	b.n	8007c06 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	4a21      	ldr	r2, [pc, #132]	; (8007c88 <UART_Start_Receive_IT+0x164>)
 8007c04:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d019      	beq.n	8007c42 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c16:	e853 3f00 	ldrex	r3, [r3]
 8007c1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	461a      	mov	r2, r3
 8007c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c34:	e841 2300 	strex	r3, r2, [r1]
 8007c38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1e6      	bne.n	8007c0e <UART_Start_Receive_IT+0xea>
 8007c40:	e018      	b.n	8007c74 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	e853 3f00 	ldrex	r3, [r3]
 8007c4e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	f043 0320 	orr.w	r3, r3, #32
 8007c56:	653b      	str	r3, [r7, #80]	; 0x50
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c60:	623b      	str	r3, [r7, #32]
 8007c62:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c64:	69f9      	ldr	r1, [r7, #28]
 8007c66:	6a3a      	ldr	r2, [r7, #32]
 8007c68:	e841 2300 	strex	r3, r2, [r1]
 8007c6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1e6      	bne.n	8007c42 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	375c      	adds	r7, #92	; 0x5c
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	080080f5 	.word	0x080080f5
 8007c88:	08007f4d 	.word	0x08007f4d

08007c8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b095      	sub	sp, #84	; 0x54
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c9c:	e853 3f00 	ldrex	r3, [r3]
 8007ca0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cb2:	643b      	str	r3, [r7, #64]	; 0x40
 8007cb4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cba:	e841 2300 	strex	r3, r2, [r1]
 8007cbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1e6      	bne.n	8007c94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3308      	adds	r3, #8
 8007ccc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cce:	6a3b      	ldr	r3, [r7, #32]
 8007cd0:	e853 3f00 	ldrex	r3, [r3]
 8007cd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	f023 0301 	bic.w	r3, r3, #1
 8007cdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	3308      	adds	r3, #8
 8007ce4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ce6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ce8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cee:	e841 2300 	strex	r3, r2, [r1]
 8007cf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1e5      	bne.n	8007cc6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d118      	bne.n	8007d34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	e853 3f00 	ldrex	r3, [r3]
 8007d0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	f023 0310 	bic.w	r3, r3, #16
 8007d16:	647b      	str	r3, [r7, #68]	; 0x44
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d20:	61bb      	str	r3, [r7, #24]
 8007d22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d24:	6979      	ldr	r1, [r7, #20]
 8007d26:	69ba      	ldr	r2, [r7, #24]
 8007d28:	e841 2300 	strex	r3, r2, [r1]
 8007d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1e6      	bne.n	8007d02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2220      	movs	r2, #32
 8007d38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007d48:	bf00      	nop
 8007d4a:	3754      	adds	r7, #84	; 0x54
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f7ff fb3a 	bl	80073ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d78:	bf00      	nop
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b08f      	sub	sp, #60	; 0x3c
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d8c:	2b21      	cmp	r3, #33	; 0x21
 8007d8e:	d14d      	bne.n	8007e2c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d132      	bne.n	8007e02 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da2:	6a3b      	ldr	r3, [r7, #32]
 8007da4:	e853 3f00 	ldrex	r3, [r3]
 8007da8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007db0:	637b      	str	r3, [r7, #52]	; 0x34
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	461a      	mov	r2, r3
 8007db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dbc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dc2:	e841 2300 	strex	r3, r2, [r1]
 8007dc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1e6      	bne.n	8007d9c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	e853 3f00 	ldrex	r3, [r3]
 8007dda:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007de2:	633b      	str	r3, [r7, #48]	; 0x30
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	461a      	mov	r2, r3
 8007dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dec:	61bb      	str	r3, [r7, #24]
 8007dee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df0:	6979      	ldr	r1, [r7, #20]
 8007df2:	69ba      	ldr	r2, [r7, #24]
 8007df4:	e841 2300 	strex	r3, r2, [r1]
 8007df8:	613b      	str	r3, [r7, #16]
   return(result);
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1e6      	bne.n	8007dce <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007e00:	e014      	b.n	8007e2c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e06:	781a      	ldrb	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	b292      	uxth	r2, r2
 8007e0e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e14:	1c5a      	adds	r2, r3, #1
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	3b01      	subs	r3, #1
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007e2c:	bf00      	nop
 8007e2e:	373c      	adds	r7, #60	; 0x3c
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b091      	sub	sp, #68	; 0x44
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e44:	2b21      	cmp	r3, #33	; 0x21
 8007e46:	d151      	bne.n	8007eec <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d132      	bne.n	8007eba <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5c:	e853 3f00 	ldrex	r3, [r3]
 8007e60:	623b      	str	r3, [r7, #32]
   return(result);
 8007e62:	6a3b      	ldr	r3, [r7, #32]
 8007e64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e68:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e72:	633b      	str	r3, [r7, #48]	; 0x30
 8007e74:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e7a:	e841 2300 	strex	r3, r2, [r1]
 8007e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1e6      	bne.n	8007e54 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	e853 3f00 	ldrex	r3, [r3]
 8007e92:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea4:	61fb      	str	r3, [r7, #28]
 8007ea6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea8:	69b9      	ldr	r1, [r7, #24]
 8007eaa:	69fa      	ldr	r2, [r7, #28]
 8007eac:	e841 2300 	strex	r3, r2, [r1]
 8007eb0:	617b      	str	r3, [r7, #20]
   return(result);
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e6      	bne.n	8007e86 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007eb8:	e018      	b.n	8007eec <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ec2:	881a      	ldrh	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ecc:	b292      	uxth	r2, r2
 8007ece:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ed4:	1c9a      	adds	r2, r3, #2
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007eec:	bf00      	nop
 8007eee:	3744      	adds	r7, #68	; 0x44
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b088      	sub	sp, #32
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	e853 3f00 	ldrex	r3, [r3]
 8007f0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f14:	61fb      	str	r3, [r7, #28]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	61bb      	str	r3, [r7, #24]
 8007f20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f22:	6979      	ldr	r1, [r7, #20]
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	e841 2300 	strex	r3, r2, [r1]
 8007f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1e6      	bne.n	8007f00 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2220      	movs	r2, #32
 8007f36:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f7ff fa4a 	bl	80073d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f44:	bf00      	nop
 8007f46:	3720      	adds	r7, #32
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b09c      	sub	sp, #112	; 0x70
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f5a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f64:	2b22      	cmp	r3, #34	; 0x22
 8007f66:	f040 80b9 	bne.w	80080dc <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007f70:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f74:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007f78:	b2d9      	uxtb	r1, r3
 8007f7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f84:	400a      	ands	r2, r1
 8007f86:	b2d2      	uxtb	r2, r2
 8007f88:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f8e:	1c5a      	adds	r2, r3, #1
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f040 809c 	bne.w	80080ec <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fbc:	e853 3f00 	ldrex	r3, [r3]
 8007fc0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fd4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007fd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fda:	e841 2300 	strex	r3, r2, [r1]
 8007fde:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1e6      	bne.n	8007fb4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	3308      	adds	r3, #8
 8007fec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff0:	e853 3f00 	ldrex	r3, [r3]
 8007ff4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff8:	f023 0301 	bic.w	r3, r3, #1
 8007ffc:	667b      	str	r3, [r7, #100]	; 0x64
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3308      	adds	r3, #8
 8008004:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008006:	647a      	str	r2, [r7, #68]	; 0x44
 8008008:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800800c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800800e:	e841 2300 	strex	r3, r2, [r1]
 8008012:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1e5      	bne.n	8007fe6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2220      	movs	r2, #32
 800801e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d018      	beq.n	800806e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008044:	e853 3f00 	ldrex	r3, [r3]
 8008048:	623b      	str	r3, [r7, #32]
   return(result);
 800804a:	6a3b      	ldr	r3, [r7, #32]
 800804c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008050:	663b      	str	r3, [r7, #96]	; 0x60
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	461a      	mov	r2, r3
 8008058:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800805a:	633b      	str	r3, [r7, #48]	; 0x30
 800805c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008062:	e841 2300 	strex	r3, r2, [r1]
 8008066:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1e6      	bne.n	800803c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008072:	2b01      	cmp	r3, #1
 8008074:	d12e      	bne.n	80080d4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	e853 3f00 	ldrex	r3, [r3]
 8008088:	60fb      	str	r3, [r7, #12]
   return(result);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f023 0310 	bic.w	r3, r3, #16
 8008090:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800809a:	61fb      	str	r3, [r7, #28]
 800809c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809e:	69b9      	ldr	r1, [r7, #24]
 80080a0:	69fa      	ldr	r2, [r7, #28]
 80080a2:	e841 2300 	strex	r3, r2, [r1]
 80080a6:	617b      	str	r3, [r7, #20]
   return(result);
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1e6      	bne.n	800807c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	69db      	ldr	r3, [r3, #28]
 80080b4:	f003 0310 	and.w	r3, r3, #16
 80080b8:	2b10      	cmp	r3, #16
 80080ba:	d103      	bne.n	80080c4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2210      	movs	r2, #16
 80080c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80080ca:	4619      	mov	r1, r3
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f7ff f997 	bl	8007400 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080d2:	e00b      	b.n	80080ec <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f7f8 fa45 	bl	8000564 <HAL_UART_RxCpltCallback>
}
 80080da:	e007      	b.n	80080ec <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	699a      	ldr	r2, [r3, #24]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f042 0208 	orr.w	r2, r2, #8
 80080ea:	619a      	str	r2, [r3, #24]
}
 80080ec:	bf00      	nop
 80080ee:	3770      	adds	r7, #112	; 0x70
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b09c      	sub	sp, #112	; 0x70
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008102:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800810c:	2b22      	cmp	r3, #34	; 0x22
 800810e:	f040 80b9 	bne.w	8008284 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008118:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008120:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008122:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008126:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800812a:	4013      	ands	r3, r2
 800812c:	b29a      	uxth	r2, r3
 800812e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008130:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008136:	1c9a      	adds	r2, r3, #2
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008142:	b29b      	uxth	r3, r3
 8008144:	3b01      	subs	r3, #1
 8008146:	b29a      	uxth	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008154:	b29b      	uxth	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	f040 809c 	bne.w	8008294 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008164:	e853 3f00 	ldrex	r3, [r3]
 8008168:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800816a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800816c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008170:	667b      	str	r3, [r7, #100]	; 0x64
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800817a:	657b      	str	r3, [r7, #84]	; 0x54
 800817c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008180:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008182:	e841 2300 	strex	r3, r2, [r1]
 8008186:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1e6      	bne.n	800815c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3308      	adds	r3, #8
 8008194:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008198:	e853 3f00 	ldrex	r3, [r3]
 800819c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800819e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a0:	f023 0301 	bic.w	r3, r3, #1
 80081a4:	663b      	str	r3, [r7, #96]	; 0x60
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3308      	adds	r3, #8
 80081ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081ae:	643a      	str	r2, [r7, #64]	; 0x40
 80081b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081b6:	e841 2300 	strex	r3, r2, [r1]
 80081ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1e5      	bne.n	800818e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2220      	movs	r2, #32
 80081c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d018      	beq.n	8008216 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ea:	6a3b      	ldr	r3, [r7, #32]
 80081ec:	e853 3f00 	ldrex	r3, [r3]
 80081f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80081f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	461a      	mov	r2, r3
 8008200:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008202:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008204:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008206:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800820a:	e841 2300 	strex	r3, r2, [r1]
 800820e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1e6      	bne.n	80081e4 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800821a:	2b01      	cmp	r3, #1
 800821c:	d12e      	bne.n	800827c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	e853 3f00 	ldrex	r3, [r3]
 8008230:	60bb      	str	r3, [r7, #8]
   return(result);
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	f023 0310 	bic.w	r3, r3, #16
 8008238:	65bb      	str	r3, [r7, #88]	; 0x58
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	461a      	mov	r2, r3
 8008240:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008242:	61bb      	str	r3, [r7, #24]
 8008244:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008246:	6979      	ldr	r1, [r7, #20]
 8008248:	69ba      	ldr	r2, [r7, #24]
 800824a:	e841 2300 	strex	r3, r2, [r1]
 800824e:	613b      	str	r3, [r7, #16]
   return(result);
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1e6      	bne.n	8008224 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	69db      	ldr	r3, [r3, #28]
 800825c:	f003 0310 	and.w	r3, r3, #16
 8008260:	2b10      	cmp	r3, #16
 8008262:	d103      	bne.n	800826c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2210      	movs	r2, #16
 800826a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008272:	4619      	mov	r1, r3
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f7ff f8c3 	bl	8007400 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800827a:	e00b      	b.n	8008294 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f7f8 f971 	bl	8000564 <HAL_UART_RxCpltCallback>
}
 8008282:	e007      	b.n	8008294 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	699a      	ldr	r2, [r3, #24]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f042 0208 	orr.w	r2, r2, #8
 8008292:	619a      	str	r2, [r3, #24]
}
 8008294:	bf00      	nop
 8008296:	3770      	adds	r7, #112	; 0x70
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80082b8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80082bc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80082c4:	b29a      	uxth	r2, r3
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	43db      	mvns	r3, r3
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	4013      	ands	r3, r2
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3714      	adds	r7, #20
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr

080082e6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80082e6:	b084      	sub	sp, #16
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	f107 0014 	add.w	r0, r7, #20
 80082f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	b004      	add	sp, #16
 8008326:	4770      	bx	lr

08008328 <__errno>:
 8008328:	4b01      	ldr	r3, [pc, #4]	; (8008330 <__errno+0x8>)
 800832a:	6818      	ldr	r0, [r3, #0]
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	2000009c 	.word	0x2000009c

08008334 <__libc_init_array>:
 8008334:	b570      	push	{r4, r5, r6, lr}
 8008336:	4d0d      	ldr	r5, [pc, #52]	; (800836c <__libc_init_array+0x38>)
 8008338:	4c0d      	ldr	r4, [pc, #52]	; (8008370 <__libc_init_array+0x3c>)
 800833a:	1b64      	subs	r4, r4, r5
 800833c:	10a4      	asrs	r4, r4, #2
 800833e:	2600      	movs	r6, #0
 8008340:	42a6      	cmp	r6, r4
 8008342:	d109      	bne.n	8008358 <__libc_init_array+0x24>
 8008344:	4d0b      	ldr	r5, [pc, #44]	; (8008374 <__libc_init_array+0x40>)
 8008346:	4c0c      	ldr	r4, [pc, #48]	; (8008378 <__libc_init_array+0x44>)
 8008348:	f000 f906 	bl	8008558 <_init>
 800834c:	1b64      	subs	r4, r4, r5
 800834e:	10a4      	asrs	r4, r4, #2
 8008350:	2600      	movs	r6, #0
 8008352:	42a6      	cmp	r6, r4
 8008354:	d105      	bne.n	8008362 <__libc_init_array+0x2e>
 8008356:	bd70      	pop	{r4, r5, r6, pc}
 8008358:	f855 3b04 	ldr.w	r3, [r5], #4
 800835c:	4798      	blx	r3
 800835e:	3601      	adds	r6, #1
 8008360:	e7ee      	b.n	8008340 <__libc_init_array+0xc>
 8008362:	f855 3b04 	ldr.w	r3, [r5], #4
 8008366:	4798      	blx	r3
 8008368:	3601      	adds	r6, #1
 800836a:	e7f2      	b.n	8008352 <__libc_init_array+0x1e>
 800836c:	0800b408 	.word	0x0800b408
 8008370:	0800b408 	.word	0x0800b408
 8008374:	0800b408 	.word	0x0800b408
 8008378:	0800b40c 	.word	0x0800b40c

0800837c <malloc>:
 800837c:	4b02      	ldr	r3, [pc, #8]	; (8008388 <malloc+0xc>)
 800837e:	4601      	mov	r1, r0
 8008380:	6818      	ldr	r0, [r3, #0]
 8008382:	f000 b839 	b.w	80083f8 <_malloc_r>
 8008386:	bf00      	nop
 8008388:	2000009c 	.word	0x2000009c

0800838c <memcpy>:
 800838c:	440a      	add	r2, r1
 800838e:	4291      	cmp	r1, r2
 8008390:	f100 33ff 	add.w	r3, r0, #4294967295
 8008394:	d100      	bne.n	8008398 <memcpy+0xc>
 8008396:	4770      	bx	lr
 8008398:	b510      	push	{r4, lr}
 800839a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800839e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083a2:	4291      	cmp	r1, r2
 80083a4:	d1f9      	bne.n	800839a <memcpy+0xe>
 80083a6:	bd10      	pop	{r4, pc}

080083a8 <memset>:
 80083a8:	4402      	add	r2, r0
 80083aa:	4603      	mov	r3, r0
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d100      	bne.n	80083b2 <memset+0xa>
 80083b0:	4770      	bx	lr
 80083b2:	f803 1b01 	strb.w	r1, [r3], #1
 80083b6:	e7f9      	b.n	80083ac <memset+0x4>

080083b8 <sbrk_aligned>:
 80083b8:	b570      	push	{r4, r5, r6, lr}
 80083ba:	4e0e      	ldr	r6, [pc, #56]	; (80083f4 <sbrk_aligned+0x3c>)
 80083bc:	460c      	mov	r4, r1
 80083be:	6831      	ldr	r1, [r6, #0]
 80083c0:	4605      	mov	r5, r0
 80083c2:	b911      	cbnz	r1, 80083ca <sbrk_aligned+0x12>
 80083c4:	f000 f88c 	bl	80084e0 <_sbrk_r>
 80083c8:	6030      	str	r0, [r6, #0]
 80083ca:	4621      	mov	r1, r4
 80083cc:	4628      	mov	r0, r5
 80083ce:	f000 f887 	bl	80084e0 <_sbrk_r>
 80083d2:	1c43      	adds	r3, r0, #1
 80083d4:	d00a      	beq.n	80083ec <sbrk_aligned+0x34>
 80083d6:	1cc4      	adds	r4, r0, #3
 80083d8:	f024 0403 	bic.w	r4, r4, #3
 80083dc:	42a0      	cmp	r0, r4
 80083de:	d007      	beq.n	80083f0 <sbrk_aligned+0x38>
 80083e0:	1a21      	subs	r1, r4, r0
 80083e2:	4628      	mov	r0, r5
 80083e4:	f000 f87c 	bl	80084e0 <_sbrk_r>
 80083e8:	3001      	adds	r0, #1
 80083ea:	d101      	bne.n	80083f0 <sbrk_aligned+0x38>
 80083ec:	f04f 34ff 	mov.w	r4, #4294967295
 80083f0:	4620      	mov	r0, r4
 80083f2:	bd70      	pop	{r4, r5, r6, pc}
 80083f4:	20000750 	.word	0x20000750

080083f8 <_malloc_r>:
 80083f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083fc:	1ccd      	adds	r5, r1, #3
 80083fe:	f025 0503 	bic.w	r5, r5, #3
 8008402:	3508      	adds	r5, #8
 8008404:	2d0c      	cmp	r5, #12
 8008406:	bf38      	it	cc
 8008408:	250c      	movcc	r5, #12
 800840a:	2d00      	cmp	r5, #0
 800840c:	4607      	mov	r7, r0
 800840e:	db01      	blt.n	8008414 <_malloc_r+0x1c>
 8008410:	42a9      	cmp	r1, r5
 8008412:	d905      	bls.n	8008420 <_malloc_r+0x28>
 8008414:	230c      	movs	r3, #12
 8008416:	603b      	str	r3, [r7, #0]
 8008418:	2600      	movs	r6, #0
 800841a:	4630      	mov	r0, r6
 800841c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008420:	4e2e      	ldr	r6, [pc, #184]	; (80084dc <_malloc_r+0xe4>)
 8008422:	f000 f88b 	bl	800853c <__malloc_lock>
 8008426:	6833      	ldr	r3, [r6, #0]
 8008428:	461c      	mov	r4, r3
 800842a:	bb34      	cbnz	r4, 800847a <_malloc_r+0x82>
 800842c:	4629      	mov	r1, r5
 800842e:	4638      	mov	r0, r7
 8008430:	f7ff ffc2 	bl	80083b8 <sbrk_aligned>
 8008434:	1c43      	adds	r3, r0, #1
 8008436:	4604      	mov	r4, r0
 8008438:	d14d      	bne.n	80084d6 <_malloc_r+0xde>
 800843a:	6834      	ldr	r4, [r6, #0]
 800843c:	4626      	mov	r6, r4
 800843e:	2e00      	cmp	r6, #0
 8008440:	d140      	bne.n	80084c4 <_malloc_r+0xcc>
 8008442:	6823      	ldr	r3, [r4, #0]
 8008444:	4631      	mov	r1, r6
 8008446:	4638      	mov	r0, r7
 8008448:	eb04 0803 	add.w	r8, r4, r3
 800844c:	f000 f848 	bl	80084e0 <_sbrk_r>
 8008450:	4580      	cmp	r8, r0
 8008452:	d13a      	bne.n	80084ca <_malloc_r+0xd2>
 8008454:	6821      	ldr	r1, [r4, #0]
 8008456:	3503      	adds	r5, #3
 8008458:	1a6d      	subs	r5, r5, r1
 800845a:	f025 0503 	bic.w	r5, r5, #3
 800845e:	3508      	adds	r5, #8
 8008460:	2d0c      	cmp	r5, #12
 8008462:	bf38      	it	cc
 8008464:	250c      	movcc	r5, #12
 8008466:	4629      	mov	r1, r5
 8008468:	4638      	mov	r0, r7
 800846a:	f7ff ffa5 	bl	80083b8 <sbrk_aligned>
 800846e:	3001      	adds	r0, #1
 8008470:	d02b      	beq.n	80084ca <_malloc_r+0xd2>
 8008472:	6823      	ldr	r3, [r4, #0]
 8008474:	442b      	add	r3, r5
 8008476:	6023      	str	r3, [r4, #0]
 8008478:	e00e      	b.n	8008498 <_malloc_r+0xa0>
 800847a:	6822      	ldr	r2, [r4, #0]
 800847c:	1b52      	subs	r2, r2, r5
 800847e:	d41e      	bmi.n	80084be <_malloc_r+0xc6>
 8008480:	2a0b      	cmp	r2, #11
 8008482:	d916      	bls.n	80084b2 <_malloc_r+0xba>
 8008484:	1961      	adds	r1, r4, r5
 8008486:	42a3      	cmp	r3, r4
 8008488:	6025      	str	r5, [r4, #0]
 800848a:	bf18      	it	ne
 800848c:	6059      	strne	r1, [r3, #4]
 800848e:	6863      	ldr	r3, [r4, #4]
 8008490:	bf08      	it	eq
 8008492:	6031      	streq	r1, [r6, #0]
 8008494:	5162      	str	r2, [r4, r5]
 8008496:	604b      	str	r3, [r1, #4]
 8008498:	4638      	mov	r0, r7
 800849a:	f104 060b 	add.w	r6, r4, #11
 800849e:	f000 f853 	bl	8008548 <__malloc_unlock>
 80084a2:	f026 0607 	bic.w	r6, r6, #7
 80084a6:	1d23      	adds	r3, r4, #4
 80084a8:	1af2      	subs	r2, r6, r3
 80084aa:	d0b6      	beq.n	800841a <_malloc_r+0x22>
 80084ac:	1b9b      	subs	r3, r3, r6
 80084ae:	50a3      	str	r3, [r4, r2]
 80084b0:	e7b3      	b.n	800841a <_malloc_r+0x22>
 80084b2:	6862      	ldr	r2, [r4, #4]
 80084b4:	42a3      	cmp	r3, r4
 80084b6:	bf0c      	ite	eq
 80084b8:	6032      	streq	r2, [r6, #0]
 80084ba:	605a      	strne	r2, [r3, #4]
 80084bc:	e7ec      	b.n	8008498 <_malloc_r+0xa0>
 80084be:	4623      	mov	r3, r4
 80084c0:	6864      	ldr	r4, [r4, #4]
 80084c2:	e7b2      	b.n	800842a <_malloc_r+0x32>
 80084c4:	4634      	mov	r4, r6
 80084c6:	6876      	ldr	r6, [r6, #4]
 80084c8:	e7b9      	b.n	800843e <_malloc_r+0x46>
 80084ca:	230c      	movs	r3, #12
 80084cc:	603b      	str	r3, [r7, #0]
 80084ce:	4638      	mov	r0, r7
 80084d0:	f000 f83a 	bl	8008548 <__malloc_unlock>
 80084d4:	e7a1      	b.n	800841a <_malloc_r+0x22>
 80084d6:	6025      	str	r5, [r4, #0]
 80084d8:	e7de      	b.n	8008498 <_malloc_r+0xa0>
 80084da:	bf00      	nop
 80084dc:	2000074c 	.word	0x2000074c

080084e0 <_sbrk_r>:
 80084e0:	b538      	push	{r3, r4, r5, lr}
 80084e2:	4d06      	ldr	r5, [pc, #24]	; (80084fc <_sbrk_r+0x1c>)
 80084e4:	2300      	movs	r3, #0
 80084e6:	4604      	mov	r4, r0
 80084e8:	4608      	mov	r0, r1
 80084ea:	602b      	str	r3, [r5, #0]
 80084ec:	f7f9 fbc8 	bl	8001c80 <_sbrk>
 80084f0:	1c43      	adds	r3, r0, #1
 80084f2:	d102      	bne.n	80084fa <_sbrk_r+0x1a>
 80084f4:	682b      	ldr	r3, [r5, #0]
 80084f6:	b103      	cbz	r3, 80084fa <_sbrk_r+0x1a>
 80084f8:	6023      	str	r3, [r4, #0]
 80084fa:	bd38      	pop	{r3, r4, r5, pc}
 80084fc:	20000754 	.word	0x20000754

08008500 <strdup>:
 8008500:	4b02      	ldr	r3, [pc, #8]	; (800850c <strdup+0xc>)
 8008502:	4601      	mov	r1, r0
 8008504:	6818      	ldr	r0, [r3, #0]
 8008506:	f000 b803 	b.w	8008510 <_strdup_r>
 800850a:	bf00      	nop
 800850c:	2000009c 	.word	0x2000009c

08008510 <_strdup_r>:
 8008510:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008512:	4604      	mov	r4, r0
 8008514:	4608      	mov	r0, r1
 8008516:	460d      	mov	r5, r1
 8008518:	f7f7 fe60 	bl	80001dc <strlen>
 800851c:	1c42      	adds	r2, r0, #1
 800851e:	4611      	mov	r1, r2
 8008520:	4620      	mov	r0, r4
 8008522:	9201      	str	r2, [sp, #4]
 8008524:	f7ff ff68 	bl	80083f8 <_malloc_r>
 8008528:	4604      	mov	r4, r0
 800852a:	b118      	cbz	r0, 8008534 <_strdup_r+0x24>
 800852c:	9a01      	ldr	r2, [sp, #4]
 800852e:	4629      	mov	r1, r5
 8008530:	f7ff ff2c 	bl	800838c <memcpy>
 8008534:	4620      	mov	r0, r4
 8008536:	b003      	add	sp, #12
 8008538:	bd30      	pop	{r4, r5, pc}
	...

0800853c <__malloc_lock>:
 800853c:	4801      	ldr	r0, [pc, #4]	; (8008544 <__malloc_lock+0x8>)
 800853e:	f000 b809 	b.w	8008554 <__retarget_lock_acquire_recursive>
 8008542:	bf00      	nop
 8008544:	20000758 	.word	0x20000758

08008548 <__malloc_unlock>:
 8008548:	4801      	ldr	r0, [pc, #4]	; (8008550 <__malloc_unlock+0x8>)
 800854a:	f000 b804 	b.w	8008556 <__retarget_lock_release_recursive>
 800854e:	bf00      	nop
 8008550:	20000758 	.word	0x20000758

08008554 <__retarget_lock_acquire_recursive>:
 8008554:	4770      	bx	lr

08008556 <__retarget_lock_release_recursive>:
 8008556:	4770      	bx	lr

08008558 <_init>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	bf00      	nop
 800855c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855e:	bc08      	pop	{r3}
 8008560:	469e      	mov	lr, r3
 8008562:	4770      	bx	lr

08008564 <_fini>:
 8008564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008566:	bf00      	nop
 8008568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800856a:	bc08      	pop	{r3}
 800856c:	469e      	mov	lr, r3
 800856e:	4770      	bx	lr
